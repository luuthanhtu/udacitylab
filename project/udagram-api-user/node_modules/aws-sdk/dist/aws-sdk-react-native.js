(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["AWS"] = factory();
	else
		root["AWS"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);

	__webpack_require__(49);
	module.exports = AWS;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var AWS = __webpack_require__(4);

	AWS.util.isBrowser = function() { return true; };
	AWS.util.isNode = function() { return false; };

	// react-native specific modules
	AWS.util.crypto.lib = __webpack_require__(5);
	AWS.util.Buffer = __webpack_require__(8).Buffer;
	AWS.util.url = __webpack_require__(15);
	AWS.util.querystring = __webpack_require__(18);
	AWS.util.realClock = __webpack_require__(21);
	AWS.util.environment = 'js-react-native';
	AWS.util.createEventStream = __webpack_require__(22).createEventStream;

	/**
	 * @api private
	 */
	module.exports = AWS;

	__webpack_require__(28);
	__webpack_require__(29);
	__webpack_require__(30);
	__webpack_require__(36);
	__webpack_require__(37);
	__webpack_require__(38);
	__webpack_require__(42);

	// Load the DOMParser XML parser
	AWS.XML.Parser = __webpack_require__(43);

	// Load the XHR HttpClient
	__webpack_require__(45);

	// add custom request event handlers
	var addContentType = __webpack_require__(48).addContentType;
	AWS.EventListeners.Core.addNamedListeners(function(add) {
	  add('ADD_CONTENT_TYPE', 'afterBuild', addContentType);
	});

	if (typeof process === 'undefined') {
	  process = {};
	}
	process.browser = true;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 3 */
/***/ (function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;

	process.listeners = function (name) { return [] }

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define([], factory);
		else if(typeof exports === 'object')
			exports["AWS"] = factory();
		else
			root["AWS"] = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};

	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {

	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;

	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};

	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;

	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}


	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;

	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;

	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";

	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, exports, __webpack_require__) {

		module.exports = __webpack_require__(1);


	/***/ }),
	/* 1 */
	/***/ (function(module, exports, __webpack_require__) {

		/**
		 * The main AWS namespace
		 */
		var AWS = { util: __webpack_require__(2) };

		/**
		 * @api private
		 * @!macro [new] nobrowser
		 *   @note This feature is not supported in the browser environment of the SDK.
		 */
		var _hidden = {}; _hidden.toString(); // hack to parse macro

		/**
		 * @api private
		 */
		module.exports = AWS;

		AWS.util.update(AWS, {

		  /**
		   * @constant
		   */
		  VERSION: '2.953.0',

		  /**
		   * @api private
		   */
		  Signers: {},

		  /**
		   * @api private
		   */
		  Protocol: {
		    Json: __webpack_require__(13),
		    Query: __webpack_require__(17),
		    Rest: __webpack_require__(21),
		    RestJson: __webpack_require__(22),
		    RestXml: __webpack_require__(23)
		  },

		  /**
		   * @api private
		   */
		  XML: {
		    Builder: __webpack_require__(24),
		    Parser: null // conditionally set based on environment
		  },

		  /**
		   * @api private
		   */
		  JSON: {
		    Builder: __webpack_require__(14),
		    Parser: __webpack_require__(15)
		  },

		  /**
		   * @api private
		   */
		  Model: {
		    Api: __webpack_require__(29),
		    Operation: __webpack_require__(30),
		    Shape: __webpack_require__(19),
		    Paginator: __webpack_require__(31),
		    ResourceWaiter: __webpack_require__(32)
		  },

		  /**
		   * @api private
		   */
		  apiLoader: __webpack_require__(33),

		  /**
		   * @api private
		   */
		  EndpointCache: __webpack_require__(34).EndpointCache
		});
		__webpack_require__(36);
		__webpack_require__(37);
		__webpack_require__(40);
		__webpack_require__(43);
		__webpack_require__(44);
		__webpack_require__(49);
		__webpack_require__(52);
		__webpack_require__(53);
		__webpack_require__(54);
		__webpack_require__(62);

		/**
		 * @readonly
		 * @return [AWS.SequentialExecutor] a collection of global event listeners that
		 *   are attached to every sent request.
		 * @see AWS.Request AWS.Request for a list of events to listen for
		 * @example Logging the time taken to send a request
		 *   AWS.events.on('send', function startSend(resp) {
		 *     resp.startTime = new Date().getTime();
		 *   }).on('complete', function calculateTime(resp) {
		 *     var time = (new Date().getTime() - resp.startTime) / 1000;
		 *     console.log('Request took ' + time + ' seconds');
		 *   });
		 *
		 *   new AWS.S3().listBuckets(); // prints 'Request took 0.285 seconds'
		 */
		AWS.events = new AWS.SequentialExecutor();

		//create endpoint cache lazily
		AWS.util.memoizedProperty(AWS, 'endpointCache', function() {
		  return new AWS.EndpointCache(AWS.config.endpointCacheSize);
		}, true);


	/***/ }),
	/* 2 */
	/***/ (function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process, setImmediate) {/* eslint guard-for-in:0 */
		var AWS;

		/**
		 * A set of utility methods for use with the AWS SDK.
		 *
		 * @!attribute abort
		 *   Return this value from an iterator function {each} or {arrayEach}
		 *   to break out of the iteration.
		 *   @example Breaking out of an iterator function
		 *     AWS.util.each({a: 1, b: 2, c: 3}, function(key, value) {
		 *       if (key == 'b') return AWS.util.abort;
		 *     });
		 *   @see each
		 *   @see arrayEach
		 * @api private
		 */
		var util = {
		  environment: 'nodejs',
		  engine: function engine() {
		    if (util.isBrowser() && typeof navigator !== 'undefined') {
		      return navigator.userAgent;
		    } else {
		      var engine = process.platform + '/' + process.version;
		      if (process.env.AWS_EXECUTION_ENV) {
		        engine += ' exec-env/' + process.env.AWS_EXECUTION_ENV;
		      }
		      return engine;
		    }
		  },

		  userAgent: function userAgent() {
		    var name = util.environment;
		    var agent = 'aws-sdk-' + name + '/' + __webpack_require__(1).VERSION;
		    if (name === 'nodejs') agent += ' ' + util.engine();
		    return agent;
		  },

		  uriEscape: function uriEscape(string) {
		    var output = encodeURIComponent(string);
		    output = output.replace(/[^A-Za-z0-9_.~\-%]+/g, escape);

		    // AWS percent-encodes some extra non-standard characters in a URI
		    output = output.replace(/[*]/g, function(ch) {
		      return '%' + ch.charCodeAt(0).toString(16).toUpperCase();
		    });

		    return output;
		  },

		  uriEscapePath: function uriEscapePath(string) {
		    var parts = [];
		    util.arrayEach(string.split('/'), function (part) {
		      parts.push(util.uriEscape(part));
		    });
		    return parts.join('/');
		  },

		  urlParse: function urlParse(url) {
		    return util.url.parse(url);
		  },

		  urlFormat: function urlFormat(url) {
		    return util.url.format(url);
		  },

		  queryStringParse: function queryStringParse(qs) {
		    return util.querystring.parse(qs);
		  },

		  queryParamsToString: function queryParamsToString(params) {
		    var items = [];
		    var escape = util.uriEscape;
		    var sortedKeys = Object.keys(params).sort();

		    util.arrayEach(sortedKeys, function(name) {
		      var value = params[name];
		      var ename = escape(name);
		      var result = ename + '=';
		      if (Array.isArray(value)) {
		        var vals = [];
		        util.arrayEach(value, function(item) { vals.push(escape(item)); });
		        result = ename + '=' + vals.sort().join('&' + ename + '=');
		      } else if (value !== undefined && value !== null) {
		        result = ename + '=' + escape(value);
		      }
		      items.push(result);
		    });

		    return items.join('&');
		  },

		  readFileSync: function readFileSync(path) {
		    if (util.isBrowser()) return null;
		    return __webpack_require__(6).readFileSync(path, 'utf-8');
		  },

		  base64: {
		    encode: function encode64(string) {
		      if (typeof string === 'number') {
		        throw util.error(new Error('Cannot base64 encode number ' + string));
		      }
		      if (string === null || typeof string === 'undefined') {
		        return string;
		      }
		      var buf = util.buffer.toBuffer(string);
		      return buf.toString('base64');
		    },

		    decode: function decode64(string) {
		      if (typeof string === 'number') {
		        throw util.error(new Error('Cannot base64 decode number ' + string));
		      }
		      if (string === null || typeof string === 'undefined') {
		        return string;
		      }
		      return util.buffer.toBuffer(string, 'base64');
		    }

		  },

		  buffer: {
		    /**
		     * Buffer constructor for Node buffer and buffer pollyfill
		     */
		    toBuffer: function(data, encoding) {
		      return (typeof util.Buffer.from === 'function' && util.Buffer.from !== Uint8Array.from) ?
		        util.Buffer.from(data, encoding) : new util.Buffer(data, encoding);
		    },

		    alloc: function(size, fill, encoding) {
		      if (typeof size !== 'number') {
		        throw new Error('size passed to alloc must be a number.');
		      }
		      if (typeof util.Buffer.alloc === 'function') {
		        return util.Buffer.alloc(size, fill, encoding);
		      } else {
		        var buf = new util.Buffer(size);
		        if (fill !== undefined && typeof buf.fill === 'function') {
		          buf.fill(fill, undefined, undefined, encoding);
		        }
		        return buf;
		      }
		    },

		    toStream: function toStream(buffer) {
		      if (!util.Buffer.isBuffer(buffer)) buffer =  util.buffer.toBuffer(buffer);

		      var readable = new (util.stream.Readable)();
		      var pos = 0;
		      readable._read = function(size) {
		        if (pos >= buffer.length) return readable.push(null);

		        var end = pos + size;
		        if (end > buffer.length) end = buffer.length;
		        readable.push(buffer.slice(pos, end));
		        pos = end;
		      };

		      return readable;
		    },

		    /**
		     * Concatenates a list of Buffer objects.
		     */
		    concat: function(buffers) {
		      var length = 0,
		          offset = 0,
		          buffer = null, i;

		      for (i = 0; i < buffers.length; i++) {
		        length += buffers[i].length;
		      }

		      buffer = util.buffer.alloc(length);

		      for (i = 0; i < buffers.length; i++) {
		        buffers[i].copy(buffer, offset);
		        offset += buffers[i].length;
		      }

		      return buffer;
		    }
		  },

		  string: {
		    byteLength: function byteLength(string) {
		      if (string === null || string === undefined) return 0;
		      if (typeof string === 'string') string = util.buffer.toBuffer(string);

		      if (typeof string.byteLength === 'number') {
		        return string.byteLength;
		      } else if (typeof string.length === 'number') {
		        return string.length;
		      } else if (typeof string.size === 'number') {
		        return string.size;
		      } else if (typeof string.path === 'string') {
		        return __webpack_require__(6).lstatSync(string.path).size;
		      } else {
		        throw util.error(new Error('Cannot determine length of ' + string),
		          { object: string });
		      }
		    },

		    upperFirst: function upperFirst(string) {
		      return string[0].toUpperCase() + string.substr(1);
		    },

		    lowerFirst: function lowerFirst(string) {
		      return string[0].toLowerCase() + string.substr(1);
		    }
		  },

		  ini: {
		    parse: function string(ini) {
		      var currentSection, map = {};
		      util.arrayEach(ini.split(/\r?\n/), function(line) {
		        line = line.split(/(^|\s)[;#]/)[0]; // remove comments
		        var section = line.match(/^\s*\[([^\[\]]+)\]\s*$/);
		        if (section) {
		          currentSection = section[1];
		          if (currentSection === '__proto__' || currentSection.split(/\s/)[1] === '__proto__') {
		            throw util.error(
		              new Error('Cannot load profile name \'' + currentSection + '\' from shared ini file.')
		            );
		          }
		        } else if (currentSection) {
		          var item = line.match(/^\s*(.+?)\s*=\s*(.+?)\s*$/);
		          if (item) {
		            map[currentSection] = map[currentSection] || {};
		            map[currentSection][item[1]] = item[2];
		          }
		        }
		      });

		      return map;
		    }
		  },

		  fn: {
		    noop: function() {},
		    callback: function (err) { if (err) throw err; },

		    /**
		     * Turn a synchronous function into as "async" function by making it call
		     * a callback. The underlying function is called with all but the last argument,
		     * which is treated as the callback. The callback is passed passed a first argument
		     * of null on success to mimick standard node callbacks.
		     */
		    makeAsync: function makeAsync(fn, expectedArgs) {
		      if (expectedArgs && expectedArgs <= fn.length) {
		        return fn;
		      }

		      return function() {
		        var args = Array.prototype.slice.call(arguments, 0);
		        var callback = args.pop();
		        var result = fn.apply(null, args);
		        callback(result);
		      };
		    }
		  },

		  /**
		   * Date and time utility functions.
		   */
		  date: {

		    /**
		     * @return [Date] the current JavaScript date object. Since all
		     *   AWS services rely on this date object, you can override
		     *   this function to provide a special time value to AWS service
		     *   requests.
		     */
		    getDate: function getDate() {
		      if (!AWS) AWS = __webpack_require__(1);
		      if (AWS.config.systemClockOffset) { // use offset when non-zero
		        return new Date(new Date().getTime() + AWS.config.systemClockOffset);
		      } else {
		        return new Date();
		      }
		    },

		    /**
		     * @return [String] the date in ISO-8601 format
		     */
		    iso8601: function iso8601(date) {
		      if (date === undefined) { date = util.date.getDate(); }
		      return date.toISOString().replace(/\.\d{3}Z$/, 'Z');
		    },

		    /**
		     * @return [String] the date in RFC 822 format
		     */
		    rfc822: function rfc822(date) {
		      if (date === undefined) { date = util.date.getDate(); }
		      return date.toUTCString();
		    },

		    /**
		     * @return [Integer] the UNIX timestamp value for the current time
		     */
		    unixTimestamp: function unixTimestamp(date) {
		      if (date === undefined) { date = util.date.getDate(); }
		      return date.getTime() / 1000;
		    },

		    /**
		     * @param [String,number,Date] date
		     * @return [Date]
		     */
		    from: function format(date) {
		      if (typeof date === 'number') {
		        return new Date(date * 1000); // unix timestamp
		      } else {
		        return new Date(date);
		      }
		    },

		    /**
		     * Given a Date or date-like value, this function formats the
		     * date into a string of the requested value.
		     * @param [String,number,Date] date
		     * @param [String] formatter Valid formats are:
		     #   * 'iso8601'
		     #   * 'rfc822'
		     #   * 'unixTimestamp'
		     * @return [String]
		     */
		    format: function format(date, formatter) {
		      if (!formatter) formatter = 'iso8601';
		      return util.date[formatter](util.date.from(date));
		    },

		    parseTimestamp: function parseTimestamp(value) {
		      if (typeof value === 'number') { // unix timestamp (number)
		        return new Date(value * 1000);
		      } else if (value.match(/^\d+$/)) { // unix timestamp
		        return new Date(value * 1000);
		      } else if (value.match(/^\d{4}/)) { // iso8601
		        return new Date(value);
		      } else if (value.match(/^\w{3},/)) { // rfc822
		        return new Date(value);
		      } else {
		        throw util.error(
		          new Error('unhandled timestamp format: ' + value),
		          {code: 'TimestampParserError'});
		      }
		    }

		  },

		  crypto: {
		    crc32Table: [
		     0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419,
		     0x706AF48F, 0xE963A535, 0x9E6495A3, 0x0EDB8832, 0x79DCB8A4,
		     0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07,
		     0x90BF1D91, 0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE,
		     0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7, 0x136C9856,
		     0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9,
		     0xFA0F3D63, 0x8D080DF5, 0x3B6E20C8, 0x4C69105E, 0xD56041E4,
		     0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,
		     0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3,
		     0x45DF5C75, 0xDCD60DCF, 0xABD13D59, 0x26D930AC, 0x51DE003A,
		     0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599,
		     0xB8BDA50F, 0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,
		     0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D, 0x76DC4190,
		     0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F,
		     0x9FBFE4A5, 0xE8B8D433, 0x7807C9A2, 0x0F00F934, 0x9609A88E,
		     0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,
		     0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED,
		     0x1B01A57B, 0x8208F4C1, 0xF50FC457, 0x65B0D9C6, 0x12B7E950,
		     0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3,
		     0xFBD44C65, 0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2,
		     0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 0x4369E96A,
		     0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5,
		     0xAA0A4C5F, 0xDD0D7CC9, 0x5005713C, 0x270241AA, 0xBE0B1010,
		     0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,
		     0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17,
		     0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD, 0xEDB88320, 0x9ABFB3B6,
		     0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615,
		     0x73DC1683, 0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,
		     0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, 0xF00F9344,
		     0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB,
		     0x196C3671, 0x6E6B06E7, 0xFED41B76, 0x89D32BE0, 0x10DA7A5A,
		     0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,
		     0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1,
		     0xA6BC5767, 0x3FB506DD, 0x48B2364B, 0xD80D2BDA, 0xAF0A1B4C,
		     0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF,
		     0x4669BE79, 0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,
		     0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 0xC5BA3BBE,
		     0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31,
		     0x2CD99E8B, 0x5BDEAE1D, 0x9B64C2B0, 0xEC63F226, 0x756AA39C,
		     0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,
		     0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B,
		     0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 0x86D3D2D4, 0xF1D4E242,
		     0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1,
		     0x18B74777, 0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C,
		     0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45, 0xA00AE278,
		     0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7,
		     0x4969474D, 0x3E6E77DB, 0xAED16A4A, 0xD9D65ADC, 0x40DF0B66,
		     0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,
		     0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605,
		     0xCDD70693, 0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8,
		     0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B,
		     0x2D02EF8D],

		    crc32: function crc32(data) {
		      var tbl = util.crypto.crc32Table;
		      var crc = 0 ^ -1;

		      if (typeof data === 'string') {
		        data = util.buffer.toBuffer(data);
		      }

		      for (var i = 0; i < data.length; i++) {
		        var code = data.readUInt8(i);
		        crc = (crc >>> 8) ^ tbl[(crc ^ code) & 0xFF];
		      }
		      return (crc ^ -1) >>> 0;
		    },

		    hmac: function hmac(key, string, digest, fn) {
		      if (!digest) digest = 'binary';
		      if (digest === 'buffer') { digest = undefined; }
		      if (!fn) fn = 'sha256';
		      if (typeof string === 'string') string = util.buffer.toBuffer(string);
		      return util.crypto.lib.createHmac(fn, key).update(string).digest(digest);
		    },

		    md5: function md5(data, digest, callback) {
		      return util.crypto.hash('md5', data, digest, callback);
		    },

		    sha256: function sha256(data, digest, callback) {
		      return util.crypto.hash('sha256', data, digest, callback);
		    },

		    hash: function(algorithm, data, digest, callback) {
		      var hash = util.crypto.createHash(algorithm);
		      if (!digest) { digest = 'binary'; }
		      if (digest === 'buffer') { digest = undefined; }
		      if (typeof data === 'string') data = util.buffer.toBuffer(data);
		      var sliceFn = util.arraySliceFn(data);
		      var isBuffer = util.Buffer.isBuffer(data);
		      //Identifying objects with an ArrayBuffer as buffers
		      if (util.isBrowser() && typeof ArrayBuffer !== 'undefined' && data && data.buffer instanceof ArrayBuffer) isBuffer = true;

		      if (callback && typeof data === 'object' &&
		          typeof data.on === 'function' && !isBuffer) {
		        data.on('data', function(chunk) { hash.update(chunk); });
		        data.on('error', function(err) { callback(err); });
		        data.on('end', function() { callback(null, hash.digest(digest)); });
		      } else if (callback && sliceFn && !isBuffer &&
		                 typeof FileReader !== 'undefined') {
		        // this might be a File/Blob
		        var index = 0, size = 1024 * 512;
		        var reader = new FileReader();
		        reader.onerror = function() {
		          callback(new Error('Failed to read data.'));
		        };
		        reader.onload = function() {
		          var buf = new util.Buffer(new Uint8Array(reader.result));
		          hash.update(buf);
		          index += buf.length;
		          reader._continueReading();
		        };
		        reader._continueReading = function() {
		          if (index >= data.size) {
		            callback(null, hash.digest(digest));
		            return;
		          }

		          var back = index + size;
		          if (back > data.size) back = data.size;
		          reader.readAsArrayBuffer(sliceFn.call(data, index, back));
		        };

		        reader._continueReading();
		      } else {
		        if (util.isBrowser() && typeof data === 'object' && !isBuffer) {
		          data = new util.Buffer(new Uint8Array(data));
		        }
		        var out = hash.update(data).digest(digest);
		        if (callback) callback(null, out);
		        return out;
		      }
		    },

		    toHex: function toHex(data) {
		      var out = [];
		      for (var i = 0; i < data.length; i++) {
		        out.push(('0' + data.charCodeAt(i).toString(16)).substr(-2, 2));
		      }
		      return out.join('');
		    },

		    createHash: function createHash(algorithm) {
		      return util.crypto.lib.createHash(algorithm);
		    }

		  },

		  /** @!ignore */

		  /* Abort constant */
		  abort: {},

		  each: function each(object, iterFunction) {
		    for (var key in object) {
		      if (Object.prototype.hasOwnProperty.call(object, key)) {
		        var ret = iterFunction.call(this, key, object[key]);
		        if (ret === util.abort) break;
		      }
		    }
		  },

		  arrayEach: function arrayEach(array, iterFunction) {
		    for (var idx in array) {
		      if (Object.prototype.hasOwnProperty.call(array, idx)) {
		        var ret = iterFunction.call(this, array[idx], parseInt(idx, 10));
		        if (ret === util.abort) break;
		      }
		    }
		  },

		  update: function update(obj1, obj2) {
		    util.each(obj2, function iterator(key, item) {
		      obj1[key] = item;
		    });
		    return obj1;
		  },

		  merge: function merge(obj1, obj2) {
		    return util.update(util.copy(obj1), obj2);
		  },

		  copy: function copy(object) {
		    if (object === null || object === undefined) return object;
		    var dupe = {};
		    // jshint forin:false
		    for (var key in object) {
		      dupe[key] = object[key];
		    }
		    return dupe;
		  },

		  isEmpty: function isEmpty(obj) {
		    for (var prop in obj) {
		      if (Object.prototype.hasOwnProperty.call(obj, prop)) {
		        return false;
		      }
		    }
		    return true;
		  },

		  arraySliceFn: function arraySliceFn(obj) {
		    var fn = obj.slice || obj.webkitSlice || obj.mozSlice;
		    return typeof fn === 'function' ? fn : null;
		  },

		  isType: function isType(obj, type) {
		    // handle cross-"frame" objects
		    if (typeof type === 'function') type = util.typeName(type);
		    return Object.prototype.toString.call(obj) === '[object ' + type + ']';
		  },

		  typeName: function typeName(type) {
		    if (Object.prototype.hasOwnProperty.call(type, 'name')) return type.name;
		    var str = type.toString();
		    var match = str.match(/^\s*function (.+)\(/);
		    return match ? match[1] : str;
		  },

		  error: function error(err, options) {
		    var originalError = null;
		    if (typeof err.message === 'string' && err.message !== '') {
		      if (typeof options === 'string' || (options && options.message)) {
		        originalError = util.copy(err);
		        originalError.message = err.message;
		      }
		    }
		    err.message = err.message || null;

		    if (typeof options === 'string') {
		      err.message = options;
		    } else if (typeof options === 'object' && options !== null) {
		      util.update(err, options);
		      if (options.message)
		        err.message = options.message;
		      if (options.code || options.name)
		        err.code = options.code || options.name;
		      if (options.stack)
		        err.stack = options.stack;
		    }

		    if (typeof Object.defineProperty === 'function') {
		      Object.defineProperty(err, 'name', {writable: true, enumerable: false});
		      Object.defineProperty(err, 'message', {enumerable: true});
		    }

		    err.name = String(options && options.name || err.name || err.code || 'Error');
		    err.time = new Date();

		    if (originalError) err.originalError = originalError;

		    return err;
		  },

		  /**
		   * @api private
		   */
		  inherit: function inherit(klass, features) {
		    var newObject = null;
		    if (features === undefined) {
		      features = klass;
		      klass = Object;
		      newObject = {};
		    } else {
		      var ctor = function ConstructorWrapper() {};
		      ctor.prototype = klass.prototype;
		      newObject = new ctor();
		    }

		    // constructor not supplied, create pass-through ctor
		    if (features.constructor === Object) {
		      features.constructor = function() {
		        if (klass !== Object) {
		          return klass.apply(this, arguments);
		        }
		      };
		    }

		    features.constructor.prototype = newObject;
		    util.update(features.constructor.prototype, features);
		    features.constructor.__super__ = klass;
		    return features.constructor;
		  },

		  /**
		   * @api private
		   */
		  mixin: function mixin() {
		    var klass = arguments[0];
		    for (var i = 1; i < arguments.length; i++) {
		      // jshint forin:false
		      for (var prop in arguments[i].prototype) {
		        var fn = arguments[i].prototype[prop];
		        if (prop !== 'constructor') {
		          klass.prototype[prop] = fn;
		        }
		      }
		    }
		    return klass;
		  },

		  /**
		   * @api private
		   */
		  hideProperties: function hideProperties(obj, props) {
		    if (typeof Object.defineProperty !== 'function') return;

		    util.arrayEach(props, function (key) {
		      Object.defineProperty(obj, key, {
		        enumerable: false, writable: true, configurable: true });
		    });
		  },

		  /**
		   * @api private
		   */
		  property: function property(obj, name, value, enumerable, isValue) {
		    var opts = {
		      configurable: true,
		      enumerable: enumerable !== undefined ? enumerable : true
		    };
		    if (typeof value === 'function' && !isValue) {
		      opts.get = value;
		    }
		    else {
		      opts.value = value; opts.writable = true;
		    }

		    Object.defineProperty(obj, name, opts);
		  },

		  /**
		   * @api private
		   */
		  memoizedProperty: function memoizedProperty(obj, name, get, enumerable) {
		    var cachedValue = null;

		    // build enumerable attribute for each value with lazy accessor.
		    util.property(obj, name, function() {
		      if (cachedValue === null) {
		        cachedValue = get();
		      }
		      return cachedValue;
		    }, enumerable);
		  },

		  /**
		   * TODO Remove in major version revision
		   * This backfill populates response data without the
		   * top-level payload name.
		   *
		   * @api private
		   */
		  hoistPayloadMember: function hoistPayloadMember(resp) {
		    var req = resp.request;
		    var operationName = req.operation;
		    var operation = req.service.api.operations[operationName];
		    var output = operation.output;
		    if (output.payload && !operation.hasEventOutput) {
		      var payloadMember = output.members[output.payload];
		      var responsePayload = resp.data[output.payload];
		      if (payloadMember.type === 'structure') {
		        util.each(responsePayload, function(key, value) {
		          util.property(resp.data, key, value, false);
		        });
		      }
		    }
		  },

		  /**
		   * Compute SHA-256 checksums of streams
		   *
		   * @api private
		   */
		  computeSha256: function computeSha256(body, done) {
		    if (util.isNode()) {
		      var Stream = util.stream.Stream;
		      var fs = __webpack_require__(6);
		      if (typeof Stream === 'function' && body instanceof Stream) {
		        if (typeof body.path === 'string') { // assume file object
		          var settings = {};
		          if (typeof body.start === 'number') {
		            settings.start = body.start;
		          }
		          if (typeof body.end === 'number') {
		            settings.end = body.end;
		          }
		          body = fs.createReadStream(body.path, settings);
		        } else { // TODO support other stream types
		          return done(new Error('Non-file stream objects are ' +
		                                'not supported with SigV4'));
		        }
		      }
		    }

		    util.crypto.sha256(body, 'hex', function(err, sha) {
		      if (err) done(err);
		      else done(null, sha);
		    });
		  },

		  /**
		   * @api private
		   */
		  isClockSkewed: function isClockSkewed(serverTime) {
		    if (serverTime) {
		      util.property(AWS.config, 'isClockSkewed',
		        Math.abs(new Date().getTime() - serverTime) >= 300000, false);
		      return AWS.config.isClockSkewed;
		    }
		  },

		  applyClockOffset: function applyClockOffset(serverTime) {
		    if (serverTime)
		      AWS.config.systemClockOffset = serverTime - new Date().getTime();
		  },

		  /**
		   * @api private
		   */
		  extractRequestId: function extractRequestId(resp) {
		    var requestId = resp.httpResponse.headers['x-amz-request-id'] ||
		                     resp.httpResponse.headers['x-amzn-requestid'];

		    if (!requestId && resp.data && resp.data.ResponseMetadata) {
		      requestId = resp.data.ResponseMetadata.RequestId;
		    }

		    if (requestId) {
		      resp.requestId = requestId;
		    }

		    if (resp.error) {
		      resp.error.requestId = requestId;
		    }
		  },

		  /**
		   * @api private
		   */
		  addPromises: function addPromises(constructors, PromiseDependency) {
		    var deletePromises = false;
		    if (PromiseDependency === undefined && AWS && AWS.config) {
		      PromiseDependency = AWS.config.getPromisesDependency();
		    }
		    if (PromiseDependency === undefined && typeof Promise !== 'undefined') {
		      PromiseDependency = Promise;
		    }
		    if (typeof PromiseDependency !== 'function') deletePromises = true;
		    if (!Array.isArray(constructors)) constructors = [constructors];

		    for (var ind = 0; ind < constructors.length; ind++) {
		      var constructor = constructors[ind];
		      if (deletePromises) {
		        if (constructor.deletePromisesFromClass) {
		          constructor.deletePromisesFromClass();
		        }
		      } else if (constructor.addPromisesToClass) {
		        constructor.addPromisesToClass(PromiseDependency);
		      }
		    }
		  },

		  /**
		   * @api private
		   * Return a function that will return a promise whose fate is decided by the
		   * callback behavior of the given method with `methodName`. The method to be
		   * promisified should conform to node.js convention of accepting a callback as
		   * last argument and calling that callback with error as the first argument
		   * and success value on the second argument.
		   */
		  promisifyMethod: function promisifyMethod(methodName, PromiseDependency) {
		    return function promise() {
		      var self = this;
		      var args = Array.prototype.slice.call(arguments);
		      return new PromiseDependency(function(resolve, reject) {
		        args.push(function(err, data) {
		          if (err) {
		            reject(err);
		          } else {
		            resolve(data);
		          }
		        });
		        self[methodName].apply(self, args);
		      });
		    };
		  },

		  /**
		   * @api private
		   */
		  isDualstackAvailable: function isDualstackAvailable(service) {
		    if (!service) return false;
		    var metadata = __webpack_require__(7);
		    if (typeof service !== 'string') service = service.serviceIdentifier;
		    if (typeof service !== 'string' || !metadata.hasOwnProperty(service)) return false;
		    return !!metadata[service].dualstackAvailable;
		  },

		  /**
		   * @api private
		   */
		  calculateRetryDelay: function calculateRetryDelay(retryCount, retryDelayOptions, err) {
		    if (!retryDelayOptions) retryDelayOptions = {};
		    var customBackoff = retryDelayOptions.customBackoff || null;
		    if (typeof customBackoff === 'function') {
		      return customBackoff(retryCount, err);
		    }
		    var base = typeof retryDelayOptions.base === 'number' ? retryDelayOptions.base : 100;
		    var delay = Math.random() * (Math.pow(2, retryCount) * base);
		    return delay;
		  },

		  /**
		   * @api private
		   */
		  handleRequestWithRetries: function handleRequestWithRetries(httpRequest, options, cb) {
		    if (!options) options = {};
		    var http = AWS.HttpClient.getInstance();
		    var httpOptions = options.httpOptions || {};
		    var retryCount = 0;

		    var errCallback = function(err) {
		      var maxRetries = options.maxRetries || 0;
		      if (err && err.code === 'TimeoutError') err.retryable = true;

		      // Call `calculateRetryDelay()` only when relevant, see #3401
		      if (err && err.retryable && retryCount < maxRetries) {
		        var delay = util.calculateRetryDelay(retryCount, options.retryDelayOptions, err);
		        if (delay >= 0) {
		          retryCount++;
		          setTimeout(sendRequest, delay + (err.retryAfter || 0));
		          return;
		        }
		      }
		      cb(err);
		    };

		    var sendRequest = function() {
		      var data = '';
		      http.handleRequest(httpRequest, httpOptions, function(httpResponse) {
		        httpResponse.on('data', function(chunk) { data += chunk.toString(); });
		        httpResponse.on('end', function() {
		          var statusCode = httpResponse.statusCode;
		          if (statusCode < 300) {
		            cb(null, data);
		          } else {
		            var retryAfter = parseInt(httpResponse.headers['retry-after'], 10) * 1000 || 0;
		            var err = util.error(new Error(),
		              {
		                statusCode: statusCode,
		                retryable: statusCode >= 500 || statusCode === 429
		              }
		            );
		            if (retryAfter && err.retryable) err.retryAfter = retryAfter;
		            errCallback(err);
		          }
		        });
		      }, errCallback);
		    };

		    AWS.util.defer(sendRequest);
		  },

		  /**
		   * @api private
		   */
		  uuid: {
		    v4: function uuidV4() {
		      return __webpack_require__(8).v4();
		    }
		  },

		  /**
		   * @api private
		   */
		  convertPayloadToString: function convertPayloadToString(resp) {
		    var req = resp.request;
		    var operation = req.operation;
		    var rules = req.service.api.operations[operation].output || {};
		    if (rules.payload && resp.data[rules.payload]) {
		      resp.data[rules.payload] = resp.data[rules.payload].toString();
		    }
		  },

		  /**
		   * @api private
		   */
		  defer: function defer(callback) {
		    if (typeof process === 'object' && typeof process.nextTick === 'function') {
		      process.nextTick(callback);
		    } else if (typeof setImmediate === 'function') {
		      setImmediate(callback);
		    } else {
		      setTimeout(callback, 0);
		    }
		  },

		  /**
		   * @api private
		   */
		  getRequestPayloadShape: function getRequestPayloadShape(req) {
		    var operations = req.service.api.operations;
		    if (!operations) return undefined;
		    var operation = (operations || {})[req.operation];
		    if (!operation || !operation.input || !operation.input.payload) return undefined;
		    return operation.input.members[operation.input.payload];
		  },

		  getProfilesFromSharedConfig: function getProfilesFromSharedConfig(iniLoader, filename) {
		    var profiles = {};
		    var profilesFromConfig = {};
		    if (process.env[util.configOptInEnv]) {
		      var profilesFromConfig = iniLoader.loadFrom({
		        isConfig: true,
		        filename: process.env[util.sharedConfigFileEnv]
		      });
		    }
		    var profilesFromCreds= {};
		    try {
		      var profilesFromCreds = iniLoader.loadFrom({
		        filename: filename ||
		          (process.env[util.configOptInEnv] && process.env[util.sharedCredentialsFileEnv])
		      });
		    } catch (error) {
		      // if using config, assume it is fully descriptive without a credentials file:
		      if (!process.env[util.configOptInEnv]) throw error;
		    }
		    for (var i = 0, profileNames = Object.keys(profilesFromConfig); i < profileNames.length; i++) {
		      profiles[profileNames[i]] = objectAssign(profiles[profileNames[i]] || {}, profilesFromConfig[profileNames[i]]);
		    }
		    for (var i = 0, profileNames = Object.keys(profilesFromCreds); i < profileNames.length; i++) {
		      profiles[profileNames[i]] = objectAssign(profiles[profileNames[i]] || {}, profilesFromCreds[profileNames[i]]);
		    }
		    return profiles;

		    /**
		     * Roughly the semantics of `Object.assign(target, source)`
		     */
		    function objectAssign(target, source) {
		      for (var i = 0, keys = Object.keys(source); i < keys.length; i++) {
		        target[keys[i]] = source[keys[i]];
		      }
		      return target;
		    }
		  },

		  /**
		   * @api private
		   */
		  ARN: {
		    validate: function validateARN(str) {
		      return str && str.indexOf('arn:') === 0 && str.split(':').length >= 6;
		    },
		    parse: function parseARN(arn) {
		      var matched = arn.split(':');
		      return {
		        partition: matched[1],
		        service: matched[2],
		        region: matched[3],
		        accountId: matched[4],
		        resource: matched.slice(5).join(':')
		      };
		    },
		    build: function buildARN(arnObject) {
		      if (
		        arnObject.service === undefined ||
		        arnObject.region === undefined ||
		        arnObject.accountId === undefined ||
		        arnObject.resource === undefined
		      ) throw util.error(new Error('Input ARN object is invalid'));
		      return 'arn:'+ (arnObject.partition || 'aws') + ':' + arnObject.service +
		        ':' + arnObject.region + ':' + arnObject.accountId + ':' + arnObject.resource;
		    }
		  },

		  /**
		   * @api private
		   */
		  defaultProfile: 'default',

		  /**
		   * @api private
		   */
		  configOptInEnv: 'AWS_SDK_LOAD_CONFIG',

		  /**
		   * @api private
		   */
		  sharedCredentialsFileEnv: 'AWS_SHARED_CREDENTIALS_FILE',

		  /**
		   * @api private
		   */
		  sharedConfigFileEnv: 'AWS_CONFIG_FILE',

		  /**
		   * @api private
		   */
		  imdsDisabledEnv: 'AWS_EC2_METADATA_DISABLED'
		};

		/**
		 * @api private
		 */
		module.exports = util;

		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(4).setImmediate))

	/***/ }),
	/* 3 */
	/***/ (function(module, exports) {

		// shim for using process in browser
		var process = module.exports = {};

		// cached from whatever global is present so that test runners that stub it
		// don't break things.  But we need to wrap it in a try catch in case it is
		// wrapped in strict mode code which doesn't define any globals.  It's inside a
		// function because try/catches deoptimize in certain engines.

		var cachedSetTimeout;
		var cachedClearTimeout;

		function defaultSetTimout() {
		    throw new Error('setTimeout has not been defined');
		}
		function defaultClearTimeout () {
		    throw new Error('clearTimeout has not been defined');
		}
		(function () {
		    try {
		        if (typeof setTimeout === 'function') {
		            cachedSetTimeout = setTimeout;
		        } else {
		            cachedSetTimeout = defaultSetTimout;
		        }
		    } catch (e) {
		        cachedSetTimeout = defaultSetTimout;
		    }
		    try {
		        if (typeof clearTimeout === 'function') {
		            cachedClearTimeout = clearTimeout;
		        } else {
		            cachedClearTimeout = defaultClearTimeout;
		        }
		    } catch (e) {
		        cachedClearTimeout = defaultClearTimeout;
		    }
		} ())
		function runTimeout(fun) {
		    if (cachedSetTimeout === setTimeout) {
		        //normal enviroments in sane situations
		        return setTimeout(fun, 0);
		    }
		    // if setTimeout wasn't available but was latter defined
		    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
		        cachedSetTimeout = setTimeout;
		        return setTimeout(fun, 0);
		    }
		    try {
		        // when when somebody has screwed with setTimeout but no I.E. maddness
		        return cachedSetTimeout(fun, 0);
		    } catch(e){
		        try {
		            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
		            return cachedSetTimeout.call(null, fun, 0);
		        } catch(e){
		            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
		            return cachedSetTimeout.call(this, fun, 0);
		        }
		    }


		}
		function runClearTimeout(marker) {
		    if (cachedClearTimeout === clearTimeout) {
		        //normal enviroments in sane situations
		        return clearTimeout(marker);
		    }
		    // if clearTimeout wasn't available but was latter defined
		    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
		        cachedClearTimeout = clearTimeout;
		        return clearTimeout(marker);
		    }
		    try {
		        // when when somebody has screwed with setTimeout but no I.E. maddness
		        return cachedClearTimeout(marker);
		    } catch (e){
		        try {
		            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
		            return cachedClearTimeout.call(null, marker);
		        } catch (e){
		            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
		            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
		            return cachedClearTimeout.call(this, marker);
		        }
		    }



		}
		var queue = [];
		var draining = false;
		var currentQueue;
		var queueIndex = -1;

		function cleanUpNextTick() {
		    if (!draining || !currentQueue) {
		        return;
		    }
		    draining = false;
		    if (currentQueue.length) {
		        queue = currentQueue.concat(queue);
		    } else {
		        queueIndex = -1;
		    }
		    if (queue.length) {
		        drainQueue();
		    }
		}

		function drainQueue() {
		    if (draining) {
		        return;
		    }
		    var timeout = runTimeout(cleanUpNextTick);
		    draining = true;

		    var len = queue.length;
		    while(len) {
		        currentQueue = queue;
		        queue = [];
		        while (++queueIndex < len) {
		            if (currentQueue) {
		                currentQueue[queueIndex].run();
		            }
		        }
		        queueIndex = -1;
		        len = queue.length;
		    }
		    currentQueue = null;
		    draining = false;
		    runClearTimeout(timeout);
		}

		process.nextTick = function (fun) {
		    var args = new Array(arguments.length - 1);
		    if (arguments.length > 1) {
		        for (var i = 1; i < arguments.length; i++) {
		            args[i - 1] = arguments[i];
		        }
		    }
		    queue.push(new Item(fun, args));
		    if (queue.length === 1 && !draining) {
		        runTimeout(drainQueue);
		    }
		};

		// v8 likes predictible objects
		function Item(fun, array) {
		    this.fun = fun;
		    this.array = array;
		}
		Item.prototype.run = function () {
		    this.fun.apply(null, this.array);
		};
		process.title = 'browser';
		process.browser = true;
		process.env = {};
		process.argv = [];
		process.version = ''; // empty string to avoid regexp issues
		process.versions = {};

		function noop() {}

		process.on = noop;
		process.addListener = noop;
		process.once = noop;
		process.off = noop;
		process.removeListener = noop;
		process.removeAllListeners = noop;
		process.emit = noop;
		process.prependListener = noop;
		process.prependOnceListener = noop;

		process.listeners = function (name) { return [] }

		process.binding = function (name) {
		    throw new Error('process.binding is not supported');
		};

		process.cwd = function () { return '/' };
		process.chdir = function (dir) {
		    throw new Error('process.chdir is not supported');
		};
		process.umask = function() { return 0; };


	/***/ }),
	/* 4 */
	/***/ (function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
		            (typeof self !== "undefined" && self) ||
		            window;
		var apply = Function.prototype.apply;

		// DOM APIs, for completeness

		exports.setTimeout = function() {
		  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
		};
		exports.setInterval = function() {
		  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
		};
		exports.clearTimeout =
		exports.clearInterval = function(timeout) {
		  if (timeout) {
		    timeout.close();
		  }
		};

		function Timeout(id, clearFn) {
		  this._id = id;
		  this._clearFn = clearFn;
		}
		Timeout.prototype.unref = Timeout.prototype.ref = function() {};
		Timeout.prototype.close = function() {
		  this._clearFn.call(scope, this._id);
		};

		// Does not start the time, just sets up the members needed.
		exports.enroll = function(item, msecs) {
		  clearTimeout(item._idleTimeoutId);
		  item._idleTimeout = msecs;
		};

		exports.unenroll = function(item) {
		  clearTimeout(item._idleTimeoutId);
		  item._idleTimeout = -1;
		};

		exports._unrefActive = exports.active = function(item) {
		  clearTimeout(item._idleTimeoutId);

		  var msecs = item._idleTimeout;
		  if (msecs >= 0) {
		    item._idleTimeoutId = setTimeout(function onTimeout() {
		      if (item._onTimeout)
		        item._onTimeout();
		    }, msecs);
		  }
		};

		// setimmediate attaches itself to the global object
		__webpack_require__(5);
		// On some exotic environments, it's not clear which object `setimmediate` was
		// able to install onto.  Search each possibility in the same order as the
		// `setimmediate` library.
		exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
		                       (typeof global !== "undefined" && global.setImmediate) ||
		                       (this && this.setImmediate);
		exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
		                         (typeof global !== "undefined" && global.clearImmediate) ||
		                         (this && this.clearImmediate);

		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

	/***/ }),
	/* 5 */
	/***/ (function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
		    "use strict";

		    if (global.setImmediate) {
		        return;
		    }

		    var nextHandle = 1; // Spec says greater than zero
		    var tasksByHandle = {};
		    var currentlyRunningATask = false;
		    var doc = global.document;
		    var registerImmediate;

		    function setImmediate(callback) {
		      // Callback can either be a function or a string
		      if (typeof callback !== "function") {
		        callback = new Function("" + callback);
		      }
		      // Copy function arguments
		      var args = new Array(arguments.length - 1);
		      for (var i = 0; i < args.length; i++) {
		          args[i] = arguments[i + 1];
		      }
		      // Store and register the task
		      var task = { callback: callback, args: args };
		      tasksByHandle[nextHandle] = task;
		      registerImmediate(nextHandle);
		      return nextHandle++;
		    }

		    function clearImmediate(handle) {
		        delete tasksByHandle[handle];
		    }

		    function run(task) {
		        var callback = task.callback;
		        var args = task.args;
		        switch (args.length) {
		        case 0:
		            callback();
		            break;
		        case 1:
		            callback(args[0]);
		            break;
		        case 2:
		            callback(args[0], args[1]);
		            break;
		        case 3:
		            callback(args[0], args[1], args[2]);
		            break;
		        default:
		            callback.apply(undefined, args);
		            break;
		        }
		    }

		    function runIfPresent(handle) {
		        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
		        // So if we're currently running a task, we'll need to delay this invocation.
		        if (currentlyRunningATask) {
		            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
		            // "too much recursion" error.
		            setTimeout(runIfPresent, 0, handle);
		        } else {
		            var task = tasksByHandle[handle];
		            if (task) {
		                currentlyRunningATask = true;
		                try {
		                    run(task);
		                } finally {
		                    clearImmediate(handle);
		                    currentlyRunningATask = false;
		                }
		            }
		        }
		    }

		    function installNextTickImplementation() {
		        registerImmediate = function(handle) {
		            process.nextTick(function () { runIfPresent(handle); });
		        };
		    }

		    function canUsePostMessage() {
		        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
		        // where `global.postMessage` means something completely different and can't be used for this purpose.
		        if (global.postMessage && !global.importScripts) {
		            var postMessageIsAsynchronous = true;
		            var oldOnMessage = global.onmessage;
		            global.onmessage = function() {
		                postMessageIsAsynchronous = false;
		            };
		            global.postMessage("", "*");
		            global.onmessage = oldOnMessage;
		            return postMessageIsAsynchronous;
		        }
		    }

		    function installPostMessageImplementation() {
		        // Installs an event handler on `global` for the `message` event: see
		        // * https://developer.mozilla.org/en/DOM/window.postMessage
		        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

		        var messagePrefix = "setImmediate$" + Math.random() + "$";
		        var onGlobalMessage = function(event) {
		            if (event.source === global &&
		                typeof event.data === "string" &&
		                event.data.indexOf(messagePrefix) === 0) {
		                runIfPresent(+event.data.slice(messagePrefix.length));
		            }
		        };

		        if (global.addEventListener) {
		            global.addEventListener("message", onGlobalMessage, false);
		        } else {
		            global.attachEvent("onmessage", onGlobalMessage);
		        }

		        registerImmediate = function(handle) {
		            global.postMessage(messagePrefix + handle, "*");
		        };
		    }

		    function installMessageChannelImplementation() {
		        var channel = new MessageChannel();
		        channel.port1.onmessage = function(event) {
		            var handle = event.data;
		            runIfPresent(handle);
		        };

		        registerImmediate = function(handle) {
		            channel.port2.postMessage(handle);
		        };
		    }

		    function installReadyStateChangeImplementation() {
		        var html = doc.documentElement;
		        registerImmediate = function(handle) {
		            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
		            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
		            var script = doc.createElement("script");
		            script.onreadystatechange = function () {
		                runIfPresent(handle);
		                script.onreadystatechange = null;
		                html.removeChild(script);
		                script = null;
		            };
		            html.appendChild(script);
		        };
		    }

		    function installSetTimeoutImplementation() {
		        registerImmediate = function(handle) {
		            setTimeout(runIfPresent, 0, handle);
		        };
		    }

		    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
		    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
		    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

		    // Don't get fooled by e.g. browserify environments.
		    if ({}.toString.call(global.process) === "[object process]") {
		        // For Node.js before 0.9
		        installNextTickImplementation();

		    } else if (canUsePostMessage()) {
		        // For non-IE10 modern browsers
		        installPostMessageImplementation();

		    } else if (global.MessageChannel) {
		        // For web workers, where supported
		        installMessageChannelImplementation();

		    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
		        // For IE 6–8
		        installReadyStateChangeImplementation();

		    } else {
		        // For older browsers
		        installSetTimeoutImplementation();
		    }

		    attachTo.setImmediate = setImmediate;
		    attachTo.clearImmediate = clearImmediate;
		}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(3)))

	/***/ }),
	/* 6 */
	/***/ (function(module, exports) {

		/* (ignored) */

	/***/ }),
	/* 7 */
	/***/ (function(module, exports) {

		module.exports = {"acm":{"name":"ACM","cors":true},"apigateway":{"name":"APIGateway","cors":true},"applicationautoscaling":{"prefix":"application-autoscaling","name":"ApplicationAutoScaling","cors":true},"appstream":{"name":"AppStream"},"autoscaling":{"name":"AutoScaling","cors":true},"batch":{"name":"Batch"},"budgets":{"name":"Budgets"},"clouddirectory":{"name":"CloudDirectory","versions":["2016-05-10*"]},"cloudformation":{"name":"CloudFormation","cors":true},"cloudfront":{"name":"CloudFront","versions":["2013-05-12*","2013-11-11*","2014-05-31*","2014-10-21*","2014-11-06*","2015-04-17*","2015-07-27*","2015-09-17*","2016-01-13*","2016-01-28*","2016-08-01*","2016-08-20*","2016-09-07*","2016-09-29*","2016-11-25*","2017-03-25*","2017-10-30*","2018-06-18*","2018-11-05*","2019-03-26*"],"cors":true},"cloudhsm":{"name":"CloudHSM","cors":true},"cloudsearch":{"name":"CloudSearch"},"cloudsearchdomain":{"name":"CloudSearchDomain"},"cloudtrail":{"name":"CloudTrail","cors":true},"cloudwatch":{"prefix":"monitoring","name":"CloudWatch","cors":true},"cloudwatchevents":{"prefix":"events","name":"CloudWatchEvents","versions":["2014-02-03*"],"cors":true},"cloudwatchlogs":{"prefix":"logs","name":"CloudWatchLogs","cors":true},"codebuild":{"name":"CodeBuild","cors":true},"codecommit":{"name":"CodeCommit","cors":true},"codedeploy":{"name":"CodeDeploy","cors":true},"codepipeline":{"name":"CodePipeline","cors":true},"cognitoidentity":{"prefix":"cognito-identity","name":"CognitoIdentity","cors":true},"cognitoidentityserviceprovider":{"prefix":"cognito-idp","name":"CognitoIdentityServiceProvider","cors":true},"cognitosync":{"prefix":"cognito-sync","name":"CognitoSync","cors":true},"configservice":{"prefix":"config","name":"ConfigService","cors":true},"cur":{"name":"CUR","cors":true},"datapipeline":{"name":"DataPipeline"},"devicefarm":{"name":"DeviceFarm","cors":true},"directconnect":{"name":"DirectConnect","cors":true},"directoryservice":{"prefix":"ds","name":"DirectoryService"},"discovery":{"name":"Discovery"},"dms":{"name":"DMS"},"dynamodb":{"name":"DynamoDB","cors":true},"dynamodbstreams":{"prefix":"streams.dynamodb","name":"DynamoDBStreams","cors":true},"ec2":{"name":"EC2","versions":["2013-06-15*","2013-10-15*","2014-02-01*","2014-05-01*","2014-06-15*","2014-09-01*","2014-10-01*","2015-03-01*","2015-04-15*","2015-10-01*","2016-04-01*","2016-09-15*"],"cors":true},"ecr":{"name":"ECR","cors":true},"ecs":{"name":"ECS","cors":true},"efs":{"prefix":"elasticfilesystem","name":"EFS","cors":true},"elasticache":{"name":"ElastiCache","versions":["2012-11-15*","2014-03-24*","2014-07-15*","2014-09-30*"],"cors":true},"elasticbeanstalk":{"name":"ElasticBeanstalk","cors":true},"elb":{"prefix":"elasticloadbalancing","name":"ELB","cors":true},"elbv2":{"prefix":"elasticloadbalancingv2","name":"ELBv2","cors":true},"emr":{"prefix":"elasticmapreduce","name":"EMR","cors":true},"es":{"name":"ES"},"elastictranscoder":{"name":"ElasticTranscoder","cors":true},"firehose":{"name":"Firehose","cors":true},"gamelift":{"name":"GameLift","cors":true},"glacier":{"name":"Glacier"},"health":{"name":"Health"},"iam":{"name":"IAM","cors":true},"importexport":{"name":"ImportExport"},"inspector":{"name":"Inspector","versions":["2015-08-18*"],"cors":true},"iot":{"name":"Iot","cors":true},"iotdata":{"prefix":"iot-data","name":"IotData","cors":true},"kinesis":{"name":"Kinesis","cors":true},"kinesisanalytics":{"name":"KinesisAnalytics"},"kms":{"name":"KMS","cors":true},"lambda":{"name":"Lambda","cors":true},"lexruntime":{"prefix":"runtime.lex","name":"LexRuntime","cors":true},"lightsail":{"name":"Lightsail"},"machinelearning":{"name":"MachineLearning","cors":true},"marketplacecommerceanalytics":{"name":"MarketplaceCommerceAnalytics","cors":true},"marketplacemetering":{"prefix":"meteringmarketplace","name":"MarketplaceMetering"},"mturk":{"prefix":"mturk-requester","name":"MTurk","cors":true},"mobileanalytics":{"name":"MobileAnalytics","cors":true},"opsworks":{"name":"OpsWorks","cors":true},"opsworkscm":{"name":"OpsWorksCM"},"organizations":{"name":"Organizations"},"pinpoint":{"name":"Pinpoint"},"polly":{"name":"Polly","cors":true},"rds":{"name":"RDS","versions":["2014-09-01*"],"cors":true},"redshift":{"name":"Redshift","cors":true},"rekognition":{"name":"Rekognition","cors":true},"resourcegroupstaggingapi":{"name":"ResourceGroupsTaggingAPI"},"route53":{"name":"Route53","cors":true},"route53domains":{"name":"Route53Domains","cors":true},"s3":{"name":"S3","dualstackAvailable":true,"cors":true},"s3control":{"name":"S3Control","dualstackAvailable":true,"xmlNoDefaultLists":true},"servicecatalog":{"name":"ServiceCatalog","cors":true},"ses":{"prefix":"email","name":"SES","cors":true},"shield":{"name":"Shield"},"simpledb":{"prefix":"sdb","name":"SimpleDB"},"sms":{"name":"SMS"},"snowball":{"name":"Snowball"},"sns":{"name":"SNS","cors":true},"sqs":{"name":"SQS","cors":true},"ssm":{"name":"SSM","cors":true},"storagegateway":{"name":"StorageGateway","cors":true},"stepfunctions":{"prefix":"states","name":"StepFunctions"},"sts":{"name":"STS","cors":true},"support":{"name":"Support"},"swf":{"name":"SWF"},"xray":{"name":"XRay","cors":true},"waf":{"name":"WAF","cors":true},"wafregional":{"prefix":"waf-regional","name":"WAFRegional"},"workdocs":{"name":"WorkDocs","cors":true},"workspaces":{"name":"WorkSpaces"},"codestar":{"name":"CodeStar"},"lexmodelbuildingservice":{"prefix":"lex-models","name":"LexModelBuildingService","cors":true},"marketplaceentitlementservice":{"prefix":"entitlement.marketplace","name":"MarketplaceEntitlementService"},"athena":{"name":"Athena","cors":true},"greengrass":{"name":"Greengrass"},"dax":{"name":"DAX"},"migrationhub":{"prefix":"AWSMigrationHub","name":"MigrationHub"},"cloudhsmv2":{"name":"CloudHSMV2","cors":true},"glue":{"name":"Glue"},"mobile":{"name":"Mobile"},"pricing":{"name":"Pricing","cors":true},"costexplorer":{"prefix":"ce","name":"CostExplorer","cors":true},"mediaconvert":{"name":"MediaConvert"},"medialive":{"name":"MediaLive"},"mediapackage":{"name":"MediaPackage"},"mediastore":{"name":"MediaStore"},"mediastoredata":{"prefix":"mediastore-data","name":"MediaStoreData","cors":true},"appsync":{"name":"AppSync"},"guardduty":{"name":"GuardDuty"},"mq":{"name":"MQ"},"comprehend":{"name":"Comprehend","cors":true},"iotjobsdataplane":{"prefix":"iot-jobs-data","name":"IoTJobsDataPlane"},"kinesisvideoarchivedmedia":{"prefix":"kinesis-video-archived-media","name":"KinesisVideoArchivedMedia","cors":true},"kinesisvideomedia":{"prefix":"kinesis-video-media","name":"KinesisVideoMedia","cors":true},"kinesisvideo":{"name":"KinesisVideo","cors":true},"sagemakerruntime":{"prefix":"runtime.sagemaker","name":"SageMakerRuntime"},"sagemaker":{"name":"SageMaker"},"translate":{"name":"Translate","cors":true},"resourcegroups":{"prefix":"resource-groups","name":"ResourceGroups","cors":true},"alexaforbusiness":{"name":"AlexaForBusiness"},"cloud9":{"name":"Cloud9"},"serverlessapplicationrepository":{"prefix":"serverlessrepo","name":"ServerlessApplicationRepository"},"servicediscovery":{"name":"ServiceDiscovery"},"workmail":{"name":"WorkMail"},"autoscalingplans":{"prefix":"autoscaling-plans","name":"AutoScalingPlans"},"transcribeservice":{"prefix":"transcribe","name":"TranscribeService"},"connect":{"name":"Connect","cors":true},"acmpca":{"prefix":"acm-pca","name":"ACMPCA"},"fms":{"name":"FMS"},"secretsmanager":{"name":"SecretsManager","cors":true},"iotanalytics":{"name":"IoTAnalytics","cors":true},"iot1clickdevicesservice":{"prefix":"iot1click-devices","name":"IoT1ClickDevicesService"},"iot1clickprojects":{"prefix":"iot1click-projects","name":"IoT1ClickProjects"},"pi":{"name":"PI"},"neptune":{"name":"Neptune"},"mediatailor":{"name":"MediaTailor"},"eks":{"name":"EKS"},"macie":{"name":"Macie"},"dlm":{"name":"DLM"},"signer":{"name":"Signer"},"chime":{"name":"Chime"},"pinpointemail":{"prefix":"pinpoint-email","name":"PinpointEmail"},"ram":{"name":"RAM"},"route53resolver":{"name":"Route53Resolver"},"pinpointsmsvoice":{"prefix":"sms-voice","name":"PinpointSMSVoice"},"quicksight":{"name":"QuickSight"},"rdsdataservice":{"prefix":"rds-data","name":"RDSDataService"},"amplify":{"name":"Amplify"},"datasync":{"name":"DataSync"},"robomaker":{"name":"RoboMaker"},"transfer":{"name":"Transfer"},"globalaccelerator":{"name":"GlobalAccelerator"},"comprehendmedical":{"name":"ComprehendMedical","cors":true},"kinesisanalyticsv2":{"name":"KinesisAnalyticsV2"},"mediaconnect":{"name":"MediaConnect"},"fsx":{"name":"FSx"},"securityhub":{"name":"SecurityHub"},"appmesh":{"name":"AppMesh","versions":["2018-10-01*"]},"licensemanager":{"prefix":"license-manager","name":"LicenseManager"},"kafka":{"name":"Kafka"},"apigatewaymanagementapi":{"name":"ApiGatewayManagementApi"},"apigatewayv2":{"name":"ApiGatewayV2"},"docdb":{"name":"DocDB"},"backup":{"name":"Backup"},"worklink":{"name":"WorkLink"},"textract":{"name":"Textract"},"managedblockchain":{"name":"ManagedBlockchain"},"mediapackagevod":{"prefix":"mediapackage-vod","name":"MediaPackageVod"},"groundstation":{"name":"GroundStation"},"iotthingsgraph":{"name":"IoTThingsGraph"},"iotevents":{"name":"IoTEvents"},"ioteventsdata":{"prefix":"iotevents-data","name":"IoTEventsData"},"personalize":{"name":"Personalize","cors":true},"personalizeevents":{"prefix":"personalize-events","name":"PersonalizeEvents","cors":true},"personalizeruntime":{"prefix":"personalize-runtime","name":"PersonalizeRuntime","cors":true},"applicationinsights":{"prefix":"application-insights","name":"ApplicationInsights"},"servicequotas":{"prefix":"service-quotas","name":"ServiceQuotas"},"ec2instanceconnect":{"prefix":"ec2-instance-connect","name":"EC2InstanceConnect"},"eventbridge":{"name":"EventBridge"},"lakeformation":{"name":"LakeFormation"},"forecastservice":{"prefix":"forecast","name":"ForecastService","cors":true},"forecastqueryservice":{"prefix":"forecastquery","name":"ForecastQueryService","cors":true},"qldb":{"name":"QLDB"},"qldbsession":{"prefix":"qldb-session","name":"QLDBSession"},"workmailmessageflow":{"name":"WorkMailMessageFlow"},"codestarnotifications":{"prefix":"codestar-notifications","name":"CodeStarNotifications"},"savingsplans":{"name":"SavingsPlans"},"sso":{"name":"SSO"},"ssooidc":{"prefix":"sso-oidc","name":"SSOOIDC"},"marketplacecatalog":{"prefix":"marketplace-catalog","name":"MarketplaceCatalog"},"dataexchange":{"name":"DataExchange"},"sesv2":{"name":"SESV2"},"migrationhubconfig":{"prefix":"migrationhub-config","name":"MigrationHubConfig"},"connectparticipant":{"name":"ConnectParticipant"},"appconfig":{"name":"AppConfig"},"iotsecuretunneling":{"name":"IoTSecureTunneling"},"wafv2":{"name":"WAFV2"},"elasticinference":{"prefix":"elastic-inference","name":"ElasticInference"},"imagebuilder":{"name":"Imagebuilder"},"schemas":{"name":"Schemas"},"accessanalyzer":{"name":"AccessAnalyzer"},"codegurureviewer":{"prefix":"codeguru-reviewer","name":"CodeGuruReviewer"},"codeguruprofiler":{"name":"CodeGuruProfiler"},"computeoptimizer":{"prefix":"compute-optimizer","name":"ComputeOptimizer"},"frauddetector":{"name":"FraudDetector"},"kendra":{"name":"Kendra"},"networkmanager":{"name":"NetworkManager"},"outposts":{"name":"Outposts"},"augmentedairuntime":{"prefix":"sagemaker-a2i-runtime","name":"AugmentedAIRuntime"},"ebs":{"name":"EBS"},"kinesisvideosignalingchannels":{"prefix":"kinesis-video-signaling","name":"KinesisVideoSignalingChannels","cors":true},"detective":{"name":"Detective"},"codestarconnections":{"prefix":"codestar-connections","name":"CodeStarconnections"},"synthetics":{"name":"Synthetics"},"iotsitewise":{"name":"IoTSiteWise"},"macie2":{"name":"Macie2"},"codeartifact":{"name":"CodeArtifact"},"honeycode":{"name":"Honeycode"},"ivs":{"name":"IVS"},"braket":{"name":"Braket"},"identitystore":{"name":"IdentityStore"},"appflow":{"name":"Appflow"},"redshiftdata":{"prefix":"redshift-data","name":"RedshiftData"},"ssoadmin":{"prefix":"sso-admin","name":"SSOAdmin"},"timestreamquery":{"prefix":"timestream-query","name":"TimestreamQuery"},"timestreamwrite":{"prefix":"timestream-write","name":"TimestreamWrite"},"s3outposts":{"name":"S3Outposts"},"databrew":{"name":"DataBrew"},"servicecatalogappregistry":{"prefix":"servicecatalog-appregistry","name":"ServiceCatalogAppRegistry"},"networkfirewall":{"prefix":"network-firewall","name":"NetworkFirewall"},"mwaa":{"name":"MWAA"},"amplifybackend":{"name":"AmplifyBackend"},"appintegrations":{"name":"AppIntegrations"},"connectcontactlens":{"prefix":"connect-contact-lens","name":"ConnectContactLens"},"devopsguru":{"prefix":"devops-guru","name":"DevOpsGuru"},"ecrpublic":{"prefix":"ecr-public","name":"ECRPUBLIC"},"lookoutvision":{"name":"LookoutVision"},"sagemakerfeaturestoreruntime":{"prefix":"sagemaker-featurestore-runtime","name":"SageMakerFeatureStoreRuntime"},"customerprofiles":{"prefix":"customer-profiles","name":"CustomerProfiles"},"auditmanager":{"name":"AuditManager"},"emrcontainers":{"prefix":"emr-containers","name":"EMRcontainers"},"healthlake":{"name":"HealthLake"},"sagemakeredge":{"prefix":"sagemaker-edge","name":"SagemakerEdge"},"amp":{"name":"Amp"},"greengrassv2":{"name":"GreengrassV2"},"iotdeviceadvisor":{"name":"IotDeviceAdvisor"},"iotfleethub":{"name":"IoTFleetHub"},"iotwireless":{"name":"IoTWireless"},"location":{"name":"Location","cors":true},"wellarchitected":{"name":"WellArchitected"},"lexmodelsv2":{"prefix":"models.lex.v2","name":"LexModelsV2"},"lexruntimev2":{"prefix":"runtime.lex.v2","name":"LexRuntimeV2","cors":true},"fis":{"name":"Fis"},"lookoutmetrics":{"name":"LookoutMetrics"},"mgn":{"name":"Mgn"},"lookoutequipment":{"name":"LookoutEquipment"},"nimble":{"name":"Nimble"},"finspace":{"name":"Finspace"},"finspacedata":{"prefix":"finspace-data","name":"Finspacedata"},"ssmcontacts":{"prefix":"ssm-contacts","name":"SSMContacts"},"ssmincidents":{"prefix":"ssm-incidents","name":"SSMIncidents"},"applicationcostprofiler":{"name":"ApplicationCostProfiler"},"apprunner":{"name":"AppRunner"},"proton":{"name":"Proton"}}

	/***/ }),
	/* 8 */
	/***/ (function(module, exports, __webpack_require__) {

		var v1 = __webpack_require__(9);
		var v4 = __webpack_require__(12);

		var uuid = v4;
		uuid.v1 = v1;
		uuid.v4 = v4;

		module.exports = uuid;


	/***/ }),
	/* 9 */
	/***/ (function(module, exports, __webpack_require__) {

		var rng = __webpack_require__(10);
		var bytesToUuid = __webpack_require__(11);

		// **`v1()` - Generate time-based UUID**
		//
		// Inspired by https://github.com/LiosK/UUID.js
		// and http://docs.python.org/library/uuid.html

		var _nodeId;
		var _clockseq;

		// Previous uuid creation time
		var _lastMSecs = 0;
		var _lastNSecs = 0;

		// See https://github.com/broofa/node-uuid for API details
		function v1(options, buf, offset) {
		  var i = buf && offset || 0;
		  var b = buf || [];

		  options = options || {};
		  var node = options.node || _nodeId;
		  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

		  // node and clockseq need to be initialized to random values if they're not
		  // specified.  We do this lazily to minimize issues related to insufficient
		  // system entropy.  See #189
		  if (node == null || clockseq == null) {
		    var seedBytes = rng();
		    if (node == null) {
		      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
		      node = _nodeId = [
		        seedBytes[0] | 0x01,
		        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]
		      ];
		    }
		    if (clockseq == null) {
		      // Per 4.2.2, randomize (14 bit) clockseq
		      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
		    }
		  }

		  // UUID timestamps are 100 nano-second units since the Gregorian epoch,
		  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
		  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
		  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
		  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

		  // Per 4.2.1.2, use count of uuid's generated during the current clock
		  // cycle to simulate higher resolution clock
		  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

		  // Time since last uuid creation (in msecs)
		  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

		  // Per 4.2.1.2, Bump clockseq on clock regression
		  if (dt < 0 && options.clockseq === undefined) {
		    clockseq = clockseq + 1 & 0x3fff;
		  }

		  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
		  // time interval
		  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
		    nsecs = 0;
		  }

		  // Per 4.2.1.2 Throw error if too many uuids are requested
		  if (nsecs >= 10000) {
		    throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
		  }

		  _lastMSecs = msecs;
		  _lastNSecs = nsecs;
		  _clockseq = clockseq;

		  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
		  msecs += 12219292800000;

		  // `time_low`
		  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
		  b[i++] = tl >>> 24 & 0xff;
		  b[i++] = tl >>> 16 & 0xff;
		  b[i++] = tl >>> 8 & 0xff;
		  b[i++] = tl & 0xff;

		  // `time_mid`
		  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
		  b[i++] = tmh >>> 8 & 0xff;
		  b[i++] = tmh & 0xff;

		  // `time_high_and_version`
		  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
		  b[i++] = tmh >>> 16 & 0xff;

		  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
		  b[i++] = clockseq >>> 8 | 0x80;

		  // `clock_seq_low`
		  b[i++] = clockseq & 0xff;

		  // `node`
		  for (var n = 0; n < 6; ++n) {
		    b[i + n] = node[n];
		  }

		  return buf ? buf : bytesToUuid(b);
		}

		module.exports = v1;


	/***/ }),
	/* 10 */
	/***/ (function(module, exports) {

		// Unique ID creation requires a high quality random # generator.  In the
		// browser this is a little complicated due to unknown quality of Math.random()
		// and inconsistent support for the `crypto` API.  We do the best we can via
		// feature-detection

		// getRandomValues needs to be invoked in a context where "this" is a Crypto
		// implementation. Also, find the complete implementation of crypto on IE11.
		var getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||
		                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));

		if (getRandomValues) {
		  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
		  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

		  module.exports = function whatwgRNG() {
		    getRandomValues(rnds8);
		    return rnds8;
		  };
		} else {
		  // Math.random()-based (RNG)
		  //
		  // If all else fails, use Math.random().  It's fast, but is of unspecified
		  // quality.
		  var rnds = new Array(16);

		  module.exports = function mathRNG() {
		    for (var i = 0, r; i < 16; i++) {
		      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
		      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
		    }

		    return rnds;
		  };
		}


	/***/ }),
	/* 11 */
	/***/ (function(module, exports) {

		/**
		 * Convert array of 16 byte values to UUID string format of the form:
		 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
		 */
		var byteToHex = [];
		for (var i = 0; i < 256; ++i) {
		  byteToHex[i] = (i + 0x100).toString(16).substr(1);
		}

		function bytesToUuid(buf, offset) {
		  var i = offset || 0;
		  var bth = byteToHex;
		  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
		  return ([bth[buf[i++]], bth[buf[i++]], 
			bth[buf[i++]], bth[buf[i++]], '-',
			bth[buf[i++]], bth[buf[i++]], '-',
			bth[buf[i++]], bth[buf[i++]], '-',
			bth[buf[i++]], bth[buf[i++]], '-',
			bth[buf[i++]], bth[buf[i++]],
			bth[buf[i++]], bth[buf[i++]],
			bth[buf[i++]], bth[buf[i++]]]).join('');
		}

		module.exports = bytesToUuid;


	/***/ }),
	/* 12 */
	/***/ (function(module, exports, __webpack_require__) {

		var rng = __webpack_require__(10);
		var bytesToUuid = __webpack_require__(11);

		function v4(options, buf, offset) {
		  var i = buf && offset || 0;

		  if (typeof(options) == 'string') {
		    buf = options === 'binary' ? new Array(16) : null;
		    options = null;
		  }
		  options = options || {};

		  var rnds = options.random || (options.rng || rng)();

		  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
		  rnds[6] = (rnds[6] & 0x0f) | 0x40;
		  rnds[8] = (rnds[8] & 0x3f) | 0x80;

		  // Copy bytes to buffer, if provided
		  if (buf) {
		    for (var ii = 0; ii < 16; ++ii) {
		      buf[i + ii] = rnds[ii];
		    }
		  }

		  return buf || bytesToUuid(rnds);
		}

		module.exports = v4;


	/***/ }),
	/* 13 */
	/***/ (function(module, exports, __webpack_require__) {

		var util = __webpack_require__(2);
		var JsonBuilder = __webpack_require__(14);
		var JsonParser = __webpack_require__(15);
		var populateHostPrefix = __webpack_require__(16).populateHostPrefix;

		function buildRequest(req) {
		  var httpRequest = req.httpRequest;
		  var api = req.service.api;
		  var target = api.targetPrefix + '.' + api.operations[req.operation].name;
		  var version = api.jsonVersion || '1.0';
		  var input = api.operations[req.operation].input;
		  var builder = new JsonBuilder();

		  if (version === 1) version = '1.0';
		  httpRequest.body = builder.build(req.params || {}, input);
		  httpRequest.headers['Content-Type'] = 'application/x-amz-json-' + version;
		  httpRequest.headers['X-Amz-Target'] = target;

		  populateHostPrefix(req);
		}

		function extractError(resp) {
		  var error = {};
		  var httpResponse = resp.httpResponse;

		  error.code = httpResponse.headers['x-amzn-errortype'] || 'UnknownError';
		  if (typeof error.code === 'string') {
		    error.code = error.code.split(':')[0];
		  }

		  if (httpResponse.body.length > 0) {
		    try {
		      var e = JSON.parse(httpResponse.body.toString());
		      var code = e.__type || e.code || e.Code;
		      if (code) {
		        error.code = code.split('#').pop();
		      }
		      if (error.code === 'RequestEntityTooLarge') {
		        error.message = 'Request body must be less than 1 MB';
		      } else {
		        error.message = (e.message || e.Message || null);
		      }
		    } catch (e) {
		      error.statusCode = httpResponse.statusCode;
		      error.message = httpResponse.statusMessage;
		    }
		  } else {
		    error.statusCode = httpResponse.statusCode;
		    error.message = httpResponse.statusCode.toString();
		  }

		  resp.error = util.error(new Error(), error);
		}

		function extractData(resp) {
		  var body = resp.httpResponse.body.toString() || '{}';
		  if (resp.request.service.config.convertResponseTypes === false) {
		    resp.data = JSON.parse(body);
		  } else {
		    var operation = resp.request.service.api.operations[resp.request.operation];
		    var shape = operation.output || {};
		    var parser = new JsonParser();
		    resp.data = parser.parse(body, shape);
		  }
		}

		/**
		 * @api private
		 */
		module.exports = {
		  buildRequest: buildRequest,
		  extractError: extractError,
		  extractData: extractData
		};


	/***/ }),
	/* 14 */
	/***/ (function(module, exports, __webpack_require__) {

		var util = __webpack_require__(2);

		function JsonBuilder() { }

		JsonBuilder.prototype.build = function(value, shape) {
		  return JSON.stringify(translate(value, shape));
		};

		function translate(value, shape) {
		  if (!shape || value === undefined || value === null) return undefined;

		  switch (shape.type) {
		    case 'structure': return translateStructure(value, shape);
		    case 'map': return translateMap(value, shape);
		    case 'list': return translateList(value, shape);
		    default: return translateScalar(value, shape);
		  }
		}

		function translateStructure(structure, shape) {
		  if (shape.isDocument) {
		    return structure;
		  }
		  var struct = {};
		  util.each(structure, function(name, value) {
		    var memberShape = shape.members[name];
		    if (memberShape) {
		      if (memberShape.location !== 'body') return;
		      var locationName = memberShape.isLocationName ? memberShape.name : name;
		      var result = translate(value, memberShape);
		      if (result !== undefined) struct[locationName] = result;
		    }
		  });
		  return struct;
		}

		function translateList(list, shape) {
		  var out = [];
		  util.arrayEach(list, function(value) {
		    var result = translate(value, shape.member);
		    if (result !== undefined) out.push(result);
		  });
		  return out;
		}

		function translateMap(map, shape) {
		  var out = {};
		  util.each(map, function(key, value) {
		    var result = translate(value, shape.value);
		    if (result !== undefined) out[key] = result;
		  });
		  return out;
		}

		function translateScalar(value, shape) {
		  return shape.toWireFormat(value);
		}

		/**
		 * @api private
		 */
		module.exports = JsonBuilder;


	/***/ }),
	/* 15 */
	/***/ (function(module, exports, __webpack_require__) {

		var util = __webpack_require__(2);

		function JsonParser() { }

		JsonParser.prototype.parse = function(value, shape) {
		  return translate(JSON.parse(value), shape);
		};

		function translate(value, shape) {
		  if (!shape || value === undefined) return undefined;

		  switch (shape.type) {
		    case 'structure': return translateStructure(value, shape);
		    case 'map': return translateMap(value, shape);
		    case 'list': return translateList(value, shape);
		    default: return translateScalar(value, shape);
		  }
		}

		function translateStructure(structure, shape) {
		  if (structure == null) return undefined;
		  if (shape.isDocument) return structure;

		  var struct = {};
		  var shapeMembers = shape.members;
		  util.each(shapeMembers, function(name, memberShape) {
		    var locationName = memberShape.isLocationName ? memberShape.name : name;
		    if (Object.prototype.hasOwnProperty.call(structure, locationName)) {
		      var value = structure[locationName];
		      var result = translate(value, memberShape);
		      if (result !== undefined) struct[name] = result;
		    }
		  });
		  return struct;
		}

		function translateList(list, shape) {
		  if (list == null) return undefined;

		  var out = [];
		  util.arrayEach(list, function(value) {
		    var result = translate(value, shape.member);
		    if (result === undefined) out.push(null);
		    else out.push(result);
		  });
		  return out;
		}

		function translateMap(map, shape) {
		  if (map == null) return undefined;

		  var out = {};
		  util.each(map, function(key, value) {
		    var result = translate(value, shape.value);
		    if (result === undefined) out[key] = null;
		    else out[key] = result;
		  });
		  return out;
		}

		function translateScalar(value, shape) {
		  return shape.toType(value);
		}

		/**
		 * @api private
		 */
		module.exports = JsonParser;


	/***/ }),
	/* 16 */
	/***/ (function(module, exports, __webpack_require__) {

		var util =  __webpack_require__(2);
		var AWS = __webpack_require__(1);

		/**
		 * Prepend prefix defined by API model to endpoint that's already
		 * constructed. This feature does not apply to operations using
		 * endpoint discovery and can be disabled.
		 * @api private
		 */
		function populateHostPrefix(request)  {
		  var enabled = request.service.config.hostPrefixEnabled;
		  if (!enabled) return request;
		  var operationModel = request.service.api.operations[request.operation];
		  //don't marshal host prefix when operation has endpoint discovery traits
		  if (hasEndpointDiscover(request)) return request;
		  if (operationModel.endpoint && operationModel.endpoint.hostPrefix) {
		    var hostPrefixNotation = operationModel.endpoint.hostPrefix;
		    var hostPrefix = expandHostPrefix(hostPrefixNotation, request.params, operationModel.input);
		    prependEndpointPrefix(request.httpRequest.endpoint, hostPrefix);
		    validateHostname(request.httpRequest.endpoint.hostname);
		  }
		  return request;
		}

		/**
		 * @api private
		 */
		function hasEndpointDiscover(request) {
		  var api = request.service.api;
		  var operationModel = api.operations[request.operation];
		  var isEndpointOperation = api.endpointOperation && (api.endpointOperation === util.string.lowerFirst(operationModel.name));
		  return (operationModel.endpointDiscoveryRequired !== 'NULL' || isEndpointOperation === true);
		}

		/**
		 * @api private
		 */
		function expandHostPrefix(hostPrefixNotation, params, shape) {
		  util.each(shape.members, function(name, member) {
		    if (member.hostLabel === true) {
		      if (typeof params[name] !== 'string' || params[name] === '') {
		        throw util.error(new Error(), {
		          message: 'Parameter ' + name + ' should be a non-empty string.',
		          code: 'InvalidParameter'
		        });
		      }
		      var regex = new RegExp('\\{' + name + '\\}', 'g');
		      hostPrefixNotation = hostPrefixNotation.replace(regex, params[name]);
		    }
		  });
		  return hostPrefixNotation;
		}

		/**
		 * @api private
		 */
		function prependEndpointPrefix(endpoint, prefix) {
		  if (endpoint.host) {
		    endpoint.host = prefix + endpoint.host;
		  }
		  if (endpoint.hostname) {
		    endpoint.hostname = prefix + endpoint.hostname;
		  }
		}

		/**
		 * @api private
		 */
		function validateHostname(hostname) {
		  var labels = hostname.split('.');
		  //Reference: https://tools.ietf.org/html/rfc1123#section-2
		  var hostPattern = /^[a-zA-Z0-9]{1}$|^[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9]$/;
		  util.arrayEach(labels, function(label) {
		    if (!label.length || label.length < 1 || label.length > 63) {
		      throw util.error(new Error(), {
		        code: 'ValidationError',
		        message: 'Hostname label length should be between 1 to 63 characters, inclusive.'
		      });
		    }
		    if (!hostPattern.test(label)) {
		      throw AWS.util.error(new Error(),
		        {code: 'ValidationError', message: label + ' is not hostname compatible.'});
		    }
		  });
		}

		module.exports = {
		  populateHostPrefix: populateHostPrefix
		};


	/***/ }),
	/* 17 */
	/***/ (function(module, exports, __webpack_require__) {

		var AWS = __webpack_require__(1);
		var util = __webpack_require__(2);
		var QueryParamSerializer = __webpack_require__(18);
		var Shape = __webpack_require__(19);
		var populateHostPrefix = __webpack_require__(16).populateHostPrefix;

		function buildRequest(req) {
		  var operation = req.service.api.operations[req.operation];
		  var httpRequest = req.httpRequest;
		  httpRequest.headers['Content-Type'] =
		    'application/x-www-form-urlencoded; charset=utf-8';
		  httpRequest.params = {
		    Version: req.service.api.apiVersion,
		    Action: operation.name
		  };

		  // convert the request parameters into a list of query params,
		  // e.g. Deeply.NestedParam.0.Name=value
		  var builder = new QueryParamSerializer();
		  builder.serialize(req.params, operation.input, function(name, value) {
		    httpRequest.params[name] = value;
		  });
		  httpRequest.body = util.queryParamsToString(httpRequest.params);

		  populateHostPrefix(req);
		}

		function extractError(resp) {
		  var data, body = resp.httpResponse.body.toString();
		  if (body.match('<UnknownOperationException')) {
		    data = {
		      Code: 'UnknownOperation',
		      Message: 'Unknown operation ' + resp.request.operation
		    };
		  } else {
		    try {
		      data = new AWS.XML.Parser().parse(body);
		    } catch (e) {
		      data = {
		        Code: resp.httpResponse.statusCode,
		        Message: resp.httpResponse.statusMessage
		      };
		    }
		  }

		  if (data.requestId && !resp.requestId) resp.requestId = data.requestId;
		  if (data.Errors) data = data.Errors;
		  if (data.Error) data = data.Error;
		  if (data.Code) {
		    resp.error = util.error(new Error(), {
		      code: data.Code,
		      message: data.Message
		    });
		  } else {
		    resp.error = util.error(new Error(), {
		      code: resp.httpResponse.statusCode,
		      message: null
		    });
		  }
		}

		function extractData(resp) {
		  var req = resp.request;
		  var operation = req.service.api.operations[req.operation];
		  var shape = operation.output || {};
		  var origRules = shape;

		  if (origRules.resultWrapper) {
		    var tmp = Shape.create({type: 'structure'});
		    tmp.members[origRules.resultWrapper] = shape;
		    tmp.memberNames = [origRules.resultWrapper];
		    util.property(shape, 'name', shape.resultWrapper);
		    shape = tmp;
		  }

		  var parser = new AWS.XML.Parser();

		  // TODO: Refactor XML Parser to parse RequestId from response.
		  if (shape && shape.members && !shape.members._XAMZRequestId) {
		    var requestIdShape = Shape.create(
		      { type: 'string' },
		      { api: { protocol: 'query' } },
		      'requestId'
		    );
		    shape.members._XAMZRequestId = requestIdShape;
		  }

		  var data = parser.parse(resp.httpResponse.body.toString(), shape);
		  resp.requestId = data._XAMZRequestId || data.requestId;

		  if (data._XAMZRequestId) delete data._XAMZRequestId;

		  if (origRules.resultWrapper) {
		    if (data[origRules.resultWrapper]) {
		      util.update(data, data[origRules.resultWrapper]);
		      delete data[origRules.resultWrapper];
		    }
		  }

		  resp.data = data;
		}

		/**
		 * @api private
		 */
		module.exports = {
		  buildRequest: buildRequest,
		  extractError: extractError,
		  extractData: extractData
		};


	/***/ }),
	/* 18 */
	/***/ (function(module, exports, __webpack_require__) {

		var util = __webpack_require__(2);

		function QueryParamSerializer() {
		}

		QueryParamSerializer.prototype.serialize = function(params, shape, fn) {
		  serializeStructure('', params, shape, fn);
		};

		function ucfirst(shape) {
		  if (shape.isQueryName || shape.api.protocol !== 'ec2') {
		    return shape.name;
		  } else {
		    return shape.name[0].toUpperCase() + shape.name.substr(1);
		  }
		}

		function serializeStructure(prefix, struct, rules, fn) {
		  util.each(rules.members, function(name, member) {
		    var value = struct[name];
		    if (value === null || value === undefined) return;

		    var memberName = ucfirst(member);
		    memberName = prefix ? prefix + '.' + memberName : memberName;
		    serializeMember(memberName, value, member, fn);
		  });
		}

		function serializeMap(name, map, rules, fn) {
		  var i = 1;
		  util.each(map, function (key, value) {
		    var prefix = rules.flattened ? '.' : '.entry.';
		    var position = prefix + (i++) + '.';
		    var keyName = position + (rules.key.name || 'key');
		    var valueName = position + (rules.value.name || 'value');
		    serializeMember(name + keyName, key, rules.key, fn);
		    serializeMember(name + valueName, value, rules.value, fn);
		  });
		}

		function serializeList(name, list, rules, fn) {
		  var memberRules = rules.member || {};

		  if (list.length === 0) {
		    fn.call(this, name, null);
		    return;
		  }

		  util.arrayEach(list, function (v, n) {
		    var suffix = '.' + (n + 1);
		    if (rules.api.protocol === 'ec2') {
		      // Do nothing for EC2
		      suffix = suffix + ''; // make linter happy
		    } else if (rules.flattened) {
		      if (memberRules.name) {
		        var parts = name.split('.');
		        parts.pop();
		        parts.push(ucfirst(memberRules));
		        name = parts.join('.');
		      }
		    } else {
		      suffix = '.' + (memberRules.name ? memberRules.name : 'member') + suffix;
		    }
		    serializeMember(name + suffix, v, memberRules, fn);
		  });
		}

		function serializeMember(name, value, rules, fn) {
		  if (value === null || value === undefined) return;
		  if (rules.type === 'structure') {
		    serializeStructure(name, value, rules, fn);
		  } else if (rules.type === 'list') {
		    serializeList(name, value, rules, fn);
		  } else if (rules.type === 'map') {
		    serializeMap(name, value, rules, fn);
		  } else {
		    fn(name, rules.toWireFormat(value).toString());
		  }
		}

		/**
		 * @api private
		 */
		module.exports = QueryParamSerializer;


	/***/ }),
	/* 19 */
	/***/ (function(module, exports, __webpack_require__) {

		var Collection = __webpack_require__(20);

		var util = __webpack_require__(2);

		function property(obj, name, value) {
		  if (value !== null && value !== undefined) {
		    util.property.apply(this, arguments);
		  }
		}

		function memoizedProperty(obj, name) {
		  if (!obj.constructor.prototype[name]) {
		    util.memoizedProperty.apply(this, arguments);
		  }
		}

		function Shape(shape, options, memberName) {
		  options = options || {};

		  property(this, 'shape', shape.shape);
		  property(this, 'api', options.api, false);
		  property(this, 'type', shape.type);
		  property(this, 'enum', shape.enum);
		  property(this, 'min', shape.min);
		  property(this, 'max', shape.max);
		  property(this, 'pattern', shape.pattern);
		  property(this, 'location', shape.location || this.location || 'body');
		  property(this, 'name', this.name || shape.xmlName || shape.queryName ||
		    shape.locationName || memberName);
		  property(this, 'isStreaming', shape.streaming || this.isStreaming || false);
		  property(this, 'requiresLength', shape.requiresLength, false);
		  property(this, 'isComposite', shape.isComposite || false);
		  property(this, 'isShape', true, false);
		  property(this, 'isQueryName', Boolean(shape.queryName), false);
		  property(this, 'isLocationName', Boolean(shape.locationName), false);
		  property(this, 'isIdempotent', shape.idempotencyToken === true);
		  property(this, 'isJsonValue', shape.jsonvalue === true);
		  property(this, 'isSensitive', shape.sensitive === true || shape.prototype && shape.prototype.sensitive === true);
		  property(this, 'isEventStream', Boolean(shape.eventstream), false);
		  property(this, 'isEvent', Boolean(shape.event), false);
		  property(this, 'isEventPayload', Boolean(shape.eventpayload), false);
		  property(this, 'isEventHeader', Boolean(shape.eventheader), false);
		  property(this, 'isTimestampFormatSet', Boolean(shape.timestampFormat) || shape.prototype && shape.prototype.isTimestampFormatSet === true, false);
		  property(this, 'endpointDiscoveryId', Boolean(shape.endpointdiscoveryid), false);
		  property(this, 'hostLabel', Boolean(shape.hostLabel), false);

		  if (options.documentation) {
		    property(this, 'documentation', shape.documentation);
		    property(this, 'documentationUrl', shape.documentationUrl);
		  }

		  if (shape.xmlAttribute) {
		    property(this, 'isXmlAttribute', shape.xmlAttribute || false);
		  }

		  // type conversion and parsing
		  property(this, 'defaultValue', null);
		  this.toWireFormat = function(value) {
		    if (value === null || value === undefined) return '';
		    return value;
		  };
		  this.toType = function(value) { return value; };
		}

		/**
		 * @api private
		 */
		Shape.normalizedTypes = {
		  character: 'string',
		  double: 'float',
		  long: 'integer',
		  short: 'integer',
		  biginteger: 'integer',
		  bigdecimal: 'float',
		  blob: 'binary'
		};

		/**
		 * @api private
		 */
		Shape.types = {
		  'structure': StructureShape,
		  'list': ListShape,
		  'map': MapShape,
		  'boolean': BooleanShape,
		  'timestamp': TimestampShape,
		  'float': FloatShape,
		  'integer': IntegerShape,
		  'string': StringShape,
		  'base64': Base64Shape,
		  'binary': BinaryShape
		};

		Shape.resolve = function resolve(shape, options) {
		  if (shape.shape) {
		    var refShape = options.api.shapes[shape.shape];
		    if (!refShape) {
		      throw new Error('Cannot find shape reference: ' + shape.shape);
		    }

		    return refShape;
		  } else {
		    return null;
		  }
		};

		Shape.create = function create(shape, options, memberName) {
		  if (shape.isShape) return shape;

		  var refShape = Shape.resolve(shape, options);
		  if (refShape) {
		    var filteredKeys = Object.keys(shape);
		    if (!options.documentation) {
		      filteredKeys = filteredKeys.filter(function(name) {
		        return !name.match(/documentation/);
		      });
		    }

		    // create an inline shape with extra members
		    var InlineShape = function() {
		      refShape.constructor.call(this, shape, options, memberName);
		    };
		    InlineShape.prototype = refShape;
		    return new InlineShape();
		  } else {
		    // set type if not set
		    if (!shape.type) {
		      if (shape.members) shape.type = 'structure';
		      else if (shape.member) shape.type = 'list';
		      else if (shape.key) shape.type = 'map';
		      else shape.type = 'string';
		    }

		    // normalize types
		    var origType = shape.type;
		    if (Shape.normalizedTypes[shape.type]) {
		      shape.type = Shape.normalizedTypes[shape.type];
		    }

		    if (Shape.types[shape.type]) {
		      return new Shape.types[shape.type](shape, options, memberName);
		    } else {
		      throw new Error('Unrecognized shape type: ' + origType);
		    }
		  }
		};

		function CompositeShape(shape) {
		  Shape.apply(this, arguments);
		  property(this, 'isComposite', true);

		  if (shape.flattened) {
		    property(this, 'flattened', shape.flattened || false);
		  }
		}

		function StructureShape(shape, options) {
		  var self = this;
		  var requiredMap = null, firstInit = !this.isShape;

		  CompositeShape.apply(this, arguments);

		  if (firstInit) {
		    property(this, 'defaultValue', function() { return {}; });
		    property(this, 'members', {});
		    property(this, 'memberNames', []);
		    property(this, 'required', []);
		    property(this, 'isRequired', function() { return false; });
		    property(this, 'isDocument', Boolean(shape.document));
		  }

		  if (shape.members) {
		    property(this, 'members', new Collection(shape.members, options, function(name, member) {
		      return Shape.create(member, options, name);
		    }));
		    memoizedProperty(this, 'memberNames', function() {
		      return shape.xmlOrder || Object.keys(shape.members);
		    });

		    if (shape.event) {
		      memoizedProperty(this, 'eventPayloadMemberName', function() {
		        var members = self.members;
		        var memberNames = self.memberNames;
		        // iterate over members to find ones that are event payloads
		        for (var i = 0, iLen = memberNames.length; i < iLen; i++) {
		          if (members[memberNames[i]].isEventPayload) {
		            return memberNames[i];
		          }
		        }
		      });

		      memoizedProperty(this, 'eventHeaderMemberNames', function() {
		        var members = self.members;
		        var memberNames = self.memberNames;
		        var eventHeaderMemberNames = [];
		        // iterate over members to find ones that are event headers
		        for (var i = 0, iLen = memberNames.length; i < iLen; i++) {
		          if (members[memberNames[i]].isEventHeader) {
		            eventHeaderMemberNames.push(memberNames[i]);
		          }
		        }
		        return eventHeaderMemberNames;
		      });
		    }
		  }

		  if (shape.required) {
		    property(this, 'required', shape.required);
		    property(this, 'isRequired', function(name) {
		      if (!requiredMap) {
		        requiredMap = {};
		        for (var i = 0; i < shape.required.length; i++) {
		          requiredMap[shape.required[i]] = true;
		        }
		      }

		      return requiredMap[name];
		    }, false, true);
		  }

		  property(this, 'resultWrapper', shape.resultWrapper || null);

		  if (shape.payload) {
		    property(this, 'payload', shape.payload);
		  }

		  if (typeof shape.xmlNamespace === 'string') {
		    property(this, 'xmlNamespaceUri', shape.xmlNamespace);
		  } else if (typeof shape.xmlNamespace === 'object') {
		    property(this, 'xmlNamespacePrefix', shape.xmlNamespace.prefix);
		    property(this, 'xmlNamespaceUri', shape.xmlNamespace.uri);
		  }
		}

		function ListShape(shape, options) {
		  var self = this, firstInit = !this.isShape;
		  CompositeShape.apply(this, arguments);

		  if (firstInit) {
		    property(this, 'defaultValue', function() { return []; });
		  }

		  if (shape.member) {
		    memoizedProperty(this, 'member', function() {
		      return Shape.create(shape.member, options);
		    });
		  }

		  if (this.flattened) {
		    var oldName = this.name;
		    memoizedProperty(this, 'name', function() {
		      return self.member.name || oldName;
		    });
		  }
		}

		function MapShape(shape, options) {
		  var firstInit = !this.isShape;
		  CompositeShape.apply(this, arguments);

		  if (firstInit) {
		    property(this, 'defaultValue', function() { return {}; });
		    property(this, 'key', Shape.create({type: 'string'}, options));
		    property(this, 'value', Shape.create({type: 'string'}, options));
		  }

		  if (shape.key) {
		    memoizedProperty(this, 'key', function() {
		      return Shape.create(shape.key, options);
		    });
		  }
		  if (shape.value) {
		    memoizedProperty(this, 'value', function() {
		      return Shape.create(shape.value, options);
		    });
		  }
		}

		function TimestampShape(shape) {
		  var self = this;
		  Shape.apply(this, arguments);

		  if (shape.timestampFormat) {
		    property(this, 'timestampFormat', shape.timestampFormat);
		  } else if (self.isTimestampFormatSet && this.timestampFormat) {
		    property(this, 'timestampFormat', this.timestampFormat);
		  } else if (this.location === 'header') {
		    property(this, 'timestampFormat', 'rfc822');
		  } else if (this.location === 'querystring') {
		    property(this, 'timestampFormat', 'iso8601');
		  } else if (this.api) {
		    switch (this.api.protocol) {
		      case 'json':
		      case 'rest-json':
		        property(this, 'timestampFormat', 'unixTimestamp');
		        break;
		      case 'rest-xml':
		      case 'query':
		      case 'ec2':
		        property(this, 'timestampFormat', 'iso8601');
		        break;
		    }
		  }

		  this.toType = function(value) {
		    if (value === null || value === undefined) return null;
		    if (typeof value.toUTCString === 'function') return value;
		    return typeof value === 'string' || typeof value === 'number' ?
		           util.date.parseTimestamp(value) : null;
		  };

		  this.toWireFormat = function(value) {
		    return util.date.format(value, self.timestampFormat);
		  };
		}

		function StringShape() {
		  Shape.apply(this, arguments);

		  var nullLessProtocols = ['rest-xml', 'query', 'ec2'];
		  this.toType = function(value) {
		    value = this.api && nullLessProtocols.indexOf(this.api.protocol) > -1 ?
		      value || '' : value;
		    if (this.isJsonValue) {
		      return JSON.parse(value);
		    }

		    return value && typeof value.toString === 'function' ?
		      value.toString() : value;
		  };

		  this.toWireFormat = function(value) {
		    return this.isJsonValue ? JSON.stringify(value) : value;
		  };
		}

		function FloatShape() {
		  Shape.apply(this, arguments);

		  this.toType = function(value) {
		    if (value === null || value === undefined) return null;
		    return parseFloat(value);
		  };
		  this.toWireFormat = this.toType;
		}

		function IntegerShape() {
		  Shape.apply(this, arguments);

		  this.toType = function(value) {
		    if (value === null || value === undefined) return null;
		    return parseInt(value, 10);
		  };
		  this.toWireFormat = this.toType;
		}

		function BinaryShape() {
		  Shape.apply(this, arguments);
		  this.toType = function(value) {
		    var buf = util.base64.decode(value);
		    if (this.isSensitive && util.isNode() && typeof util.Buffer.alloc === 'function') {
		  /* Node.js can create a Buffer that is not isolated.
		   * i.e. buf.byteLength !== buf.buffer.byteLength
		   * This means that the sensitive data is accessible to anyone with access to buf.buffer.
		   * If this is the node shared Buffer, then other code within this process _could_ find this secret.
		   * Copy sensitive data to an isolated Buffer and zero the sensitive data.
		   * While this is safe to do here, copying this code somewhere else may produce unexpected results.
		   */
		      var secureBuf = util.Buffer.alloc(buf.length, buf);
		      buf.fill(0);
		      buf = secureBuf;
		    }
		    return buf;
		  };
		  this.toWireFormat = util.base64.encode;
		}

		function Base64Shape() {
		  BinaryShape.apply(this, arguments);
		}

		function BooleanShape() {
		  Shape.apply(this, arguments);

		  this.toType = function(value) {
		    if (typeof value === 'boolean') return value;
		    if (value === null || value === undefined) return null;
		    return value === 'true';
		  };
		}

		/**
		 * @api private
		 */
		Shape.shapes = {
		  StructureShape: StructureShape,
		  ListShape: ListShape,
		  MapShape: MapShape,
		  StringShape: StringShape,
		  BooleanShape: BooleanShape,
		  Base64Shape: Base64Shape
		};

		/**
		 * @api private
		 */
		module.exports = Shape;


	/***/ }),
	/* 20 */
	/***/ (function(module, exports, __webpack_require__) {

		var memoizedProperty = __webpack_require__(2).memoizedProperty;

		function memoize(name, value, factory, nameTr) {
		  memoizedProperty(this, nameTr(name), function() {
		    return factory(name, value);
		  });
		}

		function Collection(iterable, options, factory, nameTr, callback) {
		  nameTr = nameTr || String;
		  var self = this;

		  for (var id in iterable) {
		    if (Object.prototype.hasOwnProperty.call(iterable, id)) {
		      memoize.call(self, id, iterable[id], factory, nameTr);
		      if (callback) callback(id, iterable[id]);
		    }
		  }
		}

		/**
		 * @api private
		 */
		module.exports = Collection;


	/***/ }),
	/* 21 */
	/***/ (function(module, exports, __webpack_require__) {

		var util = __webpack_require__(2);
		var populateHostPrefix = __webpack_require__(16).populateHostPrefix;

		function populateMethod(req) {
		  req.httpRequest.method = req.service.api.operations[req.operation].httpMethod;
		}

		function generateURI(endpointPath, operationPath, input, params) {
		  var uri = [endpointPath, operationPath].join('/');
		  uri = uri.replace(/\/+/g, '/');

		  var queryString = {}, queryStringSet = false;
		  util.each(input.members, function (name, member) {
		    var paramValue = params[name];
		    if (paramValue === null || paramValue === undefined) return;
		    if (member.location === 'uri') {
		      var regex = new RegExp('\\{' + member.name + '(\\+)?\\}');
		      uri = uri.replace(regex, function(_, plus) {
		        var fn = plus ? util.uriEscapePath : util.uriEscape;
		        return fn(String(paramValue));
		      });
		    } else if (member.location === 'querystring') {
		      queryStringSet = true;

		      if (member.type === 'list') {
		        queryString[member.name] = paramValue.map(function(val) {
		          return util.uriEscape(member.member.toWireFormat(val).toString());
		        });
		      } else if (member.type === 'map') {
		        util.each(paramValue, function(key, value) {
		          if (Array.isArray(value)) {
		            queryString[key] = value.map(function(val) {
		              return util.uriEscape(String(val));
		            });
		          } else {
		            queryString[key] = util.uriEscape(String(value));
		          }
		        });
		      } else {
		        queryString[member.name] = util.uriEscape(member.toWireFormat(paramValue).toString());
		      }
		    }
		  });

		  if (queryStringSet) {
		    uri += (uri.indexOf('?') >= 0 ? '&' : '?');
		    var parts = [];
		    util.arrayEach(Object.keys(queryString).sort(), function(key) {
		      if (!Array.isArray(queryString[key])) {
		        queryString[key] = [queryString[key]];
		      }
		      for (var i = 0; i < queryString[key].length; i++) {
		        parts.push(util.uriEscape(String(key)) + '=' + queryString[key][i]);
		      }
		    });
		    uri += parts.join('&');
		  }

		  return uri;
		}

		function populateURI(req) {
		  var operation = req.service.api.operations[req.operation];
		  var input = operation.input;

		  var uri = generateURI(req.httpRequest.endpoint.path, operation.httpPath, input, req.params);
		  req.httpRequest.path = uri;
		}

		function populateHeaders(req) {
		  var operation = req.service.api.operations[req.operation];
		  util.each(operation.input.members, function (name, member) {
		    var value = req.params[name];
		    if (value === null || value === undefined) return;

		    if (member.location === 'headers' && member.type === 'map') {
		      util.each(value, function(key, memberValue) {
		        req.httpRequest.headers[member.name + key] = memberValue;
		      });
		    } else if (member.location === 'header') {
		      value = member.toWireFormat(value).toString();
		      if (member.isJsonValue) {
		        value = util.base64.encode(value);
		      }
		      req.httpRequest.headers[member.name] = value;
		    }
		  });
		}

		function buildRequest(req) {
		  populateMethod(req);
		  populateURI(req);
		  populateHeaders(req);
		  populateHostPrefix(req);
		}

		function extractError() {
		}

		function extractData(resp) {
		  var req = resp.request;
		  var data = {};
		  var r = resp.httpResponse;
		  var operation = req.service.api.operations[req.operation];
		  var output = operation.output;

		  // normalize headers names to lower-cased keys for matching
		  var headers = {};
		  util.each(r.headers, function (k, v) {
		    headers[k.toLowerCase()] = v;
		  });

		  util.each(output.members, function(name, member) {
		    var header = (member.name || name).toLowerCase();
		    if (member.location === 'headers' && member.type === 'map') {
		      data[name] = {};
		      var location = member.isLocationName ? member.name : '';
		      var pattern = new RegExp('^' + location + '(.+)', 'i');
		      util.each(r.headers, function (k, v) {
		        var result = k.match(pattern);
		        if (result !== null) {
		          data[name][result[1]] = v;
		        }
		      });
		    } else if (member.location === 'header') {
		      if (headers[header] !== undefined) {
		        var value = member.isJsonValue ?
		          util.base64.decode(headers[header]) :
		          headers[header];
		        data[name] = member.toType(value);
		      }
		    } else if (member.location === 'statusCode') {
		      data[name] = parseInt(r.statusCode, 10);
		    }
		  });

		  resp.data = data;
		}

		/**
		 * @api private
		 */
		module.exports = {
		  buildRequest: buildRequest,
		  extractError: extractError,
		  extractData: extractData,
		  generateURI: generateURI
		};


	/***/ }),
	/* 22 */
	/***/ (function(module, exports, __webpack_require__) {

		var util = __webpack_require__(2);
		var Rest = __webpack_require__(21);
		var Json = __webpack_require__(13);
		var JsonBuilder = __webpack_require__(14);
		var JsonParser = __webpack_require__(15);

		function populateBody(req) {
		  var builder = new JsonBuilder();
		  var input = req.service.api.operations[req.operation].input;

		  if (input.payload) {
		    var params = {};
		    var payloadShape = input.members[input.payload];
		    params = req.params[input.payload];
		    if (params === undefined) return;

		    if (payloadShape.type === 'structure') {
		      req.httpRequest.body = builder.build(params, payloadShape);
		      applyContentTypeHeader(req);
		    } else { // non-JSON payload
		      req.httpRequest.body = params;
		      if (payloadShape.type === 'binary' || payloadShape.isStreaming) {
		        applyContentTypeHeader(req, true);
		      }
		    }
		  } else {
		    var body = builder.build(req.params, input);
		    if (body !== '{}' || req.httpRequest.method !== 'GET') { //don't send empty body for GET method
		      req.httpRequest.body = body;
		    }
		    applyContentTypeHeader(req);
		  }
		}

		function applyContentTypeHeader(req, isBinary) {
		  var operation = req.service.api.operations[req.operation];
		  var input = operation.input;

		  if (!req.httpRequest.headers['Content-Type']) {
		    var type = isBinary ? 'binary/octet-stream' : 'application/json';
		    req.httpRequest.headers['Content-Type'] = type;
		  }
		}

		function buildRequest(req) {
		  Rest.buildRequest(req);

		  // never send body payload on HEAD/DELETE
		  if (['HEAD', 'DELETE'].indexOf(req.httpRequest.method) < 0) {
		    populateBody(req);
		  }
		}

		function extractError(resp) {
		  Json.extractError(resp);
		}

		function extractData(resp) {
		  Rest.extractData(resp);

		  var req = resp.request;
		  var operation = req.service.api.operations[req.operation];
		  var rules = req.service.api.operations[req.operation].output || {};
		  var parser;
		  var hasEventOutput = operation.hasEventOutput;

		  if (rules.payload) {
		    var payloadMember = rules.members[rules.payload];
		    var body = resp.httpResponse.body;
		    if (payloadMember.isEventStream) {
		      parser = new JsonParser();
		      resp.data[payload] = util.createEventStream(
		        AWS.HttpClient.streamsApiVersion === 2 ? resp.httpResponse.stream : body,
		        parser,
		        payloadMember
		      );
		    } else if (payloadMember.type === 'structure' || payloadMember.type === 'list') {
		      var parser = new JsonParser();
		      resp.data[rules.payload] = parser.parse(body, payloadMember);
		    } else if (payloadMember.type === 'binary' || payloadMember.isStreaming) {
		      resp.data[rules.payload] = body;
		    } else {
		      resp.data[rules.payload] = payloadMember.toType(body);
		    }
		  } else {
		    var data = resp.data;
		    Json.extractData(resp);
		    resp.data = util.merge(data, resp.data);
		  }
		}

		/**
		 * @api private
		 */
		module.exports = {
		  buildRequest: buildRequest,
		  extractError: extractError,
		  extractData: extractData
		};


	/***/ }),
	/* 23 */
	/***/ (function(module, exports, __webpack_require__) {

		var AWS = __webpack_require__(1);
		var util = __webpack_require__(2);
		var Rest = __webpack_require__(21);

		function populateBody(req) {
		  var input = req.service.api.operations[req.operation].input;
		  var builder = new AWS.XML.Builder();
		  var params = req.params;

		  var payload = input.payload;
		  if (payload) {
		    var payloadMember = input.members[payload];
		    params = params[payload];
		    if (params === undefined) return;

		    if (payloadMember.type === 'structure') {
		      var rootElement = payloadMember.name;
		      req.httpRequest.body = builder.toXML(params, payloadMember, rootElement, true);
		    } else { // non-xml payload
		      req.httpRequest.body = params;
		    }
		  } else {
		    req.httpRequest.body = builder.toXML(params, input, input.name ||
		      input.shape || util.string.upperFirst(req.operation) + 'Request');
		  }
		}

		function buildRequest(req) {
		  Rest.buildRequest(req);

		  // never send body payload on GET/HEAD
		  if (['GET', 'HEAD'].indexOf(req.httpRequest.method) < 0) {
		    populateBody(req);
		  }
		}

		function extractError(resp) {
		  Rest.extractError(resp);

		  var data;
		  try {
		    data = new AWS.XML.Parser().parse(resp.httpResponse.body.toString());
		  } catch (e) {
		    data = {
		      Code: resp.httpResponse.statusCode,
		      Message: resp.httpResponse.statusMessage
		    };
		  }

		  if (data.Errors) data = data.Errors;
		  if (data.Error) data = data.Error;
		  if (data.Code) {
		    resp.error = util.error(new Error(), {
		      code: data.Code,
		      message: data.Message
		    });
		  } else {
		    resp.error = util.error(new Error(), {
		      code: resp.httpResponse.statusCode,
		      message: null
		    });
		  }
		}

		function extractData(resp) {
		  Rest.extractData(resp);

		  var parser;
		  var req = resp.request;
		  var body = resp.httpResponse.body;
		  var operation = req.service.api.operations[req.operation];
		  var output = operation.output;

		  var hasEventOutput = operation.hasEventOutput;

		  var payload = output.payload;
		  if (payload) {
		    var payloadMember = output.members[payload];
		    if (payloadMember.isEventStream) {
		      parser = new AWS.XML.Parser();
		      resp.data[payload] = util.createEventStream(
		        AWS.HttpClient.streamsApiVersion === 2 ? resp.httpResponse.stream : resp.httpResponse.body,
		        parser,
		        payloadMember
		      );
		    } else if (payloadMember.type === 'structure') {
		      parser = new AWS.XML.Parser();
		      resp.data[payload] = parser.parse(body.toString(), payloadMember);
		    } else if (payloadMember.type === 'binary' || payloadMember.isStreaming) {
		      resp.data[payload] = body;
		    } else {
		      resp.data[payload] = payloadMember.toType(body);
		    }
		  } else if (body.length > 0) {
		    parser = new AWS.XML.Parser();
		    var data = parser.parse(body.toString(), output);
		    util.update(resp.data, data);
		  }
		}

		/**
		 * @api private
		 */
		module.exports = {
		  buildRequest: buildRequest,
		  extractError: extractError,
		  extractData: extractData
		};


	/***/ }),
	/* 24 */
	/***/ (function(module, exports, __webpack_require__) {

		var util = __webpack_require__(2);
		var XmlNode = __webpack_require__(25).XmlNode;
		var XmlText = __webpack_require__(27).XmlText;

		function XmlBuilder() { }

		XmlBuilder.prototype.toXML = function(params, shape, rootElement, noEmpty) {
		  var xml = new XmlNode(rootElement);
		  applyNamespaces(xml, shape, true);
		  serialize(xml, params, shape);
		  return xml.children.length > 0 || noEmpty ? xml.toString() : '';
		};

		function serialize(xml, value, shape) {
		  switch (shape.type) {
		    case 'structure': return serializeStructure(xml, value, shape);
		    case 'map': return serializeMap(xml, value, shape);
		    case 'list': return serializeList(xml, value, shape);
		    default: return serializeScalar(xml, value, shape);
		  }
		}

		function serializeStructure(xml, params, shape) {
		  util.arrayEach(shape.memberNames, function(memberName) {
		    var memberShape = shape.members[memberName];
		    if (memberShape.location !== 'body') return;

		    var value = params[memberName];
		    var name = memberShape.name;
		    if (value !== undefined && value !== null) {
		      if (memberShape.isXmlAttribute) {
		        xml.addAttribute(name, value);
		      } else if (memberShape.flattened) {
		        serialize(xml, value, memberShape);
		      } else {
		        var element = new XmlNode(name);
		        xml.addChildNode(element);
		        applyNamespaces(element, memberShape);
		        serialize(element, value, memberShape);
		      }
		    }
		  });
		}

		function serializeMap(xml, map, shape) {
		  var xmlKey = shape.key.name || 'key';
		  var xmlValue = shape.value.name || 'value';

		  util.each(map, function(key, value) {
		    var entry = new XmlNode(shape.flattened ? shape.name : 'entry');
		    xml.addChildNode(entry);

		    var entryKey = new XmlNode(xmlKey);
		    var entryValue = new XmlNode(xmlValue);
		    entry.addChildNode(entryKey);
		    entry.addChildNode(entryValue);

		    serialize(entryKey, key, shape.key);
		    serialize(entryValue, value, shape.value);
		  });
		}

		function serializeList(xml, list, shape) {
		  if (shape.flattened) {
		    util.arrayEach(list, function(value) {
		      var name = shape.member.name || shape.name;
		      var element = new XmlNode(name);
		      xml.addChildNode(element);
		      serialize(element, value, shape.member);
		    });
		  } else {
		    util.arrayEach(list, function(value) {
		      var name = shape.member.name || 'member';
		      var element = new XmlNode(name);
		      xml.addChildNode(element);
		      serialize(element, value, shape.member);
		    });
		  }
		}

		function serializeScalar(xml, value, shape) {
		  xml.addChildNode(
		    new XmlText(shape.toWireFormat(value))
		  );
		}

		function applyNamespaces(xml, shape, isRoot) {
		  var uri, prefix = 'xmlns';
		  if (shape.xmlNamespaceUri) {
		    uri = shape.xmlNamespaceUri;
		    if (shape.xmlNamespacePrefix) prefix += ':' + shape.xmlNamespacePrefix;
		  } else if (isRoot && shape.api.xmlNamespaceUri) {
		    uri = shape.api.xmlNamespaceUri;
		  }

		  if (uri) xml.addAttribute(prefix, uri);
		}

		/**
		 * @api private
		 */
		module.exports = XmlBuilder;


	/***/ }),
	/* 25 */
	/***/ (function(module, exports, __webpack_require__) {

		var escapeAttribute = __webpack_require__(26).escapeAttribute;

		/**
		 * Represents an XML node.
		 * @api private
		 */
		function XmlNode(name, children) {
		    if (children === void 0) { children = []; }
		    this.name = name;
		    this.children = children;
		    this.attributes = {};
		}
		XmlNode.prototype.addAttribute = function (name, value) {
		    this.attributes[name] = value;
		    return this;
		};
		XmlNode.prototype.addChildNode = function (child) {
		    this.children.push(child);
		    return this;
		};
		XmlNode.prototype.removeAttribute = function (name) {
		    delete this.attributes[name];
		    return this;
		};
		XmlNode.prototype.toString = function () {
		    var hasChildren = Boolean(this.children.length);
		    var xmlText = '<' + this.name;
		    // add attributes
		    var attributes = this.attributes;
		    for (var i = 0, attributeNames = Object.keys(attributes); i < attributeNames.length; i++) {
		        var attributeName = attributeNames[i];
		        var attribute = attributes[attributeName];
		        if (typeof attribute !== 'undefined' && attribute !== null) {
		            xmlText += ' ' + attributeName + '=\"' + escapeAttribute('' + attribute) + '\"';
		        }
		    }
		    return xmlText += !hasChildren ? '/>' : '>' + this.children.map(function (c) { return c.toString(); }).join('') + '</' + this.name + '>';
		};

		/**
		 * @api private
		 */
		module.exports = {
		    XmlNode: XmlNode
		};


	/***/ }),
	/* 26 */
	/***/ (function(module, exports) {

		/**
		 * Escapes characters that can not be in an XML attribute.
		 */
		function escapeAttribute(value) {
		    return value.replace(/&/g, '&amp;').replace(/'/g, '&apos;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
		}

		/**
		 * @api private
		 */
		module.exports = {
		    escapeAttribute: escapeAttribute
		};


	/***/ }),
	/* 27 */
	/***/ (function(module, exports, __webpack_require__) {

		var escapeElement = __webpack_require__(28).escapeElement;

		/**
		 * Represents an XML text value.
		 * @api private
		 */
		function XmlText(value) {
		    this.value = value;
		}

		XmlText.prototype.toString = function () {
		    return escapeElement('' + this.value);
		};

		/**
		 * @api private
		 */
		module.exports = {
		    XmlText: XmlText
		};


	/***/ }),
	/* 28 */
	/***/ (function(module, exports) {

		/**
		 * Escapes characters that can not be in an XML element.
		 */
		function escapeElement(value) {
		    return value.replace(/&/g, '&amp;')
		                .replace(/</g, '&lt;')
		                .replace(/>/g, '&gt;')
		                .replace(/\r/g, '&#x0D;')
		                .replace(/\n/g, '&#x0A;')
		                .replace(/\u0085/g, '&#x85;')
		                .replace(/\u2028/, '&#x2028;');
		}

		/**
		 * @api private
		 */
		module.exports = {
		    escapeElement: escapeElement
		};


	/***/ }),
	/* 29 */
	/***/ (function(module, exports, __webpack_require__) {

		var Collection = __webpack_require__(20);
		var Operation = __webpack_require__(30);
		var Shape = __webpack_require__(19);
		var Paginator = __webpack_require__(31);
		var ResourceWaiter = __webpack_require__(32);
		var metadata = __webpack_require__(7);

		var util = __webpack_require__(2);
		var property = util.property;
		var memoizedProperty = util.memoizedProperty;

		function Api(api, options) {
		  var self = this;
		  api = api || {};
		  options = options || {};
		  options.api = this;

		  api.metadata = api.metadata || {};

		  var serviceIdentifier = options.serviceIdentifier;
		  delete options.serviceIdentifier;

		  property(this, 'isApi', true, false);
		  property(this, 'apiVersion', api.metadata.apiVersion);
		  property(this, 'endpointPrefix', api.metadata.endpointPrefix);
		  property(this, 'signingName', api.metadata.signingName);
		  property(this, 'globalEndpoint', api.metadata.globalEndpoint);
		  property(this, 'signatureVersion', api.metadata.signatureVersion);
		  property(this, 'jsonVersion', api.metadata.jsonVersion);
		  property(this, 'targetPrefix', api.metadata.targetPrefix);
		  property(this, 'protocol', api.metadata.protocol);
		  property(this, 'timestampFormat', api.metadata.timestampFormat);
		  property(this, 'xmlNamespaceUri', api.metadata.xmlNamespace);
		  property(this, 'abbreviation', api.metadata.serviceAbbreviation);
		  property(this, 'fullName', api.metadata.serviceFullName);
		  property(this, 'serviceId', api.metadata.serviceId);
		  if (serviceIdentifier && metadata[serviceIdentifier]) {
		      property(this, 'xmlNoDefaultLists', metadata[serviceIdentifier].xmlNoDefaultLists, false);
		  }

		  memoizedProperty(this, 'className', function() {
		    var name = api.metadata.serviceAbbreviation || api.metadata.serviceFullName;
		    if (!name) return null;

		    name = name.replace(/^Amazon|AWS\s*|\(.*|\s+|\W+/g, '');
		    if (name === 'ElasticLoadBalancing') name = 'ELB';
		    return name;
		  });

		  function addEndpointOperation(name, operation) {
		    if (operation.endpointoperation === true) {
		      property(self, 'endpointOperation', util.string.lowerFirst(name));
		    }
		    if (operation.endpointdiscovery && !self.hasRequiredEndpointDiscovery) {
		      property(
		        self,
		        'hasRequiredEndpointDiscovery',
		        operation.endpointdiscovery.required === true
		      );
		    }
		  }

		  property(this, 'operations', new Collection(api.operations, options, function(name, operation) {
		    return new Operation(name, operation, options);
		  }, util.string.lowerFirst, addEndpointOperation));

		  property(this, 'shapes', new Collection(api.shapes, options, function(name, shape) {
		    return Shape.create(shape, options);
		  }));

		  property(this, 'paginators', new Collection(api.paginators, options, function(name, paginator) {
		    return new Paginator(name, paginator, options);
		  }));

		  property(this, 'waiters', new Collection(api.waiters, options, function(name, waiter) {
		    return new ResourceWaiter(name, waiter, options);
		  }, util.string.lowerFirst));

		  if (options.documentation) {
		    property(this, 'documentation', api.documentation);
		    property(this, 'documentationUrl', api.documentationUrl);
		  }
		}

		/**
		 * @api private
		 */
		module.exports = Api;


	/***/ }),
	/* 30 */
	/***/ (function(module, exports, __webpack_require__) {

		var Shape = __webpack_require__(19);

		var util = __webpack_require__(2);
		var property = util.property;
		var memoizedProperty = util.memoizedProperty;

		function Operation(name, operation, options) {
		  var self = this;
		  options = options || {};

		  property(this, 'name', operation.name || name);
		  property(this, 'api', options.api, false);

		  operation.http = operation.http || {};
		  property(this, 'endpoint', operation.endpoint);
		  property(this, 'httpMethod', operation.http.method || 'POST');
		  property(this, 'httpPath', operation.http.requestUri || '/');
		  property(this, 'authtype', operation.authtype || '');
		  property(
		    this,
		    'endpointDiscoveryRequired',
		    operation.endpointdiscovery ?
		      (operation.endpointdiscovery.required ? 'REQUIRED' : 'OPTIONAL') :
		    'NULL'
		  );
		  property(this, 'httpChecksumRequired', operation.httpChecksumRequired, false);

		  memoizedProperty(this, 'input', function() {
		    if (!operation.input) {
		      return new Shape.create({type: 'structure'}, options);
		    }
		    return Shape.create(operation.input, options);
		  });

		  memoizedProperty(this, 'output', function() {
		    if (!operation.output) {
		      return new Shape.create({type: 'structure'}, options);
		    }
		    return Shape.create(operation.output, options);
		  });

		  memoizedProperty(this, 'errors', function() {
		    var list = [];
		    if (!operation.errors) return null;

		    for (var i = 0; i < operation.errors.length; i++) {
		      list.push(Shape.create(operation.errors[i], options));
		    }

		    return list;
		  });

		  memoizedProperty(this, 'paginator', function() {
		    return options.api.paginators[name];
		  });

		  if (options.documentation) {
		    property(this, 'documentation', operation.documentation);
		    property(this, 'documentationUrl', operation.documentationUrl);
		  }

		  // idempotentMembers only tracks top-level input shapes
		  memoizedProperty(this, 'idempotentMembers', function() {
		    var idempotentMembers = [];
		    var input = self.input;
		    var members = input.members;
		    if (!input.members) {
		      return idempotentMembers;
		    }
		    for (var name in members) {
		      if (!members.hasOwnProperty(name)) {
		        continue;
		      }
		      if (members[name].isIdempotent === true) {
		        idempotentMembers.push(name);
		      }
		    }
		    return idempotentMembers;
		  });

		  memoizedProperty(this, 'hasEventOutput', function() {
		    var output = self.output;
		    return hasEventStream(output);
		  });
		}

		function hasEventStream(topLevelShape) {
		  var members = topLevelShape.members;
		  var payload = topLevelShape.payload;

		  if (!topLevelShape.members) {
		    return false;
		  }

		  if (payload) {
		    var payloadMember = members[payload];
		    return payloadMember.isEventStream;
		  }

		  // check if any member is an event stream
		  for (var name in members) {
		    if (!members.hasOwnProperty(name)) {
		      if (members[name].isEventStream === true) {
		        return true;
		      }
		    }
		  }
		  return false;
		}

		/**
		 * @api private
		 */
		module.exports = Operation;


	/***/ }),
	/* 31 */
	/***/ (function(module, exports, __webpack_require__) {

		var property = __webpack_require__(2).property;

		function Paginator(name, paginator) {
		  property(this, 'inputToken', paginator.input_token);
		  property(this, 'limitKey', paginator.limit_key);
		  property(this, 'moreResults', paginator.more_results);
		  property(this, 'outputToken', paginator.output_token);
		  property(this, 'resultKey', paginator.result_key);
		}

		/**
		 * @api private
		 */
		module.exports = Paginator;


	/***/ }),
	/* 32 */
	/***/ (function(module, exports, __webpack_require__) {

		var util = __webpack_require__(2);
		var property = util.property;

		function ResourceWaiter(name, waiter, options) {
		  options = options || {};
		  property(this, 'name', name);
		  property(this, 'api', options.api, false);

		  if (waiter.operation) {
		    property(this, 'operation', util.string.lowerFirst(waiter.operation));
		  }

		  var self = this;
		  var keys = [
		    'type',
		    'description',
		    'delay',
		    'maxAttempts',
		    'acceptors'
		  ];

		  keys.forEach(function(key) {
		    var value = waiter[key];
		    if (value) {
		      property(self, key, value);
		    }
		  });
		}

		/**
		 * @api private
		 */
		module.exports = ResourceWaiter;


	/***/ }),
	/* 33 */
	/***/ (function(module, exports) {

		function apiLoader(svc, version) {
		  if (!apiLoader.services.hasOwnProperty(svc)) {
		    throw new Error('InvalidService: Failed to load api for ' + svc);
		  }
		  return apiLoader.services[svc][version];
		}

		/**
		 * @api private
		 *
		 * This member of AWS.apiLoader is private, but changing it will necessitate a
		 * change to ../scripts/services-table-generator.ts
		 */
		apiLoader.services = {};

		/**
		 * @api private
		 */
		module.exports = apiLoader;


	/***/ }),
	/* 34 */
	/***/ (function(module, exports, __webpack_require__) {

		"use strict";
		Object.defineProperty(exports, "__esModule", { value: true });
		var LRU_1 = __webpack_require__(35);
		var CACHE_SIZE = 1000;
		/**
		 * Inspired node-lru-cache[https://github.com/isaacs/node-lru-cache]
		 */
		var EndpointCache = /** @class */ (function () {
		    function EndpointCache(maxSize) {
		        if (maxSize === void 0) { maxSize = CACHE_SIZE; }
		        this.maxSize = maxSize;
		        this.cache = new LRU_1.LRUCache(maxSize);
		    }
		    ;
		    Object.defineProperty(EndpointCache.prototype, "size", {
		        get: function () {
		            return this.cache.length;
		        },
		        enumerable: true,
		        configurable: true
		    });
		    EndpointCache.prototype.put = function (key, value) {
		      var keyString = typeof key !== 'string' ? EndpointCache.getKeyString(key) : key;
		        var endpointRecord = this.populateValue(value);
		        this.cache.put(keyString, endpointRecord);
		    };
		    EndpointCache.prototype.get = function (key) {
		      var keyString = typeof key !== 'string' ? EndpointCache.getKeyString(key) : key;
		        var now = Date.now();
		        var records = this.cache.get(keyString);
		        if (records) {
		            for (var i = records.length-1; i >= 0; i--) {
		                var record = records[i];
		                if (record.Expire < now) {
		                    records.splice(i, 1);
		                }
		            }
		            if (records.length === 0) {
		                this.cache.remove(keyString);
		                return undefined;
		            }
		        }
		        return records;
		    };
		    EndpointCache.getKeyString = function (key) {
		        var identifiers = [];
		        var identifierNames = Object.keys(key).sort();
		        for (var i = 0; i < identifierNames.length; i++) {
		            var identifierName = identifierNames[i];
		            if (key[identifierName] === undefined)
		                continue;
		            identifiers.push(key[identifierName]);
		        }
		        return identifiers.join(' ');
		    };
		    EndpointCache.prototype.populateValue = function (endpoints) {
		        var now = Date.now();
		        return endpoints.map(function (endpoint) { return ({
		            Address: endpoint.Address || '',
		            Expire: now + (endpoint.CachePeriodInMinutes || 1) * 60 * 1000
		        }); });
		    };
		    EndpointCache.prototype.empty = function () {
		        this.cache.empty();
		    };
		    EndpointCache.prototype.remove = function (key) {
		      var keyString = typeof key !== 'string' ? EndpointCache.getKeyString(key) : key;
		        this.cache.remove(keyString);
		    };
		    return EndpointCache;
		}());
		exports.EndpointCache = EndpointCache;

	/***/ }),
	/* 35 */
	/***/ (function(module, exports) {

		"use strict";
		Object.defineProperty(exports, "__esModule", { value: true });
		var LinkedListNode = /** @class */ (function () {
		    function LinkedListNode(key, value) {
		        this.key = key;
		        this.value = value;
		    }
		    return LinkedListNode;
		}());
		var LRUCache = /** @class */ (function () {
		    function LRUCache(size) {
		        this.nodeMap = {};
		        this.size = 0;
		        if (typeof size !== 'number' || size < 1) {
		            throw new Error('Cache size can only be positive number');
		        }
		        this.sizeLimit = size;
		    }
		    Object.defineProperty(LRUCache.prototype, "length", {
		        get: function () {
		            return this.size;
		        },
		        enumerable: true,
		        configurable: true
		    });
		    LRUCache.prototype.prependToList = function (node) {
		        if (!this.headerNode) {
		            this.tailNode = node;
		        }
		        else {
		            this.headerNode.prev = node;
		            node.next = this.headerNode;
		        }
		        this.headerNode = node;
		        this.size++;
		    };
		    LRUCache.prototype.removeFromTail = function () {
		        if (!this.tailNode) {
		            return undefined;
		        }
		        var node = this.tailNode;
		        var prevNode = node.prev;
		        if (prevNode) {
		            prevNode.next = undefined;
		        }
		        node.prev = undefined;
		        this.tailNode = prevNode;
		        this.size--;
		        return node;
		    };
		    LRUCache.prototype.detachFromList = function (node) {
		        if (this.headerNode === node) {
		            this.headerNode = node.next;
		        }
		        if (this.tailNode === node) {
		            this.tailNode = node.prev;
		        }
		        if (node.prev) {
		            node.prev.next = node.next;
		        }
		        if (node.next) {
		            node.next.prev = node.prev;
		        }
		        node.next = undefined;
		        node.prev = undefined;
		        this.size--;
		    };
		    LRUCache.prototype.get = function (key) {
		        if (this.nodeMap[key]) {
		            var node = this.nodeMap[key];
		            this.detachFromList(node);
		            this.prependToList(node);
		            return node.value;
		        }
		    };
		    LRUCache.prototype.remove = function (key) {
		        if (this.nodeMap[key]) {
		            var node = this.nodeMap[key];
		            this.detachFromList(node);
		            delete this.nodeMap[key];
		        }
		    };
		    LRUCache.prototype.put = function (key, value) {
		        if (this.nodeMap[key]) {
		            this.remove(key);
		        }
		        else if (this.size === this.sizeLimit) {
		            var tailNode = this.removeFromTail();
		            var key_1 = tailNode.key;
		            delete this.nodeMap[key_1];
		        }
		        var newNode = new LinkedListNode(key, value);
		        this.nodeMap[key] = newNode;
		        this.prependToList(newNode);
		    };
		    LRUCache.prototype.empty = function () {
		        var keys = Object.keys(this.nodeMap);
		        for (var i = 0; i < keys.length; i++) {
		            var key = keys[i];
		            var node = this.nodeMap[key];
		            this.detachFromList(node);
		            delete this.nodeMap[key];
		        }
		    };
		    return LRUCache;
		}());
		exports.LRUCache = LRUCache;

	/***/ }),
	/* 36 */
	/***/ (function(module, exports, __webpack_require__) {

		var AWS = __webpack_require__(1);

		/**
		 * @api private
		 * @!method on(eventName, callback)
		 *   Registers an event listener callback for the event given by `eventName`.
		 *   Parameters passed to the callback function depend on the individual event
		 *   being triggered. See the event documentation for those parameters.
		 *
		 *   @param eventName [String] the event name to register the listener for
		 *   @param callback [Function] the listener callback function
		 *   @param toHead [Boolean] attach the listener callback to the head of callback array if set to true.
		 *     Default to be false.
		 *   @return [AWS.SequentialExecutor] the same object for chaining
		 */
		AWS.SequentialExecutor = AWS.util.inherit({

		  constructor: function SequentialExecutor() {
		    this._events = {};
		  },

		  /**
		   * @api private
		   */
		  listeners: function listeners(eventName) {
		    return this._events[eventName] ? this._events[eventName].slice(0) : [];
		  },

		  on: function on(eventName, listener, toHead) {
		    if (this._events[eventName]) {
		      toHead ?
		        this._events[eventName].unshift(listener) :
		        this._events[eventName].push(listener);
		    } else {
		      this._events[eventName] = [listener];
		    }
		    return this;
		  },

		  onAsync: function onAsync(eventName, listener, toHead) {
		    listener._isAsync = true;
		    return this.on(eventName, listener, toHead);
		  },

		  removeListener: function removeListener(eventName, listener) {
		    var listeners = this._events[eventName];
		    if (listeners) {
		      var length = listeners.length;
		      var position = -1;
		      for (var i = 0; i < length; ++i) {
		        if (listeners[i] === listener) {
		          position = i;
		        }
		      }
		      if (position > -1) {
		        listeners.splice(position, 1);
		      }
		    }
		    return this;
		  },

		  removeAllListeners: function removeAllListeners(eventName) {
		    if (eventName) {
		      delete this._events[eventName];
		    } else {
		      this._events = {};
		    }
		    return this;
		  },

		  /**
		   * @api private
		   */
		  emit: function emit(eventName, eventArgs, doneCallback) {
		    if (!doneCallback) doneCallback = function() { };
		    var listeners = this.listeners(eventName);
		    var count = listeners.length;
		    this.callListeners(listeners, eventArgs, doneCallback);
		    return count > 0;
		  },

		  /**
		   * @api private
		   */
		  callListeners: function callListeners(listeners, args, doneCallback, prevError) {
		    var self = this;
		    var error = prevError || null;

		    function callNextListener(err) {
		      if (err) {
		        error = AWS.util.error(error || new Error(), err);
		        if (self._haltHandlersOnError) {
		          return doneCallback.call(self, error);
		        }
		      }
		      self.callListeners(listeners, args, doneCallback, error);
		    }

		    while (listeners.length > 0) {
		      var listener = listeners.shift();
		      if (listener._isAsync) { // asynchronous listener
		        listener.apply(self, args.concat([callNextListener]));
		        return; // stop here, callNextListener will continue
		      } else { // synchronous listener
		        try {
		          listener.apply(self, args);
		        } catch (err) {
		          error = AWS.util.error(error || new Error(), err);
		        }
		        if (error && self._haltHandlersOnError) {
		          doneCallback.call(self, error);
		          return;
		        }
		      }
		    }
		    doneCallback.call(self, error);
		  },

		  /**
		   * Adds or copies a set of listeners from another list of
		   * listeners or SequentialExecutor object.
		   *
		   * @param listeners [map<String,Array<Function>>, AWS.SequentialExecutor]
		   *   a list of events and callbacks, or an event emitter object
		   *   containing listeners to add to this emitter object.
		   * @return [AWS.SequentialExecutor] the emitter object, for chaining.
		   * @example Adding listeners from a map of listeners
		   *   emitter.addListeners({
		   *     event1: [function() { ... }, function() { ... }],
		   *     event2: [function() { ... }]
		   *   });
		   *   emitter.emit('event1'); // emitter has event1
		   *   emitter.emit('event2'); // emitter has event2
		   * @example Adding listeners from another emitter object
		   *   var emitter1 = new AWS.SequentialExecutor();
		   *   emitter1.on('event1', function() { ... });
		   *   emitter1.on('event2', function() { ... });
		   *   var emitter2 = new AWS.SequentialExecutor();
		   *   emitter2.addListeners(emitter1);
		   *   emitter2.emit('event1'); // emitter2 has event1
		   *   emitter2.emit('event2'); // emitter2 has event2
		   */
		  addListeners: function addListeners(listeners) {
		    var self = this;

		    // extract listeners if parameter is an SequentialExecutor object
		    if (listeners._events) listeners = listeners._events;

		    AWS.util.each(listeners, function(event, callbacks) {
		      if (typeof callbacks === 'function') callbacks = [callbacks];
		      AWS.util.arrayEach(callbacks, function(callback) {
		        self.on(event, callback);
		      });
		    });

		    return self;
		  },

		  /**
		   * Registers an event with {on} and saves the callback handle function
		   * as a property on the emitter object using a given `name`.
		   *
		   * @param name [String] the property name to set on this object containing
		   *   the callback function handle so that the listener can be removed in
		   *   the future.
		   * @param (see on)
		   * @return (see on)
		   * @example Adding a named listener DATA_CALLBACK
		   *   var listener = function() { doSomething(); };
		   *   emitter.addNamedListener('DATA_CALLBACK', 'data', listener);
		   *
		   *   // the following prints: true
		   *   console.log(emitter.DATA_CALLBACK == listener);
		   */
		  addNamedListener: function addNamedListener(name, eventName, callback, toHead) {
		    this[name] = callback;
		    this.addListener(eventName, callback, toHead);
		    return this;
		  },

		  /**
		   * @api private
		   */
		  addNamedAsyncListener: function addNamedAsyncListener(name, eventName, callback, toHead) {
		    callback._isAsync = true;
		    return this.addNamedListener(name, eventName, callback, toHead);
		  },

		  /**
		   * Helper method to add a set of named listeners using
		   * {addNamedListener}. The callback contains a parameter
		   * with a handle to the `addNamedListener` method.
		   *
		   * @callback callback function(add)
		   *   The callback function is called immediately in order to provide
		   *   the `add` function to the block. This simplifies the addition of
		   *   a large group of named listeners.
		   *   @param add [Function] the {addNamedListener} function to call
		   *     when registering listeners.
		   * @example Adding a set of named listeners
		   *   emitter.addNamedListeners(function(add) {
		   *     add('DATA_CALLBACK', 'data', function() { ... });
		   *     add('OTHER', 'otherEvent', function() { ... });
		   *     add('LAST', 'lastEvent', function() { ... });
		   *   });
		   *
		   *   // these properties are now set:
		   *   emitter.DATA_CALLBACK;
		   *   emitter.OTHER;
		   *   emitter.LAST;
		   */
		  addNamedListeners: function addNamedListeners(callback) {
		    var self = this;
		    callback(
		      function() {
		        self.addNamedListener.apply(self, arguments);
		      },
		      function() {
		        self.addNamedAsyncListener.apply(self, arguments);
		      }
		    );
		    return this;
		  }
		});

		/**
		 * {on} is the prefered method.
		 * @api private
		 */
		AWS.SequentialExecutor.prototype.addListener = AWS.SequentialExecutor.prototype.on;

		/**
		 * @api private
		 */
		module.exports = AWS.SequentialExecutor;


	/***/ }),
	/* 37 */
	/***/ (function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {var AWS = __webpack_require__(1);
		var Api = __webpack_require__(29);
		var regionConfig = __webpack_require__(38);

		var inherit = AWS.util.inherit;
		var clientCount = 0;

		/**
		 * The service class representing an AWS service.
		 *
		 * @class_abstract This class is an abstract class.
		 *
		 * @!attribute apiVersions
		 *   @return [Array<String>] the list of API versions supported by this service.
		 *   @readonly
		 */
		AWS.Service = inherit({
		  /**
		   * Create a new service object with a configuration object
		   *
		   * @param config [map] a map of configuration options
		   */
		  constructor: function Service(config) {
		    if (!this.loadServiceClass) {
		      throw AWS.util.error(new Error(),
		        'Service must be constructed with `new\' operator');
		    }
		    var ServiceClass = this.loadServiceClass(config || {});
		    if (ServiceClass) {
		      var originalConfig = AWS.util.copy(config);
		      var svc = new ServiceClass(config);
		      Object.defineProperty(svc, '_originalConfig', {
		        get: function() { return originalConfig; },
		        enumerable: false,
		        configurable: true
		      });
		      svc._clientId = ++clientCount;
		      return svc;
		    }
		    this.initialize(config);
		  },

		  /**
		   * @api private
		   */
		  initialize: function initialize(config) {
		    var svcConfig = AWS.config[this.serviceIdentifier];
		    this.config = new AWS.Config(AWS.config);
		    if (svcConfig) this.config.update(svcConfig, true);
		    if (config) this.config.update(config, true);

		    this.validateService();
		    if (!this.config.endpoint) regionConfig.configureEndpoint(this);

		    this.config.endpoint = this.endpointFromTemplate(this.config.endpoint);
		    this.setEndpoint(this.config.endpoint);
		    //enable attaching listeners to service client
		    AWS.SequentialExecutor.call(this);
		    AWS.Service.addDefaultMonitoringListeners(this);
		    if ((this.config.clientSideMonitoring || AWS.Service._clientSideMonitoring) && this.publisher) {
		      var publisher = this.publisher;
		      this.addNamedListener('PUBLISH_API_CALL', 'apiCall', function PUBLISH_API_CALL(event) {
		        process.nextTick(function() {publisher.eventHandler(event);});
		      });
		      this.addNamedListener('PUBLISH_API_ATTEMPT', 'apiCallAttempt', function PUBLISH_API_ATTEMPT(event) {
		        process.nextTick(function() {publisher.eventHandler(event);});
		      });
		    }
		  },

		  /**
		   * @api private
		   */
		  validateService: function validateService() {
		  },

		  /**
		   * @api private
		   */
		  loadServiceClass: function loadServiceClass(serviceConfig) {
		    var config = serviceConfig;
		    if (!AWS.util.isEmpty(this.api)) {
		      return null;
		    } else if (config.apiConfig) {
		      return AWS.Service.defineServiceApi(this.constructor, config.apiConfig);
		    } else if (!this.constructor.services) {
		      return null;
		    } else {
		      config = new AWS.Config(AWS.config);
		      config.update(serviceConfig, true);
		      var version = config.apiVersions[this.constructor.serviceIdentifier];
		      version = version || config.apiVersion;
		      return this.getLatestServiceClass(version);
		    }
		  },

		  /**
		   * @api private
		   */
		  getLatestServiceClass: function getLatestServiceClass(version) {
		    version = this.getLatestServiceVersion(version);
		    if (this.constructor.services[version] === null) {
		      AWS.Service.defineServiceApi(this.constructor, version);
		    }

		    return this.constructor.services[version];
		  },

		  /**
		   * @api private
		   */
		  getLatestServiceVersion: function getLatestServiceVersion(version) {
		    if (!this.constructor.services || this.constructor.services.length === 0) {
		      throw new Error('No services defined on ' +
		                      this.constructor.serviceIdentifier);
		    }

		    if (!version) {
		      version = 'latest';
		    } else if (AWS.util.isType(version, Date)) {
		      version = AWS.util.date.iso8601(version).split('T')[0];
		    }

		    if (Object.hasOwnProperty(this.constructor.services, version)) {
		      return version;
		    }

		    var keys = Object.keys(this.constructor.services).sort();
		    var selectedVersion = null;
		    for (var i = keys.length - 1; i >= 0; i--) {
		      // versions that end in "*" are not available on disk and can be
		      // skipped, so do not choose these as selectedVersions
		      if (keys[i][keys[i].length - 1] !== '*') {
		        selectedVersion = keys[i];
		      }
		      if (keys[i].substr(0, 10) <= version) {
		        return selectedVersion;
		      }
		    }

		    throw new Error('Could not find ' + this.constructor.serviceIdentifier +
		                    ' API to satisfy version constraint `' + version + '\'');
		  },

		  /**
		   * @api private
		   */
		  api: {},

		  /**
		   * @api private
		   */
		  defaultRetryCount: 3,

		  /**
		   * @api private
		   */
		  customizeRequests: function customizeRequests(callback) {
		    if (!callback) {
		      this.customRequestHandler = null;
		    } else if (typeof callback === 'function') {
		      this.customRequestHandler = callback;
		    } else {
		      throw new Error('Invalid callback type \'' + typeof callback + '\' provided in customizeRequests');
		    }
		  },

		  /**
		   * Calls an operation on a service with the given input parameters.
		   *
		   * @param operation [String] the name of the operation to call on the service.
		   * @param params [map] a map of input options for the operation
		   * @callback callback function(err, data)
		   *   If a callback is supplied, it is called when a response is returned
		   *   from the service.
		   *   @param err [Error] the error object returned from the request.
		   *     Set to `null` if the request is successful.
		   *   @param data [Object] the de-serialized data returned from
		   *     the request. Set to `null` if a request error occurs.
		   */
		  makeRequest: function makeRequest(operation, params, callback) {
		    if (typeof params === 'function') {
		      callback = params;
		      params = null;
		    }

		    params = params || {};
		    if (this.config.params) { // copy only toplevel bound params
		      var rules = this.api.operations[operation];
		      if (rules) {
		        params = AWS.util.copy(params);
		        AWS.util.each(this.config.params, function(key, value) {
		          if (rules.input.members[key]) {
		            if (params[key] === undefined || params[key] === null) {
		              params[key] = value;
		            }
		          }
		        });
		      }
		    }

		    var request = new AWS.Request(this, operation, params);
		    this.addAllRequestListeners(request);
		    this.attachMonitoringEmitter(request);
		    if (callback) request.send(callback);
		    return request;
		  },

		  /**
		   * Calls an operation on a service with the given input parameters, without
		   * any authentication data. This method is useful for "public" API operations.
		   *
		   * @param operation [String] the name of the operation to call on the service.
		   * @param params [map] a map of input options for the operation
		   * @callback callback function(err, data)
		   *   If a callback is supplied, it is called when a response is returned
		   *   from the service.
		   *   @param err [Error] the error object returned from the request.
		   *     Set to `null` if the request is successful.
		   *   @param data [Object] the de-serialized data returned from
		   *     the request. Set to `null` if a request error occurs.
		   */
		  makeUnauthenticatedRequest: function makeUnauthenticatedRequest(operation, params, callback) {
		    if (typeof params === 'function') {
		      callback = params;
		      params = {};
		    }

		    var request = this.makeRequest(operation, params).toUnauthenticated();
		    return callback ? request.send(callback) : request;
		  },

		  /**
		   * Waits for a given state
		   *
		   * @param state [String] the state on the service to wait for
		   * @param params [map] a map of parameters to pass with each request
		   * @option params $waiter [map] a map of configuration options for the waiter
		   * @option params $waiter.delay [Number] The number of seconds to wait between
		   *                                       requests
		   * @option params $waiter.maxAttempts [Number] The maximum number of requests
		   *                                             to send while waiting
		   * @callback callback function(err, data)
		   *   If a callback is supplied, it is called when a response is returned
		   *   from the service.
		   *   @param err [Error] the error object returned from the request.
		   *     Set to `null` if the request is successful.
		   *   @param data [Object] the de-serialized data returned from
		   *     the request. Set to `null` if a request error occurs.
		   */
		  waitFor: function waitFor(state, params, callback) {
		    var waiter = new AWS.ResourceWaiter(this, state);
		    return waiter.wait(params, callback);
		  },

		  /**
		   * @api private
		   */
		  addAllRequestListeners: function addAllRequestListeners(request) {
		    var list = [AWS.events, AWS.EventListeners.Core, this.serviceInterface(),
		                AWS.EventListeners.CorePost];
		    for (var i = 0; i < list.length; i++) {
		      if (list[i]) request.addListeners(list[i]);
		    }

		    // disable parameter validation
		    if (!this.config.paramValidation) {
		      request.removeListener('validate',
		        AWS.EventListeners.Core.VALIDATE_PARAMETERS);
		    }

		    if (this.config.logger) { // add logging events
		      request.addListeners(AWS.EventListeners.Logger);
		    }

		    this.setupRequestListeners(request);
		    // call prototype's customRequestHandler
		    if (typeof this.constructor.prototype.customRequestHandler === 'function') {
		      this.constructor.prototype.customRequestHandler(request);
		    }
		    // call instance's customRequestHandler
		    if (Object.prototype.hasOwnProperty.call(this, 'customRequestHandler') && typeof this.customRequestHandler === 'function') {
		      this.customRequestHandler(request);
		    }
		  },

		  /**
		   * Event recording metrics for a whole API call.
		   * @returns {object} a subset of api call metrics
		   * @api private
		   */
		  apiCallEvent: function apiCallEvent(request) {
		    var api = request.service.api.operations[request.operation];
		    var monitoringEvent = {
		      Type: 'ApiCall',
		      Api: api ? api.name : request.operation,
		      Version: 1,
		      Service: request.service.api.serviceId || request.service.api.endpointPrefix,
		      Region: request.httpRequest.region,
		      MaxRetriesExceeded: 0,
		      UserAgent: request.httpRequest.getUserAgent(),
		    };
		    var response = request.response;
		    if (response.httpResponse.statusCode) {
		      monitoringEvent.FinalHttpStatusCode = response.httpResponse.statusCode;
		    }
		    if (response.error) {
		      var error = response.error;
		      var statusCode = response.httpResponse.statusCode;
		      if (statusCode > 299) {
		        if (error.code) monitoringEvent.FinalAwsException = error.code;
		        if (error.message) monitoringEvent.FinalAwsExceptionMessage = error.message;
		      } else {
		        if (error.code || error.name) monitoringEvent.FinalSdkException = error.code || error.name;
		        if (error.message) monitoringEvent.FinalSdkExceptionMessage = error.message;
		      }
		    }
		    return monitoringEvent;
		  },

		  /**
		   * Event recording metrics for an API call attempt.
		   * @returns {object} a subset of api call attempt metrics
		   * @api private
		   */
		  apiAttemptEvent: function apiAttemptEvent(request) {
		    var api = request.service.api.operations[request.operation];
		    var monitoringEvent = {
		      Type: 'ApiCallAttempt',
		      Api: api ? api.name : request.operation,
		      Version: 1,
		      Service: request.service.api.serviceId || request.service.api.endpointPrefix,
		      Fqdn: request.httpRequest.endpoint.hostname,
		      UserAgent: request.httpRequest.getUserAgent(),
		    };
		    var response = request.response;
		    if (response.httpResponse.statusCode) {
		      monitoringEvent.HttpStatusCode = response.httpResponse.statusCode;
		    }
		    if (
		      !request._unAuthenticated &&
		      request.service.config.credentials &&
		      request.service.config.credentials.accessKeyId
		    ) {
		      monitoringEvent.AccessKey = request.service.config.credentials.accessKeyId;
		    }
		    if (!response.httpResponse.headers) return monitoringEvent;
		    if (request.httpRequest.headers['x-amz-security-token']) {
		      monitoringEvent.SessionToken = request.httpRequest.headers['x-amz-security-token'];
		    }
		    if (response.httpResponse.headers['x-amzn-requestid']) {
		      monitoringEvent.XAmznRequestId = response.httpResponse.headers['x-amzn-requestid'];
		    }
		    if (response.httpResponse.headers['x-amz-request-id']) {
		      monitoringEvent.XAmzRequestId = response.httpResponse.headers['x-amz-request-id'];
		    }
		    if (response.httpResponse.headers['x-amz-id-2']) {
		      monitoringEvent.XAmzId2 = response.httpResponse.headers['x-amz-id-2'];
		    }
		    return monitoringEvent;
		  },

		  /**
		   * Add metrics of failed request.
		   * @api private
		   */
		  attemptFailEvent: function attemptFailEvent(request) {
		    var monitoringEvent = this.apiAttemptEvent(request);
		    var response = request.response;
		    var error = response.error;
		    if (response.httpResponse.statusCode > 299 ) {
		      if (error.code) monitoringEvent.AwsException = error.code;
		      if (error.message) monitoringEvent.AwsExceptionMessage = error.message;
		    } else {
		      if (error.code || error.name) monitoringEvent.SdkException = error.code || error.name;
		      if (error.message) monitoringEvent.SdkExceptionMessage = error.message;
		    }
		    return monitoringEvent;
		  },

		  /**
		   * Attach listeners to request object to fetch metrics of each request
		   * and emit data object through \'ApiCall\' and \'ApiCallAttempt\' events.
		   * @api private
		   */
		  attachMonitoringEmitter: function attachMonitoringEmitter(request) {
		    var attemptTimestamp; //timestamp marking the beginning of a request attempt
		    var attemptStartRealTime; //Start time of request attempt. Used to calculating attemptLatency
		    var attemptLatency; //latency from request sent out to http response reaching SDK
		    var callStartRealTime; //Start time of API call. Used to calculating API call latency
		    var attemptCount = 0; //request.retryCount is not reliable here
		    var region; //region cache region for each attempt since it can be updated in plase (e.g. s3)
		    var callTimestamp; //timestamp when the request is created
		    var self = this;
		    var addToHead = true;

		    request.on('validate', function () {
		      callStartRealTime = AWS.util.realClock.now();
		      callTimestamp = Date.now();
		    }, addToHead);
		    request.on('sign', function () {
		      attemptStartRealTime = AWS.util.realClock.now();
		      attemptTimestamp = Date.now();
		      region = request.httpRequest.region;
		      attemptCount++;
		    }, addToHead);
		    request.on('validateResponse', function() {
		      attemptLatency = Math.round(AWS.util.realClock.now() - attemptStartRealTime);
		    });
		    request.addNamedListener('API_CALL_ATTEMPT', 'success', function API_CALL_ATTEMPT() {
		      var apiAttemptEvent = self.apiAttemptEvent(request);
		      apiAttemptEvent.Timestamp = attemptTimestamp;
		      apiAttemptEvent.AttemptLatency = attemptLatency >= 0 ? attemptLatency : 0;
		      apiAttemptEvent.Region = region;
		      self.emit('apiCallAttempt', [apiAttemptEvent]);
		    });
		    request.addNamedListener('API_CALL_ATTEMPT_RETRY', 'retry', function API_CALL_ATTEMPT_RETRY() {
		      var apiAttemptEvent = self.attemptFailEvent(request);
		      apiAttemptEvent.Timestamp = attemptTimestamp;
		      //attemptLatency may not be available if fail before response
		      attemptLatency = attemptLatency ||
		        Math.round(AWS.util.realClock.now() - attemptStartRealTime);
		      apiAttemptEvent.AttemptLatency = attemptLatency >= 0 ? attemptLatency : 0;
		      apiAttemptEvent.Region = region;
		      self.emit('apiCallAttempt', [apiAttemptEvent]);
		    });
		    request.addNamedListener('API_CALL', 'complete', function API_CALL() {
		      var apiCallEvent = self.apiCallEvent(request);
		      apiCallEvent.AttemptCount = attemptCount;
		      if (apiCallEvent.AttemptCount <= 0) return;
		      apiCallEvent.Timestamp = callTimestamp;
		      var latency = Math.round(AWS.util.realClock.now() - callStartRealTime);
		      apiCallEvent.Latency = latency >= 0 ? latency : 0;
		      var response = request.response;
		      if (
		        response.error &&
		        response.error.retryable &&
		        typeof response.retryCount === 'number' &&
		        typeof response.maxRetries === 'number' &&
		        (response.retryCount >= response.maxRetries)
		      ) {
		        apiCallEvent.MaxRetriesExceeded = 1;
		      }
		      self.emit('apiCall', [apiCallEvent]);
		    });
		  },

		  /**
		   * Override this method to setup any custom request listeners for each
		   * new request to the service.
		   *
		   * @method_abstract This is an abstract method.
		   */
		  setupRequestListeners: function setupRequestListeners(request) {
		  },

		  /**
		   * Gets the signing name for a given request
		   * @api private
		   */
		  getSigningName: function getSigningName() {
		    return this.api.signingName || this.api.endpointPrefix;
		  },

		  /**
		   * Gets the signer class for a given request
		   * @api private
		   */
		  getSignerClass: function getSignerClass(request) {
		    var version;
		    // get operation authtype if present
		    var operation = null;
		    var authtype = '';
		    if (request) {
		      var operations = request.service.api.operations || {};
		      operation = operations[request.operation] || null;
		      authtype = operation ? operation.authtype : '';
		    }
		    if (this.config.signatureVersion) {
		      version = this.config.signatureVersion;
		    } else if (authtype === 'v4' || authtype === 'v4-unsigned-body') {
		      version = 'v4';
		    } else {
		      version = this.api.signatureVersion;
		    }
		    return AWS.Signers.RequestSigner.getVersion(version);
		  },

		  /**
		   * @api private
		   */
		  serviceInterface: function serviceInterface() {
		    switch (this.api.protocol) {
		      case 'ec2': return AWS.EventListeners.Query;
		      case 'query': return AWS.EventListeners.Query;
		      case 'json': return AWS.EventListeners.Json;
		      case 'rest-json': return AWS.EventListeners.RestJson;
		      case 'rest-xml': return AWS.EventListeners.RestXml;
		    }
		    if (this.api.protocol) {
		      throw new Error('Invalid service `protocol\' ' +
		        this.api.protocol + ' in API config');
		    }
		  },

		  /**
		   * @api private
		   */
		  successfulResponse: function successfulResponse(resp) {
		    return resp.httpResponse.statusCode < 300;
		  },

		  /**
		   * How many times a failed request should be retried before giving up.
		   * the defaultRetryCount can be overriden by service classes.
		   *
		   * @api private
		   */
		  numRetries: function numRetries() {
		    if (this.config.maxRetries !== undefined) {
		      return this.config.maxRetries;
		    } else {
		      return this.defaultRetryCount;
		    }
		  },

		  /**
		   * @api private
		   */
		  retryDelays: function retryDelays(retryCount, err) {
		    return AWS.util.calculateRetryDelay(retryCount, this.config.retryDelayOptions, err);
		  },

		  /**
		   * @api private
		   */
		  retryableError: function retryableError(error) {
		    if (this.timeoutError(error)) return true;
		    if (this.networkingError(error)) return true;
		    if (this.expiredCredentialsError(error)) return true;
		    if (this.throttledError(error)) return true;
		    if (error.statusCode >= 500) return true;
		    return false;
		  },

		  /**
		   * @api private
		   */
		  networkingError: function networkingError(error) {
		    return error.code === 'NetworkingError';
		  },

		  /**
		   * @api private
		   */
		  timeoutError: function timeoutError(error) {
		    return error.code === 'TimeoutError';
		  },

		  /**
		   * @api private
		   */
		  expiredCredentialsError: function expiredCredentialsError(error) {
		    // TODO : this only handles *one* of the expired credential codes
		    return (error.code === 'ExpiredTokenException');
		  },

		  /**
		   * @api private
		   */
		  clockSkewError: function clockSkewError(error) {
		    switch (error.code) {
		      case 'RequestTimeTooSkewed':
		      case 'RequestExpired':
		      case 'InvalidSignatureException':
		      case 'SignatureDoesNotMatch':
		      case 'AuthFailure':
		      case 'RequestInTheFuture':
		        return true;
		      default: return false;
		    }
		  },

		  /**
		   * @api private
		   */
		  getSkewCorrectedDate: function getSkewCorrectedDate() {
		    return new Date(Date.now() + this.config.systemClockOffset);
		  },

		  /**
		   * @api private
		   */
		  applyClockOffset: function applyClockOffset(newServerTime) {
		    if (newServerTime) {
		      this.config.systemClockOffset = newServerTime - Date.now();
		    }
		  },

		  /**
		   * @api private
		   */
		  isClockSkewed: function isClockSkewed(newServerTime) {
		    if (newServerTime) {
		      return Math.abs(this.getSkewCorrectedDate().getTime() - newServerTime) >= 300000;
		    }
		  },

		  /**
		   * @api private
		   */
		  throttledError: function throttledError(error) {
		    // this logic varies between services
		    if (error.statusCode === 429) return true;
		    switch (error.code) {
		      case 'ProvisionedThroughputExceededException':
		      case 'Throttling':
		      case 'ThrottlingException':
		      case 'RequestLimitExceeded':
		      case 'RequestThrottled':
		      case 'RequestThrottledException':
		      case 'TooManyRequestsException':
		      case 'TransactionInProgressException': //dynamodb
		      case 'EC2ThrottledException':
		        return true;
		      default:
		        return false;
		    }
		  },

		  /**
		   * @api private
		   */
		  endpointFromTemplate: function endpointFromTemplate(endpoint) {
		    if (typeof endpoint !== 'string') return endpoint;

		    var e = endpoint;
		    e = e.replace(/\{service\}/g, this.api.endpointPrefix);
		    e = e.replace(/\{region\}/g, this.config.region);
		    e = e.replace(/\{scheme\}/g, this.config.sslEnabled ? 'https' : 'http');
		    return e;
		  },

		  /**
		   * @api private
		   */
		  setEndpoint: function setEndpoint(endpoint) {
		    this.endpoint = new AWS.Endpoint(endpoint, this.config);
		  },

		  /**
		   * @api private
		   */
		  paginationConfig: function paginationConfig(operation, throwException) {
		    var paginator = this.api.operations[operation].paginator;
		    if (!paginator) {
		      if (throwException) {
		        var e = new Error();
		        throw AWS.util.error(e, 'No pagination configuration for ' + operation);
		      }
		      return null;
		    }

		    return paginator;
		  }
		});

		AWS.util.update(AWS.Service, {

		  /**
		   * Adds one method for each operation described in the api configuration
		   *
		   * @api private
		   */
		  defineMethods: function defineMethods(svc) {
		    AWS.util.each(svc.prototype.api.operations, function iterator(method) {
		      if (svc.prototype[method]) return;
		      var operation = svc.prototype.api.operations[method];
		      if (operation.authtype === 'none') {
		        svc.prototype[method] = function (params, callback) {
		          return this.makeUnauthenticatedRequest(method, params, callback);
		        };
		      } else {
		        svc.prototype[method] = function (params, callback) {
		          return this.makeRequest(method, params, callback);
		        };
		      }
		    });
		  },

		  /**
		   * Defines a new Service class using a service identifier and list of versions
		   * including an optional set of features (functions) to apply to the class
		   * prototype.
		   *
		   * @param serviceIdentifier [String] the identifier for the service
		   * @param versions [Array<String>] a list of versions that work with this
		   *   service
		   * @param features [Object] an object to attach to the prototype
		   * @return [Class<Service>] the service class defined by this function.
		   */
		  defineService: function defineService(serviceIdentifier, versions, features) {
		    AWS.Service._serviceMap[serviceIdentifier] = true;
		    if (!Array.isArray(versions)) {
		      features = versions;
		      versions = [];
		    }

		    var svc = inherit(AWS.Service, features || {});

		    if (typeof serviceIdentifier === 'string') {
		      AWS.Service.addVersions(svc, versions);

		      var identifier = svc.serviceIdentifier || serviceIdentifier;
		      svc.serviceIdentifier = identifier;
		    } else { // defineService called with an API
		      svc.prototype.api = serviceIdentifier;
		      AWS.Service.defineMethods(svc);
		    }
		    AWS.SequentialExecutor.call(this.prototype);
		    //util.clientSideMonitoring is only available in node
		    if (!this.prototype.publisher && AWS.util.clientSideMonitoring) {
		      var Publisher = AWS.util.clientSideMonitoring.Publisher;
		      var configProvider = AWS.util.clientSideMonitoring.configProvider;
		      var publisherConfig = configProvider();
		      this.prototype.publisher = new Publisher(publisherConfig);
		      if (publisherConfig.enabled) {
		        //if csm is enabled in environment, SDK should send all metrics
		        AWS.Service._clientSideMonitoring = true;
		      }
		    }
		    AWS.SequentialExecutor.call(svc.prototype);
		    AWS.Service.addDefaultMonitoringListeners(svc.prototype);
		    return svc;
		  },

		  /**
		   * @api private
		   */
		  addVersions: function addVersions(svc, versions) {
		    if (!Array.isArray(versions)) versions = [versions];

		    svc.services = svc.services || {};
		    for (var i = 0; i < versions.length; i++) {
		      if (svc.services[versions[i]] === undefined) {
		        svc.services[versions[i]] = null;
		      }
		    }

		    svc.apiVersions = Object.keys(svc.services).sort();
		  },

		  /**
		   * @api private
		   */
		  defineServiceApi: function defineServiceApi(superclass, version, apiConfig) {
		    var svc = inherit(superclass, {
		      serviceIdentifier: superclass.serviceIdentifier
		    });

		    function setApi(api) {
		      if (api.isApi) {
		        svc.prototype.api = api;
		      } else {
		        svc.prototype.api = new Api(api, {
		          serviceIdentifier: superclass.serviceIdentifier
		        });
		      }
		    }

		    if (typeof version === 'string') {
		      if (apiConfig) {
		        setApi(apiConfig);
		      } else {
		        try {
		          setApi(AWS.apiLoader(superclass.serviceIdentifier, version));
		        } catch (err) {
		          throw AWS.util.error(err, {
		            message: 'Could not find API configuration ' +
		              superclass.serviceIdentifier + '-' + version
		          });
		        }
		      }
		      if (!Object.prototype.hasOwnProperty.call(superclass.services, version)) {
		        superclass.apiVersions = superclass.apiVersions.concat(version).sort();
		      }
		      superclass.services[version] = svc;
		    } else {
		      setApi(version);
		    }

		    AWS.Service.defineMethods(svc);
		    return svc;
		  },

		  /**
		   * @api private
		   */
		  hasService: function(identifier) {
		    return Object.prototype.hasOwnProperty.call(AWS.Service._serviceMap, identifier);
		  },

		  /**
		   * @param attachOn attach default monitoring listeners to object
		   *
		   * Each monitoring event should be emitted from service client to service constructor prototype and then
		   * to global service prototype like bubbling up. These default monitoring events listener will transfer
		   * the monitoring events to the upper layer.
		   * @api private
		   */
		  addDefaultMonitoringListeners: function addDefaultMonitoringListeners(attachOn) {
		    attachOn.addNamedListener('MONITOR_EVENTS_BUBBLE', 'apiCallAttempt', function EVENTS_BUBBLE(event) {
		      var baseClass = Object.getPrototypeOf(attachOn);
		      if (baseClass._events) baseClass.emit('apiCallAttempt', [event]);
		    });
		    attachOn.addNamedListener('CALL_EVENTS_BUBBLE', 'apiCall', function CALL_EVENTS_BUBBLE(event) {
		      var baseClass = Object.getPrototypeOf(attachOn);
		      if (baseClass._events) baseClass.emit('apiCall', [event]);
		    });
		  },

		  /**
		   * @api private
		   */
		  _serviceMap: {}
		});

		AWS.util.mixin(AWS.Service, AWS.SequentialExecutor);

		/**
		 * @api private
		 */
		module.exports = AWS.Service;

		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

	/***/ }),
	/* 38 */
	/***/ (function(module, exports, __webpack_require__) {

		var util = __webpack_require__(2);
		var regionConfig = __webpack_require__(39);

		function generateRegionPrefix(region) {
		  if (!region) return null;

		  var parts = region.split('-');
		  if (parts.length < 3) return null;
		  return parts.slice(0, parts.length - 2).join('-') + '-*';
		}

		function derivedKeys(service) {
		  var region = service.config.region;
		  var regionPrefix = generateRegionPrefix(region);
		  var endpointPrefix = service.api.endpointPrefix;

		  return [
		    [region, endpointPrefix],
		    [regionPrefix, endpointPrefix],
		    [region, '*'],
		    [regionPrefix, '*'],
		    ['*', endpointPrefix],
		    ['*', '*']
		  ].map(function(item) {
		    return item[0] && item[1] ? item.join('/') : null;
		  });
		}

		function applyConfig(service, config) {
		  util.each(config, function(key, value) {
		    if (key === 'globalEndpoint') return;
		    if (service.config[key] === undefined || service.config[key] === null) {
		      service.config[key] = value;
		    }
		  });
		}

		function configureEndpoint(service) {
		  var keys = derivedKeys(service);
		  for (var i = 0; i < keys.length; i++) {
		    var key = keys[i];
		    if (!key) continue;

		    if (Object.prototype.hasOwnProperty.call(regionConfig.rules, key)) {
		      var config = regionConfig.rules[key];
		      if (typeof config === 'string') {
		        config = regionConfig.patterns[config];
		      }

		      // set dualstack endpoint
		      if (service.config.useDualstack && util.isDualstackAvailable(service)) {
		        config = util.copy(config);
		        config.endpoint = config.endpoint.replace(
		          /{service}\.({region}\.)?/,
		          '{service}.dualstack.{region}.'
		        );
		      }

		      // set global endpoint
		      service.isGlobalEndpoint = !!config.globalEndpoint;
		      if (config.signingRegion) {
		        service.signingRegion = config.signingRegion;
		      }

		      // signature version
		      if (!config.signatureVersion) config.signatureVersion = 'v4';

		      // merge config
		      applyConfig(service, config);
		      return;
		    }
		  }
		}

		function getEndpointSuffix(region) {
		  var regionRegexes = {
		    '^(us|eu|ap|sa|ca|me)\\-\\w+\\-\\d+$': 'amazonaws.com',
		    '^cn\\-\\w+\\-\\d+$': 'amazonaws.com.cn',
		    '^us\\-gov\\-\\w+\\-\\d+$': 'amazonaws.com',
		    '^us\\-iso\\-\\w+\\-\\d+$': 'c2s.ic.gov',
		    '^us\\-isob\\-\\w+\\-\\d+$': 'sc2s.sgov.gov'
		  };
		  var defaultSuffix = 'amazonaws.com';
		  var regexes = Object.keys(regionRegexes);
		  for (var i = 0; i < regexes.length; i++) {
		    var regionPattern = RegExp(regexes[i]);
		    var dnsSuffix = regionRegexes[regexes[i]];
		    if (regionPattern.test(region)) return dnsSuffix;
		  }
		  return defaultSuffix;
		}

		/**
		 * @api private
		 */
		module.exports = {
		  configureEndpoint: configureEndpoint,
		  getEndpointSuffix: getEndpointSuffix
		};


	/***/ }),
	/* 39 */
	/***/ (function(module, exports) {

		module.exports = {"rules":{"*/*":{"endpoint":"{service}.{region}.amazonaws.com"},"cn-*/*":{"endpoint":"{service}.{region}.amazonaws.com.cn"},"us-iso-*/*":{"endpoint":"{service}.{region}.c2s.ic.gov"},"us-isob-*/*":{"endpoint":"{service}.{region}.sc2s.sgov.gov"},"*/budgets":"globalSSL","*/cloudfront":"globalSSL","*/sts":"globalSSL","*/importexport":{"endpoint":"{service}.amazonaws.com","signatureVersion":"v2","globalEndpoint":true},"*/route53":"globalSSL","cn-*/route53":{"endpoint":"{service}.amazonaws.com.cn","globalEndpoint":true,"signingRegion":"cn-northwest-1"},"us-gov-*/route53":"globalGovCloud","*/waf":"globalSSL","*/iam":"globalSSL","cn-*/iam":{"endpoint":"{service}.cn-north-1.amazonaws.com.cn","globalEndpoint":true,"signingRegion":"cn-north-1"},"us-gov-*/iam":"globalGovCloud","us-gov-*/sts":{"endpoint":"{service}.{region}.amazonaws.com"},"us-gov-west-1/s3":"s3signature","us-west-1/s3":"s3signature","us-west-2/s3":"s3signature","eu-west-1/s3":"s3signature","ap-southeast-1/s3":"s3signature","ap-southeast-2/s3":"s3signature","ap-northeast-1/s3":"s3signature","sa-east-1/s3":"s3signature","us-east-1/s3":{"endpoint":"{service}.amazonaws.com","signatureVersion":"s3"},"us-east-1/sdb":{"endpoint":"{service}.amazonaws.com","signatureVersion":"v2"},"*/sdb":{"endpoint":"{service}.{region}.amazonaws.com","signatureVersion":"v2"}},"patterns":{"globalSSL":{"endpoint":"https://{service}.amazonaws.com","globalEndpoint":true,"signingRegion":"us-east-1"},"globalGovCloud":{"endpoint":"{service}.us-gov.amazonaws.com","globalEndpoint":true,"signingRegion":"us-gov-west-1"},"s3signature":{"endpoint":"{service}.{region}.amazonaws.com","signatureVersion":"s3"}}}

	/***/ }),
	/* 40 */
	/***/ (function(module, exports, __webpack_require__) {

		var AWS = __webpack_require__(1);
		__webpack_require__(41);
		__webpack_require__(42);
		var PromisesDependency;

		/**
		 * The main configuration class used by all service objects to set
		 * the region, credentials, and other options for requests.
		 *
		 * By default, credentials and region settings are left unconfigured.
		 * This should be configured by the application before using any
		 * AWS service APIs.
		 *
		 * In order to set global configuration options, properties should
		 * be assigned to the global {AWS.config} object.
		 *
		 * @see AWS.config
		 *
		 * @!group General Configuration Options
		 *
		 * @!attribute credentials
		 *   @return [AWS.Credentials] the AWS credentials to sign requests with.
		 *
		 * @!attribute region
		 *   @example Set the global region setting to us-west-2
		 *     AWS.config.update({region: 'us-west-2'});
		 *   @return [AWS.Credentials] The region to send service requests to.
		 *   @see http://docs.amazonwebservices.com/general/latest/gr/rande.html
		 *     A list of available endpoints for each AWS service
		 *
		 * @!attribute maxRetries
		 *   @return [Integer] the maximum amount of retries to perform for a
		 *     service request. By default this value is calculated by the specific
		 *     service object that the request is being made to.
		 *
		 * @!attribute maxRedirects
		 *   @return [Integer] the maximum amount of redirects to follow for a
		 *     service request. Defaults to 10.
		 *
		 * @!attribute paramValidation
		 *   @return [Boolean|map] whether input parameters should be validated against
		 *     the operation description before sending the request. Defaults to true.
		 *     Pass a map to enable any of the following specific validation features:
		 *
		 *     * **min** [Boolean] &mdash; Validates that a value meets the min
		 *       constraint. This is enabled by default when paramValidation is set
		 *       to `true`.
		 *     * **max** [Boolean] &mdash; Validates that a value meets the max
		 *       constraint.
		 *     * **pattern** [Boolean] &mdash; Validates that a string value matches a
		 *       regular expression.
		 *     * **enum** [Boolean] &mdash; Validates that a string value matches one
		 *       of the allowable enum values.
		 *
		 * @!attribute computeChecksums
		 *   @return [Boolean] whether to compute checksums for payload bodies when
		 *     the service accepts it (currently supported in S3 only).
		 *
		 * @!attribute convertResponseTypes
		 *   @return [Boolean] whether types are converted when parsing response data.
		 *     Currently only supported for JSON based services. Turning this off may
		 *     improve performance on large response payloads. Defaults to `true`.
		 *
		 * @!attribute correctClockSkew
		 *   @return [Boolean] whether to apply a clock skew correction and retry
		 *     requests that fail because of an skewed client clock. Defaults to
		 *     `false`.
		 *
		 * @!attribute sslEnabled
		 *   @return [Boolean] whether SSL is enabled for requests
		 *
		 * @!attribute s3ForcePathStyle
		 *   @return [Boolean] whether to force path style URLs for S3 objects
		 *
		 * @!attribute s3BucketEndpoint
		 *   @note Setting this configuration option requires an `endpoint` to be
		 *     provided explicitly to the service constructor.
		 *   @return [Boolean] whether the provided endpoint addresses an individual
		 *     bucket (false if it addresses the root API endpoint).
		 *
		 * @!attribute s3DisableBodySigning
		 *   @return [Boolean] whether to disable S3 body signing when using signature version `v4`.
		 *     Body signing can only be disabled when using https. Defaults to `true`.
		 *
		 * @!attribute s3UsEast1RegionalEndpoint
		 *   @return ['legacy'|'regional'] when region is set to 'us-east-1', whether to send s3
		 *     request to global endpoints or 'us-east-1' regional endpoints. This config is only
		 *     applicable to S3 client;
		 *     Defaults to 'legacy'
		 * @!attribute s3UseArnRegion
		 *   @return [Boolean] whether to override the request region with the region inferred
		 *     from requested resource's ARN. Only available for S3 buckets
		 *     Defaults to `true`
		 *
		 * @!attribute useAccelerateEndpoint
		 *   @note This configuration option is only compatible with S3 while accessing
		 *     dns-compatible buckets.
		 *   @return [Boolean] Whether to use the Accelerate endpoint with the S3 service.
		 *     Defaults to `false`.
		 *
		 * @!attribute retryDelayOptions
		 *   @example Set the base retry delay for all services to 300 ms
		 *     AWS.config.update({retryDelayOptions: {base: 300}});
		 *     // Delays with maxRetries = 3: 300, 600, 1200
		 *   @example Set a custom backoff function to provide delay values on retries
		 *     AWS.config.update({retryDelayOptions: {customBackoff: function(retryCount, err) {
		 *       // returns delay in ms
		 *     }}});
		 *   @return [map] A set of options to configure the retry delay on retryable errors.
		 *     Currently supported options are:
		 *
		 *     * **base** [Integer] &mdash; The base number of milliseconds to use in the
		 *       exponential backoff for operation retries. Defaults to 100 ms for all services except
		 *       DynamoDB, where it defaults to 50ms.
		 *
		 *     * **customBackoff ** [function] &mdash; A custom function that accepts a
		 *       retry count and error and returns the amount of time to delay in
		 *       milliseconds. If the result is a non-zero negative value, no further
		 *       retry attempts will be made. The `base` option will be ignored if this
		 *       option is supplied. The function is only called for retryable errors.
		 *
		 * @!attribute httpOptions
		 *   @return [map] A set of options to pass to the low-level HTTP request.
		 *     Currently supported options are:
		 *
		 *     * **proxy** [String] &mdash; the URL to proxy requests through
		 *     * **agent** [http.Agent, https.Agent] &mdash; the Agent object to perform
		 *       HTTP requests with. Used for connection pooling. Note that for
		 *       SSL connections, a special Agent object is used in order to enable
		 *       peer certificate verification. This feature is only supported in the
		 *       Node.js environment.
		 *     * **connectTimeout** [Integer] &mdash; Sets the socket to timeout after
		 *       failing to establish a connection with the server after
		 *       `connectTimeout` milliseconds. This timeout has no effect once a socket
		 *       connection has been established.
		 *     * **timeout** [Integer] &mdash; The number of milliseconds a request can
		 *       take before automatically being terminated.
		 *       Defaults to two minutes (120000).
		 *     * **xhrAsync** [Boolean] &mdash; Whether the SDK will send asynchronous
		 *       HTTP requests. Used in the browser environment only. Set to false to
		 *       send requests synchronously. Defaults to true (async on).
		 *     * **xhrWithCredentials** [Boolean] &mdash; Sets the "withCredentials"
		 *       property of an XMLHttpRequest object. Used in the browser environment
		 *       only. Defaults to false.
		 * @!attribute logger
		 *   @return [#write,#log] an object that responds to .write() (like a stream)
		 *     or .log() (like the console object) in order to log information about
		 *     requests
		 *
		 * @!attribute systemClockOffset
		 *   @return [Number] an offset value in milliseconds to apply to all signing
		 *     times. Use this to compensate for clock skew when your system may be
		 *     out of sync with the service time. Note that this configuration option
		 *     can only be applied to the global `AWS.config` object and cannot be
		 *     overridden in service-specific configuration. Defaults to 0 milliseconds.
		 *
		 * @!attribute signatureVersion
		 *   @return [String] the signature version to sign requests with (overriding
		 *     the API configuration). Possible values are: 'v2', 'v3', 'v4'.
		 *
		 * @!attribute signatureCache
		 *   @return [Boolean] whether the signature to sign requests with (overriding
		 *     the API configuration) is cached. Only applies to the signature version 'v4'.
		 *     Defaults to `true`.
		 *
		 * @!attribute endpointDiscoveryEnabled
		 *   @return [Boolean|undefined] whether to call operations with endpoints
		 *     given by service dynamically. Setting this config to `true` will enable
		 *     endpoint discovery for all applicable operations. Setting it to `false`
		 *     will explicitly disable endpoint discovery even though operations that
		 *     require endpoint discovery will presumably fail. Leaving it to
		 *     `undefined` means SDK only do endpoint discovery when it's required.
		 *     Defaults to `undefined`
		 *
		 * @!attribute endpointCacheSize
		 *   @return [Number] the size of the global cache storing endpoints from endpoint
		 *     discovery operations. Once endpoint cache is created, updating this setting
		 *     cannot change existing cache size.
		 *     Defaults to 1000
		 *
		 * @!attribute hostPrefixEnabled
		 *   @return [Boolean] whether to marshal request parameters to the prefix of
		 *     hostname. Defaults to `true`.
		 *
		 * @!attribute stsRegionalEndpoints
		 *   @return ['legacy'|'regional'] whether to send sts request to global endpoints or
		 *     regional endpoints.
		 *     Defaults to 'legacy'
		 */
		AWS.Config = AWS.util.inherit({
		  /**
		   * @!endgroup
		   */

		  /**
		   * Creates a new configuration object. This is the object that passes
		   * option data along to service requests, including credentials, security,
		   * region information, and some service specific settings.
		   *
		   * @example Creating a new configuration object with credentials and region
		   *   var config = new AWS.Config({
		   *     accessKeyId: 'AKID', secretAccessKey: 'SECRET', region: 'us-west-2'
		   *   });
		   * @option options accessKeyId [String] your AWS access key ID.
		   * @option options secretAccessKey [String] your AWS secret access key.
		   * @option options sessionToken [AWS.Credentials] the optional AWS
		   *   session token to sign requests with.
		   * @option options credentials [AWS.Credentials] the AWS credentials
		   *   to sign requests with. You can either specify this object, or
		   *   specify the accessKeyId and secretAccessKey options directly.
		   * @option options credentialProvider [AWS.CredentialProviderChain] the
		   *   provider chain used to resolve credentials if no static `credentials`
		   *   property is set.
		   * @option options region [String] the region to send service requests to.
		   *   See {region} for more information.
		   * @option options maxRetries [Integer] the maximum amount of retries to
		   *   attempt with a request. See {maxRetries} for more information.
		   * @option options maxRedirects [Integer] the maximum amount of redirects to
		   *   follow with a request. See {maxRedirects} for more information.
		   * @option options sslEnabled [Boolean] whether to enable SSL for
		   *   requests.
		   * @option options paramValidation [Boolean|map] whether input parameters
		   *   should be validated against the operation description before sending
		   *   the request. Defaults to true. Pass a map to enable any of the
		   *   following specific validation features:
		   *
		   *   * **min** [Boolean] &mdash; Validates that a value meets the min
		   *     constraint. This is enabled by default when paramValidation is set
		   *     to `true`.
		   *   * **max** [Boolean] &mdash; Validates that a value meets the max
		   *     constraint.
		   *   * **pattern** [Boolean] &mdash; Validates that a string value matches a
		   *     regular expression.
		   *   * **enum** [Boolean] &mdash; Validates that a string value matches one
		   *     of the allowable enum values.
		   * @option options computeChecksums [Boolean] whether to compute checksums
		   *   for payload bodies when the service accepts it (currently supported
		   *   in S3 only)
		   * @option options convertResponseTypes [Boolean] whether types are converted
		   *     when parsing response data. Currently only supported for JSON based
		   *     services. Turning this off may improve performance on large response
		   *     payloads. Defaults to `true`.
		   * @option options correctClockSkew [Boolean] whether to apply a clock skew
		   *     correction and retry requests that fail because of an skewed client
		   *     clock. Defaults to `false`.
		   * @option options s3ForcePathStyle [Boolean] whether to force path
		   *   style URLs for S3 objects.
		   * @option options s3BucketEndpoint [Boolean] whether the provided endpoint
		   *   addresses an individual bucket (false if it addresses the root API
		   *   endpoint). Note that setting this configuration option requires an
		   *   `endpoint` to be provided explicitly to the service constructor.
		   * @option options s3DisableBodySigning [Boolean] whether S3 body signing
		   *   should be disabled when using signature version `v4`. Body signing
		   *   can only be disabled when using https. Defaults to `true`.
		   * @option options s3UsEast1RegionalEndpoint ['legacy'|'regional'] when region
		   *   is set to 'us-east-1', whether to send s3 request to global endpoints or
		   *   'us-east-1' regional endpoints. This config is only applicable to S3 client.
		   *   Defaults to `legacy`
		   * @option options s3UseArnRegion [Boolean] whether to override the request region
		   *   with the region inferred from requested resource's ARN. Only available for S3 buckets
		   *   Defaults to `true`
		   *
		   * @option options retryDelayOptions [map] A set of options to configure
		   *   the retry delay on retryable errors. Currently supported options are:
		   *
		   *   * **base** [Integer] &mdash; The base number of milliseconds to use in the
		   *     exponential backoff for operation retries. Defaults to 100 ms for all
		   *     services except DynamoDB, where it defaults to 50ms.
		   *   * **customBackoff ** [function] &mdash; A custom function that accepts a
		   *     retry count and error and returns the amount of time to delay in
		   *     milliseconds. If the result is a non-zero negative value, no further
		   *     retry attempts will be made. The `base` option will be ignored if this
		   *     option is supplied. The function is only called for retryable errors.
		   * @option options httpOptions [map] A set of options to pass to the low-level
		   *   HTTP request. Currently supported options are:
		   *
		   *   * **proxy** [String] &mdash; the URL to proxy requests through
		   *   * **agent** [http.Agent, https.Agent] &mdash; the Agent object to perform
		   *     HTTP requests with. Used for connection pooling. Defaults to the global
		   *     agent (`http.globalAgent`) for non-SSL connections. Note that for
		   *     SSL connections, a special Agent object is used in order to enable
		   *     peer certificate verification. This feature is only available in the
		   *     Node.js environment.
		   *   * **connectTimeout** [Integer] &mdash; Sets the socket to timeout after
		   *     failing to establish a connection with the server after
		   *     `connectTimeout` milliseconds. This timeout has no effect once a socket
		   *     connection has been established.
		   *   * **timeout** [Integer] &mdash; Sets the socket to timeout after timeout
		   *     milliseconds of inactivity on the socket. Defaults to two minutes
		   *     (120000).
		   *   * **xhrAsync** [Boolean] &mdash; Whether the SDK will send asynchronous
		   *     HTTP requests. Used in the browser environment only. Set to false to
		   *     send requests synchronously. Defaults to true (async on).
		   *   * **xhrWithCredentials** [Boolean] &mdash; Sets the "withCredentials"
		   *     property of an XMLHttpRequest object. Used in the browser environment
		   *     only. Defaults to false.
		   * @option options apiVersion [String, Date] a String in YYYY-MM-DD format
		   *   (or a date) that represents the latest possible API version that can be
		   *   used in all services (unless overridden by `apiVersions`). Specify
		   *   'latest' to use the latest possible version.
		   * @option options apiVersions [map<String, String|Date>] a map of service
		   *   identifiers (the lowercase service class name) with the API version to
		   *   use when instantiating a service. Specify 'latest' for each individual
		   *   that can use the latest available version.
		   * @option options logger [#write,#log] an object that responds to .write()
		   *   (like a stream) or .log() (like the console object) in order to log
		   *   information about requests
		   * @option options systemClockOffset [Number] an offset value in milliseconds
		   *   to apply to all signing times. Use this to compensate for clock skew
		   *   when your system may be out of sync with the service time. Note that
		   *   this configuration option can only be applied to the global `AWS.config`
		   *   object and cannot be overridden in service-specific configuration.
		   *   Defaults to 0 milliseconds.
		   * @option options signatureVersion [String] the signature version to sign
		   *   requests with (overriding the API configuration). Possible values are:
		   *   'v2', 'v3', 'v4'.
		   * @option options signatureCache [Boolean] whether the signature to sign
		   *   requests with (overriding the API configuration) is cached. Only applies
		   *   to the signature version 'v4'. Defaults to `true`.
		   * @option options dynamoDbCrc32 [Boolean] whether to validate the CRC32
		   *   checksum of HTTP response bodies returned by DynamoDB. Default: `true`.
		   * @option options useAccelerateEndpoint [Boolean] Whether to use the
		   *   S3 Transfer Acceleration endpoint with the S3 service. Default: `false`.
		   * @option options clientSideMonitoring [Boolean] whether to collect and
		   *   publish this client's performance metrics of all its API requests.
		   * @option options endpointDiscoveryEnabled [Boolean|undefined] whether to
		   *   call operations with endpoints given by service dynamically. Setting this
		   * config to `true` will enable endpoint discovery for all applicable operations.
		   *   Setting it to `false` will explicitly disable endpoint discovery even though
		   *   operations that require endpoint discovery will presumably fail. Leaving it
		   *   to `undefined` means SDK will only do endpoint discovery when it's required.
		   *   Defaults to `undefined`
		   * @option options endpointCacheSize [Number] the size of the global cache storing
		   *   endpoints from endpoint discovery operations. Once endpoint cache is created,
		   *   updating this setting cannot change existing cache size.
		   *   Defaults to 1000
		   * @option options hostPrefixEnabled [Boolean] whether to marshal request
		   *   parameters to the prefix of hostname.
		   *   Defaults to `true`.
		   * @option options stsRegionalEndpoints ['legacy'|'regional'] whether to send sts request
		   *   to global endpoints or regional endpoints.
		   *   Defaults to 'legacy'.
		   */
		  constructor: function Config(options) {
		    if (options === undefined) options = {};
		    options = this.extractCredentials(options);

		    AWS.util.each.call(this, this.keys, function (key, value) {
		      this.set(key, options[key], value);
		    });
		  },

		  /**
		   * @!group Managing Credentials
		   */

		  /**
		   * Loads credentials from the configuration object. This is used internally
		   * by the SDK to ensure that refreshable {Credentials} objects are properly
		   * refreshed and loaded when sending a request. If you want to ensure that
		   * your credentials are loaded prior to a request, you can use this method
		   * directly to provide accurate credential data stored in the object.
		   *
		   * @note If you configure the SDK with static or environment credentials,
		   *   the credential data should already be present in {credentials} attribute.
		   *   This method is primarily necessary to load credentials from asynchronous
		   *   sources, or sources that can refresh credentials periodically.
		   * @example Getting your access key
		   *   AWS.config.getCredentials(function(err) {
		   *     if (err) console.log(err.stack); // credentials not loaded
		   *     else console.log("Access Key:", AWS.config.credentials.accessKeyId);
		   *   })
		   * @callback callback function(err)
		   *   Called when the {credentials} have been properly set on the configuration
		   *   object.
		   *
		   *   @param err [Error] if this is set, credentials were not successfully
		   *     loaded and this error provides information why.
		   * @see credentials
		   * @see Credentials
		   */
		  getCredentials: function getCredentials(callback) {
		    var self = this;

		    function finish(err) {
		      callback(err, err ? null : self.credentials);
		    }

		    function credError(msg, err) {
		      return new AWS.util.error(err || new Error(), {
		        code: 'CredentialsError',
		        message: msg,
		        name: 'CredentialsError'
		      });
		    }

		    function getAsyncCredentials() {
		      self.credentials.get(function(err) {
		        if (err) {
		          var msg = 'Could not load credentials from ' +
		            self.credentials.constructor.name;
		          err = credError(msg, err);
		        }
		        finish(err);
		      });
		    }

		    function getStaticCredentials() {
		      var err = null;
		      if (!self.credentials.accessKeyId || !self.credentials.secretAccessKey) {
		        err = credError('Missing credentials');
		      }
		      finish(err);
		    }

		    if (self.credentials) {
		      if (typeof self.credentials.get === 'function') {
		        getAsyncCredentials();
		      } else { // static credentials
		        getStaticCredentials();
		      }
		    } else if (self.credentialProvider) {
		      self.credentialProvider.resolve(function(err, creds) {
		        if (err) {
		          err = credError('Could not load credentials from any providers', err);
		        }
		        self.credentials = creds;
		        finish(err);
		      });
		    } else {
		      finish(credError('No credentials to load'));
		    }
		  },

		  /**
		   * @!group Loading and Setting Configuration Options
		   */

		  /**
		   * @overload update(options, allowUnknownKeys = false)
		   *   Updates the current configuration object with new options.
		   *
		   *   @example Update maxRetries property of a configuration object
		   *     config.update({maxRetries: 10});
		   *   @param [Object] options a map of option keys and values.
		   *   @param [Boolean] allowUnknownKeys whether unknown keys can be set on
		   *     the configuration object. Defaults to `false`.
		   *   @see constructor
		   */
		  update: function update(options, allowUnknownKeys) {
		    allowUnknownKeys = allowUnknownKeys || false;
		    options = this.extractCredentials(options);
		    AWS.util.each.call(this, options, function (key, value) {
		      if (allowUnknownKeys || Object.prototype.hasOwnProperty.call(this.keys, key) ||
		          AWS.Service.hasService(key)) {
		        this.set(key, value);
		      }
		    });
		  },

		  /**
		   * Loads configuration data from a JSON file into this config object.
		   * @note Loading configuration will reset all existing configuration
		   *   on the object.
		   * @!macro nobrowser
		   * @param path [String] the path relative to your process's current
		   *    working directory to load configuration from.
		   * @return [AWS.Config] the same configuration object
		   */
		  loadFromPath: function loadFromPath(path) {
		    this.clear();

		    var options = JSON.parse(AWS.util.readFileSync(path));
		    var fileSystemCreds = new AWS.FileSystemCredentials(path);
		    var chain = new AWS.CredentialProviderChain();
		    chain.providers.unshift(fileSystemCreds);
		    chain.resolve(function (err, creds) {
		      if (err) throw err;
		      else options.credentials = creds;
		    });

		    this.constructor(options);

		    return this;
		  },

		  /**
		   * Clears configuration data on this object
		   *
		   * @api private
		   */
		  clear: function clear() {
		    /*jshint forin:false */
		    AWS.util.each.call(this, this.keys, function (key) {
		      delete this[key];
		    });

		    // reset credential provider
		    this.set('credentials', undefined);
		    this.set('credentialProvider', undefined);
		  },

		  /**
		   * Sets a property on the configuration object, allowing for a
		   * default value
		   * @api private
		   */
		  set: function set(property, value, defaultValue) {
		    if (value === undefined) {
		      if (defaultValue === undefined) {
		        defaultValue = this.keys[property];
		      }
		      if (typeof defaultValue === 'function') {
		        this[property] = defaultValue.call(this);
		      } else {
		        this[property] = defaultValue;
		      }
		    } else if (property === 'httpOptions' && this[property]) {
		      // deep merge httpOptions
		      this[property] = AWS.util.merge(this[property], value);
		    } else {
		      this[property] = value;
		    }
		  },

		  /**
		   * All of the keys with their default values.
		   *
		   * @constant
		   * @api private
		   */
		  keys: {
		    credentials: null,
		    credentialProvider: null,
		    region: null,
		    logger: null,
		    apiVersions: {},
		    apiVersion: null,
		    endpoint: undefined,
		    httpOptions: {
		      timeout: 120000
		    },
		    maxRetries: undefined,
		    maxRedirects: 10,
		    paramValidation: true,
		    sslEnabled: true,
		    s3ForcePathStyle: false,
		    s3BucketEndpoint: false,
		    s3DisableBodySigning: true,
		    s3UsEast1RegionalEndpoint: 'legacy',
		    s3UseArnRegion: undefined,
		    computeChecksums: true,
		    convertResponseTypes: true,
		    correctClockSkew: false,
		    customUserAgent: null,
		    dynamoDbCrc32: true,
		    systemClockOffset: 0,
		    signatureVersion: null,
		    signatureCache: true,
		    retryDelayOptions: {},
		    useAccelerateEndpoint: false,
		    clientSideMonitoring: false,
		    endpointDiscoveryEnabled: undefined,
		    endpointCacheSize: 1000,
		    hostPrefixEnabled: true,
		    stsRegionalEndpoints: 'legacy'
		  },

		  /**
		   * Extracts accessKeyId, secretAccessKey and sessionToken
		   * from a configuration hash.
		   *
		   * @api private
		   */
		  extractCredentials: function extractCredentials(options) {
		    if (options.accessKeyId && options.secretAccessKey) {
		      options = AWS.util.copy(options);
		      options.credentials = new AWS.Credentials(options);
		    }
		    return options;
		  },

		  /**
		   * Sets the promise dependency the SDK will use wherever Promises are returned.
		   * Passing `null` will force the SDK to use native Promises if they are available.
		   * If native Promises are not available, passing `null` will have no effect.
		   * @param [Constructor] dep A reference to a Promise constructor
		   */
		  setPromisesDependency: function setPromisesDependency(dep) {
		    PromisesDependency = dep;
		    // if null was passed in, we should try to use native promises
		    if (dep === null && typeof Promise === 'function') {
		      PromisesDependency = Promise;
		    }
		    var constructors = [AWS.Request, AWS.Credentials, AWS.CredentialProviderChain];
		    if (AWS.S3) {
		      constructors.push(AWS.S3);
		      if (AWS.S3.ManagedUpload) {
		        constructors.push(AWS.S3.ManagedUpload);
		      }
		    }
		    AWS.util.addPromises(constructors, PromisesDependency);
		  },

		  /**
		   * Gets the promise dependency set by `AWS.config.setPromisesDependency`.
		   */
		  getPromisesDependency: function getPromisesDependency() {
		    return PromisesDependency;
		  }
		});

		/**
		 * @return [AWS.Config] The global configuration object singleton instance
		 * @readonly
		 * @see AWS.Config
		 */
		AWS.config = new AWS.Config();


	/***/ }),
	/* 41 */
	/***/ (function(module, exports, __webpack_require__) {

		var AWS = __webpack_require__(1);

		/**
		 * Represents your AWS security credentials, specifically the
		 * {accessKeyId}, {secretAccessKey}, and optional {sessionToken}.
		 * Creating a `Credentials` object allows you to pass around your
		 * security information to configuration and service objects.
		 *
		 * Note that this class typically does not need to be constructed manually,
		 * as the {AWS.Config} and {AWS.Service} classes both accept simple
		 * options hashes with the three keys. These structures will be converted
		 * into Credentials objects automatically.
		 *
		 * ## Expiring and Refreshing Credentials
		 *
		 * Occasionally credentials can expire in the middle of a long-running
		 * application. In this case, the SDK will automatically attempt to
		 * refresh the credentials from the storage location if the Credentials
		 * class implements the {refresh} method.
		 *
		 * If you are implementing a credential storage location, you
		 * will want to create a subclass of the `Credentials` class and
		 * override the {refresh} method. This method allows credentials to be
		 * retrieved from the backing store, be it a file system, database, or
		 * some network storage. The method should reset the credential attributes
		 * on the object.
		 *
		 * @!attribute expired
		 *   @return [Boolean] whether the credentials have been expired and
		 *     require a refresh. Used in conjunction with {expireTime}.
		 * @!attribute expireTime
		 *   @return [Date] a time when credentials should be considered expired. Used
		 *     in conjunction with {expired}.
		 * @!attribute accessKeyId
		 *   @return [String] the AWS access key ID
		 * @!attribute secretAccessKey
		 *   @return [String] the AWS secret access key
		 * @!attribute sessionToken
		 *   @return [String] an optional AWS session token
		 */
		AWS.Credentials = AWS.util.inherit({
		  /**
		   * A credentials object can be created using positional arguments or an options
		   * hash.
		   *
		   * @overload AWS.Credentials(accessKeyId, secretAccessKey, sessionToken=null)
		   *   Creates a Credentials object with a given set of credential information
		   *   as positional arguments.
		   *   @param accessKeyId [String] the AWS access key ID
		   *   @param secretAccessKey [String] the AWS secret access key
		   *   @param sessionToken [String] the optional AWS session token
		   *   @example Create a credentials object with AWS credentials
		   *     var creds = new AWS.Credentials('akid', 'secret', 'session');
		   * @overload AWS.Credentials(options)
		   *   Creates a Credentials object with a given set of credential information
		   *   as an options hash.
		   *   @option options accessKeyId [String] the AWS access key ID
		   *   @option options secretAccessKey [String] the AWS secret access key
		   *   @option options sessionToken [String] the optional AWS session token
		   *   @example Create a credentials object with AWS credentials
		   *     var creds = new AWS.Credentials({
		   *       accessKeyId: 'akid', secretAccessKey: 'secret', sessionToken: 'session'
		   *     });
		   */
		  constructor: function Credentials() {
		    // hide secretAccessKey from being displayed with util.inspect
		    AWS.util.hideProperties(this, ['secretAccessKey']);

		    this.expired = false;
		    this.expireTime = null;
		    this.refreshCallbacks = [];
		    if (arguments.length === 1 && typeof arguments[0] === 'object') {
		      var creds = arguments[0].credentials || arguments[0];
		      this.accessKeyId = creds.accessKeyId;
		      this.secretAccessKey = creds.secretAccessKey;
		      this.sessionToken = creds.sessionToken;
		    } else {
		      this.accessKeyId = arguments[0];
		      this.secretAccessKey = arguments[1];
		      this.sessionToken = arguments[2];
		    }
		  },

		  /**
		   * @return [Integer] the number of seconds before {expireTime} during which
		   *   the credentials will be considered expired.
		   */
		  expiryWindow: 15,

		  /**
		   * @return [Boolean] whether the credentials object should call {refresh}
		   * @note Subclasses should override this method to provide custom refresh
		   *   logic.
		   */
		  needsRefresh: function needsRefresh() {
		    var currentTime = AWS.util.date.getDate().getTime();
		    var adjustedTime = new Date(currentTime + this.expiryWindow * 1000);

		    if (this.expireTime && adjustedTime > this.expireTime) {
		      return true;
		    } else {
		      return this.expired || !this.accessKeyId || !this.secretAccessKey;
		    }
		  },

		  /**
		   * Gets the existing credentials, refreshing them if they are not yet loaded
		   * or have expired. Users should call this method before using {refresh},
		   * as this will not attempt to reload credentials when they are already
		   * loaded into the object.
		   *
		   * @callback callback function(err)
		   *   When this callback is called with no error, it means either credentials
		   *   do not need to be refreshed or refreshed credentials information has
		   *   been loaded into the object (as the `accessKeyId`, `secretAccessKey`,
		   *   and `sessionToken` properties).
		   *   @param err [Error] if an error occurred, this value will be filled
		   */
		  get: function get(callback) {
		    var self = this;
		    if (this.needsRefresh()) {
		      this.refresh(function(err) {
		        if (!err) self.expired = false; // reset expired flag
		        if (callback) callback(err);
		      });
		    } else if (callback) {
		      callback();
		    }
		  },

		  /**
		   * @!method  getPromise()
		   *   Returns a 'thenable' promise.
		   *   Gets the existing credentials, refreshing them if they are not yet loaded
		   *   or have expired. Users should call this method before using {refresh},
		   *   as this will not attempt to reload credentials when they are already
		   *   loaded into the object.
		   *
		   *   Two callbacks can be provided to the `then` method on the returned promise.
		   *   The first callback will be called if the promise is fulfilled, and the second
		   *   callback will be called if the promise is rejected.
		   *   @callback fulfilledCallback function()
		   *     Called if the promise is fulfilled. When this callback is called, it
		   *     means either credentials do not need to be refreshed or refreshed
		   *     credentials information has been loaded into the object (as the
		   *     `accessKeyId`, `secretAccessKey`, and `sessionToken` properties).
		   *   @callback rejectedCallback function(err)
		   *     Called if the promise is rejected.
		   *     @param err [Error] if an error occurred, this value will be filled
		   *   @return [Promise] A promise that represents the state of the `get` call.
		   *   @example Calling the `getPromise` method.
		   *     var promise = credProvider.getPromise();
		   *     promise.then(function() { ... }, function(err) { ... });
		   */

		  /**
		   * @!method  refreshPromise()
		   *   Returns a 'thenable' promise.
		   *   Refreshes the credentials. Users should call {get} before attempting
		   *   to forcibly refresh credentials.
		   *
		   *   Two callbacks can be provided to the `then` method on the returned promise.
		   *   The first callback will be called if the promise is fulfilled, and the second
		   *   callback will be called if the promise is rejected.
		   *   @callback fulfilledCallback function()
		   *     Called if the promise is fulfilled. When this callback is called, it
		   *     means refreshed credentials information has been loaded into the object
		   *     (as the `accessKeyId`, `secretAccessKey`, and `sessionToken` properties).
		   *   @callback rejectedCallback function(err)
		   *     Called if the promise is rejected.
		   *     @param err [Error] if an error occurred, this value will be filled
		   *   @return [Promise] A promise that represents the state of the `refresh` call.
		   *   @example Calling the `refreshPromise` method.
		   *     var promise = credProvider.refreshPromise();
		   *     promise.then(function() { ... }, function(err) { ... });
		   */

		  /**
		   * Refreshes the credentials. Users should call {get} before attempting
		   * to forcibly refresh credentials.
		   *
		   * @callback callback function(err)
		   *   When this callback is called with no error, it means refreshed
		   *   credentials information has been loaded into the object (as the
		   *   `accessKeyId`, `secretAccessKey`, and `sessionToken` properties).
		   *   @param err [Error] if an error occurred, this value will be filled
		   * @note Subclasses should override this class to reset the
		   *   {accessKeyId}, {secretAccessKey} and optional {sessionToken}
		   *   on the credentials object and then call the callback with
		   *   any error information.
		   * @see get
		   */
		  refresh: function refresh(callback) {
		    this.expired = false;
		    callback();
		  },

		  /**
		   * @api private
		   * @param callback
		   */
		  coalesceRefresh: function coalesceRefresh(callback, sync) {
		    var self = this;
		    if (self.refreshCallbacks.push(callback) === 1) {
		      self.load(function onLoad(err) {
		        AWS.util.arrayEach(self.refreshCallbacks, function(callback) {
		          if (sync) {
		            callback(err);
		          } else {
		            // callback could throw, so defer to ensure all callbacks are notified
		            AWS.util.defer(function () {
		              callback(err);
		            });
		          }
		        });
		        self.refreshCallbacks.length = 0;
		      });
		    }
		  },

		  /**
		   * @api private
		   * @param callback
		   */
		  load: function load(callback) {
		    callback();
		  }
		});

		/**
		 * @api private
		 */
		AWS.Credentials.addPromisesToClass = function addPromisesToClass(PromiseDependency) {
		  this.prototype.getPromise = AWS.util.promisifyMethod('get', PromiseDependency);
		  this.prototype.refreshPromise = AWS.util.promisifyMethod('refresh', PromiseDependency);
		};

		/**
		 * @api private
		 */
		AWS.Credentials.deletePromisesFromClass = function deletePromisesFromClass() {
		  delete this.prototype.getPromise;
		  delete this.prototype.refreshPromise;
		};

		AWS.util.addPromises(AWS.Credentials);


	/***/ }),
	/* 42 */
	/***/ (function(module, exports, __webpack_require__) {

		var AWS = __webpack_require__(1);

		/**
		 * Creates a credential provider chain that searches for AWS credentials
		 * in a list of credential providers specified by the {providers} property.
		 *
		 * By default, the chain will use the {defaultProviders} to resolve credentials.
		 * These providers will look in the environment using the
		 * {AWS.EnvironmentCredentials} class with the 'AWS' and 'AMAZON' prefixes.
		 *
		 * ## Setting Providers
		 *
		 * Each provider in the {providers} list should be a function that returns
		 * a {AWS.Credentials} object, or a hardcoded credentials object. The function
		 * form allows for delayed execution of the credential construction.
		 *
		 * ## Resolving Credentials from a Chain
		 *
		 * Call {resolve} to return the first valid credential object that can be
		 * loaded by the provider chain.
		 *
		 * For example, to resolve a chain with a custom provider that checks a file
		 * on disk after the set of {defaultProviders}:
		 *
		 * ```javascript
		 * var diskProvider = new AWS.FileSystemCredentials('./creds.json');
		 * var chain = new AWS.CredentialProviderChain();
		 * chain.providers.push(diskProvider);
		 * chain.resolve();
		 * ```
		 *
		 * The above code will return the `diskProvider` object if the
		 * file contains credentials and the `defaultProviders` do not contain
		 * any credential settings.
		 *
		 * @!attribute providers
		 *   @return [Array<AWS.Credentials, Function>]
		 *     a list of credentials objects or functions that return credentials
		 *     objects. If the provider is a function, the function will be
		 *     executed lazily when the provider needs to be checked for valid
		 *     credentials. By default, this object will be set to the
		 *     {defaultProviders}.
		 *   @see defaultProviders
		 */
		AWS.CredentialProviderChain = AWS.util.inherit(AWS.Credentials, {

		  /**
		   * Creates a new CredentialProviderChain with a default set of providers
		   * specified by {defaultProviders}.
		   */
		  constructor: function CredentialProviderChain(providers) {
		    if (providers) {
		      this.providers = providers;
		    } else {
		      this.providers = AWS.CredentialProviderChain.defaultProviders.slice(0);
		    }
		    this.resolveCallbacks = [];
		  },

		  /**
		   * @!method  resolvePromise()
		   *   Returns a 'thenable' promise.
		   *   Resolves the provider chain by searching for the first set of
		   *   credentials in {providers}.
		   *
		   *   Two callbacks can be provided to the `then` method on the returned promise.
		   *   The first callback will be called if the promise is fulfilled, and the second
		   *   callback will be called if the promise is rejected.
		   *   @callback fulfilledCallback function(credentials)
		   *     Called if the promise is fulfilled and the provider resolves the chain
		   *     to a credentials object
		   *     @param credentials [AWS.Credentials] the credentials object resolved
		   *       by the provider chain.
		   *   @callback rejectedCallback function(error)
		   *     Called if the promise is rejected.
		   *     @param err [Error] the error object returned if no credentials are found.
		   *   @return [Promise] A promise that represents the state of the `resolve` method call.
		   *   @example Calling the `resolvePromise` method.
		   *     var promise = chain.resolvePromise();
		   *     promise.then(function(credentials) { ... }, function(err) { ... });
		   */

		  /**
		   * Resolves the provider chain by searching for the first set of
		   * credentials in {providers}.
		   *
		   * @callback callback function(err, credentials)
		   *   Called when the provider resolves the chain to a credentials object
		   *   or null if no credentials can be found.
		   *
		   *   @param err [Error] the error object returned if no credentials are
		   *     found.
		   *   @param credentials [AWS.Credentials] the credentials object resolved
		   *     by the provider chain.
		   * @return [AWS.CredentialProviderChain] the provider, for chaining.
		   */
		  resolve: function resolve(callback) {
		    var self = this;
		    if (self.providers.length === 0) {
		      callback(new Error('No providers'));
		      return self;
		    }

		    if (self.resolveCallbacks.push(callback) === 1) {
		      var index = 0;
		      var providers = self.providers.slice(0);

		      function resolveNext(err, creds) {
		        if ((!err && creds) || index === providers.length) {
		          AWS.util.arrayEach(self.resolveCallbacks, function (callback) {
		            callback(err, creds);
		          });
		          self.resolveCallbacks.length = 0;
		          return;
		        }

		        var provider = providers[index++];
		        if (typeof provider === 'function') {
		          creds = provider.call();
		        } else {
		          creds = provider;
		        }

		        if (creds.get) {
		          creds.get(function (getErr) {
		            resolveNext(getErr, getErr ? null : creds);
		          });
		        } else {
		          resolveNext(null, creds);
		        }
		      }

		      resolveNext();
		    }

		    return self;
		  }
		});

		/**
		 * The default set of providers used by a vanilla CredentialProviderChain.
		 *
		 * In the browser:
		 *
		 * ```javascript
		 * AWS.CredentialProviderChain.defaultProviders = []
		 * ```
		 *
		 * In Node.js:
		 *
		 * ```javascript
		 * AWS.CredentialProviderChain.defaultProviders = [
		 *   function () { return new AWS.EnvironmentCredentials('AWS'); },
		 *   function () { return new AWS.EnvironmentCredentials('AMAZON'); },
		 *   function () { return new AWS.SharedIniFileCredentials(); },
		 *   function () { return new AWS.ECSCredentials(); },
		 *   function () { return new AWS.ProcessCredentials(); },
		 *   function () { return new AWS.TokenFileWebIdentityCredentials(); },
		 *   function () { return new AWS.EC2MetadataCredentials() }
		 * ]
		 * ```
		 */
		AWS.CredentialProviderChain.defaultProviders = [];

		/**
		 * @api private
		 */
		AWS.CredentialProviderChain.addPromisesToClass = function addPromisesToClass(PromiseDependency) {
		  this.prototype.resolvePromise = AWS.util.promisifyMethod('resolve', PromiseDependency);
		};

		/**
		 * @api private
		 */
		AWS.CredentialProviderChain.deletePromisesFromClass = function deletePromisesFromClass() {
		  delete this.prototype.resolvePromise;
		};

		AWS.util.addPromises(AWS.CredentialProviderChain);


	/***/ }),
	/* 43 */
	/***/ (function(module, exports, __webpack_require__) {

		var AWS = __webpack_require__(1);
		var inherit = AWS.util.inherit;

		/**
		 * The endpoint that a service will talk to, for example,
		 * `'https://ec2.ap-southeast-1.amazonaws.com'`. If
		 * you need to override an endpoint for a service, you can
		 * set the endpoint on a service by passing the endpoint
		 * object with the `endpoint` option key:
		 *
		 * ```javascript
		 * var ep = new AWS.Endpoint('awsproxy.example.com');
		 * var s3 = new AWS.S3({endpoint: ep});
		 * s3.service.endpoint.hostname == 'awsproxy.example.com'
		 * ```
		 *
		 * Note that if you do not specify a protocol, the protocol will
		 * be selected based on your current {AWS.config} configuration.
		 *
		 * @!attribute protocol
		 *   @return [String] the protocol (http or https) of the endpoint
		 *     URL
		 * @!attribute hostname
		 *   @return [String] the host portion of the endpoint, e.g.,
		 *     example.com
		 * @!attribute host
		 *   @return [String] the host portion of the endpoint including
		 *     the port, e.g., example.com:80
		 * @!attribute port
		 *   @return [Integer] the port of the endpoint
		 * @!attribute href
		 *   @return [String] the full URL of the endpoint
		 */
		AWS.Endpoint = inherit({

		  /**
		   * @overload Endpoint(endpoint)
		   *   Constructs a new endpoint given an endpoint URL. If the
		   *   URL omits a protocol (http or https), the default protocol
		   *   set in the global {AWS.config} will be used.
		   *   @param endpoint [String] the URL to construct an endpoint from
		   */
		  constructor: function Endpoint(endpoint, config) {
		    AWS.util.hideProperties(this, ['slashes', 'auth', 'hash', 'search', 'query']);

		    if (typeof endpoint === 'undefined' || endpoint === null) {
		      throw new Error('Invalid endpoint: ' + endpoint);
		    } else if (typeof endpoint !== 'string') {
		      return AWS.util.copy(endpoint);
		    }

		    if (!endpoint.match(/^http/)) {
		      var useSSL = config && config.sslEnabled !== undefined ?
		        config.sslEnabled : AWS.config.sslEnabled;
		      endpoint = (useSSL ? 'https' : 'http') + '://' + endpoint;
		    }

		    AWS.util.update(this, AWS.util.urlParse(endpoint));

		    // Ensure the port property is set as an integer
		    if (this.port) {
		      this.port = parseInt(this.port, 10);
		    } else {
		      this.port = this.protocol === 'https:' ? 443 : 80;
		    }
		  }

		});

		/**
		 * The low level HTTP request object, encapsulating all HTTP header
		 * and body data sent by a service request.
		 *
		 * @!attribute method
		 *   @return [String] the HTTP method of the request
		 * @!attribute path
		 *   @return [String] the path portion of the URI, e.g.,
		 *     "/list/?start=5&num=10"
		 * @!attribute headers
		 *   @return [map<String,String>]
		 *     a map of header keys and their respective values
		 * @!attribute body
		 *   @return [String] the request body payload
		 * @!attribute endpoint
		 *   @return [AWS.Endpoint] the endpoint for the request
		 * @!attribute region
		 *   @api private
		 *   @return [String] the region, for signing purposes only.
		 */
		AWS.HttpRequest = inherit({

		  /**
		   * @api private
		   */
		  constructor: function HttpRequest(endpoint, region) {
		    endpoint = new AWS.Endpoint(endpoint);
		    this.method = 'POST';
		    this.path = endpoint.path || '/';
		    this.headers = {};
		    this.body = '';
		    this.endpoint = endpoint;
		    this.region = region;
		    this._userAgent = '';
		    this.setUserAgent();
		  },

		  /**
		   * @api private
		   */
		  setUserAgent: function setUserAgent() {
		    this._userAgent = this.headers[this.getUserAgentHeaderName()] = AWS.util.userAgent();
		  },

		  getUserAgentHeaderName: function getUserAgentHeaderName() {
		    var prefix = AWS.util.isBrowser() ? 'X-Amz-' : '';
		    return prefix + 'User-Agent';
		  },

		  /**
		   * @api private
		   */
		  appendToUserAgent: function appendToUserAgent(agentPartial) {
		    if (typeof agentPartial === 'string' && agentPartial) {
		      this._userAgent += ' ' + agentPartial;
		    }
		    this.headers[this.getUserAgentHeaderName()] = this._userAgent;
		  },

		  /**
		   * @api private
		   */
		  getUserAgent: function getUserAgent() {
		    return this._userAgent;
		  },

		  /**
		   * @return [String] the part of the {path} excluding the
		   *   query string
		   */
		  pathname: function pathname() {
		    return this.path.split('?', 1)[0];
		  },

		  /**
		   * @return [String] the query string portion of the {path}
		   */
		  search: function search() {
		    var query = this.path.split('?', 2)[1];
		    if (query) {
		      query = AWS.util.queryStringParse(query);
		      return AWS.util.queryParamsToString(query);
		    }
		    return '';
		  },

		  /**
		   * @api private
		   * update httpRequest endpoint with endpoint string
		   */
		  updateEndpoint: function updateEndpoint(endpointStr) {
		    var newEndpoint = new AWS.Endpoint(endpointStr);
		    this.endpoint = newEndpoint;
		    this.path = newEndpoint.path || '/';
		    if (this.headers['Host']) {
		      this.headers['Host'] = newEndpoint.host;
		    }
		  }
		});

		/**
		 * The low level HTTP response object, encapsulating all HTTP header
		 * and body data returned from the request.
		 *
		 * @!attribute statusCode
		 *   @return [Integer] the HTTP status code of the response (e.g., 200, 404)
		 * @!attribute headers
		 *   @return [map<String,String>]
		 *      a map of response header keys and their respective values
		 * @!attribute body
		 *   @return [String] the response body payload
		 * @!attribute [r] streaming
		 *   @return [Boolean] whether this response is being streamed at a low-level.
		 *     Defaults to `false` (buffered reads). Do not modify this manually, use
		 *     {createUnbufferedStream} to convert the stream to unbuffered mode
		 *     instead.
		 */
		AWS.HttpResponse = inherit({

		  /**
		   * @api private
		   */
		  constructor: function HttpResponse() {
		    this.statusCode = undefined;
		    this.headers = {};
		    this.body = undefined;
		    this.streaming = false;
		    this.stream = null;
		  },

		  /**
		   * Disables buffering on the HTTP response and returns the stream for reading.
		   * @return [Stream, XMLHttpRequest, null] the underlying stream object.
		   *   Use this object to directly read data off of the stream.
		   * @note This object is only available after the {AWS.Request~httpHeaders}
		   *   event has fired. This method must be called prior to
		   *   {AWS.Request~httpData}.
		   * @example Taking control of a stream
		   *   request.on('httpHeaders', function(statusCode, headers) {
		   *     if (statusCode < 300) {
		   *       if (headers.etag === 'xyz') {
		   *         // pipe the stream, disabling buffering
		   *         var stream = this.response.httpResponse.createUnbufferedStream();
		   *         stream.pipe(process.stdout);
		   *       } else { // abort this request and set a better error message
		   *         this.abort();
		   *         this.response.error = new Error('Invalid ETag');
		   *       }
		   *     }
		   *   }).send(console.log);
		   */
		  createUnbufferedStream: function createUnbufferedStream() {
		    this.streaming = true;
		    return this.stream;
		  }
		});


		AWS.HttpClient = inherit({});

		/**
		 * @api private
		 */
		AWS.HttpClient.getInstance = function getInstance() {
		  if (this.singleton === undefined) {
		    this.singleton = new this();
		  }
		  return this.singleton;
		};


	/***/ }),
	/* 44 */
	/***/ (function(module, exports, __webpack_require__) {

		var AWS = __webpack_require__(1);
		var SequentialExecutor = __webpack_require__(36);
		var DISCOVER_ENDPOINT = __webpack_require__(45).discoverEndpoint;
		/**
		 * The namespace used to register global event listeners for request building
		 * and sending.
		 */
		AWS.EventListeners = {
		  /**
		   * @!attribute VALIDATE_CREDENTIALS
		   *   A request listener that validates whether the request is being
		   *   sent with credentials.
		   *   Handles the {AWS.Request~validate 'validate' Request event}
		   *   @example Sending a request without validating credentials
		   *     var listener = AWS.EventListeners.Core.VALIDATE_CREDENTIALS;
		   *     request.removeListener('validate', listener);
		   *   @readonly
		   *   @return [Function]
		   * @!attribute VALIDATE_REGION
		   *   A request listener that validates whether the region is set
		   *   for a request.
		   *   Handles the {AWS.Request~validate 'validate' Request event}
		   *   @example Sending a request without validating region configuration
		   *     var listener = AWS.EventListeners.Core.VALIDATE_REGION;
		   *     request.removeListener('validate', listener);
		   *   @readonly
		   *   @return [Function]
		   * @!attribute VALIDATE_PARAMETERS
		   *   A request listener that validates input parameters in a request.
		   *   Handles the {AWS.Request~validate 'validate' Request event}
		   *   @example Sending a request without validating parameters
		   *     var listener = AWS.EventListeners.Core.VALIDATE_PARAMETERS;
		   *     request.removeListener('validate', listener);
		   *   @example Disable parameter validation globally
		   *     AWS.EventListeners.Core.removeListener('validate',
		   *       AWS.EventListeners.Core.VALIDATE_REGION);
		   *   @readonly
		   *   @return [Function]
		   * @!attribute SEND
		   *   A request listener that initiates the HTTP connection for a
		   *   request being sent. Handles the {AWS.Request~send 'send' Request event}
		   *   @example Replacing the HTTP handler
		   *     var listener = AWS.EventListeners.Core.SEND;
		   *     request.removeListener('send', listener);
		   *     request.on('send', function(response) {
		   *       customHandler.send(response);
		   *     });
		   *   @return [Function]
		   *   @readonly
		   * @!attribute HTTP_DATA
		   *   A request listener that reads data from the HTTP connection in order
		   *   to build the response data.
		   *   Handles the {AWS.Request~httpData 'httpData' Request event}.
		   *   Remove this handler if you are overriding the 'httpData' event and
		   *   do not want extra data processing and buffering overhead.
		   *   @example Disabling default data processing
		   *     var listener = AWS.EventListeners.Core.HTTP_DATA;
		   *     request.removeListener('httpData', listener);
		   *   @return [Function]
		   *   @readonly
		   */
		  Core: {} /* doc hack */
		};

		/**
		 * @api private
		 */
		function getOperationAuthtype(req) {
		  if (!req.service.api.operations) {
		    return '';
		  }
		  var operation = req.service.api.operations[req.operation];
		  return operation ? operation.authtype : '';
		}

		AWS.EventListeners = {
		  Core: new SequentialExecutor().addNamedListeners(function(add, addAsync) {
		    addAsync('VALIDATE_CREDENTIALS', 'validate',
		        function VALIDATE_CREDENTIALS(req, done) {
		      if (!req.service.api.signatureVersion && !req.service.config.signatureVersion) return done(); // none
		      req.service.config.getCredentials(function(err) {
		        if (err) {
		          req.response.error = AWS.util.error(err,
		            {code: 'CredentialsError', message: 'Missing credentials in config, if using AWS_CONFIG_FILE, set AWS_SDK_LOAD_CONFIG=1'});
		        }
		        done();
		      });
		    });

		    add('VALIDATE_REGION', 'validate', function VALIDATE_REGION(req) {
		      if (!req.service.isGlobalEndpoint) {
		        var dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
		        if (!req.service.config.region) {
		          req.response.error = AWS.util.error(new Error(),
		            {code: 'ConfigError', message: 'Missing region in config'});
		        } else if (!dnsHostRegex.test(req.service.config.region)) {
		          req.response.error = AWS.util.error(new Error(),
		            {code: 'ConfigError', message: 'Invalid region in config'});
		        }
		      }
		    });

		    add('BUILD_IDEMPOTENCY_TOKENS', 'validate', function BUILD_IDEMPOTENCY_TOKENS(req) {
		      if (!req.service.api.operations) {
		        return;
		      }
		      var operation = req.service.api.operations[req.operation];
		      if (!operation) {
		        return;
		      }
		      var idempotentMembers = operation.idempotentMembers;
		      if (!idempotentMembers.length) {
		        return;
		      }
		      // creates a copy of params so user's param object isn't mutated
		      var params = AWS.util.copy(req.params);
		      for (var i = 0, iLen = idempotentMembers.length; i < iLen; i++) {
		        if (!params[idempotentMembers[i]]) {
		          // add the member
		          params[idempotentMembers[i]] = AWS.util.uuid.v4();
		        }
		      }
		      req.params = params;
		    });

		    add('VALIDATE_PARAMETERS', 'validate', function VALIDATE_PARAMETERS(req) {
		      if (!req.service.api.operations) {
		        return;
		      }
		      var rules = req.service.api.operations[req.operation].input;
		      var validation = req.service.config.paramValidation;
		      new AWS.ParamValidator(validation).validate(rules, req.params);
		    });

		    add('COMPUTE_CHECKSUM', 'afterBuild', function COMPUTE_CHECKSUM(req) {
		      if (!req.service.api.operations) {
		        return;
		      }
		      var operation = req.service.api.operations[req.operation];
		      if (!operation) {
		        return;
		      }
		      var body = req.httpRequest.body;
		      var isNonStreamingPayload = body && (AWS.util.Buffer.isBuffer(body) || typeof body === 'string');
		      var headers = req.httpRequest.headers;
		      if (
		        operation.httpChecksumRequired &&
		        req.service.config.computeChecksums &&
		        isNonStreamingPayload &&
		        req.service.getSignerClass(req) === AWS.Signers.V4 &&
		        !headers['Content-MD5']
		      ) {
		        var md5 = AWS.util.crypto.md5(body, 'base64');
		        headers['Content-MD5'] = md5;
		      }
		    });

		    addAsync('COMPUTE_SHA256', 'afterBuild', function COMPUTE_SHA256(req, done) {
		      req.haltHandlersOnError();
		      if (!req.service.api.operations) {
		        return;
		      }
		      var operation = req.service.api.operations[req.operation];
		      var authtype = operation ? operation.authtype : '';
		      if (!req.service.api.signatureVersion && !authtype && !req.service.config.signatureVersion) return done(); // none
		      if (req.service.getSignerClass(req) === AWS.Signers.V4) {
		        var body = req.httpRequest.body || '';
		        if (authtype.indexOf('unsigned-body') >= 0) {
		          req.httpRequest.headers['X-Amz-Content-Sha256'] = 'UNSIGNED-PAYLOAD';
		          return done();
		        }
		        AWS.util.computeSha256(body, function(err, sha) {
		          if (err) {
		            done(err);
		          }
		          else {
		            req.httpRequest.headers['X-Amz-Content-Sha256'] = sha;
		            done();
		          }
		        });
		      } else {
		        done();
		      }
		    });

		    add('SET_CONTENT_LENGTH', 'afterBuild', function SET_CONTENT_LENGTH(req) {
		      var authtype = getOperationAuthtype(req);
		      var payloadMember = AWS.util.getRequestPayloadShape(req);
		      if (req.httpRequest.headers['Content-Length'] === undefined) {
		        try {
		          var length = AWS.util.string.byteLength(req.httpRequest.body);
		          req.httpRequest.headers['Content-Length'] = length;
		        } catch (err) {
		          if (payloadMember && payloadMember.isStreaming) {
		            if (payloadMember.requiresLength) {
		              //streaming payload requires length(s3, glacier)
		              throw err;
		            } else if (authtype.indexOf('unsigned-body') >= 0) {
		              //unbounded streaming payload(lex, mediastore)
		              req.httpRequest.headers['Transfer-Encoding'] = 'chunked';
		              return;
		            } else {
		              throw err;
		            }
		          }
		          throw err;
		        }
		      }
		    });

		    add('SET_HTTP_HOST', 'afterBuild', function SET_HTTP_HOST(req) {
		      req.httpRequest.headers['Host'] = req.httpRequest.endpoint.host;
		    });

		    add('RESTART', 'restart', function RESTART() {
		      var err = this.response.error;
		      if (!err || !err.retryable) return;

		      this.httpRequest = new AWS.HttpRequest(
		        this.service.endpoint,
		        this.service.region
		      );

		      if (this.response.retryCount < this.service.config.maxRetries) {
		        this.response.retryCount++;
		      } else {
		        this.response.error = null;
		      }
		    });

		    var addToHead = true;
		    addAsync('DISCOVER_ENDPOINT', 'sign', DISCOVER_ENDPOINT, addToHead);

		    addAsync('SIGN', 'sign', function SIGN(req, done) {
		      var service = req.service;
		      var operations = req.service.api.operations || {};
		      var operation = operations[req.operation];
		      var authtype = operation ? operation.authtype : '';
		      if (!service.api.signatureVersion && !authtype && !service.config.signatureVersion) return done(); // none

		      service.config.getCredentials(function (err, credentials) {
		        if (err) {
		          req.response.error = err;
		          return done();
		        }

		        try {
		          var date = service.getSkewCorrectedDate();
		          var SignerClass = service.getSignerClass(req);
		          var signer = new SignerClass(req.httpRequest,
		            service.getSigningName(req),
		            {
		              signatureCache: service.config.signatureCache,
		              operation: operation,
		              signatureVersion: service.api.signatureVersion
		            });
		          signer.setServiceClientId(service._clientId);

		          // clear old authorization headers
		          delete req.httpRequest.headers['Authorization'];
		          delete req.httpRequest.headers['Date'];
		          delete req.httpRequest.headers['X-Amz-Date'];

		          // add new authorization
		          signer.addAuthorization(credentials, date);
		          req.signedAt = date;
		        } catch (e) {
		          req.response.error = e;
		        }
		        done();
		      });
		    });

		    add('VALIDATE_RESPONSE', 'validateResponse', function VALIDATE_RESPONSE(resp) {
		      if (this.service.successfulResponse(resp, this)) {
		        resp.data = {};
		        resp.error = null;
		      } else {
		        resp.data = null;
		        resp.error = AWS.util.error(new Error(),
		          {code: 'UnknownError', message: 'An unknown error occurred.'});
		      }
		    });

		    addAsync('SEND', 'send', function SEND(resp, done) {
		      resp.httpResponse._abortCallback = done;
		      resp.error = null;
		      resp.data = null;

		      function callback(httpResp) {
		        resp.httpResponse.stream = httpResp;
		        var stream = resp.request.httpRequest.stream;
		        var service = resp.request.service;
		        var api = service.api;
		        var operationName = resp.request.operation;
		        var operation = api.operations[operationName] || {};

		        httpResp.on('headers', function onHeaders(statusCode, headers, statusMessage) {
		          resp.request.emit(
		            'httpHeaders',
		            [statusCode, headers, resp, statusMessage]
		          );

		          if (!resp.httpResponse.streaming) {
		            if (AWS.HttpClient.streamsApiVersion === 2) { // streams2 API check
		              // if we detect event streams, we're going to have to
		              // return the stream immediately
		              if (operation.hasEventOutput && service.successfulResponse(resp)) {
		                // skip reading the IncomingStream
		                resp.request.emit('httpDone');
		                done();
		                return;
		              }

		              httpResp.on('readable', function onReadable() {
		                var data = httpResp.read();
		                if (data !== null) {
		                  resp.request.emit('httpData', [data, resp]);
		                }
		              });
		            } else { // legacy streams API
		              httpResp.on('data', function onData(data) {
		                resp.request.emit('httpData', [data, resp]);
		              });
		            }
		          }
		        });

		        httpResp.on('end', function onEnd() {
		          if (!stream || !stream.didCallback) {
		            if (AWS.HttpClient.streamsApiVersion === 2 && (operation.hasEventOutput && service.successfulResponse(resp))) {
		              // don't concatenate response chunks when streaming event stream data when response is successful
		              return;
		            }
		            resp.request.emit('httpDone');
		            done();
		          }
		        });
		      }

		      function progress(httpResp) {
		        httpResp.on('sendProgress', function onSendProgress(value) {
		          resp.request.emit('httpUploadProgress', [value, resp]);
		        });

		        httpResp.on('receiveProgress', function onReceiveProgress(value) {
		          resp.request.emit('httpDownloadProgress', [value, resp]);
		        });
		      }

		      function error(err) {
		        if (err.code !== 'RequestAbortedError') {
		          var errCode = err.code === 'TimeoutError' ? err.code : 'NetworkingError';
		          err = AWS.util.error(err, {
		            code: errCode,
		            region: resp.request.httpRequest.region,
		            hostname: resp.request.httpRequest.endpoint.hostname,
		            retryable: true
		          });
		        }
		        resp.error = err;
		        resp.request.emit('httpError', [resp.error, resp], function() {
		          done();
		        });
		      }

		      function executeSend() {
		        var http = AWS.HttpClient.getInstance();
		        var httpOptions = resp.request.service.config.httpOptions || {};
		        try {
		          var stream = http.handleRequest(resp.request.httpRequest, httpOptions,
		                                          callback, error);
		          progress(stream);
		        } catch (err) {
		          error(err);
		        }
		      }
		      var timeDiff = (resp.request.service.getSkewCorrectedDate() - this.signedAt) / 1000;
		      if (timeDiff >= 60 * 10) { // if we signed 10min ago, re-sign
		        this.emit('sign', [this], function(err) {
		          if (err) done(err);
		          else executeSend();
		        });
		      } else {
		        executeSend();
		      }
		    });

		    add('HTTP_HEADERS', 'httpHeaders',
		        function HTTP_HEADERS(statusCode, headers, resp, statusMessage) {
		      resp.httpResponse.statusCode = statusCode;
		      resp.httpResponse.statusMessage = statusMessage;
		      resp.httpResponse.headers = headers;
		      resp.httpResponse.body = AWS.util.buffer.toBuffer('');
		      resp.httpResponse.buffers = [];
		      resp.httpResponse.numBytes = 0;
		      var dateHeader = headers.date || headers.Date;
		      var service = resp.request.service;
		      if (dateHeader) {
		        var serverTime = Date.parse(dateHeader);
		        if (service.config.correctClockSkew
		            && service.isClockSkewed(serverTime)) {
		          service.applyClockOffset(serverTime);
		        }
		      }
		    });

		    add('HTTP_DATA', 'httpData', function HTTP_DATA(chunk, resp) {
		      if (chunk) {
		        if (AWS.util.isNode()) {
		          resp.httpResponse.numBytes += chunk.length;

		          var total = resp.httpResponse.headers['content-length'];
		          var progress = { loaded: resp.httpResponse.numBytes, total: total };
		          resp.request.emit('httpDownloadProgress', [progress, resp]);
		        }

		        resp.httpResponse.buffers.push(AWS.util.buffer.toBuffer(chunk));
		      }
		    });

		    add('HTTP_DONE', 'httpDone', function HTTP_DONE(resp) {
		      // convert buffers array into single buffer
		      if (resp.httpResponse.buffers && resp.httpResponse.buffers.length > 0) {
		        var body = AWS.util.buffer.concat(resp.httpResponse.buffers);
		        resp.httpResponse.body = body;
		      }
		      delete resp.httpResponse.numBytes;
		      delete resp.httpResponse.buffers;
		    });

		    add('FINALIZE_ERROR', 'retry', function FINALIZE_ERROR(resp) {
		      if (resp.httpResponse.statusCode) {
		        resp.error.statusCode = resp.httpResponse.statusCode;
		        if (resp.error.retryable === undefined) {
		          resp.error.retryable = this.service.retryableError(resp.error, this);
		        }
		      }
		    });

		    add('INVALIDATE_CREDENTIALS', 'retry', function INVALIDATE_CREDENTIALS(resp) {
		      if (!resp.error) return;
		      switch (resp.error.code) {
		        case 'RequestExpired': // EC2 only
		        case 'ExpiredTokenException':
		        case 'ExpiredToken':
		          resp.error.retryable = true;
		          resp.request.service.config.credentials.expired = true;
		      }
		    });

		    add('EXPIRED_SIGNATURE', 'retry', function EXPIRED_SIGNATURE(resp) {
		      var err = resp.error;
		      if (!err) return;
		      if (typeof err.code === 'string' && typeof err.message === 'string') {
		        if (err.code.match(/Signature/) && err.message.match(/expired/)) {
		          resp.error.retryable = true;
		        }
		      }
		    });

		    add('CLOCK_SKEWED', 'retry', function CLOCK_SKEWED(resp) {
		      if (!resp.error) return;
		      if (this.service.clockSkewError(resp.error)
		          && this.service.config.correctClockSkew) {
		        resp.error.retryable = true;
		      }
		    });

		    add('REDIRECT', 'retry', function REDIRECT(resp) {
		      if (resp.error && resp.error.statusCode >= 300 &&
		          resp.error.statusCode < 400 && resp.httpResponse.headers['location']) {
		        this.httpRequest.endpoint =
		          new AWS.Endpoint(resp.httpResponse.headers['location']);
		        this.httpRequest.headers['Host'] = this.httpRequest.endpoint.host;
		        resp.error.redirect = true;
		        resp.error.retryable = true;
		      }
		    });

		    add('RETRY_CHECK', 'retry', function RETRY_CHECK(resp) {
		      if (resp.error) {
		        if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {
		          resp.error.retryDelay = 0;
		        } else if (resp.retryCount < resp.maxRetries) {
		          resp.error.retryDelay = this.service.retryDelays(resp.retryCount, resp.error) || 0;
		        }
		      }
		    });

		    addAsync('RESET_RETRY_STATE', 'afterRetry', function RESET_RETRY_STATE(resp, done) {
		      var delay, willRetry = false;

		      if (resp.error) {
		        delay = resp.error.retryDelay || 0;
		        if (resp.error.retryable && resp.retryCount < resp.maxRetries) {
		          resp.retryCount++;
		          willRetry = true;
		        } else if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {
		          resp.redirectCount++;
		          willRetry = true;
		        }
		      }

		      // delay < 0 is a signal from customBackoff to skip retries
		      if (willRetry && delay >= 0) {
		        resp.error = null;
		        setTimeout(done, delay);
		      } else {
		        done();
		      }
		    });
		  }),

		  CorePost: new SequentialExecutor().addNamedListeners(function(add) {
		    add('EXTRACT_REQUEST_ID', 'extractData', AWS.util.extractRequestId);
		    add('EXTRACT_REQUEST_ID', 'extractError', AWS.util.extractRequestId);

		    add('ENOTFOUND_ERROR', 'httpError', function ENOTFOUND_ERROR(err) {
		      function isDNSError(err) {
		        return err.errno === 'ENOTFOUND' ||
		          typeof err.errno === 'number' &&
		          typeof AWS.util.getSystemErrorName === 'function' &&
		          ['EAI_NONAME', 'EAI_NODATA'].indexOf(AWS.util.getSystemErrorName(err.errno) >= 0);
		      }
		      if (err.code === 'NetworkingError' && isDNSError(err)) {
		        var message = 'Inaccessible host: `' + err.hostname +
		          '\'. This service may not be available in the `' + err.region +
		          '\' region.';
		        this.response.error = AWS.util.error(new Error(message), {
		          code: 'UnknownEndpoint',
		          region: err.region,
		          hostname: err.hostname,
		          retryable: true,
		          originalError: err
		        });
		      }
		    });
		  }),

		  Logger: new SequentialExecutor().addNamedListeners(function(add) {
		    add('LOG_REQUEST', 'complete', function LOG_REQUEST(resp) {
		      var req = resp.request;
		      var logger = req.service.config.logger;
		      if (!logger) return;
		      function filterSensitiveLog(inputShape, shape) {
		        if (!shape) {
		          return shape;
		        }
		        if (inputShape.isSensitive) {
		          return '***SensitiveInformation***';
		        }
		        switch (inputShape.type) {
		          case 'structure':
		            var struct = {};
		            AWS.util.each(shape, function(subShapeName, subShape) {
		              if (Object.prototype.hasOwnProperty.call(inputShape.members, subShapeName)) {
		                struct[subShapeName] = filterSensitiveLog(inputShape.members[subShapeName], subShape);
		              } else {
		                struct[subShapeName] = subShape;
		              }
		            });
		            return struct;
		          case 'list':
		            var list = [];
		            AWS.util.arrayEach(shape, function(subShape, index) {
		              list.push(filterSensitiveLog(inputShape.member, subShape));
		            });
		            return list;
		          case 'map':
		            var map = {};
		            AWS.util.each(shape, function(key, value) {
		              map[key] = filterSensitiveLog(inputShape.value, value);
		            });
		            return map;
		          default:
		            return shape;
		        }
		      }

		      function buildMessage() {
		        var time = resp.request.service.getSkewCorrectedDate().getTime();
		        var delta = (time - req.startTime.getTime()) / 1000;
		        var ansi = logger.isTTY ? true : false;
		        var status = resp.httpResponse.statusCode;
		        var censoredParams = req.params;
		        if (
		          req.service.api.operations &&
		              req.service.api.operations[req.operation] &&
		              req.service.api.operations[req.operation].input
		        ) {
		          var inputShape = req.service.api.operations[req.operation].input;
		          censoredParams = filterSensitiveLog(inputShape, req.params);
		        }
		        var params = __webpack_require__(46).inspect(censoredParams, true, null);
		        var message = '';
		        if (ansi) message += '\x1B[33m';
		        message += '[AWS ' + req.service.serviceIdentifier + ' ' + status;
		        message += ' ' + delta.toString() + 's ' + resp.retryCount + ' retries]';
		        if (ansi) message += '\x1B[0;1m';
		        message += ' ' + AWS.util.string.lowerFirst(req.operation);
		        message += '(' + params + ')';
		        if (ansi) message += '\x1B[0m';
		        return message;
		      }

		      var line = buildMessage();
		      if (typeof logger.log === 'function') {
		        logger.log(line);
		      } else if (typeof logger.write === 'function') {
		        logger.write(line + '\n');
		      }
		    });
		  }),

		  Json: new SequentialExecutor().addNamedListeners(function(add) {
		    var svc = __webpack_require__(13);
		    add('BUILD', 'build', svc.buildRequest);
		    add('EXTRACT_DATA', 'extractData', svc.extractData);
		    add('EXTRACT_ERROR', 'extractError', svc.extractError);
		  }),

		  Rest: new SequentialExecutor().addNamedListeners(function(add) {
		    var svc = __webpack_require__(21);
		    add('BUILD', 'build', svc.buildRequest);
		    add('EXTRACT_DATA', 'extractData', svc.extractData);
		    add('EXTRACT_ERROR', 'extractError', svc.extractError);
		  }),

		  RestJson: new SequentialExecutor().addNamedListeners(function(add) {
		    var svc = __webpack_require__(22);
		    add('BUILD', 'build', svc.buildRequest);
		    add('EXTRACT_DATA', 'extractData', svc.extractData);
		    add('EXTRACT_ERROR', 'extractError', svc.extractError);
		  }),

		  RestXml: new SequentialExecutor().addNamedListeners(function(add) {
		    var svc = __webpack_require__(23);
		    add('BUILD', 'build', svc.buildRequest);
		    add('EXTRACT_DATA', 'extractData', svc.extractData);
		    add('EXTRACT_ERROR', 'extractError', svc.extractError);
		  }),

		  Query: new SequentialExecutor().addNamedListeners(function(add) {
		    var svc = __webpack_require__(17);
		    add('BUILD', 'build', svc.buildRequest);
		    add('EXTRACT_DATA', 'extractData', svc.extractData);
		    add('EXTRACT_ERROR', 'extractError', svc.extractError);
		  })
		};


	/***/ }),
	/* 45 */
	/***/ (function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {var AWS = __webpack_require__(1);
		var util = __webpack_require__(2);
		var endpointDiscoveryEnabledEnvs = ['AWS_ENABLE_ENDPOINT_DISCOVERY', 'AWS_ENDPOINT_DISCOVERY_ENABLED'];

		/**
		 * Generate key (except resources and operation part) to index the endpoints in the cache
		 * If input shape has endpointdiscoveryid trait then use
		 *   accessKey + operation + resources + region + service as cache key
		 * If input shape doesn't have endpointdiscoveryid trait then use
		 *   accessKey + region + service as cache key
		 * @return [map<String,String>] object with keys to index endpoints.
		 * @api private
		 */
		function getCacheKey(request) {
		  var service = request.service;
		  var api = service.api || {};
		  var operations = api.operations;
		  var identifiers = {};
		  if (service.config.region) {
		    identifiers.region = service.config.region;
		  }
		  if (api.serviceId) {
		    identifiers.serviceId = api.serviceId;
		  }
		  if (service.config.credentials.accessKeyId) {
		    identifiers.accessKeyId = service.config.credentials.accessKeyId;
		  }
		  return identifiers;
		}

		/**
		 * Recursive helper for marshallCustomIdentifiers().
		 * Looks for required string input members that have 'endpointdiscoveryid' trait.
		 * @api private
		 */
		function marshallCustomIdentifiersHelper(result, params, shape) {
		  if (!shape || params === undefined || params === null) return;
		  if (shape.type === 'structure' && shape.required && shape.required.length > 0) {
		    util.arrayEach(shape.required, function(name) {
		      var memberShape = shape.members[name];
		      if (memberShape.endpointDiscoveryId === true) {
		        var locationName = memberShape.isLocationName ? memberShape.name : name;
		        result[locationName] = String(params[name]);
		      } else {
		        marshallCustomIdentifiersHelper(result, params[name], memberShape);
		      }
		    });
		  }
		}

		/**
		 * Get custom identifiers for cache key.
		 * Identifies custom identifiers by checking each shape's `endpointDiscoveryId` trait.
		 * @param [object] request object
		 * @param [object] input shape of the given operation's api
		 * @api private
		 */
		function marshallCustomIdentifiers(request, shape) {
		  var identifiers = {};
		  marshallCustomIdentifiersHelper(identifiers, request.params, shape);
		  return identifiers;
		}

		/**
		 * Call endpoint discovery operation when it's optional.
		 * When endpoint is available in cache then use the cached endpoints. If endpoints
		 * are unavailable then use regional endpoints and call endpoint discovery operation
		 * asynchronously. This is turned off by default.
		 * @param [object] request object
		 * @api private
		 */
		function optionalDiscoverEndpoint(request) {
		  var service = request.service;
		  var api = service.api;
		  var operationModel = api.operations ? api.operations[request.operation] : undefined;
		  var inputShape = operationModel ? operationModel.input : undefined;

		  var identifiers = marshallCustomIdentifiers(request, inputShape);
		  var cacheKey = getCacheKey(request);
		  if (Object.keys(identifiers).length > 0) {
		    cacheKey = util.update(cacheKey, identifiers);
		    if (operationModel) cacheKey.operation = operationModel.name;
		  }
		  var endpoints = AWS.endpointCache.get(cacheKey);
		  if (endpoints && endpoints.length === 1 && endpoints[0].Address === '') {
		    //endpoint operation is being made but response not yet received
		    //or endpoint operation just failed in 1 minute
		    return;
		  } else if (endpoints && endpoints.length > 0) {
		    //found endpoint record from cache
		    request.httpRequest.updateEndpoint(endpoints[0].Address);
		  } else {
		    //endpoint record not in cache or outdated. make discovery operation
		    var endpointRequest = service.makeRequest(api.endpointOperation, {
		      Operation: operationModel.name,
		      Identifiers: identifiers,
		    });
		    addApiVersionHeader(endpointRequest);
		    endpointRequest.removeListener('validate', AWS.EventListeners.Core.VALIDATE_PARAMETERS);
		    endpointRequest.removeListener('retry', AWS.EventListeners.Core.RETRY_CHECK);
		    //put in a placeholder for endpoints already requested, prevent
		    //too much in-flight calls
		    AWS.endpointCache.put(cacheKey, [{
		      Address: '',
		      CachePeriodInMinutes: 1
		    }]);
		    endpointRequest.send(function(err, data) {
		      if (data && data.Endpoints) {
		        AWS.endpointCache.put(cacheKey, data.Endpoints);
		      } else if (err) {
		        AWS.endpointCache.put(cacheKey, [{
		          Address: '',
		          CachePeriodInMinutes: 1 //not to make more endpoint operation in next 1 minute
		        }]);
		      }
		    });
		  }
		}

		var requestQueue = {};

		/**
		 * Call endpoint discovery operation when it's required.
		 * When endpoint is available in cache then use cached ones. If endpoints are
		 * unavailable then SDK should call endpoint operation then use returned new
		 * endpoint for the api call. SDK will automatically attempt to do endpoint
		 * discovery. This is turned off by default
		 * @param [object] request object
		 * @api private
		 */
		function requiredDiscoverEndpoint(request, done) {
		  var service = request.service;
		  var api = service.api;
		  var operationModel = api.operations ? api.operations[request.operation] : undefined;
		  var inputShape = operationModel ? operationModel.input : undefined;

		  var identifiers = marshallCustomIdentifiers(request, inputShape);
		  var cacheKey = getCacheKey(request);
		  if (Object.keys(identifiers).length > 0) {
		    cacheKey = util.update(cacheKey, identifiers);
		    if (operationModel) cacheKey.operation = operationModel.name;
		  }
		  var cacheKeyStr = AWS.EndpointCache.getKeyString(cacheKey);
		  var endpoints = AWS.endpointCache.get(cacheKeyStr); //endpoint cache also accepts string keys
		  if (endpoints && endpoints.length === 1 && endpoints[0].Address === '') {
		    //endpoint operation is being made but response not yet received
		    //push request object to a pending queue
		    if (!requestQueue[cacheKeyStr]) requestQueue[cacheKeyStr] = [];
		    requestQueue[cacheKeyStr].push({request: request, callback: done});
		    return;
		  } else if (endpoints && endpoints.length > 0) {
		    request.httpRequest.updateEndpoint(endpoints[0].Address);
		    done();
		  } else {
		    var endpointRequest = service.makeRequest(api.endpointOperation, {
		      Operation: operationModel.name,
		      Identifiers: identifiers,
		    });
		    endpointRequest.removeListener('validate', AWS.EventListeners.Core.VALIDATE_PARAMETERS);
		    addApiVersionHeader(endpointRequest);

		    //put in a placeholder for endpoints already requested, prevent
		    //too much in-flight calls
		    AWS.endpointCache.put(cacheKeyStr, [{
		      Address: '',
		      CachePeriodInMinutes: 60 //long-live cache
		    }]);
		    endpointRequest.send(function(err, data) {
		      if (err) {
		        request.response.error = util.error(err, { retryable: false });
		        AWS.endpointCache.remove(cacheKey);

		        //fail all the pending requests in batch
		        if (requestQueue[cacheKeyStr]) {
		          var pendingRequests = requestQueue[cacheKeyStr];
		          util.arrayEach(pendingRequests, function(requestContext) {
		            requestContext.request.response.error = util.error(err, { retryable: false });
		            requestContext.callback();
		          });
		          delete requestQueue[cacheKeyStr];
		        }
		      } else if (data) {
		        AWS.endpointCache.put(cacheKeyStr, data.Endpoints);
		        request.httpRequest.updateEndpoint(data.Endpoints[0].Address);

		        //update the endpoint for all the pending requests in batch
		        if (requestQueue[cacheKeyStr]) {
		          var pendingRequests = requestQueue[cacheKeyStr];
		          util.arrayEach(pendingRequests, function(requestContext) {
		            requestContext.request.httpRequest.updateEndpoint(data.Endpoints[0].Address);
		            requestContext.callback();
		          });
		          delete requestQueue[cacheKeyStr];
		        }
		      }
		      done();
		    });
		  }
		}

		/**
		 * add api version header to endpoint operation
		 * @api private
		 */
		function addApiVersionHeader(endpointRequest) {
		  var api = endpointRequest.service.api;
		  var apiVersion = api.apiVersion;
		  if (apiVersion && !endpointRequest.httpRequest.headers['x-amz-api-version']) {
		    endpointRequest.httpRequest.headers['x-amz-api-version'] = apiVersion;
		  }
		}

		/**
		 * If api call gets invalid endpoint exception, SDK should attempt to remove the invalid
		 * endpoint from cache.
		 * @api private
		 */
		function invalidateCachedEndpoints(response) {
		  var error = response.error;
		  var httpResponse = response.httpResponse;
		  if (error &&
		    (error.code === 'InvalidEndpointException' || httpResponse.statusCode === 421)
		  ) {
		    var request = response.request;
		    var operations = request.service.api.operations || {};
		    var inputShape = operations[request.operation] ? operations[request.operation].input : undefined;
		    var identifiers = marshallCustomIdentifiers(request, inputShape);
		    var cacheKey = getCacheKey(request);
		    if (Object.keys(identifiers).length > 0) {
		      cacheKey = util.update(cacheKey, identifiers);
		      if (operations[request.operation]) cacheKey.operation = operations[request.operation].name;
		    }
		    AWS.endpointCache.remove(cacheKey);
		  }
		}

		/**
		 * If endpoint is explicitly configured, SDK should not do endpoint discovery in anytime.
		 * @param [object] client Service client object.
		 * @api private
		 */
		function hasCustomEndpoint(client) {
		  //if set endpoint is set for specific client, enable endpoint discovery will raise an error.
		  if (client._originalConfig && client._originalConfig.endpoint && client._originalConfig.endpointDiscoveryEnabled === true) {
		    throw util.error(new Error(), {
		      code: 'ConfigurationException',
		      message: 'Custom endpoint is supplied; endpointDiscoveryEnabled must not be true.'
		    });
		  };
		  var svcConfig = AWS.config[client.serviceIdentifier] || {};
		  return Boolean(AWS.config.endpoint || svcConfig.endpoint || (client._originalConfig && client._originalConfig.endpoint));
		}

		/**
		 * @api private
		 */
		function isFalsy(value) {
		  return ['false', '0'].indexOf(value) >= 0;
		}

		/**
		 * If endpoint discovery should perform for this request when no operation requires endpoint
		 * discovery for the given service.
		 * SDK performs config resolution in order like below:
		 * 1. If set in client configuration.
		 * 2. If set in env AWS_ENABLE_ENDPOINT_DISCOVERY.
		 * 3. If set in shared ini config file with key 'endpoint_discovery_enabled'.
		 * @param [object] request request object.
		 * @returns [boolean|undefined] if endpoint discovery config is not set in any source, this
		 *  function returns undefined
		 * @api private
		 */
		function resolveEndpointDiscoveryConfig(request) {
		  var service = request.service || {};
		  if (service.config.endpointDiscoveryEnabled !== undefined) {
		    return service.config.endpointDiscoveryEnabled;
		  }

		  //shared ini file is only available in Node
		  //not to check env in browser
		  if (util.isBrowser()) return undefined;

		  // If any of recognized endpoint discovery config env is set
		  for (var i = 0; i < endpointDiscoveryEnabledEnvs.length; i++) {
		    var env = endpointDiscoveryEnabledEnvs[i];
		    if (Object.prototype.hasOwnProperty.call(process.env, env)) {
		      if (process.env[env] === '' || process.env[env] === undefined) {
		        throw util.error(new Error(), {
		          code: 'ConfigurationException',
		          message: 'environmental variable ' + env + ' cannot be set to nothing'
		        });
		      }
		      return !isFalsy(process.env[env]);
		    }
		  }

		  var configFile = {};
		  try {
		    configFile = AWS.util.iniLoader ? AWS.util.iniLoader.loadFrom({
		      isConfig: true,
		      filename: process.env[AWS.util.sharedConfigFileEnv]
		    }) : {};
		  } catch (e) {}
		  var sharedFileConfig = configFile[
		    process.env.AWS_PROFILE || AWS.util.defaultProfile
		  ] || {};
		  if (Object.prototype.hasOwnProperty.call(sharedFileConfig, 'endpoint_discovery_enabled')) {
		    if (sharedFileConfig.endpoint_discovery_enabled === undefined) {
		      throw util.error(new Error(), {
		        code: 'ConfigurationException',
		        message: 'config file entry \'endpoint_discovery_enabled\' cannot be set to nothing'
		      });
		    }
		    return !isFalsy(sharedFileConfig.endpoint_discovery_enabled);
		  }
		  return undefined;
		}

		/**
		 * attach endpoint discovery logic to request object
		 * @param [object] request
		 * @api private
		 */
		function discoverEndpoint(request, done) {
		  var service = request.service || {};
		  if (hasCustomEndpoint(service) || request.isPresigned()) return done();

		  var operations = service.api.operations || {};
		  var operationModel = operations[request.operation];
		  var isEndpointDiscoveryRequired = operationModel ? operationModel.endpointDiscoveryRequired : 'NULL';
		  var isEnabled = resolveEndpointDiscoveryConfig(request);
		  var hasRequiredEndpointDiscovery = service.api.hasRequiredEndpointDiscovery;
		  if (isEnabled || hasRequiredEndpointDiscovery) {
		    // Once a customer enables endpoint discovery, the SDK should start appending
		    // the string endpoint-discovery to the user-agent on all requests.
		    request.httpRequest.appendToUserAgent('endpoint-discovery');
		  }
		  switch (isEndpointDiscoveryRequired) {
		    case 'OPTIONAL':
		      if (isEnabled || hasRequiredEndpointDiscovery) {
		        // For a given service; if at least one operation requires endpoint discovery then the SDK must enable endpoint discovery
		        // by default for all operations of that service, including operations where endpoint discovery is optional.
		        optionalDiscoverEndpoint(request);
		        request.addNamedListener('INVALIDATE_CACHED_ENDPOINTS', 'extractError', invalidateCachedEndpoints);
		      }
		      done();
		      break;
		    case 'REQUIRED':
		      if (isEnabled === false) {
		        // For a given operation; if endpoint discovery is required and it has been disabled on the SDK client,
		        // then the SDK must return a clear and actionable exception.
		        request.response.error = util.error(new Error(), {
		          code: 'ConfigurationException',
		          message: 'Endpoint Discovery is disabled but ' + service.api.className + '.' + request.operation +
		                    '() requires it. Please check your configurations.'
		        });
		        done();
		        break;
		      }
		      request.addNamedListener('INVALIDATE_CACHED_ENDPOINTS', 'extractError', invalidateCachedEndpoints);
		      requiredDiscoverEndpoint(request, done);
		      break;
		    case 'NULL':
		    default:
		      done();
		      break;
		  }
		}

		module.exports = {
		  discoverEndpoint: discoverEndpoint,
		  requiredDiscoverEndpoint: requiredDiscoverEndpoint,
		  optionalDiscoverEndpoint: optionalDiscoverEndpoint,
		  marshallCustomIdentifiers: marshallCustomIdentifiers,
		  getCacheKey: getCacheKey,
		  invalidateCachedEndpoint: invalidateCachedEndpoints,
		};

		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

	/***/ }),
	/* 46 */
	/***/ (function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.

		var formatRegExp = /%[sdj%]/g;
		exports.format = function(f) {
		  if (!isString(f)) {
		    var objects = [];
		    for (var i = 0; i < arguments.length; i++) {
		      objects.push(inspect(arguments[i]));
		    }
		    return objects.join(' ');
		  }

		  var i = 1;
		  var args = arguments;
		  var len = args.length;
		  var str = String(f).replace(formatRegExp, function(x) {
		    if (x === '%%') return '%';
		    if (i >= len) return x;
		    switch (x) {
		      case '%s': return String(args[i++]);
		      case '%d': return Number(args[i++]);
		      case '%j':
		        try {
		          return JSON.stringify(args[i++]);
		        } catch (_) {
		          return '[Circular]';
		        }
		      default:
		        return x;
		    }
		  });
		  for (var x = args[i]; i < len; x = args[++i]) {
		    if (isNull(x) || !isObject(x)) {
		      str += ' ' + x;
		    } else {
		      str += ' ' + inspect(x);
		    }
		  }
		  return str;
		};


		// Mark that a method should not be used.
		// Returns a modified function which warns once by default.
		// If --no-deprecation is set, then it is a no-op.
		exports.deprecate = function(fn, msg) {
		  // Allow for deprecating things in the process of starting up.
		  if (isUndefined(global.process)) {
		    return function() {
		      return exports.deprecate(fn, msg).apply(this, arguments);
		    };
		  }

		  if (process.noDeprecation === true) {
		    return fn;
		  }

		  var warned = false;
		  function deprecated() {
		    if (!warned) {
		      if (process.throwDeprecation) {
		        throw new Error(msg);
		      } else if (process.traceDeprecation) {
		        console.trace(msg);
		      } else {
		        console.error(msg);
		      }
		      warned = true;
		    }
		    return fn.apply(this, arguments);
		  }

		  return deprecated;
		};


		var debugs = {};
		var debugEnviron;
		exports.debuglog = function(set) {
		  if (isUndefined(debugEnviron))
		    debugEnviron = process.env.NODE_DEBUG || '';
		  set = set.toUpperCase();
		  if (!debugs[set]) {
		    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
		      var pid = process.pid;
		      debugs[set] = function() {
		        var msg = exports.format.apply(exports, arguments);
		        console.error('%s %d: %s', set, pid, msg);
		      };
		    } else {
		      debugs[set] = function() {};
		    }
		  }
		  return debugs[set];
		};


		/**
		 * Echos the value of a value. Trys to print the value out
		 * in the best way possible given the different types.
		 *
		 * @param {Object} obj The object to print out.
		 * @param {Object} opts Optional options object that alters the output.
		 */
		/* legacy: obj, showHidden, depth, colors*/
		function inspect(obj, opts) {
		  // default options
		  var ctx = {
		    seen: [],
		    stylize: stylizeNoColor
		  };
		  // legacy...
		  if (arguments.length >= 3) ctx.depth = arguments[2];
		  if (arguments.length >= 4) ctx.colors = arguments[3];
		  if (isBoolean(opts)) {
		    // legacy...
		    ctx.showHidden = opts;
		  } else if (opts) {
		    // got an "options" object
		    exports._extend(ctx, opts);
		  }
		  // set default options
		  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
		  if (isUndefined(ctx.depth)) ctx.depth = 2;
		  if (isUndefined(ctx.colors)) ctx.colors = false;
		  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
		  if (ctx.colors) ctx.stylize = stylizeWithColor;
		  return formatValue(ctx, obj, ctx.depth);
		}
		exports.inspect = inspect;


		// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
		inspect.colors = {
		  'bold' : [1, 22],
		  'italic' : [3, 23],
		  'underline' : [4, 24],
		  'inverse' : [7, 27],
		  'white' : [37, 39],
		  'grey' : [90, 39],
		  'black' : [30, 39],
		  'blue' : [34, 39],
		  'cyan' : [36, 39],
		  'green' : [32, 39],
		  'magenta' : [35, 39],
		  'red' : [31, 39],
		  'yellow' : [33, 39]
		};

		// Don't use 'blue' not visible on cmd.exe
		inspect.styles = {
		  'special': 'cyan',
		  'number': 'yellow',
		  'boolean': 'yellow',
		  'undefined': 'grey',
		  'null': 'bold',
		  'string': 'green',
		  'date': 'magenta',
		  // "name": intentionally not styling
		  'regexp': 'red'
		};


		function stylizeWithColor(str, styleType) {
		  var style = inspect.styles[styleType];

		  if (style) {
		    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
		           '\u001b[' + inspect.colors[style][1] + 'm';
		  } else {
		    return str;
		  }
		}


		function stylizeNoColor(str, styleType) {
		  return str;
		}


		function arrayToHash(array) {
		  var hash = {};

		  array.forEach(function(val, idx) {
		    hash[val] = true;
		  });

		  return hash;
		}


		function formatValue(ctx, value, recurseTimes) {
		  // Provide a hook for user-specified inspect functions.
		  // Check that value is an object with an inspect function on it
		  if (ctx.customInspect &&
		      value &&
		      isFunction(value.inspect) &&
		      // Filter out the util module, it's inspect function is special
		      value.inspect !== exports.inspect &&
		      // Also filter out any prototype objects using the circular check.
		      !(value.constructor && value.constructor.prototype === value)) {
		    var ret = value.inspect(recurseTimes, ctx);
		    if (!isString(ret)) {
		      ret = formatValue(ctx, ret, recurseTimes);
		    }
		    return ret;
		  }

		  // Primitive types cannot have properties
		  var primitive = formatPrimitive(ctx, value);
		  if (primitive) {
		    return primitive;
		  }

		  // Look up the keys of the object.
		  var keys = Object.keys(value);
		  var visibleKeys = arrayToHash(keys);

		  if (ctx.showHidden) {
		    keys = Object.getOwnPropertyNames(value);
		  }

		  // IE doesn't make error fields non-enumerable
		  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
		  if (isError(value)
		      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
		    return formatError(value);
		  }

		  // Some type of object without properties can be shortcutted.
		  if (keys.length === 0) {
		    if (isFunction(value)) {
		      var name = value.name ? ': ' + value.name : '';
		      return ctx.stylize('[Function' + name + ']', 'special');
		    }
		    if (isRegExp(value)) {
		      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
		    }
		    if (isDate(value)) {
		      return ctx.stylize(Date.prototype.toString.call(value), 'date');
		    }
		    if (isError(value)) {
		      return formatError(value);
		    }
		  }

		  var base = '', array = false, braces = ['{', '}'];

		  // Make Array say that they are Array
		  if (isArray(value)) {
		    array = true;
		    braces = ['[', ']'];
		  }

		  // Make functions say that they are functions
		  if (isFunction(value)) {
		    var n = value.name ? ': ' + value.name : '';
		    base = ' [Function' + n + ']';
		  }

		  // Make RegExps say that they are RegExps
		  if (isRegExp(value)) {
		    base = ' ' + RegExp.prototype.toString.call(value);
		  }

		  // Make dates with properties first say the date
		  if (isDate(value)) {
		    base = ' ' + Date.prototype.toUTCString.call(value);
		  }

		  // Make error with message first say the error
		  if (isError(value)) {
		    base = ' ' + formatError(value);
		  }

		  if (keys.length === 0 && (!array || value.length == 0)) {
		    return braces[0] + base + braces[1];
		  }

		  if (recurseTimes < 0) {
		    if (isRegExp(value)) {
		      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
		    } else {
		      return ctx.stylize('[Object]', 'special');
		    }
		  }

		  ctx.seen.push(value);

		  var output;
		  if (array) {
		    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
		  } else {
		    output = keys.map(function(key) {
		      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
		    });
		  }

		  ctx.seen.pop();

		  return reduceToSingleString(output, base, braces);
		}


		function formatPrimitive(ctx, value) {
		  if (isUndefined(value))
		    return ctx.stylize('undefined', 'undefined');
		  if (isString(value)) {
		    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
		                                             .replace(/'/g, "\\'")
		                                             .replace(/\\"/g, '"') + '\'';
		    return ctx.stylize(simple, 'string');
		  }
		  if (isNumber(value))
		    return ctx.stylize('' + value, 'number');
		  if (isBoolean(value))
		    return ctx.stylize('' + value, 'boolean');
		  // For some reason typeof null is "object", so special case here.
		  if (isNull(value))
		    return ctx.stylize('null', 'null');
		}


		function formatError(value) {
		  return '[' + Error.prototype.toString.call(value) + ']';
		}


		function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
		  var output = [];
		  for (var i = 0, l = value.length; i < l; ++i) {
		    if (hasOwnProperty(value, String(i))) {
		      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
		          String(i), true));
		    } else {
		      output.push('');
		    }
		  }
		  keys.forEach(function(key) {
		    if (!key.match(/^\d+$/)) {
		      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
		          key, true));
		    }
		  });
		  return output;
		}


		function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
		  var name, str, desc;
		  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
		  if (desc.get) {
		    if (desc.set) {
		      str = ctx.stylize('[Getter/Setter]', 'special');
		    } else {
		      str = ctx.stylize('[Getter]', 'special');
		    }
		  } else {
		    if (desc.set) {
		      str = ctx.stylize('[Setter]', 'special');
		    }
		  }
		  if (!hasOwnProperty(visibleKeys, key)) {
		    name = '[' + key + ']';
		  }
		  if (!str) {
		    if (ctx.seen.indexOf(desc.value) < 0) {
		      if (isNull(recurseTimes)) {
		        str = formatValue(ctx, desc.value, null);
		      } else {
		        str = formatValue(ctx, desc.value, recurseTimes - 1);
		      }
		      if (str.indexOf('\n') > -1) {
		        if (array) {
		          str = str.split('\n').map(function(line) {
		            return '  ' + line;
		          }).join('\n').substr(2);
		        } else {
		          str = '\n' + str.split('\n').map(function(line) {
		            return '   ' + line;
		          }).join('\n');
		        }
		      }
		    } else {
		      str = ctx.stylize('[Circular]', 'special');
		    }
		  }
		  if (isUndefined(name)) {
		    if (array && key.match(/^\d+$/)) {
		      return str;
		    }
		    name = JSON.stringify('' + key);
		    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
		      name = name.substr(1, name.length - 2);
		      name = ctx.stylize(name, 'name');
		    } else {
		      name = name.replace(/'/g, "\\'")
		                 .replace(/\\"/g, '"')
		                 .replace(/(^"|"$)/g, "'");
		      name = ctx.stylize(name, 'string');
		    }
		  }

		  return name + ': ' + str;
		}


		function reduceToSingleString(output, base, braces) {
		  var numLinesEst = 0;
		  var length = output.reduce(function(prev, cur) {
		    numLinesEst++;
		    if (cur.indexOf('\n') >= 0) numLinesEst++;
		    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
		  }, 0);

		  if (length > 60) {
		    return braces[0] +
		           (base === '' ? '' : base + '\n ') +
		           ' ' +
		           output.join(',\n  ') +
		           ' ' +
		           braces[1];
		  }

		  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
		}


		// NOTE: These type checking functions intentionally don't use `instanceof`
		// because it is fragile and can be easily faked with `Object.create()`.
		function isArray(ar) {
		  return Array.isArray(ar);
		}
		exports.isArray = isArray;

		function isBoolean(arg) {
		  return typeof arg === 'boolean';
		}
		exports.isBoolean = isBoolean;

		function isNull(arg) {
		  return arg === null;
		}
		exports.isNull = isNull;

		function isNullOrUndefined(arg) {
		  return arg == null;
		}
		exports.isNullOrUndefined = isNullOrUndefined;

		function isNumber(arg) {
		  return typeof arg === 'number';
		}
		exports.isNumber = isNumber;

		function isString(arg) {
		  return typeof arg === 'string';
		}
		exports.isString = isString;

		function isSymbol(arg) {
		  return typeof arg === 'symbol';
		}
		exports.isSymbol = isSymbol;

		function isUndefined(arg) {
		  return arg === void 0;
		}
		exports.isUndefined = isUndefined;

		function isRegExp(re) {
		  return isObject(re) && objectToString(re) === '[object RegExp]';
		}
		exports.isRegExp = isRegExp;

		function isObject(arg) {
		  return typeof arg === 'object' && arg !== null;
		}
		exports.isObject = isObject;

		function isDate(d) {
		  return isObject(d) && objectToString(d) === '[object Date]';
		}
		exports.isDate = isDate;

		function isError(e) {
		  return isObject(e) &&
		      (objectToString(e) === '[object Error]' || e instanceof Error);
		}
		exports.isError = isError;

		function isFunction(arg) {
		  return typeof arg === 'function';
		}
		exports.isFunction = isFunction;

		function isPrimitive(arg) {
		  return arg === null ||
		         typeof arg === 'boolean' ||
		         typeof arg === 'number' ||
		         typeof arg === 'string' ||
		         typeof arg === 'symbol' ||  // ES6 symbol
		         typeof arg === 'undefined';
		}
		exports.isPrimitive = isPrimitive;

		exports.isBuffer = __webpack_require__(47);

		function objectToString(o) {
		  return Object.prototype.toString.call(o);
		}


		function pad(n) {
		  return n < 10 ? '0' + n.toString(10) : n.toString(10);
		}


		var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
		              'Oct', 'Nov', 'Dec'];

		// 26 Feb 16:19:34
		function timestamp() {
		  var d = new Date();
		  var time = [pad(d.getHours()),
		              pad(d.getMinutes()),
		              pad(d.getSeconds())].join(':');
		  return [d.getDate(), months[d.getMonth()], time].join(' ');
		}


		// log is just a thin wrapper to console.log that prepends a timestamp
		exports.log = function() {
		  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
		};


		/**
		 * Inherit the prototype methods from one constructor into another.
		 *
		 * The Function.prototype.inherits from lang.js rewritten as a standalone
		 * function (not on Function.prototype). NOTE: If this file is to be loaded
		 * during bootstrapping this function needs to be rewritten using some native
		 * functions as prototype setup using normal JavaScript does not work as
		 * expected during bootstrapping (see mirror.js in r114903).
		 *
		 * @param {function} ctor Constructor function which needs to inherit the
		 *     prototype.
		 * @param {function} superCtor Constructor function to inherit prototype from.
		 */
		exports.inherits = __webpack_require__(48);

		exports._extend = function(origin, add) {
		  // Don't do anything if add isn't an object
		  if (!add || !isObject(add)) return origin;

		  var keys = Object.keys(add);
		  var i = keys.length;
		  while (i--) {
		    origin[keys[i]] = add[keys[i]];
		  }
		  return origin;
		};

		function hasOwnProperty(obj, prop) {
		  return Object.prototype.hasOwnProperty.call(obj, prop);
		}

		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(3)))

	/***/ }),
	/* 47 */
	/***/ (function(module, exports) {

		module.exports = function isBuffer(arg) {
		  return arg && typeof arg === 'object'
		    && typeof arg.copy === 'function'
		    && typeof arg.fill === 'function'
		    && typeof arg.readUInt8 === 'function';
		}

	/***/ }),
	/* 48 */
	/***/ (function(module, exports) {

		if (typeof Object.create === 'function') {
		  // implementation from standard node.js 'util' module
		  module.exports = function inherits(ctor, superCtor) {
		    ctor.super_ = superCtor
		    ctor.prototype = Object.create(superCtor.prototype, {
		      constructor: {
		        value: ctor,
		        enumerable: false,
		        writable: true,
		        configurable: true
		      }
		    });
		  };
		} else {
		  // old school shim for old browsers
		  module.exports = function inherits(ctor, superCtor) {
		    ctor.super_ = superCtor
		    var TempCtor = function () {}
		    TempCtor.prototype = superCtor.prototype
		    ctor.prototype = new TempCtor()
		    ctor.prototype.constructor = ctor
		  }
		}


	/***/ }),
	/* 49 */
	/***/ (function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {var AWS = __webpack_require__(1);
		var AcceptorStateMachine = __webpack_require__(50);
		var inherit = AWS.util.inherit;
		var domain = AWS.util.domain;
		var jmespath = __webpack_require__(51);

		/**
		 * @api private
		 */
		var hardErrorStates = {success: 1, error: 1, complete: 1};

		function isTerminalState(machine) {
		  return Object.prototype.hasOwnProperty.call(hardErrorStates, machine._asm.currentState);
		}

		var fsm = new AcceptorStateMachine();
		fsm.setupStates = function() {
		  var transition = function(_, done) {
		    var self = this;
		    self._haltHandlersOnError = false;

		    self.emit(self._asm.currentState, function(err) {
		      if (err) {
		        if (isTerminalState(self)) {
		          if (domain && self.domain instanceof domain.Domain) {
		            err.domainEmitter = self;
		            err.domain = self.domain;
		            err.domainThrown = false;
		            self.domain.emit('error', err);
		          } else {
		            throw err;
		          }
		        } else {
		          self.response.error = err;
		          done(err);
		        }
		      } else {
		        done(self.response.error);
		      }
		    });

		  };

		  this.addState('validate', 'build', 'error', transition);
		  this.addState('build', 'afterBuild', 'restart', transition);
		  this.addState('afterBuild', 'sign', 'restart', transition);
		  this.addState('sign', 'send', 'retry', transition);
		  this.addState('retry', 'afterRetry', 'afterRetry', transition);
		  this.addState('afterRetry', 'sign', 'error', transition);
		  this.addState('send', 'validateResponse', 'retry', transition);
		  this.addState('validateResponse', 'extractData', 'extractError', transition);
		  this.addState('extractError', 'extractData', 'retry', transition);
		  this.addState('extractData', 'success', 'retry', transition);
		  this.addState('restart', 'build', 'error', transition);
		  this.addState('success', 'complete', 'complete', transition);
		  this.addState('error', 'complete', 'complete', transition);
		  this.addState('complete', null, null, transition);
		};
		fsm.setupStates();

		/**
		 * ## Asynchronous Requests
		 *
		 * All requests made through the SDK are asynchronous and use a
		 * callback interface. Each service method that kicks off a request
		 * returns an `AWS.Request` object that you can use to register
		 * callbacks.
		 *
		 * For example, the following service method returns the request
		 * object as "request", which can be used to register callbacks:
		 *
		 * ```javascript
		 * // request is an AWS.Request object
		 * var request = ec2.describeInstances();
		 *
		 * // register callbacks on request to retrieve response data
		 * request.on('success', function(response) {
		 *   console.log(response.data);
		 * });
		 * ```
		 *
		 * When a request is ready to be sent, the {send} method should
		 * be called:
		 *
		 * ```javascript
		 * request.send();
		 * ```
		 *
		 * Since registered callbacks may or may not be idempotent, requests should only
		 * be sent once. To perform the same operation multiple times, you will need to
		 * create multiple request objects, each with its own registered callbacks.
		 *
		 * ## Removing Default Listeners for Events
		 *
		 * Request objects are built with default listeners for the various events,
		 * depending on the service type. In some cases, you may want to remove
		 * some built-in listeners to customize behaviour. Doing this requires
		 * access to the built-in listener functions, which are exposed through
		 * the {AWS.EventListeners.Core} namespace. For instance, you may
		 * want to customize the HTTP handler used when sending a request. In this
		 * case, you can remove the built-in listener associated with the 'send'
		 * event, the {AWS.EventListeners.Core.SEND} listener and add your own.
		 *
		 * ## Multiple Callbacks and Chaining
		 *
		 * You can register multiple callbacks on any request object. The
		 * callbacks can be registered for different events, or all for the
		 * same event. In addition, you can chain callback registration, for
		 * example:
		 *
		 * ```javascript
		 * request.
		 *   on('success', function(response) {
		 *     console.log("Success!");
		 *   }).
		 *   on('error', function(error, response) {
		 *     console.log("Error!");
		 *   }).
		 *   on('complete', function(response) {
		 *     console.log("Always!");
		 *   }).
		 *   send();
		 * ```
		 *
		 * The above example will print either "Success! Always!", or "Error! Always!",
		 * depending on whether the request succeeded or not.
		 *
		 * @!attribute httpRequest
		 *   @readonly
		 *   @!group HTTP Properties
		 *   @return [AWS.HttpRequest] the raw HTTP request object
		 *     containing request headers and body information
		 *     sent by the service.
		 *
		 * @!attribute startTime
		 *   @readonly
		 *   @!group Operation Properties
		 *   @return [Date] the time that the request started
		 *
		 * @!group Request Building Events
		 *
		 * @!event validate(request)
		 *   Triggered when a request is being validated. Listeners
		 *   should throw an error if the request should not be sent.
		 *   @param request [Request] the request object being sent
		 *   @see AWS.EventListeners.Core.VALIDATE_CREDENTIALS
		 *   @see AWS.EventListeners.Core.VALIDATE_REGION
		 *   @example Ensuring that a certain parameter is set before sending a request
		 *     var req = s3.putObject(params);
		 *     req.on('validate', function() {
		 *       if (!req.params.Body.match(/^Hello\s/)) {
		 *         throw new Error('Body must start with "Hello "');
		 *       }
		 *     });
		 *     req.send(function(err, data) { ... });
		 *
		 * @!event build(request)
		 *   Triggered when the request payload is being built. Listeners
		 *   should fill the necessary information to send the request
		 *   over HTTP.
		 *   @param (see AWS.Request~validate)
		 *   @example Add a custom HTTP header to a request
		 *     var req = s3.putObject(params);
		 *     req.on('build', function() {
		 *       req.httpRequest.headers['Custom-Header'] = 'value';
		 *     });
		 *     req.send(function(err, data) { ... });
		 *
		 * @!event sign(request)
		 *   Triggered when the request is being signed. Listeners should
		 *   add the correct authentication headers and/or adjust the body,
		 *   depending on the authentication mechanism being used.
		 *   @param (see AWS.Request~validate)
		 *
		 * @!group Request Sending Events
		 *
		 * @!event send(response)
		 *   Triggered when the request is ready to be sent. Listeners
		 *   should call the underlying transport layer to initiate
		 *   the sending of the request.
		 *   @param response [Response] the response object
		 *   @context [Request] the request object that was sent
		 *   @see AWS.EventListeners.Core.SEND
		 *
		 * @!event retry(response)
		 *   Triggered when a request failed and might need to be retried or redirected.
		 *   If the response is retryable, the listener should set the
		 *   `response.error.retryable` property to `true`, and optionally set
		 *   `response.error.retryDelay` to the millisecond delay for the next attempt.
		 *   In the case of a redirect, `response.error.redirect` should be set to
		 *   `true` with `retryDelay` set to an optional delay on the next request.
		 *
		 *   If a listener decides that a request should not be retried,
		 *   it should set both `retryable` and `redirect` to false.
		 *
		 *   Note that a retryable error will be retried at most
		 *   {AWS.Config.maxRetries} times (based on the service object's config).
		 *   Similarly, a request that is redirected will only redirect at most
		 *   {AWS.Config.maxRedirects} times.
		 *
		 *   @param (see AWS.Request~send)
		 *   @context (see AWS.Request~send)
		 *   @example Adding a custom retry for a 404 response
		 *     request.on('retry', function(response) {
		 *       // this resource is not yet available, wait 10 seconds to get it again
		 *       if (response.httpResponse.statusCode === 404 && response.error) {
		 *         response.error.retryable = true;   // retry this error
		 *         response.error.retryDelay = 10000; // wait 10 seconds
		 *       }
		 *     });
		 *
		 * @!group Data Parsing Events
		 *
		 * @!event extractError(response)
		 *   Triggered on all non-2xx requests so that listeners can extract
		 *   error details from the response body. Listeners to this event
		 *   should set the `response.error` property.
		 *   @param (see AWS.Request~send)
		 *   @context (see AWS.Request~send)
		 *
		 * @!event extractData(response)
		 *   Triggered in successful requests to allow listeners to
		 *   de-serialize the response body into `response.data`.
		 *   @param (see AWS.Request~send)
		 *   @context (see AWS.Request~send)
		 *
		 * @!group Completion Events
		 *
		 * @!event success(response)
		 *   Triggered when the request completed successfully.
		 *   `response.data` will contain the response data and
		 *   `response.error` will be null.
		 *   @param (see AWS.Request~send)
		 *   @context (see AWS.Request~send)
		 *
		 * @!event error(error, response)
		 *   Triggered when an error occurs at any point during the
		 *   request. `response.error` will contain details about the error
		 *   that occurred. `response.data` will be null.
		 *   @param error [Error] the error object containing details about
		 *     the error that occurred.
		 *   @param (see AWS.Request~send)
		 *   @context (see AWS.Request~send)
		 *
		 * @!event complete(response)
		 *   Triggered whenever a request cycle completes. `response.error`
		 *   should be checked, since the request may have failed.
		 *   @param (see AWS.Request~send)
		 *   @context (see AWS.Request~send)
		 *
		 * @!group HTTP Events
		 *
		 * @!event httpHeaders(statusCode, headers, response, statusMessage)
		 *   Triggered when headers are sent by the remote server
		 *   @param statusCode [Integer] the HTTP response code
		 *   @param headers [map<String,String>] the response headers
		 *   @param (see AWS.Request~send)
		 *   @param statusMessage [String] A status message corresponding to the HTTP
		 *                                 response code
		 *   @context (see AWS.Request~send)
		 *
		 * @!event httpData(chunk, response)
		 *   Triggered when data is sent by the remote server
		 *   @param chunk [Buffer] the buffer data containing the next data chunk
		 *     from the server
		 *   @param (see AWS.Request~send)
		 *   @context (see AWS.Request~send)
		 *   @see AWS.EventListeners.Core.HTTP_DATA
		 *
		 * @!event httpUploadProgress(progress, response)
		 *   Triggered when the HTTP request has uploaded more data
		 *   @param progress [map] An object containing the `loaded` and `total` bytes
		 *     of the request.
		 *   @param (see AWS.Request~send)
		 *   @context (see AWS.Request~send)
		 *   @note This event will not be emitted in Node.js 0.8.x.
		 *
		 * @!event httpDownloadProgress(progress, response)
		 *   Triggered when the HTTP request has downloaded more data
		 *   @param progress [map] An object containing the `loaded` and `total` bytes
		 *     of the request.
		 *   @param (see AWS.Request~send)
		 *   @context (see AWS.Request~send)
		 *   @note This event will not be emitted in Node.js 0.8.x.
		 *
		 * @!event httpError(error, response)
		 *   Triggered when the HTTP request failed
		 *   @param error [Error] the error object that was thrown
		 *   @param (see AWS.Request~send)
		 *   @context (see AWS.Request~send)
		 *
		 * @!event httpDone(response)
		 *   Triggered when the server is finished sending data
		 *   @param (see AWS.Request~send)
		 *   @context (see AWS.Request~send)
		 *
		 * @see AWS.Response
		 */
		AWS.Request = inherit({

		  /**
		   * Creates a request for an operation on a given service with
		   * a set of input parameters.
		   *
		   * @param service [AWS.Service] the service to perform the operation on
		   * @param operation [String] the operation to perform on the service
		   * @param params [Object] parameters to send to the operation.
		   *   See the operation's documentation for the format of the
		   *   parameters.
		   */
		  constructor: function Request(service, operation, params) {
		    var endpoint = service.endpoint;
		    var region = service.config.region;
		    var customUserAgent = service.config.customUserAgent;

		    if (service.isGlobalEndpoint) {
		      if (service.signingRegion) {
		        region = service.signingRegion;
		      } else {
		        region = 'us-east-1';
		      }
		    }

		    this.domain = domain && domain.active;
		    this.service = service;
		    this.operation = operation;
		    this.params = params || {};
		    this.httpRequest = new AWS.HttpRequest(endpoint, region);
		    this.httpRequest.appendToUserAgent(customUserAgent);
		    this.startTime = service.getSkewCorrectedDate();

		    this.response = new AWS.Response(this);
		    this._asm = new AcceptorStateMachine(fsm.states, 'validate');
		    this._haltHandlersOnError = false;

		    AWS.SequentialExecutor.call(this);
		    this.emit = this.emitEvent;
		  },

		  /**
		   * @!group Sending a Request
		   */

		  /**
		   * @overload send(callback = null)
		   *   Sends the request object.
		   *
		   *   @callback callback function(err, data)
		   *     If a callback is supplied, it is called when a response is returned
		   *     from the service.
		   *     @context [AWS.Request] the request object being sent.
		   *     @param err [Error] the error object returned from the request.
		   *       Set to `null` if the request is successful.
		   *     @param data [Object] the de-serialized data returned from
		   *       the request. Set to `null` if a request error occurs.
		   *   @example Sending a request with a callback
		   *     request = s3.putObject({Bucket: 'bucket', Key: 'key'});
		   *     request.send(function(err, data) { console.log(err, data); });
		   *   @example Sending a request with no callback (using event handlers)
		   *     request = s3.putObject({Bucket: 'bucket', Key: 'key'});
		   *     request.on('complete', function(response) { ... }); // register a callback
		   *     request.send();
		   */
		  send: function send(callback) {
		    if (callback) {
		      // append to user agent
		      this.httpRequest.appendToUserAgent('callback');
		      this.on('complete', function (resp) {
		        callback.call(resp, resp.error, resp.data);
		      });
		    }
		    this.runTo();

		    return this.response;
		  },

		  /**
		   * @!method  promise()
		   *   Sends the request and returns a 'thenable' promise.
		   *
		   *   Two callbacks can be provided to the `then` method on the returned promise.
		   *   The first callback will be called if the promise is fulfilled, and the second
		   *   callback will be called if the promise is rejected.
		   *   @callback fulfilledCallback function(data)
		   *     Called if the promise is fulfilled.
		   *     @param data [Object] the de-serialized data returned from the request.
		   *   @callback rejectedCallback function(error)
		   *     Called if the promise is rejected.
		   *     @param error [Error] the error object returned from the request.
		   *   @return [Promise] A promise that represents the state of the request.
		   *   @example Sending a request using promises.
		   *     var request = s3.putObject({Bucket: 'bucket', Key: 'key'});
		   *     var result = request.promise();
		   *     result.then(function(data) { ... }, function(error) { ... });
		   */

		  /**
		   * @api private
		   */
		  build: function build(callback) {
		    return this.runTo('send', callback);
		  },

		  /**
		   * @api private
		   */
		  runTo: function runTo(state, done) {
		    this._asm.runTo(state, done, this);
		    return this;
		  },

		  /**
		   * Aborts a request, emitting the error and complete events.
		   *
		   * @!macro nobrowser
		   * @example Aborting a request after sending
		   *   var params = {
		   *     Bucket: 'bucket', Key: 'key',
		   *     Body: Buffer.alloc(1024 * 1024 * 5) // 5MB payload
		   *   };
		   *   var request = s3.putObject(params);
		   *   request.send(function (err, data) {
		   *     if (err) console.log("Error:", err.code, err.message);
		   *     else console.log(data);
		   *   });
		   *
		   *   // abort request in 1 second
		   *   setTimeout(request.abort.bind(request), 1000);
		   *
		   *   // prints "Error: RequestAbortedError Request aborted by user"
		   * @return [AWS.Request] the same request object, for chaining.
		   * @since v1.4.0
		   */
		  abort: function abort() {
		    this.removeAllListeners('validateResponse');
		    this.removeAllListeners('extractError');
		    this.on('validateResponse', function addAbortedError(resp) {
		      resp.error = AWS.util.error(new Error('Request aborted by user'), {
		         code: 'RequestAbortedError', retryable: false
		      });
		    });

		    if (this.httpRequest.stream && !this.httpRequest.stream.didCallback) { // abort HTTP stream
		      this.httpRequest.stream.abort();
		      if (this.httpRequest._abortCallback) {
		         this.httpRequest._abortCallback();
		      } else {
		        this.removeAllListeners('send'); // haven't sent yet, so let's not
		      }
		    }

		    return this;
		  },

		  /**
		   * Iterates over each page of results given a pageable request, calling
		   * the provided callback with each page of data. After all pages have been
		   * retrieved, the callback is called with `null` data.
		   *
		   * @note This operation can generate multiple requests to a service.
		   * @example Iterating over multiple pages of objects in an S3 bucket
		   *   var pages = 1;
		   *   s3.listObjects().eachPage(function(err, data) {
		   *     if (err) return;
		   *     console.log("Page", pages++);
		   *     console.log(data);
		   *   });
		   * @example Iterating over multiple pages with an asynchronous callback
		   *   s3.listObjects(params).eachPage(function(err, data, done) {
		   *     doSomethingAsyncAndOrExpensive(function() {
		   *       // The next page of results isn't fetched until done is called
		   *       done();
		   *     });
		   *   });
		   * @callback callback function(err, data, [doneCallback])
		   *   Called with each page of resulting data from the request. If the
		   *   optional `doneCallback` is provided in the function, it must be called
		   *   when the callback is complete.
		   *
		   *   @param err [Error] an error object, if an error occurred.
		   *   @param data [Object] a single page of response data. If there is no
		   *     more data, this object will be `null`.
		   *   @param doneCallback [Function] an optional done callback. If this
		   *     argument is defined in the function declaration, it should be called
		   *     when the next page is ready to be retrieved. This is useful for
		   *     controlling serial pagination across asynchronous operations.
		   *   @return [Boolean] if the callback returns `false`, pagination will
		   *     stop.
		   *
		   * @see AWS.Request.eachItem
		   * @see AWS.Response.nextPage
		   * @since v1.4.0
		   */
		  eachPage: function eachPage(callback) {
		    // Make all callbacks async-ish
		    callback = AWS.util.fn.makeAsync(callback, 3);

		    function wrappedCallback(response) {
		      callback.call(response, response.error, response.data, function (result) {
		        if (result === false) return;

		        if (response.hasNextPage()) {
		          response.nextPage().on('complete', wrappedCallback).send();
		        } else {
		          callback.call(response, null, null, AWS.util.fn.noop);
		        }
		      });
		    }

		    this.on('complete', wrappedCallback).send();
		  },

		  /**
		   * Enumerates over individual items of a request, paging the responses if
		   * necessary.
		   *
		   * @api experimental
		   * @since v1.4.0
		   */
		  eachItem: function eachItem(callback) {
		    var self = this;
		    function wrappedCallback(err, data) {
		      if (err) return callback(err, null);
		      if (data === null) return callback(null, null);

		      var config = self.service.paginationConfig(self.operation);
		      var resultKey = config.resultKey;
		      if (Array.isArray(resultKey)) resultKey = resultKey[0];
		      var items = jmespath.search(data, resultKey);
		      var continueIteration = true;
		      AWS.util.arrayEach(items, function(item) {
		        continueIteration = callback(null, item);
		        if (continueIteration === false) {
		          return AWS.util.abort;
		        }
		      });
		      return continueIteration;
		    }

		    this.eachPage(wrappedCallback);
		  },

		  /**
		   * @return [Boolean] whether the operation can return multiple pages of
		   *   response data.
		   * @see AWS.Response.eachPage
		   * @since v1.4.0
		   */
		  isPageable: function isPageable() {
		    return this.service.paginationConfig(this.operation) ? true : false;
		  },

		  /**
		   * Sends the request and converts the request object into a readable stream
		   * that can be read from or piped into a writable stream.
		   *
		   * @note The data read from a readable stream contains only
		   *   the raw HTTP body contents.
		   * @example Manually reading from a stream
		   *   request.createReadStream().on('data', function(data) {
		   *     console.log("Got data:", data.toString());
		   *   });
		   * @example Piping a request body into a file
		   *   var out = fs.createWriteStream('/path/to/outfile.jpg');
		   *   s3.service.getObject(params).createReadStream().pipe(out);
		   * @return [Stream] the readable stream object that can be piped
		   *   or read from (by registering 'data' event listeners).
		   * @!macro nobrowser
		   */
		  createReadStream: function createReadStream() {
		    var streams = AWS.util.stream;
		    var req = this;
		    var stream = null;

		    if (AWS.HttpClient.streamsApiVersion === 2) {
		      stream = new streams.PassThrough();
		      process.nextTick(function() { req.send(); });
		    } else {
		      stream = new streams.Stream();
		      stream.readable = true;

		      stream.sent = false;
		      stream.on('newListener', function(event) {
		        if (!stream.sent && event === 'data') {
		          stream.sent = true;
		          process.nextTick(function() { req.send(); });
		        }
		      });
		    }

		    this.on('error', function(err) {
		      stream.emit('error', err);
		    });

		    this.on('httpHeaders', function streamHeaders(statusCode, headers, resp) {
		      if (statusCode < 300) {
		        req.removeListener('httpData', AWS.EventListeners.Core.HTTP_DATA);
		        req.removeListener('httpError', AWS.EventListeners.Core.HTTP_ERROR);
		        req.on('httpError', function streamHttpError(error) {
		          resp.error = error;
		          resp.error.retryable = false;
		        });

		        var shouldCheckContentLength = false;
		        var expectedLen;
		        if (req.httpRequest.method !== 'HEAD') {
		          expectedLen = parseInt(headers['content-length'], 10);
		        }
		        if (expectedLen !== undefined && !isNaN(expectedLen) && expectedLen >= 0) {
		          shouldCheckContentLength = true;
		          var receivedLen = 0;
		        }

		        var checkContentLengthAndEmit = function checkContentLengthAndEmit() {
		          if (shouldCheckContentLength && receivedLen !== expectedLen) {
		            stream.emit('error', AWS.util.error(
		              new Error('Stream content length mismatch. Received ' +
		                receivedLen + ' of ' + expectedLen + ' bytes.'),
		              { code: 'StreamContentLengthMismatch' }
		            ));
		          } else if (AWS.HttpClient.streamsApiVersion === 2) {
		            stream.end();
		          } else {
		            stream.emit('end');
		          }
		        };

		        var httpStream = resp.httpResponse.createUnbufferedStream();

		        if (AWS.HttpClient.streamsApiVersion === 2) {
		          if (shouldCheckContentLength) {
		            var lengthAccumulator = new streams.PassThrough();
		            lengthAccumulator._write = function(chunk) {
		              if (chunk && chunk.length) {
		                receivedLen += chunk.length;
		              }
		              return streams.PassThrough.prototype._write.apply(this, arguments);
		            };

		            lengthAccumulator.on('end', checkContentLengthAndEmit);
		            stream.on('error', function(err) {
		              shouldCheckContentLength = false;
		              httpStream.unpipe(lengthAccumulator);
		              lengthAccumulator.emit('end');
		              lengthAccumulator.end();
		            });
		            httpStream.pipe(lengthAccumulator).pipe(stream, { end: false });
		          } else {
		            httpStream.pipe(stream);
		          }
		        } else {

		          if (shouldCheckContentLength) {
		            httpStream.on('data', function(arg) {
		              if (arg && arg.length) {
		                receivedLen += arg.length;
		              }
		            });
		          }

		          httpStream.on('data', function(arg) {
		            stream.emit('data', arg);
		          });
		          httpStream.on('end', checkContentLengthAndEmit);
		        }

		        httpStream.on('error', function(err) {
		          shouldCheckContentLength = false;
		          stream.emit('error', err);
		        });
		      }
		    });

		    return stream;
		  },

		  /**
		   * @param [Array,Response] args This should be the response object,
		   *   or an array of args to send to the event.
		   * @api private
		   */
		  emitEvent: function emit(eventName, args, done) {
		    if (typeof args === 'function') { done = args; args = null; }
		    if (!done) done = function() { };
		    if (!args) args = this.eventParameters(eventName, this.response);

		    var origEmit = AWS.SequentialExecutor.prototype.emit;
		    origEmit.call(this, eventName, args, function (err) {
		      if (err) this.response.error = err;
		      done.call(this, err);
		    });
		  },

		  /**
		   * @api private
		   */
		  eventParameters: function eventParameters(eventName) {
		    switch (eventName) {
		      case 'restart':
		      case 'validate':
		      case 'sign':
		      case 'build':
		      case 'afterValidate':
		      case 'afterBuild':
		        return [this];
		      case 'error':
		        return [this.response.error, this.response];
		      default:
		        return [this.response];
		    }
		  },

		  /**
		   * @api private
		   */
		  presign: function presign(expires, callback) {
		    if (!callback && typeof expires === 'function') {
		      callback = expires;
		      expires = null;
		    }
		    return new AWS.Signers.Presign().sign(this.toGet(), expires, callback);
		  },

		  /**
		   * @api private
		   */
		  isPresigned: function isPresigned() {
		    return Object.prototype.hasOwnProperty.call(this.httpRequest.headers, 'presigned-expires');
		  },

		  /**
		   * @api private
		   */
		  toUnauthenticated: function toUnauthenticated() {
		    this._unAuthenticated = true;
		    this.removeListener('validate', AWS.EventListeners.Core.VALIDATE_CREDENTIALS);
		    this.removeListener('sign', AWS.EventListeners.Core.SIGN);
		    return this;
		  },

		  /**
		   * @api private
		   */
		  toGet: function toGet() {
		    if (this.service.api.protocol === 'query' ||
		        this.service.api.protocol === 'ec2') {
		      this.removeListener('build', this.buildAsGet);
		      this.addListener('build', this.buildAsGet);
		    }
		    return this;
		  },

		  /**
		   * @api private
		   */
		  buildAsGet: function buildAsGet(request) {
		    request.httpRequest.method = 'GET';
		    request.httpRequest.path = request.service.endpoint.path +
		                               '?' + request.httpRequest.body;
		    request.httpRequest.body = '';

		    // don't need these headers on a GET request
		    delete request.httpRequest.headers['Content-Length'];
		    delete request.httpRequest.headers['Content-Type'];
		  },

		  /**
		   * @api private
		   */
		  haltHandlersOnError: function haltHandlersOnError() {
		    this._haltHandlersOnError = true;
		  }
		});

		/**
		 * @api private
		 */
		AWS.Request.addPromisesToClass = function addPromisesToClass(PromiseDependency) {
		  this.prototype.promise = function promise() {
		    var self = this;
		    // append to user agent
		    this.httpRequest.appendToUserAgent('promise');
		    return new PromiseDependency(function(resolve, reject) {
		      self.on('complete', function(resp) {
		        if (resp.error) {
		          reject(resp.error);
		        } else {
		          // define $response property so that it is not enumerable
		          // this prevents circular reference errors when stringifying the JSON object
		          resolve(Object.defineProperty(
		            resp.data || {},
		            '$response',
		            {value: resp}
		          ));
		        }
		      });
		      self.runTo();
		    });
		  };
		};

		/**
		 * @api private
		 */
		AWS.Request.deletePromisesFromClass = function deletePromisesFromClass() {
		  delete this.prototype.promise;
		};

		AWS.util.addPromises(AWS.Request);

		AWS.util.mixin(AWS.Request, AWS.SequentialExecutor);

		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

	/***/ }),
	/* 50 */
	/***/ (function(module, exports) {

		function AcceptorStateMachine(states, state) {
		  this.currentState = state || null;
		  this.states = states || {};
		}

		AcceptorStateMachine.prototype.runTo = function runTo(finalState, done, bindObject, inputError) {
		  if (typeof finalState === 'function') {
		    inputError = bindObject; bindObject = done;
		    done = finalState; finalState = null;
		  }

		  var self = this;
		  var state = self.states[self.currentState];
		  state.fn.call(bindObject || self, inputError, function(err) {
		    if (err) {
		      if (state.fail) self.currentState = state.fail;
		      else return done ? done.call(bindObject, err) : null;
		    } else {
		      if (state.accept) self.currentState = state.accept;
		      else return done ? done.call(bindObject) : null;
		    }
		    if (self.currentState === finalState) {
		      return done ? done.call(bindObject, err) : null;
		    }

		    self.runTo(finalState, done, bindObject, err);
		  });
		};

		AcceptorStateMachine.prototype.addState = function addState(name, acceptState, failState, fn) {
		  if (typeof acceptState === 'function') {
		    fn = acceptState; acceptState = null; failState = null;
		  } else if (typeof failState === 'function') {
		    fn = failState; failState = null;
		  }

		  if (!this.currentState) this.currentState = name;
		  this.states[name] = { accept: acceptState, fail: failState, fn: fn };
		  return this;
		};

		/**
		 * @api private
		 */
		module.exports = AcceptorStateMachine;


	/***/ }),
	/* 51 */
	/***/ (function(module, exports, __webpack_require__) {

		(function(exports) {
		  "use strict";

		  function isArray(obj) {
		    if (obj !== null) {
		      return Object.prototype.toString.call(obj) === "[object Array]";
		    } else {
		      return false;
		    }
		  }

		  function isObject(obj) {
		    if (obj !== null) {
		      return Object.prototype.toString.call(obj) === "[object Object]";
		    } else {
		      return false;
		    }
		  }

		  function strictDeepEqual(first, second) {
		    // Check the scalar case first.
		    if (first === second) {
		      return true;
		    }

		    // Check if they are the same type.
		    var firstType = Object.prototype.toString.call(first);
		    if (firstType !== Object.prototype.toString.call(second)) {
		      return false;
		    }
		    // We know that first and second have the same type so we can just check the
		    // first type from now on.
		    if (isArray(first) === true) {
		      // Short circuit if they're not the same length;
		      if (first.length !== second.length) {
		        return false;
		      }
		      for (var i = 0; i < first.length; i++) {
		        if (strictDeepEqual(first[i], second[i]) === false) {
		          return false;
		        }
		      }
		      return true;
		    }
		    if (isObject(first) === true) {
		      // An object is equal if it has the same key/value pairs.
		      var keysSeen = {};
		      for (var key in first) {
		        if (hasOwnProperty.call(first, key)) {
		          if (strictDeepEqual(first[key], second[key]) === false) {
		            return false;
		          }
		          keysSeen[key] = true;
		        }
		      }
		      // Now check that there aren't any keys in second that weren't
		      // in first.
		      for (var key2 in second) {
		        if (hasOwnProperty.call(second, key2)) {
		          if (keysSeen[key2] !== true) {
		            return false;
		          }
		        }
		      }
		      return true;
		    }
		    return false;
		  }

		  function isFalse(obj) {
		    // From the spec:
		    // A false value corresponds to the following values:
		    // Empty list
		    // Empty object
		    // Empty string
		    // False boolean
		    // null value

		    // First check the scalar values.
		    if (obj === "" || obj === false || obj === null) {
		        return true;
		    } else if (isArray(obj) && obj.length === 0) {
		        // Check for an empty array.
		        return true;
		    } else if (isObject(obj)) {
		        // Check for an empty object.
		        for (var key in obj) {
		            // If there are any keys, then
		            // the object is not empty so the object
		            // is not false.
		            if (obj.hasOwnProperty(key)) {
		              return false;
		            }
		        }
		        return true;
		    } else {
		        return false;
		    }
		  }

		  function objValues(obj) {
		    var keys = Object.keys(obj);
		    var values = [];
		    for (var i = 0; i < keys.length; i++) {
		      values.push(obj[keys[i]]);
		    }
		    return values;
		  }

		  function merge(a, b) {
		      var merged = {};
		      for (var key in a) {
		          merged[key] = a[key];
		      }
		      for (var key2 in b) {
		          merged[key2] = b[key2];
		      }
		      return merged;
		  }

		  var trimLeft;
		  if (typeof String.prototype.trimLeft === "function") {
		    trimLeft = function(str) {
		      return str.trimLeft();
		    };
		  } else {
		    trimLeft = function(str) {
		      return str.match(/^\s*(.*)/)[1];
		    };
		  }

		  // Type constants used to define functions.
		  var TYPE_NUMBER = 0;
		  var TYPE_ANY = 1;
		  var TYPE_STRING = 2;
		  var TYPE_ARRAY = 3;
		  var TYPE_OBJECT = 4;
		  var TYPE_BOOLEAN = 5;
		  var TYPE_EXPREF = 6;
		  var TYPE_NULL = 7;
		  var TYPE_ARRAY_NUMBER = 8;
		  var TYPE_ARRAY_STRING = 9;

		  var TOK_EOF = "EOF";
		  var TOK_UNQUOTEDIDENTIFIER = "UnquotedIdentifier";
		  var TOK_QUOTEDIDENTIFIER = "QuotedIdentifier";
		  var TOK_RBRACKET = "Rbracket";
		  var TOK_RPAREN = "Rparen";
		  var TOK_COMMA = "Comma";
		  var TOK_COLON = "Colon";
		  var TOK_RBRACE = "Rbrace";
		  var TOK_NUMBER = "Number";
		  var TOK_CURRENT = "Current";
		  var TOK_EXPREF = "Expref";
		  var TOK_PIPE = "Pipe";
		  var TOK_OR = "Or";
		  var TOK_AND = "And";
		  var TOK_EQ = "EQ";
		  var TOK_GT = "GT";
		  var TOK_LT = "LT";
		  var TOK_GTE = "GTE";
		  var TOK_LTE = "LTE";
		  var TOK_NE = "NE";
		  var TOK_FLATTEN = "Flatten";
		  var TOK_STAR = "Star";
		  var TOK_FILTER = "Filter";
		  var TOK_DOT = "Dot";
		  var TOK_NOT = "Not";
		  var TOK_LBRACE = "Lbrace";
		  var TOK_LBRACKET = "Lbracket";
		  var TOK_LPAREN= "Lparen";
		  var TOK_LITERAL= "Literal";

		  // The "&", "[", "<", ">" tokens
		  // are not in basicToken because
		  // there are two token variants
		  // ("&&", "[?", "<=", ">=").  This is specially handled
		  // below.

		  var basicTokens = {
		    ".": TOK_DOT,
		    "*": TOK_STAR,
		    ",": TOK_COMMA,
		    ":": TOK_COLON,
		    "{": TOK_LBRACE,
		    "}": TOK_RBRACE,
		    "]": TOK_RBRACKET,
		    "(": TOK_LPAREN,
		    ")": TOK_RPAREN,
		    "@": TOK_CURRENT
		  };

		  var operatorStartToken = {
		      "<": true,
		      ">": true,
		      "=": true,
		      "!": true
		  };

		  var skipChars = {
		      " ": true,
		      "\t": true,
		      "\n": true
		  };


		  function isAlpha(ch) {
		      return (ch >= "a" && ch <= "z") ||
		             (ch >= "A" && ch <= "Z") ||
		             ch === "_";
		  }

		  function isNum(ch) {
		      return (ch >= "0" && ch <= "9") ||
		             ch === "-";
		  }
		  function isAlphaNum(ch) {
		      return (ch >= "a" && ch <= "z") ||
		             (ch >= "A" && ch <= "Z") ||
		             (ch >= "0" && ch <= "9") ||
		             ch === "_";
		  }

		  function Lexer() {
		  }
		  Lexer.prototype = {
		      tokenize: function(stream) {
		          var tokens = [];
		          this._current = 0;
		          var start;
		          var identifier;
		          var token;
		          while (this._current < stream.length) {
		              if (isAlpha(stream[this._current])) {
		                  start = this._current;
		                  identifier = this._consumeUnquotedIdentifier(stream);
		                  tokens.push({type: TOK_UNQUOTEDIDENTIFIER,
		                               value: identifier,
		                               start: start});
		              } else if (basicTokens[stream[this._current]] !== undefined) {
		                  tokens.push({type: basicTokens[stream[this._current]],
		                              value: stream[this._current],
		                              start: this._current});
		                  this._current++;
		              } else if (isNum(stream[this._current])) {
		                  token = this._consumeNumber(stream);
		                  tokens.push(token);
		              } else if (stream[this._current] === "[") {
		                  // No need to increment this._current.  This happens
		                  // in _consumeLBracket
		                  token = this._consumeLBracket(stream);
		                  tokens.push(token);
		              } else if (stream[this._current] === "\"") {
		                  start = this._current;
		                  identifier = this._consumeQuotedIdentifier(stream);
		                  tokens.push({type: TOK_QUOTEDIDENTIFIER,
		                               value: identifier,
		                               start: start});
		              } else if (stream[this._current] === "'") {
		                  start = this._current;
		                  identifier = this._consumeRawStringLiteral(stream);
		                  tokens.push({type: TOK_LITERAL,
		                               value: identifier,
		                               start: start});
		              } else if (stream[this._current] === "`") {
		                  start = this._current;
		                  var literal = this._consumeLiteral(stream);
		                  tokens.push({type: TOK_LITERAL,
		                               value: literal,
		                               start: start});
		              } else if (operatorStartToken[stream[this._current]] !== undefined) {
		                  tokens.push(this._consumeOperator(stream));
		              } else if (skipChars[stream[this._current]] !== undefined) {
		                  // Ignore whitespace.
		                  this._current++;
		              } else if (stream[this._current] === "&") {
		                  start = this._current;
		                  this._current++;
		                  if (stream[this._current] === "&") {
		                      this._current++;
		                      tokens.push({type: TOK_AND, value: "&&", start: start});
		                  } else {
		                      tokens.push({type: TOK_EXPREF, value: "&", start: start});
		                  }
		              } else if (stream[this._current] === "|") {
		                  start = this._current;
		                  this._current++;
		                  if (stream[this._current] === "|") {
		                      this._current++;
		                      tokens.push({type: TOK_OR, value: "||", start: start});
		                  } else {
		                      tokens.push({type: TOK_PIPE, value: "|", start: start});
		                  }
		              } else {
		                  var error = new Error("Unknown character:" + stream[this._current]);
		                  error.name = "LexerError";
		                  throw error;
		              }
		          }
		          return tokens;
		      },

		      _consumeUnquotedIdentifier: function(stream) {
		          var start = this._current;
		          this._current++;
		          while (this._current < stream.length && isAlphaNum(stream[this._current])) {
		              this._current++;
		          }
		          return stream.slice(start, this._current);
		      },

		      _consumeQuotedIdentifier: function(stream) {
		          var start = this._current;
		          this._current++;
		          var maxLength = stream.length;
		          while (stream[this._current] !== "\"" && this._current < maxLength) {
		              // You can escape a double quote and you can escape an escape.
		              var current = this._current;
		              if (stream[current] === "\\" && (stream[current + 1] === "\\" ||
		                                               stream[current + 1] === "\"")) {
		                  current += 2;
		              } else {
		                  current++;
		              }
		              this._current = current;
		          }
		          this._current++;
		          return JSON.parse(stream.slice(start, this._current));
		      },

		      _consumeRawStringLiteral: function(stream) {
		          var start = this._current;
		          this._current++;
		          var maxLength = stream.length;
		          while (stream[this._current] !== "'" && this._current < maxLength) {
		              // You can escape a single quote and you can escape an escape.
		              var current = this._current;
		              if (stream[current] === "\\" && (stream[current + 1] === "\\" ||
		                                               stream[current + 1] === "'")) {
		                  current += 2;
		              } else {
		                  current++;
		              }
		              this._current = current;
		          }
		          this._current++;
		          var literal = stream.slice(start + 1, this._current - 1);
		          return literal.replace("\\'", "'");
		      },

		      _consumeNumber: function(stream) {
		          var start = this._current;
		          this._current++;
		          var maxLength = stream.length;
		          while (isNum(stream[this._current]) && this._current < maxLength) {
		              this._current++;
		          }
		          var value = parseInt(stream.slice(start, this._current));
		          return {type: TOK_NUMBER, value: value, start: start};
		      },

		      _consumeLBracket: function(stream) {
		          var start = this._current;
		          this._current++;
		          if (stream[this._current] === "?") {
		              this._current++;
		              return {type: TOK_FILTER, value: "[?", start: start};
		          } else if (stream[this._current] === "]") {
		              this._current++;
		              return {type: TOK_FLATTEN, value: "[]", start: start};
		          } else {
		              return {type: TOK_LBRACKET, value: "[", start: start};
		          }
		      },

		      _consumeOperator: function(stream) {
		          var start = this._current;
		          var startingChar = stream[start];
		          this._current++;
		          if (startingChar === "!") {
		              if (stream[this._current] === "=") {
		                  this._current++;
		                  return {type: TOK_NE, value: "!=", start: start};
		              } else {
		                return {type: TOK_NOT, value: "!", start: start};
		              }
		          } else if (startingChar === "<") {
		              if (stream[this._current] === "=") {
		                  this._current++;
		                  return {type: TOK_LTE, value: "<=", start: start};
		              } else {
		                  return {type: TOK_LT, value: "<", start: start};
		              }
		          } else if (startingChar === ">") {
		              if (stream[this._current] === "=") {
		                  this._current++;
		                  return {type: TOK_GTE, value: ">=", start: start};
		              } else {
		                  return {type: TOK_GT, value: ">", start: start};
		              }
		          } else if (startingChar === "=") {
		              if (stream[this._current] === "=") {
		                  this._current++;
		                  return {type: TOK_EQ, value: "==", start: start};
		              }
		          }
		      },

		      _consumeLiteral: function(stream) {
		          this._current++;
		          var start = this._current;
		          var maxLength = stream.length;
		          var literal;
		          while(stream[this._current] !== "`" && this._current < maxLength) {
		              // You can escape a literal char or you can escape the escape.
		              var current = this._current;
		              if (stream[current] === "\\" && (stream[current + 1] === "\\" ||
		                                               stream[current + 1] === "`")) {
		                  current += 2;
		              } else {
		                  current++;
		              }
		              this._current = current;
		          }
		          var literalString = trimLeft(stream.slice(start, this._current));
		          literalString = literalString.replace("\\`", "`");
		          if (this._looksLikeJSON(literalString)) {
		              literal = JSON.parse(literalString);
		          } else {
		              // Try to JSON parse it as "<literal>"
		              literal = JSON.parse("\"" + literalString + "\"");
		          }
		          // +1 gets us to the ending "`", +1 to move on to the next char.
		          this._current++;
		          return literal;
		      },

		      _looksLikeJSON: function(literalString) {
		          var startingChars = "[{\"";
		          var jsonLiterals = ["true", "false", "null"];
		          var numberLooking = "-0123456789";

		          if (literalString === "") {
		              return false;
		          } else if (startingChars.indexOf(literalString[0]) >= 0) {
		              return true;
		          } else if (jsonLiterals.indexOf(literalString) >= 0) {
		              return true;
		          } else if (numberLooking.indexOf(literalString[0]) >= 0) {
		              try {
		                  JSON.parse(literalString);
		                  return true;
		              } catch (ex) {
		                  return false;
		              }
		          } else {
		              return false;
		          }
		      }
		  };

		      var bindingPower = {};
		      bindingPower[TOK_EOF] = 0;
		      bindingPower[TOK_UNQUOTEDIDENTIFIER] = 0;
		      bindingPower[TOK_QUOTEDIDENTIFIER] = 0;
		      bindingPower[TOK_RBRACKET] = 0;
		      bindingPower[TOK_RPAREN] = 0;
		      bindingPower[TOK_COMMA] = 0;
		      bindingPower[TOK_RBRACE] = 0;
		      bindingPower[TOK_NUMBER] = 0;
		      bindingPower[TOK_CURRENT] = 0;
		      bindingPower[TOK_EXPREF] = 0;
		      bindingPower[TOK_PIPE] = 1;
		      bindingPower[TOK_OR] = 2;
		      bindingPower[TOK_AND] = 3;
		      bindingPower[TOK_EQ] = 5;
		      bindingPower[TOK_GT] = 5;
		      bindingPower[TOK_LT] = 5;
		      bindingPower[TOK_GTE] = 5;
		      bindingPower[TOK_LTE] = 5;
		      bindingPower[TOK_NE] = 5;
		      bindingPower[TOK_FLATTEN] = 9;
		      bindingPower[TOK_STAR] = 20;
		      bindingPower[TOK_FILTER] = 21;
		      bindingPower[TOK_DOT] = 40;
		      bindingPower[TOK_NOT] = 45;
		      bindingPower[TOK_LBRACE] = 50;
		      bindingPower[TOK_LBRACKET] = 55;
		      bindingPower[TOK_LPAREN] = 60;

		  function Parser() {
		  }

		  Parser.prototype = {
		      parse: function(expression) {
		          this._loadTokens(expression);
		          this.index = 0;
		          var ast = this.expression(0);
		          if (this._lookahead(0) !== TOK_EOF) {
		              var t = this._lookaheadToken(0);
		              var error = new Error(
		                  "Unexpected token type: " + t.type + ", value: " + t.value);
		              error.name = "ParserError";
		              throw error;
		          }
		          return ast;
		      },

		      _loadTokens: function(expression) {
		          var lexer = new Lexer();
		          var tokens = lexer.tokenize(expression);
		          tokens.push({type: TOK_EOF, value: "", start: expression.length});
		          this.tokens = tokens;
		      },

		      expression: function(rbp) {
		          var leftToken = this._lookaheadToken(0);
		          this._advance();
		          var left = this.nud(leftToken);
		          var currentToken = this._lookahead(0);
		          while (rbp < bindingPower[currentToken]) {
		              this._advance();
		              left = this.led(currentToken, left);
		              currentToken = this._lookahead(0);
		          }
		          return left;
		      },

		      _lookahead: function(number) {
		          return this.tokens[this.index + number].type;
		      },

		      _lookaheadToken: function(number) {
		          return this.tokens[this.index + number];
		      },

		      _advance: function() {
		          this.index++;
		      },

		      nud: function(token) {
		        var left;
		        var right;
		        var expression;
		        switch (token.type) {
		          case TOK_LITERAL:
		            return {type: "Literal", value: token.value};
		          case TOK_UNQUOTEDIDENTIFIER:
		            return {type: "Field", name: token.value};
		          case TOK_QUOTEDIDENTIFIER:
		            var node = {type: "Field", name: token.value};
		            if (this._lookahead(0) === TOK_LPAREN) {
		                throw new Error("Quoted identifier not allowed for function names.");
		            } else {
		                return node;
		            }
		            break;
		          case TOK_NOT:
		            right = this.expression(bindingPower.Not);
		            return {type: "NotExpression", children: [right]};
		          case TOK_STAR:
		            left = {type: "Identity"};
		            right = null;
		            if (this._lookahead(0) === TOK_RBRACKET) {
		                // This can happen in a multiselect,
		                // [a, b, *]
		                right = {type: "Identity"};
		            } else {
		                right = this._parseProjectionRHS(bindingPower.Star);
		            }
		            return {type: "ValueProjection", children: [left, right]};
		          case TOK_FILTER:
		            return this.led(token.type, {type: "Identity"});
		          case TOK_LBRACE:
		            return this._parseMultiselectHash();
		          case TOK_FLATTEN:
		            left = {type: TOK_FLATTEN, children: [{type: "Identity"}]};
		            right = this._parseProjectionRHS(bindingPower.Flatten);
		            return {type: "Projection", children: [left, right]};
		          case TOK_LBRACKET:
		            if (this._lookahead(0) === TOK_NUMBER || this._lookahead(0) === TOK_COLON) {
		                right = this._parseIndexExpression();
		                return this._projectIfSlice({type: "Identity"}, right);
		            } else if (this._lookahead(0) === TOK_STAR &&
		                       this._lookahead(1) === TOK_RBRACKET) {
		                this._advance();
		                this._advance();
		                right = this._parseProjectionRHS(bindingPower.Star);
		                return {type: "Projection",
		                        children: [{type: "Identity"}, right]};
		            } else {
		                return this._parseMultiselectList();
		            }
		            break;
		          case TOK_CURRENT:
		            return {type: TOK_CURRENT};
		          case TOK_EXPREF:
		            expression = this.expression(bindingPower.Expref);
		            return {type: "ExpressionReference", children: [expression]};
		          case TOK_LPAREN:
		            var args = [];
		            while (this._lookahead(0) !== TOK_RPAREN) {
		              if (this._lookahead(0) === TOK_CURRENT) {
		                expression = {type: TOK_CURRENT};
		                this._advance();
		              } else {
		                expression = this.expression(0);
		              }
		              args.push(expression);
		            }
		            this._match(TOK_RPAREN);
		            return args[0];
		          default:
		            this._errorToken(token);
		        }
		      },

		      led: function(tokenName, left) {
		        var right;
		        switch(tokenName) {
		          case TOK_DOT:
		            var rbp = bindingPower.Dot;
		            if (this._lookahead(0) !== TOK_STAR) {
		                right = this._parseDotRHS(rbp);
		                return {type: "Subexpression", children: [left, right]};
		            } else {
		                // Creating a projection.
		                this._advance();
		                right = this._parseProjectionRHS(rbp);
		                return {type: "ValueProjection", children: [left, right]};
		            }
		            break;
		          case TOK_PIPE:
		            right = this.expression(bindingPower.Pipe);
		            return {type: TOK_PIPE, children: [left, right]};
		          case TOK_OR:
		            right = this.expression(bindingPower.Or);
		            return {type: "OrExpression", children: [left, right]};
		          case TOK_AND:
		            right = this.expression(bindingPower.And);
		            return {type: "AndExpression", children: [left, right]};
		          case TOK_LPAREN:
		            var name = left.name;
		            var args = [];
		            var expression, node;
		            while (this._lookahead(0) !== TOK_RPAREN) {
		              if (this._lookahead(0) === TOK_CURRENT) {
		                expression = {type: TOK_CURRENT};
		                this._advance();
		              } else {
		                expression = this.expression(0);
		              }
		              if (this._lookahead(0) === TOK_COMMA) {
		                this._match(TOK_COMMA);
		              }
		              args.push(expression);
		            }
		            this._match(TOK_RPAREN);
		            node = {type: "Function", name: name, children: args};
		            return node;
		          case TOK_FILTER:
		            var condition = this.expression(0);
		            this._match(TOK_RBRACKET);
		            if (this._lookahead(0) === TOK_FLATTEN) {
		              right = {type: "Identity"};
		            } else {
		              right = this._parseProjectionRHS(bindingPower.Filter);
		            }
		            return {type: "FilterProjection", children: [left, right, condition]};
		          case TOK_FLATTEN:
		            var leftNode = {type: TOK_FLATTEN, children: [left]};
		            var rightNode = this._parseProjectionRHS(bindingPower.Flatten);
		            return {type: "Projection", children: [leftNode, rightNode]};
		          case TOK_EQ:
		          case TOK_NE:
		          case TOK_GT:
		          case TOK_GTE:
		          case TOK_LT:
		          case TOK_LTE:
		            return this._parseComparator(left, tokenName);
		          case TOK_LBRACKET:
		            var token = this._lookaheadToken(0);
		            if (token.type === TOK_NUMBER || token.type === TOK_COLON) {
		                right = this._parseIndexExpression();
		                return this._projectIfSlice(left, right);
		            } else {
		                this._match(TOK_STAR);
		                this._match(TOK_RBRACKET);
		                right = this._parseProjectionRHS(bindingPower.Star);
		                return {type: "Projection", children: [left, right]};
		            }
		            break;
		          default:
		            this._errorToken(this._lookaheadToken(0));
		        }
		      },

		      _match: function(tokenType) {
		          if (this._lookahead(0) === tokenType) {
		              this._advance();
		          } else {
		              var t = this._lookaheadToken(0);
		              var error = new Error("Expected " + tokenType + ", got: " + t.type);
		              error.name = "ParserError";
		              throw error;
		          }
		      },

		      _errorToken: function(token) {
		          var error = new Error("Invalid token (" +
		                                token.type + "): \"" +
		                                token.value + "\"");
		          error.name = "ParserError";
		          throw error;
		      },


		      _parseIndexExpression: function() {
		          if (this._lookahead(0) === TOK_COLON || this._lookahead(1) === TOK_COLON) {
		              return this._parseSliceExpression();
		          } else {
		              var node = {
		                  type: "Index",
		                  value: this._lookaheadToken(0).value};
		              this._advance();
		              this._match(TOK_RBRACKET);
		              return node;
		          }
		      },

		      _projectIfSlice: function(left, right) {
		          var indexExpr = {type: "IndexExpression", children: [left, right]};
		          if (right.type === "Slice") {
		              return {
		                  type: "Projection",
		                  children: [indexExpr, this._parseProjectionRHS(bindingPower.Star)]
		              };
		          } else {
		              return indexExpr;
		          }
		      },

		      _parseSliceExpression: function() {
		          // [start:end:step] where each part is optional, as well as the last
		          // colon.
		          var parts = [null, null, null];
		          var index = 0;
		          var currentToken = this._lookahead(0);
		          while (currentToken !== TOK_RBRACKET && index < 3) {
		              if (currentToken === TOK_COLON) {
		                  index++;
		                  this._advance();
		              } else if (currentToken === TOK_NUMBER) {
		                  parts[index] = this._lookaheadToken(0).value;
		                  this._advance();
		              } else {
		                  var t = this._lookahead(0);
		                  var error = new Error("Syntax error, unexpected token: " +
		                                        t.value + "(" + t.type + ")");
		                  error.name = "Parsererror";
		                  throw error;
		              }
		              currentToken = this._lookahead(0);
		          }
		          this._match(TOK_RBRACKET);
		          return {
		              type: "Slice",
		              children: parts
		          };
		      },

		      _parseComparator: function(left, comparator) {
		        var right = this.expression(bindingPower[comparator]);
		        return {type: "Comparator", name: comparator, children: [left, right]};
		      },

		      _parseDotRHS: function(rbp) {
		          var lookahead = this._lookahead(0);
		          var exprTokens = [TOK_UNQUOTEDIDENTIFIER, TOK_QUOTEDIDENTIFIER, TOK_STAR];
		          if (exprTokens.indexOf(lookahead) >= 0) {
		              return this.expression(rbp);
		          } else if (lookahead === TOK_LBRACKET) {
		              this._match(TOK_LBRACKET);
		              return this._parseMultiselectList();
		          } else if (lookahead === TOK_LBRACE) {
		              this._match(TOK_LBRACE);
		              return this._parseMultiselectHash();
		          }
		      },

		      _parseProjectionRHS: function(rbp) {
		          var right;
		          if (bindingPower[this._lookahead(0)] < 10) {
		              right = {type: "Identity"};
		          } else if (this._lookahead(0) === TOK_LBRACKET) {
		              right = this.expression(rbp);
		          } else if (this._lookahead(0) === TOK_FILTER) {
		              right = this.expression(rbp);
		          } else if (this._lookahead(0) === TOK_DOT) {
		              this._match(TOK_DOT);
		              right = this._parseDotRHS(rbp);
		          } else {
		              var t = this._lookaheadToken(0);
		              var error = new Error("Sytanx error, unexpected token: " +
		                                    t.value + "(" + t.type + ")");
		              error.name = "ParserError";
		              throw error;
		          }
		          return right;
		      },

		      _parseMultiselectList: function() {
		          var expressions = [];
		          while (this._lookahead(0) !== TOK_RBRACKET) {
		              var expression = this.expression(0);
		              expressions.push(expression);
		              if (this._lookahead(0) === TOK_COMMA) {
		                  this._match(TOK_COMMA);
		                  if (this._lookahead(0) === TOK_RBRACKET) {
		                    throw new Error("Unexpected token Rbracket");
		                  }
		              }
		          }
		          this._match(TOK_RBRACKET);
		          return {type: "MultiSelectList", children: expressions};
		      },

		      _parseMultiselectHash: function() {
		        var pairs = [];
		        var identifierTypes = [TOK_UNQUOTEDIDENTIFIER, TOK_QUOTEDIDENTIFIER];
		        var keyToken, keyName, value, node;
		        for (;;) {
		          keyToken = this._lookaheadToken(0);
		          if (identifierTypes.indexOf(keyToken.type) < 0) {
		            throw new Error("Expecting an identifier token, got: " +
		                            keyToken.type);
		          }
		          keyName = keyToken.value;
		          this._advance();
		          this._match(TOK_COLON);
		          value = this.expression(0);
		          node = {type: "KeyValuePair", name: keyName, value: value};
		          pairs.push(node);
		          if (this._lookahead(0) === TOK_COMMA) {
		            this._match(TOK_COMMA);
		          } else if (this._lookahead(0) === TOK_RBRACE) {
		            this._match(TOK_RBRACE);
		            break;
		          }
		        }
		        return {type: "MultiSelectHash", children: pairs};
		      }
		  };


		  function TreeInterpreter(runtime) {
		    this.runtime = runtime;
		  }

		  TreeInterpreter.prototype = {
		      search: function(node, value) {
		          return this.visit(node, value);
		      },

		      visit: function(node, value) {
		          var matched, current, result, first, second, field, left, right, collected, i;
		          switch (node.type) {
		            case "Field":
		              if (value === null ) {
		                  return null;
		              } else if (isObject(value)) {
		                  field = value[node.name];
		                  if (field === undefined) {
		                      return null;
		                  } else {
		                      return field;
		                  }
		              } else {
		                return null;
		              }
		              break;
		            case "Subexpression":
		              result = this.visit(node.children[0], value);
		              for (i = 1; i < node.children.length; i++) {
		                  result = this.visit(node.children[1], result);
		                  if (result === null) {
		                      return null;
		                  }
		              }
		              return result;
		            case "IndexExpression":
		              left = this.visit(node.children[0], value);
		              right = this.visit(node.children[1], left);
		              return right;
		            case "Index":
		              if (!isArray(value)) {
		                return null;
		              }
		              var index = node.value;
		              if (index < 0) {
		                index = value.length + index;
		              }
		              result = value[index];
		              if (result === undefined) {
		                result = null;
		              }
		              return result;
		            case "Slice":
		              if (!isArray(value)) {
		                return null;
		              }
		              var sliceParams = node.children.slice(0);
		              var computed = this.computeSliceParams(value.length, sliceParams);
		              var start = computed[0];
		              var stop = computed[1];
		              var step = computed[2];
		              result = [];
		              if (step > 0) {
		                  for (i = start; i < stop; i += step) {
		                      result.push(value[i]);
		                  }
		              } else {
		                  for (i = start; i > stop; i += step) {
		                      result.push(value[i]);
		                  }
		              }
		              return result;
		            case "Projection":
		              // Evaluate left child.
		              var base = this.visit(node.children[0], value);
		              if (!isArray(base)) {
		                return null;
		              }
		              collected = [];
		              for (i = 0; i < base.length; i++) {
		                current = this.visit(node.children[1], base[i]);
		                if (current !== null) {
		                  collected.push(current);
		                }
		              }
		              return collected;
		            case "ValueProjection":
		              // Evaluate left child.
		              base = this.visit(node.children[0], value);
		              if (!isObject(base)) {
		                return null;
		              }
		              collected = [];
		              var values = objValues(base);
		              for (i = 0; i < values.length; i++) {
		                current = this.visit(node.children[1], values[i]);
		                if (current !== null) {
		                  collected.push(current);
		                }
		              }
		              return collected;
		            case "FilterProjection":
		              base = this.visit(node.children[0], value);
		              if (!isArray(base)) {
		                return null;
		              }
		              var filtered = [];
		              var finalResults = [];
		              for (i = 0; i < base.length; i++) {
		                matched = this.visit(node.children[2], base[i]);
		                if (!isFalse(matched)) {
		                  filtered.push(base[i]);
		                }
		              }
		              for (var j = 0; j < filtered.length; j++) {
		                current = this.visit(node.children[1], filtered[j]);
		                if (current !== null) {
		                  finalResults.push(current);
		                }
		              }
		              return finalResults;
		            case "Comparator":
		              first = this.visit(node.children[0], value);
		              second = this.visit(node.children[1], value);
		              switch(node.name) {
		                case TOK_EQ:
		                  result = strictDeepEqual(first, second);
		                  break;
		                case TOK_NE:
		                  result = !strictDeepEqual(first, second);
		                  break;
		                case TOK_GT:
		                  result = first > second;
		                  break;
		                case TOK_GTE:
		                  result = first >= second;
		                  break;
		                case TOK_LT:
		                  result = first < second;
		                  break;
		                case TOK_LTE:
		                  result = first <= second;
		                  break;
		                default:
		                  throw new Error("Unknown comparator: " + node.name);
		              }
		              return result;
		            case TOK_FLATTEN:
		              var original = this.visit(node.children[0], value);
		              if (!isArray(original)) {
		                return null;
		              }
		              var merged = [];
		              for (i = 0; i < original.length; i++) {
		                current = original[i];
		                if (isArray(current)) {
		                  merged.push.apply(merged, current);
		                } else {
		                  merged.push(current);
		                }
		              }
		              return merged;
		            case "Identity":
		              return value;
		            case "MultiSelectList":
		              if (value === null) {
		                return null;
		              }
		              collected = [];
		              for (i = 0; i < node.children.length; i++) {
		                  collected.push(this.visit(node.children[i], value));
		              }
		              return collected;
		            case "MultiSelectHash":
		              if (value === null) {
		                return null;
		              }
		              collected = {};
		              var child;
		              for (i = 0; i < node.children.length; i++) {
		                child = node.children[i];
		                collected[child.name] = this.visit(child.value, value);
		              }
		              return collected;
		            case "OrExpression":
		              matched = this.visit(node.children[0], value);
		              if (isFalse(matched)) {
		                  matched = this.visit(node.children[1], value);
		              }
		              return matched;
		            case "AndExpression":
		              first = this.visit(node.children[0], value);

		              if (isFalse(first) === true) {
		                return first;
		              }
		              return this.visit(node.children[1], value);
		            case "NotExpression":
		              first = this.visit(node.children[0], value);
		              return isFalse(first);
		            case "Literal":
		              return node.value;
		            case TOK_PIPE:
		              left = this.visit(node.children[0], value);
		              return this.visit(node.children[1], left);
		            case TOK_CURRENT:
		              return value;
		            case "Function":
		              var resolvedArgs = [];
		              for (i = 0; i < node.children.length; i++) {
		                  resolvedArgs.push(this.visit(node.children[i], value));
		              }
		              return this.runtime.callFunction(node.name, resolvedArgs);
		            case "ExpressionReference":
		              var refNode = node.children[0];
		              // Tag the node with a specific attribute so the type
		              // checker verify the type.
		              refNode.jmespathType = TOK_EXPREF;
		              return refNode;
		            default:
		              throw new Error("Unknown node type: " + node.type);
		          }
		      },

		      computeSliceParams: function(arrayLength, sliceParams) {
		        var start = sliceParams[0];
		        var stop = sliceParams[1];
		        var step = sliceParams[2];
		        var computed = [null, null, null];
		        if (step === null) {
		          step = 1;
		        } else if (step === 0) {
		          var error = new Error("Invalid slice, step cannot be 0");
		          error.name = "RuntimeError";
		          throw error;
		        }
		        var stepValueNegative = step < 0 ? true : false;

		        if (start === null) {
		            start = stepValueNegative ? arrayLength - 1 : 0;
		        } else {
		            start = this.capSliceRange(arrayLength, start, step);
		        }

		        if (stop === null) {
		            stop = stepValueNegative ? -1 : arrayLength;
		        } else {
		            stop = this.capSliceRange(arrayLength, stop, step);
		        }
		        computed[0] = start;
		        computed[1] = stop;
		        computed[2] = step;
		        return computed;
		      },

		      capSliceRange: function(arrayLength, actualValue, step) {
		          if (actualValue < 0) {
		              actualValue += arrayLength;
		              if (actualValue < 0) {
		                  actualValue = step < 0 ? -1 : 0;
		              }
		          } else if (actualValue >= arrayLength) {
		              actualValue = step < 0 ? arrayLength - 1 : arrayLength;
		          }
		          return actualValue;
		      }

		  };

		  function Runtime(interpreter) {
		    this._interpreter = interpreter;
		    this.functionTable = {
		        // name: [function, <signature>]
		        // The <signature> can be:
		        //
		        // {
		        //   args: [[type1, type2], [type1, type2]],
		        //   variadic: true|false
		        // }
		        //
		        // Each arg in the arg list is a list of valid types
		        // (if the function is overloaded and supports multiple
		        // types.  If the type is "any" then no type checking
		        // occurs on the argument.  Variadic is optional
		        // and if not provided is assumed to be false.
		        abs: {_func: this._functionAbs, _signature: [{types: [TYPE_NUMBER]}]},
		        avg: {_func: this._functionAvg, _signature: [{types: [TYPE_ARRAY_NUMBER]}]},
		        ceil: {_func: this._functionCeil, _signature: [{types: [TYPE_NUMBER]}]},
		        contains: {
		            _func: this._functionContains,
		            _signature: [{types: [TYPE_STRING, TYPE_ARRAY]},
		                        {types: [TYPE_ANY]}]},
		        "ends_with": {
		            _func: this._functionEndsWith,
		            _signature: [{types: [TYPE_STRING]}, {types: [TYPE_STRING]}]},
		        floor: {_func: this._functionFloor, _signature: [{types: [TYPE_NUMBER]}]},
		        length: {
		            _func: this._functionLength,
		            _signature: [{types: [TYPE_STRING, TYPE_ARRAY, TYPE_OBJECT]}]},
		        map: {
		            _func: this._functionMap,
		            _signature: [{types: [TYPE_EXPREF]}, {types: [TYPE_ARRAY]}]},
		        max: {
		            _func: this._functionMax,
		            _signature: [{types: [TYPE_ARRAY_NUMBER, TYPE_ARRAY_STRING]}]},
		        "merge": {
		            _func: this._functionMerge,
		            _signature: [{types: [TYPE_OBJECT], variadic: true}]
		        },
		        "max_by": {
		          _func: this._functionMaxBy,
		          _signature: [{types: [TYPE_ARRAY]}, {types: [TYPE_EXPREF]}]
		        },
		        sum: {_func: this._functionSum, _signature: [{types: [TYPE_ARRAY_NUMBER]}]},
		        "starts_with": {
		            _func: this._functionStartsWith,
		            _signature: [{types: [TYPE_STRING]}, {types: [TYPE_STRING]}]},
		        min: {
		            _func: this._functionMin,
		            _signature: [{types: [TYPE_ARRAY_NUMBER, TYPE_ARRAY_STRING]}]},
		        "min_by": {
		          _func: this._functionMinBy,
		          _signature: [{types: [TYPE_ARRAY]}, {types: [TYPE_EXPREF]}]
		        },
		        type: {_func: this._functionType, _signature: [{types: [TYPE_ANY]}]},
		        keys: {_func: this._functionKeys, _signature: [{types: [TYPE_OBJECT]}]},
		        values: {_func: this._functionValues, _signature: [{types: [TYPE_OBJECT]}]},
		        sort: {_func: this._functionSort, _signature: [{types: [TYPE_ARRAY_STRING, TYPE_ARRAY_NUMBER]}]},
		        "sort_by": {
		          _func: this._functionSortBy,
		          _signature: [{types: [TYPE_ARRAY]}, {types: [TYPE_EXPREF]}]
		        },
		        join: {
		            _func: this._functionJoin,
		            _signature: [
		                {types: [TYPE_STRING]},
		                {types: [TYPE_ARRAY_STRING]}
		            ]
		        },
		        reverse: {
		            _func: this._functionReverse,
		            _signature: [{types: [TYPE_STRING, TYPE_ARRAY]}]},
		        "to_array": {_func: this._functionToArray, _signature: [{types: [TYPE_ANY]}]},
		        "to_string": {_func: this._functionToString, _signature: [{types: [TYPE_ANY]}]},
		        "to_number": {_func: this._functionToNumber, _signature: [{types: [TYPE_ANY]}]},
		        "not_null": {
		            _func: this._functionNotNull,
		            _signature: [{types: [TYPE_ANY], variadic: true}]
		        }
		    };
		  }

		  Runtime.prototype = {
		    callFunction: function(name, resolvedArgs) {
		      var functionEntry = this.functionTable[name];
		      if (functionEntry === undefined) {
		          throw new Error("Unknown function: " + name + "()");
		      }
		      this._validateArgs(name, resolvedArgs, functionEntry._signature);
		      return functionEntry._func.call(this, resolvedArgs);
		    },

		    _validateArgs: function(name, args, signature) {
		        // Validating the args requires validating
		        // the correct arity and the correct type of each arg.
		        // If the last argument is declared as variadic, then we need
		        // a minimum number of args to be required.  Otherwise it has to
		        // be an exact amount.
		        var pluralized;
		        if (signature[signature.length - 1].variadic) {
		            if (args.length < signature.length) {
		                pluralized = signature.length === 1 ? " argument" : " arguments";
		                throw new Error("ArgumentError: " + name + "() " +
		                                "takes at least" + signature.length + pluralized +
		                                " but received " + args.length);
		            }
		        } else if (args.length !== signature.length) {
		            pluralized = signature.length === 1 ? " argument" : " arguments";
		            throw new Error("ArgumentError: " + name + "() " +
		                            "takes " + signature.length + pluralized +
		                            " but received " + args.length);
		        }
		        var currentSpec;
		        var actualType;
		        var typeMatched;
		        for (var i = 0; i < signature.length; i++) {
		            typeMatched = false;
		            currentSpec = signature[i].types;
		            actualType = this._getTypeName(args[i]);
		            for (var j = 0; j < currentSpec.length; j++) {
		                if (this._typeMatches(actualType, currentSpec[j], args[i])) {
		                    typeMatched = true;
		                    break;
		                }
		            }
		            if (!typeMatched) {
		                throw new Error("TypeError: " + name + "() " +
		                                "expected argument " + (i + 1) +
		                                " to be type " + currentSpec +
		                                " but received type " + actualType +
		                                " instead.");
		            }
		        }
		    },

		    _typeMatches: function(actual, expected, argValue) {
		        if (expected === TYPE_ANY) {
		            return true;
		        }
		        if (expected === TYPE_ARRAY_STRING ||
		            expected === TYPE_ARRAY_NUMBER ||
		            expected === TYPE_ARRAY) {
		            // The expected type can either just be array,
		            // or it can require a specific subtype (array of numbers).
		            //
		            // The simplest case is if "array" with no subtype is specified.
		            if (expected === TYPE_ARRAY) {
		                return actual === TYPE_ARRAY;
		            } else if (actual === TYPE_ARRAY) {
		                // Otherwise we need to check subtypes.
		                // I think this has potential to be improved.
		                var subtype;
		                if (expected === TYPE_ARRAY_NUMBER) {
		                  subtype = TYPE_NUMBER;
		                } else if (expected === TYPE_ARRAY_STRING) {
		                  subtype = TYPE_STRING;
		                }
		                for (var i = 0; i < argValue.length; i++) {
		                    if (!this._typeMatches(
		                            this._getTypeName(argValue[i]), subtype,
		                                             argValue[i])) {
		                        return false;
		                    }
		                }
		                return true;
		            }
		        } else {
		            return actual === expected;
		        }
		    },
		    _getTypeName: function(obj) {
		        switch (Object.prototype.toString.call(obj)) {
		            case "[object String]":
		              return TYPE_STRING;
		            case "[object Number]":
		              return TYPE_NUMBER;
		            case "[object Array]":
		              return TYPE_ARRAY;
		            case "[object Boolean]":
		              return TYPE_BOOLEAN;
		            case "[object Null]":
		              return TYPE_NULL;
		            case "[object Object]":
		              // Check if it's an expref.  If it has, it's been
		              // tagged with a jmespathType attr of 'Expref';
		              if (obj.jmespathType === TOK_EXPREF) {
		                return TYPE_EXPREF;
		              } else {
		                return TYPE_OBJECT;
		              }
		        }
		    },

		    _functionStartsWith: function(resolvedArgs) {
		        return resolvedArgs[0].lastIndexOf(resolvedArgs[1]) === 0;
		    },

		    _functionEndsWith: function(resolvedArgs) {
		        var searchStr = resolvedArgs[0];
		        var suffix = resolvedArgs[1];
		        return searchStr.indexOf(suffix, searchStr.length - suffix.length) !== -1;
		    },

		    _functionReverse: function(resolvedArgs) {
		        var typeName = this._getTypeName(resolvedArgs[0]);
		        if (typeName === TYPE_STRING) {
		          var originalStr = resolvedArgs[0];
		          var reversedStr = "";
		          for (var i = originalStr.length - 1; i >= 0; i--) {
		              reversedStr += originalStr[i];
		          }
		          return reversedStr;
		        } else {
		          var reversedArray = resolvedArgs[0].slice(0);
		          reversedArray.reverse();
		          return reversedArray;
		        }
		    },

		    _functionAbs: function(resolvedArgs) {
		      return Math.abs(resolvedArgs[0]);
		    },

		    _functionCeil: function(resolvedArgs) {
		        return Math.ceil(resolvedArgs[0]);
		    },

		    _functionAvg: function(resolvedArgs) {
		        var sum = 0;
		        var inputArray = resolvedArgs[0];
		        for (var i = 0; i < inputArray.length; i++) {
		            sum += inputArray[i];
		        }
		        return sum / inputArray.length;
		    },

		    _functionContains: function(resolvedArgs) {
		        return resolvedArgs[0].indexOf(resolvedArgs[1]) >= 0;
		    },

		    _functionFloor: function(resolvedArgs) {
		        return Math.floor(resolvedArgs[0]);
		    },

		    _functionLength: function(resolvedArgs) {
		       if (!isObject(resolvedArgs[0])) {
		         return resolvedArgs[0].length;
		       } else {
		         // As far as I can tell, there's no way to get the length
		         // of an object without O(n) iteration through the object.
		         return Object.keys(resolvedArgs[0]).length;
		       }
		    },

		    _functionMap: function(resolvedArgs) {
		      var mapped = [];
		      var interpreter = this._interpreter;
		      var exprefNode = resolvedArgs[0];
		      var elements = resolvedArgs[1];
		      for (var i = 0; i < elements.length; i++) {
		          mapped.push(interpreter.visit(exprefNode, elements[i]));
		      }
		      return mapped;
		    },

		    _functionMerge: function(resolvedArgs) {
		      var merged = {};
		      for (var i = 0; i < resolvedArgs.length; i++) {
		        var current = resolvedArgs[i];
		        for (var key in current) {
		          merged[key] = current[key];
		        }
		      }
		      return merged;
		    },

		    _functionMax: function(resolvedArgs) {
		      if (resolvedArgs[0].length > 0) {
		        var typeName = this._getTypeName(resolvedArgs[0][0]);
		        if (typeName === TYPE_NUMBER) {
		          return Math.max.apply(Math, resolvedArgs[0]);
		        } else {
		          var elements = resolvedArgs[0];
		          var maxElement = elements[0];
		          for (var i = 1; i < elements.length; i++) {
		              if (maxElement.localeCompare(elements[i]) < 0) {
		                  maxElement = elements[i];
		              }
		          }
		          return maxElement;
		        }
		      } else {
		          return null;
		      }
		    },

		    _functionMin: function(resolvedArgs) {
		      if (resolvedArgs[0].length > 0) {
		        var typeName = this._getTypeName(resolvedArgs[0][0]);
		        if (typeName === TYPE_NUMBER) {
		          return Math.min.apply(Math, resolvedArgs[0]);
		        } else {
		          var elements = resolvedArgs[0];
		          var minElement = elements[0];
		          for (var i = 1; i < elements.length; i++) {
		              if (elements[i].localeCompare(minElement) < 0) {
		                  minElement = elements[i];
		              }
		          }
		          return minElement;
		        }
		      } else {
		        return null;
		      }
		    },

		    _functionSum: function(resolvedArgs) {
		      var sum = 0;
		      var listToSum = resolvedArgs[0];
		      for (var i = 0; i < listToSum.length; i++) {
		        sum += listToSum[i];
		      }
		      return sum;
		    },

		    _functionType: function(resolvedArgs) {
		        switch (this._getTypeName(resolvedArgs[0])) {
		          case TYPE_NUMBER:
		            return "number";
		          case TYPE_STRING:
		            return "string";
		          case TYPE_ARRAY:
		            return "array";
		          case TYPE_OBJECT:
		            return "object";
		          case TYPE_BOOLEAN:
		            return "boolean";
		          case TYPE_EXPREF:
		            return "expref";
		          case TYPE_NULL:
		            return "null";
		        }
		    },

		    _functionKeys: function(resolvedArgs) {
		        return Object.keys(resolvedArgs[0]);
		    },

		    _functionValues: function(resolvedArgs) {
		        var obj = resolvedArgs[0];
		        var keys = Object.keys(obj);
		        var values = [];
		        for (var i = 0; i < keys.length; i++) {
		            values.push(obj[keys[i]]);
		        }
		        return values;
		    },

		    _functionJoin: function(resolvedArgs) {
		        var joinChar = resolvedArgs[0];
		        var listJoin = resolvedArgs[1];
		        return listJoin.join(joinChar);
		    },

		    _functionToArray: function(resolvedArgs) {
		        if (this._getTypeName(resolvedArgs[0]) === TYPE_ARRAY) {
		            return resolvedArgs[0];
		        } else {
		            return [resolvedArgs[0]];
		        }
		    },

		    _functionToString: function(resolvedArgs) {
		        if (this._getTypeName(resolvedArgs[0]) === TYPE_STRING) {
		            return resolvedArgs[0];
		        } else {
		            return JSON.stringify(resolvedArgs[0]);
		        }
		    },

		    _functionToNumber: function(resolvedArgs) {
		        var typeName = this._getTypeName(resolvedArgs[0]);
		        var convertedValue;
		        if (typeName === TYPE_NUMBER) {
		            return resolvedArgs[0];
		        } else if (typeName === TYPE_STRING) {
		            convertedValue = +resolvedArgs[0];
		            if (!isNaN(convertedValue)) {
		                return convertedValue;
		            }
		        }
		        return null;
		    },

		    _functionNotNull: function(resolvedArgs) {
		        for (var i = 0; i < resolvedArgs.length; i++) {
		            if (this._getTypeName(resolvedArgs[i]) !== TYPE_NULL) {
		                return resolvedArgs[i];
		            }
		        }
		        return null;
		    },

		    _functionSort: function(resolvedArgs) {
		        var sortedArray = resolvedArgs[0].slice(0);
		        sortedArray.sort();
		        return sortedArray;
		    },

		    _functionSortBy: function(resolvedArgs) {
		        var sortedArray = resolvedArgs[0].slice(0);
		        if (sortedArray.length === 0) {
		            return sortedArray;
		        }
		        var interpreter = this._interpreter;
		        var exprefNode = resolvedArgs[1];
		        var requiredType = this._getTypeName(
		            interpreter.visit(exprefNode, sortedArray[0]));
		        if ([TYPE_NUMBER, TYPE_STRING].indexOf(requiredType) < 0) {
		            throw new Error("TypeError");
		        }
		        var that = this;
		        // In order to get a stable sort out of an unstable
		        // sort algorithm, we decorate/sort/undecorate (DSU)
		        // by creating a new list of [index, element] pairs.
		        // In the cmp function, if the evaluated elements are
		        // equal, then the index will be used as the tiebreaker.
		        // After the decorated list has been sorted, it will be
		        // undecorated to extract the original elements.
		        var decorated = [];
		        for (var i = 0; i < sortedArray.length; i++) {
		          decorated.push([i, sortedArray[i]]);
		        }
		        decorated.sort(function(a, b) {
		          var exprA = interpreter.visit(exprefNode, a[1]);
		          var exprB = interpreter.visit(exprefNode, b[1]);
		          if (that._getTypeName(exprA) !== requiredType) {
		              throw new Error(
		                  "TypeError: expected " + requiredType + ", received " +
		                  that._getTypeName(exprA));
		          } else if (that._getTypeName(exprB) !== requiredType) {
		              throw new Error(
		                  "TypeError: expected " + requiredType + ", received " +
		                  that._getTypeName(exprB));
		          }
		          if (exprA > exprB) {
		            return 1;
		          } else if (exprA < exprB) {
		            return -1;
		          } else {
		            // If they're equal compare the items by their
		            // order to maintain relative order of equal keys
		            // (i.e. to get a stable sort).
		            return a[0] - b[0];
		          }
		        });
		        // Undecorate: extract out the original list elements.
		        for (var j = 0; j < decorated.length; j++) {
		          sortedArray[j] = decorated[j][1];
		        }
		        return sortedArray;
		    },

		    _functionMaxBy: function(resolvedArgs) {
		      var exprefNode = resolvedArgs[1];
		      var resolvedArray = resolvedArgs[0];
		      var keyFunction = this.createKeyFunction(exprefNode, [TYPE_NUMBER, TYPE_STRING]);
		      var maxNumber = -Infinity;
		      var maxRecord;
		      var current;
		      for (var i = 0; i < resolvedArray.length; i++) {
		        current = keyFunction(resolvedArray[i]);
		        if (current > maxNumber) {
		          maxNumber = current;
		          maxRecord = resolvedArray[i];
		        }
		      }
		      return maxRecord;
		    },

		    _functionMinBy: function(resolvedArgs) {
		      var exprefNode = resolvedArgs[1];
		      var resolvedArray = resolvedArgs[0];
		      var keyFunction = this.createKeyFunction(exprefNode, [TYPE_NUMBER, TYPE_STRING]);
		      var minNumber = Infinity;
		      var minRecord;
		      var current;
		      for (var i = 0; i < resolvedArray.length; i++) {
		        current = keyFunction(resolvedArray[i]);
		        if (current < minNumber) {
		          minNumber = current;
		          minRecord = resolvedArray[i];
		        }
		      }
		      return minRecord;
		    },

		    createKeyFunction: function(exprefNode, allowedTypes) {
		      var that = this;
		      var interpreter = this._interpreter;
		      var keyFunc = function(x) {
		        var current = interpreter.visit(exprefNode, x);
		        if (allowedTypes.indexOf(that._getTypeName(current)) < 0) {
		          var msg = "TypeError: expected one of " + allowedTypes +
		                    ", received " + that._getTypeName(current);
		          throw new Error(msg);
		        }
		        return current;
		      };
		      return keyFunc;
		    }

		  };

		  function compile(stream) {
		    var parser = new Parser();
		    var ast = parser.parse(stream);
		    return ast;
		  }

		  function tokenize(stream) {
		      var lexer = new Lexer();
		      return lexer.tokenize(stream);
		  }

		  function search(data, expression) {
		      var parser = new Parser();
		      // This needs to be improved.  Both the interpreter and runtime depend on
		      // each other.  The runtime needs the interpreter to support exprefs.
		      // There's likely a clean way to avoid the cyclic dependency.
		      var runtime = new Runtime();
		      var interpreter = new TreeInterpreter(runtime);
		      runtime._interpreter = interpreter;
		      var node = parser.parse(expression);
		      return interpreter.search(node, data);
		  }

		  exports.tokenize = tokenize;
		  exports.compile = compile;
		  exports.search = search;
		  exports.strictDeepEqual = strictDeepEqual;
		})( false ? this.jmespath = {} : exports);


	/***/ }),
	/* 52 */
	/***/ (function(module, exports, __webpack_require__) {

		var AWS = __webpack_require__(1);
		var inherit = AWS.util.inherit;
		var jmespath = __webpack_require__(51);

		/**
		 * This class encapsulates the response information
		 * from a service request operation sent through {AWS.Request}.
		 * The response object has two main properties for getting information
		 * back from a request:
		 *
		 * ## The `data` property
		 *
		 * The `response.data` property contains the serialized object data
		 * retrieved from the service request. For instance, for an
		 * Amazon DynamoDB `listTables` method call, the response data might
		 * look like:
		 *
		 * ```
		 * > resp.data
		 * { TableNames:
		 *    [ 'table1', 'table2', ... ] }
		 * ```
		 *
		 * The `data` property can be null if an error occurs (see below).
		 *
		 * ## The `error` property
		 *
		 * In the event of a service error (or transfer error), the
		 * `response.error` property will be filled with the given
		 * error data in the form:
		 *
		 * ```
		 * { code: 'SHORT_UNIQUE_ERROR_CODE',
		 *   message: 'Some human readable error message' }
		 * ```
		 *
		 * In the case of an error, the `data` property will be `null`.
		 * Note that if you handle events that can be in a failure state,
		 * you should always check whether `response.error` is set
		 * before attempting to access the `response.data` property.
		 *
		 * @!attribute data
		 *   @readonly
		 *   @!group Data Properties
		 *   @note Inside of a {AWS.Request~httpData} event, this
		 *     property contains a single raw packet instead of the
		 *     full de-serialized service response.
		 *   @return [Object] the de-serialized response data
		 *     from the service.
		 *
		 * @!attribute error
		 *   An structure containing information about a service
		 *   or networking error.
		 *   @readonly
		 *   @!group Data Properties
		 *   @note This attribute is only filled if a service or
		 *     networking error occurs.
		 *   @return [Error]
		 *     * code [String] a unique short code representing the
		 *       error that was emitted.
		 *     * message [String] a longer human readable error message
		 *     * retryable [Boolean] whether the error message is
		 *       retryable.
		 *     * statusCode [Numeric] in the case of a request that reached the service,
		 *       this value contains the response status code.
		 *     * time [Date] the date time object when the error occurred.
		 *     * hostname [String] set when a networking error occurs to easily
		 *       identify the endpoint of the request.
		 *     * region [String] set when a networking error occurs to easily
		 *       identify the region of the request.
		 *
		 * @!attribute requestId
		 *   @readonly
		 *   @!group Data Properties
		 *   @return [String] the unique request ID associated with the response.
		 *     Log this value when debugging requests for AWS support.
		 *
		 * @!attribute retryCount
		 *   @readonly
		 *   @!group Operation Properties
		 *   @return [Integer] the number of retries that were
		 *     attempted before the request was completed.
		 *
		 * @!attribute redirectCount
		 *   @readonly
		 *   @!group Operation Properties
		 *   @return [Integer] the number of redirects that were
		 *     followed before the request was completed.
		 *
		 * @!attribute httpResponse
		 *   @readonly
		 *   @!group HTTP Properties
		 *   @return [AWS.HttpResponse] the raw HTTP response object
		 *     containing the response headers and body information
		 *     from the server.
		 *
		 * @see AWS.Request
		 */
		AWS.Response = inherit({

		  /**
		   * @api private
		   */
		  constructor: function Response(request) {
		    this.request = request;
		    this.data = null;
		    this.error = null;
		    this.retryCount = 0;
		    this.redirectCount = 0;
		    this.httpResponse = new AWS.HttpResponse();
		    if (request) {
		      this.maxRetries = request.service.numRetries();
		      this.maxRedirects = request.service.config.maxRedirects;
		    }
		  },

		  /**
		   * Creates a new request for the next page of response data, calling the
		   * callback with the page data if a callback is provided.
		   *
		   * @callback callback function(err, data)
		   *   Called when a page of data is returned from the next request.
		   *
		   *   @param err [Error] an error object, if an error occurred in the request
		   *   @param data [Object] the next page of data, or null, if there are no
		   *     more pages left.
		   * @return [AWS.Request] the request object for the next page of data
		   * @return [null] if no callback is provided and there are no pages left
		   *   to retrieve.
		   * @since v1.4.0
		   */
		  nextPage: function nextPage(callback) {
		    var config;
		    var service = this.request.service;
		    var operation = this.request.operation;
		    try {
		      config = service.paginationConfig(operation, true);
		    } catch (e) { this.error = e; }

		    if (!this.hasNextPage()) {
		      if (callback) callback(this.error, null);
		      else if (this.error) throw this.error;
		      return null;
		    }

		    var params = AWS.util.copy(this.request.params);
		    if (!this.nextPageTokens) {
		      return callback ? callback(null, null) : null;
		    } else {
		      var inputTokens = config.inputToken;
		      if (typeof inputTokens === 'string') inputTokens = [inputTokens];
		      for (var i = 0; i < inputTokens.length; i++) {
		        params[inputTokens[i]] = this.nextPageTokens[i];
		      }
		      return service.makeRequest(this.request.operation, params, callback);
		    }
		  },

		  /**
		   * @return [Boolean] whether more pages of data can be returned by further
		   *   requests
		   * @since v1.4.0
		   */
		  hasNextPage: function hasNextPage() {
		    this.cacheNextPageTokens();
		    if (this.nextPageTokens) return true;
		    if (this.nextPageTokens === undefined) return undefined;
		    else return false;
		  },

		  /**
		   * @api private
		   */
		  cacheNextPageTokens: function cacheNextPageTokens() {
		    if (Object.prototype.hasOwnProperty.call(this, 'nextPageTokens')) return this.nextPageTokens;
		    this.nextPageTokens = undefined;

		    var config = this.request.service.paginationConfig(this.request.operation);
		    if (!config) return this.nextPageTokens;

		    this.nextPageTokens = null;
		    if (config.moreResults) {
		      if (!jmespath.search(this.data, config.moreResults)) {
		        return this.nextPageTokens;
		      }
		    }

		    var exprs = config.outputToken;
		    if (typeof exprs === 'string') exprs = [exprs];
		    AWS.util.arrayEach.call(this, exprs, function (expr) {
		      var output = jmespath.search(this.data, expr);
		      if (output) {
		        this.nextPageTokens = this.nextPageTokens || [];
		        this.nextPageTokens.push(output);
		      }
		    });

		    return this.nextPageTokens;
		  }

		});


	/***/ }),
	/* 53 */
	/***/ (function(module, exports, __webpack_require__) {

		/**
		 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
		 *
		 * Licensed under the Apache License, Version 2.0 (the "License"). You
		 * may not use this file except in compliance with the License. A copy of
		 * the License is located at
		 *
		 *     http://aws.amazon.com/apache2.0/
		 *
		 * or in the "license" file accompanying this file. This file is
		 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
		 * ANY KIND, either express or implied. See the License for the specific
		 * language governing permissions and limitations under the License.
		 */

		var AWS = __webpack_require__(1);
		var inherit = AWS.util.inherit;
		var jmespath = __webpack_require__(51);

		/**
		 * @api private
		 */
		function CHECK_ACCEPTORS(resp) {
		  var waiter = resp.request._waiter;
		  var acceptors = waiter.config.acceptors;
		  var acceptorMatched = false;
		  var state = 'retry';

		  acceptors.forEach(function(acceptor) {
		    if (!acceptorMatched) {
		      var matcher = waiter.matchers[acceptor.matcher];
		      if (matcher && matcher(resp, acceptor.expected, acceptor.argument)) {
		        acceptorMatched = true;
		        state = acceptor.state;
		      }
		    }
		  });

		  if (!acceptorMatched && resp.error) state = 'failure';

		  if (state === 'success') {
		    waiter.setSuccess(resp);
		  } else {
		    waiter.setError(resp, state === 'retry');
		  }
		}

		/**
		 * @api private
		 */
		AWS.ResourceWaiter = inherit({
		  /**
		   * Waits for a given state on a service object
		   * @param service [Service] the service object to wait on
		   * @param state [String] the state (defined in waiter configuration) to wait
		   *   for.
		   * @example Create a waiter for running EC2 instances
		   *   var ec2 = new AWS.EC2;
		   *   var waiter = new AWS.ResourceWaiter(ec2, 'instanceRunning');
		   */
		  constructor: function constructor(service, state) {
		    this.service = service;
		    this.state = state;
		    this.loadWaiterConfig(this.state);
		  },

		  service: null,

		  state: null,

		  config: null,

		  matchers: {
		    path: function(resp, expected, argument) {
		      try {
		        var result = jmespath.search(resp.data, argument);
		      } catch (err) {
		        return false;
		      }

		      return jmespath.strictDeepEqual(result,expected);
		    },

		    pathAll: function(resp, expected, argument) {
		      try {
		        var results = jmespath.search(resp.data, argument);
		      } catch (err) {
		        return false;
		      }

		      if (!Array.isArray(results)) results = [results];
		      var numResults = results.length;
		      if (!numResults) return false;
		      for (var ind = 0 ; ind < numResults; ind++) {
		        if (!jmespath.strictDeepEqual(results[ind], expected)) {
		          return false;
		        }
		      }
		      return true;
		    },

		    pathAny: function(resp, expected, argument) {
		      try {
		        var results = jmespath.search(resp.data, argument);
		      } catch (err) {
		        return false;
		      }

		      if (!Array.isArray(results)) results = [results];
		      var numResults = results.length;
		      for (var ind = 0 ; ind < numResults; ind++) {
		        if (jmespath.strictDeepEqual(results[ind], expected)) {
		          return true;
		        }
		      }
		      return false;
		    },

		    status: function(resp, expected) {
		      var statusCode = resp.httpResponse.statusCode;
		      return (typeof statusCode === 'number') && (statusCode === expected);
		    },

		    error: function(resp, expected) {
		      if (typeof expected === 'string' && resp.error) {
		        return expected === resp.error.code;
		      }
		      // if expected is not string, can be boolean indicating presence of error
		      return expected === !!resp.error;
		    }
		  },

		  listeners: new AWS.SequentialExecutor().addNamedListeners(function(add) {
		    add('RETRY_CHECK', 'retry', function(resp) {
		      var waiter = resp.request._waiter;
		      if (resp.error && resp.error.code === 'ResourceNotReady') {
		        resp.error.retryDelay = (waiter.config.delay || 0) * 1000;
		      }
		    });

		    add('CHECK_OUTPUT', 'extractData', CHECK_ACCEPTORS);

		    add('CHECK_ERROR', 'extractError', CHECK_ACCEPTORS);
		  }),

		  /**
		   * @return [AWS.Request]
		   */
		  wait: function wait(params, callback) {
		    if (typeof params === 'function') {
		      callback = params; params = undefined;
		    }

		    if (params && params.$waiter) {
		      params = AWS.util.copy(params);
		      if (typeof params.$waiter.delay === 'number') {
		        this.config.delay = params.$waiter.delay;
		      }
		      if (typeof params.$waiter.maxAttempts === 'number') {
		        this.config.maxAttempts = params.$waiter.maxAttempts;
		      }
		      delete params.$waiter;
		    }

		    var request = this.service.makeRequest(this.config.operation, params);
		    request._waiter = this;
		    request.response.maxRetries = this.config.maxAttempts;
		    request.addListeners(this.listeners);

		    if (callback) request.send(callback);
		    return request;
		  },

		  setSuccess: function setSuccess(resp) {
		    resp.error = null;
		    resp.data = resp.data || {};
		    resp.request.removeAllListeners('extractData');
		  },

		  setError: function setError(resp, retryable) {
		    resp.data = null;
		    resp.error = AWS.util.error(resp.error || new Error(), {
		      code: 'ResourceNotReady',
		      message: 'Resource is not in the state ' + this.state,
		      retryable: retryable
		    });
		  },

		  /**
		   * Loads waiter configuration from API configuration
		   *
		   * @api private
		   */
		  loadWaiterConfig: function loadWaiterConfig(state) {
		    if (!this.service.api.waiters[state]) {
		      throw new AWS.util.error(new Error(), {
		        code: 'StateNotFoundError',
		        message: 'State ' + state + ' not found.'
		      });
		    }

		    this.config = AWS.util.copy(this.service.api.waiters[state]);
		  }
		});


	/***/ }),
	/* 54 */
	/***/ (function(module, exports, __webpack_require__) {

		var AWS = __webpack_require__(1);

		var inherit = AWS.util.inherit;

		/**
		 * @api private
		 */
		AWS.Signers.RequestSigner = inherit({
		  constructor: function RequestSigner(request) {
		    this.request = request;
		  },

		  setServiceClientId: function setServiceClientId(id) {
		    this.serviceClientId = id;
		  },

		  getServiceClientId: function getServiceClientId() {
		    return this.serviceClientId;
		  }
		});

		AWS.Signers.RequestSigner.getVersion = function getVersion(version) {
		  switch (version) {
		    case 'v2': return AWS.Signers.V2;
		    case 'v3': return AWS.Signers.V3;
		    case 's3v4': return AWS.Signers.V4;
		    case 'v4': return AWS.Signers.V4;
		    case 's3': return AWS.Signers.S3;
		    case 'v3https': return AWS.Signers.V3Https;
		  }
		  throw new Error('Unknown signing version ' + version);
		};

		__webpack_require__(55);
		__webpack_require__(56);
		__webpack_require__(57);
		__webpack_require__(58);
		__webpack_require__(60);
		__webpack_require__(61);


	/***/ }),
	/* 55 */
	/***/ (function(module, exports, __webpack_require__) {

		var AWS = __webpack_require__(1);
		var inherit = AWS.util.inherit;

		/**
		 * @api private
		 */
		AWS.Signers.V2 = inherit(AWS.Signers.RequestSigner, {
		  addAuthorization: function addAuthorization(credentials, date) {

		    if (!date) date = AWS.util.date.getDate();

		    var r = this.request;

		    r.params.Timestamp = AWS.util.date.iso8601(date);
		    r.params.SignatureVersion = '2';
		    r.params.SignatureMethod = 'HmacSHA256';
		    r.params.AWSAccessKeyId = credentials.accessKeyId;

		    if (credentials.sessionToken) {
		      r.params.SecurityToken = credentials.sessionToken;
		    }

		    delete r.params.Signature; // delete old Signature for re-signing
		    r.params.Signature = this.signature(credentials);

		    r.body = AWS.util.queryParamsToString(r.params);
		    r.headers['Content-Length'] = r.body.length;
		  },

		  signature: function signature(credentials) {
		    return AWS.util.crypto.hmac(credentials.secretAccessKey, this.stringToSign(), 'base64');
		  },

		  stringToSign: function stringToSign() {
		    var parts = [];
		    parts.push(this.request.method);
		    parts.push(this.request.endpoint.host.toLowerCase());
		    parts.push(this.request.pathname());
		    parts.push(AWS.util.queryParamsToString(this.request.params));
		    return parts.join('\n');
		  }

		});

		/**
		 * @api private
		 */
		module.exports = AWS.Signers.V2;


	/***/ }),
	/* 56 */
	/***/ (function(module, exports, __webpack_require__) {

		var AWS = __webpack_require__(1);
		var inherit = AWS.util.inherit;

		/**
		 * @api private
		 */
		AWS.Signers.V3 = inherit(AWS.Signers.RequestSigner, {
		  addAuthorization: function addAuthorization(credentials, date) {

		    var datetime = AWS.util.date.rfc822(date);

		    this.request.headers['X-Amz-Date'] = datetime;

		    if (credentials.sessionToken) {
		      this.request.headers['x-amz-security-token'] = credentials.sessionToken;
		    }

		    this.request.headers['X-Amzn-Authorization'] =
		      this.authorization(credentials, datetime);

		  },

		  authorization: function authorization(credentials) {
		    return 'AWS3 ' +
		      'AWSAccessKeyId=' + credentials.accessKeyId + ',' +
		      'Algorithm=HmacSHA256,' +
		      'SignedHeaders=' + this.signedHeaders() + ',' +
		      'Signature=' + this.signature(credentials);
		  },

		  signedHeaders: function signedHeaders() {
		    var headers = [];
		    AWS.util.arrayEach(this.headersToSign(), function iterator(h) {
		      headers.push(h.toLowerCase());
		    });
		    return headers.sort().join(';');
		  },

		  canonicalHeaders: function canonicalHeaders() {
		    var headers = this.request.headers;
		    var parts = [];
		    AWS.util.arrayEach(this.headersToSign(), function iterator(h) {
		      parts.push(h.toLowerCase().trim() + ':' + String(headers[h]).trim());
		    });
		    return parts.sort().join('\n') + '\n';
		  },

		  headersToSign: function headersToSign() {
		    var headers = [];
		    AWS.util.each(this.request.headers, function iterator(k) {
		      if (k === 'Host' || k === 'Content-Encoding' || k.match(/^X-Amz/i)) {
		        headers.push(k);
		      }
		    });
		    return headers;
		  },

		  signature: function signature(credentials) {
		    return AWS.util.crypto.hmac(credentials.secretAccessKey, this.stringToSign(), 'base64');
		  },

		  stringToSign: function stringToSign() {
		    var parts = [];
		    parts.push(this.request.method);
		    parts.push('/');
		    parts.push('');
		    parts.push(this.canonicalHeaders());
		    parts.push(this.request.body);
		    return AWS.util.crypto.sha256(parts.join('\n'));
		  }

		});

		/**
		 * @api private
		 */
		module.exports = AWS.Signers.V3;


	/***/ }),
	/* 57 */
	/***/ (function(module, exports, __webpack_require__) {

		var AWS = __webpack_require__(1);
		var inherit = AWS.util.inherit;

		__webpack_require__(56);

		/**
		 * @api private
		 */
		AWS.Signers.V3Https = inherit(AWS.Signers.V3, {
		  authorization: function authorization(credentials) {
		    return 'AWS3-HTTPS ' +
		      'AWSAccessKeyId=' + credentials.accessKeyId + ',' +
		      'Algorithm=HmacSHA256,' +
		      'Signature=' + this.signature(credentials);
		  },

		  stringToSign: function stringToSign() {
		    return this.request.headers['X-Amz-Date'];
		  }
		});

		/**
		 * @api private
		 */
		module.exports = AWS.Signers.V3Https;


	/***/ }),
	/* 58 */
	/***/ (function(module, exports, __webpack_require__) {

		var AWS = __webpack_require__(1);
		var v4Credentials = __webpack_require__(59);
		var inherit = AWS.util.inherit;

		/**
		 * @api private
		 */
		var expiresHeader = 'presigned-expires';

		/**
		 * @api private
		 */
		AWS.Signers.V4 = inherit(AWS.Signers.RequestSigner, {
		  constructor: function V4(request, serviceName, options) {
		    AWS.Signers.RequestSigner.call(this, request);
		    this.serviceName = serviceName;
		    options = options || {};
		    this.signatureCache = typeof options.signatureCache === 'boolean' ? options.signatureCache : true;
		    this.operation = options.operation;
		    this.signatureVersion = options.signatureVersion;
		  },

		  algorithm: 'AWS4-HMAC-SHA256',

		  addAuthorization: function addAuthorization(credentials, date) {
		    var datetime = AWS.util.date.iso8601(date).replace(/[:\-]|\.\d{3}/g, '');

		    if (this.isPresigned()) {
		      this.updateForPresigned(credentials, datetime);
		    } else {
		      this.addHeaders(credentials, datetime);
		    }

		    this.request.headers['Authorization'] =
		      this.authorization(credentials, datetime);
		  },

		  addHeaders: function addHeaders(credentials, datetime) {
		    this.request.headers['X-Amz-Date'] = datetime;
		    if (credentials.sessionToken) {
		      this.request.headers['x-amz-security-token'] = credentials.sessionToken;
		    }
		  },

		  updateForPresigned: function updateForPresigned(credentials, datetime) {
		    var credString = this.credentialString(datetime);
		    var qs = {
		      'X-Amz-Date': datetime,
		      'X-Amz-Algorithm': this.algorithm,
		      'X-Amz-Credential': credentials.accessKeyId + '/' + credString,
		      'X-Amz-Expires': this.request.headers[expiresHeader],
		      'X-Amz-SignedHeaders': this.signedHeaders()
		    };

		    if (credentials.sessionToken) {
		      qs['X-Amz-Security-Token'] = credentials.sessionToken;
		    }

		    if (this.request.headers['Content-Type']) {
		      qs['Content-Type'] = this.request.headers['Content-Type'];
		    }
		    if (this.request.headers['Content-MD5']) {
		      qs['Content-MD5'] = this.request.headers['Content-MD5'];
		    }
		    if (this.request.headers['Cache-Control']) {
		      qs['Cache-Control'] = this.request.headers['Cache-Control'];
		    }

		    // need to pull in any other X-Amz-* headers
		    AWS.util.each.call(this, this.request.headers, function(key, value) {
		      if (key === expiresHeader) return;
		      if (this.isSignableHeader(key)) {
		        var lowerKey = key.toLowerCase();
		        // Metadata should be normalized
		        if (lowerKey.indexOf('x-amz-meta-') === 0) {
		          qs[lowerKey] = value;
		        } else if (lowerKey.indexOf('x-amz-') === 0) {
		          qs[key] = value;
		        }
		      }
		    });

		    var sep = this.request.path.indexOf('?') >= 0 ? '&' : '?';
		    this.request.path += sep + AWS.util.queryParamsToString(qs);
		  },

		  authorization: function authorization(credentials, datetime) {
		    var parts = [];
		    var credString = this.credentialString(datetime);
		    parts.push(this.algorithm + ' Credential=' +
		      credentials.accessKeyId + '/' + credString);
		    parts.push('SignedHeaders=' + this.signedHeaders());
		    parts.push('Signature=' + this.signature(credentials, datetime));
		    return parts.join(', ');
		  },

		  signature: function signature(credentials, datetime) {
		    var signingKey = v4Credentials.getSigningKey(
		      credentials,
		      datetime.substr(0, 8),
		      this.request.region,
		      this.serviceName,
		      this.signatureCache
		    );
		    return AWS.util.crypto.hmac(signingKey, this.stringToSign(datetime), 'hex');
		  },

		  stringToSign: function stringToSign(datetime) {
		    var parts = [];
		    parts.push('AWS4-HMAC-SHA256');
		    parts.push(datetime);
		    parts.push(this.credentialString(datetime));
		    parts.push(this.hexEncodedHash(this.canonicalString()));
		    return parts.join('\n');
		  },

		  canonicalString: function canonicalString() {
		    var parts = [], pathname = this.request.pathname();
		    if (this.serviceName !== 's3' && this.signatureVersion !== 's3v4') pathname = AWS.util.uriEscapePath(pathname);

		    parts.push(this.request.method);
		    parts.push(pathname);
		    parts.push(this.request.search());
		    parts.push(this.canonicalHeaders() + '\n');
		    parts.push(this.signedHeaders());
		    parts.push(this.hexEncodedBodyHash());
		    return parts.join('\n');
		  },

		  canonicalHeaders: function canonicalHeaders() {
		    var headers = [];
		    AWS.util.each.call(this, this.request.headers, function (key, item) {
		      headers.push([key, item]);
		    });
		    headers.sort(function (a, b) {
		      return a[0].toLowerCase() < b[0].toLowerCase() ? -1 : 1;
		    });
		    var parts = [];
		    AWS.util.arrayEach.call(this, headers, function (item) {
		      var key = item[0].toLowerCase();
		      if (this.isSignableHeader(key)) {
		        var value = item[1];
		        if (typeof value === 'undefined' || value === null || typeof value.toString !== 'function') {
		          throw AWS.util.error(new Error('Header ' + key + ' contains invalid value'), {
		            code: 'InvalidHeader'
		          });
		        }
		        parts.push(key + ':' +
		          this.canonicalHeaderValues(value.toString()));
		      }
		    });
		    return parts.join('\n');
		  },

		  canonicalHeaderValues: function canonicalHeaderValues(values) {
		    return values.replace(/\s+/g, ' ').replace(/^\s+|\s+$/g, '');
		  },

		  signedHeaders: function signedHeaders() {
		    var keys = [];
		    AWS.util.each.call(this, this.request.headers, function (key) {
		      key = key.toLowerCase();
		      if (this.isSignableHeader(key)) keys.push(key);
		    });
		    return keys.sort().join(';');
		  },

		  credentialString: function credentialString(datetime) {
		    return v4Credentials.createScope(
		      datetime.substr(0, 8),
		      this.request.region,
		      this.serviceName
		    );
		  },

		  hexEncodedHash: function hash(string) {
		    return AWS.util.crypto.sha256(string, 'hex');
		  },

		  hexEncodedBodyHash: function hexEncodedBodyHash() {
		    var request = this.request;
		    if (this.isPresigned() && this.serviceName === 's3' && !request.body) {
		      return 'UNSIGNED-PAYLOAD';
		    } else if (request.headers['X-Amz-Content-Sha256']) {
		      return request.headers['X-Amz-Content-Sha256'];
		    } else {
		      return this.hexEncodedHash(this.request.body || '');
		    }
		  },

		  unsignableHeaders: [
		    'authorization',
		    'content-type',
		    'content-length',
		    'user-agent',
		    expiresHeader,
		    'expect',
		    'x-amzn-trace-id'
		  ],

		  isSignableHeader: function isSignableHeader(key) {
		    if (key.toLowerCase().indexOf('x-amz-') === 0) return true;
		    return this.unsignableHeaders.indexOf(key) < 0;
		  },

		  isPresigned: function isPresigned() {
		    return this.request.headers[expiresHeader] ? true : false;
		  }

		});

		/**
		 * @api private
		 */
		module.exports = AWS.Signers.V4;


	/***/ }),
	/* 59 */
	/***/ (function(module, exports, __webpack_require__) {

		var AWS = __webpack_require__(1);

		/**
		 * @api private
		 */
		var cachedSecret = {};

		/**
		 * @api private
		 */
		var cacheQueue = [];

		/**
		 * @api private
		 */
		var maxCacheEntries = 50;

		/**
		 * @api private
		 */
		var v4Identifier = 'aws4_request';

		/**
		 * @api private
		 */
		module.exports = {
		  /**
		   * @api private
		   *
		   * @param date [String]
		   * @param region [String]
		   * @param serviceName [String]
		   * @return [String]
		   */
		  createScope: function createScope(date, region, serviceName) {
		    return [
		      date.substr(0, 8),
		      region,
		      serviceName,
		      v4Identifier
		    ].join('/');
		  },

		  /**
		   * @api private
		   *
		   * @param credentials [Credentials]
		   * @param date [String]
		   * @param region [String]
		   * @param service [String]
		   * @param shouldCache [Boolean]
		   * @return [String]
		   */
		  getSigningKey: function getSigningKey(
		    credentials,
		    date,
		    region,
		    service,
		    shouldCache
		  ) {
		    var credsIdentifier = AWS.util.crypto
		      .hmac(credentials.secretAccessKey, credentials.accessKeyId, 'base64');
		    var cacheKey = [credsIdentifier, date, region, service].join('_');
		    shouldCache = shouldCache !== false;
		    if (shouldCache && (cacheKey in cachedSecret)) {
		      return cachedSecret[cacheKey];
		    }

		    var kDate = AWS.util.crypto.hmac(
		      'AWS4' + credentials.secretAccessKey,
		      date,
		      'buffer'
		    );
		    var kRegion = AWS.util.crypto.hmac(kDate, region, 'buffer');
		    var kService = AWS.util.crypto.hmac(kRegion, service, 'buffer');

		    var signingKey = AWS.util.crypto.hmac(kService, v4Identifier, 'buffer');
		    if (shouldCache) {
		      cachedSecret[cacheKey] = signingKey;
		      cacheQueue.push(cacheKey);
		      if (cacheQueue.length > maxCacheEntries) {
		        // remove the oldest entry (not the least recently used)
		        delete cachedSecret[cacheQueue.shift()];
		      }
		    }

		    return signingKey;
		  },

		  /**
		   * @api private
		   *
		   * Empties the derived signing key cache. Made available for testing purposes
		   * only.
		   */
		  emptyCache: function emptyCache() {
		    cachedSecret = {};
		    cacheQueue = [];
		  }
		};


	/***/ }),
	/* 60 */
	/***/ (function(module, exports, __webpack_require__) {

		var AWS = __webpack_require__(1);
		var inherit = AWS.util.inherit;

		/**
		 * @api private
		 */
		AWS.Signers.S3 = inherit(AWS.Signers.RequestSigner, {
		  /**
		   * When building the stringToSign, these sub resource params should be
		   * part of the canonical resource string with their NON-decoded values
		   */
		  subResources: {
		    'acl': 1,
		    'accelerate': 1,
		    'analytics': 1,
		    'cors': 1,
		    'lifecycle': 1,
		    'delete': 1,
		    'inventory': 1,
		    'location': 1,
		    'logging': 1,
		    'metrics': 1,
		    'notification': 1,
		    'partNumber': 1,
		    'policy': 1,
		    'requestPayment': 1,
		    'replication': 1,
		    'restore': 1,
		    'tagging': 1,
		    'torrent': 1,
		    'uploadId': 1,
		    'uploads': 1,
		    'versionId': 1,
		    'versioning': 1,
		    'versions': 1,
		    'website': 1
		  },

		  // when building the stringToSign, these querystring params should be
		  // part of the canonical resource string with their NON-encoded values
		  responseHeaders: {
		    'response-content-type': 1,
		    'response-content-language': 1,
		    'response-expires': 1,
		    'response-cache-control': 1,
		    'response-content-disposition': 1,
		    'response-content-encoding': 1
		  },

		  addAuthorization: function addAuthorization(credentials, date) {
		    if (!this.request.headers['presigned-expires']) {
		      this.request.headers['X-Amz-Date'] = AWS.util.date.rfc822(date);
		    }

		    if (credentials.sessionToken) {
		      // presigned URLs require this header to be lowercased
		      this.request.headers['x-amz-security-token'] = credentials.sessionToken;
		    }

		    var signature = this.sign(credentials.secretAccessKey, this.stringToSign());
		    var auth = 'AWS ' + credentials.accessKeyId + ':' + signature;

		    this.request.headers['Authorization'] = auth;
		  },

		  stringToSign: function stringToSign() {
		    var r = this.request;

		    var parts = [];
		    parts.push(r.method);
		    parts.push(r.headers['Content-MD5'] || '');
		    parts.push(r.headers['Content-Type'] || '');

		    // This is the "Date" header, but we use X-Amz-Date.
		    // The S3 signing mechanism requires us to pass an empty
		    // string for this Date header regardless.
		    parts.push(r.headers['presigned-expires'] || '');

		    var headers = this.canonicalizedAmzHeaders();
		    if (headers) parts.push(headers);
		    parts.push(this.canonicalizedResource());

		    return parts.join('\n');

		  },

		  canonicalizedAmzHeaders: function canonicalizedAmzHeaders() {

		    var amzHeaders = [];

		    AWS.util.each(this.request.headers, function (name) {
		      if (name.match(/^x-amz-/i))
		        amzHeaders.push(name);
		    });

		    amzHeaders.sort(function (a, b) {
		      return a.toLowerCase() < b.toLowerCase() ? -1 : 1;
		    });

		    var parts = [];
		    AWS.util.arrayEach.call(this, amzHeaders, function (name) {
		      parts.push(name.toLowerCase() + ':' + String(this.request.headers[name]));
		    });

		    return parts.join('\n');

		  },

		  canonicalizedResource: function canonicalizedResource() {

		    var r = this.request;

		    var parts = r.path.split('?');
		    var path = parts[0];
		    var querystring = parts[1];

		    var resource = '';

		    if (r.virtualHostedBucket)
		      resource += '/' + r.virtualHostedBucket;

		    resource += path;

		    if (querystring) {

		      // collect a list of sub resources and query params that need to be signed
		      var resources = [];

		      AWS.util.arrayEach.call(this, querystring.split('&'), function (param) {
		        var name = param.split('=')[0];
		        var value = param.split('=')[1];
		        if (this.subResources[name] || this.responseHeaders[name]) {
		          var subresource = { name: name };
		          if (value !== undefined) {
		            if (this.subResources[name]) {
		              subresource.value = value;
		            } else {
		              subresource.value = decodeURIComponent(value);
		            }
		          }
		          resources.push(subresource);
		        }
		      });

		      resources.sort(function (a, b) { return a.name < b.name ? -1 : 1; });

		      if (resources.length) {

		        querystring = [];
		        AWS.util.arrayEach(resources, function (res) {
		          if (res.value === undefined) {
		            querystring.push(res.name);
		          } else {
		            querystring.push(res.name + '=' + res.value);
		          }
		        });

		        resource += '?' + querystring.join('&');
		      }

		    }

		    return resource;

		  },

		  sign: function sign(secret, string) {
		    return AWS.util.crypto.hmac(secret, string, 'base64', 'sha1');
		  }
		});

		/**
		 * @api private
		 */
		module.exports = AWS.Signers.S3;


	/***/ }),
	/* 61 */
	/***/ (function(module, exports, __webpack_require__) {

		var AWS = __webpack_require__(1);
		var inherit = AWS.util.inherit;

		/**
		 * @api private
		 */
		var expiresHeader = 'presigned-expires';

		/**
		 * @api private
		 */
		function signedUrlBuilder(request) {
		  var expires = request.httpRequest.headers[expiresHeader];
		  var signerClass = request.service.getSignerClass(request);

		  delete request.httpRequest.headers['User-Agent'];
		  delete request.httpRequest.headers['X-Amz-User-Agent'];

		  if (signerClass === AWS.Signers.V4) {
		    if (expires > 604800) { // one week expiry is invalid
		      var message = 'Presigning does not support expiry time greater ' +
		                    'than a week with SigV4 signing.';
		      throw AWS.util.error(new Error(), {
		        code: 'InvalidExpiryTime', message: message, retryable: false
		      });
		    }
		    request.httpRequest.headers[expiresHeader] = expires;
		  } else if (signerClass === AWS.Signers.S3) {
		    var now = request.service ? request.service.getSkewCorrectedDate() : AWS.util.date.getDate();
		    request.httpRequest.headers[expiresHeader] = parseInt(
		      AWS.util.date.unixTimestamp(now) + expires, 10).toString();
		  } else {
		    throw AWS.util.error(new Error(), {
		      message: 'Presigning only supports S3 or SigV4 signing.',
		      code: 'UnsupportedSigner', retryable: false
		    });
		  }
		}

		/**
		 * @api private
		 */
		function signedUrlSigner(request) {
		  var endpoint = request.httpRequest.endpoint;
		  var parsedUrl = AWS.util.urlParse(request.httpRequest.path);
		  var queryParams = {};

		  if (parsedUrl.search) {
		    queryParams = AWS.util.queryStringParse(parsedUrl.search.substr(1));
		  }

		  var auth = request.httpRequest.headers['Authorization'].split(' ');
		  if (auth[0] === 'AWS') {
		    auth = auth[1].split(':');
		    queryParams['Signature'] = auth.pop();
		    queryParams['AWSAccessKeyId'] = auth.join(':');

		    AWS.util.each(request.httpRequest.headers, function (key, value) {
		      if (key === expiresHeader) key = 'Expires';
		      if (key.indexOf('x-amz-meta-') === 0) {
		        // Delete existing, potentially not normalized key
		        delete queryParams[key];
		        key = key.toLowerCase();
		      }
		      queryParams[key] = value;
		    });
		    delete request.httpRequest.headers[expiresHeader];
		    delete queryParams['Authorization'];
		    delete queryParams['Host'];
		  } else if (auth[0] === 'AWS4-HMAC-SHA256') { // SigV4 signing
		    auth.shift();
		    var rest = auth.join(' ');
		    var signature = rest.match(/Signature=(.*?)(?:,|\s|\r?\n|$)/)[1];
		    queryParams['X-Amz-Signature'] = signature;
		    delete queryParams['Expires'];
		  }

		  // build URL
		  endpoint.pathname = parsedUrl.pathname;
		  endpoint.search = AWS.util.queryParamsToString(queryParams);
		}

		/**
		 * @api private
		 */
		AWS.Signers.Presign = inherit({
		  /**
		   * @api private
		   */
		  sign: function sign(request, expireTime, callback) {
		    request.httpRequest.headers[expiresHeader] = expireTime || 3600;
		    request.on('build', signedUrlBuilder);
		    request.on('sign', signedUrlSigner);
		    request.removeListener('afterBuild',
		      AWS.EventListeners.Core.SET_CONTENT_LENGTH);
		    request.removeListener('afterBuild',
		      AWS.EventListeners.Core.COMPUTE_SHA256);

		    request.emit('beforePresign', [request]);

		    if (callback) {
		      request.build(function() {
		        if (this.response.error) callback(this.response.error);
		        else {
		          callback(null, AWS.util.urlFormat(request.httpRequest.endpoint));
		        }
		      });
		    } else {
		      request.build();
		      if (request.response.error) throw request.response.error;
		      return AWS.util.urlFormat(request.httpRequest.endpoint);
		    }
		  }
		});

		/**
		 * @api private
		 */
		module.exports = AWS.Signers.Presign;


	/***/ }),
	/* 62 */
	/***/ (function(module, exports, __webpack_require__) {

		var AWS = __webpack_require__(1);

		/**
		 * @api private
		 */
		AWS.ParamValidator = AWS.util.inherit({
		  /**
		   * Create a new validator object.
		   *
		   * @param validation [Boolean|map] whether input parameters should be
		   *     validated against the operation description before sending the
		   *     request. Pass a map to enable any of the following specific
		   *     validation features:
		   *
		   *     * **min** [Boolean] &mdash; Validates that a value meets the min
		   *       constraint. This is enabled by default when paramValidation is set
		   *       to `true`.
		   *     * **max** [Boolean] &mdash; Validates that a value meets the max
		   *       constraint.
		   *     * **pattern** [Boolean] &mdash; Validates that a string value matches a
		   *       regular expression.
		   *     * **enum** [Boolean] &mdash; Validates that a string value matches one
		   *       of the allowable enum values.
		   */
		  constructor: function ParamValidator(validation) {
		    if (validation === true || validation === undefined) {
		      validation = {'min': true};
		    }
		    this.validation = validation;
		  },

		  validate: function validate(shape, params, context) {
		    this.errors = [];
		    this.validateMember(shape, params || {}, context || 'params');

		    if (this.errors.length > 1) {
		      var msg = this.errors.join('\n* ');
		      msg = 'There were ' + this.errors.length +
		        ' validation errors:\n* ' + msg;
		      throw AWS.util.error(new Error(msg),
		        {code: 'MultipleValidationErrors', errors: this.errors});
		    } else if (this.errors.length === 1) {
		      throw this.errors[0];
		    } else {
		      return true;
		    }
		  },

		  fail: function fail(code, message) {
		    this.errors.push(AWS.util.error(new Error(message), {code: code}));
		  },

		  validateStructure: function validateStructure(shape, params, context) {
		    this.validateType(params, context, ['object'], 'structure');

		    var paramName;
		    for (var i = 0; shape.required && i < shape.required.length; i++) {
		      paramName = shape.required[i];
		      var value = params[paramName];
		      if (value === undefined || value === null) {
		        this.fail('MissingRequiredParameter',
		          'Missing required key \'' + paramName + '\' in ' + context);
		      }
		    }

		    // validate hash members
		    for (paramName in params) {
		      if (!Object.prototype.hasOwnProperty.call(params, paramName)) continue;

		      var paramValue = params[paramName],
		          memberShape = shape.members[paramName];

		      if (memberShape !== undefined) {
		        var memberContext = [context, paramName].join('.');
		        this.validateMember(memberShape, paramValue, memberContext);
		      } else if (paramValue !== undefined && paramValue !== null) {
		        this.fail('UnexpectedParameter',
		          'Unexpected key \'' + paramName + '\' found in ' + context);
		      }
		    }

		    return true;
		  },

		  validateMember: function validateMember(shape, param, context) {
		    switch (shape.type) {
		      case 'structure':
		        return this.validateStructure(shape, param, context);
		      case 'list':
		        return this.validateList(shape, param, context);
		      case 'map':
		        return this.validateMap(shape, param, context);
		      default:
		        return this.validateScalar(shape, param, context);
		    }
		  },

		  validateList: function validateList(shape, params, context) {
		    if (this.validateType(params, context, [Array])) {
		      this.validateRange(shape, params.length, context, 'list member count');
		      // validate array members
		      for (var i = 0; i < params.length; i++) {
		        this.validateMember(shape.member, params[i], context + '[' + i + ']');
		      }
		    }
		  },

		  validateMap: function validateMap(shape, params, context) {
		    if (this.validateType(params, context, ['object'], 'map')) {
		      // Build up a count of map members to validate range traits.
		      var mapCount = 0;
		      for (var param in params) {
		        if (!Object.prototype.hasOwnProperty.call(params, param)) continue;
		        // Validate any map key trait constraints
		        this.validateMember(shape.key, param,
		                            context + '[key=\'' + param + '\']');
		        this.validateMember(shape.value, params[param],
		                            context + '[\'' + param + '\']');
		        mapCount++;
		      }
		      this.validateRange(shape, mapCount, context, 'map member count');
		    }
		  },

		  validateScalar: function validateScalar(shape, value, context) {
		    switch (shape.type) {
		      case null:
		      case undefined:
		      case 'string':
		        return this.validateString(shape, value, context);
		      case 'base64':
		      case 'binary':
		        return this.validatePayload(value, context);
		      case 'integer':
		      case 'float':
		        return this.validateNumber(shape, value, context);
		      case 'boolean':
		        return this.validateType(value, context, ['boolean']);
		      case 'timestamp':
		        return this.validateType(value, context, [Date,
		          /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?Z$/, 'number'],
		          'Date object, ISO-8601 string, or a UNIX timestamp');
		      default:
		        return this.fail('UnkownType', 'Unhandled type ' +
		                         shape.type + ' for ' + context);
		    }
		  },

		  validateString: function validateString(shape, value, context) {
		    var validTypes = ['string'];
		    if (shape.isJsonValue) {
		      validTypes = validTypes.concat(['number', 'object', 'boolean']);
		    }
		    if (value !== null && this.validateType(value, context, validTypes)) {
		      this.validateEnum(shape, value, context);
		      this.validateRange(shape, value.length, context, 'string length');
		      this.validatePattern(shape, value, context);
		      this.validateUri(shape, value, context);
		    }
		  },

		  validateUri: function validateUri(shape, value, context) {
		    if (shape['location'] === 'uri') {
		      if (value.length === 0) {
		        this.fail('UriParameterError', 'Expected uri parameter to have length >= 1,'
		          + ' but found "' + value +'" for ' + context);
		      }
		    }
		  },

		  validatePattern: function validatePattern(shape, value, context) {
		    if (this.validation['pattern'] && shape['pattern'] !== undefined) {
		      if (!(new RegExp(shape['pattern'])).test(value)) {
		        this.fail('PatternMatchError', 'Provided value "' + value + '" '
		          + 'does not match regex pattern /' + shape['pattern'] + '/ for '
		          + context);
		      }
		    }
		  },

		  validateRange: function validateRange(shape, value, context, descriptor) {
		    if (this.validation['min']) {
		      if (shape['min'] !== undefined && value < shape['min']) {
		        this.fail('MinRangeError', 'Expected ' + descriptor + ' >= '
		          + shape['min'] + ', but found ' + value + ' for ' + context);
		      }
		    }
		    if (this.validation['max']) {
		      if (shape['max'] !== undefined && value > shape['max']) {
		        this.fail('MaxRangeError', 'Expected ' + descriptor + ' <= '
		          + shape['max'] + ', but found ' + value + ' for ' + context);
		      }
		    }
		  },

		  validateEnum: function validateRange(shape, value, context) {
		    if (this.validation['enum'] && shape['enum'] !== undefined) {
		      // Fail if the string value is not present in the enum list
		      if (shape['enum'].indexOf(value) === -1) {
		        this.fail('EnumError', 'Found string value of ' + value + ', but '
		          + 'expected ' + shape['enum'].join('|') + ' for ' + context);
		      }
		    }
		  },

		  validateType: function validateType(value, context, acceptedTypes, type) {
		    // We will not log an error for null or undefined, but we will return
		    // false so that callers know that the expected type was not strictly met.
		    if (value === null || value === undefined) return false;

		    var foundInvalidType = false;
		    for (var i = 0; i < acceptedTypes.length; i++) {
		      if (typeof acceptedTypes[i] === 'string') {
		        if (typeof value === acceptedTypes[i]) return true;
		      } else if (acceptedTypes[i] instanceof RegExp) {
		        if ((value || '').toString().match(acceptedTypes[i])) return true;
		      } else {
		        if (value instanceof acceptedTypes[i]) return true;
		        if (AWS.util.isType(value, acceptedTypes[i])) return true;
		        if (!type && !foundInvalidType) acceptedTypes = acceptedTypes.slice();
		        acceptedTypes[i] = AWS.util.typeName(acceptedTypes[i]);
		      }
		      foundInvalidType = true;
		    }

		    var acceptedType = type;
		    if (!acceptedType) {
		      acceptedType = acceptedTypes.join(', ').replace(/,([^,]+)$/, ', or$1');
		    }

		    var vowel = acceptedType.match(/^[aeiou]/i) ? 'n' : '';
		    this.fail('InvalidParameterType', 'Expected ' + context + ' to be a' +
		              vowel + ' ' + acceptedType);
		    return false;
		  },

		  validateNumber: function validateNumber(shape, value, context) {
		    if (value === null || value === undefined) return;
		    if (typeof value === 'string') {
		      var castedValue = parseFloat(value);
		      if (castedValue.toString() === value) value = castedValue;
		    }
		    if (this.validateType(value, context, ['number'])) {
		      this.validateRange(shape, value, context, 'numeric value');
		    }
		  },

		  validatePayload: function validatePayload(value, context) {
		    if (value === null || value === undefined) return;
		    if (typeof value === 'string') return;
		    if (value && typeof value.byteLength === 'number') return; // typed arrays
		    if (AWS.util.isNode()) { // special check for buffer/stream in Node.js
		      var Stream = AWS.util.stream.Stream;
		      if (AWS.util.Buffer.isBuffer(value) || value instanceof Stream) return;
		    } else {
		      if (typeof Blob !== void 0 && value instanceof Blob) return;
		    }

		    var types = ['Buffer', 'Stream', 'File', 'Blob', 'ArrayBuffer', 'DataView'];
		    if (value) {
		      for (var i = 0; i < types.length; i++) {
		        if (AWS.util.isType(value, types[i])) return;
		        if (AWS.util.typeName(value.constructor) === types[i]) return;
		      }
		    }

		    this.fail('InvalidParameterType', 'Expected ' + context + ' to be a ' +
		      'string, Buffer, Stream, Blob, or typed array object');
		  }
		});


	/***/ })
	/******/ ])
	});
	;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	var Hmac = __webpack_require__(6);
	var Md5 = __webpack_require__(12);
	var Sha1 = __webpack_require__(13);
	var Sha256 = __webpack_require__(14);

	/**
	 * @api private
	 */
	module.exports = exports = {
	    createHash: function createHash(alg) {
	      alg = alg.toLowerCase();
	      if (alg === 'md5') {
	        return new Md5();
	      } else if (alg === 'sha256') {
	        return new Sha256();
	      } else if (alg === 'sha1') {
	        return new Sha1();
	      }

	      throw new Error('Hash algorithm ' + alg + ' is not supported in the browser SDK');
	    },
	    createHmac: function createHmac(alg, key) {
	      alg = alg.toLowerCase();
	      if (alg === 'md5') {
	        return new Hmac(Md5, key);
	      } else if (alg === 'sha256') {
	        return new Hmac(Sha256, key);
	      } else if (alg === 'sha1') {
	        return new Hmac(Sha1, key);
	      }

	      throw new Error('HMAC algorithm ' + alg + ' is not supported in the browser SDK');
	    },
	    createSign: function() {
	      throw new Error('createSign is not implemented in the browser');
	    }
	  };


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	var hashUtils = __webpack_require__(7);

	/**
	 * @api private
	 */
	function Hmac(hashCtor, secret) {
	    this.hash = new hashCtor();
	    this.outer = new hashCtor();

	    var inner = bufferFromSecret(hashCtor, secret);
	    var outer = new Uint8Array(hashCtor.BLOCK_SIZE);
	    outer.set(inner);

	    for (var i = 0; i < hashCtor.BLOCK_SIZE; i++) {
	        inner[i] ^= 0x36;
	        outer[i] ^= 0x5c;
	    }

	    this.hash.update(inner);
	    this.outer.update(outer);

	    // Zero out the copied key buffer.
	    for (var i = 0; i < inner.byteLength; i++) {
	        inner[i] = 0;
	    }
	}

	/**
	 * @api private
	 */
	module.exports = exports = Hmac;

	Hmac.prototype.update = function (toHash) {
	    if (hashUtils.isEmptyData(toHash) || this.error) {
	        return this;
	    }

	    try {
	        this.hash.update(hashUtils.convertToBuffer(toHash));
	    } catch (e) {
	        this.error = e;
	    }

	    return this;
	};

	Hmac.prototype.digest = function (encoding) {
	    if (!this.outer.finished) {
	        this.outer.update(this.hash.digest());
	    }

	    return this.outer.digest(encoding);
	};

	function bufferFromSecret(hashCtor, secret) {
	    var input = hashUtils.convertToBuffer(secret);
	    if (input.byteLength > hashCtor.BLOCK_SIZE) {
	        var bufferHash = new hashCtor;
	        bufferHash.update(input);
	        input = bufferHash.digest();
	    }
	    var buffer = new Uint8Array(hashCtor.BLOCK_SIZE);
	    buffer.set(input);
	    return buffer;
	}


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	var Buffer = __webpack_require__(8).Buffer;

	/**
	 * This is a polyfill for the static method `isView` of `ArrayBuffer`, which is
	 * e.g. missing in IE 10.
	 *
	 * @api private
	 */
	if (
	    typeof ArrayBuffer !== 'undefined' &&
	    typeof ArrayBuffer.isView === 'undefined'
	) {
	    ArrayBuffer.isView = function(arg) {
	        return viewStrings.indexOf(Object.prototype.toString.call(arg)) > -1;
	    };
	}

	/**
	 * @api private
	 */
	var viewStrings = [
	    '[object Int8Array]',
	    '[object Uint8Array]',
	    '[object Uint8ClampedArray]',
	    '[object Int16Array]',
	    '[object Uint16Array]',
	    '[object Int32Array]',
	    '[object Uint32Array]',
	    '[object Float32Array]',
	    '[object Float64Array]',
	    '[object DataView]',
	];

	/**
	 * @api private
	 */
	function isEmptyData(data) {
	    if (typeof data === 'string') {
	        return data.length === 0;
	    }
	    return data.byteLength === 0;
	}

	/**
	 * @api private
	 */
	function convertToBuffer(data) {
	    if (typeof data === 'string') {
	        data = new Buffer(data, 'utf8');
	    }

	    if (ArrayBuffer.isView(data)) {
	        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
	    }

	    return new Uint8Array(data);
	}

	/**
	 * @api private
	 */
	module.exports = exports = {
	    isEmptyData: isEmptyData,
	    convertToBuffer: convertToBuffer,
	};


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */

	'use strict'

	var base64 = __webpack_require__(9)
	var ieee754 = __webpack_require__(10)
	var isArray = __webpack_require__(11)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()

	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	exports.kMaxLength = kMaxLength()

	function typedArraySupport () {
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length)
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length)
	    }
	    that.length = length
	  }

	  return that
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}

	Buffer.poolSize = 8192 // not used by this implementation

	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype
	  return arr
	}

	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }

	  return fromObject(that, value)
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	}

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer[Symbol.species] === Buffer) {
	    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	    Object.defineProperty(Buffer, Symbol.species, {
	      value: null,
	      configurable: true
	    })
	  }
	}

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}

	function alloc (that, size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	}

	function allocUnsafe (that, size) {
	  assertSize(size)
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }

	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }

	  var length = byteLength(string, encoding) | 0
	  that = createBuffer(that, length)

	  var actual = that.write(string, encoding)

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual)
	  }

	  return that
	}

	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  that = createBuffer(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength // this throws if `array` is not a valid ArrayBuffer

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array)
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset)
	  } else {
	    array = new Uint8Array(array, byteOffset, length)
	  }

	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array)
	  }
	  return that
	}

	function fromObject (that, obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    that = createBuffer(that, len)

	    if (that.length === 0) {
	      return that
	    }

	    obj.copy(that, 0, 0, len)
	    return that
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }

	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }

	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}

	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8'

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true

	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}

	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}

	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}

	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }

	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0

	  if (this === target) return 0

	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)

	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}

	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end)
	    newBuf.__proto__ = Buffer.prototype
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }

	  return len
	}

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0

	  if (!val) val = 0

	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString())
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }

	  return this
	}

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 9 */
/***/ (function(module, exports) {

	'use strict'

	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray

	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}

	// Support decoding URL-safe base64 strings, as Node.js does.
	// See: https://en.wikipedia.org/wiki/Base64#URL_applications
	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63

	function getLens (b64) {
	  var len = b64.length

	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // Trim off extra bytes after placeholder bytes are found
	  // See: https://github.com/beatgammit/base64-js/issues/42
	  var validLen = b64.indexOf('=')
	  if (validLen === -1) validLen = len

	  var placeHoldersLen = validLen === len
	    ? 0
	    : 4 - (validLen % 4)

	  return [validLen, placeHoldersLen]
	}

	// base64 is 4/3 + up to two characters of the original data
	function byteLength (b64) {
	  var lens = getLens(b64)
	  var validLen = lens[0]
	  var placeHoldersLen = lens[1]
	  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
	}

	function _byteLength (b64, validLen, placeHoldersLen) {
	  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
	}

	function toByteArray (b64) {
	  var tmp
	  var lens = getLens(b64)
	  var validLen = lens[0]
	  var placeHoldersLen = lens[1]

	  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

	  var curByte = 0

	  // if there are placeholders, only get up to the last complete 4 chars
	  var len = placeHoldersLen > 0
	    ? validLen - 4
	    : validLen

	  var i
	  for (i = 0; i < len; i += 4) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 18) |
	      (revLookup[b64.charCodeAt(i + 1)] << 12) |
	      (revLookup[b64.charCodeAt(i + 2)] << 6) |
	      revLookup[b64.charCodeAt(i + 3)]
	    arr[curByte++] = (tmp >> 16) & 0xFF
	    arr[curByte++] = (tmp >> 8) & 0xFF
	    arr[curByte++] = tmp & 0xFF
	  }

	  if (placeHoldersLen === 2) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 2) |
	      (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[curByte++] = tmp & 0xFF
	  }

	  if (placeHoldersLen === 1) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 10) |
	      (revLookup[b64.charCodeAt(i + 1)] << 4) |
	      (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[curByte++] = (tmp >> 8) & 0xFF
	    arr[curByte++] = tmp & 0xFF
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] +
	    lookup[num >> 12 & 0x3F] +
	    lookup[num >> 6 & 0x3F] +
	    lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp =
	      ((uint8[i] << 16) & 0xFF0000) +
	      ((uint8[i + 1] << 8) & 0xFF00) +
	      (uint8[i + 2] & 0xFF)
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    parts.push(
	      lookup[tmp >> 2] +
	      lookup[(tmp << 4) & 0x3F] +
	      '=='
	    )
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
	    parts.push(
	      lookup[tmp >> 10] +
	      lookup[(tmp >> 4) & 0x3F] +
	      lookup[(tmp << 2) & 0x3F] +
	      '='
	    )
	  }

	  return parts.join('')
	}


/***/ }),
/* 10 */
/***/ (function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = (nBytes * 8) - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = (nBytes * 8) - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = ((value * c) - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ }),
/* 11 */
/***/ (function(module, exports) {

	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	var hashUtils = __webpack_require__(7);
	var Buffer = __webpack_require__(8).Buffer;

	var BLOCK_SIZE = 64;

	var DIGEST_LENGTH = 16;

	var INIT = [
	    0x67452301,
	    0xefcdab89,
	    0x98badcfe,
	    0x10325476,
	];

	/**
	 * @api private
	 */
	function Md5() {
	    this.state = [
	        0x67452301,
	        0xefcdab89,
	        0x98badcfe,
	        0x10325476,
	    ];
	    this.buffer = new DataView(new ArrayBuffer(BLOCK_SIZE));
	    this.bufferLength = 0;
	    this.bytesHashed = 0;
	    this.finished = false;
	}

	/**
	 * @api private
	 */
	module.exports = exports = Md5;

	Md5.BLOCK_SIZE = BLOCK_SIZE;

	Md5.prototype.update = function (sourceData) {
	    if (hashUtils.isEmptyData(sourceData)) {
	        return this;
	    } else if (this.finished) {
	        throw new Error('Attempted to update an already finished hash.');
	    }

	    var data = hashUtils.convertToBuffer(sourceData);
	    var position = 0;
	    var byteLength = data.byteLength;
	    this.bytesHashed += byteLength;
	    while (byteLength > 0) {
	        this.buffer.setUint8(this.bufferLength++, data[position++]);
	        byteLength--;
	        if (this.bufferLength === BLOCK_SIZE) {
	            this.hashBuffer();
	            this.bufferLength = 0;
	        }
	    }

	    return this;
	};

	Md5.prototype.digest = function (encoding) {
	    if (!this.finished) {
	        var _a = this, buffer = _a.buffer, undecoratedLength = _a.bufferLength, bytesHashed = _a.bytesHashed;
	        var bitsHashed = bytesHashed * 8;
	        buffer.setUint8(this.bufferLength++, 128);
	        // Ensure the final block has enough room for the hashed length
	        if (undecoratedLength % BLOCK_SIZE >= BLOCK_SIZE - 8) {
	            for (var i = this.bufferLength; i < BLOCK_SIZE; i++) {
	                buffer.setUint8(i, 0);
	            }
	            this.hashBuffer();
	            this.bufferLength = 0;
	        }
	        for (var i = this.bufferLength; i < BLOCK_SIZE - 8; i++) {
	            buffer.setUint8(i, 0);
	        }
	        buffer.setUint32(BLOCK_SIZE - 8, bitsHashed >>> 0, true);
	        buffer.setUint32(BLOCK_SIZE - 4, Math.floor(bitsHashed / 0x100000000), true);
	        this.hashBuffer();
	        this.finished = true;
	    }
	    var out = new DataView(new ArrayBuffer(DIGEST_LENGTH));
	    for (var i = 0; i < 4; i++) {
	        out.setUint32(i * 4, this.state[i], true);
	    }
	    var buff = new Buffer(out.buffer, out.byteOffset, out.byteLength);
	    return encoding ? buff.toString(encoding) : buff;
	};

	Md5.prototype.hashBuffer = function () {
	    var _a = this, buffer = _a.buffer, state = _a.state;
	    var a = state[0], b = state[1], c = state[2], d = state[3];
	    a = ff(a, b, c, d, buffer.getUint32(0, true), 7, 0xd76aa478);
	    d = ff(d, a, b, c, buffer.getUint32(4, true), 12, 0xe8c7b756);
	    c = ff(c, d, a, b, buffer.getUint32(8, true), 17, 0x242070db);
	    b = ff(b, c, d, a, buffer.getUint32(12, true), 22, 0xc1bdceee);
	    a = ff(a, b, c, d, buffer.getUint32(16, true), 7, 0xf57c0faf);
	    d = ff(d, a, b, c, buffer.getUint32(20, true), 12, 0x4787c62a);
	    c = ff(c, d, a, b, buffer.getUint32(24, true), 17, 0xa8304613);
	    b = ff(b, c, d, a, buffer.getUint32(28, true), 22, 0xfd469501);
	    a = ff(a, b, c, d, buffer.getUint32(32, true), 7, 0x698098d8);
	    d = ff(d, a, b, c, buffer.getUint32(36, true), 12, 0x8b44f7af);
	    c = ff(c, d, a, b, buffer.getUint32(40, true), 17, 0xffff5bb1);
	    b = ff(b, c, d, a, buffer.getUint32(44, true), 22, 0x895cd7be);
	    a = ff(a, b, c, d, buffer.getUint32(48, true), 7, 0x6b901122);
	    d = ff(d, a, b, c, buffer.getUint32(52, true), 12, 0xfd987193);
	    c = ff(c, d, a, b, buffer.getUint32(56, true), 17, 0xa679438e);
	    b = ff(b, c, d, a, buffer.getUint32(60, true), 22, 0x49b40821);
	    a = gg(a, b, c, d, buffer.getUint32(4, true), 5, 0xf61e2562);
	    d = gg(d, a, b, c, buffer.getUint32(24, true), 9, 0xc040b340);
	    c = gg(c, d, a, b, buffer.getUint32(44, true), 14, 0x265e5a51);
	    b = gg(b, c, d, a, buffer.getUint32(0, true), 20, 0xe9b6c7aa);
	    a = gg(a, b, c, d, buffer.getUint32(20, true), 5, 0xd62f105d);
	    d = gg(d, a, b, c, buffer.getUint32(40, true), 9, 0x02441453);
	    c = gg(c, d, a, b, buffer.getUint32(60, true), 14, 0xd8a1e681);
	    b = gg(b, c, d, a, buffer.getUint32(16, true), 20, 0xe7d3fbc8);
	    a = gg(a, b, c, d, buffer.getUint32(36, true), 5, 0x21e1cde6);
	    d = gg(d, a, b, c, buffer.getUint32(56, true), 9, 0xc33707d6);
	    c = gg(c, d, a, b, buffer.getUint32(12, true), 14, 0xf4d50d87);
	    b = gg(b, c, d, a, buffer.getUint32(32, true), 20, 0x455a14ed);
	    a = gg(a, b, c, d, buffer.getUint32(52, true), 5, 0xa9e3e905);
	    d = gg(d, a, b, c, buffer.getUint32(8, true), 9, 0xfcefa3f8);
	    c = gg(c, d, a, b, buffer.getUint32(28, true), 14, 0x676f02d9);
	    b = gg(b, c, d, a, buffer.getUint32(48, true), 20, 0x8d2a4c8a);
	    a = hh(a, b, c, d, buffer.getUint32(20, true), 4, 0xfffa3942);
	    d = hh(d, a, b, c, buffer.getUint32(32, true), 11, 0x8771f681);
	    c = hh(c, d, a, b, buffer.getUint32(44, true), 16, 0x6d9d6122);
	    b = hh(b, c, d, a, buffer.getUint32(56, true), 23, 0xfde5380c);
	    a = hh(a, b, c, d, buffer.getUint32(4, true), 4, 0xa4beea44);
	    d = hh(d, a, b, c, buffer.getUint32(16, true), 11, 0x4bdecfa9);
	    c = hh(c, d, a, b, buffer.getUint32(28, true), 16, 0xf6bb4b60);
	    b = hh(b, c, d, a, buffer.getUint32(40, true), 23, 0xbebfbc70);
	    a = hh(a, b, c, d, buffer.getUint32(52, true), 4, 0x289b7ec6);
	    d = hh(d, a, b, c, buffer.getUint32(0, true), 11, 0xeaa127fa);
	    c = hh(c, d, a, b, buffer.getUint32(12, true), 16, 0xd4ef3085);
	    b = hh(b, c, d, a, buffer.getUint32(24, true), 23, 0x04881d05);
	    a = hh(a, b, c, d, buffer.getUint32(36, true), 4, 0xd9d4d039);
	    d = hh(d, a, b, c, buffer.getUint32(48, true), 11, 0xe6db99e5);
	    c = hh(c, d, a, b, buffer.getUint32(60, true), 16, 0x1fa27cf8);
	    b = hh(b, c, d, a, buffer.getUint32(8, true), 23, 0xc4ac5665);
	    a = ii(a, b, c, d, buffer.getUint32(0, true), 6, 0xf4292244);
	    d = ii(d, a, b, c, buffer.getUint32(28, true), 10, 0x432aff97);
	    c = ii(c, d, a, b, buffer.getUint32(56, true), 15, 0xab9423a7);
	    b = ii(b, c, d, a, buffer.getUint32(20, true), 21, 0xfc93a039);
	    a = ii(a, b, c, d, buffer.getUint32(48, true), 6, 0x655b59c3);
	    d = ii(d, a, b, c, buffer.getUint32(12, true), 10, 0x8f0ccc92);
	    c = ii(c, d, a, b, buffer.getUint32(40, true), 15, 0xffeff47d);
	    b = ii(b, c, d, a, buffer.getUint32(4, true), 21, 0x85845dd1);
	    a = ii(a, b, c, d, buffer.getUint32(32, true), 6, 0x6fa87e4f);
	    d = ii(d, a, b, c, buffer.getUint32(60, true), 10, 0xfe2ce6e0);
	    c = ii(c, d, a, b, buffer.getUint32(24, true), 15, 0xa3014314);
	    b = ii(b, c, d, a, buffer.getUint32(52, true), 21, 0x4e0811a1);
	    a = ii(a, b, c, d, buffer.getUint32(16, true), 6, 0xf7537e82);
	    d = ii(d, a, b, c, buffer.getUint32(44, true), 10, 0xbd3af235);
	    c = ii(c, d, a, b, buffer.getUint32(8, true), 15, 0x2ad7d2bb);
	    b = ii(b, c, d, a, buffer.getUint32(36, true), 21, 0xeb86d391);
	    state[0] = (a + state[0]) & 0xFFFFFFFF;
	    state[1] = (b + state[1]) & 0xFFFFFFFF;
	    state[2] = (c + state[2]) & 0xFFFFFFFF;
	    state[3] = (d + state[3]) & 0xFFFFFFFF;
	};

	function cmn(q, a, b, x, s, t) {
	    a = (((a + q) & 0xFFFFFFFF) + ((x + t) & 0xFFFFFFFF)) & 0xFFFFFFFF;
	    return (((a << s) | (a >>> (32 - s))) + b) & 0xFFFFFFFF;
	}

	function ff(a, b, c, d, x, s, t) {
	    return cmn((b & c) | ((~b) & d), a, b, x, s, t);
	}

	function gg(a, b, c, d, x, s, t) {
	    return cmn((b & d) | (c & (~d)), a, b, x, s, t);
	}

	function hh(a, b, c, d, x, s, t) {
	    return cmn(b ^ c ^ d, a, b, x, s, t);
	}

	function ii(a, b, c, d, x, s, t) {
	    return cmn(c ^ (b | (~d)), a, b, x, s, t);
	}


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	var Buffer = __webpack_require__(8).Buffer;
	var hashUtils = __webpack_require__(7);

	var BLOCK_SIZE = 64;

	var DIGEST_LENGTH = 20;

	var KEY = new Uint32Array([
	    0x5a827999,
	    0x6ed9eba1,
	    0x8f1bbcdc | 0,
	    0xca62c1d6 | 0
	]);

	var INIT = [
	    0x6a09e667,
	    0xbb67ae85,
	    0x3c6ef372,
	    0xa54ff53a,
	    0x510e527f,
	    0x9b05688c,
	    0x1f83d9ab,
	    0x5be0cd19,
	];

	var MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;

	/**
	 * @api private
	 */
	function Sha1() {
	    this.h0 = 0x67452301;
	    this.h1 = 0xEFCDAB89;
	    this.h2 = 0x98BADCFE;
	    this.h3 = 0x10325476;
	    this.h4 = 0xC3D2E1F0;
	    // The first 64 bytes (16 words) is the data chunk
	    this.block = new Uint32Array(80);
	    this.offset = 0;
	    this.shift = 24;
	    this.totalLength = 0;
	}

	/**
	 * @api private
	 */
	module.exports = exports = Sha1;

	Sha1.BLOCK_SIZE = BLOCK_SIZE;

	Sha1.prototype.update = function (data) {
	    if (this.finished) {
	        throw new Error('Attempted to update an already finished hash.');
	    }

	    if (hashUtils.isEmptyData(data)) {
	        return this;
	    }

	    data = hashUtils.convertToBuffer(data);

	    var length = data.length;
	    this.totalLength += length * 8;
	    for (var i = 0; i < length; i++) {
	        this.write(data[i]);
	    }

	    return this;
	};

	Sha1.prototype.write = function write(byte) {
	    this.block[this.offset] |= (byte & 0xff) << this.shift;
	    if (this.shift) {
	        this.shift -= 8;
	    } else {
	        this.offset++;
	        this.shift = 24;
	    }

	    if (this.offset === 16) this.processBlock();
	};

	Sha1.prototype.digest = function (encoding) {
	    // Pad
	    this.write(0x80);
	    if (this.offset > 14 || (this.offset === 14 && this.shift < 24)) {
	      this.processBlock();
	    }
	    this.offset = 14;
	    this.shift = 24;

	    // 64-bit length big-endian
	    this.write(0x00); // numbers this big aren't accurate in javascript anyway
	    this.write(0x00); // ..So just hard-code to zero.
	    this.write(this.totalLength > 0xffffffffff ? this.totalLength / 0x10000000000 : 0x00);
	    this.write(this.totalLength > 0xffffffff ? this.totalLength / 0x100000000 : 0x00);
	    for (var s = 24; s >= 0; s -= 8) {
	        this.write(this.totalLength >> s);
	    }
	    // The value in state is little-endian rather than big-endian, so flip
	    // each word into a new Uint8Array
	    var out = new Buffer(DIGEST_LENGTH);
	    var outView = new DataView(out.buffer);
	    outView.setUint32(0, this.h0, false);
	    outView.setUint32(4, this.h1, false);
	    outView.setUint32(8, this.h2, false);
	    outView.setUint32(12, this.h3, false);
	    outView.setUint32(16, this.h4, false);

	    return encoding ? out.toString(encoding) : out;
	};

	Sha1.prototype.processBlock = function processBlock() {
	    // Extend the sixteen 32-bit words into eighty 32-bit words:
	    for (var i = 16; i < 80; i++) {
	      var w = this.block[i - 3] ^ this.block[i - 8] ^ this.block[i - 14] ^ this.block[i - 16];
	      this.block[i] = (w << 1) | (w >>> 31);
	    }

	    // Initialize hash value for this chunk:
	    var a = this.h0;
	    var b = this.h1;
	    var c = this.h2;
	    var d = this.h3;
	    var e = this.h4;
	    var f, k;

	    // Main loop:
	    for (i = 0; i < 80; i++) {
	      if (i < 20) {
	        f = d ^ (b & (c ^ d));
	        k = 0x5A827999;
	      }
	      else if (i < 40) {
	        f = b ^ c ^ d;
	        k = 0x6ED9EBA1;
	      }
	      else if (i < 60) {
	        f = (b & c) | (d & (b | c));
	        k = 0x8F1BBCDC;
	      }
	      else {
	        f = b ^ c ^ d;
	        k = 0xCA62C1D6;
	      }
	      var temp = (a << 5 | a >>> 27) + f + e + k + (this.block[i]|0);
	      e = d;
	      d = c;
	      c = (b << 30 | b >>> 2);
	      b = a;
	      a = temp;
	    }

	    // Add this chunk's hash to result so far:
	    this.h0 = (this.h0 + a) | 0;
	    this.h1 = (this.h1 + b) | 0;
	    this.h2 = (this.h2 + c) | 0;
	    this.h3 = (this.h3 + d) | 0;
	    this.h4 = (this.h4 + e) | 0;

	    // The block is now reusable.
	    this.offset = 0;
	    for (i = 0; i < 16; i++) {
	        this.block[i] = 0;
	    }
	};


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	var Buffer = __webpack_require__(8).Buffer;
	var hashUtils = __webpack_require__(7);

	var BLOCK_SIZE = 64;

	var DIGEST_LENGTH = 32;

	var KEY = new Uint32Array([
	    0x428a2f98,
	    0x71374491,
	    0xb5c0fbcf,
	    0xe9b5dba5,
	    0x3956c25b,
	    0x59f111f1,
	    0x923f82a4,
	    0xab1c5ed5,
	    0xd807aa98,
	    0x12835b01,
	    0x243185be,
	    0x550c7dc3,
	    0x72be5d74,
	    0x80deb1fe,
	    0x9bdc06a7,
	    0xc19bf174,
	    0xe49b69c1,
	    0xefbe4786,
	    0x0fc19dc6,
	    0x240ca1cc,
	    0x2de92c6f,
	    0x4a7484aa,
	    0x5cb0a9dc,
	    0x76f988da,
	    0x983e5152,
	    0xa831c66d,
	    0xb00327c8,
	    0xbf597fc7,
	    0xc6e00bf3,
	    0xd5a79147,
	    0x06ca6351,
	    0x14292967,
	    0x27b70a85,
	    0x2e1b2138,
	    0x4d2c6dfc,
	    0x53380d13,
	    0x650a7354,
	    0x766a0abb,
	    0x81c2c92e,
	    0x92722c85,
	    0xa2bfe8a1,
	    0xa81a664b,
	    0xc24b8b70,
	    0xc76c51a3,
	    0xd192e819,
	    0xd6990624,
	    0xf40e3585,
	    0x106aa070,
	    0x19a4c116,
	    0x1e376c08,
	    0x2748774c,
	    0x34b0bcb5,
	    0x391c0cb3,
	    0x4ed8aa4a,
	    0x5b9cca4f,
	    0x682e6ff3,
	    0x748f82ee,
	    0x78a5636f,
	    0x84c87814,
	    0x8cc70208,
	    0x90befffa,
	    0xa4506ceb,
	    0xbef9a3f7,
	    0xc67178f2
	]);

	var INIT = [
	    0x6a09e667,
	    0xbb67ae85,
	    0x3c6ef372,
	    0xa54ff53a,
	    0x510e527f,
	    0x9b05688c,
	    0x1f83d9ab,
	    0x5be0cd19,
	];

	var MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;

	/**
	 * @private
	 */
	function Sha256() {
	    this.state = [
	        0x6a09e667,
	        0xbb67ae85,
	        0x3c6ef372,
	        0xa54ff53a,
	        0x510e527f,
	        0x9b05688c,
	        0x1f83d9ab,
	        0x5be0cd19,
	    ];
	    this.temp = new Int32Array(64);
	    this.buffer = new Uint8Array(64);
	    this.bufferLength = 0;
	    this.bytesHashed = 0;
	    /**
	     * @private
	     */
	    this.finished = false;
	}

	/**
	 * @api private
	 */
	module.exports = exports = Sha256;

	Sha256.BLOCK_SIZE = BLOCK_SIZE;

	Sha256.prototype.update = function (data) {
	    if (this.finished) {
	        throw new Error('Attempted to update an already finished hash.');
	    }

	    if (hashUtils.isEmptyData(data)) {
	        return this;
	    }

	    data = hashUtils.convertToBuffer(data);

	    var position = 0;
	    var byteLength = data.byteLength;
	    this.bytesHashed += byteLength;
	    if (this.bytesHashed * 8 > MAX_HASHABLE_LENGTH) {
	        throw new Error('Cannot hash more than 2^53 - 1 bits');
	    }

	    while (byteLength > 0) {
	        this.buffer[this.bufferLength++] = data[position++];
	        byteLength--;
	        if (this.bufferLength === BLOCK_SIZE) {
	            this.hashBuffer();
	            this.bufferLength = 0;
	        }
	    }

	    return this;
	};

	Sha256.prototype.digest = function (encoding) {
	    if (!this.finished) {
	        var bitsHashed = this.bytesHashed * 8;
	        var bufferView = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);
	        var undecoratedLength = this.bufferLength;
	        bufferView.setUint8(this.bufferLength++, 0x80);
	        // Ensure the final block has enough room for the hashed length
	        if (undecoratedLength % BLOCK_SIZE >= BLOCK_SIZE - 8) {
	            for (var i = this.bufferLength; i < BLOCK_SIZE; i++) {
	                bufferView.setUint8(i, 0);
	            }
	            this.hashBuffer();
	            this.bufferLength = 0;
	        }
	        for (var i = this.bufferLength; i < BLOCK_SIZE - 8; i++) {
	            bufferView.setUint8(i, 0);
	        }
	        bufferView.setUint32(BLOCK_SIZE - 8, Math.floor(bitsHashed / 0x100000000), true);
	        bufferView.setUint32(BLOCK_SIZE - 4, bitsHashed);
	        this.hashBuffer();
	        this.finished = true;
	    }
	    // The value in state is little-endian rather than big-endian, so flip
	    // each word into a new Uint8Array
	    var out = new Buffer(DIGEST_LENGTH);
	    for (var i = 0; i < 8; i++) {
	        out[i * 4] = (this.state[i] >>> 24) & 0xff;
	        out[i * 4 + 1] = (this.state[i] >>> 16) & 0xff;
	        out[i * 4 + 2] = (this.state[i] >>> 8) & 0xff;
	        out[i * 4 + 3] = (this.state[i] >>> 0) & 0xff;
	    }
	    return encoding ? out.toString(encoding) : out;
	};

	Sha256.prototype.hashBuffer = function () {
	    var _a = this,
	        buffer = _a.buffer,
	        state = _a.state;
	    var state0 = state[0],
	        state1 = state[1],
	        state2 = state[2],
	        state3 = state[3],
	        state4 = state[4],
	        state5 = state[5],
	        state6 = state[6],
	        state7 = state[7];
	    for (var i = 0; i < BLOCK_SIZE; i++) {
	        if (i < 16) {
	            this.temp[i] = (((buffer[i * 4] & 0xff) << 24) |
	                ((buffer[(i * 4) + 1] & 0xff) << 16) |
	                ((buffer[(i * 4) + 2] & 0xff) << 8) |
	                (buffer[(i * 4) + 3] & 0xff));
	        }
	        else {
	            var u = this.temp[i - 2];
	            var t1_1 = (u >>> 17 | u << 15) ^
	                (u >>> 19 | u << 13) ^
	                (u >>> 10);
	            u = this.temp[i - 15];
	            var t2_1 = (u >>> 7 | u << 25) ^
	                (u >>> 18 | u << 14) ^
	                (u >>> 3);
	            this.temp[i] = (t1_1 + this.temp[i - 7] | 0) +
	                (t2_1 + this.temp[i - 16] | 0);
	        }
	        var t1 = (((((state4 >>> 6 | state4 << 26) ^
	            (state4 >>> 11 | state4 << 21) ^
	            (state4 >>> 25 | state4 << 7))
	            + ((state4 & state5) ^ (~state4 & state6))) | 0)
	            + ((state7 + ((KEY[i] + this.temp[i]) | 0)) | 0)) | 0;
	        var t2 = (((state0 >>> 2 | state0 << 30) ^
	            (state0 >>> 13 | state0 << 19) ^
	            (state0 >>> 22 | state0 << 10)) + ((state0 & state1) ^ (state0 & state2) ^ (state1 & state2))) | 0;
	        state7 = state6;
	        state6 = state5;
	        state5 = state4;
	        state4 = (state3 + t1) | 0;
	        state3 = state2;
	        state2 = state1;
	        state1 = state0;
	        state0 = (t1 + t2) | 0;
	    }
	    state[0] += state0;
	    state[1] += state1;
	    state[2] += state2;
	    state[3] += state3;
	    state[4] += state4;
	    state[5] += state5;
	    state[6] += state6;
	    state[7] += state7;
	};


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var punycode = __webpack_require__(16);

	exports.parse = urlParse;
	exports.resolve = urlResolve;
	exports.resolveObject = urlResolveObject;
	exports.format = urlFormat;

	exports.Url = Url;

	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}

	// Reference: RFC 3986, RFC 1808, RFC 2396

	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	    portPattern = /:[0-9]*$/,

	    // RFC 2396: characters reserved for delimiting URLs.
	    // We actually just auto-escape these.
	    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

	    // RFC 2396: characters not allowed for various reasons.
	    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

	    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	    autoEscape = ['\''].concat(unwise),
	    // Characters that are never ever allowed in a hostname.
	    // Note that any invalid chars are also handled, but these
	    // are the ones that are *expected* to be seen, so we fast-path
	    // them.
	    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	    hostEndingChars = ['/', '?', '#'],
	    hostnameMaxLen = 255,
	    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
	    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,
	    // protocols that can allow "unsafe" and "unwise" chars.
	    unsafeProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that never have a hostname.
	    hostlessProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that always contain a // bit.
	    slashedProtocol = {
	      'http': true,
	      'https': true,
	      'ftp': true,
	      'gopher': true,
	      'file': true,
	      'http:': true,
	      'https:': true,
	      'ftp:': true,
	      'gopher:': true,
	      'file:': true
	    },
	    querystring = __webpack_require__(18);

	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && isObject(url) && url instanceof Url) return url;

	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}

	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  if (!isString(url)) {
	    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	  }

	  var rest = url;

	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();

	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    this.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }

	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      this.slashes = true;
	    }
	  }

	  if (!hostlessProtocol[proto] &&
	      (slashes || (proto && !slashedProtocol[proto]))) {

	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c

	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.

	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (var i = 0; i < hostEndingChars.length; i++) {
	      var hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }

	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }

	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      this.auth = decodeURIComponent(auth);
	    }

	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (var i = 0; i < nonHostChars.length; i++) {
	      var hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1)
	      hostEnd = rest.length;

	    this.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);

	    // pull out port.
	    this.parseHost();

	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    this.hostname = this.hostname || '';

	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = this.hostname[0] === '[' &&
	        this.hostname[this.hostname.length - 1] === ']';

	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = this.hostname.split(/\./);
	      for (var i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            this.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }

	    if (this.hostname.length > hostnameMaxLen) {
	      this.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      this.hostname = this.hostname.toLowerCase();
	    }

	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a puny coded representation of "domain".
	      // It only converts the part of the domain name that
	      // has non ASCII characters. I.e. it dosent matter if
	      // you call it with a domain that already is in ASCII.
	      var domainArray = this.hostname.split('.');
	      var newOut = [];
	      for (var i = 0; i < domainArray.length; ++i) {
	        var s = domainArray[i];
	        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
	            'xn--' + punycode.encode(s) : s);
	      }
	      this.hostname = newOut.join('.');
	    }

	    var p = this.port ? ':' + this.port : '';
	    var h = this.hostname || '';
	    this.host = h + p;
	    this.href += this.host;

	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }

	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {

	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (var i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }


	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    this.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    this.search = rest.substr(qm);
	    this.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      this.query = querystring.parse(this.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    this.search = '';
	    this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	      this.hostname && !this.pathname) {
	    this.pathname = '/';
	  }

	  //to support http.request
	  if (this.pathname || this.search) {
	    var p = this.pathname || '';
	    var s = this.search || '';
	    this.path = p + s;
	  }

	  // finally, reconstruct the href based on what has been validated.
	  this.href = this.format();
	  return this;
	};

	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}

	Url.prototype.format = function() {
	  var auth = this.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }

	  var protocol = this.protocol || '',
	      pathname = this.pathname || '',
	      hash = this.hash || '',
	      host = false,
	      query = '';

	  if (this.host) {
	    host = auth + this.host;
	  } else if (this.hostname) {
	    host = auth + (this.hostname.indexOf(':') === -1 ?
	        this.hostname :
	        '[' + this.hostname + ']');
	    if (this.port) {
	      host += ':' + this.port;
	    }
	  }

	  if (this.query &&
	      isObject(this.query) &&
	      Object.keys(this.query).length) {
	    query = querystring.stringify(this.query);
	  }

	  var search = this.search || (query && ('?' + query)) || '';

	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (this.slashes ||
	      (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }

	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;

	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');

	  return protocol + host + pathname + search + hash;
	};

	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}

	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};

	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}

	Url.prototype.resolveObject = function(relative) {
	  if (isString(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }

	  var result = new Url();
	  Object.keys(this).forEach(function(k) {
	    result[k] = this[k];
	  }, this);

	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;

	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }

	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    Object.keys(relative).forEach(function(k) {
	      if (k !== 'protocol')
	        result[k] = relative[k];
	    });

	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] &&
	        result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }

	    result.href = result.format();
	    return result;
	  }

	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      Object.keys(relative).forEach(function(k) {
	        result[k] = relative[k];
	      });
	      result.href = result.format();
	      return result;
	    }

	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      var relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }

	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	      isRelAbs = (
	          relative.host ||
	          relative.pathname && relative.pathname.charAt(0) === '/'
	      ),
	      mustEndAbs = (isRelAbs || isSourceAbs ||
	                    (result.host && relative.pathname)),
	      removeAllDots = mustEndAbs,
	      srcPath = result.pathname && result.pathname.split('/') || [],
	      relPath = relative.pathname && relative.pathname.split('/') || [],
	      psychotic = result.protocol && !slashedProtocol[result.protocol];

	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }

	  if (isRelAbs) {
	    // it's absolute.
	    result.host = (relative.host || relative.host === '') ?
	                  relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	                      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especialy happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                       result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!isNull(result.pathname) || !isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	                    (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }

	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }

	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	      (result.host || relative.host) && (last === '.' || last === '..') ||
	      last === '');

	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last == '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }

	  if (mustEndAbs && srcPath[0] !== '' &&
	      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }

	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
	    srcPath.push('');
	  }

	  var isAbsolute = srcPath[0] === '' ||
	      (srcPath[0] && srcPath[0].charAt(0) === '/');

	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	                                    srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especialy happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                     result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }

	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }

	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }

	  //to support request.http
	  if (!isNull(result.pathname) || !isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	                  (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};

	Url.prototype.parseHost = function() {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      this.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};

	function isString(arg) {
	  return typeof arg === "string";
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isNull(arg) {
	  return arg === null;
	}
	function isNullOrUndefined(arg) {
	  return  arg == null;
	}


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */
	;(function(root) {

		/** Detect free variables */
		var freeExports = typeof exports == 'object' && exports &&
			!exports.nodeType && exports;
		var freeModule = typeof module == 'object' && module &&
			!module.nodeType && module;
		var freeGlobal = typeof global == 'object' && global;
		if (
			freeGlobal.global === freeGlobal ||
			freeGlobal.window === freeGlobal ||
			freeGlobal.self === freeGlobal
		) {
			root = freeGlobal;
		}

		/**
		 * The `punycode` object.
		 * @name punycode
		 * @type Object
		 */
		var punycode,

		/** Highest positive signed 32-bit float value */
		maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

		/** Bootstring parameters */
		base = 36,
		tMin = 1,
		tMax = 26,
		skew = 38,
		damp = 700,
		initialBias = 72,
		initialN = 128, // 0x80
		delimiter = '-', // '\x2D'

		/** Regular expressions */
		regexPunycode = /^xn--/,
		regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

		/** Error messages */
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},

		/** Convenience shortcuts */
		baseMinusTMin = base - tMin,
		floor = Math.floor,
		stringFromCharCode = String.fromCharCode,

		/** Temporary variable */
		key;

		/*--------------------------------------------------------------------------*/

		/**
		 * A generic error utility function.
		 * @private
		 * @param {String} type The error type.
		 * @returns {Error} Throws a `RangeError` with the applicable error message.
		 */
		function error(type) {
			throw RangeError(errors[type]);
		}

		/**
		 * A generic `Array#map` utility function.
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} callback The function that gets called for every array
		 * item.
		 * @returns {Array} A new array of values returned by the callback function.
		 */
		function map(array, fn) {
			var length = array.length;
			var result = [];
			while (length--) {
				result[length] = fn(array[length]);
			}
			return result;
		}

		/**
		 * A simple `Array#map`-like wrapper to work with domain name strings or email
		 * addresses.
		 * @private
		 * @param {String} domain The domain name or email address.
		 * @param {Function} callback The function that gets called for every
		 * character.
		 * @returns {Array} A new string of characters returned by the callback
		 * function.
		 */
		function mapDomain(string, fn) {
			var parts = string.split('@');
			var result = '';
			if (parts.length > 1) {
				// In email addresses, only the domain name should be punycoded. Leave
				// the local part (i.e. everything up to `@`) intact.
				result = parts[0] + '@';
				string = parts[1];
			}
			// Avoid `split(regex)` for IE8 compatibility. See #17.
			string = string.replace(regexSeparators, '\x2E');
			var labels = string.split('.');
			var encoded = map(labels, fn).join('.');
			return result + encoded;
		}

		/**
		 * Creates an array containing the numeric code points of each Unicode
		 * character in the string. While JavaScript uses UCS-2 internally,
		 * this function will convert a pair of surrogate halves (each of which
		 * UCS-2 exposes as separate characters) into a single code point,
		 * matching UTF-16.
		 * @see `punycode.ucs2.encode`
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode.ucs2
		 * @name decode
		 * @param {String} string The Unicode input string (UCS-2).
		 * @returns {Array} The new array of code points.
		 */
		function ucs2decode(string) {
			var output = [],
			    counter = 0,
			    length = string.length,
			    value,
			    extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}

		/**
		 * Creates a string based on an array of numeric code points.
		 * @see `punycode.ucs2.decode`
		 * @memberOf punycode.ucs2
		 * @name encode
		 * @param {Array} codePoints The array of numeric code points.
		 * @returns {String} The new Unicode string (UCS-2).
		 */
		function ucs2encode(array) {
			return map(array, function(value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}

		/**
		 * Converts a basic code point into a digit/integer.
		 * @see `digitToBasic()`
		 * @private
		 * @param {Number} codePoint The basic numeric code point value.
		 * @returns {Number} The numeric value of a basic code point (for use in
		 * representing integers) in the range `0` to `base - 1`, or `base` if
		 * the code point does not represent a value.
		 */
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}

		/**
		 * Converts a digit/integer into a basic code point.
		 * @see `basicToDigit()`
		 * @private
		 * @param {Number} digit The numeric value of a basic code point.
		 * @returns {Number} The basic code point whose value (when used for
		 * representing integers) is `digit`, which needs to be in the range
		 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
		 * used; else, the lowercase form is used. The behavior is undefined
		 * if `flag` is non-zero and `digit` has no uppercase form.
		 */
		function digitToBasic(digit, flag) {
			//  0..25 map to ASCII a..z or A..Z
			// 26..35 map to ASCII 0..9
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}

		/**
		 * Bias adaptation function as per section 3.4 of RFC 3492.
		 * http://tools.ietf.org/html/rfc3492#section-3.4
		 * @private
		 */
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}

		/**
		 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The Punycode string of ASCII-only symbols.
		 * @returns {String} The resulting string of Unicode symbols.
		 */
		function decode(input) {
			// Don't use UCS-2
			var output = [],
			    inputLength = input.length,
			    out,
			    i = 0,
			    n = initialN,
			    bias = initialBias,
			    basic,
			    j,
			    index,
			    oldi,
			    w,
			    k,
			    digit,
			    t,
			    /** Cached calculation results */
			    baseMinusT;

			// Handle the basic code points: let `basic` be the number of input code
			// points before the last delimiter, or `0` if there is none, then copy
			// the first basic code points to the output.

			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}

			for (j = 0; j < basic; ++j) {
				// if it's not a basic code point
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}

			// Main decoding loop: start just after the last delimiter if any basic code
			// points were copied; start at the beginning otherwise.

			for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

				// `index` is the index of the next character to be consumed.
				// Decode a generalized variable-length integer into `delta`,
				// which gets added to `i`. The overflow checking is easier
				// if we increase `i` as we go, then subtract off its starting
				// value at the end to obtain `delta`.
				for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

					if (index >= inputLength) {
						error('invalid-input');
					}

					digit = basicToDigit(input.charCodeAt(index++));

					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}

					i += digit * w;
					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

					if (digit < t) {
						break;
					}

					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}

					w *= baseMinusT;

				}

				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);

				// `i` was supposed to wrap around from `out` to `0`,
				// incrementing `n` each time, so we'll fix that now:
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}

				n += floor(i / out);
				i %= out;

				// Insert `n` at position `i` of the output
				output.splice(i++, 0, n);

			}

			return ucs2encode(output);
		}

		/**
		 * Converts a string of Unicode symbols (e.g. a domain name label) to a
		 * Punycode string of ASCII-only symbols.
		 * @memberOf punycode
		 * @param {String} input The string of Unicode symbols.
		 * @returns {String} The resulting Punycode string of ASCII-only symbols.
		 */
		function encode(input) {
			var n,
			    delta,
			    handledCPCount,
			    basicLength,
			    bias,
			    j,
			    m,
			    q,
			    k,
			    t,
			    currentValue,
			    output = [],
			    /** `inputLength` will hold the number of code points in `input`. */
			    inputLength,
			    /** Cached calculation results */
			    handledCPCountPlusOne,
			    baseMinusT,
			    qMinusT;

			// Convert the input in UCS-2 to Unicode
			input = ucs2decode(input);

			// Cache the length
			inputLength = input.length;

			// Initialize the state
			n = initialN;
			delta = 0;
			bias = initialBias;

			// Handle the basic code points
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}

			handledCPCount = basicLength = output.length;

			// `handledCPCount` is the number of code points that have been handled;
			// `basicLength` is the number of basic code points.

			// Finish the basic string - if it is not empty - with a delimiter
			if (basicLength) {
				output.push(delimiter);
			}

			// Main encoding loop:
			while (handledCPCount < inputLength) {

				// All non-basic code points < n have been handled already. Find the next
				// larger one:
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}

				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}

				delta += (m - n) * handledCPCountPlusOne;
				n = m;

				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];

					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}

					if (currentValue == n) {
						// Represent delta as a generalized variable-length integer
						for (q = delta, k = base; /* no condition */; k += base) {
							t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(
								stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
							);
							q = floor(qMinusT / baseMinusT);
						}

						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}

				++delta;
				++n;

			}
			return output.join('');
		}

		/**
		 * Converts a Punycode string representing a domain name or an email address
		 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
		 * it doesn't matter if you call it on a string that has already been
		 * converted to Unicode.
		 * @memberOf punycode
		 * @param {String} input The Punycoded domain name or email address to
		 * convert to Unicode.
		 * @returns {String} The Unicode representation of the given Punycode
		 * string.
		 */
		function toUnicode(input) {
			return mapDomain(input, function(string) {
				return regexPunycode.test(string)
					? decode(string.slice(4).toLowerCase())
					: string;
			});
		}

		/**
		 * Converts a Unicode string representing a domain name or an email address to
		 * Punycode. Only the non-ASCII parts of the domain name will be converted,
		 * i.e. it doesn't matter if you call it with a domain that's already in
		 * ASCII.
		 * @memberOf punycode
		 * @param {String} input The domain name or email address to convert, as a
		 * Unicode string.
		 * @returns {String} The Punycode representation of the given domain name or
		 * email address.
		 */
		function toASCII(input) {
			return mapDomain(input, function(string) {
				return regexNonASCII.test(string)
					? 'xn--' + encode(string)
					: string;
			});
		}

		/*--------------------------------------------------------------------------*/

		/** Define the public API */
		punycode = {
			/**
			 * A string representing the current Punycode.js version number.
			 * @memberOf punycode
			 * @type String
			 */
			'version': '1.3.2',
			/**
			 * An object of methods to convert from JavaScript's internal character
			 * representation (UCS-2) to Unicode code points, and back.
			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode
			 * @type Object
			 */
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};

		/** Expose `punycode` */
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return punycode;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (freeExports && freeModule) {
			if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = punycode;
			} else { // in Narwhal or RingoJS v0.7.0-
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.punycode = punycode;
		}

	}(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)(module), (function() { return this; }())))

/***/ }),
/* 17 */
/***/ (function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.decode = exports.parse = __webpack_require__(19);
	exports.encode = exports.stringify = __webpack_require__(20);


/***/ }),
/* 19 */
/***/ (function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};

	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }

	  var regexp = /\+/g;
	  qs = qs.split(sep);

	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }

	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }

	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;

	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }

	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);

	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (Array.isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }

	  return obj;
	};


/***/ }),
/* 20 */
/***/ (function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;

	    case 'boolean':
	      return v ? 'true' : 'false';

	    case 'number':
	      return isFinite(v) ? v : '';

	    default:
	      return '';
	  }
	};

	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }

	  if (typeof obj === 'object') {
	    return Object.keys(obj).map(function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (Array.isArray(obj[k])) {
	        return obj[k].map(function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);

	  }

	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};


/***/ }),
/* 21 */
/***/ (function(module, exports) {

	module.exports = {
	  //provide realtime clock for performance measurement
	  now: function now() {
	    if (typeof performance !== 'undefined' && typeof performance.now === 'function') {
	      return performance.now();
	    }
	    return Date.now();
	  }
	};


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	var eventMessageChunker = __webpack_require__(23).eventMessageChunker;
	var parseEvent = __webpack_require__(24).parseEvent;

	function createEventStream(body, parser, model) {
	    var eventMessages = eventMessageChunker(body);

	    var events = [];

	    for (var i = 0; i < eventMessages.length; i++) {
	        events.push(parseEvent(parser, eventMessages[i], model));
	    }

	    return events;
	}

	/**
	 * @api private
	 */
	module.exports = {
	    createEventStream: createEventStream
	};


/***/ }),
/* 23 */
/***/ (function(module, exports) {

	/**
	 * Takes in a buffer of event messages and splits them into individual messages.
	 * @param {Buffer} buffer
	 * @api private
	 */
	function eventMessageChunker(buffer) {
	    /** @type Buffer[] */
	    var messages = [];
	    var offset = 0;

	    while (offset < buffer.length) {
	        var totalLength = buffer.readInt32BE(offset);

	        // create new buffer for individual message (shares memory with original)
	        var message = buffer.slice(offset, totalLength + offset);
	        // increment offset to it starts at the next message
	        offset += totalLength;

	        messages.push(message);
	    }

	    return messages;
	}

	/**
	 * @api private
	 */
	module.exports = {
	    eventMessageChunker: eventMessageChunker
	};


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	var parseMessage = __webpack_require__(25).parseMessage;

	/**
	 *
	 * @param {*} parser
	 * @param {Buffer} message
	 * @param {*} shape
	 * @api private
	 */
	function parseEvent(parser, message, shape) {
	    var parsedMessage = parseMessage(message);

	    // check if message is an event or error
	    var messageType = parsedMessage.headers[':message-type'];
	    if (messageType) {
	        if (messageType.value === 'error') {
	            throw parseError(parsedMessage);
	        } else if (messageType.value !== 'event') {
	            // not sure how to parse non-events/non-errors, ignore for now
	            return;
	        }
	    }

	    // determine event type
	    var eventType = parsedMessage.headers[':event-type'];
	    // check that the event type is modeled
	    var eventModel = shape.members[eventType.value];
	    if (!eventModel) {
	        return;
	    }

	    var result = {};
	    // check if an event payload exists
	    var eventPayloadMemberName = eventModel.eventPayloadMemberName;
	    if (eventPayloadMemberName) {
	        var payloadShape = eventModel.members[eventPayloadMemberName];
	        // if the shape is binary, return the byte array
	        if (payloadShape.type === 'binary') {
	            result[eventPayloadMemberName] = parsedMessage.body;
	        } else {
	            result[eventPayloadMemberName] = parser.parse(parsedMessage.body.toString(), payloadShape);
	        }
	    }

	    // read event headers
	    var eventHeaderNames = eventModel.eventHeaderMemberNames;
	    for (var i = 0; i < eventHeaderNames.length; i++) {
	        var name = eventHeaderNames[i];
	        if (parsedMessage.headers[name]) {
	            // parse the header!
	            result[name] = eventModel.members[name].toType(parsedMessage.headers[name].value);
	        }
	    }

	    var output = {};
	    output[eventType.value] = result;
	    return output;
	}

	function parseError(message) {
	    var errorCode = message.headers[':error-code'];
	    var errorMessage = message.headers[':error-message'];
	    var error = new Error(errorMessage.value || errorMessage);
	    error.code = error.name = errorCode.value || errorCode;
	    return error;
	}

	/**
	 * @api private
	 */
	module.exports = {
	    parseEvent: parseEvent
	};


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	var Int64 = __webpack_require__(26).Int64;

	var splitMessage = __webpack_require__(27).splitMessage;

	var BOOLEAN_TAG = 'boolean';
	var BYTE_TAG = 'byte';
	var SHORT_TAG = 'short';
	var INT_TAG = 'integer';
	var LONG_TAG = 'long';
	var BINARY_TAG = 'binary';
	var STRING_TAG = 'string';
	var TIMESTAMP_TAG = 'timestamp';
	var UUID_TAG = 'uuid';

	/**
	 * @api private
	 *
	 * @param {Buffer} headers
	 */
	function parseHeaders(headers) {
	    var out = {};
	    var position = 0;
	    while (position < headers.length) {
	        var nameLength = headers.readUInt8(position++);
	        var name = headers.slice(position, position + nameLength).toString();
	        position += nameLength;
	        switch (headers.readUInt8(position++)) {
	            case 0 /* boolTrue */:
	                out[name] = {
	                    type: BOOLEAN_TAG,
	                    value: true
	                };
	                break;
	            case 1 /* boolFalse */:
	                out[name] = {
	                    type: BOOLEAN_TAG,
	                    value: false
	                };
	                break;
	            case 2 /* byte */:
	                out[name] = {
	                    type: BYTE_TAG,
	                    value: headers.readInt8(position++)
	                };
	                break;
	            case 3 /* short */:
	                out[name] = {
	                    type: SHORT_TAG,
	                    value: headers.readInt16BE(position)
	                };
	                position += 2;
	                break;
	            case 4 /* integer */:
	                out[name] = {
	                    type: INT_TAG,
	                    value: headers.readInt32BE(position)
	                };
	                position += 4;
	                break;
	            case 5 /* long */:
	                out[name] = {
	                    type: LONG_TAG,
	                    value: new Int64(headers.slice(position, position + 8))
	                };
	                position += 8;
	                break;
	            case 6 /* byteArray */:
	                var binaryLength = headers.readUInt16BE(position);
	                position += 2;
	                out[name] = {
	                    type: BINARY_TAG,
	                    value: headers.slice(position, position + binaryLength)
	                };
	                position += binaryLength;
	                break;
	            case 7 /* string */:
	                var stringLength = headers.readUInt16BE(position);
	                position += 2;
	                out[name] = {
	                    type: STRING_TAG,
	                    value: headers.slice(
	                        position,
	                        position + stringLength
	                    ).toString()
	                };
	                position += stringLength;
	                break;
	            case 8 /* timestamp */:
	                out[name] = {
	                    type: TIMESTAMP_TAG,
	                    value: new Date(
	                        new Int64(headers.slice(position, position + 8))
	                            .valueOf()
	                    )
	                };
	                position += 8;
	                break;
	            case 9 /* uuid */:
	                var uuidChars = headers.slice(position, position + 16)
	                    .toString('hex');
	                position += 16;
	                out[name] = {
	                    type: UUID_TAG,
	                    value: uuidChars.substr(0, 8) + '-' +
	                        uuidChars.substr(8, 4) + '-' +
	                        uuidChars.substr(12, 4) + '-' +
	                        uuidChars.substr(16, 4) + '-' +
	                        uuidChars.substr(20)
	                };
	                break;
	            default:
	                throw new Error('Unrecognized header type tag');
	        }
	    }
	    return out;
	}

	function parseMessage(message) {
	    var parsed = splitMessage(message);
	    return { headers: parseHeaders(parsed.headers), body: parsed.body };
	}

	/**
	 * @api private
	 */
	module.exports = {
	    parseMessage: parseMessage
	};


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	var util = __webpack_require__(4).util;
	var toBuffer = util.buffer.toBuffer;

	/**
	 * A lossless representation of a signed, 64-bit integer. Instances of this
	 * class may be used in arithmetic expressions as if they were numeric
	 * primitives, but the binary representation will be preserved unchanged as the
	 * `bytes` property of the object. The bytes should be encoded as big-endian,
	 * two's complement integers.
	 * @param {Buffer} bytes
	 *
	 * @api private
	 */
	function Int64(bytes) {
	    if (bytes.length !== 8) {
	        throw new Error('Int64 buffers must be exactly 8 bytes');
	    }
	    if (!util.Buffer.isBuffer(bytes)) bytes = toBuffer(bytes);

	    this.bytes = bytes;
	}

	/**
	 * @param {number} number
	 * @returns {Int64}
	 *
	 * @api private
	 */
	Int64.fromNumber = function(number) {
	    if (number > 9223372036854775807 || number < -9223372036854775808) {
	        throw new Error(
	            number + ' is too large (or, if negative, too small) to represent as an Int64'
	        );
	    }

	    var bytes = new Uint8Array(8);
	    for (
	        var i = 7, remaining = Math.abs(Math.round(number));
	        i > -1 && remaining > 0;
	        i--, remaining /= 256
	    ) {
	        bytes[i] = remaining;
	    }

	    if (number < 0) {
	        negate(bytes);
	    }

	    return new Int64(bytes);
	};

	/**
	 * @returns {number}
	 *
	 * @api private
	 */
	Int64.prototype.valueOf = function() {
	    var bytes = this.bytes.slice(0);
	    var negative = bytes[0] & 128;
	    if (negative) {
	        negate(bytes);
	    }

	    return parseInt(bytes.toString('hex'), 16) * (negative ? -1 : 1);
	};

	Int64.prototype.toString = function() {
	    return String(this.valueOf());
	};

	/**
	 * @param {Buffer} bytes
	 *
	 * @api private
	 */
	function negate(bytes) {
	    for (var i = 0; i < 8; i++) {
	        bytes[i] ^= 0xFF;
	    }
	    for (var i = 7; i > -1; i--) {
	        bytes[i]++;
	        if (bytes[i] !== 0) {
	            break;
	        }
	    }
	}

	/**
	 * @api private
	 */
	module.exports = {
	    Int64: Int64
	};


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	var util = __webpack_require__(4).util;
	var toBuffer = util.buffer.toBuffer;

	// All prelude components are unsigned, 32-bit integers
	var PRELUDE_MEMBER_LENGTH = 4;
	// The prelude consists of two components
	var PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;
	// Checksums are always CRC32 hashes.
	var CHECKSUM_LENGTH = 4;
	// Messages must include a full prelude, a prelude checksum, and a message checksum
	var MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;

	/**
	 * @api private
	 *
	 * @param {Buffer} message
	 */
	function splitMessage(message) {
	    if (!util.Buffer.isBuffer(message)) message = toBuffer(message);

	    if (message.length < MINIMUM_MESSAGE_LENGTH) {
	        throw new Error('Provided message too short to accommodate event stream message overhead');
	    }

	    if (message.length !== message.readUInt32BE(0)) {
	        throw new Error('Reported message length does not match received message length');
	    }

	    var expectedPreludeChecksum = message.readUInt32BE(PRELUDE_LENGTH);

	    if (
	        expectedPreludeChecksum !== util.crypto.crc32(
	            message.slice(0, PRELUDE_LENGTH)
	        )
	    ) {
	        throw new Error(
	            'The prelude checksum specified in the message (' +
	            expectedPreludeChecksum +
	            ') does not match the calculated CRC32 checksum.'
	        );
	    }

	    var expectedMessageChecksum = message.readUInt32BE(message.length - CHECKSUM_LENGTH);

	    if (
	        expectedMessageChecksum !== util.crypto.crc32(
	            message.slice(0, message.length - CHECKSUM_LENGTH)
	        )
	    ) {
	        throw new Error(
	            'The message checksum did not match the expected value of ' +
	                expectedMessageChecksum
	        );
	    }

	    var headersStart = PRELUDE_LENGTH + CHECKSUM_LENGTH;
	    var headersEnd = headersStart + message.readUInt32BE(PRELUDE_MEMBER_LENGTH);

	    return {
	        headers: message.slice(headersStart, headersEnd),
	        body: message.slice(headersEnd, message.length - CHECKSUM_LENGTH),
	    };
	}

	/**
	 * @api private
	 */
	module.exports = {
	    splitMessage: splitMessage
	};


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(4);

	/**
	 * Represents your AWS security credentials, specifically the
	 * {accessKeyId}, {secretAccessKey}, and optional {sessionToken}.
	 * Creating a `Credentials` object allows you to pass around your
	 * security information to configuration and service objects.
	 *
	 * Note that this class typically does not need to be constructed manually,
	 * as the {AWS.Config} and {AWS.Service} classes both accept simple
	 * options hashes with the three keys. These structures will be converted
	 * into Credentials objects automatically.
	 *
	 * ## Expiring and Refreshing Credentials
	 *
	 * Occasionally credentials can expire in the middle of a long-running
	 * application. In this case, the SDK will automatically attempt to
	 * refresh the credentials from the storage location if the Credentials
	 * class implements the {refresh} method.
	 *
	 * If you are implementing a credential storage location, you
	 * will want to create a subclass of the `Credentials` class and
	 * override the {refresh} method. This method allows credentials to be
	 * retrieved from the backing store, be it a file system, database, or
	 * some network storage. The method should reset the credential attributes
	 * on the object.
	 *
	 * @!attribute expired
	 *   @return [Boolean] whether the credentials have been expired and
	 *     require a refresh. Used in conjunction with {expireTime}.
	 * @!attribute expireTime
	 *   @return [Date] a time when credentials should be considered expired. Used
	 *     in conjunction with {expired}.
	 * @!attribute accessKeyId
	 *   @return [String] the AWS access key ID
	 * @!attribute secretAccessKey
	 *   @return [String] the AWS secret access key
	 * @!attribute sessionToken
	 *   @return [String] an optional AWS session token
	 */
	AWS.Credentials = AWS.util.inherit({
	  /**
	   * A credentials object can be created using positional arguments or an options
	   * hash.
	   *
	   * @overload AWS.Credentials(accessKeyId, secretAccessKey, sessionToken=null)
	   *   Creates a Credentials object with a given set of credential information
	   *   as positional arguments.
	   *   @param accessKeyId [String] the AWS access key ID
	   *   @param secretAccessKey [String] the AWS secret access key
	   *   @param sessionToken [String] the optional AWS session token
	   *   @example Create a credentials object with AWS credentials
	   *     var creds = new AWS.Credentials('akid', 'secret', 'session');
	   * @overload AWS.Credentials(options)
	   *   Creates a Credentials object with a given set of credential information
	   *   as an options hash.
	   *   @option options accessKeyId [String] the AWS access key ID
	   *   @option options secretAccessKey [String] the AWS secret access key
	   *   @option options sessionToken [String] the optional AWS session token
	   *   @example Create a credentials object with AWS credentials
	   *     var creds = new AWS.Credentials({
	   *       accessKeyId: 'akid', secretAccessKey: 'secret', sessionToken: 'session'
	   *     });
	   */
	  constructor: function Credentials() {
	    // hide secretAccessKey from being displayed with util.inspect
	    AWS.util.hideProperties(this, ['secretAccessKey']);

	    this.expired = false;
	    this.expireTime = null;
	    this.refreshCallbacks = [];
	    if (arguments.length === 1 && typeof arguments[0] === 'object') {
	      var creds = arguments[0].credentials || arguments[0];
	      this.accessKeyId = creds.accessKeyId;
	      this.secretAccessKey = creds.secretAccessKey;
	      this.sessionToken = creds.sessionToken;
	    } else {
	      this.accessKeyId = arguments[0];
	      this.secretAccessKey = arguments[1];
	      this.sessionToken = arguments[2];
	    }
	  },

	  /**
	   * @return [Integer] the number of seconds before {expireTime} during which
	   *   the credentials will be considered expired.
	   */
	  expiryWindow: 15,

	  /**
	   * @return [Boolean] whether the credentials object should call {refresh}
	   * @note Subclasses should override this method to provide custom refresh
	   *   logic.
	   */
	  needsRefresh: function needsRefresh() {
	    var currentTime = AWS.util.date.getDate().getTime();
	    var adjustedTime = new Date(currentTime + this.expiryWindow * 1000);

	    if (this.expireTime && adjustedTime > this.expireTime) {
	      return true;
	    } else {
	      return this.expired || !this.accessKeyId || !this.secretAccessKey;
	    }
	  },

	  /**
	   * Gets the existing credentials, refreshing them if they are not yet loaded
	   * or have expired. Users should call this method before using {refresh},
	   * as this will not attempt to reload credentials when they are already
	   * loaded into the object.
	   *
	   * @callback callback function(err)
	   *   When this callback is called with no error, it means either credentials
	   *   do not need to be refreshed or refreshed credentials information has
	   *   been loaded into the object (as the `accessKeyId`, `secretAccessKey`,
	   *   and `sessionToken` properties).
	   *   @param err [Error] if an error occurred, this value will be filled
	   */
	  get: function get(callback) {
	    var self = this;
	    if (this.needsRefresh()) {
	      this.refresh(function(err) {
	        if (!err) self.expired = false; // reset expired flag
	        if (callback) callback(err);
	      });
	    } else if (callback) {
	      callback();
	    }
	  },

	  /**
	   * @!method  getPromise()
	   *   Returns a 'thenable' promise.
	   *   Gets the existing credentials, refreshing them if they are not yet loaded
	   *   or have expired. Users should call this method before using {refresh},
	   *   as this will not attempt to reload credentials when they are already
	   *   loaded into the object.
	   *
	   *   Two callbacks can be provided to the `then` method on the returned promise.
	   *   The first callback will be called if the promise is fulfilled, and the second
	   *   callback will be called if the promise is rejected.
	   *   @callback fulfilledCallback function()
	   *     Called if the promise is fulfilled. When this callback is called, it
	   *     means either credentials do not need to be refreshed or refreshed
	   *     credentials information has been loaded into the object (as the
	   *     `accessKeyId`, `secretAccessKey`, and `sessionToken` properties).
	   *   @callback rejectedCallback function(err)
	   *     Called if the promise is rejected.
	   *     @param err [Error] if an error occurred, this value will be filled
	   *   @return [Promise] A promise that represents the state of the `get` call.
	   *   @example Calling the `getPromise` method.
	   *     var promise = credProvider.getPromise();
	   *     promise.then(function() { ... }, function(err) { ... });
	   */

	  /**
	   * @!method  refreshPromise()
	   *   Returns a 'thenable' promise.
	   *   Refreshes the credentials. Users should call {get} before attempting
	   *   to forcibly refresh credentials.
	   *
	   *   Two callbacks can be provided to the `then` method on the returned promise.
	   *   The first callback will be called if the promise is fulfilled, and the second
	   *   callback will be called if the promise is rejected.
	   *   @callback fulfilledCallback function()
	   *     Called if the promise is fulfilled. When this callback is called, it
	   *     means refreshed credentials information has been loaded into the object
	   *     (as the `accessKeyId`, `secretAccessKey`, and `sessionToken` properties).
	   *   @callback rejectedCallback function(err)
	   *     Called if the promise is rejected.
	   *     @param err [Error] if an error occurred, this value will be filled
	   *   @return [Promise] A promise that represents the state of the `refresh` call.
	   *   @example Calling the `refreshPromise` method.
	   *     var promise = credProvider.refreshPromise();
	   *     promise.then(function() { ... }, function(err) { ... });
	   */

	  /**
	   * Refreshes the credentials. Users should call {get} before attempting
	   * to forcibly refresh credentials.
	   *
	   * @callback callback function(err)
	   *   When this callback is called with no error, it means refreshed
	   *   credentials information has been loaded into the object (as the
	   *   `accessKeyId`, `secretAccessKey`, and `sessionToken` properties).
	   *   @param err [Error] if an error occurred, this value will be filled
	   * @note Subclasses should override this class to reset the
	   *   {accessKeyId}, {secretAccessKey} and optional {sessionToken}
	   *   on the credentials object and then call the callback with
	   *   any error information.
	   * @see get
	   */
	  refresh: function refresh(callback) {
	    this.expired = false;
	    callback();
	  },

	  /**
	   * @api private
	   * @param callback
	   */
	  coalesceRefresh: function coalesceRefresh(callback, sync) {
	    var self = this;
	    if (self.refreshCallbacks.push(callback) === 1) {
	      self.load(function onLoad(err) {
	        AWS.util.arrayEach(self.refreshCallbacks, function(callback) {
	          if (sync) {
	            callback(err);
	          } else {
	            // callback could throw, so defer to ensure all callbacks are notified
	            AWS.util.defer(function () {
	              callback(err);
	            });
	          }
	        });
	        self.refreshCallbacks.length = 0;
	      });
	    }
	  },

	  /**
	   * @api private
	   * @param callback
	   */
	  load: function load(callback) {
	    callback();
	  }
	});

	/**
	 * @api private
	 */
	AWS.Credentials.addPromisesToClass = function addPromisesToClass(PromiseDependency) {
	  this.prototype.getPromise = AWS.util.promisifyMethod('get', PromiseDependency);
	  this.prototype.refreshPromise = AWS.util.promisifyMethod('refresh', PromiseDependency);
	};

	/**
	 * @api private
	 */
	AWS.Credentials.deletePromisesFromClass = function deletePromisesFromClass() {
	  delete this.prototype.getPromise;
	  delete this.prototype.refreshPromise;
	};

	AWS.util.addPromises(AWS.Credentials);


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(4);

	/**
	 * Creates a credential provider chain that searches for AWS credentials
	 * in a list of credential providers specified by the {providers} property.
	 *
	 * By default, the chain will use the {defaultProviders} to resolve credentials.
	 * These providers will look in the environment using the
	 * {AWS.EnvironmentCredentials} class with the 'AWS' and 'AMAZON' prefixes.
	 *
	 * ## Setting Providers
	 *
	 * Each provider in the {providers} list should be a function that returns
	 * a {AWS.Credentials} object, or a hardcoded credentials object. The function
	 * form allows for delayed execution of the credential construction.
	 *
	 * ## Resolving Credentials from a Chain
	 *
	 * Call {resolve} to return the first valid credential object that can be
	 * loaded by the provider chain.
	 *
	 * For example, to resolve a chain with a custom provider that checks a file
	 * on disk after the set of {defaultProviders}:
	 *
	 * ```javascript
	 * var diskProvider = new AWS.FileSystemCredentials('./creds.json');
	 * var chain = new AWS.CredentialProviderChain();
	 * chain.providers.push(diskProvider);
	 * chain.resolve();
	 * ```
	 *
	 * The above code will return the `diskProvider` object if the
	 * file contains credentials and the `defaultProviders` do not contain
	 * any credential settings.
	 *
	 * @!attribute providers
	 *   @return [Array<AWS.Credentials, Function>]
	 *     a list of credentials objects or functions that return credentials
	 *     objects. If the provider is a function, the function will be
	 *     executed lazily when the provider needs to be checked for valid
	 *     credentials. By default, this object will be set to the
	 *     {defaultProviders}.
	 *   @see defaultProviders
	 */
	AWS.CredentialProviderChain = AWS.util.inherit(AWS.Credentials, {

	  /**
	   * Creates a new CredentialProviderChain with a default set of providers
	   * specified by {defaultProviders}.
	   */
	  constructor: function CredentialProviderChain(providers) {
	    if (providers) {
	      this.providers = providers;
	    } else {
	      this.providers = AWS.CredentialProviderChain.defaultProviders.slice(0);
	    }
	    this.resolveCallbacks = [];
	  },

	  /**
	   * @!method  resolvePromise()
	   *   Returns a 'thenable' promise.
	   *   Resolves the provider chain by searching for the first set of
	   *   credentials in {providers}.
	   *
	   *   Two callbacks can be provided to the `then` method on the returned promise.
	   *   The first callback will be called if the promise is fulfilled, and the second
	   *   callback will be called if the promise is rejected.
	   *   @callback fulfilledCallback function(credentials)
	   *     Called if the promise is fulfilled and the provider resolves the chain
	   *     to a credentials object
	   *     @param credentials [AWS.Credentials] the credentials object resolved
	   *       by the provider chain.
	   *   @callback rejectedCallback function(error)
	   *     Called if the promise is rejected.
	   *     @param err [Error] the error object returned if no credentials are found.
	   *   @return [Promise] A promise that represents the state of the `resolve` method call.
	   *   @example Calling the `resolvePromise` method.
	   *     var promise = chain.resolvePromise();
	   *     promise.then(function(credentials) { ... }, function(err) { ... });
	   */

	  /**
	   * Resolves the provider chain by searching for the first set of
	   * credentials in {providers}.
	   *
	   * @callback callback function(err, credentials)
	   *   Called when the provider resolves the chain to a credentials object
	   *   or null if no credentials can be found.
	   *
	   *   @param err [Error] the error object returned if no credentials are
	   *     found.
	   *   @param credentials [AWS.Credentials] the credentials object resolved
	   *     by the provider chain.
	   * @return [AWS.CredentialProviderChain] the provider, for chaining.
	   */
	  resolve: function resolve(callback) {
	    var self = this;
	    if (self.providers.length === 0) {
	      callback(new Error('No providers'));
	      return self;
	    }

	    if (self.resolveCallbacks.push(callback) === 1) {
	      var index = 0;
	      var providers = self.providers.slice(0);

	      function resolveNext(err, creds) {
	        if ((!err && creds) || index === providers.length) {
	          AWS.util.arrayEach(self.resolveCallbacks, function (callback) {
	            callback(err, creds);
	          });
	          self.resolveCallbacks.length = 0;
	          return;
	        }

	        var provider = providers[index++];
	        if (typeof provider === 'function') {
	          creds = provider.call();
	        } else {
	          creds = provider;
	        }

	        if (creds.get) {
	          creds.get(function (getErr) {
	            resolveNext(getErr, getErr ? null : creds);
	          });
	        } else {
	          resolveNext(null, creds);
	        }
	      }

	      resolveNext();
	    }

	    return self;
	  }
	});

	/**
	 * The default set of providers used by a vanilla CredentialProviderChain.
	 *
	 * In the browser:
	 *
	 * ```javascript
	 * AWS.CredentialProviderChain.defaultProviders = []
	 * ```
	 *
	 * In Node.js:
	 *
	 * ```javascript
	 * AWS.CredentialProviderChain.defaultProviders = [
	 *   function () { return new AWS.EnvironmentCredentials('AWS'); },
	 *   function () { return new AWS.EnvironmentCredentials('AMAZON'); },
	 *   function () { return new AWS.SharedIniFileCredentials(); },
	 *   function () { return new AWS.ECSCredentials(); },
	 *   function () { return new AWS.ProcessCredentials(); },
	 *   function () { return new AWS.TokenFileWebIdentityCredentials(); },
	 *   function () { return new AWS.EC2MetadataCredentials() }
	 * ]
	 * ```
	 */
	AWS.CredentialProviderChain.defaultProviders = [];

	/**
	 * @api private
	 */
	AWS.CredentialProviderChain.addPromisesToClass = function addPromisesToClass(PromiseDependency) {
	  this.prototype.resolvePromise = AWS.util.promisifyMethod('resolve', PromiseDependency);
	};

	/**
	 * @api private
	 */
	AWS.CredentialProviderChain.deletePromisesFromClass = function deletePromisesFromClass() {
	  delete this.prototype.resolvePromise;
	};

	AWS.util.addPromises(AWS.CredentialProviderChain);


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(4);
	var STS = __webpack_require__(31);

	/**
	 * Represents temporary credentials retrieved from {AWS.STS}. Without any
	 * extra parameters, credentials will be fetched from the
	 * {AWS.STS.getSessionToken} operation. If an IAM role is provided, the
	 * {AWS.STS.assumeRole} operation will be used to fetch credentials for the
	 * role instead.
	 *
	 * @note AWS.TemporaryCredentials is deprecated, but remains available for
	 *   backwards compatibility. {AWS.ChainableTemporaryCredentials} is the
	 *   preferred class for temporary credentials.
	 *
	 * To setup temporary credentials, configure a set of master credentials
	 * using the standard credentials providers (environment, EC2 instance metadata,
	 * or from the filesystem), then set the global credentials to a new
	 * temporary credentials object:
	 *
	 * ```javascript
	 * // Note that environment credentials are loaded by default,
	 * // the following line is shown for clarity:
	 * AWS.config.credentials = new AWS.EnvironmentCredentials('AWS');
	 *
	 * // Now set temporary credentials seeded from the master credentials
	 * AWS.config.credentials = new AWS.TemporaryCredentials();
	 *
	 * // subsequent requests will now use temporary credentials from AWS STS.
	 * new AWS.S3().listBucket(function(err, data) { ... });
	 * ```
	 *
	 * @!attribute masterCredentials
	 *   @return [AWS.Credentials] the master (non-temporary) credentials used to
	 *     get and refresh temporary credentials from AWS STS.
	 * @note (see constructor)
	 */
	AWS.TemporaryCredentials = AWS.util.inherit(AWS.Credentials, {
	  /**
	   * Creates a new temporary credentials object.
	   *
	   * @note In order to create temporary credentials, you first need to have
	   *   "master" credentials configured in {AWS.Config.credentials}. These
	   *   master credentials are necessary to retrieve the temporary credentials,
	   *   as well as refresh the credentials when they expire.
	   * @param params [map] a map of options that are passed to the
	   *   {AWS.STS.assumeRole} or {AWS.STS.getSessionToken} operations.
	   *   If a `RoleArn` parameter is passed in, credentials will be based on the
	   *   IAM role.
	   * @param masterCredentials [AWS.Credentials] the master (non-temporary) credentials
	   *  used to get and refresh temporary credentials from AWS STS.
	   * @example Creating a new credentials object for generic temporary credentials
	   *   AWS.config.credentials = new AWS.TemporaryCredentials();
	   * @example Creating a new credentials object for an IAM role
	   *   AWS.config.credentials = new AWS.TemporaryCredentials({
	   *     RoleArn: 'arn:aws:iam::1234567890:role/TemporaryCredentials',
	   *   });
	   * @see AWS.STS.assumeRole
	   * @see AWS.STS.getSessionToken
	   */
	  constructor: function TemporaryCredentials(params, masterCredentials) {
	    AWS.Credentials.call(this);
	    this.loadMasterCredentials(masterCredentials);
	    this.expired = true;

	    this.params = params || {};
	    if (this.params.RoleArn) {
	      this.params.RoleSessionName =
	        this.params.RoleSessionName || 'temporary-credentials';
	    }
	  },

	  /**
	   * Refreshes credentials using {AWS.STS.assumeRole} or
	   * {AWS.STS.getSessionToken}, depending on whether an IAM role ARN was passed
	   * to the credentials {constructor}.
	   *
	   * @callback callback function(err)
	   *   Called when the STS service responds (or fails). When
	   *   this callback is called with no error, it means that the credentials
	   *   information has been loaded into the object (as the `accessKeyId`,
	   *   `secretAccessKey`, and `sessionToken` properties).
	   *   @param err [Error] if an error occurred, this value will be filled
	   * @see get
	   */
	  refresh: function refresh (callback) {
	    this.coalesceRefresh(callback || AWS.util.fn.callback);
	  },

	  /**
	   * @api private
	   */
	  load: function load (callback) {
	    var self = this;
	    self.createClients();
	    self.masterCredentials.get(function () {
	      self.service.config.credentials = self.masterCredentials;
	      var operation = self.params.RoleArn ?
	        self.service.assumeRole : self.service.getSessionToken;
	      operation.call(self.service, function (err, data) {
	        if (!err) {
	          self.service.credentialsFrom(data, self);
	        }
	        callback(err);
	      });
	    });
	  },

	  /**
	   * @api private
	   */
	  loadMasterCredentials: function loadMasterCredentials (masterCredentials) {
	    this.masterCredentials = masterCredentials || AWS.config.credentials;
	    while (this.masterCredentials.masterCredentials) {
	      this.masterCredentials = this.masterCredentials.masterCredentials;
	    }

	    if (typeof this.masterCredentials.get !== 'function') {
	      this.masterCredentials = new AWS.Credentials(this.masterCredentials);
	    }
	  },

	  /**
	   * @api private
	   */
	  createClients: function () {
	    this.service = this.service || new STS({params: this.params});
	  }

	});


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['sts'] = {};
	AWS.STS = Service.defineService('sts', ['2011-06-15']);
	__webpack_require__(32);
	Object.defineProperty(apiLoader.services['sts'], '2011-06-15', {
	  get: function get() {
	    var model = __webpack_require__(34);
	    model.paginators = __webpack_require__(35).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.STS;


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(4);
	var resolveRegionalEndpointsFlag = __webpack_require__(33);
	var ENV_REGIONAL_ENDPOINT_ENABLED = 'AWS_STS_REGIONAL_ENDPOINTS';
	var CONFIG_REGIONAL_ENDPOINT_ENABLED = 'sts_regional_endpoints';

	AWS.util.update(AWS.STS.prototype, {
	  /**
	   * @overload credentialsFrom(data, credentials = null)
	   *   Creates a credentials object from STS response data containing
	   *   credentials information. Useful for quickly setting AWS credentials.
	   *
	   *   @note This is a low-level utility function. If you want to load temporary
	   *     credentials into your process for subsequent requests to AWS resources,
	   *     you should use {AWS.TemporaryCredentials} instead.
	   *   @param data [map] data retrieved from a call to {getFederatedToken},
	   *     {getSessionToken}, {assumeRole}, or {assumeRoleWithWebIdentity}.
	   *   @param credentials [AWS.Credentials] an optional credentials object to
	   *     fill instead of creating a new object. Useful when modifying an
	   *     existing credentials object from a refresh call.
	   *   @return [AWS.TemporaryCredentials] the set of temporary credentials
	   *     loaded from a raw STS operation response.
	   *   @example Using credentialsFrom to load global AWS credentials
	   *     var sts = new AWS.STS();
	   *     sts.getSessionToken(function (err, data) {
	   *       if (err) console.log("Error getting credentials");
	   *       else {
	   *         AWS.config.credentials = sts.credentialsFrom(data);
	   *       }
	   *     });
	   *   @see AWS.TemporaryCredentials
	   */
	  credentialsFrom: function credentialsFrom(data, credentials) {
	    if (!data) return null;
	    if (!credentials) credentials = new AWS.TemporaryCredentials();
	    credentials.expired = false;
	    credentials.accessKeyId = data.Credentials.AccessKeyId;
	    credentials.secretAccessKey = data.Credentials.SecretAccessKey;
	    credentials.sessionToken = data.Credentials.SessionToken;
	    credentials.expireTime = data.Credentials.Expiration;
	    return credentials;
	  },

	  assumeRoleWithWebIdentity: function assumeRoleWithWebIdentity(params, callback) {
	    return this.makeUnauthenticatedRequest('assumeRoleWithWebIdentity', params, callback);
	  },

	  assumeRoleWithSAML: function assumeRoleWithSAML(params, callback) {
	    return this.makeUnauthenticatedRequest('assumeRoleWithSAML', params, callback);
	  },

	  /**
	   * @api private
	   */
	  setupRequestListeners: function setupRequestListeners(request) {
	    request.addListener('validate', this.optInRegionalEndpoint, true);
	  },

	  /**
	   * @api private
	   */
	  optInRegionalEndpoint: function optInRegionalEndpoint(req) {
	    var service = req.service;
	    var config = service.config;
	    config.stsRegionalEndpoints = resolveRegionalEndpointsFlag(service._originalConfig, {
	      env: ENV_REGIONAL_ENDPOINT_ENABLED,
	      sharedConfig: CONFIG_REGIONAL_ENDPOINT_ENABLED,
	      clientConfig: 'stsRegionalEndpoints'
	    });
	    if (
	      config.stsRegionalEndpoints === 'regional' &&
	      service.isGlobalEndpoint
	    ) {
	      //client will throw if region is not supplied; request will be signed with specified region
	      if (!config.region) {
	        throw AWS.util.error(new Error(),
	          {code: 'ConfigError', message: 'Missing region in config'});
	      }
	      var insertPoint = config.endpoint.indexOf('.amazonaws.com');
	      var regionalEndpoint = config.endpoint.substring(0, insertPoint) +
	        '.' + config.region + config.endpoint.substring(insertPoint);
	      req.httpRequest.updateEndpoint(regionalEndpoint);
	      req.httpRequest.region = config.region;
	    }
	  }

	});


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var AWS = __webpack_require__(4);
	/**
	 * @api private
	 */
	function validateRegionalEndpointsFlagValue(configValue, errorOptions) {
	  if (typeof configValue !== 'string') return undefined;
	  else if (['legacy', 'regional'].indexOf(configValue.toLowerCase()) >= 0) {
	    return configValue.toLowerCase();
	  } else {
	    throw AWS.util.error(new Error(), errorOptions);
	  }
	}

	/**
	 * Resolve the configuration value for regional endpoint from difference sources: client
	 * config, environmental variable, shared config file. Value can be case-insensitive
	 * 'legacy' or 'reginal'.
	 * @param originalConfig user-supplied config object to resolve
	 * @param options a map of config property names from individual configuration source
	 *  - env: name of environmental variable that refers to the config
	 *  - sharedConfig: name of shared configuration file property that refers to the config
	 *  - clientConfig: name of client configuration property that refers to the config
	 *
	 * @api private
	 */
	function resolveRegionalEndpointsFlag(originalConfig, options) {
	  originalConfig = originalConfig || {};
	  //validate config value
	  var resolved;
	  if (originalConfig[options.clientConfig]) {
	    resolved = validateRegionalEndpointsFlagValue(originalConfig[options.clientConfig], {
	      code: 'InvalidConfiguration',
	      message: 'invalid "' + options.clientConfig + '" configuration. Expect "legacy" ' +
	      ' or "regional". Got "' + originalConfig[options.clientConfig] + '".'
	    });
	    if (resolved) return resolved;
	  }
	  if (!AWS.util.isNode()) return resolved;
	  //validate environmental variable
	  if (Object.prototype.hasOwnProperty.call(process.env, options.env)) {
	    var envFlag = process.env[options.env];
	    resolved = validateRegionalEndpointsFlagValue(envFlag, {
	      code: 'InvalidEnvironmentalVariable',
	      message: 'invalid ' + options.env + ' environmental variable. Expect "legacy" ' +
	      ' or "regional". Got "' + process.env[options.env] + '".'
	    });
	    if (resolved) return resolved;
	  }
	  //validate shared config file
	  var profile = {};
	  try {
	    var profiles = AWS.util.getProfilesFromSharedConfig(AWS.util.iniLoader);
	    profile = profiles[process.env.AWS_PROFILE || AWS.util.defaultProfile];
	  } catch (e) {};
	  if (profile && Object.prototype.hasOwnProperty.call(profile, options.sharedConfig)) {
	    var fileFlag = profile[options.sharedConfig];
	    resolved = validateRegionalEndpointsFlagValue(fileFlag, {
	      code: 'InvalidConfiguration',
	      message: 'invalid ' + options.sharedConfig + ' profile config. Expect "legacy" ' +
	      ' or "regional". Got "' + profile[options.sharedConfig] + '".'
	    });
	    if (resolved) return resolved;
	  }
	  return resolved;
	}

	module.exports = resolveRegionalEndpointsFlag;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 34 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2011-06-15","endpointPrefix":"sts","globalEndpoint":"sts.amazonaws.com","protocol":"query","serviceAbbreviation":"AWS STS","serviceFullName":"AWS Security Token Service","serviceId":"STS","signatureVersion":"v4","uid":"sts-2011-06-15","xmlNamespace":"https://sts.amazonaws.com/doc/2011-06-15/"},"operations":{"AssumeRole":{"input":{"type":"structure","required":["RoleArn","RoleSessionName"],"members":{"RoleArn":{},"RoleSessionName":{},"PolicyArns":{"shape":"S4"},"Policy":{},"DurationSeconds":{"type":"integer"},"Tags":{"shape":"S8"},"TransitiveTagKeys":{"type":"list","member":{}},"ExternalId":{},"SerialNumber":{},"TokenCode":{},"SourceIdentity":{}}},"output":{"resultWrapper":"AssumeRoleResult","type":"structure","members":{"Credentials":{"shape":"Si"},"AssumedRoleUser":{"shape":"Sn"},"PackedPolicySize":{"type":"integer"},"SourceIdentity":{}}}},"AssumeRoleWithSAML":{"input":{"type":"structure","required":["RoleArn","PrincipalArn","SAMLAssertion"],"members":{"RoleArn":{},"PrincipalArn":{},"SAMLAssertion":{},"PolicyArns":{"shape":"S4"},"Policy":{},"DurationSeconds":{"type":"integer"}}},"output":{"resultWrapper":"AssumeRoleWithSAMLResult","type":"structure","members":{"Credentials":{"shape":"Si"},"AssumedRoleUser":{"shape":"Sn"},"PackedPolicySize":{"type":"integer"},"Subject":{},"SubjectType":{},"Issuer":{},"Audience":{},"NameQualifier":{},"SourceIdentity":{}}}},"AssumeRoleWithWebIdentity":{"input":{"type":"structure","required":["RoleArn","RoleSessionName","WebIdentityToken"],"members":{"RoleArn":{},"RoleSessionName":{},"WebIdentityToken":{},"ProviderId":{},"PolicyArns":{"shape":"S4"},"Policy":{},"DurationSeconds":{"type":"integer"}}},"output":{"resultWrapper":"AssumeRoleWithWebIdentityResult","type":"structure","members":{"Credentials":{"shape":"Si"},"SubjectFromWebIdentityToken":{},"AssumedRoleUser":{"shape":"Sn"},"PackedPolicySize":{"type":"integer"},"Provider":{},"Audience":{},"SourceIdentity":{}}}},"DecodeAuthorizationMessage":{"input":{"type":"structure","required":["EncodedMessage"],"members":{"EncodedMessage":{}}},"output":{"resultWrapper":"DecodeAuthorizationMessageResult","type":"structure","members":{"DecodedMessage":{}}}},"GetAccessKeyInfo":{"input":{"type":"structure","required":["AccessKeyId"],"members":{"AccessKeyId":{}}},"output":{"resultWrapper":"GetAccessKeyInfoResult","type":"structure","members":{"Account":{}}}},"GetCallerIdentity":{"input":{"type":"structure","members":{}},"output":{"resultWrapper":"GetCallerIdentityResult","type":"structure","members":{"UserId":{},"Account":{},"Arn":{}}}},"GetFederationToken":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"Policy":{},"PolicyArns":{"shape":"S4"},"DurationSeconds":{"type":"integer"},"Tags":{"shape":"S8"}}},"output":{"resultWrapper":"GetFederationTokenResult","type":"structure","members":{"Credentials":{"shape":"Si"},"FederatedUser":{"type":"structure","required":["FederatedUserId","Arn"],"members":{"FederatedUserId":{},"Arn":{}}},"PackedPolicySize":{"type":"integer"}}}},"GetSessionToken":{"input":{"type":"structure","members":{"DurationSeconds":{"type":"integer"},"SerialNumber":{},"TokenCode":{}}},"output":{"resultWrapper":"GetSessionTokenResult","type":"structure","members":{"Credentials":{"shape":"Si"}}}}},"shapes":{"S4":{"type":"list","member":{"type":"structure","members":{"arn":{}}}},"S8":{"type":"list","member":{"type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{}}}},"Si":{"type":"structure","required":["AccessKeyId","SecretAccessKey","SessionToken","Expiration"],"members":{"AccessKeyId":{},"SecretAccessKey":{},"SessionToken":{},"Expiration":{"type":"timestamp"}}},"Sn":{"type":"structure","required":["AssumedRoleId","Arn"],"members":{"AssumedRoleId":{},"Arn":{}}}}}

/***/ }),
/* 35 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{}}

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(4);
	var STS = __webpack_require__(31);

	/**
	 * Represents temporary credentials retrieved from {AWS.STS}. Without any
	 * extra parameters, credentials will be fetched from the
	 * {AWS.STS.getSessionToken} operation. If an IAM role is provided, the
	 * {AWS.STS.assumeRole} operation will be used to fetch credentials for the
	 * role instead.
	 *
	 * AWS.ChainableTemporaryCredentials differs from AWS.TemporaryCredentials in
	 * the way masterCredentials and refreshes are handled.
	 * AWS.ChainableTemporaryCredentials refreshes expired credentials using the
	 * masterCredentials passed by the user to support chaining of STS credentials.
	 * However, AWS.TemporaryCredentials recursively collapses the masterCredentials
	 * during instantiation, precluding the ability to refresh credentials which
	 * require intermediate, temporary credentials.
	 *
	 * For example, if the application should use RoleA, which must be assumed from
	 * RoleB, and the environment provides credentials which can assume RoleB, then
	 * AWS.ChainableTemporaryCredentials must be used to support refreshing the
	 * temporary credentials for RoleA:
	 *
	 * ```javascript
	 * var roleACreds = new AWS.ChainableTemporaryCredentials({
	 *   params: {RoleArn: 'RoleA'},
	 *   masterCredentials: new AWS.ChainableTemporaryCredentials({
	 *     params: {RoleArn: 'RoleB'},
	 *     masterCredentials: new AWS.EnvironmentCredentials('AWS')
	 *   })
	 * });
	 * ```
	 *
	 * If AWS.TemporaryCredentials had been used in the previous example,
	 * `roleACreds` would fail to refresh because `roleACreds` would
	 * use the environment credentials for the AssumeRole request.
	 *
	 * Another difference is that AWS.ChainableTemporaryCredentials creates the STS
	 * service instance during instantiation while AWS.TemporaryCredentials creates
	 * the STS service instance during the first refresh. Creating the service
	 * instance during instantiation effectively captures the master credentials
	 * from the global config, so that subsequent changes to the global config do
	 * not affect the master credentials used to refresh the temporary credentials.
	 *
	 * This allows an instance of AWS.ChainableTemporaryCredentials to be assigned
	 * to AWS.config.credentials:
	 *
	 * ```javascript
	 * var envCreds = new AWS.EnvironmentCredentials('AWS');
	 * AWS.config.credentials = envCreds;
	 * // masterCredentials will be envCreds
	 * AWS.config.credentials = new AWS.ChainableTemporaryCredentials({
	 *   params: {RoleArn: '...'}
	 * });
	 * ```
	 *
	 * Similarly, to use the CredentialProviderChain's default providers as the
	 * master credentials, simply create a new instance of
	 * AWS.ChainableTemporaryCredentials:
	 *
	 * ```javascript
	 * AWS.config.credentials = new ChainableTemporaryCredentials({
	 *   params: {RoleArn: '...'}
	 * });
	 * ```
	 *
	 * @!attribute service
	 *   @return [AWS.STS] the STS service instance used to
	 *     get and refresh temporary credentials from AWS STS.
	 * @note (see constructor)
	 */
	AWS.ChainableTemporaryCredentials = AWS.util.inherit(AWS.Credentials, {
	  /**
	   * Creates a new temporary credentials object.
	   *
	   * @param options [map] a set of options
	   * @option options params [map] ({}) a map of options that are passed to the
	   *   {AWS.STS.assumeRole} or {AWS.STS.getSessionToken} operations.
	   *   If a `RoleArn` parameter is passed in, credentials will be based on the
	   *   IAM role. If a `SerialNumber` parameter is passed in, {tokenCodeFn} must
	   *   also be passed in or an error will be thrown.
	   * @option options masterCredentials [AWS.Credentials] the master credentials
	   *   used to get and refresh temporary credentials from AWS STS. By default,
	   *   AWS.config.credentials or AWS.config.credentialProvider will be used.
	   * @option options tokenCodeFn [Function] (null) Function to provide
	   *   `TokenCode`, if `SerialNumber` is provided for profile in {params}. Function
	   *   is called with value of `SerialNumber` and `callback`, and should provide
	   *   the `TokenCode` or an error to the callback in the format
	   *   `callback(err, token)`.
	   * @example Creating a new credentials object for generic temporary credentials
	   *   AWS.config.credentials = new AWS.ChainableTemporaryCredentials();
	   * @example Creating a new credentials object for an IAM role
	   *   AWS.config.credentials = new AWS.ChainableTemporaryCredentials({
	   *     params: {
	   *       RoleArn: 'arn:aws:iam::1234567890:role/TemporaryCredentials'
	   *     }
	   *   });
	   * @see AWS.STS.assumeRole
	   * @see AWS.STS.getSessionToken
	   */
	  constructor: function ChainableTemporaryCredentials(options) {
	    AWS.Credentials.call(this);
	    options = options || {};
	    this.errorCode = 'ChainableTemporaryCredentialsProviderFailure';
	    this.expired = true;
	    this.tokenCodeFn = null;

	    var params = AWS.util.copy(options.params) || {};
	    if (params.RoleArn) {
	      params.RoleSessionName = params.RoleSessionName || 'temporary-credentials';
	    }
	    if (params.SerialNumber) {
	      if (!options.tokenCodeFn || (typeof options.tokenCodeFn !== 'function')) {
	        throw new AWS.util.error(
	          new Error('tokenCodeFn must be a function when params.SerialNumber is given'),
	          {code: this.errorCode}
	        );
	      } else {
	        this.tokenCodeFn = options.tokenCodeFn;
	      }
	    }
	    var config = AWS.util.merge(
	      {
	        params: params,
	        credentials: options.masterCredentials || AWS.config.credentials
	      },
	      options.stsConfig || {}
	    );
	    this.service = new STS(config);
	  },

	  /**
	   * Refreshes credentials using {AWS.STS.assumeRole} or
	   * {AWS.STS.getSessionToken}, depending on whether an IAM role ARN was passed
	   * to the credentials {constructor}.
	   *
	   * @callback callback function(err)
	   *   Called when the STS service responds (or fails). When
	   *   this callback is called with no error, it means that the credentials
	   *   information has been loaded into the object (as the `accessKeyId`,
	   *   `secretAccessKey`, and `sessionToken` properties).
	   *   @param err [Error] if an error occurred, this value will be filled
	   * @see AWS.Credentials.get
	   */
	  refresh: function refresh(callback) {
	    this.coalesceRefresh(callback || AWS.util.fn.callback);
	  },

	  /**
	   * @api private
	   * @param callback
	   */
	  load: function load(callback) {
	    var self = this;
	    var operation = self.service.config.params.RoleArn ? 'assumeRole' : 'getSessionToken';
	    this.getTokenCode(function (err, tokenCode) {
	      var params = {};
	      if (err) {
	        callback(err);
	        return;
	      }
	      if (tokenCode) {
	        params.TokenCode = tokenCode;
	      }
	      self.service[operation](params, function (err, data) {
	        if (!err) {
	          self.service.credentialsFrom(data, self);
	        }
	        callback(err);
	      });
	    });
	  },

	  /**
	   * @api private
	   */
	  getTokenCode: function getTokenCode(callback) {
	    var self = this;
	    if (this.tokenCodeFn) {
	      this.tokenCodeFn(this.service.config.params.SerialNumber, function (err, token) {
	        if (err) {
	          var message = err;
	          if (err instanceof Error) {
	            message = err.message;
	          }
	          callback(
	            AWS.util.error(
	              new Error('Error fetching MFA token: ' + message),
	              { code: self.errorCode}
	            )
	          );
	          return;
	        }
	        callback(null, token);
	      });
	    } else {
	      callback(null);
	    }
	  }
	});


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(4);
	var STS = __webpack_require__(31);

	/**
	 * Represents credentials retrieved from STS Web Identity Federation support.
	 *
	 * By default this provider gets credentials using the
	 * {AWS.STS.assumeRoleWithWebIdentity} service operation. This operation
	 * requires a `RoleArn` containing the ARN of the IAM trust policy for the
	 * application for which credentials will be given. In addition, the
	 * `WebIdentityToken` must be set to the token provided by the identity
	 * provider. See {constructor} for an example on creating a credentials
	 * object with proper `RoleArn` and `WebIdentityToken` values.
	 *
	 * ## Refreshing Credentials from Identity Service
	 *
	 * In addition to AWS credentials expiring after a given amount of time, the
	 * login token from the identity provider will also expire. Once this token
	 * expires, it will not be usable to refresh AWS credentials, and another
	 * token will be needed. The SDK does not manage refreshing of the token value,
	 * but this can be done through a "refresh token" supported by most identity
	 * providers. Consult the documentation for the identity provider for refreshing
	 * tokens. Once the refreshed token is acquired, you should make sure to update
	 * this new token in the credentials object's {params} property. The following
	 * code will update the WebIdentityToken, assuming you have retrieved an updated
	 * token from the identity provider:
	 *
	 * ```javascript
	 * AWS.config.credentials.params.WebIdentityToken = updatedToken;
	 * ```
	 *
	 * Future calls to `credentials.refresh()` will now use the new token.
	 *
	 * @!attribute params
	 *   @return [map] the map of params passed to
	 *     {AWS.STS.assumeRoleWithWebIdentity}. To update the token, set the
	 *     `params.WebIdentityToken` property.
	 * @!attribute data
	 *   @return [map] the raw data response from the call to
	 *     {AWS.STS.assumeRoleWithWebIdentity}. Use this if you want to get
	 *     access to other properties from the response.
	 */
	AWS.WebIdentityCredentials = AWS.util.inherit(AWS.Credentials, {
	  /**
	   * Creates a new credentials object.
	   * @param (see AWS.STS.assumeRoleWithWebIdentity)
	   * @example Creating a new credentials object
	   *   AWS.config.credentials = new AWS.WebIdentityCredentials({
	   *     RoleArn: 'arn:aws:iam::1234567890:role/WebIdentity',
	   *     WebIdentityToken: 'ABCDEFGHIJKLMNOP', // token from identity service
	   *     RoleSessionName: 'web' // optional name, defaults to web-identity
	   *   }, {
	   *     // optionally provide configuration to apply to the underlying AWS.STS service client
	   *     // if configuration is not provided, then configuration will be pulled from AWS.config
	   *
	   *     // specify timeout options
	   *     httpOptions: {
	   *       timeout: 100
	   *     }
	   *   });
	   * @see AWS.STS.assumeRoleWithWebIdentity
	   * @see AWS.Config
	   */
	  constructor: function WebIdentityCredentials(params, clientConfig) {
	    AWS.Credentials.call(this);
	    this.expired = true;
	    this.params = params;
	    this.params.RoleSessionName = this.params.RoleSessionName || 'web-identity';
	    this.data = null;
	    this._clientConfig = AWS.util.copy(clientConfig || {});
	  },

	  /**
	   * Refreshes credentials using {AWS.STS.assumeRoleWithWebIdentity}
	   *
	   * @callback callback function(err)
	   *   Called when the STS service responds (or fails). When
	   *   this callback is called with no error, it means that the credentials
	   *   information has been loaded into the object (as the `accessKeyId`,
	   *   `secretAccessKey`, and `sessionToken` properties).
	   *   @param err [Error] if an error occurred, this value will be filled
	   * @see get
	   */
	  refresh: function refresh(callback) {
	    this.coalesceRefresh(callback || AWS.util.fn.callback);
	  },

	  /**
	   * @api private
	   */
	  load: function load(callback) {
	    var self = this;
	    self.createClients();
	    self.service.assumeRoleWithWebIdentity(function (err, data) {
	      self.data = null;
	      if (!err) {
	        self.data = data;
	        self.service.credentialsFrom(data, self);
	      }
	      callback(err);
	    });
	  },

	  /**
	   * @api private
	   */
	  createClients: function() {
	    if (!this.service) {
	      var stsConfig = AWS.util.merge({}, this._clientConfig);
	      stsConfig.params = this.params;
	      this.service = new STS(stsConfig);
	    }
	  }

	});


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(4);
	var CognitoIdentity = __webpack_require__(39);
	var STS = __webpack_require__(31);

	/**
	 * Represents credentials retrieved from STS Web Identity Federation using
	 * the Amazon Cognito Identity service.
	 *
	 * By default this provider gets credentials using the
	 * {AWS.CognitoIdentity.getCredentialsForIdentity} service operation, which
	 * requires either an `IdentityId` or an `IdentityPoolId` (Amazon Cognito
	 * Identity Pool ID), which is used to call {AWS.CognitoIdentity.getId} to
	 * obtain an `IdentityId`. If the identity or identity pool is not configured in
	 * the Amazon Cognito Console to use IAM roles with the appropriate permissions,
	 * then additionally a `RoleArn` is required containing the ARN of the IAM trust
	 * policy for the Amazon Cognito role that the user will log into. If a `RoleArn`
	 * is provided, then this provider gets credentials using the
	 * {AWS.STS.assumeRoleWithWebIdentity} service operation, after first getting an
	 * Open ID token from {AWS.CognitoIdentity.getOpenIdToken}.
	 *
	 * In addition, if this credential provider is used to provide authenticated
	 * login, the `Logins` map may be set to the tokens provided by the respective
	 * identity providers. See {constructor} for an example on creating a credentials
	 * object with proper property values.
	 *
	 * ## Refreshing Credentials from Identity Service
	 *
	 * In addition to AWS credentials expiring after a given amount of time, the
	 * login token from the identity provider will also expire. Once this token
	 * expires, it will not be usable to refresh AWS credentials, and another
	 * token will be needed. The SDK does not manage refreshing of the token value,
	 * but this can be done through a "refresh token" supported by most identity
	 * providers. Consult the documentation for the identity provider for refreshing
	 * tokens. Once the refreshed token is acquired, you should make sure to update
	 * this new token in the credentials object's {params} property. The following
	 * code will update the WebIdentityToken, assuming you have retrieved an updated
	 * token from the identity provider:
	 *
	 * ```javascript
	 * AWS.config.credentials.params.Logins['graph.facebook.com'] = updatedToken;
	 * ```
	 *
	 * Future calls to `credentials.refresh()` will now use the new token.
	 *
	 * @!attribute params
	 *   @return [map] the map of params passed to
	 *     {AWS.CognitoIdentity.getId},
	 *     {AWS.CognitoIdentity.getOpenIdToken}, and
	 *     {AWS.STS.assumeRoleWithWebIdentity}. To update the token, set the
	 *     `params.WebIdentityToken` property.
	 * @!attribute data
	 *   @return [map] the raw data response from the call to
	 *     {AWS.CognitoIdentity.getCredentialsForIdentity}, or
	 *     {AWS.STS.assumeRoleWithWebIdentity}. Use this if you want to get
	 *     access to other properties from the response.
	 * @!attribute identityId
	 *   @return [String] the Cognito ID returned by the last call to
	 *     {AWS.CognitoIdentity.getOpenIdToken}. This ID represents the actual
	 *     final resolved identity ID from Amazon Cognito.
	 */
	AWS.CognitoIdentityCredentials = AWS.util.inherit(AWS.Credentials, {
	  /**
	   * @api private
	   */
	  localStorageKey: {
	    id: 'aws.cognito.identity-id.',
	    providers: 'aws.cognito.identity-providers.'
	  },

	  /**
	   * Creates a new credentials object.
	   * @example Creating a new credentials object
	   *   AWS.config.credentials = new AWS.CognitoIdentityCredentials({
	   *
	   *     // either IdentityPoolId or IdentityId is required
	   *     // See the IdentityPoolId param for AWS.CognitoIdentity.getID (linked below)
	   *     // See the IdentityId param for AWS.CognitoIdentity.getCredentialsForIdentity
	   *     // or AWS.CognitoIdentity.getOpenIdToken (linked below)
	   *     IdentityPoolId: 'us-east-1:1699ebc0-7900-4099-b910-2df94f52a030',
	   *     IdentityId: 'us-east-1:128d0a74-c82f-4553-916d-90053e4a8b0f'
	   *
	   *     // optional, only necessary when the identity pool is not configured
	   *     // to use IAM roles in the Amazon Cognito Console
	   *     // See the RoleArn param for AWS.STS.assumeRoleWithWebIdentity (linked below)
	   *     RoleArn: 'arn:aws:iam::1234567890:role/MYAPP-CognitoIdentity',
	   *
	   *     // optional tokens, used for authenticated login
	   *     // See the Logins param for AWS.CognitoIdentity.getID (linked below)
	   *     Logins: {
	   *       'graph.facebook.com': 'FBTOKEN',
	   *       'www.amazon.com': 'AMAZONTOKEN',
	   *       'accounts.google.com': 'GOOGLETOKEN',
	   *       'api.twitter.com': 'TWITTERTOKEN',
	   *       'www.digits.com': 'DIGITSTOKEN'
	   *     },
	   *
	   *     // optional name, defaults to web-identity
	   *     // See the RoleSessionName param for AWS.STS.assumeRoleWithWebIdentity (linked below)
	   *     RoleSessionName: 'web',
	   *
	   *     // optional, only necessary when application runs in a browser
	   *     // and multiple users are signed in at once, used for caching
	   *     LoginId: 'example@gmail.com'
	   *
	   *   }, {
	   *      // optionally provide configuration to apply to the underlying service clients
	   *      // if configuration is not provided, then configuration will be pulled from AWS.config
	   *
	   *      // region should match the region your identity pool is located in
	   *      region: 'us-east-1',
	   *
	   *      // specify timeout options
	   *      httpOptions: {
	   *        timeout: 100
	   *      }
	   *   });
	   * @see AWS.CognitoIdentity.getId
	   * @see AWS.CognitoIdentity.getCredentialsForIdentity
	   * @see AWS.STS.assumeRoleWithWebIdentity
	   * @see AWS.CognitoIdentity.getOpenIdToken
	   * @see AWS.Config
	   * @note If a region is not provided in the global AWS.config, or
	   *   specified in the `clientConfig` to the CognitoIdentityCredentials
	   *   constructor, you may encounter a 'Missing credentials in config' error
	   *   when calling making a service call.
	   */
	  constructor: function CognitoIdentityCredentials(params, clientConfig) {
	    AWS.Credentials.call(this);
	    this.expired = true;
	    this.params = params;
	    this.data = null;
	    this._identityId = null;
	    this._clientConfig = AWS.util.copy(clientConfig || {});
	    this.loadCachedId();
	    var self = this;
	    Object.defineProperty(this, 'identityId', {
	      get: function() {
	        self.loadCachedId();
	        return self._identityId || self.params.IdentityId;
	      },
	      set: function(identityId) {
	        self._identityId = identityId;
	      }
	    });
	  },

	  /**
	   * Refreshes credentials using {AWS.CognitoIdentity.getCredentialsForIdentity},
	   * or {AWS.STS.assumeRoleWithWebIdentity}.
	   *
	   * @callback callback function(err)
	   *   Called when the STS service responds (or fails). When
	   *   this callback is called with no error, it means that the credentials
	   *   information has been loaded into the object (as the `accessKeyId`,
	   *   `secretAccessKey`, and `sessionToken` properties).
	   *   @param err [Error] if an error occurred, this value will be filled
	   * @see AWS.Credentials.get
	   */
	  refresh: function refresh(callback) {
	    this.coalesceRefresh(callback || AWS.util.fn.callback);
	  },

	  /**
	   * @api private
	   * @param callback
	   */
	  load: function load(callback) {
	    var self = this;
	    self.createClients();
	    self.data = null;
	    self._identityId = null;
	    self.getId(function(err) {
	      if (!err) {
	        if (!self.params.RoleArn) {
	          self.getCredentialsForIdentity(callback);
	        } else {
	          self.getCredentialsFromSTS(callback);
	        }
	      } else {
	        self.clearIdOnNotAuthorized(err);
	        callback(err);
	      }
	    });
	  },

	  /**
	   * Clears the cached Cognito ID associated with the currently configured
	   * identity pool ID. Use this to manually invalidate your cache if
	   * the identity pool ID was deleted.
	   */
	  clearCachedId: function clearCache() {
	    this._identityId = null;
	    delete this.params.IdentityId;

	    var poolId = this.params.IdentityPoolId;
	    var loginId = this.params.LoginId || '';
	    delete this.storage[this.localStorageKey.id + poolId + loginId];
	    delete this.storage[this.localStorageKey.providers + poolId + loginId];
	  },

	  /**
	   * @api private
	   */
	  clearIdOnNotAuthorized: function clearIdOnNotAuthorized(err) {
	    var self = this;
	    if (err.code == 'NotAuthorizedException') {
	      self.clearCachedId();
	    }
	  },

	  /**
	   * Retrieves a Cognito ID, loading from cache if it was already retrieved
	   * on this device.
	   *
	   * @callback callback function(err, identityId)
	   *   @param err [Error, null] an error object if the call failed or null if
	   *     it succeeded.
	   *   @param identityId [String, null] if successful, the callback will return
	   *     the Cognito ID.
	   * @note If not loaded explicitly, the Cognito ID is loaded and stored in
	   *   localStorage in the browser environment of a device.
	   * @api private
	   */
	  getId: function getId(callback) {
	    var self = this;
	    if (typeof self.params.IdentityId === 'string') {
	      return callback(null, self.params.IdentityId);
	    }

	    self.cognito.getId(function(err, data) {
	      if (!err && data.IdentityId) {
	        self.params.IdentityId = data.IdentityId;
	        callback(null, data.IdentityId);
	      } else {
	        callback(err);
	      }
	    });
	  },


	  /**
	   * @api private
	   */
	  loadCredentials: function loadCredentials(data, credentials) {
	    if (!data || !credentials) return;
	    credentials.expired = false;
	    credentials.accessKeyId = data.Credentials.AccessKeyId;
	    credentials.secretAccessKey = data.Credentials.SecretKey;
	    credentials.sessionToken = data.Credentials.SessionToken;
	    credentials.expireTime = data.Credentials.Expiration;
	  },

	  /**
	   * @api private
	   */
	  getCredentialsForIdentity: function getCredentialsForIdentity(callback) {
	    var self = this;
	    self.cognito.getCredentialsForIdentity(function(err, data) {
	      if (!err) {
	        self.cacheId(data);
	        self.data = data;
	        self.loadCredentials(self.data, self);
	      } else {
	        self.clearIdOnNotAuthorized(err);
	      }
	      callback(err);
	    });
	  },

	  /**
	   * @api private
	   */
	  getCredentialsFromSTS: function getCredentialsFromSTS(callback) {
	    var self = this;
	    self.cognito.getOpenIdToken(function(err, data) {
	      if (!err) {
	        self.cacheId(data);
	        self.params.WebIdentityToken = data.Token;
	        self.webIdentityCredentials.refresh(function(webErr) {
	          if (!webErr) {
	            self.data = self.webIdentityCredentials.data;
	            self.sts.credentialsFrom(self.data, self);
	          }
	          callback(webErr);
	        });
	      } else {
	        self.clearIdOnNotAuthorized(err);
	        callback(err);
	      }
	    });
	  },

	  /**
	   * @api private
	   */
	  loadCachedId: function loadCachedId() {
	    var self = this;

	    // in the browser we source default IdentityId from localStorage
	    if (AWS.util.isBrowser() && !self.params.IdentityId) {
	      var id = self.getStorage('id');
	      if (id && self.params.Logins) {
	        var actualProviders = Object.keys(self.params.Logins);
	        var cachedProviders =
	          (self.getStorage('providers') || '').split(',');

	        // only load ID if at least one provider used this ID before
	        var intersect = cachedProviders.filter(function(n) {
	          return actualProviders.indexOf(n) !== -1;
	        });
	        if (intersect.length !== 0) {
	          self.params.IdentityId = id;
	        }
	      } else if (id) {
	        self.params.IdentityId = id;
	      }
	    }
	  },

	  /**
	   * @api private
	   */
	  createClients: function() {
	    var clientConfig = this._clientConfig;
	    this.webIdentityCredentials = this.webIdentityCredentials ||
	      new AWS.WebIdentityCredentials(this.params, clientConfig);
	    if (!this.cognito) {
	      var cognitoConfig = AWS.util.merge({}, clientConfig);
	      cognitoConfig.params = this.params;
	      this.cognito = new CognitoIdentity(cognitoConfig);
	    }
	    this.sts = this.sts || new STS(clientConfig);
	  },

	  /**
	   * @api private
	   */
	  cacheId: function cacheId(data) {
	    this._identityId = data.IdentityId;
	    this.params.IdentityId = this._identityId;

	    // cache this IdentityId in browser localStorage if possible
	    if (AWS.util.isBrowser()) {
	      this.setStorage('id', data.IdentityId);

	      if (this.params.Logins) {
	        this.setStorage('providers', Object.keys(this.params.Logins).join(','));
	      }
	    }
	  },

	  /**
	   * @api private
	   */
	  getStorage: function getStorage(key) {
	    return this.storage[this.localStorageKey[key] + this.params.IdentityPoolId + (this.params.LoginId || '')];
	  },

	  /**
	   * @api private
	   */
	  setStorage: function setStorage(key, val) {
	    try {
	      this.storage[this.localStorageKey[key] + this.params.IdentityPoolId + (this.params.LoginId || '')] = val;
	    } catch (_) {}
	  },

	  /**
	   * @api private
	   */
	  storage: (function() {
	    try {
	      var storage = AWS.util.isBrowser() && window.localStorage !== null && typeof window.localStorage === 'object' ?
	          window.localStorage : {};

	      // Test set/remove which would throw an error in Safari's private browsing
	      storage['aws.test-storage'] = 'foobar';
	      delete storage['aws.test-storage'];

	      return storage;
	    } catch (_) {
	      return {};
	    }
	  })()
	});


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['cognitoidentity'] = {};
	AWS.CognitoIdentity = Service.defineService('cognitoidentity', ['2014-06-30']);
	Object.defineProperty(apiLoader.services['cognitoidentity'], '2014-06-30', {
	  get: function get() {
	    var model = __webpack_require__(40);
	    model.paginators = __webpack_require__(41).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.CognitoIdentity;


/***/ }),
/* 40 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2014-06-30","endpointPrefix":"cognito-identity","jsonVersion":"1.1","protocol":"json","serviceFullName":"Amazon Cognito Identity","serviceId":"Cognito Identity","signatureVersion":"v4","targetPrefix":"AWSCognitoIdentityService","uid":"cognito-identity-2014-06-30"},"operations":{"CreateIdentityPool":{"input":{"type":"structure","required":["IdentityPoolName","AllowUnauthenticatedIdentities"],"members":{"IdentityPoolName":{},"AllowUnauthenticatedIdentities":{"type":"boolean"},"AllowClassicFlow":{"type":"boolean"},"SupportedLoginProviders":{"shape":"S5"},"DeveloperProviderName":{},"OpenIdConnectProviderARNs":{"shape":"S9"},"CognitoIdentityProviders":{"shape":"Sb"},"SamlProviderARNs":{"shape":"Sg"},"IdentityPoolTags":{"shape":"Sh"}}},"output":{"shape":"Sk"}},"DeleteIdentities":{"input":{"type":"structure","required":["IdentityIdsToDelete"],"members":{"IdentityIdsToDelete":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"UnprocessedIdentityIds":{"type":"list","member":{"type":"structure","members":{"IdentityId":{},"ErrorCode":{}}}}}}},"DeleteIdentityPool":{"input":{"type":"structure","required":["IdentityPoolId"],"members":{"IdentityPoolId":{}}}},"DescribeIdentity":{"input":{"type":"structure","required":["IdentityId"],"members":{"IdentityId":{}}},"output":{"shape":"Sv"}},"DescribeIdentityPool":{"input":{"type":"structure","required":["IdentityPoolId"],"members":{"IdentityPoolId":{}}},"output":{"shape":"Sk"}},"GetCredentialsForIdentity":{"input":{"type":"structure","required":["IdentityId"],"members":{"IdentityId":{},"Logins":{"shape":"S10"},"CustomRoleArn":{}}},"output":{"type":"structure","members":{"IdentityId":{},"Credentials":{"type":"structure","members":{"AccessKeyId":{},"SecretKey":{},"SessionToken":{},"Expiration":{"type":"timestamp"}}}}},"authtype":"none"},"GetId":{"input":{"type":"structure","required":["IdentityPoolId"],"members":{"AccountId":{},"IdentityPoolId":{},"Logins":{"shape":"S10"}}},"output":{"type":"structure","members":{"IdentityId":{}}},"authtype":"none"},"GetIdentityPoolRoles":{"input":{"type":"structure","required":["IdentityPoolId"],"members":{"IdentityPoolId":{}}},"output":{"type":"structure","members":{"IdentityPoolId":{},"Roles":{"shape":"S1c"},"RoleMappings":{"shape":"S1e"}}}},"GetOpenIdToken":{"input":{"type":"structure","required":["IdentityId"],"members":{"IdentityId":{},"Logins":{"shape":"S10"}}},"output":{"type":"structure","members":{"IdentityId":{},"Token":{}}},"authtype":"none"},"GetOpenIdTokenForDeveloperIdentity":{"input":{"type":"structure","required":["IdentityPoolId","Logins"],"members":{"IdentityPoolId":{},"IdentityId":{},"Logins":{"shape":"S10"},"PrincipalTags":{"shape":"S1s"},"TokenDuration":{"type":"long"}}},"output":{"type":"structure","members":{"IdentityId":{},"Token":{}}}},"GetPrincipalTagAttributeMap":{"input":{"type":"structure","required":["IdentityPoolId","IdentityProviderName"],"members":{"IdentityPoolId":{},"IdentityProviderName":{}}},"output":{"type":"structure","members":{"IdentityPoolId":{},"IdentityProviderName":{},"UseDefaults":{"type":"boolean"},"PrincipalTags":{"shape":"S1s"}}}},"ListIdentities":{"input":{"type":"structure","required":["IdentityPoolId","MaxResults"],"members":{"IdentityPoolId":{},"MaxResults":{"type":"integer"},"NextToken":{},"HideDisabled":{"type":"boolean"}}},"output":{"type":"structure","members":{"IdentityPoolId":{},"Identities":{"type":"list","member":{"shape":"Sv"}},"NextToken":{}}}},"ListIdentityPools":{"input":{"type":"structure","required":["MaxResults"],"members":{"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"IdentityPools":{"type":"list","member":{"type":"structure","members":{"IdentityPoolId":{},"IdentityPoolName":{}}}},"NextToken":{}}}},"ListTagsForResource":{"input":{"type":"structure","required":["ResourceArn"],"members":{"ResourceArn":{}}},"output":{"type":"structure","members":{"Tags":{"shape":"Sh"}}}},"LookupDeveloperIdentity":{"input":{"type":"structure","required":["IdentityPoolId"],"members":{"IdentityPoolId":{},"IdentityId":{},"DeveloperUserIdentifier":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"IdentityId":{},"DeveloperUserIdentifierList":{"type":"list","member":{}},"NextToken":{}}}},"MergeDeveloperIdentities":{"input":{"type":"structure","required":["SourceUserIdentifier","DestinationUserIdentifier","DeveloperProviderName","IdentityPoolId"],"members":{"SourceUserIdentifier":{},"DestinationUserIdentifier":{},"DeveloperProviderName":{},"IdentityPoolId":{}}},"output":{"type":"structure","members":{"IdentityId":{}}}},"SetIdentityPoolRoles":{"input":{"type":"structure","required":["IdentityPoolId","Roles"],"members":{"IdentityPoolId":{},"Roles":{"shape":"S1c"},"RoleMappings":{"shape":"S1e"}}}},"SetPrincipalTagAttributeMap":{"input":{"type":"structure","required":["IdentityPoolId","IdentityProviderName"],"members":{"IdentityPoolId":{},"IdentityProviderName":{},"UseDefaults":{"type":"boolean"},"PrincipalTags":{"shape":"S1s"}}},"output":{"type":"structure","members":{"IdentityPoolId":{},"IdentityProviderName":{},"UseDefaults":{"type":"boolean"},"PrincipalTags":{"shape":"S1s"}}}},"TagResource":{"input":{"type":"structure","required":["ResourceArn","Tags"],"members":{"ResourceArn":{},"Tags":{"shape":"Sh"}}},"output":{"type":"structure","members":{}}},"UnlinkDeveloperIdentity":{"input":{"type":"structure","required":["IdentityId","IdentityPoolId","DeveloperProviderName","DeveloperUserIdentifier"],"members":{"IdentityId":{},"IdentityPoolId":{},"DeveloperProviderName":{},"DeveloperUserIdentifier":{}}}},"UnlinkIdentity":{"input":{"type":"structure","required":["IdentityId","Logins","LoginsToRemove"],"members":{"IdentityId":{},"Logins":{"shape":"S10"},"LoginsToRemove":{"shape":"Sw"}}},"authtype":"none"},"UntagResource":{"input":{"type":"structure","required":["ResourceArn","TagKeys"],"members":{"ResourceArn":{},"TagKeys":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"UpdateIdentityPool":{"input":{"shape":"Sk"},"output":{"shape":"Sk"}}},"shapes":{"S5":{"type":"map","key":{},"value":{}},"S9":{"type":"list","member":{}},"Sb":{"type":"list","member":{"type":"structure","members":{"ProviderName":{},"ClientId":{},"ServerSideTokenCheck":{"type":"boolean"}}}},"Sg":{"type":"list","member":{}},"Sh":{"type":"map","key":{},"value":{}},"Sk":{"type":"structure","required":["IdentityPoolId","IdentityPoolName","AllowUnauthenticatedIdentities"],"members":{"IdentityPoolId":{},"IdentityPoolName":{},"AllowUnauthenticatedIdentities":{"type":"boolean"},"AllowClassicFlow":{"type":"boolean"},"SupportedLoginProviders":{"shape":"S5"},"DeveloperProviderName":{},"OpenIdConnectProviderARNs":{"shape":"S9"},"CognitoIdentityProviders":{"shape":"Sb"},"SamlProviderARNs":{"shape":"Sg"},"IdentityPoolTags":{"shape":"Sh"}}},"Sv":{"type":"structure","members":{"IdentityId":{},"Logins":{"shape":"Sw"},"CreationDate":{"type":"timestamp"},"LastModifiedDate":{"type":"timestamp"}}},"Sw":{"type":"list","member":{}},"S10":{"type":"map","key":{},"value":{}},"S1c":{"type":"map","key":{},"value":{}},"S1e":{"type":"map","key":{},"value":{"type":"structure","required":["Type"],"members":{"Type":{},"AmbiguousRoleResolution":{},"RulesConfiguration":{"type":"structure","required":["Rules"],"members":{"Rules":{"type":"list","member":{"type":"structure","required":["Claim","MatchType","Value","RoleARN"],"members":{"Claim":{},"MatchType":{},"Value":{},"RoleARN":{}}}}}}}}},"S1s":{"type":"map","key":{},"value":{}}}}

/***/ }),
/* 41 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"ListIdentityPools":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"IdentityPools"}}}

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(4);
	var STS = __webpack_require__(31);

	/**
	 * Represents credentials retrieved from STS SAML support.
	 *
	 * By default this provider gets credentials using the
	 * {AWS.STS.assumeRoleWithSAML} service operation. This operation
	 * requires a `RoleArn` containing the ARN of the IAM trust policy for the
	 * application for which credentials will be given, as well as a `PrincipalArn`
	 * representing the ARN for the SAML identity provider. In addition, the
	 * `SAMLAssertion` must be set to the token provided by the identity
	 * provider. See {constructor} for an example on creating a credentials
	 * object with proper `RoleArn`, `PrincipalArn`, and `SAMLAssertion` values.
	 *
	 * ## Refreshing Credentials from Identity Service
	 *
	 * In addition to AWS credentials expiring after a given amount of time, the
	 * login token from the identity provider will also expire. Once this token
	 * expires, it will not be usable to refresh AWS credentials, and another
	 * token will be needed. The SDK does not manage refreshing of the token value,
	 * but this can be done through a "refresh token" supported by most identity
	 * providers. Consult the documentation for the identity provider for refreshing
	 * tokens. Once the refreshed token is acquired, you should make sure to update
	 * this new token in the credentials object's {params} property. The following
	 * code will update the SAMLAssertion, assuming you have retrieved an updated
	 * token from the identity provider:
	 *
	 * ```javascript
	 * AWS.config.credentials.params.SAMLAssertion = updatedToken;
	 * ```
	 *
	 * Future calls to `credentials.refresh()` will now use the new token.
	 *
	 * @!attribute params
	 *   @return [map] the map of params passed to
	 *     {AWS.STS.assumeRoleWithSAML}. To update the token, set the
	 *     `params.SAMLAssertion` property.
	 */
	AWS.SAMLCredentials = AWS.util.inherit(AWS.Credentials, {
	  /**
	   * Creates a new credentials object.
	   * @param (see AWS.STS.assumeRoleWithSAML)
	   * @example Creating a new credentials object
	   *   AWS.config.credentials = new AWS.SAMLCredentials({
	   *     RoleArn: 'arn:aws:iam::1234567890:role/SAMLRole',
	   *     PrincipalArn: 'arn:aws:iam::1234567890:role/SAMLPrincipal',
	   *     SAMLAssertion: 'base64-token', // base64-encoded token from IdP
	   *   });
	   * @see AWS.STS.assumeRoleWithSAML
	   */
	  constructor: function SAMLCredentials(params) {
	    AWS.Credentials.call(this);
	    this.expired = true;
	    this.params = params;
	  },

	  /**
	   * Refreshes credentials using {AWS.STS.assumeRoleWithSAML}
	   *
	   * @callback callback function(err)
	   *   Called when the STS service responds (or fails). When
	   *   this callback is called with no error, it means that the credentials
	   *   information has been loaded into the object (as the `accessKeyId`,
	   *   `secretAccessKey`, and `sessionToken` properties).
	   *   @param err [Error] if an error occurred, this value will be filled
	   * @see get
	   */
	  refresh: function refresh(callback) {
	    this.coalesceRefresh(callback || AWS.util.fn.callback);
	  },

	  /**
	   * @api private
	   */
	  load: function load(callback) {
	    var self = this;
	    self.createClients();
	    self.service.assumeRoleWithSAML(function (err, data) {
	      if (!err) {
	        self.service.credentialsFrom(data, self);
	      }
	      callback(err);
	    });
	  },

	  /**
	   * @api private
	   */
	  createClients: function() {
	    this.service = this.service || new STS({params: this.params});
	  }

	});


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(4);
	var util = AWS.util;
	var Shape = AWS.Model.Shape;

	var xml2js = __webpack_require__(44);

	/**
	 * @api private
	 */
	var options = {  // options passed to xml2js parser
	  explicitCharkey: false, // undocumented
	  trim: false,            // trim the leading/trailing whitespace from text nodes
	  normalize: false,       // trim interior whitespace inside text nodes
	  explicitRoot: false,    // return the root node in the resulting object?
	  emptyTag: null,         // the default value for empty nodes
	  explicitArray: true,    // always put child nodes in an array
	  ignoreAttrs: false,     // ignore attributes, only create text nodes
	  mergeAttrs: false,      // merge attributes and child elements
	  validator: null         // a callable validator
	};

	function NodeXmlParser() { }

	NodeXmlParser.prototype.parse = function(xml, shape) {
	  shape = shape || {};

	  var result = null;
	  var error = null;

	  var parser = new xml2js.Parser(options);
	  parser.parseString(xml, function (e, r) {
	    error = e;
	    result = r;
	  });

	  if (result) {
	    var data = parseXml(result, shape);
	    if (result.ResponseMetadata) {
	      data.ResponseMetadata = parseXml(result.ResponseMetadata[0], {});
	    }
	    return data;
	  } else if (error) {
	    throw util.error(error, {code: 'XMLParserError', retryable: true});
	  } else { // empty xml document
	    return parseXml({}, shape);
	  }
	};

	function parseXml(xml, shape) {
	  switch (shape.type) {
	    case 'structure': return parseStructure(xml, shape);
	    case 'map': return parseMap(xml, shape);
	    case 'list': return parseList(xml, shape);
	    case undefined: case null: return parseUnknown(xml);
	    default: return parseScalar(xml, shape);
	  }
	}

	function parseStructure(xml, shape) {
	  var data = {};
	  if (xml === null) return data;

	  util.each(shape.members, function(memberName, memberShape) {
	    var xmlName = memberShape.name;
	    if (Object.prototype.hasOwnProperty.call(xml, xmlName) && Array.isArray(xml[xmlName])) {
	      var xmlChild = xml[xmlName];
	      if (!memberShape.flattened) xmlChild = xmlChild[0];

	      data[memberName] = parseXml(xmlChild, memberShape);
	    } else if (memberShape.isXmlAttribute &&
	               xml.$ && Object.prototype.hasOwnProperty.call(xml.$, xmlName)) {
	      data[memberName] = parseScalar(xml.$[xmlName], memberShape);
	    } else if (memberShape.type === 'list' && !shape.api.xmlNoDefaultLists) {
	      data[memberName] = memberShape.defaultValue;
	    }
	  });

	  return data;
	}

	function parseMap(xml, shape) {
	  var data = {};
	  if (xml === null) return data;

	  var xmlKey = shape.key.name || 'key';
	  var xmlValue = shape.value.name || 'value';
	  var iterable = shape.flattened ? xml : xml.entry;

	  if (Array.isArray(iterable)) {
	    util.arrayEach(iterable, function(child) {
	      data[child[xmlKey][0]] = parseXml(child[xmlValue][0], shape.value);
	    });
	  }

	  return data;
	}

	function parseList(xml, shape) {
	  var data = [];
	  var name = shape.member.name || 'member';
	  if (shape.flattened) {
	    util.arrayEach(xml, function(xmlChild) {
	      data.push(parseXml(xmlChild, shape.member));
	    });
	  } else if (xml && Array.isArray(xml[name])) {
	    util.arrayEach(xml[name], function(child) {
	      data.push(parseXml(child, shape.member));
	    });
	  }

	  return data;
	}

	function parseScalar(text, shape) {
	  if (text && text.$ && text.$.encoding === 'base64') {
	    shape = new Shape.create({type: text.$.encoding});
	  }
	  if (text && text._) text = text._;

	  if (typeof shape.toType === 'function') {
	    return shape.toType(text);
	  } else {
	    return text;
	  }
	}

	function parseUnknown(xml) {
	  if (xml === undefined || xml === null) return '';
	  if (typeof xml === 'string') return xml;

	  // parse a list
	  if (Array.isArray(xml)) {
	    var arr = [];
	    for (i = 0; i < xml.length; i++) {
	      arr.push(parseXml(xml[i], {}));
	    }
	    return arr;
	  }

	  // empty object
	  var keys = Object.keys(xml), i;
	  if (keys.length === 0 || (keys.length === 1 && keys[0] === '$')) {
	    return {};
	  }

	  // object, parse as structure
	  var data = {};
	  for (i = 0; i < keys.length; i++) {
	    var key = keys[i], value = xml[key];
	    if (key === '$') continue;
	    if (value.length > 1) { // this member is a list
	      data[key] = parseList(value, {member: {}});
	    } else { // this member is a single item
	      data[key] = parseXml(value[0], {});
	    }
	  }
	  return data;
	}

	/**
	 * @api private
	 */
	module.exports = NodeXmlParser;


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports =
	/******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};

	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {

	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;

	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};

	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;

	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}


	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;

	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;

	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";

	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, exports, __webpack_require__) {

		module.exports = __webpack_require__(1);


	/***/ }),
	/* 1 */
	/***/ (function(module, exports, __webpack_require__) {

		// Generated by CoffeeScript 1.12.7
		(function() {
		  "use strict";
		  var builder, defaults, parser, processors,
		    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
		    hasProp = {}.hasOwnProperty;

		  defaults = __webpack_require__(2);

		  builder = __webpack_require__(3);

		  parser = __webpack_require__(26);

		  processors = __webpack_require__(60);

		  exports.defaults = defaults.defaults;

		  exports.processors = processors;

		  exports.ValidationError = (function(superClass) {
		    extend(ValidationError, superClass);

		    function ValidationError(message) {
		      this.message = message;
		    }

		    return ValidationError;

		  })(Error);

		  exports.Builder = builder.Builder;

		  exports.Parser = parser.Parser;

		  exports.parseString = parser.parseString;

		}).call(this);


	/***/ }),
	/* 2 */
	/***/ (function(module, exports) {

		// Generated by CoffeeScript 1.12.7
		(function() {
		  exports.defaults = {
		    "0.1": {
		      explicitCharkey: false,
		      trim: true,
		      normalize: true,
		      normalizeTags: false,
		      attrkey: "@",
		      charkey: "#",
		      explicitArray: false,
		      ignoreAttrs: false,
		      mergeAttrs: false,
		      explicitRoot: false,
		      validator: null,
		      xmlns: false,
		      explicitChildren: false,
		      childkey: '@@',
		      charsAsChildren: false,
		      includeWhiteChars: false,
		      async: false,
		      strict: true,
		      attrNameProcessors: null,
		      attrValueProcessors: null,
		      tagNameProcessors: null,
		      valueProcessors: null,
		      emptyTag: ''
		    },
		    "0.2": {
		      explicitCharkey: false,
		      trim: false,
		      normalize: false,
		      normalizeTags: false,
		      attrkey: "$",
		      charkey: "_",
		      explicitArray: true,
		      ignoreAttrs: false,
		      mergeAttrs: false,
		      explicitRoot: true,
		      validator: null,
		      xmlns: false,
		      explicitChildren: false,
		      preserveChildrenOrder: false,
		      childkey: '$$',
		      charsAsChildren: false,
		      includeWhiteChars: false,
		      async: false,
		      strict: true,
		      attrNameProcessors: null,
		      attrValueProcessors: null,
		      tagNameProcessors: null,
		      valueProcessors: null,
		      rootName: 'root',
		      xmldec: {
		        'version': '1.0',
		        'encoding': 'UTF-8',
		        'standalone': true
		      },
		      doctype: null,
		      renderOpts: {
		        'pretty': true,
		        'indent': '  ',
		        'newline': '\n'
		      },
		      headless: false,
		      chunkSize: 10000,
		      emptyTag: '',
		      cdata: false
		    }
		  };

		}).call(this);


	/***/ }),
	/* 3 */
	/***/ (function(module, exports, __webpack_require__) {

		// Generated by CoffeeScript 1.12.7
		(function() {
		  "use strict";
		  var builder, defaults, escapeCDATA, requiresCDATA, wrapCDATA,
		    hasProp = {}.hasOwnProperty;

		  builder = __webpack_require__(4);

		  defaults = __webpack_require__(2).defaults;

		  requiresCDATA = function(entry) {
		    return typeof entry === "string" && (entry.indexOf('&') >= 0 || entry.indexOf('>') >= 0 || entry.indexOf('<') >= 0);
		  };

		  wrapCDATA = function(entry) {
		    return "<![CDATA[" + (escapeCDATA(entry)) + "]]>";
		  };

		  escapeCDATA = function(entry) {
		    return entry.replace(']]>', ']]]]><![CDATA[>');
		  };

		  exports.Builder = (function() {
		    function Builder(opts) {
		      var key, ref, value;
		      this.options = {};
		      ref = defaults["0.2"];
		      for (key in ref) {
		        if (!hasProp.call(ref, key)) continue;
		        value = ref[key];
		        this.options[key] = value;
		      }
		      for (key in opts) {
		        if (!hasProp.call(opts, key)) continue;
		        value = opts[key];
		        this.options[key] = value;
		      }
		    }

		    Builder.prototype.buildObject = function(rootObj) {
		      var attrkey, charkey, render, rootElement, rootName;
		      attrkey = this.options.attrkey;
		      charkey = this.options.charkey;
		      if ((Object.keys(rootObj).length === 1) && (this.options.rootName === defaults['0.2'].rootName)) {
		        rootName = Object.keys(rootObj)[0];
		        rootObj = rootObj[rootName];
		      } else {
		        rootName = this.options.rootName;
		      }
		      render = (function(_this) {
		        return function(element, obj) {
		          var attr, child, entry, index, key, value;
		          if (typeof obj !== 'object') {
		            if (_this.options.cdata && requiresCDATA(obj)) {
		              element.raw(wrapCDATA(obj));
		            } else {
		              element.txt(obj);
		            }
		          } else if (Array.isArray(obj)) {
		            for (index in obj) {
		              if (!hasProp.call(obj, index)) continue;
		              child = obj[index];
		              for (key in child) {
		                entry = child[key];
		                element = render(element.ele(key), entry).up();
		              }
		            }
		          } else {
		            for (key in obj) {
		              if (!hasProp.call(obj, key)) continue;
		              child = obj[key];
		              if (key === attrkey) {
		                if (typeof child === "object") {
		                  for (attr in child) {
		                    value = child[attr];
		                    element = element.att(attr, value);
		                  }
		                }
		              } else if (key === charkey) {
		                if (_this.options.cdata && requiresCDATA(child)) {
		                  element = element.raw(wrapCDATA(child));
		                } else {
		                  element = element.txt(child);
		                }
		              } else if (Array.isArray(child)) {
		                for (index in child) {
		                  if (!hasProp.call(child, index)) continue;
		                  entry = child[index];
		                  if (typeof entry === 'string') {
		                    if (_this.options.cdata && requiresCDATA(entry)) {
		                      element = element.ele(key).raw(wrapCDATA(entry)).up();
		                    } else {
		                      element = element.ele(key, entry).up();
		                    }
		                  } else {
		                    element = render(element.ele(key), entry).up();
		                  }
		                }
		              } else if (typeof child === "object") {
		                element = render(element.ele(key), child).up();
		              } else {
		                if (typeof child === 'string' && _this.options.cdata && requiresCDATA(child)) {
		                  element = element.ele(key).raw(wrapCDATA(child)).up();
		                } else {
		                  if (child == null) {
		                    child = '';
		                  }
		                  element = element.ele(key, child.toString()).up();
		                }
		              }
		            }
		          }
		          return element;
		        };
		      })(this);
		      rootElement = builder.create(rootName, this.options.xmldec, this.options.doctype, {
		        headless: this.options.headless,
		        allowSurrogateChars: this.options.allowSurrogateChars
		      });
		      return render(rootElement, rootObj).end(this.options.renderOpts);
		    };

		    return Builder;

		  })();

		}).call(this);


	/***/ }),
	/* 4 */
	/***/ (function(module, exports, __webpack_require__) {

		// Generated by CoffeeScript 1.12.7
		(function() {
		  var XMLDocument, XMLDocumentCB, XMLStreamWriter, XMLStringWriter, assign, isFunction, ref;

		  ref = __webpack_require__(5), assign = ref.assign, isFunction = ref.isFunction;

		  XMLDocument = __webpack_require__(6);

		  XMLDocumentCB = __webpack_require__(24);

		  XMLStringWriter = __webpack_require__(22);

		  XMLStreamWriter = __webpack_require__(25);

		  module.exports.create = function(name, xmldec, doctype, options) {
		    var doc, root;
		    if (name == null) {
		      throw new Error("Root element needs a name");
		    }
		    options = assign({}, xmldec, doctype, options);
		    doc = new XMLDocument(options);
		    root = doc.element(name);
		    if (!options.headless) {
		      doc.declaration(options);
		      if ((options.pubID != null) || (options.sysID != null)) {
		        doc.doctype(options);
		      }
		    }
		    return root;
		  };

		  module.exports.begin = function(options, onData, onEnd) {
		    var ref1;
		    if (isFunction(options)) {
		      ref1 = [options, onData], onData = ref1[0], onEnd = ref1[1];
		      options = {};
		    }
		    if (onData) {
		      return new XMLDocumentCB(options, onData, onEnd);
		    } else {
		      return new XMLDocument(options);
		    }
		  };

		  module.exports.stringWriter = function(options) {
		    return new XMLStringWriter(options);
		  };

		  module.exports.streamWriter = function(stream, options) {
		    return new XMLStreamWriter(stream, options);
		  };

		}).call(this);


	/***/ }),
	/* 5 */
	/***/ (function(module, exports) {

		// Generated by CoffeeScript 1.12.7
		(function() {
		  var assign, isArray, isEmpty, isFunction, isObject, isPlainObject,
		    slice = [].slice,
		    hasProp = {}.hasOwnProperty;

		  assign = function() {
		    var i, key, len, source, sources, target;
		    target = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];
		    if (isFunction(Object.assign)) {
		      Object.assign.apply(null, arguments);
		    } else {
		      for (i = 0, len = sources.length; i < len; i++) {
		        source = sources[i];
		        if (source != null) {
		          for (key in source) {
		            if (!hasProp.call(source, key)) continue;
		            target[key] = source[key];
		          }
		        }
		      }
		    }
		    return target;
		  };

		  isFunction = function(val) {
		    return !!val && Object.prototype.toString.call(val) === '[object Function]';
		  };

		  isObject = function(val) {
		    var ref;
		    return !!val && ((ref = typeof val) === 'function' || ref === 'object');
		  };

		  isArray = function(val) {
		    if (isFunction(Array.isArray)) {
		      return Array.isArray(val);
		    } else {
		      return Object.prototype.toString.call(val) === '[object Array]';
		    }
		  };

		  isEmpty = function(val) {
		    var key;
		    if (isArray(val)) {
		      return !val.length;
		    } else {
		      for (key in val) {
		        if (!hasProp.call(val, key)) continue;
		        return false;
		      }
		      return true;
		    }
		  };

		  isPlainObject = function(val) {
		    var ctor, proto;
		    return isObject(val) && (proto = Object.getPrototypeOf(val)) && (ctor = proto.constructor) && (typeof ctor === 'function') && (ctor instanceof ctor) && (Function.prototype.toString.call(ctor) === Function.prototype.toString.call(Object));
		  };

		  module.exports.assign = assign;

		  module.exports.isFunction = isFunction;

		  module.exports.isObject = isObject;

		  module.exports.isArray = isArray;

		  module.exports.isEmpty = isEmpty;

		  module.exports.isPlainObject = isPlainObject;

		}).call(this);


	/***/ }),
	/* 6 */
	/***/ (function(module, exports, __webpack_require__) {

		// Generated by CoffeeScript 1.12.7
		(function() {
		  var XMLDocument, XMLNode, XMLStringWriter, XMLStringifier, isPlainObject,
		    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
		    hasProp = {}.hasOwnProperty;

		  isPlainObject = __webpack_require__(5).isPlainObject;

		  XMLNode = __webpack_require__(7);

		  XMLStringifier = __webpack_require__(21);

		  XMLStringWriter = __webpack_require__(22);

		  module.exports = XMLDocument = (function(superClass) {
		    extend(XMLDocument, superClass);

		    function XMLDocument(options) {
		      XMLDocument.__super__.constructor.call(this, null);
		      options || (options = {});
		      if (!options.writer) {
		        options.writer = new XMLStringWriter();
		      }
		      this.options = options;
		      this.stringify = new XMLStringifier(options);
		      this.isDocument = true;
		    }

		    XMLDocument.prototype.end = function(writer) {
		      var writerOptions;
		      if (!writer) {
		        writer = this.options.writer;
		      } else if (isPlainObject(writer)) {
		        writerOptions = writer;
		        writer = this.options.writer.set(writerOptions);
		      }
		      return writer.document(this);
		    };

		    XMLDocument.prototype.toString = function(options) {
		      return this.options.writer.set(options).document(this);
		    };

		    return XMLDocument;

		  })(XMLNode);

		}).call(this);


	/***/ }),
	/* 7 */
	/***/ (function(module, exports, __webpack_require__) {

		// Generated by CoffeeScript 1.12.7
		(function() {
		  var XMLCData, XMLComment, XMLDeclaration, XMLDocType, XMLElement, XMLNode, XMLProcessingInstruction, XMLRaw, XMLText, isEmpty, isFunction, isObject, ref,
		    hasProp = {}.hasOwnProperty;

		  ref = __webpack_require__(5), isObject = ref.isObject, isFunction = ref.isFunction, isEmpty = ref.isEmpty;

		  XMLElement = null;

		  XMLCData = null;

		  XMLComment = null;

		  XMLDeclaration = null;

		  XMLDocType = null;

		  XMLRaw = null;

		  XMLText = null;

		  XMLProcessingInstruction = null;

		  module.exports = XMLNode = (function() {
		    function XMLNode(parent) {
		      this.parent = parent;
		      if (this.parent) {
		        this.options = this.parent.options;
		        this.stringify = this.parent.stringify;
		      }
		      this.children = [];
		      if (!XMLElement) {
		        XMLElement = __webpack_require__(8);
		        XMLCData = __webpack_require__(10);
		        XMLComment = __webpack_require__(11);
		        XMLDeclaration = __webpack_require__(12);
		        XMLDocType = __webpack_require__(13);
		        XMLRaw = __webpack_require__(18);
		        XMLText = __webpack_require__(19);
		        XMLProcessingInstruction = __webpack_require__(20);
		      }
		    }

		    XMLNode.prototype.element = function(name, attributes, text) {
		      var childNode, item, j, k, key, lastChild, len, len1, ref1, val;
		      lastChild = null;
		      if (attributes == null) {
		        attributes = {};
		      }
		      attributes = attributes.valueOf();
		      if (!isObject(attributes)) {
		        ref1 = [attributes, text], text = ref1[0], attributes = ref1[1];
		      }
		      if (name != null) {
		        name = name.valueOf();
		      }
		      if (Array.isArray(name)) {
		        for (j = 0, len = name.length; j < len; j++) {
		          item = name[j];
		          lastChild = this.element(item);
		        }
		      } else if (isFunction(name)) {
		        lastChild = this.element(name.apply());
		      } else if (isObject(name)) {
		        for (key in name) {
		          if (!hasProp.call(name, key)) continue;
		          val = name[key];
		          if (isFunction(val)) {
		            val = val.apply();
		          }
		          if ((isObject(val)) && (isEmpty(val))) {
		            val = null;
		          }
		          if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) {
		            lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);
		          } else if (!this.options.separateArrayItems && Array.isArray(val)) {
		            for (k = 0, len1 = val.length; k < len1; k++) {
		              item = val[k];
		              childNode = {};
		              childNode[key] = item;
		              lastChild = this.element(childNode);
		            }
		          } else if (isObject(val)) {
		            lastChild = this.element(key);
		            lastChild.element(val);
		          } else {
		            lastChild = this.element(key, val);
		          }
		        }
		      } else {
		        if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) {
		          lastChild = this.text(text);
		        } else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) {
		          lastChild = this.cdata(text);
		        } else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) {
		          lastChild = this.comment(text);
		        } else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) {
		          lastChild = this.raw(text);
		        } else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && name.indexOf(this.stringify.convertPIKey) === 0) {
		          lastChild = this.instruction(name.substr(this.stringify.convertPIKey.length), text);
		        } else {
		          lastChild = this.node(name, attributes, text);
		        }
		      }
		      if (lastChild == null) {
		        throw new Error("Could not create any elements with: " + name);
		      }
		      return lastChild;
		    };

		    XMLNode.prototype.insertBefore = function(name, attributes, text) {
		      var child, i, removed;
		      if (this.isRoot) {
		        throw new Error("Cannot insert elements at root level");
		      }
		      i = this.parent.children.indexOf(this);
		      removed = this.parent.children.splice(i);
		      child = this.parent.element(name, attributes, text);
		      Array.prototype.push.apply(this.parent.children, removed);
		      return child;
		    };

		    XMLNode.prototype.insertAfter = function(name, attributes, text) {
		      var child, i, removed;
		      if (this.isRoot) {
		        throw new Error("Cannot insert elements at root level");
		      }
		      i = this.parent.children.indexOf(this);
		      removed = this.parent.children.splice(i + 1);
		      child = this.parent.element(name, attributes, text);
		      Array.prototype.push.apply(this.parent.children, removed);
		      return child;
		    };

		    XMLNode.prototype.remove = function() {
		      var i, ref1;
		      if (this.isRoot) {
		        throw new Error("Cannot remove the root element");
		      }
		      i = this.parent.children.indexOf(this);
		      [].splice.apply(this.parent.children, [i, i - i + 1].concat(ref1 = [])), ref1;
		      return this.parent;
		    };

		    XMLNode.prototype.node = function(name, attributes, text) {
		      var child, ref1;
		      if (name != null) {
		        name = name.valueOf();
		      }
		      attributes || (attributes = {});
		      attributes = attributes.valueOf();
		      if (!isObject(attributes)) {
		        ref1 = [attributes, text], text = ref1[0], attributes = ref1[1];
		      }
		      child = new XMLElement(this, name, attributes);
		      if (text != null) {
		        child.text(text);
		      }
		      this.children.push(child);
		      return child;
		    };

		    XMLNode.prototype.text = function(value) {
		      var child;
		      child = new XMLText(this, value);
		      this.children.push(child);
		      return this;
		    };

		    XMLNode.prototype.cdata = function(value) {
		      var child;
		      child = new XMLCData(this, value);
		      this.children.push(child);
		      return this;
		    };

		    XMLNode.prototype.comment = function(value) {
		      var child;
		      child = new XMLComment(this, value);
		      this.children.push(child);
		      return this;
		    };

		    XMLNode.prototype.commentBefore = function(value) {
		      var child, i, removed;
		      i = this.parent.children.indexOf(this);
		      removed = this.parent.children.splice(i);
		      child = this.parent.comment(value);
		      Array.prototype.push.apply(this.parent.children, removed);
		      return this;
		    };

		    XMLNode.prototype.commentAfter = function(value) {
		      var child, i, removed;
		      i = this.parent.children.indexOf(this);
		      removed = this.parent.children.splice(i + 1);
		      child = this.parent.comment(value);
		      Array.prototype.push.apply(this.parent.children, removed);
		      return this;
		    };

		    XMLNode.prototype.raw = function(value) {
		      var child;
		      child = new XMLRaw(this, value);
		      this.children.push(child);
		      return this;
		    };

		    XMLNode.prototype.instruction = function(target, value) {
		      var insTarget, insValue, instruction, j, len;
		      if (target != null) {
		        target = target.valueOf();
		      }
		      if (value != null) {
		        value = value.valueOf();
		      }
		      if (Array.isArray(target)) {
		        for (j = 0, len = target.length; j < len; j++) {
		          insTarget = target[j];
		          this.instruction(insTarget);
		        }
		      } else if (isObject(target)) {
		        for (insTarget in target) {
		          if (!hasProp.call(target, insTarget)) continue;
		          insValue = target[insTarget];
		          this.instruction(insTarget, insValue);
		        }
		      } else {
		        if (isFunction(value)) {
		          value = value.apply();
		        }
		        instruction = new XMLProcessingInstruction(this, target, value);
		        this.children.push(instruction);
		      }
		      return this;
		    };

		    XMLNode.prototype.instructionBefore = function(target, value) {
		      var child, i, removed;
		      i = this.parent.children.indexOf(this);
		      removed = this.parent.children.splice(i);
		      child = this.parent.instruction(target, value);
		      Array.prototype.push.apply(this.parent.children, removed);
		      return this;
		    };

		    XMLNode.prototype.instructionAfter = function(target, value) {
		      var child, i, removed;
		      i = this.parent.children.indexOf(this);
		      removed = this.parent.children.splice(i + 1);
		      child = this.parent.instruction(target, value);
		      Array.prototype.push.apply(this.parent.children, removed);
		      return this;
		    };

		    XMLNode.prototype.declaration = function(version, encoding, standalone) {
		      var doc, xmldec;
		      doc = this.document();
		      xmldec = new XMLDeclaration(doc, version, encoding, standalone);
		      if (doc.children[0] instanceof XMLDeclaration) {
		        doc.children[0] = xmldec;
		      } else {
		        doc.children.unshift(xmldec);
		      }
		      return doc.root() || doc;
		    };

		    XMLNode.prototype.doctype = function(pubID, sysID) {
		      var child, doc, doctype, i, j, k, len, len1, ref1, ref2;
		      doc = this.document();
		      doctype = new XMLDocType(doc, pubID, sysID);
		      ref1 = doc.children;
		      for (i = j = 0, len = ref1.length; j < len; i = ++j) {
		        child = ref1[i];
		        if (child instanceof XMLDocType) {
		          doc.children[i] = doctype;
		          return doctype;
		        }
		      }
		      ref2 = doc.children;
		      for (i = k = 0, len1 = ref2.length; k < len1; i = ++k) {
		        child = ref2[i];
		        if (child.isRoot) {
		          doc.children.splice(i, 0, doctype);
		          return doctype;
		        }
		      }
		      doc.children.push(doctype);
		      return doctype;
		    };

		    XMLNode.prototype.up = function() {
		      if (this.isRoot) {
		        throw new Error("The root node has no parent. Use doc() if you need to get the document object.");
		      }
		      return this.parent;
		    };

		    XMLNode.prototype.root = function() {
		      var node;
		      node = this;
		      while (node) {
		        if (node.isDocument) {
		          return node.rootObject;
		        } else if (node.isRoot) {
		          return node;
		        } else {
		          node = node.parent;
		        }
		      }
		    };

		    XMLNode.prototype.document = function() {
		      var node;
		      node = this;
		      while (node) {
		        if (node.isDocument) {
		          return node;
		        } else {
		          node = node.parent;
		        }
		      }
		    };

		    XMLNode.prototype.end = function(options) {
		      return this.document().end(options);
		    };

		    XMLNode.prototype.prev = function() {
		      var i;
		      i = this.parent.children.indexOf(this);
		      if (i < 1) {
		        throw new Error("Already at the first node");
		      }
		      return this.parent.children[i - 1];
		    };

		    XMLNode.prototype.next = function() {
		      var i;
		      i = this.parent.children.indexOf(this);
		      if (i === -1 || i === this.parent.children.length - 1) {
		        throw new Error("Already at the last node");
		      }
		      return this.parent.children[i + 1];
		    };

		    XMLNode.prototype.importDocument = function(doc) {
		      var clonedRoot;
		      clonedRoot = doc.root().clone();
		      clonedRoot.parent = this;
		      clonedRoot.isRoot = false;
		      this.children.push(clonedRoot);
		      return this;
		    };

		    XMLNode.prototype.ele = function(name, attributes, text) {
		      return this.element(name, attributes, text);
		    };

		    XMLNode.prototype.nod = function(name, attributes, text) {
		      return this.node(name, attributes, text);
		    };

		    XMLNode.prototype.txt = function(value) {
		      return this.text(value);
		    };

		    XMLNode.prototype.dat = function(value) {
		      return this.cdata(value);
		    };

		    XMLNode.prototype.com = function(value) {
		      return this.comment(value);
		    };

		    XMLNode.prototype.ins = function(target, value) {
		      return this.instruction(target, value);
		    };

		    XMLNode.prototype.doc = function() {
		      return this.document();
		    };

		    XMLNode.prototype.dec = function(version, encoding, standalone) {
		      return this.declaration(version, encoding, standalone);
		    };

		    XMLNode.prototype.dtd = function(pubID, sysID) {
		      return this.doctype(pubID, sysID);
		    };

		    XMLNode.prototype.e = function(name, attributes, text) {
		      return this.element(name, attributes, text);
		    };

		    XMLNode.prototype.n = function(name, attributes, text) {
		      return this.node(name, attributes, text);
		    };

		    XMLNode.prototype.t = function(value) {
		      return this.text(value);
		    };

		    XMLNode.prototype.d = function(value) {
		      return this.cdata(value);
		    };

		    XMLNode.prototype.c = function(value) {
		      return this.comment(value);
		    };

		    XMLNode.prototype.r = function(value) {
		      return this.raw(value);
		    };

		    XMLNode.prototype.i = function(target, value) {
		      return this.instruction(target, value);
		    };

		    XMLNode.prototype.u = function() {
		      return this.up();
		    };

		    XMLNode.prototype.importXMLBuilder = function(doc) {
		      return this.importDocument(doc);
		    };

		    return XMLNode;

		  })();

		}).call(this);


	/***/ }),
	/* 8 */
	/***/ (function(module, exports, __webpack_require__) {

		// Generated by CoffeeScript 1.12.7
		(function() {
		  var XMLAttribute, XMLElement, XMLNode, isFunction, isObject, ref,
		    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
		    hasProp = {}.hasOwnProperty;

		  ref = __webpack_require__(5), isObject = ref.isObject, isFunction = ref.isFunction;

		  XMLNode = __webpack_require__(7);

		  XMLAttribute = __webpack_require__(9);

		  module.exports = XMLElement = (function(superClass) {
		    extend(XMLElement, superClass);

		    function XMLElement(parent, name, attributes) {
		      XMLElement.__super__.constructor.call(this, parent);
		      if (name == null) {
		        throw new Error("Missing element name");
		      }
		      this.name = this.stringify.eleName(name);
		      this.attributes = {};
		      if (attributes != null) {
		        this.attribute(attributes);
		      }
		      if (parent.isDocument) {
		        this.isRoot = true;
		        this.documentObject = parent;
		        parent.rootObject = this;
		      }
		    }

		    XMLElement.prototype.clone = function() {
		      var att, attName, clonedSelf, ref1;
		      clonedSelf = Object.create(this);
		      if (clonedSelf.isRoot) {
		        clonedSelf.documentObject = null;
		      }
		      clonedSelf.attributes = {};
		      ref1 = this.attributes;
		      for (attName in ref1) {
		        if (!hasProp.call(ref1, attName)) continue;
		        att = ref1[attName];
		        clonedSelf.attributes[attName] = att.clone();
		      }
		      clonedSelf.children = [];
		      this.children.forEach(function(child) {
		        var clonedChild;
		        clonedChild = child.clone();
		        clonedChild.parent = clonedSelf;
		        return clonedSelf.children.push(clonedChild);
		      });
		      return clonedSelf;
		    };

		    XMLElement.prototype.attribute = function(name, value) {
		      var attName, attValue;
		      if (name != null) {
		        name = name.valueOf();
		      }
		      if (isObject(name)) {
		        for (attName in name) {
		          if (!hasProp.call(name, attName)) continue;
		          attValue = name[attName];
		          this.attribute(attName, attValue);
		        }
		      } else {
		        if (isFunction(value)) {
		          value = value.apply();
		        }
		        if (!this.options.skipNullAttributes || (value != null)) {
		          this.attributes[name] = new XMLAttribute(this, name, value);
		        }
		      }
		      return this;
		    };

		    XMLElement.prototype.removeAttribute = function(name) {
		      var attName, i, len;
		      if (name == null) {
		        throw new Error("Missing attribute name");
		      }
		      name = name.valueOf();
		      if (Array.isArray(name)) {
		        for (i = 0, len = name.length; i < len; i++) {
		          attName = name[i];
		          delete this.attributes[attName];
		        }
		      } else {
		        delete this.attributes[name];
		      }
		      return this;
		    };

		    XMLElement.prototype.toString = function(options) {
		      return this.options.writer.set(options).element(this);
		    };

		    XMLElement.prototype.att = function(name, value) {
		      return this.attribute(name, value);
		    };

		    XMLElement.prototype.a = function(name, value) {
		      return this.attribute(name, value);
		    };

		    return XMLElement;

		  })(XMLNode);

		}).call(this);


	/***/ }),
	/* 9 */
	/***/ (function(module, exports) {

		// Generated by CoffeeScript 1.12.7
		(function() {
		  var XMLAttribute;

		  module.exports = XMLAttribute = (function() {
		    function XMLAttribute(parent, name, value) {
		      this.options = parent.options;
		      this.stringify = parent.stringify;
		      if (name == null) {
		        throw new Error("Missing attribute name of element " + parent.name);
		      }
		      if (value == null) {
		        throw new Error("Missing attribute value for attribute " + name + " of element " + parent.name);
		      }
		      this.name = this.stringify.attName(name);
		      this.value = this.stringify.attValue(value);
		    }

		    XMLAttribute.prototype.clone = function() {
		      return Object.create(this);
		    };

		    XMLAttribute.prototype.toString = function(options) {
		      return this.options.writer.set(options).attribute(this);
		    };

		    return XMLAttribute;

		  })();

		}).call(this);


	/***/ }),
	/* 10 */
	/***/ (function(module, exports, __webpack_require__) {

		// Generated by CoffeeScript 1.12.7
		(function() {
		  var XMLCData, XMLNode,
		    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
		    hasProp = {}.hasOwnProperty;

		  XMLNode = __webpack_require__(7);

		  module.exports = XMLCData = (function(superClass) {
		    extend(XMLCData, superClass);

		    function XMLCData(parent, text) {
		      XMLCData.__super__.constructor.call(this, parent);
		      if (text == null) {
		        throw new Error("Missing CDATA text");
		      }
		      this.text = this.stringify.cdata(text);
		    }

		    XMLCData.prototype.clone = function() {
		      return Object.create(this);
		    };

		    XMLCData.prototype.toString = function(options) {
		      return this.options.writer.set(options).cdata(this);
		    };

		    return XMLCData;

		  })(XMLNode);

		}).call(this);


	/***/ }),
	/* 11 */
	/***/ (function(module, exports, __webpack_require__) {

		// Generated by CoffeeScript 1.12.7
		(function() {
		  var XMLComment, XMLNode,
		    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
		    hasProp = {}.hasOwnProperty;

		  XMLNode = __webpack_require__(7);

		  module.exports = XMLComment = (function(superClass) {
		    extend(XMLComment, superClass);

		    function XMLComment(parent, text) {
		      XMLComment.__super__.constructor.call(this, parent);
		      if (text == null) {
		        throw new Error("Missing comment text");
		      }
		      this.text = this.stringify.comment(text);
		    }

		    XMLComment.prototype.clone = function() {
		      return Object.create(this);
		    };

		    XMLComment.prototype.toString = function(options) {
		      return this.options.writer.set(options).comment(this);
		    };

		    return XMLComment;

		  })(XMLNode);

		}).call(this);


	/***/ }),
	/* 12 */
	/***/ (function(module, exports, __webpack_require__) {

		// Generated by CoffeeScript 1.12.7
		(function() {
		  var XMLDeclaration, XMLNode, isObject,
		    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
		    hasProp = {}.hasOwnProperty;

		  isObject = __webpack_require__(5).isObject;

		  XMLNode = __webpack_require__(7);

		  module.exports = XMLDeclaration = (function(superClass) {
		    extend(XMLDeclaration, superClass);

		    function XMLDeclaration(parent, version, encoding, standalone) {
		      var ref;
		      XMLDeclaration.__super__.constructor.call(this, parent);
		      if (isObject(version)) {
		        ref = version, version = ref.version, encoding = ref.encoding, standalone = ref.standalone;
		      }
		      if (!version) {
		        version = '1.0';
		      }
		      this.version = this.stringify.xmlVersion(version);
		      if (encoding != null) {
		        this.encoding = this.stringify.xmlEncoding(encoding);
		      }
		      if (standalone != null) {
		        this.standalone = this.stringify.xmlStandalone(standalone);
		      }
		    }

		    XMLDeclaration.prototype.toString = function(options) {
		      return this.options.writer.set(options).declaration(this);
		    };

		    return XMLDeclaration;

		  })(XMLNode);

		}).call(this);


	/***/ }),
	/* 13 */
	/***/ (function(module, exports, __webpack_require__) {

		// Generated by CoffeeScript 1.12.7
		(function() {
		  var XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLNode, isObject,
		    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
		    hasProp = {}.hasOwnProperty;

		  isObject = __webpack_require__(5).isObject;

		  XMLNode = __webpack_require__(7);

		  XMLDTDAttList = __webpack_require__(14);

		  XMLDTDEntity = __webpack_require__(15);

		  XMLDTDElement = __webpack_require__(16);

		  XMLDTDNotation = __webpack_require__(17);

		  module.exports = XMLDocType = (function(superClass) {
		    extend(XMLDocType, superClass);

		    function XMLDocType(parent, pubID, sysID) {
		      var ref, ref1;
		      XMLDocType.__super__.constructor.call(this, parent);
		      this.documentObject = parent;
		      if (isObject(pubID)) {
		        ref = pubID, pubID = ref.pubID, sysID = ref.sysID;
		      }
		      if (sysID == null) {
		        ref1 = [pubID, sysID], sysID = ref1[0], pubID = ref1[1];
		      }
		      if (pubID != null) {
		        this.pubID = this.stringify.dtdPubID(pubID);
		      }
		      if (sysID != null) {
		        this.sysID = this.stringify.dtdSysID(sysID);
		      }
		    }

		    XMLDocType.prototype.element = function(name, value) {
		      var child;
		      child = new XMLDTDElement(this, name, value);
		      this.children.push(child);
		      return this;
		    };

		    XMLDocType.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
		      var child;
		      child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
		      this.children.push(child);
		      return this;
		    };

		    XMLDocType.prototype.entity = function(name, value) {
		      var child;
		      child = new XMLDTDEntity(this, false, name, value);
		      this.children.push(child);
		      return this;
		    };

		    XMLDocType.prototype.pEntity = function(name, value) {
		      var child;
		      child = new XMLDTDEntity(this, true, name, value);
		      this.children.push(child);
		      return this;
		    };

		    XMLDocType.prototype.notation = function(name, value) {
		      var child;
		      child = new XMLDTDNotation(this, name, value);
		      this.children.push(child);
		      return this;
		    };

		    XMLDocType.prototype.toString = function(options) {
		      return this.options.writer.set(options).docType(this);
		    };

		    XMLDocType.prototype.ele = function(name, value) {
		      return this.element(name, value);
		    };

		    XMLDocType.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
		      return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);
		    };

		    XMLDocType.prototype.ent = function(name, value) {
		      return this.entity(name, value);
		    };

		    XMLDocType.prototype.pent = function(name, value) {
		      return this.pEntity(name, value);
		    };

		    XMLDocType.prototype.not = function(name, value) {
		      return this.notation(name, value);
		    };

		    XMLDocType.prototype.up = function() {
		      return this.root() || this.documentObject;
		    };

		    return XMLDocType;

		  })(XMLNode);

		}).call(this);


	/***/ }),
	/* 14 */
	/***/ (function(module, exports, __webpack_require__) {

		// Generated by CoffeeScript 1.12.7
		(function() {
		  var XMLDTDAttList, XMLNode,
		    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
		    hasProp = {}.hasOwnProperty;

		  XMLNode = __webpack_require__(7);

		  module.exports = XMLDTDAttList = (function(superClass) {
		    extend(XMLDTDAttList, superClass);

		    function XMLDTDAttList(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {
		      XMLDTDAttList.__super__.constructor.call(this, parent);
		      if (elementName == null) {
		        throw new Error("Missing DTD element name");
		      }
		      if (attributeName == null) {
		        throw new Error("Missing DTD attribute name");
		      }
		      if (!attributeType) {
		        throw new Error("Missing DTD attribute type");
		      }
		      if (!defaultValueType) {
		        throw new Error("Missing DTD attribute default");
		      }
		      if (defaultValueType.indexOf('#') !== 0) {
		        defaultValueType = '#' + defaultValueType;
		      }
		      if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {
		        throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT");
		      }
		      if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {
		        throw new Error("Default value only applies to #FIXED or #DEFAULT");
		      }
		      this.elementName = this.stringify.eleName(elementName);
		      this.attributeName = this.stringify.attName(attributeName);
		      this.attributeType = this.stringify.dtdAttType(attributeType);
		      this.defaultValue = this.stringify.dtdAttDefault(defaultValue);
		      this.defaultValueType = defaultValueType;
		    }

		    XMLDTDAttList.prototype.toString = function(options) {
		      return this.options.writer.set(options).dtdAttList(this);
		    };

		    return XMLDTDAttList;

		  })(XMLNode);

		}).call(this);


	/***/ }),
	/* 15 */
	/***/ (function(module, exports, __webpack_require__) {

		// Generated by CoffeeScript 1.12.7
		(function() {
		  var XMLDTDEntity, XMLNode, isObject,
		    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
		    hasProp = {}.hasOwnProperty;

		  isObject = __webpack_require__(5).isObject;

		  XMLNode = __webpack_require__(7);

		  module.exports = XMLDTDEntity = (function(superClass) {
		    extend(XMLDTDEntity, superClass);

		    function XMLDTDEntity(parent, pe, name, value) {
		      XMLDTDEntity.__super__.constructor.call(this, parent);
		      if (name == null) {
		        throw new Error("Missing entity name");
		      }
		      if (value == null) {
		        throw new Error("Missing entity value");
		      }
		      this.pe = !!pe;
		      this.name = this.stringify.eleName(name);
		      if (!isObject(value)) {
		        this.value = this.stringify.dtdEntityValue(value);
		      } else {
		        if (!value.pubID && !value.sysID) {
		          throw new Error("Public and/or system identifiers are required for an external entity");
		        }
		        if (value.pubID && !value.sysID) {
		          throw new Error("System identifier is required for a public external entity");
		        }
		        if (value.pubID != null) {
		          this.pubID = this.stringify.dtdPubID(value.pubID);
		        }
		        if (value.sysID != null) {
		          this.sysID = this.stringify.dtdSysID(value.sysID);
		        }
		        if (value.nData != null) {
		          this.nData = this.stringify.dtdNData(value.nData);
		        }
		        if (this.pe && this.nData) {
		          throw new Error("Notation declaration is not allowed in a parameter entity");
		        }
		      }
		    }

		    XMLDTDEntity.prototype.toString = function(options) {
		      return this.options.writer.set(options).dtdEntity(this);
		    };

		    return XMLDTDEntity;

		  })(XMLNode);

		}).call(this);


	/***/ }),
	/* 16 */
	/***/ (function(module, exports, __webpack_require__) {

		// Generated by CoffeeScript 1.12.7
		(function() {
		  var XMLDTDElement, XMLNode,
		    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
		    hasProp = {}.hasOwnProperty;

		  XMLNode = __webpack_require__(7);

		  module.exports = XMLDTDElement = (function(superClass) {
		    extend(XMLDTDElement, superClass);

		    function XMLDTDElement(parent, name, value) {
		      XMLDTDElement.__super__.constructor.call(this, parent);
		      if (name == null) {
		        throw new Error("Missing DTD element name");
		      }
		      if (!value) {
		        value = '(#PCDATA)';
		      }
		      if (Array.isArray(value)) {
		        value = '(' + value.join(',') + ')';
		      }
		      this.name = this.stringify.eleName(name);
		      this.value = this.stringify.dtdElementValue(value);
		    }

		    XMLDTDElement.prototype.toString = function(options) {
		      return this.options.writer.set(options).dtdElement(this);
		    };

		    return XMLDTDElement;

		  })(XMLNode);

		}).call(this);


	/***/ }),
	/* 17 */
	/***/ (function(module, exports, __webpack_require__) {

		// Generated by CoffeeScript 1.12.7
		(function() {
		  var XMLDTDNotation, XMLNode,
		    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
		    hasProp = {}.hasOwnProperty;

		  XMLNode = __webpack_require__(7);

		  module.exports = XMLDTDNotation = (function(superClass) {
		    extend(XMLDTDNotation, superClass);

		    function XMLDTDNotation(parent, name, value) {
		      XMLDTDNotation.__super__.constructor.call(this, parent);
		      if (name == null) {
		        throw new Error("Missing notation name");
		      }
		      if (!value.pubID && !value.sysID) {
		        throw new Error("Public or system identifiers are required for an external entity");
		      }
		      this.name = this.stringify.eleName(name);
		      if (value.pubID != null) {
		        this.pubID = this.stringify.dtdPubID(value.pubID);
		      }
		      if (value.sysID != null) {
		        this.sysID = this.stringify.dtdSysID(value.sysID);
		      }
		    }

		    XMLDTDNotation.prototype.toString = function(options) {
		      return this.options.writer.set(options).dtdNotation(this);
		    };

		    return XMLDTDNotation;

		  })(XMLNode);

		}).call(this);


	/***/ }),
	/* 18 */
	/***/ (function(module, exports, __webpack_require__) {

		// Generated by CoffeeScript 1.12.7
		(function() {
		  var XMLNode, XMLRaw,
		    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
		    hasProp = {}.hasOwnProperty;

		  XMLNode = __webpack_require__(7);

		  module.exports = XMLRaw = (function(superClass) {
		    extend(XMLRaw, superClass);

		    function XMLRaw(parent, text) {
		      XMLRaw.__super__.constructor.call(this, parent);
		      if (text == null) {
		        throw new Error("Missing raw text");
		      }
		      this.value = this.stringify.raw(text);
		    }

		    XMLRaw.prototype.clone = function() {
		      return Object.create(this);
		    };

		    XMLRaw.prototype.toString = function(options) {
		      return this.options.writer.set(options).raw(this);
		    };

		    return XMLRaw;

		  })(XMLNode);

		}).call(this);


	/***/ }),
	/* 19 */
	/***/ (function(module, exports, __webpack_require__) {

		// Generated by CoffeeScript 1.12.7
		(function() {
		  var XMLNode, XMLText,
		    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
		    hasProp = {}.hasOwnProperty;

		  XMLNode = __webpack_require__(7);

		  module.exports = XMLText = (function(superClass) {
		    extend(XMLText, superClass);

		    function XMLText(parent, text) {
		      XMLText.__super__.constructor.call(this, parent);
		      if (text == null) {
		        throw new Error("Missing element text");
		      }
		      this.value = this.stringify.eleText(text);
		    }

		    XMLText.prototype.clone = function() {
		      return Object.create(this);
		    };

		    XMLText.prototype.toString = function(options) {
		      return this.options.writer.set(options).text(this);
		    };

		    return XMLText;

		  })(XMLNode);

		}).call(this);


	/***/ }),
	/* 20 */
	/***/ (function(module, exports, __webpack_require__) {

		// Generated by CoffeeScript 1.12.7
		(function() {
		  var XMLNode, XMLProcessingInstruction,
		    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
		    hasProp = {}.hasOwnProperty;

		  XMLNode = __webpack_require__(7);

		  module.exports = XMLProcessingInstruction = (function(superClass) {
		    extend(XMLProcessingInstruction, superClass);

		    function XMLProcessingInstruction(parent, target, value) {
		      XMLProcessingInstruction.__super__.constructor.call(this, parent);
		      if (target == null) {
		        throw new Error("Missing instruction target");
		      }
		      this.target = this.stringify.insTarget(target);
		      if (value) {
		        this.value = this.stringify.insValue(value);
		      }
		    }

		    XMLProcessingInstruction.prototype.clone = function() {
		      return Object.create(this);
		    };

		    XMLProcessingInstruction.prototype.toString = function(options) {
		      return this.options.writer.set(options).processingInstruction(this);
		    };

		    return XMLProcessingInstruction;

		  })(XMLNode);

		}).call(this);


	/***/ }),
	/* 21 */
	/***/ (function(module, exports) {

		// Generated by CoffeeScript 1.12.7
		(function() {
		  var XMLStringifier,
		    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
		    hasProp = {}.hasOwnProperty;

		  module.exports = XMLStringifier = (function() {
		    function XMLStringifier(options) {
		      this.assertLegalChar = bind(this.assertLegalChar, this);
		      var key, ref, value;
		      options || (options = {});
		      this.noDoubleEncoding = options.noDoubleEncoding;
		      ref = options.stringify || {};
		      for (key in ref) {
		        if (!hasProp.call(ref, key)) continue;
		        value = ref[key];
		        this[key] = value;
		      }
		    }

		    XMLStringifier.prototype.eleName = function(val) {
		      val = '' + val || '';
		      return this.assertLegalChar(val);
		    };

		    XMLStringifier.prototype.eleText = function(val) {
		      val = '' + val || '';
		      return this.assertLegalChar(this.elEscape(val));
		    };

		    XMLStringifier.prototype.cdata = function(val) {
		      val = '' + val || '';
		      val = val.replace(']]>', ']]]]><![CDATA[>');
		      return this.assertLegalChar(val);
		    };

		    XMLStringifier.prototype.comment = function(val) {
		      val = '' + val || '';
		      if (val.match(/--/)) {
		        throw new Error("Comment text cannot contain double-hypen: " + val);
		      }
		      return this.assertLegalChar(val);
		    };

		    XMLStringifier.prototype.raw = function(val) {
		      return '' + val || '';
		    };

		    XMLStringifier.prototype.attName = function(val) {
		      return val = '' + val || '';
		    };

		    XMLStringifier.prototype.attValue = function(val) {
		      val = '' + val || '';
		      return this.attEscape(val);
		    };

		    XMLStringifier.prototype.insTarget = function(val) {
		      return '' + val || '';
		    };

		    XMLStringifier.prototype.insValue = function(val) {
		      val = '' + val || '';
		      if (val.match(/\?>/)) {
		        throw new Error("Invalid processing instruction value: " + val);
		      }
		      return val;
		    };

		    XMLStringifier.prototype.xmlVersion = function(val) {
		      val = '' + val || '';
		      if (!val.match(/1\.[0-9]+/)) {
		        throw new Error("Invalid version number: " + val);
		      }
		      return val;
		    };

		    XMLStringifier.prototype.xmlEncoding = function(val) {
		      val = '' + val || '';
		      if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/)) {
		        throw new Error("Invalid encoding: " + val);
		      }
		      return val;
		    };

		    XMLStringifier.prototype.xmlStandalone = function(val) {
		      if (val) {
		        return "yes";
		      } else {
		        return "no";
		      }
		    };

		    XMLStringifier.prototype.dtdPubID = function(val) {
		      return '' + val || '';
		    };

		    XMLStringifier.prototype.dtdSysID = function(val) {
		      return '' + val || '';
		    };

		    XMLStringifier.prototype.dtdElementValue = function(val) {
		      return '' + val || '';
		    };

		    XMLStringifier.prototype.dtdAttType = function(val) {
		      return '' + val || '';
		    };

		    XMLStringifier.prototype.dtdAttDefault = function(val) {
		      if (val != null) {
		        return '' + val || '';
		      } else {
		        return val;
		      }
		    };

		    XMLStringifier.prototype.dtdEntityValue = function(val) {
		      return '' + val || '';
		    };

		    XMLStringifier.prototype.dtdNData = function(val) {
		      return '' + val || '';
		    };

		    XMLStringifier.prototype.convertAttKey = '@';

		    XMLStringifier.prototype.convertPIKey = '?';

		    XMLStringifier.prototype.convertTextKey = '#text';

		    XMLStringifier.prototype.convertCDataKey = '#cdata';

		    XMLStringifier.prototype.convertCommentKey = '#comment';

		    XMLStringifier.prototype.convertRawKey = '#raw';

		    XMLStringifier.prototype.assertLegalChar = function(str) {
		      var res;
		      res = str.match(/[\0\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/);
		      if (res) {
		        throw new Error("Invalid character in string: " + str + " at index " + res.index);
		      }
		      return str;
		    };

		    XMLStringifier.prototype.elEscape = function(str) {
		      var ampregex;
		      ampregex = this.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
		      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\r/g, '&#xD;');
		    };

		    XMLStringifier.prototype.attEscape = function(str) {
		      var ampregex;
		      ampregex = this.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
		      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/"/g, '&quot;').replace(/\t/g, '&#x9;').replace(/\n/g, '&#xA;').replace(/\r/g, '&#xD;');
		    };

		    return XMLStringifier;

		  })();

		}).call(this);


	/***/ }),
	/* 22 */
	/***/ (function(module, exports, __webpack_require__) {

		// Generated by CoffeeScript 1.12.7
		(function() {
		  var XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStringWriter, XMLText, XMLWriterBase,
		    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
		    hasProp = {}.hasOwnProperty;

		  XMLDeclaration = __webpack_require__(12);

		  XMLDocType = __webpack_require__(13);

		  XMLCData = __webpack_require__(10);

		  XMLComment = __webpack_require__(11);

		  XMLElement = __webpack_require__(8);

		  XMLRaw = __webpack_require__(18);

		  XMLText = __webpack_require__(19);

		  XMLProcessingInstruction = __webpack_require__(20);

		  XMLDTDAttList = __webpack_require__(14);

		  XMLDTDElement = __webpack_require__(16);

		  XMLDTDEntity = __webpack_require__(15);

		  XMLDTDNotation = __webpack_require__(17);

		  XMLWriterBase = __webpack_require__(23);

		  module.exports = XMLStringWriter = (function(superClass) {
		    extend(XMLStringWriter, superClass);

		    function XMLStringWriter(options) {
		      XMLStringWriter.__super__.constructor.call(this, options);
		    }

		    XMLStringWriter.prototype.document = function(doc) {
		      var child, i, len, r, ref;
		      this.textispresent = false;
		      r = '';
		      ref = doc.children;
		      for (i = 0, len = ref.length; i < len; i++) {
		        child = ref[i];
		        r += (function() {
		          switch (false) {
		            case !(child instanceof XMLDeclaration):
		              return this.declaration(child);
		            case !(child instanceof XMLDocType):
		              return this.docType(child);
		            case !(child instanceof XMLComment):
		              return this.comment(child);
		            case !(child instanceof XMLProcessingInstruction):
		              return this.processingInstruction(child);
		            default:
		              return this.element(child, 0);
		          }
		        }).call(this);
		      }
		      if (this.pretty && r.slice(-this.newline.length) === this.newline) {
		        r = r.slice(0, -this.newline.length);
		      }
		      return r;
		    };

		    XMLStringWriter.prototype.attribute = function(att) {
		      return ' ' + att.name + '="' + att.value + '"';
		    };

		    XMLStringWriter.prototype.cdata = function(node, level) {
		      return this.space(level) + '<![CDATA[' + node.text + ']]>' + this.newline;
		    };

		    XMLStringWriter.prototype.comment = function(node, level) {
		      return this.space(level) + '<!-- ' + node.text + ' -->' + this.newline;
		    };

		    XMLStringWriter.prototype.declaration = function(node, level) {
		      var r;
		      r = this.space(level);
		      r += '<?xml version="' + node.version + '"';
		      if (node.encoding != null) {
		        r += ' encoding="' + node.encoding + '"';
		      }
		      if (node.standalone != null) {
		        r += ' standalone="' + node.standalone + '"';
		      }
		      r += this.spacebeforeslash + '?>';
		      r += this.newline;
		      return r;
		    };

		    XMLStringWriter.prototype.docType = function(node, level) {
		      var child, i, len, r, ref;
		      level || (level = 0);
		      r = this.space(level);
		      r += '<!DOCTYPE ' + node.root().name;
		      if (node.pubID && node.sysID) {
		        r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
		      } else if (node.sysID) {
		        r += ' SYSTEM "' + node.sysID + '"';
		      }
		      if (node.children.length > 0) {
		        r += ' [';
		        r += this.newline;
		        ref = node.children;
		        for (i = 0, len = ref.length; i < len; i++) {
		          child = ref[i];
		          r += (function() {
		            switch (false) {
		              case !(child instanceof XMLDTDAttList):
		                return this.dtdAttList(child, level + 1);
		              case !(child instanceof XMLDTDElement):
		                return this.dtdElement(child, level + 1);
		              case !(child instanceof XMLDTDEntity):
		                return this.dtdEntity(child, level + 1);
		              case !(child instanceof XMLDTDNotation):
		                return this.dtdNotation(child, level + 1);
		              case !(child instanceof XMLCData):
		                return this.cdata(child, level + 1);
		              case !(child instanceof XMLComment):
		                return this.comment(child, level + 1);
		              case !(child instanceof XMLProcessingInstruction):
		                return this.processingInstruction(child, level + 1);
		              default:
		                throw new Error("Unknown DTD node type: " + child.constructor.name);
		            }
		          }).call(this);
		        }
		        r += ']';
		      }
		      r += this.spacebeforeslash + '>';
		      r += this.newline;
		      return r;
		    };

		    XMLStringWriter.prototype.element = function(node, level) {
		      var att, child, i, j, len, len1, name, r, ref, ref1, ref2, space, textispresentwasset;
		      level || (level = 0);
		      textispresentwasset = false;
		      if (this.textispresent) {
		        this.newline = '';
		        this.pretty = false;
		      } else {
		        this.newline = this.newlinedefault;
		        this.pretty = this.prettydefault;
		      }
		      space = this.space(level);
		      r = '';
		      r += space + '<' + node.name;
		      ref = node.attributes;
		      for (name in ref) {
		        if (!hasProp.call(ref, name)) continue;
		        att = ref[name];
		        r += this.attribute(att);
		      }
		      if (node.children.length === 0 || node.children.every(function(e) {
		        return e.value === '';
		      })) {
		        if (this.allowEmpty) {
		          r += '></' + node.name + '>' + this.newline;
		        } else {
		          r += this.spacebeforeslash + '/>' + this.newline;
		        }
		      } else if (this.pretty && node.children.length === 1 && (node.children[0].value != null)) {
		        r += '>';
		        r += node.children[0].value;
		        r += '</' + node.name + '>' + this.newline;
		      } else {
		        if (this.dontprettytextnodes) {
		          ref1 = node.children;
		          for (i = 0, len = ref1.length; i < len; i++) {
		            child = ref1[i];
		            if (child.value != null) {
		              this.textispresent++;
		              textispresentwasset = true;
		              break;
		            }
		          }
		        }
		        if (this.textispresent) {
		          this.newline = '';
		          this.pretty = false;
		          space = this.space(level);
		        }
		        r += '>' + this.newline;
		        ref2 = node.children;
		        for (j = 0, len1 = ref2.length; j < len1; j++) {
		          child = ref2[j];
		          r += (function() {
		            switch (false) {
		              case !(child instanceof XMLCData):
		                return this.cdata(child, level + 1);
		              case !(child instanceof XMLComment):
		                return this.comment(child, level + 1);
		              case !(child instanceof XMLElement):
		                return this.element(child, level + 1);
		              case !(child instanceof XMLRaw):
		                return this.raw(child, level + 1);
		              case !(child instanceof XMLText):
		                return this.text(child, level + 1);
		              case !(child instanceof XMLProcessingInstruction):
		                return this.processingInstruction(child, level + 1);
		              default:
		                throw new Error("Unknown XML node type: " + child.constructor.name);
		            }
		          }).call(this);
		        }
		        if (textispresentwasset) {
		          this.textispresent--;
		        }
		        if (!this.textispresent) {
		          this.newline = this.newlinedefault;
		          this.pretty = this.prettydefault;
		        }
		        r += space + '</' + node.name + '>' + this.newline;
		      }
		      return r;
		    };

		    XMLStringWriter.prototype.processingInstruction = function(node, level) {
		      var r;
		      r = this.space(level) + '<?' + node.target;
		      if (node.value) {
		        r += ' ' + node.value;
		      }
		      r += this.spacebeforeslash + '?>' + this.newline;
		      return r;
		    };

		    XMLStringWriter.prototype.raw = function(node, level) {
		      return this.space(level) + node.value + this.newline;
		    };

		    XMLStringWriter.prototype.text = function(node, level) {
		      return this.space(level) + node.value + this.newline;
		    };

		    XMLStringWriter.prototype.dtdAttList = function(node, level) {
		      var r;
		      r = this.space(level) + '<!ATTLIST ' + node.elementName + ' ' + node.attributeName + ' ' + node.attributeType;
		      if (node.defaultValueType !== '#DEFAULT') {
		        r += ' ' + node.defaultValueType;
		      }
		      if (node.defaultValue) {
		        r += ' "' + node.defaultValue + '"';
		      }
		      r += this.spacebeforeslash + '>' + this.newline;
		      return r;
		    };

		    XMLStringWriter.prototype.dtdElement = function(node, level) {
		      return this.space(level) + '<!ELEMENT ' + node.name + ' ' + node.value + this.spacebeforeslash + '>' + this.newline;
		    };

		    XMLStringWriter.prototype.dtdEntity = function(node, level) {
		      var r;
		      r = this.space(level) + '<!ENTITY';
		      if (node.pe) {
		        r += ' %';
		      }
		      r += ' ' + node.name;
		      if (node.value) {
		        r += ' "' + node.value + '"';
		      } else {
		        if (node.pubID && node.sysID) {
		          r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
		        } else if (node.sysID) {
		          r += ' SYSTEM "' + node.sysID + '"';
		        }
		        if (node.nData) {
		          r += ' NDATA ' + node.nData;
		        }
		      }
		      r += this.spacebeforeslash + '>' + this.newline;
		      return r;
		    };

		    XMLStringWriter.prototype.dtdNotation = function(node, level) {
		      var r;
		      r = this.space(level) + '<!NOTATION ' + node.name;
		      if (node.pubID && node.sysID) {
		        r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
		      } else if (node.pubID) {
		        r += ' PUBLIC "' + node.pubID + '"';
		      } else if (node.sysID) {
		        r += ' SYSTEM "' + node.sysID + '"';
		      }
		      r += this.spacebeforeslash + '>' + this.newline;
		      return r;
		    };

		    XMLStringWriter.prototype.openNode = function(node, level) {
		      var att, name, r, ref;
		      level || (level = 0);
		      if (node instanceof XMLElement) {
		        r = this.space(level) + '<' + node.name;
		        ref = node.attributes;
		        for (name in ref) {
		          if (!hasProp.call(ref, name)) continue;
		          att = ref[name];
		          r += this.attribute(att);
		        }
		        r += (node.children ? '>' : '/>') + this.newline;
		        return r;
		      } else {
		        r = this.space(level) + '<!DOCTYPE ' + node.rootNodeName;
		        if (node.pubID && node.sysID) {
		          r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
		        } else if (node.sysID) {
		          r += ' SYSTEM "' + node.sysID + '"';
		        }
		        r += (node.children ? ' [' : '>') + this.newline;
		        return r;
		      }
		    };

		    XMLStringWriter.prototype.closeNode = function(node, level) {
		      level || (level = 0);
		      switch (false) {
		        case !(node instanceof XMLElement):
		          return this.space(level) + '</' + node.name + '>' + this.newline;
		        case !(node instanceof XMLDocType):
		          return this.space(level) + ']>' + this.newline;
		      }
		    };

		    return XMLStringWriter;

		  })(XMLWriterBase);

		}).call(this);


	/***/ }),
	/* 23 */
	/***/ (function(module, exports) {

		// Generated by CoffeeScript 1.12.7
		(function() {
		  var XMLWriterBase,
		    hasProp = {}.hasOwnProperty;

		  module.exports = XMLWriterBase = (function() {
		    function XMLWriterBase(options) {
		      var key, ref, ref1, ref2, ref3, ref4, ref5, ref6, value;
		      options || (options = {});
		      this.pretty = options.pretty || false;
		      this.allowEmpty = (ref = options.allowEmpty) != null ? ref : false;
		      if (this.pretty) {
		        this.indent = (ref1 = options.indent) != null ? ref1 : '  ';
		        this.newline = (ref2 = options.newline) != null ? ref2 : '\n';
		        this.offset = (ref3 = options.offset) != null ? ref3 : 0;
		        this.dontprettytextnodes = (ref4 = options.dontprettytextnodes) != null ? ref4 : 0;
		      } else {
		        this.indent = '';
		        this.newline = '';
		        this.offset = 0;
		        this.dontprettytextnodes = 0;
		      }
		      this.spacebeforeslash = (ref5 = options.spacebeforeslash) != null ? ref5 : '';
		      if (this.spacebeforeslash === true) {
		        this.spacebeforeslash = ' ';
		      }
		      this.newlinedefault = this.newline;
		      this.prettydefault = this.pretty;
		      ref6 = options.writer || {};
		      for (key in ref6) {
		        if (!hasProp.call(ref6, key)) continue;
		        value = ref6[key];
		        this[key] = value;
		      }
		    }

		    XMLWriterBase.prototype.set = function(options) {
		      var key, ref, value;
		      options || (options = {});
		      if ("pretty" in options) {
		        this.pretty = options.pretty;
		      }
		      if ("allowEmpty" in options) {
		        this.allowEmpty = options.allowEmpty;
		      }
		      if (this.pretty) {
		        this.indent = "indent" in options ? options.indent : '  ';
		        this.newline = "newline" in options ? options.newline : '\n';
		        this.offset = "offset" in options ? options.offset : 0;
		        this.dontprettytextnodes = "dontprettytextnodes" in options ? options.dontprettytextnodes : 0;
		      } else {
		        this.indent = '';
		        this.newline = '';
		        this.offset = 0;
		        this.dontprettytextnodes = 0;
		      }
		      this.spacebeforeslash = "spacebeforeslash" in options ? options.spacebeforeslash : '';
		      if (this.spacebeforeslash === true) {
		        this.spacebeforeslash = ' ';
		      }
		      this.newlinedefault = this.newline;
		      this.prettydefault = this.pretty;
		      ref = options.writer || {};
		      for (key in ref) {
		        if (!hasProp.call(ref, key)) continue;
		        value = ref[key];
		        this[key] = value;
		      }
		      return this;
		    };

		    XMLWriterBase.prototype.space = function(level) {
		      var indent;
		      if (this.pretty) {
		        indent = (level || 0) + this.offset + 1;
		        if (indent > 0) {
		          return new Array(indent).join(this.indent);
		        } else {
		          return '';
		        }
		      } else {
		        return '';
		      }
		    };

		    return XMLWriterBase;

		  })();

		}).call(this);


	/***/ }),
	/* 24 */
	/***/ (function(module, exports, __webpack_require__) {

		// Generated by CoffeeScript 1.12.7
		(function() {
		  var XMLAttribute, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDocumentCB, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStringWriter, XMLStringifier, XMLText, isFunction, isObject, isPlainObject, ref,
		    hasProp = {}.hasOwnProperty;

		  ref = __webpack_require__(5), isObject = ref.isObject, isFunction = ref.isFunction, isPlainObject = ref.isPlainObject;

		  XMLElement = __webpack_require__(8);

		  XMLCData = __webpack_require__(10);

		  XMLComment = __webpack_require__(11);

		  XMLRaw = __webpack_require__(18);

		  XMLText = __webpack_require__(19);

		  XMLProcessingInstruction = __webpack_require__(20);

		  XMLDeclaration = __webpack_require__(12);

		  XMLDocType = __webpack_require__(13);

		  XMLDTDAttList = __webpack_require__(14);

		  XMLDTDEntity = __webpack_require__(15);

		  XMLDTDElement = __webpack_require__(16);

		  XMLDTDNotation = __webpack_require__(17);

		  XMLAttribute = __webpack_require__(9);

		  XMLStringifier = __webpack_require__(21);

		  XMLStringWriter = __webpack_require__(22);

		  module.exports = XMLDocumentCB = (function() {
		    function XMLDocumentCB(options, onData, onEnd) {
		      var writerOptions;
		      options || (options = {});
		      if (!options.writer) {
		        options.writer = new XMLStringWriter(options);
		      } else if (isPlainObject(options.writer)) {
		        writerOptions = options.writer;
		        options.writer = new XMLStringWriter(writerOptions);
		      }
		      this.options = options;
		      this.writer = options.writer;
		      this.stringify = new XMLStringifier(options);
		      this.onDataCallback = onData || function() {};
		      this.onEndCallback = onEnd || function() {};
		      this.currentNode = null;
		      this.currentLevel = -1;
		      this.openTags = {};
		      this.documentStarted = false;
		      this.documentCompleted = false;
		      this.root = null;
		    }

		    XMLDocumentCB.prototype.node = function(name, attributes, text) {
		      var ref1;
		      if (name == null) {
		        throw new Error("Missing node name");
		      }
		      if (this.root && this.currentLevel === -1) {
		        throw new Error("Document can only have one root node");
		      }
		      this.openCurrent();
		      name = name.valueOf();
		      if (attributes == null) {
		        attributes = {};
		      }
		      attributes = attributes.valueOf();
		      if (!isObject(attributes)) {
		        ref1 = [attributes, text], text = ref1[0], attributes = ref1[1];
		      }
		      this.currentNode = new XMLElement(this, name, attributes);
		      this.currentNode.children = false;
		      this.currentLevel++;
		      this.openTags[this.currentLevel] = this.currentNode;
		      if (text != null) {
		        this.text(text);
		      }
		      return this;
		    };

		    XMLDocumentCB.prototype.element = function(name, attributes, text) {
		      if (this.currentNode && this.currentNode instanceof XMLDocType) {
		        return this.dtdElement.apply(this, arguments);
		      } else {
		        return this.node(name, attributes, text);
		      }
		    };

		    XMLDocumentCB.prototype.attribute = function(name, value) {
		      var attName, attValue;
		      if (!this.currentNode || this.currentNode.children) {
		        throw new Error("att() can only be used immediately after an ele() call in callback mode");
		      }
		      if (name != null) {
		        name = name.valueOf();
		      }
		      if (isObject(name)) {
		        for (attName in name) {
		          if (!hasProp.call(name, attName)) continue;
		          attValue = name[attName];
		          this.attribute(attName, attValue);
		        }
		      } else {
		        if (isFunction(value)) {
		          value = value.apply();
		        }
		        if (!this.options.skipNullAttributes || (value != null)) {
		          this.currentNode.attributes[name] = new XMLAttribute(this, name, value);
		        }
		      }
		      return this;
		    };

		    XMLDocumentCB.prototype.text = function(value) {
		      var node;
		      this.openCurrent();
		      node = new XMLText(this, value);
		      this.onData(this.writer.text(node, this.currentLevel + 1));
		      return this;
		    };

		    XMLDocumentCB.prototype.cdata = function(value) {
		      var node;
		      this.openCurrent();
		      node = new XMLCData(this, value);
		      this.onData(this.writer.cdata(node, this.currentLevel + 1));
		      return this;
		    };

		    XMLDocumentCB.prototype.comment = function(value) {
		      var node;
		      this.openCurrent();
		      node = new XMLComment(this, value);
		      this.onData(this.writer.comment(node, this.currentLevel + 1));
		      return this;
		    };

		    XMLDocumentCB.prototype.raw = function(value) {
		      var node;
		      this.openCurrent();
		      node = new XMLRaw(this, value);
		      this.onData(this.writer.raw(node, this.currentLevel + 1));
		      return this;
		    };

		    XMLDocumentCB.prototype.instruction = function(target, value) {
		      var i, insTarget, insValue, len, node;
		      this.openCurrent();
		      if (target != null) {
		        target = target.valueOf();
		      }
		      if (value != null) {
		        value = value.valueOf();
		      }
		      if (Array.isArray(target)) {
		        for (i = 0, len = target.length; i < len; i++) {
		          insTarget = target[i];
		          this.instruction(insTarget);
		        }
		      } else if (isObject(target)) {
		        for (insTarget in target) {
		          if (!hasProp.call(target, insTarget)) continue;
		          insValue = target[insTarget];
		          this.instruction(insTarget, insValue);
		        }
		      } else {
		        if (isFunction(value)) {
		          value = value.apply();
		        }
		        node = new XMLProcessingInstruction(this, target, value);
		        this.onData(this.writer.processingInstruction(node, this.currentLevel + 1));
		      }
		      return this;
		    };

		    XMLDocumentCB.prototype.declaration = function(version, encoding, standalone) {
		      var node;
		      this.openCurrent();
		      if (this.documentStarted) {
		        throw new Error("declaration() must be the first node");
		      }
		      node = new XMLDeclaration(this, version, encoding, standalone);
		      this.onData(this.writer.declaration(node, this.currentLevel + 1));
		      return this;
		    };

		    XMLDocumentCB.prototype.doctype = function(root, pubID, sysID) {
		      this.openCurrent();
		      if (root == null) {
		        throw new Error("Missing root node name");
		      }
		      if (this.root) {
		        throw new Error("dtd() must come before the root node");
		      }
		      this.currentNode = new XMLDocType(this, pubID, sysID);
		      this.currentNode.rootNodeName = root;
		      this.currentNode.children = false;
		      this.currentLevel++;
		      this.openTags[this.currentLevel] = this.currentNode;
		      return this;
		    };

		    XMLDocumentCB.prototype.dtdElement = function(name, value) {
		      var node;
		      this.openCurrent();
		      node = new XMLDTDElement(this, name, value);
		      this.onData(this.writer.dtdElement(node, this.currentLevel + 1));
		      return this;
		    };

		    XMLDocumentCB.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
		      var node;
		      this.openCurrent();
		      node = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
		      this.onData(this.writer.dtdAttList(node, this.currentLevel + 1));
		      return this;
		    };

		    XMLDocumentCB.prototype.entity = function(name, value) {
		      var node;
		      this.openCurrent();
		      node = new XMLDTDEntity(this, false, name, value);
		      this.onData(this.writer.dtdEntity(node, this.currentLevel + 1));
		      return this;
		    };

		    XMLDocumentCB.prototype.pEntity = function(name, value) {
		      var node;
		      this.openCurrent();
		      node = new XMLDTDEntity(this, true, name, value);
		      this.onData(this.writer.dtdEntity(node, this.currentLevel + 1));
		      return this;
		    };

		    XMLDocumentCB.prototype.notation = function(name, value) {
		      var node;
		      this.openCurrent();
		      node = new XMLDTDNotation(this, name, value);
		      this.onData(this.writer.dtdNotation(node, this.currentLevel + 1));
		      return this;
		    };

		    XMLDocumentCB.prototype.up = function() {
		      if (this.currentLevel < 0) {
		        throw new Error("The document node has no parent");
		      }
		      if (this.currentNode) {
		        if (this.currentNode.children) {
		          this.closeNode(this.currentNode);
		        } else {
		          this.openNode(this.currentNode);
		        }
		        this.currentNode = null;
		      } else {
		        this.closeNode(this.openTags[this.currentLevel]);
		      }
		      delete this.openTags[this.currentLevel];
		      this.currentLevel--;
		      return this;
		    };

		    XMLDocumentCB.prototype.end = function() {
		      while (this.currentLevel >= 0) {
		        this.up();
		      }
		      return this.onEnd();
		    };

		    XMLDocumentCB.prototype.openCurrent = function() {
		      if (this.currentNode) {
		        this.currentNode.children = true;
		        return this.openNode(this.currentNode);
		      }
		    };

		    XMLDocumentCB.prototype.openNode = function(node) {
		      if (!node.isOpen) {
		        if (!this.root && this.currentLevel === 0 && node instanceof XMLElement) {
		          this.root = node;
		        }
		        this.onData(this.writer.openNode(node, this.currentLevel));
		        return node.isOpen = true;
		      }
		    };

		    XMLDocumentCB.prototype.closeNode = function(node) {
		      if (!node.isClosed) {
		        this.onData(this.writer.closeNode(node, this.currentLevel));
		        return node.isClosed = true;
		      }
		    };

		    XMLDocumentCB.prototype.onData = function(chunk) {
		      this.documentStarted = true;
		      return this.onDataCallback(chunk);
		    };

		    XMLDocumentCB.prototype.onEnd = function() {
		      this.documentCompleted = true;
		      return this.onEndCallback();
		    };

		    XMLDocumentCB.prototype.ele = function() {
		      return this.element.apply(this, arguments);
		    };

		    XMLDocumentCB.prototype.nod = function(name, attributes, text) {
		      return this.node(name, attributes, text);
		    };

		    XMLDocumentCB.prototype.txt = function(value) {
		      return this.text(value);
		    };

		    XMLDocumentCB.prototype.dat = function(value) {
		      return this.cdata(value);
		    };

		    XMLDocumentCB.prototype.com = function(value) {
		      return this.comment(value);
		    };

		    XMLDocumentCB.prototype.ins = function(target, value) {
		      return this.instruction(target, value);
		    };

		    XMLDocumentCB.prototype.dec = function(version, encoding, standalone) {
		      return this.declaration(version, encoding, standalone);
		    };

		    XMLDocumentCB.prototype.dtd = function(root, pubID, sysID) {
		      return this.doctype(root, pubID, sysID);
		    };

		    XMLDocumentCB.prototype.e = function(name, attributes, text) {
		      return this.element(name, attributes, text);
		    };

		    XMLDocumentCB.prototype.n = function(name, attributes, text) {
		      return this.node(name, attributes, text);
		    };

		    XMLDocumentCB.prototype.t = function(value) {
		      return this.text(value);
		    };

		    XMLDocumentCB.prototype.d = function(value) {
		      return this.cdata(value);
		    };

		    XMLDocumentCB.prototype.c = function(value) {
		      return this.comment(value);
		    };

		    XMLDocumentCB.prototype.r = function(value) {
		      return this.raw(value);
		    };

		    XMLDocumentCB.prototype.i = function(target, value) {
		      return this.instruction(target, value);
		    };

		    XMLDocumentCB.prototype.att = function() {
		      if (this.currentNode && this.currentNode instanceof XMLDocType) {
		        return this.attList.apply(this, arguments);
		      } else {
		        return this.attribute.apply(this, arguments);
		      }
		    };

		    XMLDocumentCB.prototype.a = function() {
		      if (this.currentNode && this.currentNode instanceof XMLDocType) {
		        return this.attList.apply(this, arguments);
		      } else {
		        return this.attribute.apply(this, arguments);
		      }
		    };

		    XMLDocumentCB.prototype.ent = function(name, value) {
		      return this.entity(name, value);
		    };

		    XMLDocumentCB.prototype.pent = function(name, value) {
		      return this.pEntity(name, value);
		    };

		    XMLDocumentCB.prototype.not = function(name, value) {
		      return this.notation(name, value);
		    };

		    return XMLDocumentCB;

		  })();

		}).call(this);


	/***/ }),
	/* 25 */
	/***/ (function(module, exports, __webpack_require__) {

		// Generated by CoffeeScript 1.12.7
		(function() {
		  var XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStreamWriter, XMLText, XMLWriterBase,
		    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
		    hasProp = {}.hasOwnProperty;

		  XMLDeclaration = __webpack_require__(12);

		  XMLDocType = __webpack_require__(13);

		  XMLCData = __webpack_require__(10);

		  XMLComment = __webpack_require__(11);

		  XMLElement = __webpack_require__(8);

		  XMLRaw = __webpack_require__(18);

		  XMLText = __webpack_require__(19);

		  XMLProcessingInstruction = __webpack_require__(20);

		  XMLDTDAttList = __webpack_require__(14);

		  XMLDTDElement = __webpack_require__(16);

		  XMLDTDEntity = __webpack_require__(15);

		  XMLDTDNotation = __webpack_require__(17);

		  XMLWriterBase = __webpack_require__(23);

		  module.exports = XMLStreamWriter = (function(superClass) {
		    extend(XMLStreamWriter, superClass);

		    function XMLStreamWriter(stream, options) {
		      XMLStreamWriter.__super__.constructor.call(this, options);
		      this.stream = stream;
		    }

		    XMLStreamWriter.prototype.document = function(doc) {
		      var child, i, j, len, len1, ref, ref1, results;
		      ref = doc.children;
		      for (i = 0, len = ref.length; i < len; i++) {
		        child = ref[i];
		        child.isLastRootNode = false;
		      }
		      doc.children[doc.children.length - 1].isLastRootNode = true;
		      ref1 = doc.children;
		      results = [];
		      for (j = 0, len1 = ref1.length; j < len1; j++) {
		        child = ref1[j];
		        switch (false) {
		          case !(child instanceof XMLDeclaration):
		            results.push(this.declaration(child));
		            break;
		          case !(child instanceof XMLDocType):
		            results.push(this.docType(child));
		            break;
		          case !(child instanceof XMLComment):
		            results.push(this.comment(child));
		            break;
		          case !(child instanceof XMLProcessingInstruction):
		            results.push(this.processingInstruction(child));
		            break;
		          default:
		            results.push(this.element(child));
		        }
		      }
		      return results;
		    };

		    XMLStreamWriter.prototype.attribute = function(att) {
		      return this.stream.write(' ' + att.name + '="' + att.value + '"');
		    };

		    XMLStreamWriter.prototype.cdata = function(node, level) {
		      return this.stream.write(this.space(level) + '<![CDATA[' + node.text + ']]>' + this.endline(node));
		    };

		    XMLStreamWriter.prototype.comment = function(node, level) {
		      return this.stream.write(this.space(level) + '<!-- ' + node.text + ' -->' + this.endline(node));
		    };

		    XMLStreamWriter.prototype.declaration = function(node, level) {
		      this.stream.write(this.space(level));
		      this.stream.write('<?xml version="' + node.version + '"');
		      if (node.encoding != null) {
		        this.stream.write(' encoding="' + node.encoding + '"');
		      }
		      if (node.standalone != null) {
		        this.stream.write(' standalone="' + node.standalone + '"');
		      }
		      this.stream.write(this.spacebeforeslash + '?>');
		      return this.stream.write(this.endline(node));
		    };

		    XMLStreamWriter.prototype.docType = function(node, level) {
		      var child, i, len, ref;
		      level || (level = 0);
		      this.stream.write(this.space(level));
		      this.stream.write('<!DOCTYPE ' + node.root().name);
		      if (node.pubID && node.sysID) {
		        this.stream.write(' PUBLIC "' + node.pubID + '" "' + node.sysID + '"');
		      } else if (node.sysID) {
		        this.stream.write(' SYSTEM "' + node.sysID + '"');
		      }
		      if (node.children.length > 0) {
		        this.stream.write(' [');
		        this.stream.write(this.endline(node));
		        ref = node.children;
		        for (i = 0, len = ref.length; i < len; i++) {
		          child = ref[i];
		          switch (false) {
		            case !(child instanceof XMLDTDAttList):
		              this.dtdAttList(child, level + 1);
		              break;
		            case !(child instanceof XMLDTDElement):
		              this.dtdElement(child, level + 1);
		              break;
		            case !(child instanceof XMLDTDEntity):
		              this.dtdEntity(child, level + 1);
		              break;
		            case !(child instanceof XMLDTDNotation):
		              this.dtdNotation(child, level + 1);
		              break;
		            case !(child instanceof XMLCData):
		              this.cdata(child, level + 1);
		              break;
		            case !(child instanceof XMLComment):
		              this.comment(child, level + 1);
		              break;
		            case !(child instanceof XMLProcessingInstruction):
		              this.processingInstruction(child, level + 1);
		              break;
		            default:
		              throw new Error("Unknown DTD node type: " + child.constructor.name);
		          }
		        }
		        this.stream.write(']');
		      }
		      this.stream.write(this.spacebeforeslash + '>');
		      return this.stream.write(this.endline(node));
		    };

		    XMLStreamWriter.prototype.element = function(node, level) {
		      var att, child, i, len, name, ref, ref1, space;
		      level || (level = 0);
		      space = this.space(level);
		      this.stream.write(space + '<' + node.name);
		      ref = node.attributes;
		      for (name in ref) {
		        if (!hasProp.call(ref, name)) continue;
		        att = ref[name];
		        this.attribute(att);
		      }
		      if (node.children.length === 0 || node.children.every(function(e) {
		        return e.value === '';
		      })) {
		        if (this.allowEmpty) {
		          this.stream.write('></' + node.name + '>');
		        } else {
		          this.stream.write(this.spacebeforeslash + '/>');
		        }
		      } else if (this.pretty && node.children.length === 1 && (node.children[0].value != null)) {
		        this.stream.write('>');
		        this.stream.write(node.children[0].value);
		        this.stream.write('</' + node.name + '>');
		      } else {
		        this.stream.write('>' + this.newline);
		        ref1 = node.children;
		        for (i = 0, len = ref1.length; i < len; i++) {
		          child = ref1[i];
		          switch (false) {
		            case !(child instanceof XMLCData):
		              this.cdata(child, level + 1);
		              break;
		            case !(child instanceof XMLComment):
		              this.comment(child, level + 1);
		              break;
		            case !(child instanceof XMLElement):
		              this.element(child, level + 1);
		              break;
		            case !(child instanceof XMLRaw):
		              this.raw(child, level + 1);
		              break;
		            case !(child instanceof XMLText):
		              this.text(child, level + 1);
		              break;
		            case !(child instanceof XMLProcessingInstruction):
		              this.processingInstruction(child, level + 1);
		              break;
		            default:
		              throw new Error("Unknown XML node type: " + child.constructor.name);
		          }
		        }
		        this.stream.write(space + '</' + node.name + '>');
		      }
		      return this.stream.write(this.endline(node));
		    };

		    XMLStreamWriter.prototype.processingInstruction = function(node, level) {
		      this.stream.write(this.space(level) + '<?' + node.target);
		      if (node.value) {
		        this.stream.write(' ' + node.value);
		      }
		      return this.stream.write(this.spacebeforeslash + '?>' + this.endline(node));
		    };

		    XMLStreamWriter.prototype.raw = function(node, level) {
		      return this.stream.write(this.space(level) + node.value + this.endline(node));
		    };

		    XMLStreamWriter.prototype.text = function(node, level) {
		      return this.stream.write(this.space(level) + node.value + this.endline(node));
		    };

		    XMLStreamWriter.prototype.dtdAttList = function(node, level) {
		      this.stream.write(this.space(level) + '<!ATTLIST ' + node.elementName + ' ' + node.attributeName + ' ' + node.attributeType);
		      if (node.defaultValueType !== '#DEFAULT') {
		        this.stream.write(' ' + node.defaultValueType);
		      }
		      if (node.defaultValue) {
		        this.stream.write(' "' + node.defaultValue + '"');
		      }
		      return this.stream.write(this.spacebeforeslash + '>' + this.endline(node));
		    };

		    XMLStreamWriter.prototype.dtdElement = function(node, level) {
		      this.stream.write(this.space(level) + '<!ELEMENT ' + node.name + ' ' + node.value);
		      return this.stream.write(this.spacebeforeslash + '>' + this.endline(node));
		    };

		    XMLStreamWriter.prototype.dtdEntity = function(node, level) {
		      this.stream.write(this.space(level) + '<!ENTITY');
		      if (node.pe) {
		        this.stream.write(' %');
		      }
		      this.stream.write(' ' + node.name);
		      if (node.value) {
		        this.stream.write(' "' + node.value + '"');
		      } else {
		        if (node.pubID && node.sysID) {
		          this.stream.write(' PUBLIC "' + node.pubID + '" "' + node.sysID + '"');
		        } else if (node.sysID) {
		          this.stream.write(' SYSTEM "' + node.sysID + '"');
		        }
		        if (node.nData) {
		          this.stream.write(' NDATA ' + node.nData);
		        }
		      }
		      return this.stream.write(this.spacebeforeslash + '>' + this.endline(node));
		    };

		    XMLStreamWriter.prototype.dtdNotation = function(node, level) {
		      this.stream.write(this.space(level) + '<!NOTATION ' + node.name);
		      if (node.pubID && node.sysID) {
		        this.stream.write(' PUBLIC "' + node.pubID + '" "' + node.sysID + '"');
		      } else if (node.pubID) {
		        this.stream.write(' PUBLIC "' + node.pubID + '"');
		      } else if (node.sysID) {
		        this.stream.write(' SYSTEM "' + node.sysID + '"');
		      }
		      return this.stream.write(this.spacebeforeslash + '>' + this.endline(node));
		    };

		    XMLStreamWriter.prototype.endline = function(node) {
		      if (!node.isLastRootNode) {
		        return this.newline;
		      } else {
		        return '';
		      }
		    };

		    return XMLStreamWriter;

		  })(XMLWriterBase);

		}).call(this);


	/***/ }),
	/* 26 */
	/***/ (function(module, exports, __webpack_require__) {

		// Generated by CoffeeScript 1.12.7
		(function() {
		  "use strict";
		  var bom, defaults, events, isEmpty, processItem, processors, sax, setImmediate,
		    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
		    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
		    hasProp = {}.hasOwnProperty;

		  sax = __webpack_require__(27);

		  events = __webpack_require__(33);

		  bom = __webpack_require__(59);

		  processors = __webpack_require__(60);

		  setImmediate = __webpack_require__(48).setImmediate;

		  defaults = __webpack_require__(2).defaults;

		  isEmpty = function(thing) {
		    return typeof thing === "object" && (thing != null) && Object.keys(thing).length === 0;
		  };

		  processItem = function(processors, item, key) {
		    var i, len, process;
		    for (i = 0, len = processors.length; i < len; i++) {
		      process = processors[i];
		      item = process(item, key);
		    }
		    return item;
		  };

		  exports.Parser = (function(superClass) {
		    extend(Parser, superClass);

		    function Parser(opts) {
		      this.parseString = bind(this.parseString, this);
		      this.reset = bind(this.reset, this);
		      this.assignOrPush = bind(this.assignOrPush, this);
		      this.processAsync = bind(this.processAsync, this);
		      var key, ref, value;
		      if (!(this instanceof exports.Parser)) {
		        return new exports.Parser(opts);
		      }
		      this.options = {};
		      ref = defaults["0.2"];
		      for (key in ref) {
		        if (!hasProp.call(ref, key)) continue;
		        value = ref[key];
		        this.options[key] = value;
		      }
		      for (key in opts) {
		        if (!hasProp.call(opts, key)) continue;
		        value = opts[key];
		        this.options[key] = value;
		      }
		      if (this.options.xmlns) {
		        this.options.xmlnskey = this.options.attrkey + "ns";
		      }
		      if (this.options.normalizeTags) {
		        if (!this.options.tagNameProcessors) {
		          this.options.tagNameProcessors = [];
		        }
		        this.options.tagNameProcessors.unshift(processors.normalize);
		      }
		      this.reset();
		    }

		    Parser.prototype.processAsync = function() {
		      var chunk, err;
		      try {
		        if (this.remaining.length <= this.options.chunkSize) {
		          chunk = this.remaining;
		          this.remaining = '';
		          this.saxParser = this.saxParser.write(chunk);
		          return this.saxParser.close();
		        } else {
		          chunk = this.remaining.substr(0, this.options.chunkSize);
		          this.remaining = this.remaining.substr(this.options.chunkSize, this.remaining.length);
		          this.saxParser = this.saxParser.write(chunk);
		          return setImmediate(this.processAsync);
		        }
		      } catch (error1) {
		        err = error1;
		        if (!this.saxParser.errThrown) {
		          this.saxParser.errThrown = true;
		          return this.emit(err);
		        }
		      }
		    };

		    Parser.prototype.assignOrPush = function(obj, key, newValue) {
		      if (!(key in obj)) {
		        if (!this.options.explicitArray) {
		          return obj[key] = newValue;
		        } else {
		          return obj[key] = [newValue];
		        }
		      } else {
		        if (!(obj[key] instanceof Array)) {
		          obj[key] = [obj[key]];
		        }
		        return obj[key].push(newValue);
		      }
		    };

		    Parser.prototype.reset = function() {
		      var attrkey, charkey, ontext, stack;
		      this.removeAllListeners();
		      this.saxParser = sax.parser(this.options.strict, {
		        trim: false,
		        normalize: false,
		        xmlns: this.options.xmlns
		      });
		      this.saxParser.errThrown = false;
		      this.saxParser.onerror = (function(_this) {
		        return function(error) {
		          _this.saxParser.resume();
		          if (!_this.saxParser.errThrown) {
		            _this.saxParser.errThrown = true;
		            return _this.emit("error", error);
		          }
		        };
		      })(this);
		      this.saxParser.onend = (function(_this) {
		        return function() {
		          if (!_this.saxParser.ended) {
		            _this.saxParser.ended = true;
		            return _this.emit("end", _this.resultObject);
		          }
		        };
		      })(this);
		      this.saxParser.ended = false;
		      this.EXPLICIT_CHARKEY = this.options.explicitCharkey;
		      this.resultObject = null;
		      stack = [];
		      attrkey = this.options.attrkey;
		      charkey = this.options.charkey;
		      this.saxParser.onopentag = (function(_this) {
		        return function(node) {
		          var key, newValue, obj, processedKey, ref;
		          obj = {};
		          obj[charkey] = "";
		          if (!_this.options.ignoreAttrs) {
		            ref = node.attributes;
		            for (key in ref) {
		              if (!hasProp.call(ref, key)) continue;
		              if (!(attrkey in obj) && !_this.options.mergeAttrs) {
		                obj[attrkey] = {};
		              }
		              newValue = _this.options.attrValueProcessors ? processItem(_this.options.attrValueProcessors, node.attributes[key], key) : node.attributes[key];
		              processedKey = _this.options.attrNameProcessors ? processItem(_this.options.attrNameProcessors, key) : key;
		              if (_this.options.mergeAttrs) {
		                _this.assignOrPush(obj, processedKey, newValue);
		              } else {
		                obj[attrkey][processedKey] = newValue;
		              }
		            }
		          }
		          obj["#name"] = _this.options.tagNameProcessors ? processItem(_this.options.tagNameProcessors, node.name) : node.name;
		          if (_this.options.xmlns) {
		            obj[_this.options.xmlnskey] = {
		              uri: node.uri,
		              local: node.local
		            };
		          }
		          return stack.push(obj);
		        };
		      })(this);
		      this.saxParser.onclosetag = (function(_this) {
		        return function() {
		          var cdata, emptyStr, key, node, nodeName, obj, objClone, old, s, xpath;
		          obj = stack.pop();
		          nodeName = obj["#name"];
		          if (!_this.options.explicitChildren || !_this.options.preserveChildrenOrder) {
		            delete obj["#name"];
		          }
		          if (obj.cdata === true) {
		            cdata = obj.cdata;
		            delete obj.cdata;
		          }
		          s = stack[stack.length - 1];
		          if (obj[charkey].match(/^\s*$/) && !cdata) {
		            emptyStr = obj[charkey];
		            delete obj[charkey];
		          } else {
		            if (_this.options.trim) {
		              obj[charkey] = obj[charkey].trim();
		            }
		            if (_this.options.normalize) {
		              obj[charkey] = obj[charkey].replace(/\s{2,}/g, " ").trim();
		            }
		            obj[charkey] = _this.options.valueProcessors ? processItem(_this.options.valueProcessors, obj[charkey], nodeName) : obj[charkey];
		            if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
		              obj = obj[charkey];
		            }
		          }
		          if (isEmpty(obj)) {
		            obj = _this.options.emptyTag !== '' ? _this.options.emptyTag : emptyStr;
		          }
		          if (_this.options.validator != null) {
		            xpath = "/" + ((function() {
		              var i, len, results;
		              results = [];
		              for (i = 0, len = stack.length; i < len; i++) {
		                node = stack[i];
		                results.push(node["#name"]);
		              }
		              return results;
		            })()).concat(nodeName).join("/");
		            (function() {
		              var err;
		              try {
		                return obj = _this.options.validator(xpath, s && s[nodeName], obj);
		              } catch (error1) {
		                err = error1;
		                return _this.emit("error", err);
		              }
		            })();
		          }
		          if (_this.options.explicitChildren && !_this.options.mergeAttrs && typeof obj === 'object') {
		            if (!_this.options.preserveChildrenOrder) {
		              node = {};
		              if (_this.options.attrkey in obj) {
		                node[_this.options.attrkey] = obj[_this.options.attrkey];
		                delete obj[_this.options.attrkey];
		              }
		              if (!_this.options.charsAsChildren && _this.options.charkey in obj) {
		                node[_this.options.charkey] = obj[_this.options.charkey];
		                delete obj[_this.options.charkey];
		              }
		              if (Object.getOwnPropertyNames(obj).length > 0) {
		                node[_this.options.childkey] = obj;
		              }
		              obj = node;
		            } else if (s) {
		              s[_this.options.childkey] = s[_this.options.childkey] || [];
		              objClone = {};
		              for (key in obj) {
		                if (!hasProp.call(obj, key)) continue;
		                objClone[key] = obj[key];
		              }
		              s[_this.options.childkey].push(objClone);
		              delete obj["#name"];
		              if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
		                obj = obj[charkey];
		              }
		            }
		          }
		          if (stack.length > 0) {
		            return _this.assignOrPush(s, nodeName, obj);
		          } else {
		            if (_this.options.explicitRoot) {
		              old = obj;
		              obj = {};
		              obj[nodeName] = old;
		            }
		            _this.resultObject = obj;
		            _this.saxParser.ended = true;
		            return _this.emit("end", _this.resultObject);
		          }
		        };
		      })(this);
		      ontext = (function(_this) {
		        return function(text) {
		          var charChild, s;
		          s = stack[stack.length - 1];
		          if (s) {
		            s[charkey] += text;
		            if (_this.options.explicitChildren && _this.options.preserveChildrenOrder && _this.options.charsAsChildren && (_this.options.includeWhiteChars || text.replace(/\\n/g, '').trim() !== '')) {
		              s[_this.options.childkey] = s[_this.options.childkey] || [];
		              charChild = {
		                '#name': '__text__'
		              };
		              charChild[charkey] = text;
		              if (_this.options.normalize) {
		                charChild[charkey] = charChild[charkey].replace(/\s{2,}/g, " ").trim();
		              }
		              s[_this.options.childkey].push(charChild);
		            }
		            return s;
		          }
		        };
		      })(this);
		      this.saxParser.ontext = ontext;
		      return this.saxParser.oncdata = (function(_this) {
		        return function(text) {
		          var s;
		          s = ontext(text);
		          if (s) {
		            return s.cdata = true;
		          }
		        };
		      })(this);
		    };

		    Parser.prototype.parseString = function(str, cb) {
		      var err;
		      if ((cb != null) && typeof cb === "function") {
		        this.on("end", function(result) {
		          this.reset();
		          return cb(null, result);
		        });
		        this.on("error", function(err) {
		          this.reset();
		          return cb(err);
		        });
		      }
		      try {
		        str = str.toString();
		        if (str.trim() === '') {
		          this.emit("end", null);
		          return true;
		        }
		        str = bom.stripBOM(str);
		        if (this.options.async) {
		          this.remaining = str;
		          setImmediate(this.processAsync);
		          return this.saxParser;
		        }
		        return this.saxParser.write(str).close();
		      } catch (error1) {
		        err = error1;
		        if (!(this.saxParser.errThrown || this.saxParser.ended)) {
		          this.emit('error', err);
		          return this.saxParser.errThrown = true;
		        } else if (this.saxParser.ended) {
		          throw err;
		        }
		      }
		    };

		    return Parser;

		  })(events.EventEmitter);

		  exports.parseString = function(str, a, b) {
		    var cb, options, parser;
		    if (b != null) {
		      if (typeof b === 'function') {
		        cb = b;
		      }
		      if (typeof a === 'object') {
		        options = a;
		      }
		    } else {
		      if (typeof a === 'function') {
		        cb = a;
		      }
		      options = {};
		    }
		    parser = new exports.Parser(options);
		    return parser.parseString(str, cb);
		  };

		}).call(this);


	/***/ }),
	/* 27 */
	/***/ (function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(Buffer) {;(function (sax) { // wrapper for non-node envs
		  sax.parser = function (strict, opt) { return new SAXParser(strict, opt) }
		  sax.SAXParser = SAXParser
		  sax.SAXStream = SAXStream
		  sax.createStream = createStream

		  // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.
		  // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),
		  // since that's the earliest that a buffer overrun could occur.  This way, checks are
		  // as rare as required, but as often as necessary to ensure never crossing this bound.
		  // Furthermore, buffers are only tested at most once per write(), so passing a very
		  // large string into write() might have undesirable effects, but this is manageable by
		  // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme
		  // edge case, result in creating at most one complete copy of the string passed in.
		  // Set to Infinity to have unlimited buffers.
		  sax.MAX_BUFFER_LENGTH = 64 * 1024

		  var buffers = [
		    'comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype',
		    'procInstName', 'procInstBody', 'entity', 'attribName',
		    'attribValue', 'cdata', 'script'
		  ]

		  sax.EVENTS = [
		    'text',
		    'processinginstruction',
		    'sgmldeclaration',
		    'doctype',
		    'comment',
		    'opentagstart',
		    'attribute',
		    'opentag',
		    'closetag',
		    'opencdata',
		    'cdata',
		    'closecdata',
		    'error',
		    'end',
		    'ready',
		    'script',
		    'opennamespace',
		    'closenamespace'
		  ]

		  function SAXParser (strict, opt) {
		    if (!(this instanceof SAXParser)) {
		      return new SAXParser(strict, opt)
		    }

		    var parser = this
		    clearBuffers(parser)
		    parser.q = parser.c = ''
		    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH
		    parser.opt = opt || {}
		    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags
		    parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase'
		    parser.tags = []
		    parser.closed = parser.closedRoot = parser.sawRoot = false
		    parser.tag = parser.error = null
		    parser.strict = !!strict
		    parser.noscript = !!(strict || parser.opt.noscript)
		    parser.state = S.BEGIN
		    parser.strictEntities = parser.opt.strictEntities
		    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES)
		    parser.attribList = []

		    // namespaces form a prototype chain.
		    // it always points at the current tag,
		    // which protos to its parent tag.
		    if (parser.opt.xmlns) {
		      parser.ns = Object.create(rootNS)
		    }

		    // mostly just for error reporting
		    parser.trackPosition = parser.opt.position !== false
		    if (parser.trackPosition) {
		      parser.position = parser.line = parser.column = 0
		    }
		    emit(parser, 'onready')
		  }

		  if (!Object.create) {
		    Object.create = function (o) {
		      function F () {}
		      F.prototype = o
		      var newf = new F()
		      return newf
		    }
		  }

		  if (!Object.keys) {
		    Object.keys = function (o) {
		      var a = []
		      for (var i in o) if (o.hasOwnProperty(i)) a.push(i)
		      return a
		    }
		  }

		  function checkBufferLength (parser) {
		    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)
		    var maxActual = 0
		    for (var i = 0, l = buffers.length; i < l; i++) {
		      var len = parser[buffers[i]].length
		      if (len > maxAllowed) {
		        // Text/cdata nodes can get big, and since they're buffered,
		        // we can get here under normal conditions.
		        // Avoid issues by emitting the text node now,
		        // so at least it won't get any bigger.
		        switch (buffers[i]) {
		          case 'textNode':
		            closeText(parser)
		            break

		          case 'cdata':
		            emitNode(parser, 'oncdata', parser.cdata)
		            parser.cdata = ''
		            break

		          case 'script':
		            emitNode(parser, 'onscript', parser.script)
		            parser.script = ''
		            break

		          default:
		            error(parser, 'Max buffer length exceeded: ' + buffers[i])
		        }
		      }
		      maxActual = Math.max(maxActual, len)
		    }
		    // schedule the next check for the earliest possible buffer overrun.
		    var m = sax.MAX_BUFFER_LENGTH - maxActual
		    parser.bufferCheckPosition = m + parser.position
		  }

		  function clearBuffers (parser) {
		    for (var i = 0, l = buffers.length; i < l; i++) {
		      parser[buffers[i]] = ''
		    }
		  }

		  function flushBuffers (parser) {
		    closeText(parser)
		    if (parser.cdata !== '') {
		      emitNode(parser, 'oncdata', parser.cdata)
		      parser.cdata = ''
		    }
		    if (parser.script !== '') {
		      emitNode(parser, 'onscript', parser.script)
		      parser.script = ''
		    }
		  }

		  SAXParser.prototype = {
		    end: function () { end(this) },
		    write: write,
		    resume: function () { this.error = null; return this },
		    close: function () { return this.write(null) },
		    flush: function () { flushBuffers(this) }
		  }

		  var Stream
		  try {
		    Stream = __webpack_require__(32).Stream
		  } catch (ex) {
		    Stream = function () {}
		  }

		  var streamWraps = sax.EVENTS.filter(function (ev) {
		    return ev !== 'error' && ev !== 'end'
		  })

		  function createStream (strict, opt) {
		    return new SAXStream(strict, opt)
		  }

		  function SAXStream (strict, opt) {
		    if (!(this instanceof SAXStream)) {
		      return new SAXStream(strict, opt)
		    }

		    Stream.apply(this)

		    this._parser = new SAXParser(strict, opt)
		    this.writable = true
		    this.readable = true

		    var me = this

		    this._parser.onend = function () {
		      me.emit('end')
		    }

		    this._parser.onerror = function (er) {
		      me.emit('error', er)

		      // if didn't throw, then means error was handled.
		      // go ahead and clear error, so we can write again.
		      me._parser.error = null
		    }

		    this._decoder = null

		    streamWraps.forEach(function (ev) {
		      Object.defineProperty(me, 'on' + ev, {
		        get: function () {
		          return me._parser['on' + ev]
		        },
		        set: function (h) {
		          if (!h) {
		            me.removeAllListeners(ev)
		            me._parser['on' + ev] = h
		            return h
		          }
		          me.on(ev, h)
		        },
		        enumerable: true,
		        configurable: false
		      })
		    })
		  }

		  SAXStream.prototype = Object.create(Stream.prototype, {
		    constructor: {
		      value: SAXStream
		    }
		  })

		  SAXStream.prototype.write = function (data) {
		    if (typeof Buffer === 'function' &&
		      typeof Buffer.isBuffer === 'function' &&
		      Buffer.isBuffer(data)) {
		      if (!this._decoder) {
		        var SD = __webpack_require__(58).StringDecoder
		        this._decoder = new SD('utf8')
		      }
		      data = this._decoder.write(data)
		    }

		    this._parser.write(data.toString())
		    this.emit('data', data)
		    return true
		  }

		  SAXStream.prototype.end = function (chunk) {
		    if (chunk && chunk.length) {
		      this.write(chunk)
		    }
		    this._parser.end()
		    return true
		  }

		  SAXStream.prototype.on = function (ev, handler) {
		    var me = this
		    if (!me._parser['on' + ev] && streamWraps.indexOf(ev) !== -1) {
		      me._parser['on' + ev] = function () {
		        var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments)
		        args.splice(0, 0, ev)
		        me.emit.apply(me, args)
		      }
		    }

		    return Stream.prototype.on.call(me, ev, handler)
		  }

		  // character classes and tokens
		  var whitespace = '\r\n\t '

		  // this really needs to be replaced with character classes.
		  // XML allows all manner of ridiculous numbers and digits.
		  var number = '0124356789'
		  var letter = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'

		  // (Letter | "_" | ":")
		  var quote = '\'"'
		  var attribEnd = whitespace + '>'
		  var CDATA = '[CDATA['
		  var DOCTYPE = 'DOCTYPE'
		  var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace'
		  var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/'
		  var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }

		  // turn all the string character sets into character class objects.
		  whitespace = charClass(whitespace)
		  number = charClass(number)
		  letter = charClass(letter)

		  // http://www.w3.org/TR/REC-xml/#NT-NameStartChar
		  // This implementation works on strings, a single character at a time
		  // as such, it cannot ever support astral-plane characters (10000-EFFFF)
		  // without a significant breaking change to either this  parser, or the
		  // JavaScript language.  Implementation of an emoji-capable xml parser
		  // is left as an exercise for the reader.
		  var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/

		  var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040\.\d-]/

		  var entityStart = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/
		  var entityBody = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040\.\d-]/

		  quote = charClass(quote)
		  attribEnd = charClass(attribEnd)

		  function charClass (str) {
		    return str.split('').reduce(function (s, c) {
		      s[c] = true
		      return s
		    }, {})
		  }

		  function isRegExp (c) {
		    return Object.prototype.toString.call(c) === '[object RegExp]'
		  }

		  function is (charclass, c) {
		    return isRegExp(charclass) ? !!c.match(charclass) : charclass[c]
		  }

		  function not (charclass, c) {
		    return !is(charclass, c)
		  }

		  var S = 0
		  sax.STATE = {
		    BEGIN: S++, // leading byte order mark or whitespace
		    BEGIN_WHITESPACE: S++, // leading whitespace
		    TEXT: S++, // general stuff
		    TEXT_ENTITY: S++, // &amp and such.
		    OPEN_WAKA: S++, // <
		    SGML_DECL: S++, // <!BLARG
		    SGML_DECL_QUOTED: S++, // <!BLARG foo "bar
		    DOCTYPE: S++, // <!DOCTYPE
		    DOCTYPE_QUOTED: S++, // <!DOCTYPE "//blah
		    DOCTYPE_DTD: S++, // <!DOCTYPE "//blah" [ ...
		    DOCTYPE_DTD_QUOTED: S++, // <!DOCTYPE "//blah" [ "foo
		    COMMENT_STARTING: S++, // <!-
		    COMMENT: S++, // <!--
		    COMMENT_ENDING: S++, // <!-- blah -
		    COMMENT_ENDED: S++, // <!-- blah --
		    CDATA: S++, // <![CDATA[ something
		    CDATA_ENDING: S++, // ]
		    CDATA_ENDING_2: S++, // ]]
		    PROC_INST: S++, // <?hi
		    PROC_INST_BODY: S++, // <?hi there
		    PROC_INST_ENDING: S++, // <?hi "there" ?
		    OPEN_TAG: S++, // <strong
		    OPEN_TAG_SLASH: S++, // <strong /
		    ATTRIB: S++, // <a
		    ATTRIB_NAME: S++, // <a foo
		    ATTRIB_NAME_SAW_WHITE: S++, // <a foo _
		    ATTRIB_VALUE: S++, // <a foo=
		    ATTRIB_VALUE_QUOTED: S++, // <a foo="bar
		    ATTRIB_VALUE_CLOSED: S++, // <a foo="bar"
		    ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar
		    ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar="&quot;"
		    ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot
		    CLOSE_TAG: S++, // </a
		    CLOSE_TAG_SAW_WHITE: S++, // </a   >
		    SCRIPT: S++, // <script> ...
		    SCRIPT_ENDING: S++ // <script> ... <
		  }

		  sax.XML_ENTITIES = {
		    'amp': '&',
		    'gt': '>',
		    'lt': '<',
		    'quot': '"',
		    'apos': "'"
		  }

		  sax.ENTITIES = {
		    'amp': '&',
		    'gt': '>',
		    'lt': '<',
		    'quot': '"',
		    'apos': "'",
		    'AElig': 198,
		    'Aacute': 193,
		    'Acirc': 194,
		    'Agrave': 192,
		    'Aring': 197,
		    'Atilde': 195,
		    'Auml': 196,
		    'Ccedil': 199,
		    'ETH': 208,
		    'Eacute': 201,
		    'Ecirc': 202,
		    'Egrave': 200,
		    'Euml': 203,
		    'Iacute': 205,
		    'Icirc': 206,
		    'Igrave': 204,
		    'Iuml': 207,
		    'Ntilde': 209,
		    'Oacute': 211,
		    'Ocirc': 212,
		    'Ograve': 210,
		    'Oslash': 216,
		    'Otilde': 213,
		    'Ouml': 214,
		    'THORN': 222,
		    'Uacute': 218,
		    'Ucirc': 219,
		    'Ugrave': 217,
		    'Uuml': 220,
		    'Yacute': 221,
		    'aacute': 225,
		    'acirc': 226,
		    'aelig': 230,
		    'agrave': 224,
		    'aring': 229,
		    'atilde': 227,
		    'auml': 228,
		    'ccedil': 231,
		    'eacute': 233,
		    'ecirc': 234,
		    'egrave': 232,
		    'eth': 240,
		    'euml': 235,
		    'iacute': 237,
		    'icirc': 238,
		    'igrave': 236,
		    'iuml': 239,
		    'ntilde': 241,
		    'oacute': 243,
		    'ocirc': 244,
		    'ograve': 242,
		    'oslash': 248,
		    'otilde': 245,
		    'ouml': 246,
		    'szlig': 223,
		    'thorn': 254,
		    'uacute': 250,
		    'ucirc': 251,
		    'ugrave': 249,
		    'uuml': 252,
		    'yacute': 253,
		    'yuml': 255,
		    'copy': 169,
		    'reg': 174,
		    'nbsp': 160,
		    'iexcl': 161,
		    'cent': 162,
		    'pound': 163,
		    'curren': 164,
		    'yen': 165,
		    'brvbar': 166,
		    'sect': 167,
		    'uml': 168,
		    'ordf': 170,
		    'laquo': 171,
		    'not': 172,
		    'shy': 173,
		    'macr': 175,
		    'deg': 176,
		    'plusmn': 177,
		    'sup1': 185,
		    'sup2': 178,
		    'sup3': 179,
		    'acute': 180,
		    'micro': 181,
		    'para': 182,
		    'middot': 183,
		    'cedil': 184,
		    'ordm': 186,
		    'raquo': 187,
		    'frac14': 188,
		    'frac12': 189,
		    'frac34': 190,
		    'iquest': 191,
		    'times': 215,
		    'divide': 247,
		    'OElig': 338,
		    'oelig': 339,
		    'Scaron': 352,
		    'scaron': 353,
		    'Yuml': 376,
		    'fnof': 402,
		    'circ': 710,
		    'tilde': 732,
		    'Alpha': 913,
		    'Beta': 914,
		    'Gamma': 915,
		    'Delta': 916,
		    'Epsilon': 917,
		    'Zeta': 918,
		    'Eta': 919,
		    'Theta': 920,
		    'Iota': 921,
		    'Kappa': 922,
		    'Lambda': 923,
		    'Mu': 924,
		    'Nu': 925,
		    'Xi': 926,
		    'Omicron': 927,
		    'Pi': 928,
		    'Rho': 929,
		    'Sigma': 931,
		    'Tau': 932,
		    'Upsilon': 933,
		    'Phi': 934,
		    'Chi': 935,
		    'Psi': 936,
		    'Omega': 937,
		    'alpha': 945,
		    'beta': 946,
		    'gamma': 947,
		    'delta': 948,
		    'epsilon': 949,
		    'zeta': 950,
		    'eta': 951,
		    'theta': 952,
		    'iota': 953,
		    'kappa': 954,
		    'lambda': 955,
		    'mu': 956,
		    'nu': 957,
		    'xi': 958,
		    'omicron': 959,
		    'pi': 960,
		    'rho': 961,
		    'sigmaf': 962,
		    'sigma': 963,
		    'tau': 964,
		    'upsilon': 965,
		    'phi': 966,
		    'chi': 967,
		    'psi': 968,
		    'omega': 969,
		    'thetasym': 977,
		    'upsih': 978,
		    'piv': 982,
		    'ensp': 8194,
		    'emsp': 8195,
		    'thinsp': 8201,
		    'zwnj': 8204,
		    'zwj': 8205,
		    'lrm': 8206,
		    'rlm': 8207,
		    'ndash': 8211,
		    'mdash': 8212,
		    'lsquo': 8216,
		    'rsquo': 8217,
		    'sbquo': 8218,
		    'ldquo': 8220,
		    'rdquo': 8221,
		    'bdquo': 8222,
		    'dagger': 8224,
		    'Dagger': 8225,
		    'bull': 8226,
		    'hellip': 8230,
		    'permil': 8240,
		    'prime': 8242,
		    'Prime': 8243,
		    'lsaquo': 8249,
		    'rsaquo': 8250,
		    'oline': 8254,
		    'frasl': 8260,
		    'euro': 8364,
		    'image': 8465,
		    'weierp': 8472,
		    'real': 8476,
		    'trade': 8482,
		    'alefsym': 8501,
		    'larr': 8592,
		    'uarr': 8593,
		    'rarr': 8594,
		    'darr': 8595,
		    'harr': 8596,
		    'crarr': 8629,
		    'lArr': 8656,
		    'uArr': 8657,
		    'rArr': 8658,
		    'dArr': 8659,
		    'hArr': 8660,
		    'forall': 8704,
		    'part': 8706,
		    'exist': 8707,
		    'empty': 8709,
		    'nabla': 8711,
		    'isin': 8712,
		    'notin': 8713,
		    'ni': 8715,
		    'prod': 8719,
		    'sum': 8721,
		    'minus': 8722,
		    'lowast': 8727,
		    'radic': 8730,
		    'prop': 8733,
		    'infin': 8734,
		    'ang': 8736,
		    'and': 8743,
		    'or': 8744,
		    'cap': 8745,
		    'cup': 8746,
		    'int': 8747,
		    'there4': 8756,
		    'sim': 8764,
		    'cong': 8773,
		    'asymp': 8776,
		    'ne': 8800,
		    'equiv': 8801,
		    'le': 8804,
		    'ge': 8805,
		    'sub': 8834,
		    'sup': 8835,
		    'nsub': 8836,
		    'sube': 8838,
		    'supe': 8839,
		    'oplus': 8853,
		    'otimes': 8855,
		    'perp': 8869,
		    'sdot': 8901,
		    'lceil': 8968,
		    'rceil': 8969,
		    'lfloor': 8970,
		    'rfloor': 8971,
		    'lang': 9001,
		    'rang': 9002,
		    'loz': 9674,
		    'spades': 9824,
		    'clubs': 9827,
		    'hearts': 9829,
		    'diams': 9830
		  }

		  Object.keys(sax.ENTITIES).forEach(function (key) {
		    var e = sax.ENTITIES[key]
		    var s = typeof e === 'number' ? String.fromCharCode(e) : e
		    sax.ENTITIES[key] = s
		  })

		  for (var s in sax.STATE) {
		    sax.STATE[sax.STATE[s]] = s
		  }

		  // shorthand
		  S = sax.STATE

		  function emit (parser, event, data) {
		    parser[event] && parser[event](data)
		  }

		  function emitNode (parser, nodeType, data) {
		    if (parser.textNode) closeText(parser)
		    emit(parser, nodeType, data)
		  }

		  function closeText (parser) {
		    parser.textNode = textopts(parser.opt, parser.textNode)
		    if (parser.textNode) emit(parser, 'ontext', parser.textNode)
		    parser.textNode = ''
		  }

		  function textopts (opt, text) {
		    if (opt.trim) text = text.trim()
		    if (opt.normalize) text = text.replace(/\s+/g, ' ')
		    return text
		  }

		  function error (parser, er) {
		    closeText(parser)
		    if (parser.trackPosition) {
		      er += '\nLine: ' + parser.line +
		        '\nColumn: ' + parser.column +
		        '\nChar: ' + parser.c
		    }
		    er = new Error(er)
		    parser.error = er
		    emit(parser, 'onerror', er)
		    return parser
		  }

		  function end (parser) {
		    if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag')
		    if ((parser.state !== S.BEGIN) &&
		      (parser.state !== S.BEGIN_WHITESPACE) &&
		      (parser.state !== S.TEXT)) {
		      error(parser, 'Unexpected end')
		    }
		    closeText(parser)
		    parser.c = ''
		    parser.closed = true
		    emit(parser, 'onend')
		    SAXParser.call(parser, parser.strict, parser.opt)
		    return parser
		  }

		  function strictFail (parser, message) {
		    if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {
		      throw new Error('bad call to strictFail')
		    }
		    if (parser.strict) {
		      error(parser, message)
		    }
		  }

		  function newTag (parser) {
		    if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()
		    var parent = parser.tags[parser.tags.length - 1] || parser
		    var tag = parser.tag = { name: parser.tagName, attributes: {} }

		    // will be overridden if tag contails an xmlns="foo" or xmlns:foo="bar"
		    if (parser.opt.xmlns) {
		      tag.ns = parent.ns
		    }
		    parser.attribList.length = 0
		    emitNode(parser, 'onopentagstart', tag)
		  }

		  function qname (name, attribute) {
		    var i = name.indexOf(':')
		    var qualName = i < 0 ? [ '', name ] : name.split(':')
		    var prefix = qualName[0]
		    var local = qualName[1]

		    // <x "xmlns"="http://foo">
		    if (attribute && name === 'xmlns') {
		      prefix = 'xmlns'
		      local = ''
		    }

		    return { prefix: prefix, local: local }
		  }

		  function attrib (parser) {
		    if (!parser.strict) {
		      parser.attribName = parser.attribName[parser.looseCase]()
		    }

		    if (parser.attribList.indexOf(parser.attribName) !== -1 ||
		      parser.tag.attributes.hasOwnProperty(parser.attribName)) {
		      parser.attribName = parser.attribValue = ''
		      return
		    }

		    if (parser.opt.xmlns) {
		      var qn = qname(parser.attribName, true)
		      var prefix = qn.prefix
		      var local = qn.local

		      if (prefix === 'xmlns') {
		        // namespace binding attribute. push the binding into scope
		        if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {
		          strictFail(parser,
		            'xml: prefix must be bound to ' + XML_NAMESPACE + '\n' +
		            'Actual: ' + parser.attribValue)
		        } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {
		          strictFail(parser,
		            'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\n' +
		            'Actual: ' + parser.attribValue)
		        } else {
		          var tag = parser.tag
		          var parent = parser.tags[parser.tags.length - 1] || parser
		          if (tag.ns === parent.ns) {
		            tag.ns = Object.create(parent.ns)
		          }
		          tag.ns[local] = parser.attribValue
		        }
		      }

		      // defer onattribute events until all attributes have been seen
		      // so any new bindings can take effect. preserve attribute order
		      // so deferred events can be emitted in document order
		      parser.attribList.push([parser.attribName, parser.attribValue])
		    } else {
		      // in non-xmlns mode, we can emit the event right away
		      parser.tag.attributes[parser.attribName] = parser.attribValue
		      emitNode(parser, 'onattribute', {
		        name: parser.attribName,
		        value: parser.attribValue
		      })
		    }

		    parser.attribName = parser.attribValue = ''
		  }

		  function openTag (parser, selfClosing) {
		    if (parser.opt.xmlns) {
		      // emit namespace binding events
		      var tag = parser.tag

		      // add namespace info to tag
		      var qn = qname(parser.tagName)
		      tag.prefix = qn.prefix
		      tag.local = qn.local
		      tag.uri = tag.ns[qn.prefix] || ''

		      if (tag.prefix && !tag.uri) {
		        strictFail(parser, 'Unbound namespace prefix: ' +
		          JSON.stringify(parser.tagName))
		        tag.uri = qn.prefix
		      }

		      var parent = parser.tags[parser.tags.length - 1] || parser
		      if (tag.ns && parent.ns !== tag.ns) {
		        Object.keys(tag.ns).forEach(function (p) {
		          emitNode(parser, 'onopennamespace', {
		            prefix: p,
		            uri: tag.ns[p]
		          })
		        })
		      }

		      // handle deferred onattribute events
		      // Note: do not apply default ns to attributes:
		      //   http://www.w3.org/TR/REC-xml-names/#defaulting
		      for (var i = 0, l = parser.attribList.length; i < l; i++) {
		        var nv = parser.attribList[i]
		        var name = nv[0]
		        var value = nv[1]
		        var qualName = qname(name, true)
		        var prefix = qualName.prefix
		        var local = qualName.local
		        var uri = prefix === '' ? '' : (tag.ns[prefix] || '')
		        var a = {
		          name: name,
		          value: value,
		          prefix: prefix,
		          local: local,
		          uri: uri
		        }

		        // if there's any attributes with an undefined namespace,
		        // then fail on them now.
		        if (prefix && prefix !== 'xmlns' && !uri) {
		          strictFail(parser, 'Unbound namespace prefix: ' +
		            JSON.stringify(prefix))
		          a.uri = prefix
		        }
		        parser.tag.attributes[name] = a
		        emitNode(parser, 'onattribute', a)
		      }
		      parser.attribList.length = 0
		    }

		    parser.tag.isSelfClosing = !!selfClosing

		    // process the tag
		    parser.sawRoot = true
		    parser.tags.push(parser.tag)
		    emitNode(parser, 'onopentag', parser.tag)
		    if (!selfClosing) {
		      // special case for <script> in non-strict mode.
		      if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {
		        parser.state = S.SCRIPT
		      } else {
		        parser.state = S.TEXT
		      }
		      parser.tag = null
		      parser.tagName = ''
		    }
		    parser.attribName = parser.attribValue = ''
		    parser.attribList.length = 0
		  }

		  function closeTag (parser) {
		    if (!parser.tagName) {
		      strictFail(parser, 'Weird empty close tag.')
		      parser.textNode += '</>'
		      parser.state = S.TEXT
		      return
		    }

		    if (parser.script) {
		      if (parser.tagName !== 'script') {
		        parser.script += '</' + parser.tagName + '>'
		        parser.tagName = ''
		        parser.state = S.SCRIPT
		        return
		      }
		      emitNode(parser, 'onscript', parser.script)
		      parser.script = ''
		    }

		    // first make sure that the closing tag actually exists.
		    // <a><b></c></b></a> will close everything, otherwise.
		    var t = parser.tags.length
		    var tagName = parser.tagName
		    if (!parser.strict) {
		      tagName = tagName[parser.looseCase]()
		    }
		    var closeTo = tagName
		    while (t--) {
		      var close = parser.tags[t]
		      if (close.name !== closeTo) {
		        // fail the first time in strict mode
		        strictFail(parser, 'Unexpected close tag')
		      } else {
		        break
		      }
		    }

		    // didn't find it.  we already failed for strict, so just abort.
		    if (t < 0) {
		      strictFail(parser, 'Unmatched closing tag: ' + parser.tagName)
		      parser.textNode += '</' + parser.tagName + '>'
		      parser.state = S.TEXT
		      return
		    }
		    parser.tagName = tagName
		    var s = parser.tags.length
		    while (s-- > t) {
		      var tag = parser.tag = parser.tags.pop()
		      parser.tagName = parser.tag.name
		      emitNode(parser, 'onclosetag', parser.tagName)

		      var x = {}
		      for (var i in tag.ns) {
		        x[i] = tag.ns[i]
		      }

		      var parent = parser.tags[parser.tags.length - 1] || parser
		      if (parser.opt.xmlns && tag.ns !== parent.ns) {
		        // remove namespace bindings introduced by tag
		        Object.keys(tag.ns).forEach(function (p) {
		          var n = tag.ns[p]
		          emitNode(parser, 'onclosenamespace', { prefix: p, uri: n })
		        })
		      }
		    }
		    if (t === 0) parser.closedRoot = true
		    parser.tagName = parser.attribValue = parser.attribName = ''
		    parser.attribList.length = 0
		    parser.state = S.TEXT
		  }

		  function parseEntity (parser) {
		    var entity = parser.entity
		    var entityLC = entity.toLowerCase()
		    var num
		    var numStr = ''

		    if (parser.ENTITIES[entity]) {
		      return parser.ENTITIES[entity]
		    }
		    if (parser.ENTITIES[entityLC]) {
		      return parser.ENTITIES[entityLC]
		    }
		    entity = entityLC
		    if (entity.charAt(0) === '#') {
		      if (entity.charAt(1) === 'x') {
		        entity = entity.slice(2)
		        num = parseInt(entity, 16)
		        numStr = num.toString(16)
		      } else {
		        entity = entity.slice(1)
		        num = parseInt(entity, 10)
		        numStr = num.toString(10)
		      }
		    }
		    entity = entity.replace(/^0+/, '')
		    if (numStr.toLowerCase() !== entity) {
		      strictFail(parser, 'Invalid character entity')
		      return '&' + parser.entity + ';'
		    }

		    return String.fromCodePoint(num)
		  }

		  function beginWhiteSpace (parser, c) {
		    if (c === '<') {
		      parser.state = S.OPEN_WAKA
		      parser.startTagPosition = parser.position
		    } else if (not(whitespace, c)) {
		      // have to process this as a text node.
		      // weird, but happens.
		      strictFail(parser, 'Non-whitespace before first tag.')
		      parser.textNode = c
		      parser.state = S.TEXT
		    }
		  }

		  function charAt (chunk, i) {
		    var result = ''
		    if (i < chunk.length) {
		      result = chunk.charAt(i)
		    }
		    return result
		  }

		  function write (chunk) {
		    var parser = this
		    if (this.error) {
		      throw this.error
		    }
		    if (parser.closed) {
		      return error(parser,
		        'Cannot write after close. Assign an onready handler.')
		    }
		    if (chunk === null) {
		      return end(parser)
		    }
		    if (typeof chunk === 'object') {
		      chunk = chunk.toString()
		    }
		    var i = 0
		    var c = ''
		    while (true) {
		      c = charAt(chunk, i++)
		      parser.c = c
		      if (!c) {
		        break
		      }
		      if (parser.trackPosition) {
		        parser.position++
		        if (c === '\n') {
		          parser.line++
		          parser.column = 0
		        } else {
		          parser.column++
		        }
		      }
		      switch (parser.state) {
		        case S.BEGIN:
		          parser.state = S.BEGIN_WHITESPACE
		          if (c === '\uFEFF') {
		            continue
		          }
		          beginWhiteSpace(parser, c)
		          continue

		        case S.BEGIN_WHITESPACE:
		          beginWhiteSpace(parser, c)
		          continue

		        case S.TEXT:
		          if (parser.sawRoot && !parser.closedRoot) {
		            var starti = i - 1
		            while (c && c !== '<' && c !== '&') {
		              c = charAt(chunk, i++)
		              if (c && parser.trackPosition) {
		                parser.position++
		                if (c === '\n') {
		                  parser.line++
		                  parser.column = 0
		                } else {
		                  parser.column++
		                }
		              }
		            }
		            parser.textNode += chunk.substring(starti, i - 1)
		          }
		          if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {
		            parser.state = S.OPEN_WAKA
		            parser.startTagPosition = parser.position
		          } else {
		            if (not(whitespace, c) && (!parser.sawRoot || parser.closedRoot)) {
		              strictFail(parser, 'Text data outside of root node.')
		            }
		            if (c === '&') {
		              parser.state = S.TEXT_ENTITY
		            } else {
		              parser.textNode += c
		            }
		          }
		          continue

		        case S.SCRIPT:
		          // only non-strict
		          if (c === '<') {
		            parser.state = S.SCRIPT_ENDING
		          } else {
		            parser.script += c
		          }
		          continue

		        case S.SCRIPT_ENDING:
		          if (c === '/') {
		            parser.state = S.CLOSE_TAG
		          } else {
		            parser.script += '<' + c
		            parser.state = S.SCRIPT
		          }
		          continue

		        case S.OPEN_WAKA:
		          // either a /, ?, !, or text is coming next.
		          if (c === '!') {
		            parser.state = S.SGML_DECL
		            parser.sgmlDecl = ''
		          } else if (is(whitespace, c)) {
		            // wait for it...
		          } else if (is(nameStart, c)) {
		            parser.state = S.OPEN_TAG
		            parser.tagName = c
		          } else if (c === '/') {
		            parser.state = S.CLOSE_TAG
		            parser.tagName = ''
		          } else if (c === '?') {
		            parser.state = S.PROC_INST
		            parser.procInstName = parser.procInstBody = ''
		          } else {
		            strictFail(parser, 'Unencoded <')
		            // if there was some whitespace, then add that in.
		            if (parser.startTagPosition + 1 < parser.position) {
		              var pad = parser.position - parser.startTagPosition
		              c = new Array(pad).join(' ') + c
		            }
		            parser.textNode += '<' + c
		            parser.state = S.TEXT
		          }
		          continue

		        case S.SGML_DECL:
		          if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {
		            emitNode(parser, 'onopencdata')
		            parser.state = S.CDATA
		            parser.sgmlDecl = ''
		            parser.cdata = ''
		          } else if (parser.sgmlDecl + c === '--') {
		            parser.state = S.COMMENT
		            parser.comment = ''
		            parser.sgmlDecl = ''
		          } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {
		            parser.state = S.DOCTYPE
		            if (parser.doctype || parser.sawRoot) {
		              strictFail(parser,
		                'Inappropriately located doctype declaration')
		            }
		            parser.doctype = ''
		            parser.sgmlDecl = ''
		          } else if (c === '>') {
		            emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl)
		            parser.sgmlDecl = ''
		            parser.state = S.TEXT
		          } else if (is(quote, c)) {
		            parser.state = S.SGML_DECL_QUOTED
		            parser.sgmlDecl += c
		          } else {
		            parser.sgmlDecl += c
		          }
		          continue

		        case S.SGML_DECL_QUOTED:
		          if (c === parser.q) {
		            parser.state = S.SGML_DECL
		            parser.q = ''
		          }
		          parser.sgmlDecl += c
		          continue

		        case S.DOCTYPE:
		          if (c === '>') {
		            parser.state = S.TEXT
		            emitNode(parser, 'ondoctype', parser.doctype)
		            parser.doctype = true // just remember that we saw it.
		          } else {
		            parser.doctype += c
		            if (c === '[') {
		              parser.state = S.DOCTYPE_DTD
		            } else if (is(quote, c)) {
		              parser.state = S.DOCTYPE_QUOTED
		              parser.q = c
		            }
		          }
		          continue

		        case S.DOCTYPE_QUOTED:
		          parser.doctype += c
		          if (c === parser.q) {
		            parser.q = ''
		            parser.state = S.DOCTYPE
		          }
		          continue

		        case S.DOCTYPE_DTD:
		          parser.doctype += c
		          if (c === ']') {
		            parser.state = S.DOCTYPE
		          } else if (is(quote, c)) {
		            parser.state = S.DOCTYPE_DTD_QUOTED
		            parser.q = c
		          }
		          continue

		        case S.DOCTYPE_DTD_QUOTED:
		          parser.doctype += c
		          if (c === parser.q) {
		            parser.state = S.DOCTYPE_DTD
		            parser.q = ''
		          }
		          continue

		        case S.COMMENT:
		          if (c === '-') {
		            parser.state = S.COMMENT_ENDING
		          } else {
		            parser.comment += c
		          }
		          continue

		        case S.COMMENT_ENDING:
		          if (c === '-') {
		            parser.state = S.COMMENT_ENDED
		            parser.comment = textopts(parser.opt, parser.comment)
		            if (parser.comment) {
		              emitNode(parser, 'oncomment', parser.comment)
		            }
		            parser.comment = ''
		          } else {
		            parser.comment += '-' + c
		            parser.state = S.COMMENT
		          }
		          continue

		        case S.COMMENT_ENDED:
		          if (c !== '>') {
		            strictFail(parser, 'Malformed comment')
		            // allow <!-- blah -- bloo --> in non-strict mode,
		            // which is a comment of " blah -- bloo "
		            parser.comment += '--' + c
		            parser.state = S.COMMENT
		          } else {
		            parser.state = S.TEXT
		          }
		          continue

		        case S.CDATA:
		          if (c === ']') {
		            parser.state = S.CDATA_ENDING
		          } else {
		            parser.cdata += c
		          }
		          continue

		        case S.CDATA_ENDING:
		          if (c === ']') {
		            parser.state = S.CDATA_ENDING_2
		          } else {
		            parser.cdata += ']' + c
		            parser.state = S.CDATA
		          }
		          continue

		        case S.CDATA_ENDING_2:
		          if (c === '>') {
		            if (parser.cdata) {
		              emitNode(parser, 'oncdata', parser.cdata)
		            }
		            emitNode(parser, 'onclosecdata')
		            parser.cdata = ''
		            parser.state = S.TEXT
		          } else if (c === ']') {
		            parser.cdata += ']'
		          } else {
		            parser.cdata += ']]' + c
		            parser.state = S.CDATA
		          }
		          continue

		        case S.PROC_INST:
		          if (c === '?') {
		            parser.state = S.PROC_INST_ENDING
		          } else if (is(whitespace, c)) {
		            parser.state = S.PROC_INST_BODY
		          } else {
		            parser.procInstName += c
		          }
		          continue

		        case S.PROC_INST_BODY:
		          if (!parser.procInstBody && is(whitespace, c)) {
		            continue
		          } else if (c === '?') {
		            parser.state = S.PROC_INST_ENDING
		          } else {
		            parser.procInstBody += c
		          }
		          continue

		        case S.PROC_INST_ENDING:
		          if (c === '>') {
		            emitNode(parser, 'onprocessinginstruction', {
		              name: parser.procInstName,
		              body: parser.procInstBody
		            })
		            parser.procInstName = parser.procInstBody = ''
		            parser.state = S.TEXT
		          } else {
		            parser.procInstBody += '?' + c
		            parser.state = S.PROC_INST_BODY
		          }
		          continue

		        case S.OPEN_TAG:
		          if (is(nameBody, c)) {
		            parser.tagName += c
		          } else {
		            newTag(parser)
		            if (c === '>') {
		              openTag(parser)
		            } else if (c === '/') {
		              parser.state = S.OPEN_TAG_SLASH
		            } else {
		              if (not(whitespace, c)) {
		                strictFail(parser, 'Invalid character in tag name')
		              }
		              parser.state = S.ATTRIB
		            }
		          }
		          continue

		        case S.OPEN_TAG_SLASH:
		          if (c === '>') {
		            openTag(parser, true)
		            closeTag(parser)
		          } else {
		            strictFail(parser, 'Forward-slash in opening tag not followed by >')
		            parser.state = S.ATTRIB
		          }
		          continue

		        case S.ATTRIB:
		          // haven't read the attribute name yet.
		          if (is(whitespace, c)) {
		            continue
		          } else if (c === '>') {
		            openTag(parser)
		          } else if (c === '/') {
		            parser.state = S.OPEN_TAG_SLASH
		          } else if (is(nameStart, c)) {
		            parser.attribName = c
		            parser.attribValue = ''
		            parser.state = S.ATTRIB_NAME
		          } else {
		            strictFail(parser, 'Invalid attribute name')
		          }
		          continue

		        case S.ATTRIB_NAME:
		          if (c === '=') {
		            parser.state = S.ATTRIB_VALUE
		          } else if (c === '>') {
		            strictFail(parser, 'Attribute without value')
		            parser.attribValue = parser.attribName
		            attrib(parser)
		            openTag(parser)
		          } else if (is(whitespace, c)) {
		            parser.state = S.ATTRIB_NAME_SAW_WHITE
		          } else if (is(nameBody, c)) {
		            parser.attribName += c
		          } else {
		            strictFail(parser, 'Invalid attribute name')
		          }
		          continue

		        case S.ATTRIB_NAME_SAW_WHITE:
		          if (c === '=') {
		            parser.state = S.ATTRIB_VALUE
		          } else if (is(whitespace, c)) {
		            continue
		          } else {
		            strictFail(parser, 'Attribute without value')
		            parser.tag.attributes[parser.attribName] = ''
		            parser.attribValue = ''
		            emitNode(parser, 'onattribute', {
		              name: parser.attribName,
		              value: ''
		            })
		            parser.attribName = ''
		            if (c === '>') {
		              openTag(parser)
		            } else if (is(nameStart, c)) {
		              parser.attribName = c
		              parser.state = S.ATTRIB_NAME
		            } else {
		              strictFail(parser, 'Invalid attribute name')
		              parser.state = S.ATTRIB
		            }
		          }
		          continue

		        case S.ATTRIB_VALUE:
		          if (is(whitespace, c)) {
		            continue
		          } else if (is(quote, c)) {
		            parser.q = c
		            parser.state = S.ATTRIB_VALUE_QUOTED
		          } else {
		            strictFail(parser, 'Unquoted attribute value')
		            parser.state = S.ATTRIB_VALUE_UNQUOTED
		            parser.attribValue = c
		          }
		          continue

		        case S.ATTRIB_VALUE_QUOTED:
		          if (c !== parser.q) {
		            if (c === '&') {
		              parser.state = S.ATTRIB_VALUE_ENTITY_Q
		            } else {
		              parser.attribValue += c
		            }
		            continue
		          }
		          attrib(parser)
		          parser.q = ''
		          parser.state = S.ATTRIB_VALUE_CLOSED
		          continue

		        case S.ATTRIB_VALUE_CLOSED:
		          if (is(whitespace, c)) {
		            parser.state = S.ATTRIB
		          } else if (c === '>') {
		            openTag(parser)
		          } else if (c === '/') {
		            parser.state = S.OPEN_TAG_SLASH
		          } else if (is(nameStart, c)) {
		            strictFail(parser, 'No whitespace between attributes')
		            parser.attribName = c
		            parser.attribValue = ''
		            parser.state = S.ATTRIB_NAME
		          } else {
		            strictFail(parser, 'Invalid attribute name')
		          }
		          continue

		        case S.ATTRIB_VALUE_UNQUOTED:
		          if (not(attribEnd, c)) {
		            if (c === '&') {
		              parser.state = S.ATTRIB_VALUE_ENTITY_U
		            } else {
		              parser.attribValue += c
		            }
		            continue
		          }
		          attrib(parser)
		          if (c === '>') {
		            openTag(parser)
		          } else {
		            parser.state = S.ATTRIB
		          }
		          continue

		        case S.CLOSE_TAG:
		          if (!parser.tagName) {
		            if (is(whitespace, c)) {
		              continue
		            } else if (not(nameStart, c)) {
		              if (parser.script) {
		                parser.script += '</' + c
		                parser.state = S.SCRIPT
		              } else {
		                strictFail(parser, 'Invalid tagname in closing tag.')
		              }
		            } else {
		              parser.tagName = c
		            }
		          } else if (c === '>') {
		            closeTag(parser)
		          } else if (is(nameBody, c)) {
		            parser.tagName += c
		          } else if (parser.script) {
		            parser.script += '</' + parser.tagName
		            parser.tagName = ''
		            parser.state = S.SCRIPT
		          } else {
		            if (not(whitespace, c)) {
		              strictFail(parser, 'Invalid tagname in closing tag')
		            }
		            parser.state = S.CLOSE_TAG_SAW_WHITE
		          }
		          continue

		        case S.CLOSE_TAG_SAW_WHITE:
		          if (is(whitespace, c)) {
		            continue
		          }
		          if (c === '>') {
		            closeTag(parser)
		          } else {
		            strictFail(parser, 'Invalid characters in closing tag')
		          }
		          continue

		        case S.TEXT_ENTITY:
		        case S.ATTRIB_VALUE_ENTITY_Q:
		        case S.ATTRIB_VALUE_ENTITY_U:
		          var returnState
		          var buffer
		          switch (parser.state) {
		            case S.TEXT_ENTITY:
		              returnState = S.TEXT
		              buffer = 'textNode'
		              break

		            case S.ATTRIB_VALUE_ENTITY_Q:
		              returnState = S.ATTRIB_VALUE_QUOTED
		              buffer = 'attribValue'
		              break

		            case S.ATTRIB_VALUE_ENTITY_U:
		              returnState = S.ATTRIB_VALUE_UNQUOTED
		              buffer = 'attribValue'
		              break
		          }

		          if (c === ';') {
		            parser[buffer] += parseEntity(parser)
		            parser.entity = ''
		            parser.state = returnState
		          } else if (is(parser.entity.length ? entityBody : entityStart, c)) {
		            parser.entity += c
		          } else {
		            strictFail(parser, 'Invalid character in entity name')
		            parser[buffer] += '&' + parser.entity + c
		            parser.entity = ''
		            parser.state = returnState
		          }

		          continue

		        default:
		          throw new Error(parser, 'Unknown state: ' + parser.state)
		      }
		    } // while

		    if (parser.position >= parser.bufferCheckPosition) {
		      checkBufferLength(parser)
		    }
		    return parser
		  }

		  /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */
		  if (!String.fromCodePoint) {
		    (function () {
		      var stringFromCharCode = String.fromCharCode
		      var floor = Math.floor
		      var fromCodePoint = function () {
		        var MAX_SIZE = 0x4000
		        var codeUnits = []
		        var highSurrogate
		        var lowSurrogate
		        var index = -1
		        var length = arguments.length
		        if (!length) {
		          return ''
		        }
		        var result = ''
		        while (++index < length) {
		          var codePoint = Number(arguments[index])
		          if (
		            !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
		            codePoint < 0 || // not a valid Unicode code point
		            codePoint > 0x10FFFF || // not a valid Unicode code point
		            floor(codePoint) !== codePoint // not an integer
		          ) {
		            throw RangeError('Invalid code point: ' + codePoint)
		          }
		          if (codePoint <= 0xFFFF) { // BMP code point
		            codeUnits.push(codePoint)
		          } else { // Astral code point; split in surrogate halves
		            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
		            codePoint -= 0x10000
		            highSurrogate = (codePoint >> 10) + 0xD800
		            lowSurrogate = (codePoint % 0x400) + 0xDC00
		            codeUnits.push(highSurrogate, lowSurrogate)
		          }
		          if (index + 1 === length || codeUnits.length > MAX_SIZE) {
		            result += stringFromCharCode.apply(null, codeUnits)
		            codeUnits.length = 0
		          }
		        }
		        return result
		      }
		      if (Object.defineProperty) {
		        Object.defineProperty(String, 'fromCodePoint', {
		          value: fromCodePoint,
		          configurable: true,
		          writable: true
		        })
		      } else {
		        String.fromCodePoint = fromCodePoint
		      }
		    }())
		  }
		})( false ? this.sax = {} : exports)

		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28).Buffer))

	/***/ }),
	/* 28 */
	/***/ (function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(global) {/*!
		 * The buffer module from node.js, for the browser.
		 *
		 * @author   Feross Aboukhadijeh <http://feross.org>
		 * @license  MIT
		 */
		/* eslint-disable no-proto */

		'use strict'

		var base64 = __webpack_require__(29)
		var ieee754 = __webpack_require__(30)
		var isArray = __webpack_require__(31)

		exports.Buffer = Buffer
		exports.SlowBuffer = SlowBuffer
		exports.INSPECT_MAX_BYTES = 50

		/**
		 * If `Buffer.TYPED_ARRAY_SUPPORT`:
		 *   === true    Use Uint8Array implementation (fastest)
		 *   === false   Use Object implementation (most compatible, even IE6)
		 *
		 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
		 * Opera 11.6+, iOS 4.2+.
		 *
		 * Due to various browser bugs, sometimes the Object implementation will be used even
		 * when the browser supports typed arrays.
		 *
		 * Note:
		 *
		 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
		 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
		 *
		 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
		 *
		 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
		 *     incorrect length in some situations.

		 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
		 * get the Object implementation, which is slower but behaves correctly.
		 */
		Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
		  ? global.TYPED_ARRAY_SUPPORT
		  : typedArraySupport()

		/*
		 * Export kMaxLength after typed array support is determined.
		 */
		exports.kMaxLength = kMaxLength()

		function typedArraySupport () {
		  try {
		    var arr = new Uint8Array(1)
		    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
		    return arr.foo() === 42 && // typed array instances can be augmented
		        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
		        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
		  } catch (e) {
		    return false
		  }
		}

		function kMaxLength () {
		  return Buffer.TYPED_ARRAY_SUPPORT
		    ? 0x7fffffff
		    : 0x3fffffff
		}

		function createBuffer (that, length) {
		  if (kMaxLength() < length) {
		    throw new RangeError('Invalid typed array length')
		  }
		  if (Buffer.TYPED_ARRAY_SUPPORT) {
		    // Return an augmented `Uint8Array` instance, for best performance
		    that = new Uint8Array(length)
		    that.__proto__ = Buffer.prototype
		  } else {
		    // Fallback: Return an object instance of the Buffer class
		    if (that === null) {
		      that = new Buffer(length)
		    }
		    that.length = length
		  }

		  return that
		}

		/**
		 * The Buffer constructor returns instances of `Uint8Array` that have their
		 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
		 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
		 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
		 * returns a single octet.
		 *
		 * The `Uint8Array` prototype remains unmodified.
		 */

		function Buffer (arg, encodingOrOffset, length) {
		  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
		    return new Buffer(arg, encodingOrOffset, length)
		  }

		  // Common case.
		  if (typeof arg === 'number') {
		    if (typeof encodingOrOffset === 'string') {
		      throw new Error(
		        'If encoding is specified then the first argument must be a string'
		      )
		    }
		    return allocUnsafe(this, arg)
		  }
		  return from(this, arg, encodingOrOffset, length)
		}

		Buffer.poolSize = 8192 // not used by this implementation

		// TODO: Legacy, not needed anymore. Remove in next major version.
		Buffer._augment = function (arr) {
		  arr.__proto__ = Buffer.prototype
		  return arr
		}

		function from (that, value, encodingOrOffset, length) {
		  if (typeof value === 'number') {
		    throw new TypeError('"value" argument must not be a number')
		  }

		  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
		    return fromArrayBuffer(that, value, encodingOrOffset, length)
		  }

		  if (typeof value === 'string') {
		    return fromString(that, value, encodingOrOffset)
		  }

		  return fromObject(that, value)
		}

		/**
		 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
		 * if value is a number.
		 * Buffer.from(str[, encoding])
		 * Buffer.from(array)
		 * Buffer.from(buffer)
		 * Buffer.from(arrayBuffer[, byteOffset[, length]])
		 **/
		Buffer.from = function (value, encodingOrOffset, length) {
		  return from(null, value, encodingOrOffset, length)
		}

		if (Buffer.TYPED_ARRAY_SUPPORT) {
		  Buffer.prototype.__proto__ = Uint8Array.prototype
		  Buffer.__proto__ = Uint8Array
		  if (typeof Symbol !== 'undefined' && Symbol.species &&
		      Buffer[Symbol.species] === Buffer) {
		    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
		    Object.defineProperty(Buffer, Symbol.species, {
		      value: null,
		      configurable: true
		    })
		  }
		}

		function assertSize (size) {
		  if (typeof size !== 'number') {
		    throw new TypeError('"size" argument must be a number')
		  } else if (size < 0) {
		    throw new RangeError('"size" argument must not be negative')
		  }
		}

		function alloc (that, size, fill, encoding) {
		  assertSize(size)
		  if (size <= 0) {
		    return createBuffer(that, size)
		  }
		  if (fill !== undefined) {
		    // Only pay attention to encoding if it's a string. This
		    // prevents accidentally sending in a number that would
		    // be interpretted as a start offset.
		    return typeof encoding === 'string'
		      ? createBuffer(that, size).fill(fill, encoding)
		      : createBuffer(that, size).fill(fill)
		  }
		  return createBuffer(that, size)
		}

		/**
		 * Creates a new filled Buffer instance.
		 * alloc(size[, fill[, encoding]])
		 **/
		Buffer.alloc = function (size, fill, encoding) {
		  return alloc(null, size, fill, encoding)
		}

		function allocUnsafe (that, size) {
		  assertSize(size)
		  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
		  if (!Buffer.TYPED_ARRAY_SUPPORT) {
		    for (var i = 0; i < size; ++i) {
		      that[i] = 0
		    }
		  }
		  return that
		}

		/**
		 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
		 * */
		Buffer.allocUnsafe = function (size) {
		  return allocUnsafe(null, size)
		}
		/**
		 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
		 */
		Buffer.allocUnsafeSlow = function (size) {
		  return allocUnsafe(null, size)
		}

		function fromString (that, string, encoding) {
		  if (typeof encoding !== 'string' || encoding === '') {
		    encoding = 'utf8'
		  }

		  if (!Buffer.isEncoding(encoding)) {
		    throw new TypeError('"encoding" must be a valid string encoding')
		  }

		  var length = byteLength(string, encoding) | 0
		  that = createBuffer(that, length)

		  var actual = that.write(string, encoding)

		  if (actual !== length) {
		    // Writing a hex string, for example, that contains invalid characters will
		    // cause everything after the first invalid character to be ignored. (e.g.
		    // 'abxxcd' will be treated as 'ab')
		    that = that.slice(0, actual)
		  }

		  return that
		}

		function fromArrayLike (that, array) {
		  var length = array.length < 0 ? 0 : checked(array.length) | 0
		  that = createBuffer(that, length)
		  for (var i = 0; i < length; i += 1) {
		    that[i] = array[i] & 255
		  }
		  return that
		}

		function fromArrayBuffer (that, array, byteOffset, length) {
		  array.byteLength // this throws if `array` is not a valid ArrayBuffer

		  if (byteOffset < 0 || array.byteLength < byteOffset) {
		    throw new RangeError('\'offset\' is out of bounds')
		  }

		  if (array.byteLength < byteOffset + (length || 0)) {
		    throw new RangeError('\'length\' is out of bounds')
		  }

		  if (byteOffset === undefined && length === undefined) {
		    array = new Uint8Array(array)
		  } else if (length === undefined) {
		    array = new Uint8Array(array, byteOffset)
		  } else {
		    array = new Uint8Array(array, byteOffset, length)
		  }

		  if (Buffer.TYPED_ARRAY_SUPPORT) {
		    // Return an augmented `Uint8Array` instance, for best performance
		    that = array
		    that.__proto__ = Buffer.prototype
		  } else {
		    // Fallback: Return an object instance of the Buffer class
		    that = fromArrayLike(that, array)
		  }
		  return that
		}

		function fromObject (that, obj) {
		  if (Buffer.isBuffer(obj)) {
		    var len = checked(obj.length) | 0
		    that = createBuffer(that, len)

		    if (that.length === 0) {
		      return that
		    }

		    obj.copy(that, 0, 0, len)
		    return that
		  }

		  if (obj) {
		    if ((typeof ArrayBuffer !== 'undefined' &&
		        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
		      if (typeof obj.length !== 'number' || isnan(obj.length)) {
		        return createBuffer(that, 0)
		      }
		      return fromArrayLike(that, obj)
		    }

		    if (obj.type === 'Buffer' && isArray(obj.data)) {
		      return fromArrayLike(that, obj.data)
		    }
		  }

		  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
		}

		function checked (length) {
		  // Note: cannot use `length < kMaxLength()` here because that fails when
		  // length is NaN (which is otherwise coerced to zero.)
		  if (length >= kMaxLength()) {
		    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
		                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
		  }
		  return length | 0
		}

		function SlowBuffer (length) {
		  if (+length != length) { // eslint-disable-line eqeqeq
		    length = 0
		  }
		  return Buffer.alloc(+length)
		}

		Buffer.isBuffer = function isBuffer (b) {
		  return !!(b != null && b._isBuffer)
		}

		Buffer.compare = function compare (a, b) {
		  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
		    throw new TypeError('Arguments must be Buffers')
		  }

		  if (a === b) return 0

		  var x = a.length
		  var y = b.length

		  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
		    if (a[i] !== b[i]) {
		      x = a[i]
		      y = b[i]
		      break
		    }
		  }

		  if (x < y) return -1
		  if (y < x) return 1
		  return 0
		}

		Buffer.isEncoding = function isEncoding (encoding) {
		  switch (String(encoding).toLowerCase()) {
		    case 'hex':
		    case 'utf8':
		    case 'utf-8':
		    case 'ascii':
		    case 'latin1':
		    case 'binary':
		    case 'base64':
		    case 'ucs2':
		    case 'ucs-2':
		    case 'utf16le':
		    case 'utf-16le':
		      return true
		    default:
		      return false
		  }
		}

		Buffer.concat = function concat (list, length) {
		  if (!isArray(list)) {
		    throw new TypeError('"list" argument must be an Array of Buffers')
		  }

		  if (list.length === 0) {
		    return Buffer.alloc(0)
		  }

		  var i
		  if (length === undefined) {
		    length = 0
		    for (i = 0; i < list.length; ++i) {
		      length += list[i].length
		    }
		  }

		  var buffer = Buffer.allocUnsafe(length)
		  var pos = 0
		  for (i = 0; i < list.length; ++i) {
		    var buf = list[i]
		    if (!Buffer.isBuffer(buf)) {
		      throw new TypeError('"list" argument must be an Array of Buffers')
		    }
		    buf.copy(buffer, pos)
		    pos += buf.length
		  }
		  return buffer
		}

		function byteLength (string, encoding) {
		  if (Buffer.isBuffer(string)) {
		    return string.length
		  }
		  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
		      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
		    return string.byteLength
		  }
		  if (typeof string !== 'string') {
		    string = '' + string
		  }

		  var len = string.length
		  if (len === 0) return 0

		  // Use a for loop to avoid recursion
		  var loweredCase = false
		  for (;;) {
		    switch (encoding) {
		      case 'ascii':
		      case 'latin1':
		      case 'binary':
		        return len
		      case 'utf8':
		      case 'utf-8':
		      case undefined:
		        return utf8ToBytes(string).length
		      case 'ucs2':
		      case 'ucs-2':
		      case 'utf16le':
		      case 'utf-16le':
		        return len * 2
		      case 'hex':
		        return len >>> 1
		      case 'base64':
		        return base64ToBytes(string).length
		      default:
		        if (loweredCase) return utf8ToBytes(string).length // assume utf8
		        encoding = ('' + encoding).toLowerCase()
		        loweredCase = true
		    }
		  }
		}
		Buffer.byteLength = byteLength

		function slowToString (encoding, start, end) {
		  var loweredCase = false

		  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
		  // property of a typed array.

		  // This behaves neither like String nor Uint8Array in that we set start/end
		  // to their upper/lower bounds if the value passed is out of range.
		  // undefined is handled specially as per ECMA-262 6th Edition,
		  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
		  if (start === undefined || start < 0) {
		    start = 0
		  }
		  // Return early if start > this.length. Done here to prevent potential uint32
		  // coercion fail below.
		  if (start > this.length) {
		    return ''
		  }

		  if (end === undefined || end > this.length) {
		    end = this.length
		  }

		  if (end <= 0) {
		    return ''
		  }

		  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
		  end >>>= 0
		  start >>>= 0

		  if (end <= start) {
		    return ''
		  }

		  if (!encoding) encoding = 'utf8'

		  while (true) {
		    switch (encoding) {
		      case 'hex':
		        return hexSlice(this, start, end)

		      case 'utf8':
		      case 'utf-8':
		        return utf8Slice(this, start, end)

		      case 'ascii':
		        return asciiSlice(this, start, end)

		      case 'latin1':
		      case 'binary':
		        return latin1Slice(this, start, end)

		      case 'base64':
		        return base64Slice(this, start, end)

		      case 'ucs2':
		      case 'ucs-2':
		      case 'utf16le':
		      case 'utf-16le':
		        return utf16leSlice(this, start, end)

		      default:
		        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
		        encoding = (encoding + '').toLowerCase()
		        loweredCase = true
		    }
		  }
		}

		// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
		// Buffer instances.
		Buffer.prototype._isBuffer = true

		function swap (b, n, m) {
		  var i = b[n]
		  b[n] = b[m]
		  b[m] = i
		}

		Buffer.prototype.swap16 = function swap16 () {
		  var len = this.length
		  if (len % 2 !== 0) {
		    throw new RangeError('Buffer size must be a multiple of 16-bits')
		  }
		  for (var i = 0; i < len; i += 2) {
		    swap(this, i, i + 1)
		  }
		  return this
		}

		Buffer.prototype.swap32 = function swap32 () {
		  var len = this.length
		  if (len % 4 !== 0) {
		    throw new RangeError('Buffer size must be a multiple of 32-bits')
		  }
		  for (var i = 0; i < len; i += 4) {
		    swap(this, i, i + 3)
		    swap(this, i + 1, i + 2)
		  }
		  return this
		}

		Buffer.prototype.swap64 = function swap64 () {
		  var len = this.length
		  if (len % 8 !== 0) {
		    throw new RangeError('Buffer size must be a multiple of 64-bits')
		  }
		  for (var i = 0; i < len; i += 8) {
		    swap(this, i, i + 7)
		    swap(this, i + 1, i + 6)
		    swap(this, i + 2, i + 5)
		    swap(this, i + 3, i + 4)
		  }
		  return this
		}

		Buffer.prototype.toString = function toString () {
		  var length = this.length | 0
		  if (length === 0) return ''
		  if (arguments.length === 0) return utf8Slice(this, 0, length)
		  return slowToString.apply(this, arguments)
		}

		Buffer.prototype.equals = function equals (b) {
		  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
		  if (this === b) return true
		  return Buffer.compare(this, b) === 0
		}

		Buffer.prototype.inspect = function inspect () {
		  var str = ''
		  var max = exports.INSPECT_MAX_BYTES
		  if (this.length > 0) {
		    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
		    if (this.length > max) str += ' ... '
		  }
		  return '<Buffer ' + str + '>'
		}

		Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
		  if (!Buffer.isBuffer(target)) {
		    throw new TypeError('Argument must be a Buffer')
		  }

		  if (start === undefined) {
		    start = 0
		  }
		  if (end === undefined) {
		    end = target ? target.length : 0
		  }
		  if (thisStart === undefined) {
		    thisStart = 0
		  }
		  if (thisEnd === undefined) {
		    thisEnd = this.length
		  }

		  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
		    throw new RangeError('out of range index')
		  }

		  if (thisStart >= thisEnd && start >= end) {
		    return 0
		  }
		  if (thisStart >= thisEnd) {
		    return -1
		  }
		  if (start >= end) {
		    return 1
		  }

		  start >>>= 0
		  end >>>= 0
		  thisStart >>>= 0
		  thisEnd >>>= 0

		  if (this === target) return 0

		  var x = thisEnd - thisStart
		  var y = end - start
		  var len = Math.min(x, y)

		  var thisCopy = this.slice(thisStart, thisEnd)
		  var targetCopy = target.slice(start, end)

		  for (var i = 0; i < len; ++i) {
		    if (thisCopy[i] !== targetCopy[i]) {
		      x = thisCopy[i]
		      y = targetCopy[i]
		      break
		    }
		  }

		  if (x < y) return -1
		  if (y < x) return 1
		  return 0
		}

		// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
		// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
		//
		// Arguments:
		// - buffer - a Buffer to search
		// - val - a string, Buffer, or number
		// - byteOffset - an index into `buffer`; will be clamped to an int32
		// - encoding - an optional encoding, relevant is val is a string
		// - dir - true for indexOf, false for lastIndexOf
		function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
		  // Empty buffer means no match
		  if (buffer.length === 0) return -1

		  // Normalize byteOffset
		  if (typeof byteOffset === 'string') {
		    encoding = byteOffset
		    byteOffset = 0
		  } else if (byteOffset > 0x7fffffff) {
		    byteOffset = 0x7fffffff
		  } else if (byteOffset < -0x80000000) {
		    byteOffset = -0x80000000
		  }
		  byteOffset = +byteOffset  // Coerce to Number.
		  if (isNaN(byteOffset)) {
		    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
		    byteOffset = dir ? 0 : (buffer.length - 1)
		  }

		  // Normalize byteOffset: negative offsets start from the end of the buffer
		  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
		  if (byteOffset >= buffer.length) {
		    if (dir) return -1
		    else byteOffset = buffer.length - 1
		  } else if (byteOffset < 0) {
		    if (dir) byteOffset = 0
		    else return -1
		  }

		  // Normalize val
		  if (typeof val === 'string') {
		    val = Buffer.from(val, encoding)
		  }

		  // Finally, search either indexOf (if dir is true) or lastIndexOf
		  if (Buffer.isBuffer(val)) {
		    // Special case: looking for empty string/buffer always fails
		    if (val.length === 0) {
		      return -1
		    }
		    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
		  } else if (typeof val === 'number') {
		    val = val & 0xFF // Search for a byte value [0-255]
		    if (Buffer.TYPED_ARRAY_SUPPORT &&
		        typeof Uint8Array.prototype.indexOf === 'function') {
		      if (dir) {
		        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
		      } else {
		        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
		      }
		    }
		    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
		  }

		  throw new TypeError('val must be string, number or Buffer')
		}

		function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
		  var indexSize = 1
		  var arrLength = arr.length
		  var valLength = val.length

		  if (encoding !== undefined) {
		    encoding = String(encoding).toLowerCase()
		    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
		        encoding === 'utf16le' || encoding === 'utf-16le') {
		      if (arr.length < 2 || val.length < 2) {
		        return -1
		      }
		      indexSize = 2
		      arrLength /= 2
		      valLength /= 2
		      byteOffset /= 2
		    }
		  }

		  function read (buf, i) {
		    if (indexSize === 1) {
		      return buf[i]
		    } else {
		      return buf.readUInt16BE(i * indexSize)
		    }
		  }

		  var i
		  if (dir) {
		    var foundIndex = -1
		    for (i = byteOffset; i < arrLength; i++) {
		      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
		        if (foundIndex === -1) foundIndex = i
		        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
		      } else {
		        if (foundIndex !== -1) i -= i - foundIndex
		        foundIndex = -1
		      }
		    }
		  } else {
		    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
		    for (i = byteOffset; i >= 0; i--) {
		      var found = true
		      for (var j = 0; j < valLength; j++) {
		        if (read(arr, i + j) !== read(val, j)) {
		          found = false
		          break
		        }
		      }
		      if (found) return i
		    }
		  }

		  return -1
		}

		Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
		  return this.indexOf(val, byteOffset, encoding) !== -1
		}

		Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
		  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
		}

		Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
		  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
		}

		function hexWrite (buf, string, offset, length) {
		  offset = Number(offset) || 0
		  var remaining = buf.length - offset
		  if (!length) {
		    length = remaining
		  } else {
		    length = Number(length)
		    if (length > remaining) {
		      length = remaining
		    }
		  }

		  // must be an even number of digits
		  var strLen = string.length
		  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

		  if (length > strLen / 2) {
		    length = strLen / 2
		  }
		  for (var i = 0; i < length; ++i) {
		    var parsed = parseInt(string.substr(i * 2, 2), 16)
		    if (isNaN(parsed)) return i
		    buf[offset + i] = parsed
		  }
		  return i
		}

		function utf8Write (buf, string, offset, length) {
		  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
		}

		function asciiWrite (buf, string, offset, length) {
		  return blitBuffer(asciiToBytes(string), buf, offset, length)
		}

		function latin1Write (buf, string, offset, length) {
		  return asciiWrite(buf, string, offset, length)
		}

		function base64Write (buf, string, offset, length) {
		  return blitBuffer(base64ToBytes(string), buf, offset, length)
		}

		function ucs2Write (buf, string, offset, length) {
		  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
		}

		Buffer.prototype.write = function write (string, offset, length, encoding) {
		  // Buffer#write(string)
		  if (offset === undefined) {
		    encoding = 'utf8'
		    length = this.length
		    offset = 0
		  // Buffer#write(string, encoding)
		  } else if (length === undefined && typeof offset === 'string') {
		    encoding = offset
		    length = this.length
		    offset = 0
		  // Buffer#write(string, offset[, length][, encoding])
		  } else if (isFinite(offset)) {
		    offset = offset | 0
		    if (isFinite(length)) {
		      length = length | 0
		      if (encoding === undefined) encoding = 'utf8'
		    } else {
		      encoding = length
		      length = undefined
		    }
		  // legacy write(string, encoding, offset, length) - remove in v0.13
		  } else {
		    throw new Error(
		      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
		    )
		  }

		  var remaining = this.length - offset
		  if (length === undefined || length > remaining) length = remaining

		  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
		    throw new RangeError('Attempt to write outside buffer bounds')
		  }

		  if (!encoding) encoding = 'utf8'

		  var loweredCase = false
		  for (;;) {
		    switch (encoding) {
		      case 'hex':
		        return hexWrite(this, string, offset, length)

		      case 'utf8':
		      case 'utf-8':
		        return utf8Write(this, string, offset, length)

		      case 'ascii':
		        return asciiWrite(this, string, offset, length)

		      case 'latin1':
		      case 'binary':
		        return latin1Write(this, string, offset, length)

		      case 'base64':
		        // Warning: maxLength not taken into account in base64Write
		        return base64Write(this, string, offset, length)

		      case 'ucs2':
		      case 'ucs-2':
		      case 'utf16le':
		      case 'utf-16le':
		        return ucs2Write(this, string, offset, length)

		      default:
		        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
		        encoding = ('' + encoding).toLowerCase()
		        loweredCase = true
		    }
		  }
		}

		Buffer.prototype.toJSON = function toJSON () {
		  return {
		    type: 'Buffer',
		    data: Array.prototype.slice.call(this._arr || this, 0)
		  }
		}

		function base64Slice (buf, start, end) {
		  if (start === 0 && end === buf.length) {
		    return base64.fromByteArray(buf)
		  } else {
		    return base64.fromByteArray(buf.slice(start, end))
		  }
		}

		function utf8Slice (buf, start, end) {
		  end = Math.min(buf.length, end)
		  var res = []

		  var i = start
		  while (i < end) {
		    var firstByte = buf[i]
		    var codePoint = null
		    var bytesPerSequence = (firstByte > 0xEF) ? 4
		      : (firstByte > 0xDF) ? 3
		      : (firstByte > 0xBF) ? 2
		      : 1

		    if (i + bytesPerSequence <= end) {
		      var secondByte, thirdByte, fourthByte, tempCodePoint

		      switch (bytesPerSequence) {
		        case 1:
		          if (firstByte < 0x80) {
		            codePoint = firstByte
		          }
		          break
		        case 2:
		          secondByte = buf[i + 1]
		          if ((secondByte & 0xC0) === 0x80) {
		            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
		            if (tempCodePoint > 0x7F) {
		              codePoint = tempCodePoint
		            }
		          }
		          break
		        case 3:
		          secondByte = buf[i + 1]
		          thirdByte = buf[i + 2]
		          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
		            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
		            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
		              codePoint = tempCodePoint
		            }
		          }
		          break
		        case 4:
		          secondByte = buf[i + 1]
		          thirdByte = buf[i + 2]
		          fourthByte = buf[i + 3]
		          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
		            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
		            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
		              codePoint = tempCodePoint
		            }
		          }
		      }
		    }

		    if (codePoint === null) {
		      // we did not generate a valid codePoint so insert a
		      // replacement char (U+FFFD) and advance only 1 byte
		      codePoint = 0xFFFD
		      bytesPerSequence = 1
		    } else if (codePoint > 0xFFFF) {
		      // encode to utf16 (surrogate pair dance)
		      codePoint -= 0x10000
		      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
		      codePoint = 0xDC00 | codePoint & 0x3FF
		    }

		    res.push(codePoint)
		    i += bytesPerSequence
		  }

		  return decodeCodePointsArray(res)
		}

		// Based on http://stackoverflow.com/a/22747272/680742, the browser with
		// the lowest limit is Chrome, with 0x10000 args.
		// We go 1 magnitude less, for safety
		var MAX_ARGUMENTS_LENGTH = 0x1000

		function decodeCodePointsArray (codePoints) {
		  var len = codePoints.length
		  if (len <= MAX_ARGUMENTS_LENGTH) {
		    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
		  }

		  // Decode in chunks to avoid "call stack size exceeded".
		  var res = ''
		  var i = 0
		  while (i < len) {
		    res += String.fromCharCode.apply(
		      String,
		      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
		    )
		  }
		  return res
		}

		function asciiSlice (buf, start, end) {
		  var ret = ''
		  end = Math.min(buf.length, end)

		  for (var i = start; i < end; ++i) {
		    ret += String.fromCharCode(buf[i] & 0x7F)
		  }
		  return ret
		}

		function latin1Slice (buf, start, end) {
		  var ret = ''
		  end = Math.min(buf.length, end)

		  for (var i = start; i < end; ++i) {
		    ret += String.fromCharCode(buf[i])
		  }
		  return ret
		}

		function hexSlice (buf, start, end) {
		  var len = buf.length

		  if (!start || start < 0) start = 0
		  if (!end || end < 0 || end > len) end = len

		  var out = ''
		  for (var i = start; i < end; ++i) {
		    out += toHex(buf[i])
		  }
		  return out
		}

		function utf16leSlice (buf, start, end) {
		  var bytes = buf.slice(start, end)
		  var res = ''
		  for (var i = 0; i < bytes.length; i += 2) {
		    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
		  }
		  return res
		}

		Buffer.prototype.slice = function slice (start, end) {
		  var len = this.length
		  start = ~~start
		  end = end === undefined ? len : ~~end

		  if (start < 0) {
		    start += len
		    if (start < 0) start = 0
		  } else if (start > len) {
		    start = len
		  }

		  if (end < 0) {
		    end += len
		    if (end < 0) end = 0
		  } else if (end > len) {
		    end = len
		  }

		  if (end < start) end = start

		  var newBuf
		  if (Buffer.TYPED_ARRAY_SUPPORT) {
		    newBuf = this.subarray(start, end)
		    newBuf.__proto__ = Buffer.prototype
		  } else {
		    var sliceLen = end - start
		    newBuf = new Buffer(sliceLen, undefined)
		    for (var i = 0; i < sliceLen; ++i) {
		      newBuf[i] = this[i + start]
		    }
		  }

		  return newBuf
		}

		/*
		 * Need to make sure that buffer isn't trying to write out of bounds.
		 */
		function checkOffset (offset, ext, length) {
		  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
		  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
		}

		Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
		  offset = offset | 0
		  byteLength = byteLength | 0
		  if (!noAssert) checkOffset(offset, byteLength, this.length)

		  var val = this[offset]
		  var mul = 1
		  var i = 0
		  while (++i < byteLength && (mul *= 0x100)) {
		    val += this[offset + i] * mul
		  }

		  return val
		}

		Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
		  offset = offset | 0
		  byteLength = byteLength | 0
		  if (!noAssert) {
		    checkOffset(offset, byteLength, this.length)
		  }

		  var val = this[offset + --byteLength]
		  var mul = 1
		  while (byteLength > 0 && (mul *= 0x100)) {
		    val += this[offset + --byteLength] * mul
		  }

		  return val
		}

		Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 1, this.length)
		  return this[offset]
		}

		Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 2, this.length)
		  return this[offset] | (this[offset + 1] << 8)
		}

		Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 2, this.length)
		  return (this[offset] << 8) | this[offset + 1]
		}

		Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 4, this.length)

		  return ((this[offset]) |
		      (this[offset + 1] << 8) |
		      (this[offset + 2] << 16)) +
		      (this[offset + 3] * 0x1000000)
		}

		Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 4, this.length)

		  return (this[offset] * 0x1000000) +
		    ((this[offset + 1] << 16) |
		    (this[offset + 2] << 8) |
		    this[offset + 3])
		}

		Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
		  offset = offset | 0
		  byteLength = byteLength | 0
		  if (!noAssert) checkOffset(offset, byteLength, this.length)

		  var val = this[offset]
		  var mul = 1
		  var i = 0
		  while (++i < byteLength && (mul *= 0x100)) {
		    val += this[offset + i] * mul
		  }
		  mul *= 0x80

		  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

		  return val
		}

		Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
		  offset = offset | 0
		  byteLength = byteLength | 0
		  if (!noAssert) checkOffset(offset, byteLength, this.length)

		  var i = byteLength
		  var mul = 1
		  var val = this[offset + --i]
		  while (i > 0 && (mul *= 0x100)) {
		    val += this[offset + --i] * mul
		  }
		  mul *= 0x80

		  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

		  return val
		}

		Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 1, this.length)
		  if (!(this[offset] & 0x80)) return (this[offset])
		  return ((0xff - this[offset] + 1) * -1)
		}

		Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 2, this.length)
		  var val = this[offset] | (this[offset + 1] << 8)
		  return (val & 0x8000) ? val | 0xFFFF0000 : val
		}

		Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 2, this.length)
		  var val = this[offset + 1] | (this[offset] << 8)
		  return (val & 0x8000) ? val | 0xFFFF0000 : val
		}

		Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 4, this.length)

		  return (this[offset]) |
		    (this[offset + 1] << 8) |
		    (this[offset + 2] << 16) |
		    (this[offset + 3] << 24)
		}

		Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 4, this.length)

		  return (this[offset] << 24) |
		    (this[offset + 1] << 16) |
		    (this[offset + 2] << 8) |
		    (this[offset + 3])
		}

		Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 4, this.length)
		  return ieee754.read(this, offset, true, 23, 4)
		}

		Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 4, this.length)
		  return ieee754.read(this, offset, false, 23, 4)
		}

		Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 8, this.length)
		  return ieee754.read(this, offset, true, 52, 8)
		}

		Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 8, this.length)
		  return ieee754.read(this, offset, false, 52, 8)
		}

		function checkInt (buf, value, offset, ext, max, min) {
		  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
		  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
		  if (offset + ext > buf.length) throw new RangeError('Index out of range')
		}

		Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
		  value = +value
		  offset = offset | 0
		  byteLength = byteLength | 0
		  if (!noAssert) {
		    var maxBytes = Math.pow(2, 8 * byteLength) - 1
		    checkInt(this, value, offset, byteLength, maxBytes, 0)
		  }

		  var mul = 1
		  var i = 0
		  this[offset] = value & 0xFF
		  while (++i < byteLength && (mul *= 0x100)) {
		    this[offset + i] = (value / mul) & 0xFF
		  }

		  return offset + byteLength
		}

		Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
		  value = +value
		  offset = offset | 0
		  byteLength = byteLength | 0
		  if (!noAssert) {
		    var maxBytes = Math.pow(2, 8 * byteLength) - 1
		    checkInt(this, value, offset, byteLength, maxBytes, 0)
		  }

		  var i = byteLength - 1
		  var mul = 1
		  this[offset + i] = value & 0xFF
		  while (--i >= 0 && (mul *= 0x100)) {
		    this[offset + i] = (value / mul) & 0xFF
		  }

		  return offset + byteLength
		}

		Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
		  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
		  this[offset] = (value & 0xff)
		  return offset + 1
		}

		function objectWriteUInt16 (buf, value, offset, littleEndian) {
		  if (value < 0) value = 0xffff + value + 1
		  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
		    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
		      (littleEndian ? i : 1 - i) * 8
		  }
		}

		Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
		  if (Buffer.TYPED_ARRAY_SUPPORT) {
		    this[offset] = (value & 0xff)
		    this[offset + 1] = (value >>> 8)
		  } else {
		    objectWriteUInt16(this, value, offset, true)
		  }
		  return offset + 2
		}

		Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
		  if (Buffer.TYPED_ARRAY_SUPPORT) {
		    this[offset] = (value >>> 8)
		    this[offset + 1] = (value & 0xff)
		  } else {
		    objectWriteUInt16(this, value, offset, false)
		  }
		  return offset + 2
		}

		function objectWriteUInt32 (buf, value, offset, littleEndian) {
		  if (value < 0) value = 0xffffffff + value + 1
		  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
		    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
		  }
		}

		Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
		  if (Buffer.TYPED_ARRAY_SUPPORT) {
		    this[offset + 3] = (value >>> 24)
		    this[offset + 2] = (value >>> 16)
		    this[offset + 1] = (value >>> 8)
		    this[offset] = (value & 0xff)
		  } else {
		    objectWriteUInt32(this, value, offset, true)
		  }
		  return offset + 4
		}

		Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
		  if (Buffer.TYPED_ARRAY_SUPPORT) {
		    this[offset] = (value >>> 24)
		    this[offset + 1] = (value >>> 16)
		    this[offset + 2] = (value >>> 8)
		    this[offset + 3] = (value & 0xff)
		  } else {
		    objectWriteUInt32(this, value, offset, false)
		  }
		  return offset + 4
		}

		Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) {
		    var limit = Math.pow(2, 8 * byteLength - 1)

		    checkInt(this, value, offset, byteLength, limit - 1, -limit)
		  }

		  var i = 0
		  var mul = 1
		  var sub = 0
		  this[offset] = value & 0xFF
		  while (++i < byteLength && (mul *= 0x100)) {
		    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
		      sub = 1
		    }
		    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
		  }

		  return offset + byteLength
		}

		Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) {
		    var limit = Math.pow(2, 8 * byteLength - 1)

		    checkInt(this, value, offset, byteLength, limit - 1, -limit)
		  }

		  var i = byteLength - 1
		  var mul = 1
		  var sub = 0
		  this[offset + i] = value & 0xFF
		  while (--i >= 0 && (mul *= 0x100)) {
		    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
		      sub = 1
		    }
		    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
		  }

		  return offset + byteLength
		}

		Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
		  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
		  if (value < 0) value = 0xff + value + 1
		  this[offset] = (value & 0xff)
		  return offset + 1
		}

		Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
		  if (Buffer.TYPED_ARRAY_SUPPORT) {
		    this[offset] = (value & 0xff)
		    this[offset + 1] = (value >>> 8)
		  } else {
		    objectWriteUInt16(this, value, offset, true)
		  }
		  return offset + 2
		}

		Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
		  if (Buffer.TYPED_ARRAY_SUPPORT) {
		    this[offset] = (value >>> 8)
		    this[offset + 1] = (value & 0xff)
		  } else {
		    objectWriteUInt16(this, value, offset, false)
		  }
		  return offset + 2
		}

		Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
		  if (Buffer.TYPED_ARRAY_SUPPORT) {
		    this[offset] = (value & 0xff)
		    this[offset + 1] = (value >>> 8)
		    this[offset + 2] = (value >>> 16)
		    this[offset + 3] = (value >>> 24)
		  } else {
		    objectWriteUInt32(this, value, offset, true)
		  }
		  return offset + 4
		}

		Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
		  if (value < 0) value = 0xffffffff + value + 1
		  if (Buffer.TYPED_ARRAY_SUPPORT) {
		    this[offset] = (value >>> 24)
		    this[offset + 1] = (value >>> 16)
		    this[offset + 2] = (value >>> 8)
		    this[offset + 3] = (value & 0xff)
		  } else {
		    objectWriteUInt32(this, value, offset, false)
		  }
		  return offset + 4
		}

		function checkIEEE754 (buf, value, offset, ext, max, min) {
		  if (offset + ext > buf.length) throw new RangeError('Index out of range')
		  if (offset < 0) throw new RangeError('Index out of range')
		}

		function writeFloat (buf, value, offset, littleEndian, noAssert) {
		  if (!noAssert) {
		    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
		  }
		  ieee754.write(buf, value, offset, littleEndian, 23, 4)
		  return offset + 4
		}

		Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
		  return writeFloat(this, value, offset, true, noAssert)
		}

		Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
		  return writeFloat(this, value, offset, false, noAssert)
		}

		function writeDouble (buf, value, offset, littleEndian, noAssert) {
		  if (!noAssert) {
		    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
		  }
		  ieee754.write(buf, value, offset, littleEndian, 52, 8)
		  return offset + 8
		}

		Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
		  return writeDouble(this, value, offset, true, noAssert)
		}

		Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
		  return writeDouble(this, value, offset, false, noAssert)
		}

		// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
		Buffer.prototype.copy = function copy (target, targetStart, start, end) {
		  if (!start) start = 0
		  if (!end && end !== 0) end = this.length
		  if (targetStart >= target.length) targetStart = target.length
		  if (!targetStart) targetStart = 0
		  if (end > 0 && end < start) end = start

		  // Copy 0 bytes; we're done
		  if (end === start) return 0
		  if (target.length === 0 || this.length === 0) return 0

		  // Fatal error conditions
		  if (targetStart < 0) {
		    throw new RangeError('targetStart out of bounds')
		  }
		  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
		  if (end < 0) throw new RangeError('sourceEnd out of bounds')

		  // Are we oob?
		  if (end > this.length) end = this.length
		  if (target.length - targetStart < end - start) {
		    end = target.length - targetStart + start
		  }

		  var len = end - start
		  var i

		  if (this === target && start < targetStart && targetStart < end) {
		    // descending copy from end
		    for (i = len - 1; i >= 0; --i) {
		      target[i + targetStart] = this[i + start]
		    }
		  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
		    // ascending copy from start
		    for (i = 0; i < len; ++i) {
		      target[i + targetStart] = this[i + start]
		    }
		  } else {
		    Uint8Array.prototype.set.call(
		      target,
		      this.subarray(start, start + len),
		      targetStart
		    )
		  }

		  return len
		}

		// Usage:
		//    buffer.fill(number[, offset[, end]])
		//    buffer.fill(buffer[, offset[, end]])
		//    buffer.fill(string[, offset[, end]][, encoding])
		Buffer.prototype.fill = function fill (val, start, end, encoding) {
		  // Handle string cases:
		  if (typeof val === 'string') {
		    if (typeof start === 'string') {
		      encoding = start
		      start = 0
		      end = this.length
		    } else if (typeof end === 'string') {
		      encoding = end
		      end = this.length
		    }
		    if (val.length === 1) {
		      var code = val.charCodeAt(0)
		      if (code < 256) {
		        val = code
		      }
		    }
		    if (encoding !== undefined && typeof encoding !== 'string') {
		      throw new TypeError('encoding must be a string')
		    }
		    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
		      throw new TypeError('Unknown encoding: ' + encoding)
		    }
		  } else if (typeof val === 'number') {
		    val = val & 255
		  }

		  // Invalid ranges are not set to a default, so can range check early.
		  if (start < 0 || this.length < start || this.length < end) {
		    throw new RangeError('Out of range index')
		  }

		  if (end <= start) {
		    return this
		  }

		  start = start >>> 0
		  end = end === undefined ? this.length : end >>> 0

		  if (!val) val = 0

		  var i
		  if (typeof val === 'number') {
		    for (i = start; i < end; ++i) {
		      this[i] = val
		    }
		  } else {
		    var bytes = Buffer.isBuffer(val)
		      ? val
		      : utf8ToBytes(new Buffer(val, encoding).toString())
		    var len = bytes.length
		    for (i = 0; i < end - start; ++i) {
		      this[i + start] = bytes[i % len]
		    }
		  }

		  return this
		}

		// HELPER FUNCTIONS
		// ================

		var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

		function base64clean (str) {
		  // Node strips out invalid characters like \n and \t from the string, base64-js does not
		  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
		  // Node converts strings with length < 2 to ''
		  if (str.length < 2) return ''
		  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
		  while (str.length % 4 !== 0) {
		    str = str + '='
		  }
		  return str
		}

		function stringtrim (str) {
		  if (str.trim) return str.trim()
		  return str.replace(/^\s+|\s+$/g, '')
		}

		function toHex (n) {
		  if (n < 16) return '0' + n.toString(16)
		  return n.toString(16)
		}

		function utf8ToBytes (string, units) {
		  units = units || Infinity
		  var codePoint
		  var length = string.length
		  var leadSurrogate = null
		  var bytes = []

		  for (var i = 0; i < length; ++i) {
		    codePoint = string.charCodeAt(i)

		    // is surrogate component
		    if (codePoint > 0xD7FF && codePoint < 0xE000) {
		      // last char was a lead
		      if (!leadSurrogate) {
		        // no lead yet
		        if (codePoint > 0xDBFF) {
		          // unexpected trail
		          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
		          continue
		        } else if (i + 1 === length) {
		          // unpaired lead
		          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
		          continue
		        }

		        // valid lead
		        leadSurrogate = codePoint

		        continue
		      }

		      // 2 leads in a row
		      if (codePoint < 0xDC00) {
		        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
		        leadSurrogate = codePoint
		        continue
		      }

		      // valid surrogate pair
		      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
		    } else if (leadSurrogate) {
		      // valid bmp char, but last char was a lead
		      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
		    }

		    leadSurrogate = null

		    // encode utf8
		    if (codePoint < 0x80) {
		      if ((units -= 1) < 0) break
		      bytes.push(codePoint)
		    } else if (codePoint < 0x800) {
		      if ((units -= 2) < 0) break
		      bytes.push(
		        codePoint >> 0x6 | 0xC0,
		        codePoint & 0x3F | 0x80
		      )
		    } else if (codePoint < 0x10000) {
		      if ((units -= 3) < 0) break
		      bytes.push(
		        codePoint >> 0xC | 0xE0,
		        codePoint >> 0x6 & 0x3F | 0x80,
		        codePoint & 0x3F | 0x80
		      )
		    } else if (codePoint < 0x110000) {
		      if ((units -= 4) < 0) break
		      bytes.push(
		        codePoint >> 0x12 | 0xF0,
		        codePoint >> 0xC & 0x3F | 0x80,
		        codePoint >> 0x6 & 0x3F | 0x80,
		        codePoint & 0x3F | 0x80
		      )
		    } else {
		      throw new Error('Invalid code point')
		    }
		  }

		  return bytes
		}

		function asciiToBytes (str) {
		  var byteArray = []
		  for (var i = 0; i < str.length; ++i) {
		    // Node's code seems to be doing this and not & 0x7F..
		    byteArray.push(str.charCodeAt(i) & 0xFF)
		  }
		  return byteArray
		}

		function utf16leToBytes (str, units) {
		  var c, hi, lo
		  var byteArray = []
		  for (var i = 0; i < str.length; ++i) {
		    if ((units -= 2) < 0) break

		    c = str.charCodeAt(i)
		    hi = c >> 8
		    lo = c % 256
		    byteArray.push(lo)
		    byteArray.push(hi)
		  }

		  return byteArray
		}

		function base64ToBytes (str) {
		  return base64.toByteArray(base64clean(str))
		}

		function blitBuffer (src, dst, offset, length) {
		  for (var i = 0; i < length; ++i) {
		    if ((i + offset >= dst.length) || (i >= src.length)) break
		    dst[i + offset] = src[i]
		  }
		  return i
		}

		function isnan (val) {
		  return val !== val // eslint-disable-line no-self-compare
		}

		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

	/***/ }),
	/* 29 */
	/***/ (function(module, exports) {

		'use strict'

		exports.byteLength = byteLength
		exports.toByteArray = toByteArray
		exports.fromByteArray = fromByteArray

		var lookup = []
		var revLookup = []
		var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

		var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
		for (var i = 0, len = code.length; i < len; ++i) {
		  lookup[i] = code[i]
		  revLookup[code.charCodeAt(i)] = i
		}

		// Support decoding URL-safe base64 strings, as Node.js does.
		// See: https://en.wikipedia.org/wiki/Base64#URL_applications
		revLookup['-'.charCodeAt(0)] = 62
		revLookup['_'.charCodeAt(0)] = 63

		function getLens (b64) {
		  var len = b64.length

		  if (len % 4 > 0) {
		    throw new Error('Invalid string. Length must be a multiple of 4')
		  }

		  // Trim off extra bytes after placeholder bytes are found
		  // See: https://github.com/beatgammit/base64-js/issues/42
		  var validLen = b64.indexOf('=')
		  if (validLen === -1) validLen = len

		  var placeHoldersLen = validLen === len
		    ? 0
		    : 4 - (validLen % 4)

		  return [validLen, placeHoldersLen]
		}

		// base64 is 4/3 + up to two characters of the original data
		function byteLength (b64) {
		  var lens = getLens(b64)
		  var validLen = lens[0]
		  var placeHoldersLen = lens[1]
		  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
		}

		function _byteLength (b64, validLen, placeHoldersLen) {
		  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
		}

		function toByteArray (b64) {
		  var tmp
		  var lens = getLens(b64)
		  var validLen = lens[0]
		  var placeHoldersLen = lens[1]

		  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

		  var curByte = 0

		  // if there are placeholders, only get up to the last complete 4 chars
		  var len = placeHoldersLen > 0
		    ? validLen - 4
		    : validLen

		  var i
		  for (i = 0; i < len; i += 4) {
		    tmp =
		      (revLookup[b64.charCodeAt(i)] << 18) |
		      (revLookup[b64.charCodeAt(i + 1)] << 12) |
		      (revLookup[b64.charCodeAt(i + 2)] << 6) |
		      revLookup[b64.charCodeAt(i + 3)]
		    arr[curByte++] = (tmp >> 16) & 0xFF
		    arr[curByte++] = (tmp >> 8) & 0xFF
		    arr[curByte++] = tmp & 0xFF
		  }

		  if (placeHoldersLen === 2) {
		    tmp =
		      (revLookup[b64.charCodeAt(i)] << 2) |
		      (revLookup[b64.charCodeAt(i + 1)] >> 4)
		    arr[curByte++] = tmp & 0xFF
		  }

		  if (placeHoldersLen === 1) {
		    tmp =
		      (revLookup[b64.charCodeAt(i)] << 10) |
		      (revLookup[b64.charCodeAt(i + 1)] << 4) |
		      (revLookup[b64.charCodeAt(i + 2)] >> 2)
		    arr[curByte++] = (tmp >> 8) & 0xFF
		    arr[curByte++] = tmp & 0xFF
		  }

		  return arr
		}

		function tripletToBase64 (num) {
		  return lookup[num >> 18 & 0x3F] +
		    lookup[num >> 12 & 0x3F] +
		    lookup[num >> 6 & 0x3F] +
		    lookup[num & 0x3F]
		}

		function encodeChunk (uint8, start, end) {
		  var tmp
		  var output = []
		  for (var i = start; i < end; i += 3) {
		    tmp =
		      ((uint8[i] << 16) & 0xFF0000) +
		      ((uint8[i + 1] << 8) & 0xFF00) +
		      (uint8[i + 2] & 0xFF)
		    output.push(tripletToBase64(tmp))
		  }
		  return output.join('')
		}

		function fromByteArray (uint8) {
		  var tmp
		  var len = uint8.length
		  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
		  var parts = []
		  var maxChunkLength = 16383 // must be multiple of 3

		  // go through the array every three bytes, we'll deal with trailing stuff later
		  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
		    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
		  }

		  // pad the end with zeros, but make sure to not forget the extra bytes
		  if (extraBytes === 1) {
		    tmp = uint8[len - 1]
		    parts.push(
		      lookup[tmp >> 2] +
		      lookup[(tmp << 4) & 0x3F] +
		      '=='
		    )
		  } else if (extraBytes === 2) {
		    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
		    parts.push(
		      lookup[tmp >> 10] +
		      lookup[(tmp >> 4) & 0x3F] +
		      lookup[(tmp << 2) & 0x3F] +
		      '='
		    )
		  }

		  return parts.join('')
		}


	/***/ }),
	/* 30 */
	/***/ (function(module, exports) {

		exports.read = function (buffer, offset, isLE, mLen, nBytes) {
		  var e, m
		  var eLen = (nBytes * 8) - mLen - 1
		  var eMax = (1 << eLen) - 1
		  var eBias = eMax >> 1
		  var nBits = -7
		  var i = isLE ? (nBytes - 1) : 0
		  var d = isLE ? -1 : 1
		  var s = buffer[offset + i]

		  i += d

		  e = s & ((1 << (-nBits)) - 1)
		  s >>= (-nBits)
		  nBits += eLen
		  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

		  m = e & ((1 << (-nBits)) - 1)
		  e >>= (-nBits)
		  nBits += mLen
		  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

		  if (e === 0) {
		    e = 1 - eBias
		  } else if (e === eMax) {
		    return m ? NaN : ((s ? -1 : 1) * Infinity)
		  } else {
		    m = m + Math.pow(2, mLen)
		    e = e - eBias
		  }
		  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
		}

		exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
		  var e, m, c
		  var eLen = (nBytes * 8) - mLen - 1
		  var eMax = (1 << eLen) - 1
		  var eBias = eMax >> 1
		  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
		  var i = isLE ? 0 : (nBytes - 1)
		  var d = isLE ? 1 : -1
		  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

		  value = Math.abs(value)

		  if (isNaN(value) || value === Infinity) {
		    m = isNaN(value) ? 1 : 0
		    e = eMax
		  } else {
		    e = Math.floor(Math.log(value) / Math.LN2)
		    if (value * (c = Math.pow(2, -e)) < 1) {
		      e--
		      c *= 2
		    }
		    if (e + eBias >= 1) {
		      value += rt / c
		    } else {
		      value += rt * Math.pow(2, 1 - eBias)
		    }
		    if (value * c >= 2) {
		      e++
		      c /= 2
		    }

		    if (e + eBias >= eMax) {
		      m = 0
		      e = eMax
		    } else if (e + eBias >= 1) {
		      m = ((value * c) - 1) * Math.pow(2, mLen)
		      e = e + eBias
		    } else {
		      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
		      e = 0
		    }
		  }

		  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

		  e = (e << mLen) | m
		  eLen += mLen
		  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

		  buffer[offset + i - d] |= s * 128
		}


	/***/ }),
	/* 31 */
	/***/ (function(module, exports) {

		var toString = {}.toString;

		module.exports = Array.isArray || function (arr) {
		  return toString.call(arr) == '[object Array]';
		};


	/***/ }),
	/* 32 */
	/***/ (function(module, exports, __webpack_require__) {

		// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.

		module.exports = Stream;

		var EE = __webpack_require__(33).EventEmitter;
		var inherits = __webpack_require__(34);

		inherits(Stream, EE);
		Stream.Readable = __webpack_require__(35);
		Stream.Writable = __webpack_require__(54);
		Stream.Duplex = __webpack_require__(55);
		Stream.Transform = __webpack_require__(56);
		Stream.PassThrough = __webpack_require__(57);

		// Backwards-compat with node 0.4.x
		Stream.Stream = Stream;



		// old-style streams.  Note that the pipe method (the only relevant
		// part of this class) is overridden in the Readable class.

		function Stream() {
		  EE.call(this);
		}

		Stream.prototype.pipe = function(dest, options) {
		  var source = this;

		  function ondata(chunk) {
		    if (dest.writable) {
		      if (false === dest.write(chunk) && source.pause) {
		        source.pause();
		      }
		    }
		  }

		  source.on('data', ondata);

		  function ondrain() {
		    if (source.readable && source.resume) {
		      source.resume();
		    }
		  }

		  dest.on('drain', ondrain);

		  // If the 'end' option is not supplied, dest.end() will be called when
		  // source gets the 'end' or 'close' events.  Only dest.end() once.
		  if (!dest._isStdio && (!options || options.end !== false)) {
		    source.on('end', onend);
		    source.on('close', onclose);
		  }

		  var didOnEnd = false;
		  function onend() {
		    if (didOnEnd) return;
		    didOnEnd = true;

		    dest.end();
		  }


		  function onclose() {
		    if (didOnEnd) return;
		    didOnEnd = true;

		    if (typeof dest.destroy === 'function') dest.destroy();
		  }

		  // don't leave dangling pipes when there are errors.
		  function onerror(er) {
		    cleanup();
		    if (EE.listenerCount(this, 'error') === 0) {
		      throw er; // Unhandled stream error in pipe.
		    }
		  }

		  source.on('error', onerror);
		  dest.on('error', onerror);

		  // remove all the event listeners that were added.
		  function cleanup() {
		    source.removeListener('data', ondata);
		    dest.removeListener('drain', ondrain);

		    source.removeListener('end', onend);
		    source.removeListener('close', onclose);

		    source.removeListener('error', onerror);
		    dest.removeListener('error', onerror);

		    source.removeListener('end', cleanup);
		    source.removeListener('close', cleanup);

		    dest.removeListener('close', cleanup);
		  }

		  source.on('end', cleanup);
		  source.on('close', cleanup);

		  dest.on('close', cleanup);

		  dest.emit('pipe', source);

		  // Allow for unix-like usage: A.pipe(B).pipe(C)
		  return dest;
		};


	/***/ }),
	/* 33 */
	/***/ (function(module, exports) {

		// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.

		function EventEmitter() {
		  this._events = this._events || {};
		  this._maxListeners = this._maxListeners || undefined;
		}
		module.exports = EventEmitter;

		// Backwards-compat with node 0.10.x
		EventEmitter.EventEmitter = EventEmitter;

		EventEmitter.prototype._events = undefined;
		EventEmitter.prototype._maxListeners = undefined;

		// By default EventEmitters will print a warning if more than 10 listeners are
		// added to it. This is a useful default which helps finding memory leaks.
		EventEmitter.defaultMaxListeners = 10;

		// Obviously not all Emitters should be limited to 10. This function allows
		// that to be increased. Set to zero for unlimited.
		EventEmitter.prototype.setMaxListeners = function(n) {
		  if (!isNumber(n) || n < 0 || isNaN(n))
		    throw TypeError('n must be a positive number');
		  this._maxListeners = n;
		  return this;
		};

		EventEmitter.prototype.emit = function(type) {
		  var er, handler, len, args, i, listeners;

		  if (!this._events)
		    this._events = {};

		  // If there is no 'error' event listener then throw.
		  if (type === 'error') {
		    if (!this._events.error ||
		        (isObject(this._events.error) && !this._events.error.length)) {
		      er = arguments[1];
		      if (er instanceof Error) {
		        throw er; // Unhandled 'error' event
		      } else {
		        // At least give some kind of context to the user
		        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
		        err.context = er;
		        throw err;
		      }
		    }
		  }

		  handler = this._events[type];

		  if (isUndefined(handler))
		    return false;

		  if (isFunction(handler)) {
		    switch (arguments.length) {
		      // fast cases
		      case 1:
		        handler.call(this);
		        break;
		      case 2:
		        handler.call(this, arguments[1]);
		        break;
		      case 3:
		        handler.call(this, arguments[1], arguments[2]);
		        break;
		      // slower
		      default:
		        args = Array.prototype.slice.call(arguments, 1);
		        handler.apply(this, args);
		    }
		  } else if (isObject(handler)) {
		    args = Array.prototype.slice.call(arguments, 1);
		    listeners = handler.slice();
		    len = listeners.length;
		    for (i = 0; i < len; i++)
		      listeners[i].apply(this, args);
		  }

		  return true;
		};

		EventEmitter.prototype.addListener = function(type, listener) {
		  var m;

		  if (!isFunction(listener))
		    throw TypeError('listener must be a function');

		  if (!this._events)
		    this._events = {};

		  // To avoid recursion in the case that type === "newListener"! Before
		  // adding it to the listeners, first emit "newListener".
		  if (this._events.newListener)
		    this.emit('newListener', type,
		              isFunction(listener.listener) ?
		              listener.listener : listener);

		  if (!this._events[type])
		    // Optimize the case of one listener. Don't need the extra array object.
		    this._events[type] = listener;
		  else if (isObject(this._events[type]))
		    // If we've already got an array, just append.
		    this._events[type].push(listener);
		  else
		    // Adding the second element, need to change to array.
		    this._events[type] = [this._events[type], listener];

		  // Check for listener leak
		  if (isObject(this._events[type]) && !this._events[type].warned) {
		    if (!isUndefined(this._maxListeners)) {
		      m = this._maxListeners;
		    } else {
		      m = EventEmitter.defaultMaxListeners;
		    }

		    if (m && m > 0 && this._events[type].length > m) {
		      this._events[type].warned = true;
		      console.error('(node) warning: possible EventEmitter memory ' +
		                    'leak detected. %d listeners added. ' +
		                    'Use emitter.setMaxListeners() to increase limit.',
		                    this._events[type].length);
		      if (typeof console.trace === 'function') {
		        // not supported in IE 10
		        console.trace();
		      }
		    }
		  }

		  return this;
		};

		EventEmitter.prototype.on = EventEmitter.prototype.addListener;

		EventEmitter.prototype.once = function(type, listener) {
		  if (!isFunction(listener))
		    throw TypeError('listener must be a function');

		  var fired = false;

		  function g() {
		    this.removeListener(type, g);

		    if (!fired) {
		      fired = true;
		      listener.apply(this, arguments);
		    }
		  }

		  g.listener = listener;
		  this.on(type, g);

		  return this;
		};

		// emits a 'removeListener' event iff the listener was removed
		EventEmitter.prototype.removeListener = function(type, listener) {
		  var list, position, length, i;

		  if (!isFunction(listener))
		    throw TypeError('listener must be a function');

		  if (!this._events || !this._events[type])
		    return this;

		  list = this._events[type];
		  length = list.length;
		  position = -1;

		  if (list === listener ||
		      (isFunction(list.listener) && list.listener === listener)) {
		    delete this._events[type];
		    if (this._events.removeListener)
		      this.emit('removeListener', type, listener);

		  } else if (isObject(list)) {
		    for (i = length; i-- > 0;) {
		      if (list[i] === listener ||
		          (list[i].listener && list[i].listener === listener)) {
		        position = i;
		        break;
		      }
		    }

		    if (position < 0)
		      return this;

		    if (list.length === 1) {
		      list.length = 0;
		      delete this._events[type];
		    } else {
		      list.splice(position, 1);
		    }

		    if (this._events.removeListener)
		      this.emit('removeListener', type, listener);
		  }

		  return this;
		};

		EventEmitter.prototype.removeAllListeners = function(type) {
		  var key, listeners;

		  if (!this._events)
		    return this;

		  // not listening for removeListener, no need to emit
		  if (!this._events.removeListener) {
		    if (arguments.length === 0)
		      this._events = {};
		    else if (this._events[type])
		      delete this._events[type];
		    return this;
		  }

		  // emit removeListener for all listeners on all events
		  if (arguments.length === 0) {
		    for (key in this._events) {
		      if (key === 'removeListener') continue;
		      this.removeAllListeners(key);
		    }
		    this.removeAllListeners('removeListener');
		    this._events = {};
		    return this;
		  }

		  listeners = this._events[type];

		  if (isFunction(listeners)) {
		    this.removeListener(type, listeners);
		  } else if (listeners) {
		    // LIFO order
		    while (listeners.length)
		      this.removeListener(type, listeners[listeners.length - 1]);
		  }
		  delete this._events[type];

		  return this;
		};

		EventEmitter.prototype.listeners = function(type) {
		  var ret;
		  if (!this._events || !this._events[type])
		    ret = [];
		  else if (isFunction(this._events[type]))
		    ret = [this._events[type]];
		  else
		    ret = this._events[type].slice();
		  return ret;
		};

		EventEmitter.prototype.listenerCount = function(type) {
		  if (this._events) {
		    var evlistener = this._events[type];

		    if (isFunction(evlistener))
		      return 1;
		    else if (evlistener)
		      return evlistener.length;
		  }
		  return 0;
		};

		EventEmitter.listenerCount = function(emitter, type) {
		  return emitter.listenerCount(type);
		};

		function isFunction(arg) {
		  return typeof arg === 'function';
		}

		function isNumber(arg) {
		  return typeof arg === 'number';
		}

		function isObject(arg) {
		  return typeof arg === 'object' && arg !== null;
		}

		function isUndefined(arg) {
		  return arg === void 0;
		}


	/***/ }),
	/* 34 */
	/***/ (function(module, exports) {

		if (typeof Object.create === 'function') {
		  // implementation from standard node.js 'util' module
		  module.exports = function inherits(ctor, superCtor) {
		    if (superCtor) {
		      ctor.super_ = superCtor
		      ctor.prototype = Object.create(superCtor.prototype, {
		        constructor: {
		          value: ctor,
		          enumerable: false,
		          writable: true,
		          configurable: true
		        }
		      })
		    }
		  };
		} else {
		  // old school shim for old browsers
		  module.exports = function inherits(ctor, superCtor) {
		    if (superCtor) {
		      ctor.super_ = superCtor
		      var TempCtor = function () {}
		      TempCtor.prototype = superCtor.prototype
		      ctor.prototype = new TempCtor()
		      ctor.prototype.constructor = ctor
		    }
		  }
		}


	/***/ }),
	/* 35 */
	/***/ (function(module, exports, __webpack_require__) {

		exports = module.exports = __webpack_require__(36);
		exports.Stream = exports;
		exports.Readable = exports;
		exports.Writable = __webpack_require__(47);
		exports.Duplex = __webpack_require__(46);
		exports.Transform = __webpack_require__(52);
		exports.PassThrough = __webpack_require__(53);


	/***/ }),
	/* 36 */
	/***/ (function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.

		'use strict';

		/*<replacement>*/

		var pna = __webpack_require__(38);
		/*</replacement>*/

		module.exports = Readable;

		/*<replacement>*/
		var isArray = __webpack_require__(31);
		/*</replacement>*/

		/*<replacement>*/
		var Duplex;
		/*</replacement>*/

		Readable.ReadableState = ReadableState;

		/*<replacement>*/
		var EE = __webpack_require__(33).EventEmitter;

		var EElistenerCount = function (emitter, type) {
		  return emitter.listeners(type).length;
		};
		/*</replacement>*/

		/*<replacement>*/
		var Stream = __webpack_require__(39);
		/*</replacement>*/

		/*<replacement>*/

		var Buffer = __webpack_require__(40).Buffer;
		var OurUint8Array = global.Uint8Array || function () {};
		function _uint8ArrayToBuffer(chunk) {
		  return Buffer.from(chunk);
		}
		function _isUint8Array(obj) {
		  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
		}

		/*</replacement>*/

		/*<replacement>*/
		var util = Object.create(__webpack_require__(41));
		util.inherits = __webpack_require__(34);
		/*</replacement>*/

		/*<replacement>*/
		var debugUtil = __webpack_require__(42);
		var debug = void 0;
		if (debugUtil && debugUtil.debuglog) {
		  debug = debugUtil.debuglog('stream');
		} else {
		  debug = function () {};
		}
		/*</replacement>*/

		var BufferList = __webpack_require__(43);
		var destroyImpl = __webpack_require__(45);
		var StringDecoder;

		util.inherits(Readable, Stream);

		var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

		function prependListener(emitter, event, fn) {
		  // Sadly this is not cacheable as some libraries bundle their own
		  // event emitter implementation with them.
		  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

		  // This is a hack to make sure that our error handler is attached before any
		  // userland ones.  NEVER DO THIS. This is here only because this code needs
		  // to continue to work with older versions of Node.js that do not include
		  // the prependListener() method. The goal is to eventually remove this hack.
		  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
		}

		function ReadableState(options, stream) {
		  Duplex = Duplex || __webpack_require__(46);

		  options = options || {};

		  // Duplex streams are both readable and writable, but share
		  // the same options object.
		  // However, some cases require setting options to different
		  // values for the readable and the writable sides of the duplex stream.
		  // These options can be provided separately as readableXXX and writableXXX.
		  var isDuplex = stream instanceof Duplex;

		  // object stream flag. Used to make read(n) ignore n and to
		  // make all the buffer merging and length checks go away
		  this.objectMode = !!options.objectMode;

		  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

		  // the point at which it stops calling _read() to fill the buffer
		  // Note: 0 is a valid value, means "don't call _read preemptively ever"
		  var hwm = options.highWaterMark;
		  var readableHwm = options.readableHighWaterMark;
		  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

		  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

		  // cast to ints.
		  this.highWaterMark = Math.floor(this.highWaterMark);

		  // A linked list is used to store data chunks instead of an array because the
		  // linked list can remove elements from the beginning faster than
		  // array.shift()
		  this.buffer = new BufferList();
		  this.length = 0;
		  this.pipes = null;
		  this.pipesCount = 0;
		  this.flowing = null;
		  this.ended = false;
		  this.endEmitted = false;
		  this.reading = false;

		  // a flag to be able to tell if the event 'readable'/'data' is emitted
		  // immediately, or on a later tick.  We set this to true at first, because
		  // any actions that shouldn't happen until "later" should generally also
		  // not happen before the first read call.
		  this.sync = true;

		  // whenever we return null, then we set a flag to say
		  // that we're awaiting a 'readable' event emission.
		  this.needReadable = false;
		  this.emittedReadable = false;
		  this.readableListening = false;
		  this.resumeScheduled = false;

		  // has it been destroyed
		  this.destroyed = false;

		  // Crypto is kind of old and crusty.  Historically, its default string
		  // encoding is 'binary' so we have to make this configurable.
		  // Everything else in the universe uses 'utf8', though.
		  this.defaultEncoding = options.defaultEncoding || 'utf8';

		  // the number of writers that are awaiting a drain event in .pipe()s
		  this.awaitDrain = 0;

		  // if true, a maybeReadMore has been scheduled
		  this.readingMore = false;

		  this.decoder = null;
		  this.encoding = null;
		  if (options.encoding) {
		    if (!StringDecoder) StringDecoder = __webpack_require__(51).StringDecoder;
		    this.decoder = new StringDecoder(options.encoding);
		    this.encoding = options.encoding;
		  }
		}

		function Readable(options) {
		  Duplex = Duplex || __webpack_require__(46);

		  if (!(this instanceof Readable)) return new Readable(options);

		  this._readableState = new ReadableState(options, this);

		  // legacy
		  this.readable = true;

		  if (options) {
		    if (typeof options.read === 'function') this._read = options.read;

		    if (typeof options.destroy === 'function') this._destroy = options.destroy;
		  }

		  Stream.call(this);
		}

		Object.defineProperty(Readable.prototype, 'destroyed', {
		  get: function () {
		    if (this._readableState === undefined) {
		      return false;
		    }
		    return this._readableState.destroyed;
		  },
		  set: function (value) {
		    // we ignore the value if the stream
		    // has not been initialized yet
		    if (!this._readableState) {
		      return;
		    }

		    // backward compatibility, the user is explicitly
		    // managing destroyed
		    this._readableState.destroyed = value;
		  }
		});

		Readable.prototype.destroy = destroyImpl.destroy;
		Readable.prototype._undestroy = destroyImpl.undestroy;
		Readable.prototype._destroy = function (err, cb) {
		  this.push(null);
		  cb(err);
		};

		// Manually shove something into the read() buffer.
		// This returns true if the highWaterMark has not been hit yet,
		// similar to how Writable.write() returns true if you should
		// write() some more.
		Readable.prototype.push = function (chunk, encoding) {
		  var state = this._readableState;
		  var skipChunkCheck;

		  if (!state.objectMode) {
		    if (typeof chunk === 'string') {
		      encoding = encoding || state.defaultEncoding;
		      if (encoding !== state.encoding) {
		        chunk = Buffer.from(chunk, encoding);
		        encoding = '';
		      }
		      skipChunkCheck = true;
		    }
		  } else {
		    skipChunkCheck = true;
		  }

		  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
		};

		// Unshift should *always* be something directly out of read()
		Readable.prototype.unshift = function (chunk) {
		  return readableAddChunk(this, chunk, null, true, false);
		};

		function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
		  var state = stream._readableState;
		  if (chunk === null) {
		    state.reading = false;
		    onEofChunk(stream, state);
		  } else {
		    var er;
		    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
		    if (er) {
		      stream.emit('error', er);
		    } else if (state.objectMode || chunk && chunk.length > 0) {
		      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
		        chunk = _uint8ArrayToBuffer(chunk);
		      }

		      if (addToFront) {
		        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
		      } else if (state.ended) {
		        stream.emit('error', new Error('stream.push() after EOF'));
		      } else {
		        state.reading = false;
		        if (state.decoder && !encoding) {
		          chunk = state.decoder.write(chunk);
		          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
		        } else {
		          addChunk(stream, state, chunk, false);
		        }
		      }
		    } else if (!addToFront) {
		      state.reading = false;
		    }
		  }

		  return needMoreData(state);
		}

		function addChunk(stream, state, chunk, addToFront) {
		  if (state.flowing && state.length === 0 && !state.sync) {
		    stream.emit('data', chunk);
		    stream.read(0);
		  } else {
		    // update the buffer info.
		    state.length += state.objectMode ? 1 : chunk.length;
		    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

		    if (state.needReadable) emitReadable(stream);
		  }
		  maybeReadMore(stream, state);
		}

		function chunkInvalid(state, chunk) {
		  var er;
		  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
		    er = new TypeError('Invalid non-string/buffer chunk');
		  }
		  return er;
		}

		// if it's past the high water mark, we can push in some more.
		// Also, if we have no data yet, we can stand some
		// more bytes.  This is to work around cases where hwm=0,
		// such as the repl.  Also, if the push() triggered a
		// readable event, and the user called read(largeNumber) such that
		// needReadable was set, then we ought to push more, so that another
		// 'readable' event will be triggered.
		function needMoreData(state) {
		  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
		}

		Readable.prototype.isPaused = function () {
		  return this._readableState.flowing === false;
		};

		// backwards compatibility.
		Readable.prototype.setEncoding = function (enc) {
		  if (!StringDecoder) StringDecoder = __webpack_require__(51).StringDecoder;
		  this._readableState.decoder = new StringDecoder(enc);
		  this._readableState.encoding = enc;
		  return this;
		};

		// Don't raise the hwm > 8MB
		var MAX_HWM = 0x800000;
		function computeNewHighWaterMark(n) {
		  if (n >= MAX_HWM) {
		    n = MAX_HWM;
		  } else {
		    // Get the next highest power of 2 to prevent increasing hwm excessively in
		    // tiny amounts
		    n--;
		    n |= n >>> 1;
		    n |= n >>> 2;
		    n |= n >>> 4;
		    n |= n >>> 8;
		    n |= n >>> 16;
		    n++;
		  }
		  return n;
		}

		// This function is designed to be inlinable, so please take care when making
		// changes to the function body.
		function howMuchToRead(n, state) {
		  if (n <= 0 || state.length === 0 && state.ended) return 0;
		  if (state.objectMode) return 1;
		  if (n !== n) {
		    // Only flow one buffer at a time
		    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
		  }
		  // If we're asking for more than the current hwm, then raise the hwm.
		  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
		  if (n <= state.length) return n;
		  // Don't have enough
		  if (!state.ended) {
		    state.needReadable = true;
		    return 0;
		  }
		  return state.length;
		}

		// you can override either this method, or the async _read(n) below.
		Readable.prototype.read = function (n) {
		  debug('read', n);
		  n = parseInt(n, 10);
		  var state = this._readableState;
		  var nOrig = n;

		  if (n !== 0) state.emittedReadable = false;

		  // if we're doing read(0) to trigger a readable event, but we
		  // already have a bunch of data in the buffer, then just trigger
		  // the 'readable' event and move on.
		  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
		    debug('read: emitReadable', state.length, state.ended);
		    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
		    return null;
		  }

		  n = howMuchToRead(n, state);

		  // if we've ended, and we're now clear, then finish it up.
		  if (n === 0 && state.ended) {
		    if (state.length === 0) endReadable(this);
		    return null;
		  }

		  // All the actual chunk generation logic needs to be
		  // *below* the call to _read.  The reason is that in certain
		  // synthetic stream cases, such as passthrough streams, _read
		  // may be a completely synchronous operation which may change
		  // the state of the read buffer, providing enough data when
		  // before there was *not* enough.
		  //
		  // So, the steps are:
		  // 1. Figure out what the state of things will be after we do
		  // a read from the buffer.
		  //
		  // 2. If that resulting state will trigger a _read, then call _read.
		  // Note that this may be asynchronous, or synchronous.  Yes, it is
		  // deeply ugly to write APIs this way, but that still doesn't mean
		  // that the Readable class should behave improperly, as streams are
		  // designed to be sync/async agnostic.
		  // Take note if the _read call is sync or async (ie, if the read call
		  // has returned yet), so that we know whether or not it's safe to emit
		  // 'readable' etc.
		  //
		  // 3. Actually pull the requested chunks out of the buffer and return.

		  // if we need a readable event, then we need to do some reading.
		  var doRead = state.needReadable;
		  debug('need readable', doRead);

		  // if we currently have less than the highWaterMark, then also read some
		  if (state.length === 0 || state.length - n < state.highWaterMark) {
		    doRead = true;
		    debug('length less than watermark', doRead);
		  }

		  // however, if we've ended, then there's no point, and if we're already
		  // reading, then it's unnecessary.
		  if (state.ended || state.reading) {
		    doRead = false;
		    debug('reading or ended', doRead);
		  } else if (doRead) {
		    debug('do read');
		    state.reading = true;
		    state.sync = true;
		    // if the length is currently zero, then we *need* a readable event.
		    if (state.length === 0) state.needReadable = true;
		    // call internal read method
		    this._read(state.highWaterMark);
		    state.sync = false;
		    // If _read pushed data synchronously, then `reading` will be false,
		    // and we need to re-evaluate how much data we can return to the user.
		    if (!state.reading) n = howMuchToRead(nOrig, state);
		  }

		  var ret;
		  if (n > 0) ret = fromList(n, state);else ret = null;

		  if (ret === null) {
		    state.needReadable = true;
		    n = 0;
		  } else {
		    state.length -= n;
		  }

		  if (state.length === 0) {
		    // If we have nothing in the buffer, then we want to know
		    // as soon as we *do* get something into the buffer.
		    if (!state.ended) state.needReadable = true;

		    // If we tried to read() past the EOF, then emit end on the next tick.
		    if (nOrig !== n && state.ended) endReadable(this);
		  }

		  if (ret !== null) this.emit('data', ret);

		  return ret;
		};

		function onEofChunk(stream, state) {
		  if (state.ended) return;
		  if (state.decoder) {
		    var chunk = state.decoder.end();
		    if (chunk && chunk.length) {
		      state.buffer.push(chunk);
		      state.length += state.objectMode ? 1 : chunk.length;
		    }
		  }
		  state.ended = true;

		  // emit 'readable' now to make sure it gets picked up.
		  emitReadable(stream);
		}

		// Don't emit readable right away in sync mode, because this can trigger
		// another read() call => stack overflow.  This way, it might trigger
		// a nextTick recursion warning, but that's not so bad.
		function emitReadable(stream) {
		  var state = stream._readableState;
		  state.needReadable = false;
		  if (!state.emittedReadable) {
		    debug('emitReadable', state.flowing);
		    state.emittedReadable = true;
		    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
		  }
		}

		function emitReadable_(stream) {
		  debug('emit readable');
		  stream.emit('readable');
		  flow(stream);
		}

		// at this point, the user has presumably seen the 'readable' event,
		// and called read() to consume some data.  that may have triggered
		// in turn another _read(n) call, in which case reading = true if
		// it's in progress.
		// However, if we're not ended, or reading, and the length < hwm,
		// then go ahead and try to read some more preemptively.
		function maybeReadMore(stream, state) {
		  if (!state.readingMore) {
		    state.readingMore = true;
		    pna.nextTick(maybeReadMore_, stream, state);
		  }
		}

		function maybeReadMore_(stream, state) {
		  var len = state.length;
		  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
		    debug('maybeReadMore read 0');
		    stream.read(0);
		    if (len === state.length)
		      // didn't get any data, stop spinning.
		      break;else len = state.length;
		  }
		  state.readingMore = false;
		}

		// abstract method.  to be overridden in specific implementation classes.
		// call cb(er, data) where data is <= n in length.
		// for virtual (non-string, non-buffer) streams, "length" is somewhat
		// arbitrary, and perhaps not very meaningful.
		Readable.prototype._read = function (n) {
		  this.emit('error', new Error('_read() is not implemented'));
		};

		Readable.prototype.pipe = function (dest, pipeOpts) {
		  var src = this;
		  var state = this._readableState;

		  switch (state.pipesCount) {
		    case 0:
		      state.pipes = dest;
		      break;
		    case 1:
		      state.pipes = [state.pipes, dest];
		      break;
		    default:
		      state.pipes.push(dest);
		      break;
		  }
		  state.pipesCount += 1;
		  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

		  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

		  var endFn = doEnd ? onend : unpipe;
		  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

		  dest.on('unpipe', onunpipe);
		  function onunpipe(readable, unpipeInfo) {
		    debug('onunpipe');
		    if (readable === src) {
		      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
		        unpipeInfo.hasUnpiped = true;
		        cleanup();
		      }
		    }
		  }

		  function onend() {
		    debug('onend');
		    dest.end();
		  }

		  // when the dest drains, it reduces the awaitDrain counter
		  // on the source.  This would be more elegant with a .once()
		  // handler in flow(), but adding and removing repeatedly is
		  // too slow.
		  var ondrain = pipeOnDrain(src);
		  dest.on('drain', ondrain);

		  var cleanedUp = false;
		  function cleanup() {
		    debug('cleanup');
		    // cleanup event handlers once the pipe is broken
		    dest.removeListener('close', onclose);
		    dest.removeListener('finish', onfinish);
		    dest.removeListener('drain', ondrain);
		    dest.removeListener('error', onerror);
		    dest.removeListener('unpipe', onunpipe);
		    src.removeListener('end', onend);
		    src.removeListener('end', unpipe);
		    src.removeListener('data', ondata);

		    cleanedUp = true;

		    // if the reader is waiting for a drain event from this
		    // specific writer, then it would cause it to never start
		    // flowing again.
		    // So, if this is awaiting a drain, then we just call it now.
		    // If we don't know, then assume that we are waiting for one.
		    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
		  }

		  // If the user pushes more data while we're writing to dest then we'll end up
		  // in ondata again. However, we only want to increase awaitDrain once because
		  // dest will only emit one 'drain' event for the multiple writes.
		  // => Introduce a guard on increasing awaitDrain.
		  var increasedAwaitDrain = false;
		  src.on('data', ondata);
		  function ondata(chunk) {
		    debug('ondata');
		    increasedAwaitDrain = false;
		    var ret = dest.write(chunk);
		    if (false === ret && !increasedAwaitDrain) {
		      // If the user unpiped during `dest.write()`, it is possible
		      // to get stuck in a permanently paused state if that write
		      // also returned false.
		      // => Check whether `dest` is still a piping destination.
		      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
		        debug('false write response, pause', src._readableState.awaitDrain);
		        src._readableState.awaitDrain++;
		        increasedAwaitDrain = true;
		      }
		      src.pause();
		    }
		  }

		  // if the dest has an error, then stop piping into it.
		  // however, don't suppress the throwing behavior for this.
		  function onerror(er) {
		    debug('onerror', er);
		    unpipe();
		    dest.removeListener('error', onerror);
		    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
		  }

		  // Make sure our error handler is attached before userland ones.
		  prependListener(dest, 'error', onerror);

		  // Both close and finish should trigger unpipe, but only once.
		  function onclose() {
		    dest.removeListener('finish', onfinish);
		    unpipe();
		  }
		  dest.once('close', onclose);
		  function onfinish() {
		    debug('onfinish');
		    dest.removeListener('close', onclose);
		    unpipe();
		  }
		  dest.once('finish', onfinish);

		  function unpipe() {
		    debug('unpipe');
		    src.unpipe(dest);
		  }

		  // tell the dest that it's being piped to
		  dest.emit('pipe', src);

		  // start the flow if it hasn't been started already.
		  if (!state.flowing) {
		    debug('pipe resume');
		    src.resume();
		  }

		  return dest;
		};

		function pipeOnDrain(src) {
		  return function () {
		    var state = src._readableState;
		    debug('pipeOnDrain', state.awaitDrain);
		    if (state.awaitDrain) state.awaitDrain--;
		    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
		      state.flowing = true;
		      flow(src);
		    }
		  };
		}

		Readable.prototype.unpipe = function (dest) {
		  var state = this._readableState;
		  var unpipeInfo = { hasUnpiped: false };

		  // if we're not piping anywhere, then do nothing.
		  if (state.pipesCount === 0) return this;

		  // just one destination.  most common case.
		  if (state.pipesCount === 1) {
		    // passed in one, but it's not the right one.
		    if (dest && dest !== state.pipes) return this;

		    if (!dest) dest = state.pipes;

		    // got a match.
		    state.pipes = null;
		    state.pipesCount = 0;
		    state.flowing = false;
		    if (dest) dest.emit('unpipe', this, unpipeInfo);
		    return this;
		  }

		  // slow case. multiple pipe destinations.

		  if (!dest) {
		    // remove all.
		    var dests = state.pipes;
		    var len = state.pipesCount;
		    state.pipes = null;
		    state.pipesCount = 0;
		    state.flowing = false;

		    for (var i = 0; i < len; i++) {
		      dests[i].emit('unpipe', this, unpipeInfo);
		    }return this;
		  }

		  // try to find the right one.
		  var index = indexOf(state.pipes, dest);
		  if (index === -1) return this;

		  state.pipes.splice(index, 1);
		  state.pipesCount -= 1;
		  if (state.pipesCount === 1) state.pipes = state.pipes[0];

		  dest.emit('unpipe', this, unpipeInfo);

		  return this;
		};

		// set up data events if they are asked for
		// Ensure readable listeners eventually get something
		Readable.prototype.on = function (ev, fn) {
		  var res = Stream.prototype.on.call(this, ev, fn);

		  if (ev === 'data') {
		    // Start flowing on next tick if stream isn't explicitly paused
		    if (this._readableState.flowing !== false) this.resume();
		  } else if (ev === 'readable') {
		    var state = this._readableState;
		    if (!state.endEmitted && !state.readableListening) {
		      state.readableListening = state.needReadable = true;
		      state.emittedReadable = false;
		      if (!state.reading) {
		        pna.nextTick(nReadingNextTick, this);
		      } else if (state.length) {
		        emitReadable(this);
		      }
		    }
		  }

		  return res;
		};
		Readable.prototype.addListener = Readable.prototype.on;

		function nReadingNextTick(self) {
		  debug('readable nexttick read 0');
		  self.read(0);
		}

		// pause() and resume() are remnants of the legacy readable stream API
		// If the user uses them, then switch into old mode.
		Readable.prototype.resume = function () {
		  var state = this._readableState;
		  if (!state.flowing) {
		    debug('resume');
		    state.flowing = true;
		    resume(this, state);
		  }
		  return this;
		};

		function resume(stream, state) {
		  if (!state.resumeScheduled) {
		    state.resumeScheduled = true;
		    pna.nextTick(resume_, stream, state);
		  }
		}

		function resume_(stream, state) {
		  if (!state.reading) {
		    debug('resume read 0');
		    stream.read(0);
		  }

		  state.resumeScheduled = false;
		  state.awaitDrain = 0;
		  stream.emit('resume');
		  flow(stream);
		  if (state.flowing && !state.reading) stream.read(0);
		}

		Readable.prototype.pause = function () {
		  debug('call pause flowing=%j', this._readableState.flowing);
		  if (false !== this._readableState.flowing) {
		    debug('pause');
		    this._readableState.flowing = false;
		    this.emit('pause');
		  }
		  return this;
		};

		function flow(stream) {
		  var state = stream._readableState;
		  debug('flow', state.flowing);
		  while (state.flowing && stream.read() !== null) {}
		}

		// wrap an old-style stream as the async data source.
		// This is *not* part of the readable stream interface.
		// It is an ugly unfortunate mess of history.
		Readable.prototype.wrap = function (stream) {
		  var _this = this;

		  var state = this._readableState;
		  var paused = false;

		  stream.on('end', function () {
		    debug('wrapped end');
		    if (state.decoder && !state.ended) {
		      var chunk = state.decoder.end();
		      if (chunk && chunk.length) _this.push(chunk);
		    }

		    _this.push(null);
		  });

		  stream.on('data', function (chunk) {
		    debug('wrapped data');
		    if (state.decoder) chunk = state.decoder.write(chunk);

		    // don't skip over falsy values in objectMode
		    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

		    var ret = _this.push(chunk);
		    if (!ret) {
		      paused = true;
		      stream.pause();
		    }
		  });

		  // proxy all the other methods.
		  // important when wrapping filters and duplexes.
		  for (var i in stream) {
		    if (this[i] === undefined && typeof stream[i] === 'function') {
		      this[i] = function (method) {
		        return function () {
		          return stream[method].apply(stream, arguments);
		        };
		      }(i);
		    }
		  }

		  // proxy certain important events.
		  for (var n = 0; n < kProxyEvents.length; n++) {
		    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
		  }

		  // when we try to consume some more bytes, simply unpause the
		  // underlying stream.
		  this._read = function (n) {
		    debug('wrapped _read', n);
		    if (paused) {
		      paused = false;
		      stream.resume();
		    }
		  };

		  return this;
		};

		Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
		  // making it explicit this property is not enumerable
		  // because otherwise some prototype manipulation in
		  // userland will fail
		  enumerable: false,
		  get: function () {
		    return this._readableState.highWaterMark;
		  }
		});

		// exposed for testing purposes only.
		Readable._fromList = fromList;

		// Pluck off n bytes from an array of buffers.
		// Length is the combined lengths of all the buffers in the list.
		// This function is designed to be inlinable, so please take care when making
		// changes to the function body.
		function fromList(n, state) {
		  // nothing buffered
		  if (state.length === 0) return null;

		  var ret;
		  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
		    // read it all, truncate the list
		    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
		    state.buffer.clear();
		  } else {
		    // read part of list
		    ret = fromListPartial(n, state.buffer, state.decoder);
		  }

		  return ret;
		}

		// Extracts only enough buffered data to satisfy the amount requested.
		// This function is designed to be inlinable, so please take care when making
		// changes to the function body.
		function fromListPartial(n, list, hasStrings) {
		  var ret;
		  if (n < list.head.data.length) {
		    // slice is the same for buffers and strings
		    ret = list.head.data.slice(0, n);
		    list.head.data = list.head.data.slice(n);
		  } else if (n === list.head.data.length) {
		    // first chunk is a perfect match
		    ret = list.shift();
		  } else {
		    // result spans more than one buffer
		    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
		  }
		  return ret;
		}

		// Copies a specified amount of characters from the list of buffered data
		// chunks.
		// This function is designed to be inlinable, so please take care when making
		// changes to the function body.
		function copyFromBufferString(n, list) {
		  var p = list.head;
		  var c = 1;
		  var ret = p.data;
		  n -= ret.length;
		  while (p = p.next) {
		    var str = p.data;
		    var nb = n > str.length ? str.length : n;
		    if (nb === str.length) ret += str;else ret += str.slice(0, n);
		    n -= nb;
		    if (n === 0) {
		      if (nb === str.length) {
		        ++c;
		        if (p.next) list.head = p.next;else list.head = list.tail = null;
		      } else {
		        list.head = p;
		        p.data = str.slice(nb);
		      }
		      break;
		    }
		    ++c;
		  }
		  list.length -= c;
		  return ret;
		}

		// Copies a specified amount of bytes from the list of buffered data chunks.
		// This function is designed to be inlinable, so please take care when making
		// changes to the function body.
		function copyFromBuffer(n, list) {
		  var ret = Buffer.allocUnsafe(n);
		  var p = list.head;
		  var c = 1;
		  p.data.copy(ret);
		  n -= p.data.length;
		  while (p = p.next) {
		    var buf = p.data;
		    var nb = n > buf.length ? buf.length : n;
		    buf.copy(ret, ret.length - n, 0, nb);
		    n -= nb;
		    if (n === 0) {
		      if (nb === buf.length) {
		        ++c;
		        if (p.next) list.head = p.next;else list.head = list.tail = null;
		      } else {
		        list.head = p;
		        p.data = buf.slice(nb);
		      }
		      break;
		    }
		    ++c;
		  }
		  list.length -= c;
		  return ret;
		}

		function endReadable(stream) {
		  var state = stream._readableState;

		  // If we get here before consuming all the bytes, then that is a
		  // bug in node.  Should never happen.
		  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

		  if (!state.endEmitted) {
		    state.ended = true;
		    pna.nextTick(endReadableNT, state, stream);
		  }
		}

		function endReadableNT(state, stream) {
		  // Check that we didn't get one last unshift.
		  if (!state.endEmitted && state.length === 0) {
		    state.endEmitted = true;
		    stream.readable = false;
		    stream.emit('end');
		  }
		}

		function indexOf(xs, x) {
		  for (var i = 0, l = xs.length; i < l; i++) {
		    if (xs[i] === x) return i;
		  }
		  return -1;
		}
		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(37)))

	/***/ }),
	/* 37 */
	/***/ (function(module, exports) {

		// shim for using process in browser
		var process = module.exports = {};

		// cached from whatever global is present so that test runners that stub it
		// don't break things.  But we need to wrap it in a try catch in case it is
		// wrapped in strict mode code which doesn't define any globals.  It's inside a
		// function because try/catches deoptimize in certain engines.

		var cachedSetTimeout;
		var cachedClearTimeout;

		function defaultSetTimout() {
		    throw new Error('setTimeout has not been defined');
		}
		function defaultClearTimeout () {
		    throw new Error('clearTimeout has not been defined');
		}
		(function () {
		    try {
		        if (typeof setTimeout === 'function') {
		            cachedSetTimeout = setTimeout;
		        } else {
		            cachedSetTimeout = defaultSetTimout;
		        }
		    } catch (e) {
		        cachedSetTimeout = defaultSetTimout;
		    }
		    try {
		        if (typeof clearTimeout === 'function') {
		            cachedClearTimeout = clearTimeout;
		        } else {
		            cachedClearTimeout = defaultClearTimeout;
		        }
		    } catch (e) {
		        cachedClearTimeout = defaultClearTimeout;
		    }
		} ())
		function runTimeout(fun) {
		    if (cachedSetTimeout === setTimeout) {
		        //normal enviroments in sane situations
		        return setTimeout(fun, 0);
		    }
		    // if setTimeout wasn't available but was latter defined
		    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
		        cachedSetTimeout = setTimeout;
		        return setTimeout(fun, 0);
		    }
		    try {
		        // when when somebody has screwed with setTimeout but no I.E. maddness
		        return cachedSetTimeout(fun, 0);
		    } catch(e){
		        try {
		            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
		            return cachedSetTimeout.call(null, fun, 0);
		        } catch(e){
		            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
		            return cachedSetTimeout.call(this, fun, 0);
		        }
		    }


		}
		function runClearTimeout(marker) {
		    if (cachedClearTimeout === clearTimeout) {
		        //normal enviroments in sane situations
		        return clearTimeout(marker);
		    }
		    // if clearTimeout wasn't available but was latter defined
		    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
		        cachedClearTimeout = clearTimeout;
		        return clearTimeout(marker);
		    }
		    try {
		        // when when somebody has screwed with setTimeout but no I.E. maddness
		        return cachedClearTimeout(marker);
		    } catch (e){
		        try {
		            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
		            return cachedClearTimeout.call(null, marker);
		        } catch (e){
		            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
		            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
		            return cachedClearTimeout.call(this, marker);
		        }
		    }



		}
		var queue = [];
		var draining = false;
		var currentQueue;
		var queueIndex = -1;

		function cleanUpNextTick() {
		    if (!draining || !currentQueue) {
		        return;
		    }
		    draining = false;
		    if (currentQueue.length) {
		        queue = currentQueue.concat(queue);
		    } else {
		        queueIndex = -1;
		    }
		    if (queue.length) {
		        drainQueue();
		    }
		}

		function drainQueue() {
		    if (draining) {
		        return;
		    }
		    var timeout = runTimeout(cleanUpNextTick);
		    draining = true;

		    var len = queue.length;
		    while(len) {
		        currentQueue = queue;
		        queue = [];
		        while (++queueIndex < len) {
		            if (currentQueue) {
		                currentQueue[queueIndex].run();
		            }
		        }
		        queueIndex = -1;
		        len = queue.length;
		    }
		    currentQueue = null;
		    draining = false;
		    runClearTimeout(timeout);
		}

		process.nextTick = function (fun) {
		    var args = new Array(arguments.length - 1);
		    if (arguments.length > 1) {
		        for (var i = 1; i < arguments.length; i++) {
		            args[i - 1] = arguments[i];
		        }
		    }
		    queue.push(new Item(fun, args));
		    if (queue.length === 1 && !draining) {
		        runTimeout(drainQueue);
		    }
		};

		// v8 likes predictible objects
		function Item(fun, array) {
		    this.fun = fun;
		    this.array = array;
		}
		Item.prototype.run = function () {
		    this.fun.apply(null, this.array);
		};
		process.title = 'browser';
		process.browser = true;
		process.env = {};
		process.argv = [];
		process.version = ''; // empty string to avoid regexp issues
		process.versions = {};

		function noop() {}

		process.on = noop;
		process.addListener = noop;
		process.once = noop;
		process.off = noop;
		process.removeListener = noop;
		process.removeAllListeners = noop;
		process.emit = noop;
		process.prependListener = noop;
		process.prependOnceListener = noop;

		process.listeners = function (name) { return [] }

		process.binding = function (name) {
		    throw new Error('process.binding is not supported');
		};

		process.cwd = function () { return '/' };
		process.chdir = function (dir) {
		    throw new Error('process.chdir is not supported');
		};
		process.umask = function() { return 0; };


	/***/ }),
	/* 38 */
	/***/ (function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {'use strict';

		if (typeof process === 'undefined' ||
		    !process.version ||
		    process.version.indexOf('v0.') === 0 ||
		    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
		  module.exports = { nextTick: nextTick };
		} else {
		  module.exports = process
		}

		function nextTick(fn, arg1, arg2, arg3) {
		  if (typeof fn !== 'function') {
		    throw new TypeError('"callback" argument must be a function');
		  }
		  var len = arguments.length;
		  var args, i;
		  switch (len) {
		  case 0:
		  case 1:
		    return process.nextTick(fn);
		  case 2:
		    return process.nextTick(function afterTickOne() {
		      fn.call(null, arg1);
		    });
		  case 3:
		    return process.nextTick(function afterTickTwo() {
		      fn.call(null, arg1, arg2);
		    });
		  case 4:
		    return process.nextTick(function afterTickThree() {
		      fn.call(null, arg1, arg2, arg3);
		    });
		  default:
		    args = new Array(len - 1);
		    i = 0;
		    while (i < args.length) {
		      args[i++] = arguments[i];
		    }
		    return process.nextTick(function afterTick() {
		      fn.apply(null, args);
		    });
		  }
		}


		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(37)))

	/***/ }),
	/* 39 */
	/***/ (function(module, exports, __webpack_require__) {

		module.exports = __webpack_require__(33).EventEmitter;


	/***/ }),
	/* 40 */
	/***/ (function(module, exports, __webpack_require__) {

		/* eslint-disable node/no-deprecated-api */
		var buffer = __webpack_require__(28)
		var Buffer = buffer.Buffer

		// alternative to using Object.keys for old browsers
		function copyProps (src, dst) {
		  for (var key in src) {
		    dst[key] = src[key]
		  }
		}
		if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
		  module.exports = buffer
		} else {
		  // Copy properties from require('buffer')
		  copyProps(buffer, exports)
		  exports.Buffer = SafeBuffer
		}

		function SafeBuffer (arg, encodingOrOffset, length) {
		  return Buffer(arg, encodingOrOffset, length)
		}

		// Copy static methods from Buffer
		copyProps(Buffer, SafeBuffer)

		SafeBuffer.from = function (arg, encodingOrOffset, length) {
		  if (typeof arg === 'number') {
		    throw new TypeError('Argument must not be a number')
		  }
		  return Buffer(arg, encodingOrOffset, length)
		}

		SafeBuffer.alloc = function (size, fill, encoding) {
		  if (typeof size !== 'number') {
		    throw new TypeError('Argument must be a number')
		  }
		  var buf = Buffer(size)
		  if (fill !== undefined) {
		    if (typeof encoding === 'string') {
		      buf.fill(fill, encoding)
		    } else {
		      buf.fill(fill)
		    }
		  } else {
		    buf.fill(0)
		  }
		  return buf
		}

		SafeBuffer.allocUnsafe = function (size) {
		  if (typeof size !== 'number') {
		    throw new TypeError('Argument must be a number')
		  }
		  return Buffer(size)
		}

		SafeBuffer.allocUnsafeSlow = function (size) {
		  if (typeof size !== 'number') {
		    throw new TypeError('Argument must be a number')
		  }
		  return buffer.SlowBuffer(size)
		}


	/***/ }),
	/* 41 */
	/***/ (function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.

		// NOTE: These type checking functions intentionally don't use `instanceof`
		// because it is fragile and can be easily faked with `Object.create()`.

		function isArray(arg) {
		  if (Array.isArray) {
		    return Array.isArray(arg);
		  }
		  return objectToString(arg) === '[object Array]';
		}
		exports.isArray = isArray;

		function isBoolean(arg) {
		  return typeof arg === 'boolean';
		}
		exports.isBoolean = isBoolean;

		function isNull(arg) {
		  return arg === null;
		}
		exports.isNull = isNull;

		function isNullOrUndefined(arg) {
		  return arg == null;
		}
		exports.isNullOrUndefined = isNullOrUndefined;

		function isNumber(arg) {
		  return typeof arg === 'number';
		}
		exports.isNumber = isNumber;

		function isString(arg) {
		  return typeof arg === 'string';
		}
		exports.isString = isString;

		function isSymbol(arg) {
		  return typeof arg === 'symbol';
		}
		exports.isSymbol = isSymbol;

		function isUndefined(arg) {
		  return arg === void 0;
		}
		exports.isUndefined = isUndefined;

		function isRegExp(re) {
		  return objectToString(re) === '[object RegExp]';
		}
		exports.isRegExp = isRegExp;

		function isObject(arg) {
		  return typeof arg === 'object' && arg !== null;
		}
		exports.isObject = isObject;

		function isDate(d) {
		  return objectToString(d) === '[object Date]';
		}
		exports.isDate = isDate;

		function isError(e) {
		  return (objectToString(e) === '[object Error]' || e instanceof Error);
		}
		exports.isError = isError;

		function isFunction(arg) {
		  return typeof arg === 'function';
		}
		exports.isFunction = isFunction;

		function isPrimitive(arg) {
		  return arg === null ||
		         typeof arg === 'boolean' ||
		         typeof arg === 'number' ||
		         typeof arg === 'string' ||
		         typeof arg === 'symbol' ||  // ES6 symbol
		         typeof arg === 'undefined';
		}
		exports.isPrimitive = isPrimitive;

		exports.isBuffer = Buffer.isBuffer;

		function objectToString(o) {
		  return Object.prototype.toString.call(o);
		}

		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28).Buffer))

	/***/ }),
	/* 42 */
	/***/ (function(module, exports) {

		/* (ignored) */

	/***/ }),
	/* 43 */
	/***/ (function(module, exports, __webpack_require__) {

		'use strict';

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		var Buffer = __webpack_require__(40).Buffer;
		var util = __webpack_require__(44);

		function copyBuffer(src, target, offset) {
		  src.copy(target, offset);
		}

		module.exports = function () {
		  function BufferList() {
		    _classCallCheck(this, BufferList);

		    this.head = null;
		    this.tail = null;
		    this.length = 0;
		  }

		  BufferList.prototype.push = function push(v) {
		    var entry = { data: v, next: null };
		    if (this.length > 0) this.tail.next = entry;else this.head = entry;
		    this.tail = entry;
		    ++this.length;
		  };

		  BufferList.prototype.unshift = function unshift(v) {
		    var entry = { data: v, next: this.head };
		    if (this.length === 0) this.tail = entry;
		    this.head = entry;
		    ++this.length;
		  };

		  BufferList.prototype.shift = function shift() {
		    if (this.length === 0) return;
		    var ret = this.head.data;
		    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
		    --this.length;
		    return ret;
		  };

		  BufferList.prototype.clear = function clear() {
		    this.head = this.tail = null;
		    this.length = 0;
		  };

		  BufferList.prototype.join = function join(s) {
		    if (this.length === 0) return '';
		    var p = this.head;
		    var ret = '' + p.data;
		    while (p = p.next) {
		      ret += s + p.data;
		    }return ret;
		  };

		  BufferList.prototype.concat = function concat(n) {
		    if (this.length === 0) return Buffer.alloc(0);
		    if (this.length === 1) return this.head.data;
		    var ret = Buffer.allocUnsafe(n >>> 0);
		    var p = this.head;
		    var i = 0;
		    while (p) {
		      copyBuffer(p.data, ret, i);
		      i += p.data.length;
		      p = p.next;
		    }
		    return ret;
		  };

		  return BufferList;
		}();

		if (util && util.inspect && util.inspect.custom) {
		  module.exports.prototype[util.inspect.custom] = function () {
		    var obj = util.inspect({ length: this.length });
		    return this.constructor.name + ' ' + obj;
		  };
		}

	/***/ }),
	/* 44 */
	/***/ (function(module, exports) {

		/* (ignored) */

	/***/ }),
	/* 45 */
	/***/ (function(module, exports, __webpack_require__) {

		'use strict';

		/*<replacement>*/

		var pna = __webpack_require__(38);
		/*</replacement>*/

		// undocumented cb() API, needed for core, not for public API
		function destroy(err, cb) {
		  var _this = this;

		  var readableDestroyed = this._readableState && this._readableState.destroyed;
		  var writableDestroyed = this._writableState && this._writableState.destroyed;

		  if (readableDestroyed || writableDestroyed) {
		    if (cb) {
		      cb(err);
		    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
		      pna.nextTick(emitErrorNT, this, err);
		    }
		    return this;
		  }

		  // we set destroyed to true before firing error callbacks in order
		  // to make it re-entrance safe in case destroy() is called within callbacks

		  if (this._readableState) {
		    this._readableState.destroyed = true;
		  }

		  // if this is a duplex stream mark the writable part as destroyed as well
		  if (this._writableState) {
		    this._writableState.destroyed = true;
		  }

		  this._destroy(err || null, function (err) {
		    if (!cb && err) {
		      pna.nextTick(emitErrorNT, _this, err);
		      if (_this._writableState) {
		        _this._writableState.errorEmitted = true;
		      }
		    } else if (cb) {
		      cb(err);
		    }
		  });

		  return this;
		}

		function undestroy() {
		  if (this._readableState) {
		    this._readableState.destroyed = false;
		    this._readableState.reading = false;
		    this._readableState.ended = false;
		    this._readableState.endEmitted = false;
		  }

		  if (this._writableState) {
		    this._writableState.destroyed = false;
		    this._writableState.ended = false;
		    this._writableState.ending = false;
		    this._writableState.finished = false;
		    this._writableState.errorEmitted = false;
		  }
		}

		function emitErrorNT(self, err) {
		  self.emit('error', err);
		}

		module.exports = {
		  destroy: destroy,
		  undestroy: undestroy
		};

	/***/ }),
	/* 46 */
	/***/ (function(module, exports, __webpack_require__) {

		// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.

		// a duplex stream is just a stream that is both readable and writable.
		// Since JS doesn't have multiple prototypal inheritance, this class
		// prototypally inherits from Readable, and then parasitically from
		// Writable.

		'use strict';

		/*<replacement>*/

		var pna = __webpack_require__(38);
		/*</replacement>*/

		/*<replacement>*/
		var objectKeys = Object.keys || function (obj) {
		  var keys = [];
		  for (var key in obj) {
		    keys.push(key);
		  }return keys;
		};
		/*</replacement>*/

		module.exports = Duplex;

		/*<replacement>*/
		var util = Object.create(__webpack_require__(41));
		util.inherits = __webpack_require__(34);
		/*</replacement>*/

		var Readable = __webpack_require__(36);
		var Writable = __webpack_require__(47);

		util.inherits(Duplex, Readable);

		{
		  // avoid scope creep, the keys array can then be collected
		  var keys = objectKeys(Writable.prototype);
		  for (var v = 0; v < keys.length; v++) {
		    var method = keys[v];
		    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
		  }
		}

		function Duplex(options) {
		  if (!(this instanceof Duplex)) return new Duplex(options);

		  Readable.call(this, options);
		  Writable.call(this, options);

		  if (options && options.readable === false) this.readable = false;

		  if (options && options.writable === false) this.writable = false;

		  this.allowHalfOpen = true;
		  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

		  this.once('end', onend);
		}

		Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
		  // making it explicit this property is not enumerable
		  // because otherwise some prototype manipulation in
		  // userland will fail
		  enumerable: false,
		  get: function () {
		    return this._writableState.highWaterMark;
		  }
		});

		// the no-half-open enforcer
		function onend() {
		  // if we allow half-open state, or if the writable side ended,
		  // then we're ok.
		  if (this.allowHalfOpen || this._writableState.ended) return;

		  // no more data can be written.
		  // But allow more writes to happen in this tick.
		  pna.nextTick(onEndNT, this);
		}

		function onEndNT(self) {
		  self.end();
		}

		Object.defineProperty(Duplex.prototype, 'destroyed', {
		  get: function () {
		    if (this._readableState === undefined || this._writableState === undefined) {
		      return false;
		    }
		    return this._readableState.destroyed && this._writableState.destroyed;
		  },
		  set: function (value) {
		    // we ignore the value if the stream
		    // has not been initialized yet
		    if (this._readableState === undefined || this._writableState === undefined) {
		      return;
		    }

		    // backward compatibility, the user is explicitly
		    // managing destroyed
		    this._readableState.destroyed = value;
		    this._writableState.destroyed = value;
		  }
		});

		Duplex.prototype._destroy = function (err, cb) {
		  this.push(null);
		  this.end();

		  pna.nextTick(cb, err);
		};

	/***/ }),
	/* 47 */
	/***/ (function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process, setImmediate, global) {// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.

		// A bit simpler than readable streams.
		// Implement an async ._write(chunk, encoding, cb), and it'll handle all
		// the drain event emission and buffering.

		'use strict';

		/*<replacement>*/

		var pna = __webpack_require__(38);
		/*</replacement>*/

		module.exports = Writable;

		/* <replacement> */
		function WriteReq(chunk, encoding, cb) {
		  this.chunk = chunk;
		  this.encoding = encoding;
		  this.callback = cb;
		  this.next = null;
		}

		// It seems a linked list but it is not
		// there will be only 2 of these for each stream
		function CorkedRequest(state) {
		  var _this = this;

		  this.next = null;
		  this.entry = null;
		  this.finish = function () {
		    onCorkedFinish(_this, state);
		  };
		}
		/* </replacement> */

		/*<replacement>*/
		var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
		/*</replacement>*/

		/*<replacement>*/
		var Duplex;
		/*</replacement>*/

		Writable.WritableState = WritableState;

		/*<replacement>*/
		var util = Object.create(__webpack_require__(41));
		util.inherits = __webpack_require__(34);
		/*</replacement>*/

		/*<replacement>*/
		var internalUtil = {
		  deprecate: __webpack_require__(50)
		};
		/*</replacement>*/

		/*<replacement>*/
		var Stream = __webpack_require__(39);
		/*</replacement>*/

		/*<replacement>*/

		var Buffer = __webpack_require__(40).Buffer;
		var OurUint8Array = global.Uint8Array || function () {};
		function _uint8ArrayToBuffer(chunk) {
		  return Buffer.from(chunk);
		}
		function _isUint8Array(obj) {
		  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
		}

		/*</replacement>*/

		var destroyImpl = __webpack_require__(45);

		util.inherits(Writable, Stream);

		function nop() {}

		function WritableState(options, stream) {
		  Duplex = Duplex || __webpack_require__(46);

		  options = options || {};

		  // Duplex streams are both readable and writable, but share
		  // the same options object.
		  // However, some cases require setting options to different
		  // values for the readable and the writable sides of the duplex stream.
		  // These options can be provided separately as readableXXX and writableXXX.
		  var isDuplex = stream instanceof Duplex;

		  // object stream flag to indicate whether or not this stream
		  // contains buffers or objects.
		  this.objectMode = !!options.objectMode;

		  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

		  // the point at which write() starts returning false
		  // Note: 0 is a valid value, means that we always return false if
		  // the entire buffer is not flushed immediately on write()
		  var hwm = options.highWaterMark;
		  var writableHwm = options.writableHighWaterMark;
		  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

		  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

		  // cast to ints.
		  this.highWaterMark = Math.floor(this.highWaterMark);

		  // if _final has been called
		  this.finalCalled = false;

		  // drain event flag.
		  this.needDrain = false;
		  // at the start of calling end()
		  this.ending = false;
		  // when end() has been called, and returned
		  this.ended = false;
		  // when 'finish' is emitted
		  this.finished = false;

		  // has it been destroyed
		  this.destroyed = false;

		  // should we decode strings into buffers before passing to _write?
		  // this is here so that some node-core streams can optimize string
		  // handling at a lower level.
		  var noDecode = options.decodeStrings === false;
		  this.decodeStrings = !noDecode;

		  // Crypto is kind of old and crusty.  Historically, its default string
		  // encoding is 'binary' so we have to make this configurable.
		  // Everything else in the universe uses 'utf8', though.
		  this.defaultEncoding = options.defaultEncoding || 'utf8';

		  // not an actual buffer we keep track of, but a measurement
		  // of how much we're waiting to get pushed to some underlying
		  // socket or file.
		  this.length = 0;

		  // a flag to see when we're in the middle of a write.
		  this.writing = false;

		  // when true all writes will be buffered until .uncork() call
		  this.corked = 0;

		  // a flag to be able to tell if the onwrite cb is called immediately,
		  // or on a later tick.  We set this to true at first, because any
		  // actions that shouldn't happen until "later" should generally also
		  // not happen before the first write call.
		  this.sync = true;

		  // a flag to know if we're processing previously buffered items, which
		  // may call the _write() callback in the same tick, so that we don't
		  // end up in an overlapped onwrite situation.
		  this.bufferProcessing = false;

		  // the callback that's passed to _write(chunk,cb)
		  this.onwrite = function (er) {
		    onwrite(stream, er);
		  };

		  // the callback that the user supplies to write(chunk,encoding,cb)
		  this.writecb = null;

		  // the amount that is being written when _write is called.
		  this.writelen = 0;

		  this.bufferedRequest = null;
		  this.lastBufferedRequest = null;

		  // number of pending user-supplied write callbacks
		  // this must be 0 before 'finish' can be emitted
		  this.pendingcb = 0;

		  // emit prefinish if the only thing we're waiting for is _write cbs
		  // This is relevant for synchronous Transform streams
		  this.prefinished = false;

		  // True if the error was already emitted and should not be thrown again
		  this.errorEmitted = false;

		  // count buffered requests
		  this.bufferedRequestCount = 0;

		  // allocate the first CorkedRequest, there is always
		  // one allocated and free to use, and we maintain at most two
		  this.corkedRequestsFree = new CorkedRequest(this);
		}

		WritableState.prototype.getBuffer = function getBuffer() {
		  var current = this.bufferedRequest;
		  var out = [];
		  while (current) {
		    out.push(current);
		    current = current.next;
		  }
		  return out;
		};

		(function () {
		  try {
		    Object.defineProperty(WritableState.prototype, 'buffer', {
		      get: internalUtil.deprecate(function () {
		        return this.getBuffer();
		      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
		    });
		  } catch (_) {}
		})();

		// Test _writableState for inheritance to account for Duplex streams,
		// whose prototype chain only points to Readable.
		var realHasInstance;
		if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
		  realHasInstance = Function.prototype[Symbol.hasInstance];
		  Object.defineProperty(Writable, Symbol.hasInstance, {
		    value: function (object) {
		      if (realHasInstance.call(this, object)) return true;
		      if (this !== Writable) return false;

		      return object && object._writableState instanceof WritableState;
		    }
		  });
		} else {
		  realHasInstance = function (object) {
		    return object instanceof this;
		  };
		}

		function Writable(options) {
		  Duplex = Duplex || __webpack_require__(46);

		  // Writable ctor is applied to Duplexes, too.
		  // `realHasInstance` is necessary because using plain `instanceof`
		  // would return false, as no `_writableState` property is attached.

		  // Trying to use the custom `instanceof` for Writable here will also break the
		  // Node.js LazyTransform implementation, which has a non-trivial getter for
		  // `_writableState` that would lead to infinite recursion.
		  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
		    return new Writable(options);
		  }

		  this._writableState = new WritableState(options, this);

		  // legacy.
		  this.writable = true;

		  if (options) {
		    if (typeof options.write === 'function') this._write = options.write;

		    if (typeof options.writev === 'function') this._writev = options.writev;

		    if (typeof options.destroy === 'function') this._destroy = options.destroy;

		    if (typeof options.final === 'function') this._final = options.final;
		  }

		  Stream.call(this);
		}

		// Otherwise people can pipe Writable streams, which is just wrong.
		Writable.prototype.pipe = function () {
		  this.emit('error', new Error('Cannot pipe, not readable'));
		};

		function writeAfterEnd(stream, cb) {
		  var er = new Error('write after end');
		  // TODO: defer error events consistently everywhere, not just the cb
		  stream.emit('error', er);
		  pna.nextTick(cb, er);
		}

		// Checks that a user-supplied chunk is valid, especially for the particular
		// mode the stream is in. Currently this means that `null` is never accepted
		// and undefined/non-string values are only allowed in object mode.
		function validChunk(stream, state, chunk, cb) {
		  var valid = true;
		  var er = false;

		  if (chunk === null) {
		    er = new TypeError('May not write null values to stream');
		  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
		    er = new TypeError('Invalid non-string/buffer chunk');
		  }
		  if (er) {
		    stream.emit('error', er);
		    pna.nextTick(cb, er);
		    valid = false;
		  }
		  return valid;
		}

		Writable.prototype.write = function (chunk, encoding, cb) {
		  var state = this._writableState;
		  var ret = false;
		  var isBuf = !state.objectMode && _isUint8Array(chunk);

		  if (isBuf && !Buffer.isBuffer(chunk)) {
		    chunk = _uint8ArrayToBuffer(chunk);
		  }

		  if (typeof encoding === 'function') {
		    cb = encoding;
		    encoding = null;
		  }

		  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

		  if (typeof cb !== 'function') cb = nop;

		  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
		    state.pendingcb++;
		    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
		  }

		  return ret;
		};

		Writable.prototype.cork = function () {
		  var state = this._writableState;

		  state.corked++;
		};

		Writable.prototype.uncork = function () {
		  var state = this._writableState;

		  if (state.corked) {
		    state.corked--;

		    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
		  }
		};

		Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
		  // node::ParseEncoding() requires lower case.
		  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
		  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
		  this._writableState.defaultEncoding = encoding;
		  return this;
		};

		function decodeChunk(state, chunk, encoding) {
		  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
		    chunk = Buffer.from(chunk, encoding);
		  }
		  return chunk;
		}

		Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
		  // making it explicit this property is not enumerable
		  // because otherwise some prototype manipulation in
		  // userland will fail
		  enumerable: false,
		  get: function () {
		    return this._writableState.highWaterMark;
		  }
		});

		// if we're already writing something, then just put this
		// in the queue, and wait our turn.  Otherwise, call _write
		// If we return false, then we need a drain event, so set that flag.
		function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
		  if (!isBuf) {
		    var newChunk = decodeChunk(state, chunk, encoding);
		    if (chunk !== newChunk) {
		      isBuf = true;
		      encoding = 'buffer';
		      chunk = newChunk;
		    }
		  }
		  var len = state.objectMode ? 1 : chunk.length;

		  state.length += len;

		  var ret = state.length < state.highWaterMark;
		  // we must ensure that previous needDrain will not be reset to false.
		  if (!ret) state.needDrain = true;

		  if (state.writing || state.corked) {
		    var last = state.lastBufferedRequest;
		    state.lastBufferedRequest = {
		      chunk: chunk,
		      encoding: encoding,
		      isBuf: isBuf,
		      callback: cb,
		      next: null
		    };
		    if (last) {
		      last.next = state.lastBufferedRequest;
		    } else {
		      state.bufferedRequest = state.lastBufferedRequest;
		    }
		    state.bufferedRequestCount += 1;
		  } else {
		    doWrite(stream, state, false, len, chunk, encoding, cb);
		  }

		  return ret;
		}

		function doWrite(stream, state, writev, len, chunk, encoding, cb) {
		  state.writelen = len;
		  state.writecb = cb;
		  state.writing = true;
		  state.sync = true;
		  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
		  state.sync = false;
		}

		function onwriteError(stream, state, sync, er, cb) {
		  --state.pendingcb;

		  if (sync) {
		    // defer the callback if we are being called synchronously
		    // to avoid piling up things on the stack
		    pna.nextTick(cb, er);
		    // this can emit finish, and it will always happen
		    // after error
		    pna.nextTick(finishMaybe, stream, state);
		    stream._writableState.errorEmitted = true;
		    stream.emit('error', er);
		  } else {
		    // the caller expect this to happen before if
		    // it is async
		    cb(er);
		    stream._writableState.errorEmitted = true;
		    stream.emit('error', er);
		    // this can emit finish, but finish must
		    // always follow error
		    finishMaybe(stream, state);
		  }
		}

		function onwriteStateUpdate(state) {
		  state.writing = false;
		  state.writecb = null;
		  state.length -= state.writelen;
		  state.writelen = 0;
		}

		function onwrite(stream, er) {
		  var state = stream._writableState;
		  var sync = state.sync;
		  var cb = state.writecb;

		  onwriteStateUpdate(state);

		  if (er) onwriteError(stream, state, sync, er, cb);else {
		    // Check if we're actually ready to finish, but don't emit yet
		    var finished = needFinish(state);

		    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
		      clearBuffer(stream, state);
		    }

		    if (sync) {
		      /*<replacement>*/
		      asyncWrite(afterWrite, stream, state, finished, cb);
		      /*</replacement>*/
		    } else {
		      afterWrite(stream, state, finished, cb);
		    }
		  }
		}

		function afterWrite(stream, state, finished, cb) {
		  if (!finished) onwriteDrain(stream, state);
		  state.pendingcb--;
		  cb();
		  finishMaybe(stream, state);
		}

		// Must force callback to be called on nextTick, so that we don't
		// emit 'drain' before the write() consumer gets the 'false' return
		// value, and has a chance to attach a 'drain' listener.
		function onwriteDrain(stream, state) {
		  if (state.length === 0 && state.needDrain) {
		    state.needDrain = false;
		    stream.emit('drain');
		  }
		}

		// if there's something in the buffer waiting, then process it
		function clearBuffer(stream, state) {
		  state.bufferProcessing = true;
		  var entry = state.bufferedRequest;

		  if (stream._writev && entry && entry.next) {
		    // Fast case, write everything using _writev()
		    var l = state.bufferedRequestCount;
		    var buffer = new Array(l);
		    var holder = state.corkedRequestsFree;
		    holder.entry = entry;

		    var count = 0;
		    var allBuffers = true;
		    while (entry) {
		      buffer[count] = entry;
		      if (!entry.isBuf) allBuffers = false;
		      entry = entry.next;
		      count += 1;
		    }
		    buffer.allBuffers = allBuffers;

		    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

		    // doWrite is almost always async, defer these to save a bit of time
		    // as the hot path ends with doWrite
		    state.pendingcb++;
		    state.lastBufferedRequest = null;
		    if (holder.next) {
		      state.corkedRequestsFree = holder.next;
		      holder.next = null;
		    } else {
		      state.corkedRequestsFree = new CorkedRequest(state);
		    }
		    state.bufferedRequestCount = 0;
		  } else {
		    // Slow case, write chunks one-by-one
		    while (entry) {
		      var chunk = entry.chunk;
		      var encoding = entry.encoding;
		      var cb = entry.callback;
		      var len = state.objectMode ? 1 : chunk.length;

		      doWrite(stream, state, false, len, chunk, encoding, cb);
		      entry = entry.next;
		      state.bufferedRequestCount--;
		      // if we didn't call the onwrite immediately, then
		      // it means that we need to wait until it does.
		      // also, that means that the chunk and cb are currently
		      // being processed, so move the buffer counter past them.
		      if (state.writing) {
		        break;
		      }
		    }

		    if (entry === null) state.lastBufferedRequest = null;
		  }

		  state.bufferedRequest = entry;
		  state.bufferProcessing = false;
		}

		Writable.prototype._write = function (chunk, encoding, cb) {
		  cb(new Error('_write() is not implemented'));
		};

		Writable.prototype._writev = null;

		Writable.prototype.end = function (chunk, encoding, cb) {
		  var state = this._writableState;

		  if (typeof chunk === 'function') {
		    cb = chunk;
		    chunk = null;
		    encoding = null;
		  } else if (typeof encoding === 'function') {
		    cb = encoding;
		    encoding = null;
		  }

		  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

		  // .end() fully uncorks
		  if (state.corked) {
		    state.corked = 1;
		    this.uncork();
		  }

		  // ignore unnecessary end() calls.
		  if (!state.ending && !state.finished) endWritable(this, state, cb);
		};

		function needFinish(state) {
		  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
		}
		function callFinal(stream, state) {
		  stream._final(function (err) {
		    state.pendingcb--;
		    if (err) {
		      stream.emit('error', err);
		    }
		    state.prefinished = true;
		    stream.emit('prefinish');
		    finishMaybe(stream, state);
		  });
		}
		function prefinish(stream, state) {
		  if (!state.prefinished && !state.finalCalled) {
		    if (typeof stream._final === 'function') {
		      state.pendingcb++;
		      state.finalCalled = true;
		      pna.nextTick(callFinal, stream, state);
		    } else {
		      state.prefinished = true;
		      stream.emit('prefinish');
		    }
		  }
		}

		function finishMaybe(stream, state) {
		  var need = needFinish(state);
		  if (need) {
		    prefinish(stream, state);
		    if (state.pendingcb === 0) {
		      state.finished = true;
		      stream.emit('finish');
		    }
		  }
		  return need;
		}

		function endWritable(stream, state, cb) {
		  state.ending = true;
		  finishMaybe(stream, state);
		  if (cb) {
		    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
		  }
		  state.ended = true;
		  stream.writable = false;
		}

		function onCorkedFinish(corkReq, state, err) {
		  var entry = corkReq.entry;
		  corkReq.entry = null;
		  while (entry) {
		    var cb = entry.callback;
		    state.pendingcb--;
		    cb(err);
		    entry = entry.next;
		  }
		  if (state.corkedRequestsFree) {
		    state.corkedRequestsFree.next = corkReq;
		  } else {
		    state.corkedRequestsFree = corkReq;
		  }
		}

		Object.defineProperty(Writable.prototype, 'destroyed', {
		  get: function () {
		    if (this._writableState === undefined) {
		      return false;
		    }
		    return this._writableState.destroyed;
		  },
		  set: function (value) {
		    // we ignore the value if the stream
		    // has not been initialized yet
		    if (!this._writableState) {
		      return;
		    }

		    // backward compatibility, the user is explicitly
		    // managing destroyed
		    this._writableState.destroyed = value;
		  }
		});

		Writable.prototype.destroy = destroyImpl.destroy;
		Writable.prototype._undestroy = destroyImpl.undestroy;
		Writable.prototype._destroy = function (err, cb) {
		  this.end();
		  cb(err);
		};
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(37), __webpack_require__(48).setImmediate, (function() { return this; }())))

	/***/ }),
	/* 48 */
	/***/ (function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
		            (typeof self !== "undefined" && self) ||
		            window;
		var apply = Function.prototype.apply;

		// DOM APIs, for completeness

		exports.setTimeout = function() {
		  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
		};
		exports.setInterval = function() {
		  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
		};
		exports.clearTimeout =
		exports.clearInterval = function(timeout) {
		  if (timeout) {
		    timeout.close();
		  }
		};

		function Timeout(id, clearFn) {
		  this._id = id;
		  this._clearFn = clearFn;
		}
		Timeout.prototype.unref = Timeout.prototype.ref = function() {};
		Timeout.prototype.close = function() {
		  this._clearFn.call(scope, this._id);
		};

		// Does not start the time, just sets up the members needed.
		exports.enroll = function(item, msecs) {
		  clearTimeout(item._idleTimeoutId);
		  item._idleTimeout = msecs;
		};

		exports.unenroll = function(item) {
		  clearTimeout(item._idleTimeoutId);
		  item._idleTimeout = -1;
		};

		exports._unrefActive = exports.active = function(item) {
		  clearTimeout(item._idleTimeoutId);

		  var msecs = item._idleTimeout;
		  if (msecs >= 0) {
		    item._idleTimeoutId = setTimeout(function onTimeout() {
		      if (item._onTimeout)
		        item._onTimeout();
		    }, msecs);
		  }
		};

		// setimmediate attaches itself to the global object
		__webpack_require__(49);
		// On some exotic environments, it's not clear which object `setimmediate` was
		// able to install onto.  Search each possibility in the same order as the
		// `setimmediate` library.
		exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
		                       (typeof global !== "undefined" && global.setImmediate) ||
		                       (this && this.setImmediate);
		exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
		                         (typeof global !== "undefined" && global.clearImmediate) ||
		                         (this && this.clearImmediate);

		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

	/***/ }),
	/* 49 */
	/***/ (function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
		    "use strict";

		    if (global.setImmediate) {
		        return;
		    }

		    var nextHandle = 1; // Spec says greater than zero
		    var tasksByHandle = {};
		    var currentlyRunningATask = false;
		    var doc = global.document;
		    var registerImmediate;

		    function setImmediate(callback) {
		      // Callback can either be a function or a string
		      if (typeof callback !== "function") {
		        callback = new Function("" + callback);
		      }
		      // Copy function arguments
		      var args = new Array(arguments.length - 1);
		      for (var i = 0; i < args.length; i++) {
		          args[i] = arguments[i + 1];
		      }
		      // Store and register the task
		      var task = { callback: callback, args: args };
		      tasksByHandle[nextHandle] = task;
		      registerImmediate(nextHandle);
		      return nextHandle++;
		    }

		    function clearImmediate(handle) {
		        delete tasksByHandle[handle];
		    }

		    function run(task) {
		        var callback = task.callback;
		        var args = task.args;
		        switch (args.length) {
		        case 0:
		            callback();
		            break;
		        case 1:
		            callback(args[0]);
		            break;
		        case 2:
		            callback(args[0], args[1]);
		            break;
		        case 3:
		            callback(args[0], args[1], args[2]);
		            break;
		        default:
		            callback.apply(undefined, args);
		            break;
		        }
		    }

		    function runIfPresent(handle) {
		        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
		        // So if we're currently running a task, we'll need to delay this invocation.
		        if (currentlyRunningATask) {
		            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
		            // "too much recursion" error.
		            setTimeout(runIfPresent, 0, handle);
		        } else {
		            var task = tasksByHandle[handle];
		            if (task) {
		                currentlyRunningATask = true;
		                try {
		                    run(task);
		                } finally {
		                    clearImmediate(handle);
		                    currentlyRunningATask = false;
		                }
		            }
		        }
		    }

		    function installNextTickImplementation() {
		        registerImmediate = function(handle) {
		            process.nextTick(function () { runIfPresent(handle); });
		        };
		    }

		    function canUsePostMessage() {
		        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
		        // where `global.postMessage` means something completely different and can't be used for this purpose.
		        if (global.postMessage && !global.importScripts) {
		            var postMessageIsAsynchronous = true;
		            var oldOnMessage = global.onmessage;
		            global.onmessage = function() {
		                postMessageIsAsynchronous = false;
		            };
		            global.postMessage("", "*");
		            global.onmessage = oldOnMessage;
		            return postMessageIsAsynchronous;
		        }
		    }

		    function installPostMessageImplementation() {
		        // Installs an event handler on `global` for the `message` event: see
		        // * https://developer.mozilla.org/en/DOM/window.postMessage
		        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

		        var messagePrefix = "setImmediate$" + Math.random() + "$";
		        var onGlobalMessage = function(event) {
		            if (event.source === global &&
		                typeof event.data === "string" &&
		                event.data.indexOf(messagePrefix) === 0) {
		                runIfPresent(+event.data.slice(messagePrefix.length));
		            }
		        };

		        if (global.addEventListener) {
		            global.addEventListener("message", onGlobalMessage, false);
		        } else {
		            global.attachEvent("onmessage", onGlobalMessage);
		        }

		        registerImmediate = function(handle) {
		            global.postMessage(messagePrefix + handle, "*");
		        };
		    }

		    function installMessageChannelImplementation() {
		        var channel = new MessageChannel();
		        channel.port1.onmessage = function(event) {
		            var handle = event.data;
		            runIfPresent(handle);
		        };

		        registerImmediate = function(handle) {
		            channel.port2.postMessage(handle);
		        };
		    }

		    function installReadyStateChangeImplementation() {
		        var html = doc.documentElement;
		        registerImmediate = function(handle) {
		            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
		            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
		            var script = doc.createElement("script");
		            script.onreadystatechange = function () {
		                runIfPresent(handle);
		                script.onreadystatechange = null;
		                html.removeChild(script);
		                script = null;
		            };
		            html.appendChild(script);
		        };
		    }

		    function installSetTimeoutImplementation() {
		        registerImmediate = function(handle) {
		            setTimeout(runIfPresent, 0, handle);
		        };
		    }

		    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
		    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
		    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

		    // Don't get fooled by e.g. browserify environments.
		    if ({}.toString.call(global.process) === "[object process]") {
		        // For Node.js before 0.9
		        installNextTickImplementation();

		    } else if (canUsePostMessage()) {
		        // For non-IE10 modern browsers
		        installPostMessageImplementation();

		    } else if (global.MessageChannel) {
		        // For web workers, where supported
		        installMessageChannelImplementation();

		    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
		        // For IE 6–8
		        installReadyStateChangeImplementation();

		    } else {
		        // For older browsers
		        installSetTimeoutImplementation();
		    }

		    attachTo.setImmediate = setImmediate;
		    attachTo.clearImmediate = clearImmediate;
		}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(37)))

	/***/ }),
	/* 50 */
	/***/ (function(module, exports) {

		/* WEBPACK VAR INJECTION */(function(global) {
		/**
		 * Module exports.
		 */

		module.exports = deprecate;

		/**
		 * Mark that a method should not be used.
		 * Returns a modified function which warns once by default.
		 *
		 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
		 *
		 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
		 * will throw an Error when invoked.
		 *
		 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
		 * will invoke `console.trace()` instead of `console.error()`.
		 *
		 * @param {Function} fn - the function to deprecate
		 * @param {String} msg - the string to print to the console when `fn` is invoked
		 * @returns {Function} a new "deprecated" version of `fn`
		 * @api public
		 */

		function deprecate (fn, msg) {
		  if (config('noDeprecation')) {
		    return fn;
		  }

		  var warned = false;
		  function deprecated() {
		    if (!warned) {
		      if (config('throwDeprecation')) {
		        throw new Error(msg);
		      } else if (config('traceDeprecation')) {
		        console.trace(msg);
		      } else {
		        console.warn(msg);
		      }
		      warned = true;
		    }
		    return fn.apply(this, arguments);
		  }

		  return deprecated;
		}

		/**
		 * Checks `localStorage` for boolean values for the given `name`.
		 *
		 * @param {String} name
		 * @returns {Boolean}
		 * @api private
		 */

		function config (name) {
		  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
		  try {
		    if (!global.localStorage) return false;
		  } catch (_) {
		    return false;
		  }
		  var val = global.localStorage[name];
		  if (null == val) return false;
		  return String(val).toLowerCase() === 'true';
		}

		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

	/***/ }),
	/* 51 */
	/***/ (function(module, exports, __webpack_require__) {

		// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.

		'use strict';

		/*<replacement>*/

		var Buffer = __webpack_require__(40).Buffer;
		/*</replacement>*/

		var isEncoding = Buffer.isEncoding || function (encoding) {
		  encoding = '' + encoding;
		  switch (encoding && encoding.toLowerCase()) {
		    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
		      return true;
		    default:
		      return false;
		  }
		};

		function _normalizeEncoding(enc) {
		  if (!enc) return 'utf8';
		  var retried;
		  while (true) {
		    switch (enc) {
		      case 'utf8':
		      case 'utf-8':
		        return 'utf8';
		      case 'ucs2':
		      case 'ucs-2':
		      case 'utf16le':
		      case 'utf-16le':
		        return 'utf16le';
		      case 'latin1':
		      case 'binary':
		        return 'latin1';
		      case 'base64':
		      case 'ascii':
		      case 'hex':
		        return enc;
		      default:
		        if (retried) return; // undefined
		        enc = ('' + enc).toLowerCase();
		        retried = true;
		    }
		  }
		};

		// Do not cache `Buffer.isEncoding` when checking encoding names as some
		// modules monkey-patch it to support additional encodings
		function normalizeEncoding(enc) {
		  var nenc = _normalizeEncoding(enc);
		  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
		  return nenc || enc;
		}

		// StringDecoder provides an interface for efficiently splitting a series of
		// buffers into a series of JS strings without breaking apart multi-byte
		// characters.
		exports.StringDecoder = StringDecoder;
		function StringDecoder(encoding) {
		  this.encoding = normalizeEncoding(encoding);
		  var nb;
		  switch (this.encoding) {
		    case 'utf16le':
		      this.text = utf16Text;
		      this.end = utf16End;
		      nb = 4;
		      break;
		    case 'utf8':
		      this.fillLast = utf8FillLast;
		      nb = 4;
		      break;
		    case 'base64':
		      this.text = base64Text;
		      this.end = base64End;
		      nb = 3;
		      break;
		    default:
		      this.write = simpleWrite;
		      this.end = simpleEnd;
		      return;
		  }
		  this.lastNeed = 0;
		  this.lastTotal = 0;
		  this.lastChar = Buffer.allocUnsafe(nb);
		}

		StringDecoder.prototype.write = function (buf) {
		  if (buf.length === 0) return '';
		  var r;
		  var i;
		  if (this.lastNeed) {
		    r = this.fillLast(buf);
		    if (r === undefined) return '';
		    i = this.lastNeed;
		    this.lastNeed = 0;
		  } else {
		    i = 0;
		  }
		  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
		  return r || '';
		};

		StringDecoder.prototype.end = utf8End;

		// Returns only complete characters in a Buffer
		StringDecoder.prototype.text = utf8Text;

		// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
		StringDecoder.prototype.fillLast = function (buf) {
		  if (this.lastNeed <= buf.length) {
		    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
		    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
		  }
		  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
		  this.lastNeed -= buf.length;
		};

		// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
		// continuation byte. If an invalid byte is detected, -2 is returned.
		function utf8CheckByte(byte) {
		  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
		  return byte >> 6 === 0x02 ? -1 : -2;
		}

		// Checks at most 3 bytes at the end of a Buffer in order to detect an
		// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
		// needed to complete the UTF-8 character (if applicable) are returned.
		function utf8CheckIncomplete(self, buf, i) {
		  var j = buf.length - 1;
		  if (j < i) return 0;
		  var nb = utf8CheckByte(buf[j]);
		  if (nb >= 0) {
		    if (nb > 0) self.lastNeed = nb - 1;
		    return nb;
		  }
		  if (--j < i || nb === -2) return 0;
		  nb = utf8CheckByte(buf[j]);
		  if (nb >= 0) {
		    if (nb > 0) self.lastNeed = nb - 2;
		    return nb;
		  }
		  if (--j < i || nb === -2) return 0;
		  nb = utf8CheckByte(buf[j]);
		  if (nb >= 0) {
		    if (nb > 0) {
		      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
		    }
		    return nb;
		  }
		  return 0;
		}

		// Validates as many continuation bytes for a multi-byte UTF-8 character as
		// needed or are available. If we see a non-continuation byte where we expect
		// one, we "replace" the validated continuation bytes we've seen so far with
		// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
		// behavior. The continuation byte check is included three times in the case
		// where all of the continuation bytes for a character exist in the same buffer.
		// It is also done this way as a slight performance increase instead of using a
		// loop.
		function utf8CheckExtraBytes(self, buf, p) {
		  if ((buf[0] & 0xC0) !== 0x80) {
		    self.lastNeed = 0;
		    return '\ufffd';
		  }
		  if (self.lastNeed > 1 && buf.length > 1) {
		    if ((buf[1] & 0xC0) !== 0x80) {
		      self.lastNeed = 1;
		      return '\ufffd';
		    }
		    if (self.lastNeed > 2 && buf.length > 2) {
		      if ((buf[2] & 0xC0) !== 0x80) {
		        self.lastNeed = 2;
		        return '\ufffd';
		      }
		    }
		  }
		}

		// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
		function utf8FillLast(buf) {
		  var p = this.lastTotal - this.lastNeed;
		  var r = utf8CheckExtraBytes(this, buf, p);
		  if (r !== undefined) return r;
		  if (this.lastNeed <= buf.length) {
		    buf.copy(this.lastChar, p, 0, this.lastNeed);
		    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
		  }
		  buf.copy(this.lastChar, p, 0, buf.length);
		  this.lastNeed -= buf.length;
		}

		// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
		// partial character, the character's bytes are buffered until the required
		// number of bytes are available.
		function utf8Text(buf, i) {
		  var total = utf8CheckIncomplete(this, buf, i);
		  if (!this.lastNeed) return buf.toString('utf8', i);
		  this.lastTotal = total;
		  var end = buf.length - (total - this.lastNeed);
		  buf.copy(this.lastChar, 0, end);
		  return buf.toString('utf8', i, end);
		}

		// For UTF-8, a replacement character is added when ending on a partial
		// character.
		function utf8End(buf) {
		  var r = buf && buf.length ? this.write(buf) : '';
		  if (this.lastNeed) return r + '\ufffd';
		  return r;
		}

		// UTF-16LE typically needs two bytes per character, but even if we have an even
		// number of bytes available, we need to check if we end on a leading/high
		// surrogate. In that case, we need to wait for the next two bytes in order to
		// decode the last character properly.
		function utf16Text(buf, i) {
		  if ((buf.length - i) % 2 === 0) {
		    var r = buf.toString('utf16le', i);
		    if (r) {
		      var c = r.charCodeAt(r.length - 1);
		      if (c >= 0xD800 && c <= 0xDBFF) {
		        this.lastNeed = 2;
		        this.lastTotal = 4;
		        this.lastChar[0] = buf[buf.length - 2];
		        this.lastChar[1] = buf[buf.length - 1];
		        return r.slice(0, -1);
		      }
		    }
		    return r;
		  }
		  this.lastNeed = 1;
		  this.lastTotal = 2;
		  this.lastChar[0] = buf[buf.length - 1];
		  return buf.toString('utf16le', i, buf.length - 1);
		}

		// For UTF-16LE we do not explicitly append special replacement characters if we
		// end on a partial character, we simply let v8 handle that.
		function utf16End(buf) {
		  var r = buf && buf.length ? this.write(buf) : '';
		  if (this.lastNeed) {
		    var end = this.lastTotal - this.lastNeed;
		    return r + this.lastChar.toString('utf16le', 0, end);
		  }
		  return r;
		}

		function base64Text(buf, i) {
		  var n = (buf.length - i) % 3;
		  if (n === 0) return buf.toString('base64', i);
		  this.lastNeed = 3 - n;
		  this.lastTotal = 3;
		  if (n === 1) {
		    this.lastChar[0] = buf[buf.length - 1];
		  } else {
		    this.lastChar[0] = buf[buf.length - 2];
		    this.lastChar[1] = buf[buf.length - 1];
		  }
		  return buf.toString('base64', i, buf.length - n);
		}

		function base64End(buf) {
		  var r = buf && buf.length ? this.write(buf) : '';
		  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
		  return r;
		}

		// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
		function simpleWrite(buf) {
		  return buf.toString(this.encoding);
		}

		function simpleEnd(buf) {
		  return buf && buf.length ? this.write(buf) : '';
		}

	/***/ }),
	/* 52 */
	/***/ (function(module, exports, __webpack_require__) {

		// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.

		// a transform stream is a readable/writable stream where you do
		// something with the data.  Sometimes it's called a "filter",
		// but that's not a great name for it, since that implies a thing where
		// some bits pass through, and others are simply ignored.  (That would
		// be a valid example of a transform, of course.)
		//
		// While the output is causally related to the input, it's not a
		// necessarily symmetric or synchronous transformation.  For example,
		// a zlib stream might take multiple plain-text writes(), and then
		// emit a single compressed chunk some time in the future.
		//
		// Here's how this works:
		//
		// The Transform stream has all the aspects of the readable and writable
		// stream classes.  When you write(chunk), that calls _write(chunk,cb)
		// internally, and returns false if there's a lot of pending writes
		// buffered up.  When you call read(), that calls _read(n) until
		// there's enough pending readable data buffered up.
		//
		// In a transform stream, the written data is placed in a buffer.  When
		// _read(n) is called, it transforms the queued up data, calling the
		// buffered _write cb's as it consumes chunks.  If consuming a single
		// written chunk would result in multiple output chunks, then the first
		// outputted bit calls the readcb, and subsequent chunks just go into
		// the read buffer, and will cause it to emit 'readable' if necessary.
		//
		// This way, back-pressure is actually determined by the reading side,
		// since _read has to be called to start processing a new chunk.  However,
		// a pathological inflate type of transform can cause excessive buffering
		// here.  For example, imagine a stream where every byte of input is
		// interpreted as an integer from 0-255, and then results in that many
		// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
		// 1kb of data being output.  In this case, you could write a very small
		// amount of input, and end up with a very large amount of output.  In
		// such a pathological inflating mechanism, there'd be no way to tell
		// the system to stop doing the transform.  A single 4MB write could
		// cause the system to run out of memory.
		//
		// However, even in such a pathological case, only a single written chunk
		// would be consumed, and then the rest would wait (un-transformed) until
		// the results of the previous transformed chunk were consumed.

		'use strict';

		module.exports = Transform;

		var Duplex = __webpack_require__(46);

		/*<replacement>*/
		var util = Object.create(__webpack_require__(41));
		util.inherits = __webpack_require__(34);
		/*</replacement>*/

		util.inherits(Transform, Duplex);

		function afterTransform(er, data) {
		  var ts = this._transformState;
		  ts.transforming = false;

		  var cb = ts.writecb;

		  if (!cb) {
		    return this.emit('error', new Error('write callback called multiple times'));
		  }

		  ts.writechunk = null;
		  ts.writecb = null;

		  if (data != null) // single equals check for both `null` and `undefined`
		    this.push(data);

		  cb(er);

		  var rs = this._readableState;
		  rs.reading = false;
		  if (rs.needReadable || rs.length < rs.highWaterMark) {
		    this._read(rs.highWaterMark);
		  }
		}

		function Transform(options) {
		  if (!(this instanceof Transform)) return new Transform(options);

		  Duplex.call(this, options);

		  this._transformState = {
		    afterTransform: afterTransform.bind(this),
		    needTransform: false,
		    transforming: false,
		    writecb: null,
		    writechunk: null,
		    writeencoding: null
		  };

		  // start out asking for a readable event once data is transformed.
		  this._readableState.needReadable = true;

		  // we have implemented the _read method, and done the other things
		  // that Readable wants before the first _read call, so unset the
		  // sync guard flag.
		  this._readableState.sync = false;

		  if (options) {
		    if (typeof options.transform === 'function') this._transform = options.transform;

		    if (typeof options.flush === 'function') this._flush = options.flush;
		  }

		  // When the writable side finishes, then flush out anything remaining.
		  this.on('prefinish', prefinish);
		}

		function prefinish() {
		  var _this = this;

		  if (typeof this._flush === 'function') {
		    this._flush(function (er, data) {
		      done(_this, er, data);
		    });
		  } else {
		    done(this, null, null);
		  }
		}

		Transform.prototype.push = function (chunk, encoding) {
		  this._transformState.needTransform = false;
		  return Duplex.prototype.push.call(this, chunk, encoding);
		};

		// This is the part where you do stuff!
		// override this function in implementation classes.
		// 'chunk' is an input chunk.
		//
		// Call `push(newChunk)` to pass along transformed output
		// to the readable side.  You may call 'push' zero or more times.
		//
		// Call `cb(err)` when you are done with this chunk.  If you pass
		// an error, then that'll put the hurt on the whole operation.  If you
		// never call cb(), then you'll never get another chunk.
		Transform.prototype._transform = function (chunk, encoding, cb) {
		  throw new Error('_transform() is not implemented');
		};

		Transform.prototype._write = function (chunk, encoding, cb) {
		  var ts = this._transformState;
		  ts.writecb = cb;
		  ts.writechunk = chunk;
		  ts.writeencoding = encoding;
		  if (!ts.transforming) {
		    var rs = this._readableState;
		    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
		  }
		};

		// Doesn't matter what the args are here.
		// _transform does all the work.
		// That we got here means that the readable side wants more data.
		Transform.prototype._read = function (n) {
		  var ts = this._transformState;

		  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
		    ts.transforming = true;
		    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
		  } else {
		    // mark that we need a transform, so that any data that comes in
		    // will get processed, now that we've asked for it.
		    ts.needTransform = true;
		  }
		};

		Transform.prototype._destroy = function (err, cb) {
		  var _this2 = this;

		  Duplex.prototype._destroy.call(this, err, function (err2) {
		    cb(err2);
		    _this2.emit('close');
		  });
		};

		function done(stream, er, data) {
		  if (er) return stream.emit('error', er);

		  if (data != null) // single equals check for both `null` and `undefined`
		    stream.push(data);

		  // if there's nothing in the write buffer, then that means
		  // that nothing more will ever be provided
		  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

		  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

		  return stream.push(null);
		}

	/***/ }),
	/* 53 */
	/***/ (function(module, exports, __webpack_require__) {

		// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.

		// a passthrough stream.
		// basically just the most minimal sort of Transform stream.
		// Every written chunk gets output as-is.

		'use strict';

		module.exports = PassThrough;

		var Transform = __webpack_require__(52);

		/*<replacement>*/
		var util = Object.create(__webpack_require__(41));
		util.inherits = __webpack_require__(34);
		/*</replacement>*/

		util.inherits(PassThrough, Transform);

		function PassThrough(options) {
		  if (!(this instanceof PassThrough)) return new PassThrough(options);

		  Transform.call(this, options);
		}

		PassThrough.prototype._transform = function (chunk, encoding, cb) {
		  cb(null, chunk);
		};

	/***/ }),
	/* 54 */
	/***/ (function(module, exports, __webpack_require__) {

		module.exports = __webpack_require__(47);


	/***/ }),
	/* 55 */
	/***/ (function(module, exports, __webpack_require__) {

		module.exports = __webpack_require__(46);


	/***/ }),
	/* 56 */
	/***/ (function(module, exports, __webpack_require__) {

		module.exports = __webpack_require__(35).Transform


	/***/ }),
	/* 57 */
	/***/ (function(module, exports, __webpack_require__) {

		module.exports = __webpack_require__(35).PassThrough


	/***/ }),
	/* 58 */
	/***/ (function(module, exports, __webpack_require__) {

		// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.

		var Buffer = __webpack_require__(28).Buffer;

		var isBufferEncoding = Buffer.isEncoding
		  || function(encoding) {
		       switch (encoding && encoding.toLowerCase()) {
		         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
		         default: return false;
		       }
		     }


		function assertEncoding(encoding) {
		  if (encoding && !isBufferEncoding(encoding)) {
		    throw new Error('Unknown encoding: ' + encoding);
		  }
		}

		// StringDecoder provides an interface for efficiently splitting a series of
		// buffers into a series of JS strings without breaking apart multi-byte
		// characters. CESU-8 is handled as part of the UTF-8 encoding.
		//
		// @TODO Handling all encodings inside a single object makes it very difficult
		// to reason about this code, so it should be split up in the future.
		// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
		// points as used by CESU-8.
		var StringDecoder = exports.StringDecoder = function(encoding) {
		  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
		  assertEncoding(encoding);
		  switch (this.encoding) {
		    case 'utf8':
		      // CESU-8 represents each of Surrogate Pair by 3-bytes
		      this.surrogateSize = 3;
		      break;
		    case 'ucs2':
		    case 'utf16le':
		      // UTF-16 represents each of Surrogate Pair by 2-bytes
		      this.surrogateSize = 2;
		      this.detectIncompleteChar = utf16DetectIncompleteChar;
		      break;
		    case 'base64':
		      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
		      this.surrogateSize = 3;
		      this.detectIncompleteChar = base64DetectIncompleteChar;
		      break;
		    default:
		      this.write = passThroughWrite;
		      return;
		  }

		  // Enough space to store all bytes of a single character. UTF-8 needs 4
		  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
		  this.charBuffer = new Buffer(6);
		  // Number of bytes received for the current incomplete multi-byte character.
		  this.charReceived = 0;
		  // Number of bytes expected for the current incomplete multi-byte character.
		  this.charLength = 0;
		};


		// write decodes the given buffer and returns it as JS string that is
		// guaranteed to not contain any partial multi-byte characters. Any partial
		// character found at the end of the buffer is buffered up, and will be
		// returned when calling write again with the remaining bytes.
		//
		// Note: Converting a Buffer containing an orphan surrogate to a String
		// currently works, but converting a String to a Buffer (via `new Buffer`, or
		// Buffer#write) will replace incomplete surrogates with the unicode
		// replacement character. See https://codereview.chromium.org/121173009/ .
		StringDecoder.prototype.write = function(buffer) {
		  var charStr = '';
		  // if our last write ended with an incomplete multibyte character
		  while (this.charLength) {
		    // determine how many remaining bytes this buffer has to offer for this char
		    var available = (buffer.length >= this.charLength - this.charReceived) ?
		        this.charLength - this.charReceived :
		        buffer.length;

		    // add the new bytes to the char buffer
		    buffer.copy(this.charBuffer, this.charReceived, 0, available);
		    this.charReceived += available;

		    if (this.charReceived < this.charLength) {
		      // still not enough chars in this buffer? wait for more ...
		      return '';
		    }

		    // remove bytes belonging to the current character from the buffer
		    buffer = buffer.slice(available, buffer.length);

		    // get the character that was split
		    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

		    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
		    var charCode = charStr.charCodeAt(charStr.length - 1);
		    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
		      this.charLength += this.surrogateSize;
		      charStr = '';
		      continue;
		    }
		    this.charReceived = this.charLength = 0;

		    // if there are no more bytes in this buffer, just emit our char
		    if (buffer.length === 0) {
		      return charStr;
		    }
		    break;
		  }

		  // determine and set charLength / charReceived
		  this.detectIncompleteChar(buffer);

		  var end = buffer.length;
		  if (this.charLength) {
		    // buffer the incomplete character bytes we got
		    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
		    end -= this.charReceived;
		  }

		  charStr += buffer.toString(this.encoding, 0, end);

		  var end = charStr.length - 1;
		  var charCode = charStr.charCodeAt(end);
		  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
		  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
		    var size = this.surrogateSize;
		    this.charLength += size;
		    this.charReceived += size;
		    this.charBuffer.copy(this.charBuffer, size, 0, size);
		    buffer.copy(this.charBuffer, 0, 0, size);
		    return charStr.substring(0, end);
		  }

		  // or just emit the charStr
		  return charStr;
		};

		// detectIncompleteChar determines if there is an incomplete UTF-8 character at
		// the end of the given buffer. If so, it sets this.charLength to the byte
		// length that character, and sets this.charReceived to the number of bytes
		// that are available for this character.
		StringDecoder.prototype.detectIncompleteChar = function(buffer) {
		  // determine how many bytes we have to check at the end of this buffer
		  var i = (buffer.length >= 3) ? 3 : buffer.length;

		  // Figure out if one of the last i bytes of our buffer announces an
		  // incomplete char.
		  for (; i > 0; i--) {
		    var c = buffer[buffer.length - i];

		    // See http://en.wikipedia.org/wiki/UTF-8#Description

		    // 110XXXXX
		    if (i == 1 && c >> 5 == 0x06) {
		      this.charLength = 2;
		      break;
		    }

		    // 1110XXXX
		    if (i <= 2 && c >> 4 == 0x0E) {
		      this.charLength = 3;
		      break;
		    }

		    // 11110XXX
		    if (i <= 3 && c >> 3 == 0x1E) {
		      this.charLength = 4;
		      break;
		    }
		  }
		  this.charReceived = i;
		};

		StringDecoder.prototype.end = function(buffer) {
		  var res = '';
		  if (buffer && buffer.length)
		    res = this.write(buffer);

		  if (this.charReceived) {
		    var cr = this.charReceived;
		    var buf = this.charBuffer;
		    var enc = this.encoding;
		    res += buf.slice(0, cr).toString(enc);
		  }

		  return res;
		};

		function passThroughWrite(buffer) {
		  return buffer.toString(this.encoding);
		}

		function utf16DetectIncompleteChar(buffer) {
		  this.charReceived = buffer.length % 2;
		  this.charLength = this.charReceived ? 2 : 0;
		}

		function base64DetectIncompleteChar(buffer) {
		  this.charReceived = buffer.length % 3;
		  this.charLength = this.charReceived ? 3 : 0;
		}


	/***/ }),
	/* 59 */
	/***/ (function(module, exports) {

		// Generated by CoffeeScript 1.12.7
		(function() {
		  "use strict";
		  exports.stripBOM = function(str) {
		    if (str[0] === '\uFEFF') {
		      return str.substring(1);
		    } else {
		      return str;
		    }
		  };

		}).call(this);


	/***/ }),
	/* 60 */
	/***/ (function(module, exports) {

		// Generated by CoffeeScript 1.12.7
		(function() {
		  "use strict";
		  var prefixMatch;

		  prefixMatch = new RegExp(/(?!xmlns)^.*:/);

		  exports.normalize = function(str) {
		    return str.toLowerCase();
		  };

		  exports.firstCharLowerCase = function(str) {
		    return str.charAt(0).toLowerCase() + str.slice(1);
		  };

		  exports.stripPrefix = function(str) {
		    return str.replace(prefixMatch, '');
		  };

		  exports.parseNumbers = function(str) {
		    if (!isNaN(str)) {
		      str = str % 1 === 0 ? parseInt(str, 10) : parseFloat(str);
		    }
		    return str;
		  };

		  exports.parseBooleans = function(str) {
		    if (/^(?:true|false)$/i.test(str)) {
		      str = str.toLowerCase() === 'true';
		    }
		    return str;
		  };

		}).call(this);


	/***/ })
	/******/ ]);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8).Buffer))

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(4);
	var EventEmitter = __webpack_require__(46).EventEmitter;
	__webpack_require__(47);

	/**
	 * @api private
	 */
	AWS.XHRClient = AWS.util.inherit({
	  handleRequest: function handleRequest(httpRequest, httpOptions, callback, errCallback) {
	    var self = this;
	    var endpoint = httpRequest.endpoint;
	    var emitter = new EventEmitter();
	    var href = endpoint.protocol + '//' + endpoint.hostname;
	    if (endpoint.port !== 80 && endpoint.port !== 443) {
	      href += ':' + endpoint.port;
	    }
	    href += httpRequest.path;

	    var xhr = new XMLHttpRequest(), headersEmitted = false;
	    httpRequest.stream = xhr;

	    xhr.addEventListener('readystatechange', function() {
	      try {
	        if (xhr.status === 0) return; // 0 code is invalid
	      } catch (e) { return; }

	      if (this.readyState >= this.HEADERS_RECEIVED && !headersEmitted) {
	        emitter.statusCode = xhr.status;
	        emitter.headers = self.parseHeaders(xhr.getAllResponseHeaders());
	        emitter.emit(
	          'headers',
	          emitter.statusCode,
	          emitter.headers,
	          xhr.statusText
	        );
	        headersEmitted = true;
	      }
	      if (this.readyState === this.DONE) {
	        self.finishRequest(xhr, emitter);
	      }
	    }, false);
	    xhr.upload.addEventListener('progress', function (evt) {
	      emitter.emit('sendProgress', evt);
	    });
	    xhr.addEventListener('progress', function (evt) {
	      emitter.emit('receiveProgress', evt);
	    }, false);
	    xhr.addEventListener('timeout', function () {
	      errCallback(AWS.util.error(new Error('Timeout'), {code: 'TimeoutError'}));
	    }, false);
	    xhr.addEventListener('error', function () {
	      errCallback(AWS.util.error(new Error('Network Failure'), {
	        code: 'NetworkingError'
	      }));
	    }, false);
	    xhr.addEventListener('abort', function () {
	      errCallback(AWS.util.error(new Error('Request aborted'), {
	        code: 'RequestAbortedError'
	      }));
	    }, false);

	    callback(emitter);
	    xhr.open(httpRequest.method, href, httpOptions.xhrAsync !== false);
	    AWS.util.each(httpRequest.headers, function (key, value) {
	      if (key !== 'Content-Length' && key !== 'User-Agent' && key !== 'Host') {
	        xhr.setRequestHeader(key, value);
	      }
	    });

	    if (httpOptions.timeout && httpOptions.xhrAsync !== false) {
	      xhr.timeout = httpOptions.timeout;
	    }

	    if (httpOptions.xhrWithCredentials) {
	      xhr.withCredentials = true;
	    }
	    try { xhr.responseType = 'arraybuffer'; } catch (e) {}

	    try {
	      if (httpRequest.body) {
	        xhr.send(httpRequest.body);
	      } else {
	        xhr.send();
	      }
	    } catch (err) {
	      if (httpRequest.body && typeof httpRequest.body.buffer === 'object') {
	        xhr.send(httpRequest.body.buffer); // send ArrayBuffer directly
	      } else {
	        throw err;
	      }
	    }

	    return emitter;
	  },

	  parseHeaders: function parseHeaders(rawHeaders) {
	    var headers = {};
	    AWS.util.arrayEach(rawHeaders.split(/\r?\n/), function (line) {
	      var key = line.split(':', 1)[0];
	      var value = line.substring(key.length + 2);
	      if (key.length > 0) headers[key.toLowerCase()] = value;
	    });
	    return headers;
	  },

	  finishRequest: function finishRequest(xhr, emitter) {
	    var buffer;
	    if (xhr.responseType === 'arraybuffer' && xhr.response) {
	      var ab = xhr.response;
	      buffer = new AWS.util.Buffer(ab.byteLength);
	      var view = new Uint8Array(ab);
	      for (var i = 0; i < buffer.length; ++i) {
	        buffer[i] = view[i];
	      }
	    }

	    try {
	      if (!buffer && typeof xhr.responseText === 'string') {
	        buffer = new AWS.util.Buffer(xhr.responseText);
	      }
	    } catch (e) {}

	    if (buffer) emitter.emit('data', buffer);
	    emitter.emit('end');
	  }
	});

	/**
	 * @api private
	 */
	AWS.HttpClient.prototype = AWS.XHRClient.prototype;

	/**
	 * @api private
	 */
	AWS.HttpClient.streamsApiVersion = 1;


/***/ }),
/* 46 */
/***/ (function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events)
	    this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      } else {
	        // At least give some kind of context to the user
	        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	        err.context = er;
	        throw err;
	      }
	    }
	  }

	  handler = this._events[type];

	  if (isUndefined(handler))
	    return false;

	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events)
	    this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  var fired = false;

	  function g() {
	    this.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type])
	    return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);

	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0)
	      return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;

	  if (!this._events)
	    return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];

	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(4);
	var inherit = AWS.util.inherit;

	/**
	 * The endpoint that a service will talk to, for example,
	 * `'https://ec2.ap-southeast-1.amazonaws.com'`. If
	 * you need to override an endpoint for a service, you can
	 * set the endpoint on a service by passing the endpoint
	 * object with the `endpoint` option key:
	 *
	 * ```javascript
	 * var ep = new AWS.Endpoint('awsproxy.example.com');
	 * var s3 = new AWS.S3({endpoint: ep});
	 * s3.service.endpoint.hostname == 'awsproxy.example.com'
	 * ```
	 *
	 * Note that if you do not specify a protocol, the protocol will
	 * be selected based on your current {AWS.config} configuration.
	 *
	 * @!attribute protocol
	 *   @return [String] the protocol (http or https) of the endpoint
	 *     URL
	 * @!attribute hostname
	 *   @return [String] the host portion of the endpoint, e.g.,
	 *     example.com
	 * @!attribute host
	 *   @return [String] the host portion of the endpoint including
	 *     the port, e.g., example.com:80
	 * @!attribute port
	 *   @return [Integer] the port of the endpoint
	 * @!attribute href
	 *   @return [String] the full URL of the endpoint
	 */
	AWS.Endpoint = inherit({

	  /**
	   * @overload Endpoint(endpoint)
	   *   Constructs a new endpoint given an endpoint URL. If the
	   *   URL omits a protocol (http or https), the default protocol
	   *   set in the global {AWS.config} will be used.
	   *   @param endpoint [String] the URL to construct an endpoint from
	   */
	  constructor: function Endpoint(endpoint, config) {
	    AWS.util.hideProperties(this, ['slashes', 'auth', 'hash', 'search', 'query']);

	    if (typeof endpoint === 'undefined' || endpoint === null) {
	      throw new Error('Invalid endpoint: ' + endpoint);
	    } else if (typeof endpoint !== 'string') {
	      return AWS.util.copy(endpoint);
	    }

	    if (!endpoint.match(/^http/)) {
	      var useSSL = config && config.sslEnabled !== undefined ?
	        config.sslEnabled : AWS.config.sslEnabled;
	      endpoint = (useSSL ? 'https' : 'http') + '://' + endpoint;
	    }

	    AWS.util.update(this, AWS.util.urlParse(endpoint));

	    // Ensure the port property is set as an integer
	    if (this.port) {
	      this.port = parseInt(this.port, 10);
	    } else {
	      this.port = this.protocol === 'https:' ? 443 : 80;
	    }
	  }

	});

	/**
	 * The low level HTTP request object, encapsulating all HTTP header
	 * and body data sent by a service request.
	 *
	 * @!attribute method
	 *   @return [String] the HTTP method of the request
	 * @!attribute path
	 *   @return [String] the path portion of the URI, e.g.,
	 *     "/list/?start=5&num=10"
	 * @!attribute headers
	 *   @return [map<String,String>]
	 *     a map of header keys and their respective values
	 * @!attribute body
	 *   @return [String] the request body payload
	 * @!attribute endpoint
	 *   @return [AWS.Endpoint] the endpoint for the request
	 * @!attribute region
	 *   @api private
	 *   @return [String] the region, for signing purposes only.
	 */
	AWS.HttpRequest = inherit({

	  /**
	   * @api private
	   */
	  constructor: function HttpRequest(endpoint, region) {
	    endpoint = new AWS.Endpoint(endpoint);
	    this.method = 'POST';
	    this.path = endpoint.path || '/';
	    this.headers = {};
	    this.body = '';
	    this.endpoint = endpoint;
	    this.region = region;
	    this._userAgent = '';
	    this.setUserAgent();
	  },

	  /**
	   * @api private
	   */
	  setUserAgent: function setUserAgent() {
	    this._userAgent = this.headers[this.getUserAgentHeaderName()] = AWS.util.userAgent();
	  },

	  getUserAgentHeaderName: function getUserAgentHeaderName() {
	    var prefix = AWS.util.isBrowser() ? 'X-Amz-' : '';
	    return prefix + 'User-Agent';
	  },

	  /**
	   * @api private
	   */
	  appendToUserAgent: function appendToUserAgent(agentPartial) {
	    if (typeof agentPartial === 'string' && agentPartial) {
	      this._userAgent += ' ' + agentPartial;
	    }
	    this.headers[this.getUserAgentHeaderName()] = this._userAgent;
	  },

	  /**
	   * @api private
	   */
	  getUserAgent: function getUserAgent() {
	    return this._userAgent;
	  },

	  /**
	   * @return [String] the part of the {path} excluding the
	   *   query string
	   */
	  pathname: function pathname() {
	    return this.path.split('?', 1)[0];
	  },

	  /**
	   * @return [String] the query string portion of the {path}
	   */
	  search: function search() {
	    var query = this.path.split('?', 2)[1];
	    if (query) {
	      query = AWS.util.queryStringParse(query);
	      return AWS.util.queryParamsToString(query);
	    }
	    return '';
	  },

	  /**
	   * @api private
	   * update httpRequest endpoint with endpoint string
	   */
	  updateEndpoint: function updateEndpoint(endpointStr) {
	    var newEndpoint = new AWS.Endpoint(endpointStr);
	    this.endpoint = newEndpoint;
	    this.path = newEndpoint.path || '/';
	    if (this.headers['Host']) {
	      this.headers['Host'] = newEndpoint.host;
	    }
	  }
	});

	/**
	 * The low level HTTP response object, encapsulating all HTTP header
	 * and body data returned from the request.
	 *
	 * @!attribute statusCode
	 *   @return [Integer] the HTTP status code of the response (e.g., 200, 404)
	 * @!attribute headers
	 *   @return [map<String,String>]
	 *      a map of response header keys and their respective values
	 * @!attribute body
	 *   @return [String] the response body payload
	 * @!attribute [r] streaming
	 *   @return [Boolean] whether this response is being streamed at a low-level.
	 *     Defaults to `false` (buffered reads). Do not modify this manually, use
	 *     {createUnbufferedStream} to convert the stream to unbuffered mode
	 *     instead.
	 */
	AWS.HttpResponse = inherit({

	  /**
	   * @api private
	   */
	  constructor: function HttpResponse() {
	    this.statusCode = undefined;
	    this.headers = {};
	    this.body = undefined;
	    this.streaming = false;
	    this.stream = null;
	  },

	  /**
	   * Disables buffering on the HTTP response and returns the stream for reading.
	   * @return [Stream, XMLHttpRequest, null] the underlying stream object.
	   *   Use this object to directly read data off of the stream.
	   * @note This object is only available after the {AWS.Request~httpHeaders}
	   *   event has fired. This method must be called prior to
	   *   {AWS.Request~httpData}.
	   * @example Taking control of a stream
	   *   request.on('httpHeaders', function(statusCode, headers) {
	   *     if (statusCode < 300) {
	   *       if (headers.etag === 'xyz') {
	   *         // pipe the stream, disabling buffering
	   *         var stream = this.response.httpResponse.createUnbufferedStream();
	   *         stream.pipe(process.stdout);
	   *       } else { // abort this request and set a better error message
	   *         this.abort();
	   *         this.response.error = new Error('Invalid ETag');
	   *       }
	   *     }
	   *   }).send(console.log);
	   */
	  createUnbufferedStream: function createUnbufferedStream() {
	    this.streaming = true;
	    return this.stream;
	  }
	});


	AWS.HttpClient = inherit({});

	/**
	 * @api private
	 */
	AWS.HttpClient.getInstance = function getInstance() {
	  if (this.singleton === undefined) {
	    this.singleton = new this();
	  }
	  return this.singleton;
	};


/***/ }),
/* 48 */
/***/ (function(module, exports) {

	function addContentType(req) {
	  var httpRequest = req.httpRequest || {};
	  var headers = httpRequest.headers;
	  // We don't want to force a content type on presigned urls
	  if (headers && !req.isPresigned()) {
	    if (httpRequest.body && !headers['Content-Type']) {
	      // React Native's android XHR requires Content-Type to be defined if there is a body
	      headers['Content-Type'] = '';
	    }
	  }
	}

	/**
	 * @api private
	 */
	module.exports = {
	    addContentType: addContentType
	};


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	module.exports = {
	  ACM: __webpack_require__(50),
	  APIGateway: __webpack_require__(54),
	  ApplicationAutoScaling: __webpack_require__(58),
	  AppStream: __webpack_require__(61),
	  AutoScaling: __webpack_require__(65),
	  Batch: __webpack_require__(68),
	  Budgets: __webpack_require__(71),
	  CloudDirectory: __webpack_require__(74),
	  CloudFormation: __webpack_require__(79),
	  CloudFront: __webpack_require__(83),
	  CloudHSM: __webpack_require__(107),
	  CloudSearch: __webpack_require__(110),
	  CloudSearchDomain: __webpack_require__(115),
	  CloudTrail: __webpack_require__(118),
	  CloudWatch: __webpack_require__(121),
	  CloudWatchEvents: __webpack_require__(125),
	  CloudWatchLogs: __webpack_require__(128),
	  CodeBuild: __webpack_require__(131),
	  CodeCommit: __webpack_require__(134),
	  CodeDeploy: __webpack_require__(137),
	  CodePipeline: __webpack_require__(141),
	  CognitoIdentity: __webpack_require__(39),
	  CognitoIdentityServiceProvider: __webpack_require__(144),
	  CognitoSync: __webpack_require__(147),
	  ConfigService: __webpack_require__(150),
	  CUR: __webpack_require__(153),
	  DataPipeline: __webpack_require__(156),
	  DeviceFarm: __webpack_require__(159),
	  DirectConnect: __webpack_require__(162),
	  DirectoryService: __webpack_require__(165),
	  Discovery: __webpack_require__(168),
	  DMS: __webpack_require__(171),
	  DynamoDB: __webpack_require__(175),
	  DynamoDBStreams: __webpack_require__(189),
	  EC2: __webpack_require__(192),
	  ECR: __webpack_require__(197),
	  ECS: __webpack_require__(201),
	  EFS: __webpack_require__(205),
	  ElastiCache: __webpack_require__(208),
	  ElasticBeanstalk: __webpack_require__(212),
	  ELB: __webpack_require__(216),
	  ELBv2: __webpack_require__(220),
	  EMR: __webpack_require__(224),
	  ES: __webpack_require__(228),
	  ElasticTranscoder: __webpack_require__(231),
	  Firehose: __webpack_require__(235),
	  GameLift: __webpack_require__(238),
	  Glacier: __webpack_require__(241),
	  Health: __webpack_require__(246),
	  IAM: __webpack_require__(249),
	  ImportExport: __webpack_require__(253),
	  Inspector: __webpack_require__(256),
	  Iot: __webpack_require__(259),
	  IotData: __webpack_require__(262),
	  Kinesis: __webpack_require__(266),
	  KinesisAnalytics: __webpack_require__(270),
	  KMS: __webpack_require__(273),
	  Lambda: __webpack_require__(276),
	  LexRuntime: __webpack_require__(283),
	  Lightsail: __webpack_require__(286),
	  MachineLearning: __webpack_require__(289),
	  MarketplaceCommerceAnalytics: __webpack_require__(294),
	  MarketplaceMetering: __webpack_require__(297),
	  MTurk: __webpack_require__(300),
	  MobileAnalytics: __webpack_require__(303),
	  OpsWorks: __webpack_require__(305),
	  OpsWorksCM: __webpack_require__(309),
	  Organizations: __webpack_require__(313),
	  Pinpoint: __webpack_require__(316),
	  Polly: __webpack_require__(318),
	  RDS: __webpack_require__(323),
	  Redshift: __webpack_require__(339),
	  Rekognition: __webpack_require__(343),
	  ResourceGroupsTaggingAPI: __webpack_require__(347),
	  Route53: __webpack_require__(350),
	  Route53Domains: __webpack_require__(355),
	  S3: __webpack_require__(358),
	  S3Control: __webpack_require__(429),
	  ServiceCatalog: __webpack_require__(433),
	  SES: __webpack_require__(436),
	  Shield: __webpack_require__(440),
	  SimpleDB: __webpack_require__(443),
	  SMS: __webpack_require__(446),
	  Snowball: __webpack_require__(449),
	  SNS: __webpack_require__(452),
	  SQS: __webpack_require__(455),
	  SSM: __webpack_require__(459),
	  StorageGateway: __webpack_require__(463),
	  StepFunctions: __webpack_require__(466),
	  STS: __webpack_require__(31),
	  Support: __webpack_require__(469),
	  SWF: __webpack_require__(472),
	  XRay: __webpack_require__(476),
	  WAF: __webpack_require__(479),
	  WAFRegional: __webpack_require__(482),
	  WorkDocs: __webpack_require__(485),
	  WorkSpaces: __webpack_require__(488),
	  CodeStar: __webpack_require__(491),
	  LexModelBuildingService: __webpack_require__(494),
	  MarketplaceEntitlementService: __webpack_require__(497),
	  Athena: __webpack_require__(500),
	  Greengrass: __webpack_require__(503),
	  DAX: __webpack_require__(505),
	  MigrationHub: __webpack_require__(508),
	  CloudHSMV2: __webpack_require__(511),
	  Glue: __webpack_require__(514),
	  Mobile: __webpack_require__(517),
	  Pricing: __webpack_require__(520),
	  CostExplorer: __webpack_require__(523),
	  MediaConvert: __webpack_require__(526),
	  MediaLive: __webpack_require__(529),
	  MediaPackage: __webpack_require__(533),
	  MediaStore: __webpack_require__(536),
	  MediaStoreData: __webpack_require__(539),
	  AppSync: __webpack_require__(542),
	  GuardDuty: __webpack_require__(545),
	  MQ: __webpack_require__(548),
	  Comprehend: __webpack_require__(551),
	  IoTJobsDataPlane: __webpack_require__(554),
	  KinesisVideoArchivedMedia: __webpack_require__(557),
	  KinesisVideoMedia: __webpack_require__(560),
	  KinesisVideo: __webpack_require__(563),
	  SageMakerRuntime: __webpack_require__(566),
	  SageMaker: __webpack_require__(569),
	  Translate: __webpack_require__(573),
	  ResourceGroups: __webpack_require__(576),
	  AlexaForBusiness: __webpack_require__(579),
	  Cloud9: __webpack_require__(582),
	  ServerlessApplicationRepository: __webpack_require__(585),
	  ServiceDiscovery: __webpack_require__(588),
	  WorkMail: __webpack_require__(591),
	  AutoScalingPlans: __webpack_require__(594),
	  TranscribeService: __webpack_require__(597),
	  Connect: __webpack_require__(600),
	  ACMPCA: __webpack_require__(603),
	  FMS: __webpack_require__(607),
	  SecretsManager: __webpack_require__(610),
	  IoTAnalytics: __webpack_require__(613),
	  IoT1ClickDevicesService: __webpack_require__(616),
	  IoT1ClickProjects: __webpack_require__(618),
	  PI: __webpack_require__(621),
	  Neptune: __webpack_require__(624),
	  MediaTailor: __webpack_require__(629),
	  EKS: __webpack_require__(632),
	  Macie: __webpack_require__(636),
	  DLM: __webpack_require__(639),
	  Signer: __webpack_require__(642),
	  Chime: __webpack_require__(646),
	  PinpointEmail: __webpack_require__(649),
	  RAM: __webpack_require__(652),
	  Route53Resolver: __webpack_require__(655),
	  PinpointSMSVoice: __webpack_require__(658),
	  QuickSight: __webpack_require__(660),
	  RDSDataService: __webpack_require__(663),
	  Amplify: __webpack_require__(667),
	  DataSync: __webpack_require__(670),
	  RoboMaker: __webpack_require__(673),
	  Transfer: __webpack_require__(676),
	  GlobalAccelerator: __webpack_require__(679),
	  ComprehendMedical: __webpack_require__(682),
	  KinesisAnalyticsV2: __webpack_require__(685),
	  MediaConnect: __webpack_require__(688),
	  FSx: __webpack_require__(692),
	  SecurityHub: __webpack_require__(695),
	  AppMesh: __webpack_require__(698),
	  LicenseManager: __webpack_require__(703),
	  Kafka: __webpack_require__(706),
	  ApiGatewayManagementApi: __webpack_require__(709),
	  ApiGatewayV2: __webpack_require__(712),
	  DocDB: __webpack_require__(715),
	  Backup: __webpack_require__(720),
	  WorkLink: __webpack_require__(723),
	  Textract: __webpack_require__(726),
	  ManagedBlockchain: __webpack_require__(729),
	  MediaPackageVod: __webpack_require__(732),
	  GroundStation: __webpack_require__(735),
	  IoTThingsGraph: __webpack_require__(738),
	  IoTEvents: __webpack_require__(741),
	  IoTEventsData: __webpack_require__(744),
	  Personalize: __webpack_require__(747),
	  PersonalizeEvents: __webpack_require__(750),
	  PersonalizeRuntime: __webpack_require__(753),
	  ApplicationInsights: __webpack_require__(756),
	  ServiceQuotas: __webpack_require__(759),
	  EC2InstanceConnect: __webpack_require__(762),
	  EventBridge: __webpack_require__(765),
	  LakeFormation: __webpack_require__(768),
	  ForecastService: __webpack_require__(771),
	  ForecastQueryService: __webpack_require__(774),
	  QLDB: __webpack_require__(777),
	  QLDBSession: __webpack_require__(780),
	  WorkMailMessageFlow: __webpack_require__(783),
	  CodeStarNotifications: __webpack_require__(786),
	  SavingsPlans: __webpack_require__(789),
	  SSO: __webpack_require__(792),
	  SSOOIDC: __webpack_require__(795),
	  MarketplaceCatalog: __webpack_require__(798),
	  DataExchange: __webpack_require__(801),
	  SESV2: __webpack_require__(804),
	  MigrationHubConfig: __webpack_require__(807),
	  ConnectParticipant: __webpack_require__(810),
	  AppConfig: __webpack_require__(813),
	  IoTSecureTunneling: __webpack_require__(816),
	  WAFV2: __webpack_require__(819),
	  ElasticInference: __webpack_require__(822),
	  Imagebuilder: __webpack_require__(825),
	  Schemas: __webpack_require__(828),
	  AccessAnalyzer: __webpack_require__(832),
	  CodeGuruReviewer: __webpack_require__(835),
	  CodeGuruProfiler: __webpack_require__(839),
	  ComputeOptimizer: __webpack_require__(842),
	  FraudDetector: __webpack_require__(845),
	  Kendra: __webpack_require__(848),
	  NetworkManager: __webpack_require__(851),
	  Outposts: __webpack_require__(854),
	  AugmentedAIRuntime: __webpack_require__(857),
	  EBS: __webpack_require__(860),
	  KinesisVideoSignalingChannels: __webpack_require__(863),
	  Detective: __webpack_require__(866),
	  CodeStarconnections: __webpack_require__(869),
	  Synthetics: __webpack_require__(872),
	  IoTSiteWise: __webpack_require__(875),
	  Macie2: __webpack_require__(879),
	  CodeArtifact: __webpack_require__(882),
	  Honeycode: __webpack_require__(885),
	  IVS: __webpack_require__(888),
	  Braket: __webpack_require__(891),
	  IdentityStore: __webpack_require__(894),
	  Appflow: __webpack_require__(897),
	  RedshiftData: __webpack_require__(900),
	  SSOAdmin: __webpack_require__(903),
	  TimestreamQuery: __webpack_require__(906),
	  TimestreamWrite: __webpack_require__(909),
	  S3Outposts: __webpack_require__(912),
	  DataBrew: __webpack_require__(915),
	  ServiceCatalogAppRegistry: __webpack_require__(918),
	  NetworkFirewall: __webpack_require__(921),
	  MWAA: __webpack_require__(924),
	  AmplifyBackend: __webpack_require__(927),
	  AppIntegrations: __webpack_require__(930),
	  ConnectContactLens: __webpack_require__(933),
	  DevOpsGuru: __webpack_require__(936),
	  ECRPUBLIC: __webpack_require__(939),
	  LookoutVision: __webpack_require__(942),
	  SageMakerFeatureStoreRuntime: __webpack_require__(945),
	  CustomerProfiles: __webpack_require__(948),
	  AuditManager: __webpack_require__(951),
	  EMRcontainers: __webpack_require__(954),
	  HealthLake: __webpack_require__(957),
	  SagemakerEdge: __webpack_require__(960),
	  Amp: __webpack_require__(963),
	  GreengrassV2: __webpack_require__(966),
	  IotDeviceAdvisor: __webpack_require__(969),
	  IoTFleetHub: __webpack_require__(972),
	  IoTWireless: __webpack_require__(975),
	  Location: __webpack_require__(978),
	  WellArchitected: __webpack_require__(981),
	  LexModelsV2: __webpack_require__(984),
	  LexRuntimeV2: __webpack_require__(988),
	  Fis: __webpack_require__(991),
	  LookoutMetrics: __webpack_require__(994),
	  Mgn: __webpack_require__(998),
	  LookoutEquipment: __webpack_require__(1001),
	  Nimble: __webpack_require__(1004),
	  Finspace: __webpack_require__(1007),
	  Finspacedata: __webpack_require__(1011),
	  SSMContacts: __webpack_require__(1015),
	  SSMIncidents: __webpack_require__(1018),
	  ApplicationCostProfiler: __webpack_require__(1022),
	  AppRunner: __webpack_require__(1025),
	  Proton: __webpack_require__(1028)
	};

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['acm'] = {};
	AWS.ACM = Service.defineService('acm', ['2015-12-08']);
	Object.defineProperty(apiLoader.services['acm'], '2015-12-08', {
	  get: function get() {
	    var model = __webpack_require__(51);
	    model.paginators = __webpack_require__(52).pagination;
	    model.waiters = __webpack_require__(53).waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.ACM;


/***/ }),
/* 51 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-12-08","endpointPrefix":"acm","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"ACM","serviceFullName":"AWS Certificate Manager","serviceId":"ACM","signatureVersion":"v4","targetPrefix":"CertificateManager","uid":"acm-2015-12-08"},"operations":{"AddTagsToCertificate":{"input":{"type":"structure","required":["CertificateArn","Tags"],"members":{"CertificateArn":{},"Tags":{"shape":"S3"}}}},"DeleteCertificate":{"input":{"type":"structure","required":["CertificateArn"],"members":{"CertificateArn":{}}}},"DescribeCertificate":{"input":{"type":"structure","required":["CertificateArn"],"members":{"CertificateArn":{}}},"output":{"type":"structure","members":{"Certificate":{"type":"structure","members":{"CertificateArn":{},"DomainName":{},"SubjectAlternativeNames":{"shape":"Sc"},"DomainValidationOptions":{"shape":"Sd"},"Serial":{},"Subject":{},"Issuer":{},"CreatedAt":{"type":"timestamp"},"IssuedAt":{"type":"timestamp"},"ImportedAt":{"type":"timestamp"},"Status":{},"RevokedAt":{"type":"timestamp"},"RevocationReason":{},"NotBefore":{"type":"timestamp"},"NotAfter":{"type":"timestamp"},"KeyAlgorithm":{},"SignatureAlgorithm":{},"InUseBy":{"type":"list","member":{}},"FailureReason":{},"Type":{},"RenewalSummary":{"type":"structure","required":["RenewalStatus","DomainValidationOptions","UpdatedAt"],"members":{"RenewalStatus":{},"DomainValidationOptions":{"shape":"Sd"},"RenewalStatusReason":{},"UpdatedAt":{"type":"timestamp"}}},"KeyUsages":{"type":"list","member":{"type":"structure","members":{"Name":{}}}},"ExtendedKeyUsages":{"type":"list","member":{"type":"structure","members":{"Name":{},"OID":{}}}},"CertificateAuthorityArn":{},"RenewalEligibility":{},"Options":{"shape":"S11"}}}}}},"ExportCertificate":{"input":{"type":"structure","required":["CertificateArn","Passphrase"],"members":{"CertificateArn":{},"Passphrase":{"type":"blob","sensitive":true}}},"output":{"type":"structure","members":{"Certificate":{},"CertificateChain":{},"PrivateKey":{"type":"string","sensitive":true}}}},"GetAccountConfiguration":{"output":{"type":"structure","members":{"ExpiryEvents":{"shape":"S1a"}}}},"GetCertificate":{"input":{"type":"structure","required":["CertificateArn"],"members":{"CertificateArn":{}}},"output":{"type":"structure","members":{"Certificate":{},"CertificateChain":{}}}},"ImportCertificate":{"input":{"type":"structure","required":["Certificate","PrivateKey"],"members":{"CertificateArn":{},"Certificate":{"type":"blob"},"PrivateKey":{"type":"blob","sensitive":true},"CertificateChain":{"type":"blob"},"Tags":{"shape":"S3"}}},"output":{"type":"structure","members":{"CertificateArn":{}}}},"ListCertificates":{"input":{"type":"structure","members":{"CertificateStatuses":{"type":"list","member":{}},"Includes":{"type":"structure","members":{"extendedKeyUsage":{"type":"list","member":{}},"keyUsage":{"type":"list","member":{}},"keyTypes":{"type":"list","member":{}}}},"NextToken":{},"MaxItems":{"type":"integer"}}},"output":{"type":"structure","members":{"NextToken":{},"CertificateSummaryList":{"type":"list","member":{"type":"structure","members":{"CertificateArn":{},"DomainName":{}}}}}}},"ListTagsForCertificate":{"input":{"type":"structure","required":["CertificateArn"],"members":{"CertificateArn":{}}},"output":{"type":"structure","members":{"Tags":{"shape":"S3"}}}},"PutAccountConfiguration":{"input":{"type":"structure","required":["IdempotencyToken"],"members":{"ExpiryEvents":{"shape":"S1a"},"IdempotencyToken":{}}}},"RemoveTagsFromCertificate":{"input":{"type":"structure","required":["CertificateArn","Tags"],"members":{"CertificateArn":{},"Tags":{"shape":"S3"}}}},"RenewCertificate":{"input":{"type":"structure","required":["CertificateArn"],"members":{"CertificateArn":{}}}},"RequestCertificate":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{},"ValidationMethod":{},"SubjectAlternativeNames":{"shape":"Sc"},"IdempotencyToken":{},"DomainValidationOptions":{"type":"list","member":{"type":"structure","required":["DomainName","ValidationDomain"],"members":{"DomainName":{},"ValidationDomain":{}}}},"Options":{"shape":"S11"},"CertificateAuthorityArn":{},"Tags":{"shape":"S3"}}},"output":{"type":"structure","members":{"CertificateArn":{}}}},"ResendValidationEmail":{"input":{"type":"structure","required":["CertificateArn","Domain","ValidationDomain"],"members":{"CertificateArn":{},"Domain":{},"ValidationDomain":{}}}},"UpdateCertificateOptions":{"input":{"type":"structure","required":["CertificateArn","Options"],"members":{"CertificateArn":{},"Options":{"shape":"S11"}}}}},"shapes":{"S3":{"type":"list","member":{"type":"structure","required":["Key"],"members":{"Key":{},"Value":{}}}},"Sc":{"type":"list","member":{}},"Sd":{"type":"list","member":{"type":"structure","required":["DomainName"],"members":{"DomainName":{},"ValidationEmails":{"type":"list","member":{}},"ValidationDomain":{},"ValidationStatus":{},"ResourceRecord":{"type":"structure","required":["Name","Type","Value"],"members":{"Name":{},"Type":{},"Value":{}}},"ValidationMethod":{}}}},"S11":{"type":"structure","members":{"CertificateTransparencyLoggingPreference":{}}},"S1a":{"type":"structure","members":{"DaysBeforeExpiry":{"type":"integer"}}}}}

/***/ }),
/* 52 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"ListCertificates":{"input_token":"NextToken","limit_key":"MaxItems","output_token":"NextToken","result_key":"CertificateSummaryList"}}}

/***/ }),
/* 53 */
/***/ (function(module, exports) {

	module.exports = {"version":2,"waiters":{"CertificateValidated":{"delay":60,"maxAttempts":40,"operation":"DescribeCertificate","acceptors":[{"matcher":"pathAll","expected":"SUCCESS","argument":"Certificate.DomainValidationOptions[].ValidationStatus","state":"success"},{"matcher":"pathAny","expected":"PENDING_VALIDATION","argument":"Certificate.DomainValidationOptions[].ValidationStatus","state":"retry"},{"matcher":"path","expected":"FAILED","argument":"Certificate.Status","state":"failure"},{"matcher":"error","expected":"ResourceNotFoundException","state":"failure"}]}}}

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['apigateway'] = {};
	AWS.APIGateway = Service.defineService('apigateway', ['2015-07-09']);
	__webpack_require__(55);
	Object.defineProperty(apiLoader.services['apigateway'], '2015-07-09', {
	  get: function get() {
	    var model = __webpack_require__(56);
	    model.paginators = __webpack_require__(57).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.APIGateway;


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(4);

	AWS.util.update(AWS.APIGateway.prototype, {
	/**
	 * Sets the Accept header to application/json.
	 *
	 * @api private
	 */
	  setAcceptHeader: function setAcceptHeader(req) {
	    var httpRequest = req.httpRequest;
	    if (!httpRequest.headers.Accept) {
	      httpRequest.headers['Accept'] = 'application/json';
	    }
	  },

	  /**
	   * @api private
	   */
	  setupRequestListeners: function setupRequestListeners(request) {
	    request.addListener('build', this.setAcceptHeader);
	    if (request.operation === 'getExport') {
	      var params = request.params || {};
	      if (params.exportType === 'swagger') {
	        request.addListener('extractData', AWS.util.convertPayloadToString);
	      }
	    }
	  }
	});



/***/ }),
/* 56 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-07-09","endpointPrefix":"apigateway","protocol":"rest-json","serviceFullName":"Amazon API Gateway","serviceId":"API Gateway","signatureVersion":"v4","uid":"apigateway-2015-07-09"},"operations":{"CreateApiKey":{"http":{"requestUri":"/apikeys","responseCode":201},"input":{"type":"structure","members":{"name":{},"description":{},"enabled":{"type":"boolean"},"generateDistinctId":{"type":"boolean"},"value":{},"stageKeys":{"type":"list","member":{"type":"structure","members":{"restApiId":{},"stageName":{}}}},"customerId":{},"tags":{"shape":"S6"}}},"output":{"shape":"S7"}},"CreateAuthorizer":{"http":{"requestUri":"/restapis/{restapi_id}/authorizers","responseCode":201},"input":{"type":"structure","required":["restApiId","name","type"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"name":{},"type":{},"providerARNs":{"shape":"Sc"},"authType":{},"authorizerUri":{},"authorizerCredentials":{},"identitySource":{},"identityValidationExpression":{},"authorizerResultTtlInSeconds":{"type":"integer"}}},"output":{"shape":"Sf"}},"CreateBasePathMapping":{"http":{"requestUri":"/domainnames/{domain_name}/basepathmappings","responseCode":201},"input":{"type":"structure","required":["domainName","restApiId"],"members":{"domainName":{"location":"uri","locationName":"domain_name"},"basePath":{},"restApiId":{},"stage":{}}},"output":{"shape":"Sh"}},"CreateDeployment":{"http":{"requestUri":"/restapis/{restapi_id}/deployments","responseCode":201},"input":{"type":"structure","required":["restApiId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"stageName":{},"stageDescription":{},"description":{},"cacheClusterEnabled":{"type":"boolean"},"cacheClusterSize":{},"variables":{"shape":"S6"},"canarySettings":{"type":"structure","members":{"percentTraffic":{"type":"double"},"stageVariableOverrides":{"shape":"S6"},"useStageCache":{"type":"boolean"}}},"tracingEnabled":{"type":"boolean"}}},"output":{"shape":"Sn"}},"CreateDocumentationPart":{"http":{"requestUri":"/restapis/{restapi_id}/documentation/parts","responseCode":201},"input":{"type":"structure","required":["restApiId","location","properties"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"location":{"shape":"Ss"},"properties":{}}},"output":{"shape":"Sv"}},"CreateDocumentationVersion":{"http":{"requestUri":"/restapis/{restapi_id}/documentation/versions","responseCode":201},"input":{"type":"structure","required":["restApiId","documentationVersion"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"documentationVersion":{},"stageName":{},"description":{}}},"output":{"shape":"Sx"}},"CreateDomainName":{"http":{"requestUri":"/domainnames","responseCode":201},"input":{"type":"structure","required":["domainName"],"members":{"domainName":{},"certificateName":{},"certificateBody":{},"certificatePrivateKey":{},"certificateChain":{},"certificateArn":{},"regionalCertificateName":{},"regionalCertificateArn":{},"endpointConfiguration":{"shape":"Sz"},"tags":{"shape":"S6"},"securityPolicy":{},"mutualTlsAuthentication":{"type":"structure","members":{"truststoreUri":{},"truststoreVersion":{}}}}},"output":{"shape":"S14"}},"CreateModel":{"http":{"requestUri":"/restapis/{restapi_id}/models","responseCode":201},"input":{"type":"structure","required":["restApiId","name","contentType"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"name":{},"description":{},"schema":{},"contentType":{}}},"output":{"shape":"S18"}},"CreateRequestValidator":{"http":{"requestUri":"/restapis/{restapi_id}/requestvalidators","responseCode":201},"input":{"type":"structure","required":["restApiId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"name":{},"validateRequestBody":{"type":"boolean"},"validateRequestParameters":{"type":"boolean"}}},"output":{"shape":"S1a"}},"CreateResource":{"http":{"requestUri":"/restapis/{restapi_id}/resources/{parent_id}","responseCode":201},"input":{"type":"structure","required":["restApiId","parentId","pathPart"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"parentId":{"location":"uri","locationName":"parent_id"},"pathPart":{}}},"output":{"shape":"S1c"}},"CreateRestApi":{"http":{"requestUri":"/restapis","responseCode":201},"input":{"type":"structure","required":["name"],"members":{"name":{},"description":{},"version":{},"cloneFrom":{},"binaryMediaTypes":{"shape":"S9"},"minimumCompressionSize":{"type":"integer"},"apiKeySource":{},"endpointConfiguration":{"shape":"Sz"},"policy":{},"tags":{"shape":"S6"},"disableExecuteApiEndpoint":{"type":"boolean"}}},"output":{"shape":"S1t"}},"CreateStage":{"http":{"requestUri":"/restapis/{restapi_id}/stages","responseCode":201},"input":{"type":"structure","required":["restApiId","stageName","deploymentId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"stageName":{},"deploymentId":{},"description":{},"cacheClusterEnabled":{"type":"boolean"},"cacheClusterSize":{},"variables":{"shape":"S6"},"documentationVersion":{},"canarySettings":{"shape":"S1v"},"tracingEnabled":{"type":"boolean"},"tags":{"shape":"S6"}}},"output":{"shape":"S1w"}},"CreateUsagePlan":{"http":{"requestUri":"/usageplans","responseCode":201},"input":{"type":"structure","required":["name"],"members":{"name":{},"description":{},"apiStages":{"shape":"S23"},"throttle":{"shape":"S26"},"quota":{"shape":"S27"},"tags":{"shape":"S6"}}},"output":{"shape":"S29"}},"CreateUsagePlanKey":{"http":{"requestUri":"/usageplans/{usageplanId}/keys","responseCode":201},"input":{"type":"structure","required":["usagePlanId","keyId","keyType"],"members":{"usagePlanId":{"location":"uri","locationName":"usageplanId"},"keyId":{},"keyType":{}}},"output":{"shape":"S2b"}},"CreateVpcLink":{"http":{"requestUri":"/vpclinks","responseCode":202},"input":{"type":"structure","required":["name","targetArns"],"members":{"name":{},"description":{},"targetArns":{"shape":"S9"},"tags":{"shape":"S6"}}},"output":{"shape":"S2d"}},"DeleteApiKey":{"http":{"method":"DELETE","requestUri":"/apikeys/{api_Key}","responseCode":202},"input":{"type":"structure","required":["apiKey"],"members":{"apiKey":{"location":"uri","locationName":"api_Key"}}}},"DeleteAuthorizer":{"http":{"method":"DELETE","requestUri":"/restapis/{restapi_id}/authorizers/{authorizer_id}","responseCode":202},"input":{"type":"structure","required":["restApiId","authorizerId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"authorizerId":{"location":"uri","locationName":"authorizer_id"}}}},"DeleteBasePathMapping":{"http":{"method":"DELETE","requestUri":"/domainnames/{domain_name}/basepathmappings/{base_path}","responseCode":202},"input":{"type":"structure","required":["domainName","basePath"],"members":{"domainName":{"location":"uri","locationName":"domain_name"},"basePath":{"location":"uri","locationName":"base_path"}}}},"DeleteClientCertificate":{"http":{"method":"DELETE","requestUri":"/clientcertificates/{clientcertificate_id}","responseCode":202},"input":{"type":"structure","required":["clientCertificateId"],"members":{"clientCertificateId":{"location":"uri","locationName":"clientcertificate_id"}}}},"DeleteDeployment":{"http":{"method":"DELETE","requestUri":"/restapis/{restapi_id}/deployments/{deployment_id}","responseCode":202},"input":{"type":"structure","required":["restApiId","deploymentId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"deploymentId":{"location":"uri","locationName":"deployment_id"}}}},"DeleteDocumentationPart":{"http":{"method":"DELETE","requestUri":"/restapis/{restapi_id}/documentation/parts/{part_id}","responseCode":202},"input":{"type":"structure","required":["restApiId","documentationPartId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"documentationPartId":{"location":"uri","locationName":"part_id"}}}},"DeleteDocumentationVersion":{"http":{"method":"DELETE","requestUri":"/restapis/{restapi_id}/documentation/versions/{doc_version}","responseCode":202},"input":{"type":"structure","required":["restApiId","documentationVersion"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"documentationVersion":{"location":"uri","locationName":"doc_version"}}}},"DeleteDomainName":{"http":{"method":"DELETE","requestUri":"/domainnames/{domain_name}","responseCode":202},"input":{"type":"structure","required":["domainName"],"members":{"domainName":{"location":"uri","locationName":"domain_name"}}}},"DeleteGatewayResponse":{"http":{"method":"DELETE","requestUri":"/restapis/{restapi_id}/gatewayresponses/{response_type}","responseCode":202},"input":{"type":"structure","required":["restApiId","responseType"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"responseType":{"location":"uri","locationName":"response_type"}}}},"DeleteIntegration":{"http":{"method":"DELETE","requestUri":"/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration","responseCode":204},"input":{"type":"structure","required":["restApiId","resourceId","httpMethod"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"httpMethod":{"location":"uri","locationName":"http_method"}}}},"DeleteIntegrationResponse":{"http":{"method":"DELETE","requestUri":"/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}","responseCode":204},"input":{"type":"structure","required":["restApiId","resourceId","httpMethod","statusCode"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"httpMethod":{"location":"uri","locationName":"http_method"},"statusCode":{"location":"uri","locationName":"status_code"}}}},"DeleteMethod":{"http":{"method":"DELETE","requestUri":"/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}","responseCode":204},"input":{"type":"structure","required":["restApiId","resourceId","httpMethod"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"httpMethod":{"location":"uri","locationName":"http_method"}}}},"DeleteMethodResponse":{"http":{"method":"DELETE","requestUri":"/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}","responseCode":204},"input":{"type":"structure","required":["restApiId","resourceId","httpMethod","statusCode"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"httpMethod":{"location":"uri","locationName":"http_method"},"statusCode":{"location":"uri","locationName":"status_code"}}}},"DeleteModel":{"http":{"method":"DELETE","requestUri":"/restapis/{restapi_id}/models/{model_name}","responseCode":202},"input":{"type":"structure","required":["restApiId","modelName"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"modelName":{"location":"uri","locationName":"model_name"}}}},"DeleteRequestValidator":{"http":{"method":"DELETE","requestUri":"/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}","responseCode":202},"input":{"type":"structure","required":["restApiId","requestValidatorId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"requestValidatorId":{"location":"uri","locationName":"requestvalidator_id"}}}},"DeleteResource":{"http":{"method":"DELETE","requestUri":"/restapis/{restapi_id}/resources/{resource_id}","responseCode":202},"input":{"type":"structure","required":["restApiId","resourceId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"}}}},"DeleteRestApi":{"http":{"method":"DELETE","requestUri":"/restapis/{restapi_id}","responseCode":202},"input":{"type":"structure","required":["restApiId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"}}}},"DeleteStage":{"http":{"method":"DELETE","requestUri":"/restapis/{restapi_id}/stages/{stage_name}","responseCode":202},"input":{"type":"structure","required":["restApiId","stageName"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"stageName":{"location":"uri","locationName":"stage_name"}}}},"DeleteUsagePlan":{"http":{"method":"DELETE","requestUri":"/usageplans/{usageplanId}","responseCode":202},"input":{"type":"structure","required":["usagePlanId"],"members":{"usagePlanId":{"location":"uri","locationName":"usageplanId"}}}},"DeleteUsagePlanKey":{"http":{"method":"DELETE","requestUri":"/usageplans/{usageplanId}/keys/{keyId}","responseCode":202},"input":{"type":"structure","required":["usagePlanId","keyId"],"members":{"usagePlanId":{"location":"uri","locationName":"usageplanId"},"keyId":{"location":"uri","locationName":"keyId"}}}},"DeleteVpcLink":{"http":{"method":"DELETE","requestUri":"/vpclinks/{vpclink_id}","responseCode":202},"input":{"type":"structure","required":["vpcLinkId"],"members":{"vpcLinkId":{"location":"uri","locationName":"vpclink_id"}}}},"FlushStageAuthorizersCache":{"http":{"method":"DELETE","requestUri":"/restapis/{restapi_id}/stages/{stage_name}/cache/authorizers","responseCode":202},"input":{"type":"structure","required":["restApiId","stageName"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"stageName":{"location":"uri","locationName":"stage_name"}}}},"FlushStageCache":{"http":{"method":"DELETE","requestUri":"/restapis/{restapi_id}/stages/{stage_name}/cache/data","responseCode":202},"input":{"type":"structure","required":["restApiId","stageName"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"stageName":{"location":"uri","locationName":"stage_name"}}}},"GenerateClientCertificate":{"http":{"requestUri":"/clientcertificates","responseCode":201},"input":{"type":"structure","members":{"description":{},"tags":{"shape":"S6"}}},"output":{"shape":"S34"}},"GetAccount":{"http":{"method":"GET","requestUri":"/account"},"input":{"type":"structure","members":{}},"output":{"shape":"S36"}},"GetApiKey":{"http":{"method":"GET","requestUri":"/apikeys/{api_Key}"},"input":{"type":"structure","required":["apiKey"],"members":{"apiKey":{"location":"uri","locationName":"api_Key"},"includeValue":{"location":"querystring","locationName":"includeValue","type":"boolean"}}},"output":{"shape":"S7"}},"GetApiKeys":{"http":{"method":"GET","requestUri":"/apikeys"},"input":{"type":"structure","members":{"position":{"location":"querystring","locationName":"position"},"limit":{"location":"querystring","locationName":"limit","type":"integer"},"nameQuery":{"location":"querystring","locationName":"name"},"customerId":{"location":"querystring","locationName":"customerId"},"includeValues":{"location":"querystring","locationName":"includeValues","type":"boolean"}}},"output":{"type":"structure","members":{"warnings":{"shape":"S9"},"position":{},"items":{"locationName":"item","type":"list","member":{"shape":"S7"}}}}},"GetAuthorizer":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/authorizers/{authorizer_id}"},"input":{"type":"structure","required":["restApiId","authorizerId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"authorizerId":{"location":"uri","locationName":"authorizer_id"}}},"output":{"shape":"Sf"}},"GetAuthorizers":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/authorizers"},"input":{"type":"structure","required":["restApiId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"position":{"location":"querystring","locationName":"position"},"limit":{"location":"querystring","locationName":"limit","type":"integer"}}},"output":{"type":"structure","members":{"position":{},"items":{"locationName":"item","type":"list","member":{"shape":"Sf"}}}}},"GetBasePathMapping":{"http":{"method":"GET","requestUri":"/domainnames/{domain_name}/basepathmappings/{base_path}"},"input":{"type":"structure","required":["domainName","basePath"],"members":{"domainName":{"location":"uri","locationName":"domain_name"},"basePath":{"location":"uri","locationName":"base_path"}}},"output":{"shape":"Sh"}},"GetBasePathMappings":{"http":{"method":"GET","requestUri":"/domainnames/{domain_name}/basepathmappings"},"input":{"type":"structure","required":["domainName"],"members":{"domainName":{"location":"uri","locationName":"domain_name"},"position":{"location":"querystring","locationName":"position"},"limit":{"location":"querystring","locationName":"limit","type":"integer"}}},"output":{"type":"structure","members":{"position":{},"items":{"locationName":"item","type":"list","member":{"shape":"Sh"}}}}},"GetClientCertificate":{"http":{"method":"GET","requestUri":"/clientcertificates/{clientcertificate_id}"},"input":{"type":"structure","required":["clientCertificateId"],"members":{"clientCertificateId":{"location":"uri","locationName":"clientcertificate_id"}}},"output":{"shape":"S34"}},"GetClientCertificates":{"http":{"method":"GET","requestUri":"/clientcertificates"},"input":{"type":"structure","members":{"position":{"location":"querystring","locationName":"position"},"limit":{"location":"querystring","locationName":"limit","type":"integer"}}},"output":{"type":"structure","members":{"position":{},"items":{"locationName":"item","type":"list","member":{"shape":"S34"}}}}},"GetDeployment":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/deployments/{deployment_id}"},"input":{"type":"structure","required":["restApiId","deploymentId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"deploymentId":{"location":"uri","locationName":"deployment_id"},"embed":{"shape":"S9","location":"querystring","locationName":"embed"}}},"output":{"shape":"Sn"}},"GetDeployments":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/deployments"},"input":{"type":"structure","required":["restApiId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"position":{"location":"querystring","locationName":"position"},"limit":{"location":"querystring","locationName":"limit","type":"integer"}}},"output":{"type":"structure","members":{"position":{},"items":{"locationName":"item","type":"list","member":{"shape":"Sn"}}}}},"GetDocumentationPart":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/documentation/parts/{part_id}"},"input":{"type":"structure","required":["restApiId","documentationPartId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"documentationPartId":{"location":"uri","locationName":"part_id"}}},"output":{"shape":"Sv"}},"GetDocumentationParts":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/documentation/parts"},"input":{"type":"structure","required":["restApiId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"type":{"location":"querystring","locationName":"type"},"nameQuery":{"location":"querystring","locationName":"name"},"path":{"location":"querystring","locationName":"path"},"position":{"location":"querystring","locationName":"position"},"limit":{"location":"querystring","locationName":"limit","type":"integer"},"locationStatus":{"location":"querystring","locationName":"locationStatus"}}},"output":{"type":"structure","members":{"position":{},"items":{"locationName":"item","type":"list","member":{"shape":"Sv"}}}}},"GetDocumentationVersion":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/documentation/versions/{doc_version}"},"input":{"type":"structure","required":["restApiId","documentationVersion"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"documentationVersion":{"location":"uri","locationName":"doc_version"}}},"output":{"shape":"Sx"}},"GetDocumentationVersions":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/documentation/versions"},"input":{"type":"structure","required":["restApiId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"position":{"location":"querystring","locationName":"position"},"limit":{"location":"querystring","locationName":"limit","type":"integer"}}},"output":{"type":"structure","members":{"position":{},"items":{"locationName":"item","type":"list","member":{"shape":"Sx"}}}}},"GetDomainName":{"http":{"method":"GET","requestUri":"/domainnames/{domain_name}"},"input":{"type":"structure","required":["domainName"],"members":{"domainName":{"location":"uri","locationName":"domain_name"}}},"output":{"shape":"S14"}},"GetDomainNames":{"http":{"method":"GET","requestUri":"/domainnames"},"input":{"type":"structure","members":{"position":{"location":"querystring","locationName":"position"},"limit":{"location":"querystring","locationName":"limit","type":"integer"}}},"output":{"type":"structure","members":{"position":{},"items":{"locationName":"item","type":"list","member":{"shape":"S14"}}}}},"GetExport":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/stages/{stage_name}/exports/{export_type}","responseCode":200},"input":{"type":"structure","required":["restApiId","stageName","exportType"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"stageName":{"location":"uri","locationName":"stage_name"},"exportType":{"location":"uri","locationName":"export_type"},"parameters":{"shape":"S6","location":"querystring"},"accepts":{"location":"header","locationName":"Accept"}}},"output":{"type":"structure","members":{"contentType":{"location":"header","locationName":"Content-Type"},"contentDisposition":{"location":"header","locationName":"Content-Disposition"},"body":{"type":"blob"}},"payload":"body"}},"GetGatewayResponse":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/gatewayresponses/{response_type}"},"input":{"type":"structure","required":["restApiId","responseType"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"responseType":{"location":"uri","locationName":"response_type"}}},"output":{"shape":"S48"}},"GetGatewayResponses":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/gatewayresponses"},"input":{"type":"structure","required":["restApiId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"position":{"location":"querystring","locationName":"position"},"limit":{"location":"querystring","locationName":"limit","type":"integer"}}},"output":{"type":"structure","members":{"position":{},"items":{"locationName":"item","type":"list","member":{"shape":"S48"}}}}},"GetIntegration":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration"},"input":{"type":"structure","required":["restApiId","resourceId","httpMethod"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"httpMethod":{"location":"uri","locationName":"http_method"}}},"output":{"shape":"S1j"}},"GetIntegrationResponse":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}"},"input":{"type":"structure","required":["restApiId","resourceId","httpMethod","statusCode"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"httpMethod":{"location":"uri","locationName":"http_method"},"statusCode":{"location":"uri","locationName":"status_code"}}},"output":{"shape":"S1p"}},"GetMethod":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}"},"input":{"type":"structure","required":["restApiId","resourceId","httpMethod"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"httpMethod":{"location":"uri","locationName":"http_method"}}},"output":{"shape":"S1e"}},"GetMethodResponse":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}"},"input":{"type":"structure","required":["restApiId","resourceId","httpMethod","statusCode"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"httpMethod":{"location":"uri","locationName":"http_method"},"statusCode":{"location":"uri","locationName":"status_code"}}},"output":{"shape":"S1h"}},"GetModel":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/models/{model_name}"},"input":{"type":"structure","required":["restApiId","modelName"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"modelName":{"location":"uri","locationName":"model_name"},"flatten":{"location":"querystring","locationName":"flatten","type":"boolean"}}},"output":{"shape":"S18"}},"GetModelTemplate":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/models/{model_name}/default_template"},"input":{"type":"structure","required":["restApiId","modelName"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"modelName":{"location":"uri","locationName":"model_name"}}},"output":{"type":"structure","members":{"value":{}}}},"GetModels":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/models"},"input":{"type":"structure","required":["restApiId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"position":{"location":"querystring","locationName":"position"},"limit":{"location":"querystring","locationName":"limit","type":"integer"}}},"output":{"type":"structure","members":{"position":{},"items":{"locationName":"item","type":"list","member":{"shape":"S18"}}}}},"GetRequestValidator":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}"},"input":{"type":"structure","required":["restApiId","requestValidatorId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"requestValidatorId":{"location":"uri","locationName":"requestvalidator_id"}}},"output":{"shape":"S1a"}},"GetRequestValidators":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/requestvalidators"},"input":{"type":"structure","required":["restApiId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"position":{"location":"querystring","locationName":"position"},"limit":{"location":"querystring","locationName":"limit","type":"integer"}}},"output":{"type":"structure","members":{"position":{},"items":{"locationName":"item","type":"list","member":{"shape":"S1a"}}}}},"GetResource":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/resources/{resource_id}"},"input":{"type":"structure","required":["restApiId","resourceId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"embed":{"shape":"S9","location":"querystring","locationName":"embed"}}},"output":{"shape":"S1c"}},"GetResources":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/resources"},"input":{"type":"structure","required":["restApiId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"position":{"location":"querystring","locationName":"position"},"limit":{"location":"querystring","locationName":"limit","type":"integer"},"embed":{"shape":"S9","location":"querystring","locationName":"embed"}}},"output":{"type":"structure","members":{"position":{},"items":{"locationName":"item","type":"list","member":{"shape":"S1c"}}}}},"GetRestApi":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}"},"input":{"type":"structure","required":["restApiId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"}}},"output":{"shape":"S1t"}},"GetRestApis":{"http":{"method":"GET","requestUri":"/restapis"},"input":{"type":"structure","members":{"position":{"location":"querystring","locationName":"position"},"limit":{"location":"querystring","locationName":"limit","type":"integer"}}},"output":{"type":"structure","members":{"position":{},"items":{"locationName":"item","type":"list","member":{"shape":"S1t"}}}}},"GetSdk":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/stages/{stage_name}/sdks/{sdk_type}","responseCode":200},"input":{"type":"structure","required":["restApiId","stageName","sdkType"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"stageName":{"location":"uri","locationName":"stage_name"},"sdkType":{"location":"uri","locationName":"sdk_type"},"parameters":{"shape":"S6","location":"querystring"}}},"output":{"type":"structure","members":{"contentType":{"location":"header","locationName":"Content-Type"},"contentDisposition":{"location":"header","locationName":"Content-Disposition"},"body":{"type":"blob"}},"payload":"body"}},"GetSdkType":{"http":{"method":"GET","requestUri":"/sdktypes/{sdktype_id}"},"input":{"type":"structure","required":["id"],"members":{"id":{"location":"uri","locationName":"sdktype_id"}}},"output":{"shape":"S51"}},"GetSdkTypes":{"http":{"method":"GET","requestUri":"/sdktypes"},"input":{"type":"structure","members":{"position":{"location":"querystring","locationName":"position"},"limit":{"location":"querystring","locationName":"limit","type":"integer"}}},"output":{"type":"structure","members":{"position":{},"items":{"locationName":"item","type":"list","member":{"shape":"S51"}}}}},"GetStage":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/stages/{stage_name}"},"input":{"type":"structure","required":["restApiId","stageName"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"stageName":{"location":"uri","locationName":"stage_name"}}},"output":{"shape":"S1w"}},"GetStages":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/stages"},"input":{"type":"structure","required":["restApiId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"deploymentId":{"location":"querystring","locationName":"deploymentId"}}},"output":{"type":"structure","members":{"item":{"type":"list","member":{"shape":"S1w"}}}}},"GetTags":{"http":{"method":"GET","requestUri":"/tags/{resource_arn}"},"input":{"type":"structure","required":["resourceArn"],"members":{"resourceArn":{"location":"uri","locationName":"resource_arn"},"position":{"location":"querystring","locationName":"position"},"limit":{"location":"querystring","locationName":"limit","type":"integer"}}},"output":{"type":"structure","members":{"tags":{"shape":"S6"}}}},"GetUsage":{"http":{"method":"GET","requestUri":"/usageplans/{usageplanId}/usage"},"input":{"type":"structure","required":["usagePlanId","startDate","endDate"],"members":{"usagePlanId":{"location":"uri","locationName":"usageplanId"},"keyId":{"location":"querystring","locationName":"keyId"},"startDate":{"location":"querystring","locationName":"startDate"},"endDate":{"location":"querystring","locationName":"endDate"},"position":{"location":"querystring","locationName":"position"},"limit":{"location":"querystring","locationName":"limit","type":"integer"}}},"output":{"shape":"S5e"}},"GetUsagePlan":{"http":{"method":"GET","requestUri":"/usageplans/{usageplanId}"},"input":{"type":"structure","required":["usagePlanId"],"members":{"usagePlanId":{"location":"uri","locationName":"usageplanId"}}},"output":{"shape":"S29"}},"GetUsagePlanKey":{"http":{"method":"GET","requestUri":"/usageplans/{usageplanId}/keys/{keyId}","responseCode":200},"input":{"type":"structure","required":["usagePlanId","keyId"],"members":{"usagePlanId":{"location":"uri","locationName":"usageplanId"},"keyId":{"location":"uri","locationName":"keyId"}}},"output":{"shape":"S2b"}},"GetUsagePlanKeys":{"http":{"method":"GET","requestUri":"/usageplans/{usageplanId}/keys"},"input":{"type":"structure","required":["usagePlanId"],"members":{"usagePlanId":{"location":"uri","locationName":"usageplanId"},"position":{"location":"querystring","locationName":"position"},"limit":{"location":"querystring","locationName":"limit","type":"integer"},"nameQuery":{"location":"querystring","locationName":"name"}}},"output":{"type":"structure","members":{"position":{},"items":{"locationName":"item","type":"list","member":{"shape":"S2b"}}}}},"GetUsagePlans":{"http":{"method":"GET","requestUri":"/usageplans"},"input":{"type":"structure","members":{"position":{"location":"querystring","locationName":"position"},"keyId":{"location":"querystring","locationName":"keyId"},"limit":{"location":"querystring","locationName":"limit","type":"integer"}}},"output":{"type":"structure","members":{"position":{},"items":{"locationName":"item","type":"list","member":{"shape":"S29"}}}}},"GetVpcLink":{"http":{"method":"GET","requestUri":"/vpclinks/{vpclink_id}"},"input":{"type":"structure","required":["vpcLinkId"],"members":{"vpcLinkId":{"location":"uri","locationName":"vpclink_id"}}},"output":{"shape":"S2d"}},"GetVpcLinks":{"http":{"method":"GET","requestUri":"/vpclinks"},"input":{"type":"structure","members":{"position":{"location":"querystring","locationName":"position"},"limit":{"location":"querystring","locationName":"limit","type":"integer"}}},"output":{"type":"structure","members":{"position":{},"items":{"locationName":"item","type":"list","member":{"shape":"S2d"}}}}},"ImportApiKeys":{"http":{"requestUri":"/apikeys?mode=import","responseCode":201},"input":{"type":"structure","required":["body","format"],"members":{"body":{"type":"blob"},"format":{"location":"querystring","locationName":"format"},"failOnWarnings":{"location":"querystring","locationName":"failonwarnings","type":"boolean"}},"payload":"body"},"output":{"type":"structure","members":{"ids":{"shape":"S9"},"warnings":{"shape":"S9"}}}},"ImportDocumentationParts":{"http":{"method":"PUT","requestUri":"/restapis/{restapi_id}/documentation/parts"},"input":{"type":"structure","required":["restApiId","body"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"mode":{"location":"querystring","locationName":"mode"},"failOnWarnings":{"location":"querystring","locationName":"failonwarnings","type":"boolean"},"body":{"type":"blob"}},"payload":"body"},"output":{"type":"structure","members":{"ids":{"shape":"S9"},"warnings":{"shape":"S9"}}}},"ImportRestApi":{"http":{"requestUri":"/restapis?mode=import","responseCode":201},"input":{"type":"structure","required":["body"],"members":{"failOnWarnings":{"location":"querystring","locationName":"failonwarnings","type":"boolean"},"parameters":{"shape":"S6","location":"querystring"},"body":{"type":"blob"}},"payload":"body"},"output":{"shape":"S1t"}},"PutGatewayResponse":{"http":{"method":"PUT","requestUri":"/restapis/{restapi_id}/gatewayresponses/{response_type}","responseCode":201},"input":{"type":"structure","required":["restApiId","responseType"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"responseType":{"location":"uri","locationName":"response_type"},"statusCode":{},"responseParameters":{"shape":"S6"},"responseTemplates":{"shape":"S6"}}},"output":{"shape":"S48"}},"PutIntegration":{"http":{"method":"PUT","requestUri":"/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration","responseCode":201},"input":{"type":"structure","required":["restApiId","resourceId","httpMethod","type"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"httpMethod":{"location":"uri","locationName":"http_method"},"type":{},"integrationHttpMethod":{"locationName":"httpMethod"},"uri":{},"connectionType":{},"connectionId":{},"credentials":{},"requestParameters":{"shape":"S6"},"requestTemplates":{"shape":"S6"},"passthroughBehavior":{},"cacheNamespace":{},"cacheKeyParameters":{"shape":"S9"},"contentHandling":{},"timeoutInMillis":{"type":"integer"},"tlsConfig":{"shape":"S1q"}}},"output":{"shape":"S1j"}},"PutIntegrationResponse":{"http":{"method":"PUT","requestUri":"/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}","responseCode":201},"input":{"type":"structure","required":["restApiId","resourceId","httpMethod","statusCode"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"httpMethod":{"location":"uri","locationName":"http_method"},"statusCode":{"location":"uri","locationName":"status_code"},"selectionPattern":{},"responseParameters":{"shape":"S6"},"responseTemplates":{"shape":"S6"},"contentHandling":{}}},"output":{"shape":"S1p"}},"PutMethod":{"http":{"method":"PUT","requestUri":"/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}","responseCode":201},"input":{"type":"structure","required":["restApiId","resourceId","httpMethod","authorizationType"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"httpMethod":{"location":"uri","locationName":"http_method"},"authorizationType":{},"authorizerId":{},"apiKeyRequired":{"type":"boolean"},"operationName":{},"requestParameters":{"shape":"S1f"},"requestModels":{"shape":"S6"},"requestValidatorId":{},"authorizationScopes":{"shape":"S9"}}},"output":{"shape":"S1e"}},"PutMethodResponse":{"http":{"method":"PUT","requestUri":"/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}","responseCode":201},"input":{"type":"structure","required":["restApiId","resourceId","httpMethod","statusCode"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"httpMethod":{"location":"uri","locationName":"http_method"},"statusCode":{"location":"uri","locationName":"status_code"},"responseParameters":{"shape":"S1f"},"responseModels":{"shape":"S6"}}},"output":{"shape":"S1h"}},"PutRestApi":{"http":{"method":"PUT","requestUri":"/restapis/{restapi_id}"},"input":{"type":"structure","required":["restApiId","body"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"mode":{"location":"querystring","locationName":"mode"},"failOnWarnings":{"location":"querystring","locationName":"failonwarnings","type":"boolean"},"parameters":{"shape":"S6","location":"querystring"},"body":{"type":"blob"}},"payload":"body"},"output":{"shape":"S1t"}},"TagResource":{"http":{"method":"PUT","requestUri":"/tags/{resource_arn}","responseCode":204},"input":{"type":"structure","required":["resourceArn","tags"],"members":{"resourceArn":{"location":"uri","locationName":"resource_arn"},"tags":{"shape":"S6"}}}},"TestInvokeAuthorizer":{"http":{"requestUri":"/restapis/{restapi_id}/authorizers/{authorizer_id}"},"input":{"type":"structure","required":["restApiId","authorizerId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"authorizerId":{"location":"uri","locationName":"authorizer_id"},"headers":{"shape":"S6"},"multiValueHeaders":{"shape":"S6a"},"pathWithQueryString":{},"body":{},"stageVariables":{"shape":"S6"},"additionalContext":{"shape":"S6"}}},"output":{"type":"structure","members":{"clientStatus":{"type":"integer"},"log":{},"latency":{"type":"long"},"principalId":{},"policy":{},"authorization":{"shape":"S6a"},"claims":{"shape":"S6"}}}},"TestInvokeMethod":{"http":{"requestUri":"/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}"},"input":{"type":"structure","required":["restApiId","resourceId","httpMethod"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"httpMethod":{"location":"uri","locationName":"http_method"},"pathWithQueryString":{},"body":{},"headers":{"shape":"S6"},"multiValueHeaders":{"shape":"S6a"},"clientCertificateId":{},"stageVariables":{"shape":"S6"}}},"output":{"type":"structure","members":{"status":{"type":"integer"},"body":{},"headers":{"shape":"S6"},"multiValueHeaders":{"shape":"S6a"},"log":{},"latency":{"type":"long"}}}},"UntagResource":{"http":{"method":"DELETE","requestUri":"/tags/{resource_arn}","responseCode":204},"input":{"type":"structure","required":["resourceArn","tagKeys"],"members":{"resourceArn":{"location":"uri","locationName":"resource_arn"},"tagKeys":{"shape":"S9","location":"querystring","locationName":"tagKeys"}}}},"UpdateAccount":{"http":{"method":"PATCH","requestUri":"/account"},"input":{"type":"structure","members":{"patchOperations":{"shape":"S6g"}}},"output":{"shape":"S36"}},"UpdateApiKey":{"http":{"method":"PATCH","requestUri":"/apikeys/{api_Key}"},"input":{"type":"structure","required":["apiKey"],"members":{"apiKey":{"location":"uri","locationName":"api_Key"},"patchOperations":{"shape":"S6g"}}},"output":{"shape":"S7"}},"UpdateAuthorizer":{"http":{"method":"PATCH","requestUri":"/restapis/{restapi_id}/authorizers/{authorizer_id}"},"input":{"type":"structure","required":["restApiId","authorizerId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"authorizerId":{"location":"uri","locationName":"authorizer_id"},"patchOperations":{"shape":"S6g"}}},"output":{"shape":"Sf"}},"UpdateBasePathMapping":{"http":{"method":"PATCH","requestUri":"/domainnames/{domain_name}/basepathmappings/{base_path}"},"input":{"type":"structure","required":["domainName","basePath"],"members":{"domainName":{"location":"uri","locationName":"domain_name"},"basePath":{"location":"uri","locationName":"base_path"},"patchOperations":{"shape":"S6g"}}},"output":{"shape":"Sh"}},"UpdateClientCertificate":{"http":{"method":"PATCH","requestUri":"/clientcertificates/{clientcertificate_id}"},"input":{"type":"structure","required":["clientCertificateId"],"members":{"clientCertificateId":{"location":"uri","locationName":"clientcertificate_id"},"patchOperations":{"shape":"S6g"}}},"output":{"shape":"S34"}},"UpdateDeployment":{"http":{"method":"PATCH","requestUri":"/restapis/{restapi_id}/deployments/{deployment_id}"},"input":{"type":"structure","required":["restApiId","deploymentId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"deploymentId":{"location":"uri","locationName":"deployment_id"},"patchOperations":{"shape":"S6g"}}},"output":{"shape":"Sn"}},"UpdateDocumentationPart":{"http":{"method":"PATCH","requestUri":"/restapis/{restapi_id}/documentation/parts/{part_id}"},"input":{"type":"structure","required":["restApiId","documentationPartId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"documentationPartId":{"location":"uri","locationName":"part_id"},"patchOperations":{"shape":"S6g"}}},"output":{"shape":"Sv"}},"UpdateDocumentationVersion":{"http":{"method":"PATCH","requestUri":"/restapis/{restapi_id}/documentation/versions/{doc_version}"},"input":{"type":"structure","required":["restApiId","documentationVersion"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"documentationVersion":{"location":"uri","locationName":"doc_version"},"patchOperations":{"shape":"S6g"}}},"output":{"shape":"Sx"}},"UpdateDomainName":{"http":{"method":"PATCH","requestUri":"/domainnames/{domain_name}"},"input":{"type":"structure","required":["domainName"],"members":{"domainName":{"location":"uri","locationName":"domain_name"},"patchOperations":{"shape":"S6g"}}},"output":{"shape":"S14"}},"UpdateGatewayResponse":{"http":{"method":"PATCH","requestUri":"/restapis/{restapi_id}/gatewayresponses/{response_type}"},"input":{"type":"structure","required":["restApiId","responseType"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"responseType":{"location":"uri","locationName":"response_type"},"patchOperations":{"shape":"S6g"}}},"output":{"shape":"S48"}},"UpdateIntegration":{"http":{"method":"PATCH","requestUri":"/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration"},"input":{"type":"structure","required":["restApiId","resourceId","httpMethod"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"httpMethod":{"location":"uri","locationName":"http_method"},"patchOperations":{"shape":"S6g"}}},"output":{"shape":"S1j"}},"UpdateIntegrationResponse":{"http":{"method":"PATCH","requestUri":"/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}"},"input":{"type":"structure","required":["restApiId","resourceId","httpMethod","statusCode"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"httpMethod":{"location":"uri","locationName":"http_method"},"statusCode":{"location":"uri","locationName":"status_code"},"patchOperations":{"shape":"S6g"}}},"output":{"shape":"S1p"}},"UpdateMethod":{"http":{"method":"PATCH","requestUri":"/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}"},"input":{"type":"structure","required":["restApiId","resourceId","httpMethod"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"httpMethod":{"location":"uri","locationName":"http_method"},"patchOperations":{"shape":"S6g"}}},"output":{"shape":"S1e"}},"UpdateMethodResponse":{"http":{"method":"PATCH","requestUri":"/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}","responseCode":201},"input":{"type":"structure","required":["restApiId","resourceId","httpMethod","statusCode"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"httpMethod":{"location":"uri","locationName":"http_method"},"statusCode":{"location":"uri","locationName":"status_code"},"patchOperations":{"shape":"S6g"}}},"output":{"shape":"S1h"}},"UpdateModel":{"http":{"method":"PATCH","requestUri":"/restapis/{restapi_id}/models/{model_name}"},"input":{"type":"structure","required":["restApiId","modelName"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"modelName":{"location":"uri","locationName":"model_name"},"patchOperations":{"shape":"S6g"}}},"output":{"shape":"S18"}},"UpdateRequestValidator":{"http":{"method":"PATCH","requestUri":"/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}"},"input":{"type":"structure","required":["restApiId","requestValidatorId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"requestValidatorId":{"location":"uri","locationName":"requestvalidator_id"},"patchOperations":{"shape":"S6g"}}},"output":{"shape":"S1a"}},"UpdateResource":{"http":{"method":"PATCH","requestUri":"/restapis/{restapi_id}/resources/{resource_id}"},"input":{"type":"structure","required":["restApiId","resourceId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"patchOperations":{"shape":"S6g"}}},"output":{"shape":"S1c"}},"UpdateRestApi":{"http":{"method":"PATCH","requestUri":"/restapis/{restapi_id}"},"input":{"type":"structure","required":["restApiId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"patchOperations":{"shape":"S6g"}}},"output":{"shape":"S1t"}},"UpdateStage":{"http":{"method":"PATCH","requestUri":"/restapis/{restapi_id}/stages/{stage_name}"},"input":{"type":"structure","required":["restApiId","stageName"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"stageName":{"location":"uri","locationName":"stage_name"},"patchOperations":{"shape":"S6g"}}},"output":{"shape":"S1w"}},"UpdateUsage":{"http":{"method":"PATCH","requestUri":"/usageplans/{usageplanId}/keys/{keyId}/usage"},"input":{"type":"structure","required":["usagePlanId","keyId"],"members":{"usagePlanId":{"location":"uri","locationName":"usageplanId"},"keyId":{"location":"uri","locationName":"keyId"},"patchOperations":{"shape":"S6g"}}},"output":{"shape":"S5e"}},"UpdateUsagePlan":{"http":{"method":"PATCH","requestUri":"/usageplans/{usageplanId}"},"input":{"type":"structure","required":["usagePlanId"],"members":{"usagePlanId":{"location":"uri","locationName":"usageplanId"},"patchOperations":{"shape":"S6g"}}},"output":{"shape":"S29"}},"UpdateVpcLink":{"http":{"method":"PATCH","requestUri":"/vpclinks/{vpclink_id}"},"input":{"type":"structure","required":["vpcLinkId"],"members":{"vpcLinkId":{"location":"uri","locationName":"vpclink_id"},"patchOperations":{"shape":"S6g"}}},"output":{"shape":"S2d"}}},"shapes":{"S6":{"type":"map","key":{},"value":{}},"S7":{"type":"structure","members":{"id":{},"value":{},"name":{},"customerId":{},"description":{},"enabled":{"type":"boolean"},"createdDate":{"type":"timestamp"},"lastUpdatedDate":{"type":"timestamp"},"stageKeys":{"shape":"S9"},"tags":{"shape":"S6"}}},"S9":{"type":"list","member":{}},"Sc":{"type":"list","member":{}},"Sf":{"type":"structure","members":{"id":{},"name":{},"type":{},"providerARNs":{"shape":"Sc"},"authType":{},"authorizerUri":{},"authorizerCredentials":{},"identitySource":{},"identityValidationExpression":{},"authorizerResultTtlInSeconds":{"type":"integer"}}},"Sh":{"type":"structure","members":{"basePath":{},"restApiId":{},"stage":{}}},"Sn":{"type":"structure","members":{"id":{},"description":{},"createdDate":{"type":"timestamp"},"apiSummary":{"type":"map","key":{},"value":{"type":"map","key":{},"value":{"type":"structure","members":{"authorizationType":{},"apiKeyRequired":{"type":"boolean"}}}}}}},"Ss":{"type":"structure","required":["type"],"members":{"type":{},"path":{},"method":{},"statusCode":{},"name":{}}},"Sv":{"type":"structure","members":{"id":{},"location":{"shape":"Ss"},"properties":{}}},"Sx":{"type":"structure","members":{"version":{},"createdDate":{"type":"timestamp"},"description":{}}},"Sz":{"type":"structure","members":{"types":{"type":"list","member":{}},"vpcEndpointIds":{"shape":"S9"}}},"S14":{"type":"structure","members":{"domainName":{},"certificateName":{},"certificateArn":{},"certificateUploadDate":{"type":"timestamp"},"regionalDomainName":{},"regionalHostedZoneId":{},"regionalCertificateName":{},"regionalCertificateArn":{},"distributionDomainName":{},"distributionHostedZoneId":{},"endpointConfiguration":{"shape":"Sz"},"domainNameStatus":{},"domainNameStatusMessage":{},"securityPolicy":{},"tags":{"shape":"S6"},"mutualTlsAuthentication":{"type":"structure","members":{"truststoreUri":{},"truststoreVersion":{},"truststoreWarnings":{"shape":"S9"}}}}},"S18":{"type":"structure","members":{"id":{},"name":{},"description":{},"schema":{},"contentType":{}}},"S1a":{"type":"structure","members":{"id":{},"name":{},"validateRequestBody":{"type":"boolean"},"validateRequestParameters":{"type":"boolean"}}},"S1c":{"type":"structure","members":{"id":{},"parentId":{},"pathPart":{},"path":{},"resourceMethods":{"type":"map","key":{},"value":{"shape":"S1e"}}}},"S1e":{"type":"structure","members":{"httpMethod":{},"authorizationType":{},"authorizerId":{},"apiKeyRequired":{"type":"boolean"},"requestValidatorId":{},"operationName":{},"requestParameters":{"shape":"S1f"},"requestModels":{"shape":"S6"},"methodResponses":{"type":"map","key":{},"value":{"shape":"S1h"}},"methodIntegration":{"shape":"S1j"},"authorizationScopes":{"shape":"S9"}}},"S1f":{"type":"map","key":{},"value":{"type":"boolean"}},"S1h":{"type":"structure","members":{"statusCode":{},"responseParameters":{"shape":"S1f"},"responseModels":{"shape":"S6"}}},"S1j":{"type":"structure","members":{"type":{},"httpMethod":{},"uri":{},"connectionType":{},"connectionId":{},"credentials":{},"requestParameters":{"shape":"S6"},"requestTemplates":{"shape":"S6"},"passthroughBehavior":{},"contentHandling":{},"timeoutInMillis":{"type":"integer"},"cacheNamespace":{},"cacheKeyParameters":{"shape":"S9"},"integrationResponses":{"type":"map","key":{},"value":{"shape":"S1p"}},"tlsConfig":{"shape":"S1q"}}},"S1p":{"type":"structure","members":{"statusCode":{},"selectionPattern":{},"responseParameters":{"shape":"S6"},"responseTemplates":{"shape":"S6"},"contentHandling":{}}},"S1q":{"type":"structure","members":{"insecureSkipVerification":{"type":"boolean"}}},"S1t":{"type":"structure","members":{"id":{},"name":{},"description":{},"createdDate":{"type":"timestamp"},"version":{},"warnings":{"shape":"S9"},"binaryMediaTypes":{"shape":"S9"},"minimumCompressionSize":{"type":"integer"},"apiKeySource":{},"endpointConfiguration":{"shape":"Sz"},"policy":{},"tags":{"shape":"S6"},"disableExecuteApiEndpoint":{"type":"boolean"}}},"S1v":{"type":"structure","members":{"percentTraffic":{"type":"double"},"deploymentId":{},"stageVariableOverrides":{"shape":"S6"},"useStageCache":{"type":"boolean"}}},"S1w":{"type":"structure","members":{"deploymentId":{},"clientCertificateId":{},"stageName":{},"description":{},"cacheClusterEnabled":{"type":"boolean"},"cacheClusterSize":{},"cacheClusterStatus":{},"methodSettings":{"type":"map","key":{},"value":{"type":"structure","members":{"metricsEnabled":{"type":"boolean"},"loggingLevel":{},"dataTraceEnabled":{"type":"boolean"},"throttlingBurstLimit":{"type":"integer"},"throttlingRateLimit":{"type":"double"},"cachingEnabled":{"type":"boolean"},"cacheTtlInSeconds":{"type":"integer"},"cacheDataEncrypted":{"type":"boolean"},"requireAuthorizationForCacheControl":{"type":"boolean"},"unauthorizedCacheControlHeaderStrategy":{}}}},"variables":{"shape":"S6"},"documentationVersion":{},"accessLogSettings":{"type":"structure","members":{"format":{},"destinationArn":{}}},"canarySettings":{"shape":"S1v"},"tracingEnabled":{"type":"boolean"},"webAclArn":{},"tags":{"shape":"S6"},"createdDate":{"type":"timestamp"},"lastUpdatedDate":{"type":"timestamp"}}},"S23":{"type":"list","member":{"type":"structure","members":{"apiId":{},"stage":{},"throttle":{"type":"map","key":{},"value":{"shape":"S26"}}}}},"S26":{"type":"structure","members":{"burstLimit":{"type":"integer"},"rateLimit":{"type":"double"}}},"S27":{"type":"structure","members":{"limit":{"type":"integer"},"offset":{"type":"integer"},"period":{}}},"S29":{"type":"structure","members":{"id":{},"name":{},"description":{},"apiStages":{"shape":"S23"},"throttle":{"shape":"S26"},"quota":{"shape":"S27"},"productCode":{},"tags":{"shape":"S6"}}},"S2b":{"type":"structure","members":{"id":{},"type":{},"value":{},"name":{}}},"S2d":{"type":"structure","members":{"id":{},"name":{},"description":{},"targetArns":{"shape":"S9"},"status":{},"statusMessage":{},"tags":{"shape":"S6"}}},"S34":{"type":"structure","members":{"clientCertificateId":{},"description":{},"pemEncodedCertificate":{},"createdDate":{"type":"timestamp"},"expirationDate":{"type":"timestamp"},"tags":{"shape":"S6"}}},"S36":{"type":"structure","members":{"cloudwatchRoleArn":{},"throttleSettings":{"shape":"S26"},"features":{"shape":"S9"},"apiKeyVersion":{}}},"S48":{"type":"structure","members":{"responseType":{},"statusCode":{},"responseParameters":{"shape":"S6"},"responseTemplates":{"shape":"S6"},"defaultResponse":{"type":"boolean"}}},"S51":{"type":"structure","members":{"id":{},"friendlyName":{},"description":{},"configurationProperties":{"type":"list","member":{"type":"structure","members":{"name":{},"friendlyName":{},"description":{},"required":{"type":"boolean"},"defaultValue":{}}}}}},"S5e":{"type":"structure","members":{"usagePlanId":{},"startDate":{},"endDate":{},"position":{},"items":{"locationName":"values","type":"map","key":{},"value":{"type":"list","member":{"type":"list","member":{"type":"long"}}}}}},"S6a":{"type":"map","key":{},"value":{"shape":"S9"}},"S6g":{"type":"list","member":{"type":"structure","members":{"op":{},"path":{},"value":{},"from":{}}}}}}

/***/ }),
/* 57 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"GetApiKeys":{"input_token":"position","limit_key":"limit","output_token":"position","result_key":"items"},"GetBasePathMappings":{"input_token":"position","limit_key":"limit","output_token":"position","result_key":"items"},"GetClientCertificates":{"input_token":"position","limit_key":"limit","output_token":"position","result_key":"items"},"GetDeployments":{"input_token":"position","limit_key":"limit","output_token":"position","result_key":"items"},"GetDomainNames":{"input_token":"position","limit_key":"limit","output_token":"position","result_key":"items"},"GetModels":{"input_token":"position","limit_key":"limit","output_token":"position","result_key":"items"},"GetResources":{"input_token":"position","limit_key":"limit","output_token":"position","result_key":"items"},"GetRestApis":{"input_token":"position","limit_key":"limit","output_token":"position","result_key":"items"},"GetUsage":{"input_token":"position","limit_key":"limit","output_token":"position","result_key":"items"},"GetUsagePlanKeys":{"input_token":"position","limit_key":"limit","output_token":"position","result_key":"items"},"GetUsagePlans":{"input_token":"position","limit_key":"limit","output_token":"position","result_key":"items"},"GetVpcLinks":{"input_token":"position","limit_key":"limit","output_token":"position","result_key":"items"}}}

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['applicationautoscaling'] = {};
	AWS.ApplicationAutoScaling = Service.defineService('applicationautoscaling', ['2016-02-06']);
	Object.defineProperty(apiLoader.services['applicationautoscaling'], '2016-02-06', {
	  get: function get() {
	    var model = __webpack_require__(59);
	    model.paginators = __webpack_require__(60).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.ApplicationAutoScaling;


/***/ }),
/* 59 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-02-06","endpointPrefix":"application-autoscaling","jsonVersion":"1.1","protocol":"json","serviceFullName":"Application Auto Scaling","serviceId":"Application Auto Scaling","signatureVersion":"v4","signingName":"application-autoscaling","targetPrefix":"AnyScaleFrontendService","uid":"application-autoscaling-2016-02-06"},"operations":{"DeleteScalingPolicy":{"input":{"type":"structure","required":["PolicyName","ServiceNamespace","ResourceId","ScalableDimension"],"members":{"PolicyName":{},"ServiceNamespace":{},"ResourceId":{},"ScalableDimension":{}}},"output":{"type":"structure","members":{}}},"DeleteScheduledAction":{"input":{"type":"structure","required":["ServiceNamespace","ScheduledActionName","ResourceId","ScalableDimension"],"members":{"ServiceNamespace":{},"ScheduledActionName":{},"ResourceId":{},"ScalableDimension":{}}},"output":{"type":"structure","members":{}}},"DeregisterScalableTarget":{"input":{"type":"structure","required":["ServiceNamespace","ResourceId","ScalableDimension"],"members":{"ServiceNamespace":{},"ResourceId":{},"ScalableDimension":{}}},"output":{"type":"structure","members":{}}},"DescribeScalableTargets":{"input":{"type":"structure","required":["ServiceNamespace"],"members":{"ServiceNamespace":{},"ResourceIds":{"shape":"Sb"},"ScalableDimension":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"ScalableTargets":{"type":"list","member":{"type":"structure","required":["ServiceNamespace","ResourceId","ScalableDimension","MinCapacity","MaxCapacity","RoleARN","CreationTime"],"members":{"ServiceNamespace":{},"ResourceId":{},"ScalableDimension":{},"MinCapacity":{"type":"integer"},"MaxCapacity":{"type":"integer"},"RoleARN":{},"CreationTime":{"type":"timestamp"},"SuspendedState":{"shape":"Sj"}}}},"NextToken":{}}}},"DescribeScalingActivities":{"input":{"type":"structure","required":["ServiceNamespace"],"members":{"ServiceNamespace":{},"ResourceId":{},"ScalableDimension":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"ScalingActivities":{"type":"list","member":{"type":"structure","required":["ActivityId","ServiceNamespace","ResourceId","ScalableDimension","Description","Cause","StartTime","StatusCode"],"members":{"ActivityId":{},"ServiceNamespace":{},"ResourceId":{},"ScalableDimension":{},"Description":{},"Cause":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"StatusCode":{},"StatusMessage":{},"Details":{}}}},"NextToken":{}}}},"DescribeScalingPolicies":{"input":{"type":"structure","required":["ServiceNamespace"],"members":{"PolicyNames":{"shape":"Sb"},"ServiceNamespace":{},"ResourceId":{},"ScalableDimension":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"ScalingPolicies":{"type":"list","member":{"type":"structure","required":["PolicyARN","PolicyName","ServiceNamespace","ResourceId","ScalableDimension","PolicyType","CreationTime"],"members":{"PolicyARN":{},"PolicyName":{},"ServiceNamespace":{},"ResourceId":{},"ScalableDimension":{},"PolicyType":{},"StepScalingPolicyConfiguration":{"shape":"Sx"},"TargetTrackingScalingPolicyConfiguration":{"shape":"S16"},"Alarms":{"shape":"S1k"},"CreationTime":{"type":"timestamp"}}}},"NextToken":{}}}},"DescribeScheduledActions":{"input":{"type":"structure","required":["ServiceNamespace"],"members":{"ScheduledActionNames":{"shape":"Sb"},"ServiceNamespace":{},"ResourceId":{},"ScalableDimension":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"ScheduledActions":{"type":"list","member":{"type":"structure","required":["ScheduledActionName","ScheduledActionARN","ServiceNamespace","Schedule","ResourceId","CreationTime"],"members":{"ScheduledActionName":{},"ScheduledActionARN":{},"ServiceNamespace":{},"Schedule":{},"Timezone":{},"ResourceId":{},"ScalableDimension":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"ScalableTargetAction":{"shape":"S1r"},"CreationTime":{"type":"timestamp"}}}},"NextToken":{}}}},"PutScalingPolicy":{"input":{"type":"structure","required":["PolicyName","ServiceNamespace","ResourceId","ScalableDimension"],"members":{"PolicyName":{},"ServiceNamespace":{},"ResourceId":{},"ScalableDimension":{},"PolicyType":{},"StepScalingPolicyConfiguration":{"shape":"Sx"},"TargetTrackingScalingPolicyConfiguration":{"shape":"S16"}}},"output":{"type":"structure","required":["PolicyARN"],"members":{"PolicyARN":{},"Alarms":{"shape":"S1k"}}}},"PutScheduledAction":{"input":{"type":"structure","required":["ServiceNamespace","ScheduledActionName","ResourceId","ScalableDimension"],"members":{"ServiceNamespace":{},"Schedule":{},"Timezone":{},"ScheduledActionName":{},"ResourceId":{},"ScalableDimension":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"ScalableTargetAction":{"shape":"S1r"}}},"output":{"type":"structure","members":{}}},"RegisterScalableTarget":{"input":{"type":"structure","required":["ServiceNamespace","ResourceId","ScalableDimension"],"members":{"ServiceNamespace":{},"ResourceId":{},"ScalableDimension":{},"MinCapacity":{"type":"integer"},"MaxCapacity":{"type":"integer"},"RoleARN":{},"SuspendedState":{"shape":"Sj"}}},"output":{"type":"structure","members":{}}}},"shapes":{"Sb":{"type":"list","member":{}},"Sj":{"type":"structure","members":{"DynamicScalingInSuspended":{"type":"boolean"},"DynamicScalingOutSuspended":{"type":"boolean"},"ScheduledScalingSuspended":{"type":"boolean"}}},"Sx":{"type":"structure","members":{"AdjustmentType":{},"StepAdjustments":{"type":"list","member":{"type":"structure","required":["ScalingAdjustment"],"members":{"MetricIntervalLowerBound":{"type":"double"},"MetricIntervalUpperBound":{"type":"double"},"ScalingAdjustment":{"type":"integer"}}}},"MinAdjustmentMagnitude":{"type":"integer"},"Cooldown":{"type":"integer"},"MetricAggregationType":{}}},"S16":{"type":"structure","required":["TargetValue"],"members":{"TargetValue":{"type":"double"},"PredefinedMetricSpecification":{"type":"structure","required":["PredefinedMetricType"],"members":{"PredefinedMetricType":{},"ResourceLabel":{}}},"CustomizedMetricSpecification":{"type":"structure","required":["MetricName","Namespace","Statistic"],"members":{"MetricName":{},"Namespace":{},"Dimensions":{"type":"list","member":{"type":"structure","required":["Name","Value"],"members":{"Name":{},"Value":{}}}},"Statistic":{},"Unit":{}}},"ScaleOutCooldown":{"type":"integer"},"ScaleInCooldown":{"type":"integer"},"DisableScaleIn":{"type":"boolean"}}},"S1k":{"type":"list","member":{"type":"structure","required":["AlarmName","AlarmARN"],"members":{"AlarmName":{},"AlarmARN":{}}}},"S1r":{"type":"structure","members":{"MinCapacity":{"type":"integer"},"MaxCapacity":{"type":"integer"}}}}}

/***/ }),
/* 60 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeScalableTargets":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"ScalableTargets"},"DescribeScalingActivities":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"ScalingActivities"},"DescribeScalingPolicies":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"ScalingPolicies"},"DescribeScheduledActions":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"ScheduledActions"}}}

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['appstream'] = {};
	AWS.AppStream = Service.defineService('appstream', ['2016-12-01']);
	Object.defineProperty(apiLoader.services['appstream'], '2016-12-01', {
	  get: function get() {
	    var model = __webpack_require__(62);
	    model.paginators = __webpack_require__(63).pagination;
	    model.waiters = __webpack_require__(64).waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.AppStream;


/***/ }),
/* 62 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-12-01","endpointPrefix":"appstream2","jsonVersion":"1.1","protocol":"json","serviceFullName":"Amazon AppStream","serviceId":"AppStream","signatureVersion":"v4","signingName":"appstream","targetPrefix":"PhotonAdminProxyService","uid":"appstream-2016-12-01"},"operations":{"AssociateFleet":{"input":{"type":"structure","required":["FleetName","StackName"],"members":{"FleetName":{},"StackName":{}}},"output":{"type":"structure","members":{}}},"BatchAssociateUserStack":{"input":{"type":"structure","required":["UserStackAssociations"],"members":{"UserStackAssociations":{"shape":"S5"}}},"output":{"type":"structure","members":{"errors":{"shape":"Sb"}}}},"BatchDisassociateUserStack":{"input":{"type":"structure","required":["UserStackAssociations"],"members":{"UserStackAssociations":{"shape":"S5"}}},"output":{"type":"structure","members":{"errors":{"shape":"Sb"}}}},"CopyImage":{"input":{"type":"structure","required":["SourceImageName","DestinationImageName","DestinationRegion"],"members":{"SourceImageName":{},"DestinationImageName":{},"DestinationRegion":{},"DestinationImageDescription":{}}},"output":{"type":"structure","members":{"DestinationImageName":{}}}},"CreateDirectoryConfig":{"input":{"type":"structure","required":["DirectoryName","OrganizationalUnitDistinguishedNames"],"members":{"DirectoryName":{},"OrganizationalUnitDistinguishedNames":{"shape":"Sn"},"ServiceAccountCredentials":{"shape":"Sp"}}},"output":{"type":"structure","members":{"DirectoryConfig":{"shape":"St"}}}},"CreateFleet":{"input":{"type":"structure","required":["Name","InstanceType","ComputeCapacity"],"members":{"Name":{},"ImageName":{},"ImageArn":{},"InstanceType":{},"FleetType":{},"ComputeCapacity":{"shape":"Sy"},"VpcConfig":{"shape":"S10"},"MaxUserDurationInSeconds":{"type":"integer"},"DisconnectTimeoutInSeconds":{"type":"integer"},"Description":{},"DisplayName":{},"EnableDefaultInternetAccess":{"type":"boolean"},"DomainJoinInfo":{"shape":"S15"},"Tags":{"shape":"S16"},"IdleDisconnectTimeoutInSeconds":{"type":"integer"},"IamRoleArn":{},"StreamView":{}}},"output":{"type":"structure","members":{"Fleet":{"shape":"S1b"}}}},"CreateImageBuilder":{"input":{"type":"structure","required":["Name","InstanceType"],"members":{"Name":{},"ImageName":{},"ImageArn":{},"InstanceType":{},"Description":{},"DisplayName":{},"VpcConfig":{"shape":"S10"},"IamRoleArn":{},"EnableDefaultInternetAccess":{"type":"boolean"},"DomainJoinInfo":{"shape":"S15"},"AppstreamAgentVersion":{},"Tags":{"shape":"S16"},"AccessEndpoints":{"shape":"S1j"}}},"output":{"type":"structure","members":{"ImageBuilder":{"shape":"S1n"}}}},"CreateImageBuilderStreamingURL":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"Validity":{"type":"long"}}},"output":{"type":"structure","members":{"StreamingURL":{},"Expires":{"type":"timestamp"}}}},"CreateStack":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"Description":{},"DisplayName":{},"StorageConnectors":{"shape":"S1z"},"RedirectURL":{},"FeedbackURL":{},"UserSettings":{"shape":"S27"},"ApplicationSettings":{"shape":"S2b"},"Tags":{"shape":"S16"},"AccessEndpoints":{"shape":"S1j"},"EmbedHostDomains":{"shape":"S2d"}}},"output":{"type":"structure","members":{"Stack":{"shape":"S2g"}}}},"CreateStreamingURL":{"input":{"type":"structure","required":["StackName","FleetName","UserId"],"members":{"StackName":{},"FleetName":{},"UserId":{},"ApplicationId":{},"Validity":{"type":"long"},"SessionContext":{}}},"output":{"type":"structure","members":{"StreamingURL":{},"Expires":{"type":"timestamp"}}}},"CreateUpdatedImage":{"input":{"type":"structure","required":["existingImageName","newImageName"],"members":{"existingImageName":{},"newImageName":{},"newImageDescription":{},"newImageDisplayName":{},"newImageTags":{"shape":"S16"},"dryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"image":{"shape":"S2q"},"canUpdateImage":{"type":"boolean"}}}},"CreateUsageReportSubscription":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"S3BucketName":{},"Schedule":{}}}},"CreateUser":{"input":{"type":"structure","required":["UserName","AuthenticationType"],"members":{"UserName":{"shape":"S7"},"MessageAction":{},"FirstName":{"shape":"S34"},"LastName":{"shape":"S34"},"AuthenticationType":{}}},"output":{"type":"structure","members":{}}},"DeleteDirectoryConfig":{"input":{"type":"structure","required":["DirectoryName"],"members":{"DirectoryName":{}}},"output":{"type":"structure","members":{}}},"DeleteFleet":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{}}},"DeleteImage":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{"Image":{"shape":"S2q"}}}},"DeleteImageBuilder":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{"ImageBuilder":{"shape":"S1n"}}}},"DeleteImagePermissions":{"input":{"type":"structure","required":["Name","SharedAccountId"],"members":{"Name":{},"SharedAccountId":{}}},"output":{"type":"structure","members":{}}},"DeleteStack":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{}}},"DeleteUsageReportSubscription":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{}}},"DeleteUser":{"input":{"type":"structure","required":["UserName","AuthenticationType"],"members":{"UserName":{"shape":"S7"},"AuthenticationType":{}}},"output":{"type":"structure","members":{}}},"DescribeDirectoryConfigs":{"input":{"type":"structure","members":{"DirectoryNames":{"type":"list","member":{}},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"DirectoryConfigs":{"type":"list","member":{"shape":"St"}},"NextToken":{}}}},"DescribeFleets":{"input":{"type":"structure","members":{"Names":{"shape":"S3s"},"NextToken":{}}},"output":{"type":"structure","members":{"Fleets":{"type":"list","member":{"shape":"S1b"}},"NextToken":{}}}},"DescribeImageBuilders":{"input":{"type":"structure","members":{"Names":{"shape":"S3s"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"ImageBuilders":{"type":"list","member":{"shape":"S1n"}},"NextToken":{}}}},"DescribeImagePermissions":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"MaxResults":{"type":"integer"},"SharedAwsAccountIds":{"type":"list","member":{}},"NextToken":{}}},"output":{"type":"structure","members":{"Name":{},"SharedImagePermissionsList":{"type":"list","member":{"type":"structure","required":["sharedAccountId","imagePermissions"],"members":{"sharedAccountId":{},"imagePermissions":{"shape":"S2y"}}}},"NextToken":{}}}},"DescribeImages":{"input":{"type":"structure","members":{"Names":{"shape":"S3s"},"Arns":{"type":"list","member":{}},"Type":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Images":{"type":"list","member":{"shape":"S2q"}},"NextToken":{}}}},"DescribeSessions":{"input":{"type":"structure","required":["StackName","FleetName"],"members":{"StackName":{},"FleetName":{},"UserId":{},"NextToken":{},"Limit":{"type":"integer"},"AuthenticationType":{}}},"output":{"type":"structure","members":{"Sessions":{"type":"list","member":{"type":"structure","required":["Id","UserId","StackName","FleetName","State"],"members":{"Id":{},"UserId":{},"StackName":{},"FleetName":{},"State":{},"ConnectionState":{},"StartTime":{"type":"timestamp"},"MaxExpirationTime":{"type":"timestamp"},"AuthenticationType":{},"NetworkAccessConfiguration":{"shape":"S1s"}}}},"NextToken":{}}}},"DescribeStacks":{"input":{"type":"structure","members":{"Names":{"shape":"S3s"},"NextToken":{}}},"output":{"type":"structure","members":{"Stacks":{"type":"list","member":{"shape":"S2g"}},"NextToken":{}}}},"DescribeUsageReportSubscriptions":{"input":{"type":"structure","members":{"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"UsageReportSubscriptions":{"type":"list","member":{"type":"structure","members":{"S3BucketName":{},"Schedule":{},"LastGeneratedReportDate":{"type":"timestamp"},"SubscriptionErrors":{"type":"list","member":{"type":"structure","members":{"ErrorCode":{},"ErrorMessage":{}}}}}}},"NextToken":{}}}},"DescribeUserStackAssociations":{"input":{"type":"structure","members":{"StackName":{},"UserName":{"shape":"S7"},"AuthenticationType":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"UserStackAssociations":{"shape":"S5"},"NextToken":{}}}},"DescribeUsers":{"input":{"type":"structure","required":["AuthenticationType"],"members":{"AuthenticationType":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Users":{"type":"list","member":{"type":"structure","required":["AuthenticationType"],"members":{"Arn":{},"UserName":{"shape":"S7"},"Enabled":{"type":"boolean"},"Status":{},"FirstName":{"shape":"S34"},"LastName":{"shape":"S34"},"CreatedTime":{"type":"timestamp"},"AuthenticationType":{}}}},"NextToken":{}}}},"DisableUser":{"input":{"type":"structure","required":["UserName","AuthenticationType"],"members":{"UserName":{"shape":"S7"},"AuthenticationType":{}}},"output":{"type":"structure","members":{}}},"DisassociateFleet":{"input":{"type":"structure","required":["FleetName","StackName"],"members":{"FleetName":{},"StackName":{}}},"output":{"type":"structure","members":{}}},"EnableUser":{"input":{"type":"structure","required":["UserName","AuthenticationType"],"members":{"UserName":{"shape":"S7"},"AuthenticationType":{}}},"output":{"type":"structure","members":{}}},"ExpireSession":{"input":{"type":"structure","required":["SessionId"],"members":{"SessionId":{}}},"output":{"type":"structure","members":{}}},"ListAssociatedFleets":{"input":{"type":"structure","required":["StackName"],"members":{"StackName":{},"NextToken":{}}},"output":{"type":"structure","members":{"Names":{"shape":"S3s"},"NextToken":{}}}},"ListAssociatedStacks":{"input":{"type":"structure","required":["FleetName"],"members":{"FleetName":{},"NextToken":{}}},"output":{"type":"structure","members":{"Names":{"shape":"S3s"},"NextToken":{}}}},"ListTagsForResource":{"input":{"type":"structure","required":["ResourceArn"],"members":{"ResourceArn":{}}},"output":{"type":"structure","members":{"Tags":{"shape":"S16"}}}},"StartFleet":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{}}},"StartImageBuilder":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"AppstreamAgentVersion":{}}},"output":{"type":"structure","members":{"ImageBuilder":{"shape":"S1n"}}}},"StopFleet":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{}}},"StopImageBuilder":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{"ImageBuilder":{"shape":"S1n"}}}},"TagResource":{"input":{"type":"structure","required":["ResourceArn","Tags"],"members":{"ResourceArn":{},"Tags":{"shape":"S16"}}},"output":{"type":"structure","members":{}}},"UntagResource":{"input":{"type":"structure","required":["ResourceArn","TagKeys"],"members":{"ResourceArn":{},"TagKeys":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"UpdateDirectoryConfig":{"input":{"type":"structure","required":["DirectoryName"],"members":{"DirectoryName":{},"OrganizationalUnitDistinguishedNames":{"shape":"Sn"},"ServiceAccountCredentials":{"shape":"Sp"}}},"output":{"type":"structure","members":{"DirectoryConfig":{"shape":"St"}}}},"UpdateFleet":{"input":{"type":"structure","members":{"ImageName":{},"ImageArn":{},"Name":{},"InstanceType":{},"ComputeCapacity":{"shape":"Sy"},"VpcConfig":{"shape":"S10"},"MaxUserDurationInSeconds":{"type":"integer"},"DisconnectTimeoutInSeconds":{"type":"integer"},"DeleteVpcConfig":{"deprecated":true,"type":"boolean"},"Description":{},"DisplayName":{},"EnableDefaultInternetAccess":{"type":"boolean"},"DomainJoinInfo":{"shape":"S15"},"IdleDisconnectTimeoutInSeconds":{"type":"integer"},"AttributesToDelete":{"type":"list","member":{}},"IamRoleArn":{},"StreamView":{}}},"output":{"type":"structure","members":{"Fleet":{"shape":"S1b"}}}},"UpdateImagePermissions":{"input":{"type":"structure","required":["Name","SharedAccountId","ImagePermissions"],"members":{"Name":{},"SharedAccountId":{},"ImagePermissions":{"shape":"S2y"}}},"output":{"type":"structure","members":{}}},"UpdateStack":{"input":{"type":"structure","required":["Name"],"members":{"DisplayName":{},"Description":{},"Name":{},"StorageConnectors":{"shape":"S1z"},"DeleteStorageConnectors":{"deprecated":true,"type":"boolean"},"RedirectURL":{},"FeedbackURL":{},"AttributesToDelete":{"type":"list","member":{}},"UserSettings":{"shape":"S27"},"ApplicationSettings":{"shape":"S2b"},"AccessEndpoints":{"shape":"S1j"},"EmbedHostDomains":{"shape":"S2d"}}},"output":{"type":"structure","members":{"Stack":{"shape":"S2g"}}}}},"shapes":{"S5":{"type":"list","member":{"shape":"S6"}},"S6":{"type":"structure","required":["StackName","UserName","AuthenticationType"],"members":{"StackName":{},"UserName":{"shape":"S7"},"AuthenticationType":{},"SendEmailNotification":{"type":"boolean"}}},"S7":{"type":"string","sensitive":true},"Sb":{"type":"list","member":{"type":"structure","members":{"UserStackAssociation":{"shape":"S6"},"ErrorCode":{},"ErrorMessage":{}}}},"Sn":{"type":"list","member":{}},"Sp":{"type":"structure","required":["AccountName","AccountPassword"],"members":{"AccountName":{"type":"string","sensitive":true},"AccountPassword":{"type":"string","sensitive":true}}},"St":{"type":"structure","required":["DirectoryName"],"members":{"DirectoryName":{},"OrganizationalUnitDistinguishedNames":{"shape":"Sn"},"ServiceAccountCredentials":{"shape":"Sp"},"CreatedTime":{"type":"timestamp"}}},"Sy":{"type":"structure","required":["DesiredInstances"],"members":{"DesiredInstances":{"type":"integer"}}},"S10":{"type":"structure","members":{"SubnetIds":{"type":"list","member":{}},"SecurityGroupIds":{"type":"list","member":{}}}},"S15":{"type":"structure","members":{"DirectoryName":{},"OrganizationalUnitDistinguishedName":{}}},"S16":{"type":"map","key":{},"value":{}},"S1b":{"type":"structure","required":["Arn","Name","InstanceType","ComputeCapacityStatus","State"],"members":{"Arn":{},"Name":{},"DisplayName":{},"Description":{},"ImageName":{},"ImageArn":{},"InstanceType":{},"FleetType":{},"ComputeCapacityStatus":{"type":"structure","required":["Desired"],"members":{"Desired":{"type":"integer"},"Running":{"type":"integer"},"InUse":{"type":"integer"},"Available":{"type":"integer"}}},"MaxUserDurationInSeconds":{"type":"integer"},"DisconnectTimeoutInSeconds":{"type":"integer"},"State":{},"VpcConfig":{"shape":"S10"},"CreatedTime":{"type":"timestamp"},"FleetErrors":{"type":"list","member":{"type":"structure","members":{"ErrorCode":{},"ErrorMessage":{}}}},"EnableDefaultInternetAccess":{"type":"boolean"},"DomainJoinInfo":{"shape":"S15"},"IdleDisconnectTimeoutInSeconds":{"type":"integer"},"IamRoleArn":{},"StreamView":{}}},"S1j":{"type":"list","member":{"type":"structure","required":["EndpointType"],"members":{"EndpointType":{},"VpceId":{}}}},"S1n":{"type":"structure","required":["Name"],"members":{"Name":{},"Arn":{},"ImageArn":{},"Description":{},"DisplayName":{},"VpcConfig":{"shape":"S10"},"InstanceType":{},"Platform":{},"IamRoleArn":{},"State":{},"StateChangeReason":{"type":"structure","members":{"Code":{},"Message":{}}},"CreatedTime":{"type":"timestamp"},"EnableDefaultInternetAccess":{"type":"boolean"},"DomainJoinInfo":{"shape":"S15"},"NetworkAccessConfiguration":{"shape":"S1s"},"ImageBuilderErrors":{"shape":"S1t"},"AppstreamAgentVersion":{},"AccessEndpoints":{"shape":"S1j"}}},"S1s":{"type":"structure","members":{"EniPrivateIpAddress":{},"EniId":{}}},"S1t":{"type":"list","member":{"type":"structure","members":{"ErrorCode":{},"ErrorMessage":{},"ErrorTimestamp":{"type":"timestamp"}}}},"S1z":{"type":"list","member":{"type":"structure","required":["ConnectorType"],"members":{"ConnectorType":{},"ResourceIdentifier":{},"Domains":{"type":"list","member":{}}}}},"S27":{"type":"list","member":{"type":"structure","required":["Action","Permission"],"members":{"Action":{},"Permission":{}}}},"S2b":{"type":"structure","required":["Enabled"],"members":{"Enabled":{"type":"boolean"},"SettingsGroup":{}}},"S2d":{"type":"list","member":{}},"S2g":{"type":"structure","required":["Name"],"members":{"Arn":{},"Name":{},"Description":{},"DisplayName":{},"CreatedTime":{"type":"timestamp"},"StorageConnectors":{"shape":"S1z"},"RedirectURL":{},"FeedbackURL":{},"StackErrors":{"type":"list","member":{"type":"structure","members":{"ErrorCode":{},"ErrorMessage":{}}}},"UserSettings":{"shape":"S27"},"ApplicationSettings":{"type":"structure","members":{"Enabled":{"type":"boolean"},"SettingsGroup":{},"S3BucketName":{}}},"AccessEndpoints":{"shape":"S1j"},"EmbedHostDomains":{"shape":"S2d"}}},"S2q":{"type":"structure","required":["Name"],"members":{"Name":{},"Arn":{},"BaseImageArn":{},"DisplayName":{},"State":{},"Visibility":{},"ImageBuilderSupported":{"type":"boolean"},"ImageBuilderName":{},"Platform":{},"Description":{},"StateChangeReason":{"type":"structure","members":{"Code":{},"Message":{}}},"Applications":{"type":"list","member":{"type":"structure","members":{"Name":{},"DisplayName":{},"IconURL":{},"LaunchPath":{},"LaunchParameters":{},"Enabled":{"type":"boolean"},"Metadata":{"type":"map","key":{},"value":{}}}}},"CreatedTime":{"type":"timestamp"},"PublicBaseImageReleasedDate":{"type":"timestamp"},"AppstreamAgentVersion":{},"ImagePermissions":{"shape":"S2y"},"ImageErrors":{"shape":"S1t"}}},"S2y":{"type":"structure","members":{"allowFleet":{"type":"boolean"},"allowImageBuilder":{"type":"boolean"}}},"S34":{"type":"string","sensitive":true},"S3s":{"type":"list","member":{}}}}

/***/ }),
/* 63 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeImagePermissions":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"DescribeImages":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"}}}

/***/ }),
/* 64 */
/***/ (function(module, exports) {

	module.exports = {"version":2,"waiters":{"FleetStarted":{"delay":30,"maxAttempts":40,"operation":"DescribeFleets","acceptors":[{"state":"success","matcher":"pathAll","argument":"Fleets[].State","expected":"ACTIVE"},{"state":"failure","matcher":"pathAny","argument":"Fleets[].State","expected":"PENDING_DEACTIVATE"},{"state":"failure","matcher":"pathAny","argument":"Fleets[].State","expected":"INACTIVE"}]},"FleetStopped":{"delay":30,"maxAttempts":40,"operation":"DescribeFleets","acceptors":[{"state":"success","matcher":"pathAll","argument":"Fleets[].State","expected":"INACTIVE"},{"state":"failure","matcher":"pathAny","argument":"Fleets[].State","expected":"PENDING_ACTIVATE"},{"state":"failure","matcher":"pathAny","argument":"Fleets[].State","expected":"ACTIVE"}]}}}

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['autoscaling'] = {};
	AWS.AutoScaling = Service.defineService('autoscaling', ['2011-01-01']);
	Object.defineProperty(apiLoader.services['autoscaling'], '2011-01-01', {
	  get: function get() {
	    var model = __webpack_require__(66);
	    model.paginators = __webpack_require__(67).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.AutoScaling;


/***/ }),
/* 66 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2011-01-01","endpointPrefix":"autoscaling","protocol":"query","serviceFullName":"Auto Scaling","serviceId":"Auto Scaling","signatureVersion":"v4","uid":"autoscaling-2011-01-01","xmlNamespace":"http://autoscaling.amazonaws.com/doc/2011-01-01/"},"operations":{"AttachInstances":{"input":{"type":"structure","required":["AutoScalingGroupName"],"members":{"InstanceIds":{"shape":"S2"},"AutoScalingGroupName":{}}}},"AttachLoadBalancerTargetGroups":{"input":{"type":"structure","required":["AutoScalingGroupName","TargetGroupARNs"],"members":{"AutoScalingGroupName":{},"TargetGroupARNs":{"shape":"S6"}}},"output":{"resultWrapper":"AttachLoadBalancerTargetGroupsResult","type":"structure","members":{}}},"AttachLoadBalancers":{"input":{"type":"structure","required":["AutoScalingGroupName","LoadBalancerNames"],"members":{"AutoScalingGroupName":{},"LoadBalancerNames":{"shape":"Sa"}}},"output":{"resultWrapper":"AttachLoadBalancersResult","type":"structure","members":{}}},"BatchDeleteScheduledAction":{"input":{"type":"structure","required":["AutoScalingGroupName","ScheduledActionNames"],"members":{"AutoScalingGroupName":{},"ScheduledActionNames":{"shape":"Sd"}}},"output":{"resultWrapper":"BatchDeleteScheduledActionResult","type":"structure","members":{"FailedScheduledActions":{"shape":"Sf"}}}},"BatchPutScheduledUpdateGroupAction":{"input":{"type":"structure","required":["AutoScalingGroupName","ScheduledUpdateGroupActions"],"members":{"AutoScalingGroupName":{},"ScheduledUpdateGroupActions":{"type":"list","member":{"type":"structure","required":["ScheduledActionName"],"members":{"ScheduledActionName":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Recurrence":{},"MinSize":{"type":"integer"},"MaxSize":{"type":"integer"},"DesiredCapacity":{"type":"integer"},"TimeZone":{}}}}}},"output":{"resultWrapper":"BatchPutScheduledUpdateGroupActionResult","type":"structure","members":{"FailedScheduledUpdateGroupActions":{"shape":"Sf"}}}},"CancelInstanceRefresh":{"input":{"type":"structure","required":["AutoScalingGroupName"],"members":{"AutoScalingGroupName":{}}},"output":{"resultWrapper":"CancelInstanceRefreshResult","type":"structure","members":{"InstanceRefreshId":{}}}},"CompleteLifecycleAction":{"input":{"type":"structure","required":["LifecycleHookName","AutoScalingGroupName","LifecycleActionResult"],"members":{"LifecycleHookName":{},"AutoScalingGroupName":{},"LifecycleActionToken":{},"LifecycleActionResult":{},"InstanceId":{}}},"output":{"resultWrapper":"CompleteLifecycleActionResult","type":"structure","members":{}}},"CreateAutoScalingGroup":{"input":{"type":"structure","required":["AutoScalingGroupName","MinSize","MaxSize"],"members":{"AutoScalingGroupName":{},"LaunchConfigurationName":{},"LaunchTemplate":{"shape":"S10"},"MixedInstancesPolicy":{"shape":"S12"},"InstanceId":{},"MinSize":{"type":"integer"},"MaxSize":{"type":"integer"},"DesiredCapacity":{"type":"integer"},"DefaultCooldown":{"type":"integer"},"AvailabilityZones":{"shape":"S1d"},"LoadBalancerNames":{"shape":"Sa"},"TargetGroupARNs":{"shape":"S6"},"HealthCheckType":{},"HealthCheckGracePeriod":{"type":"integer"},"PlacementGroup":{},"VPCZoneIdentifier":{},"TerminationPolicies":{"shape":"S1g"},"NewInstancesProtectedFromScaleIn":{"type":"boolean"},"CapacityRebalance":{"type":"boolean"},"LifecycleHookSpecificationList":{"type":"list","member":{"type":"structure","required":["LifecycleHookName","LifecycleTransition"],"members":{"LifecycleHookName":{},"LifecycleTransition":{},"NotificationMetadata":{},"HeartbeatTimeout":{"type":"integer"},"DefaultResult":{},"NotificationTargetARN":{},"RoleARN":{}}}},"Tags":{"shape":"S1q"},"ServiceLinkedRoleARN":{},"MaxInstanceLifetime":{"type":"integer"},"Context":{}}}},"CreateLaunchConfiguration":{"input":{"type":"structure","required":["LaunchConfigurationName"],"members":{"LaunchConfigurationName":{},"ImageId":{},"KeyName":{},"SecurityGroups":{"shape":"S1y"},"ClassicLinkVPCId":{},"ClassicLinkVPCSecurityGroups":{"shape":"S1z"},"UserData":{},"InstanceId":{},"InstanceType":{},"KernelId":{},"RamdiskId":{},"BlockDeviceMappings":{"shape":"S21"},"InstanceMonitoring":{"shape":"S2b"},"SpotPrice":{},"IamInstanceProfile":{},"EbsOptimized":{"type":"boolean"},"AssociatePublicIpAddress":{"type":"boolean"},"PlacementTenancy":{},"MetadataOptions":{"shape":"S2g"}}}},"CreateOrUpdateTags":{"input":{"type":"structure","required":["Tags"],"members":{"Tags":{"shape":"S1q"}}}},"DeleteAutoScalingGroup":{"input":{"type":"structure","required":["AutoScalingGroupName"],"members":{"AutoScalingGroupName":{},"ForceDelete":{"type":"boolean"}}}},"DeleteLaunchConfiguration":{"input":{"type":"structure","required":["LaunchConfigurationName"],"members":{"LaunchConfigurationName":{}}}},"DeleteLifecycleHook":{"input":{"type":"structure","required":["LifecycleHookName","AutoScalingGroupName"],"members":{"LifecycleHookName":{},"AutoScalingGroupName":{}}},"output":{"resultWrapper":"DeleteLifecycleHookResult","type":"structure","members":{}}},"DeleteNotificationConfiguration":{"input":{"type":"structure","required":["AutoScalingGroupName","TopicARN"],"members":{"AutoScalingGroupName":{},"TopicARN":{}}}},"DeletePolicy":{"input":{"type":"structure","required":["PolicyName"],"members":{"AutoScalingGroupName":{},"PolicyName":{}}}},"DeleteScheduledAction":{"input":{"type":"structure","required":["AutoScalingGroupName","ScheduledActionName"],"members":{"AutoScalingGroupName":{},"ScheduledActionName":{}}}},"DeleteTags":{"input":{"type":"structure","required":["Tags"],"members":{"Tags":{"shape":"S1q"}}}},"DeleteWarmPool":{"input":{"type":"structure","required":["AutoScalingGroupName"],"members":{"AutoScalingGroupName":{},"ForceDelete":{"type":"boolean"}}},"output":{"resultWrapper":"DeleteWarmPoolResult","type":"structure","members":{}}},"DescribeAccountLimits":{"output":{"resultWrapper":"DescribeAccountLimitsResult","type":"structure","members":{"MaxNumberOfAutoScalingGroups":{"type":"integer"},"MaxNumberOfLaunchConfigurations":{"type":"integer"},"NumberOfAutoScalingGroups":{"type":"integer"},"NumberOfLaunchConfigurations":{"type":"integer"}}}},"DescribeAdjustmentTypes":{"output":{"resultWrapper":"DescribeAdjustmentTypesResult","type":"structure","members":{"AdjustmentTypes":{"type":"list","member":{"type":"structure","members":{"AdjustmentType":{}}}}}}},"DescribeAutoScalingGroups":{"input":{"type":"structure","members":{"AutoScalingGroupNames":{"shape":"S35"},"NextToken":{},"MaxRecords":{"type":"integer"}}},"output":{"resultWrapper":"DescribeAutoScalingGroupsResult","type":"structure","required":["AutoScalingGroups"],"members":{"AutoScalingGroups":{"type":"list","member":{"type":"structure","required":["AutoScalingGroupName","MinSize","MaxSize","DesiredCapacity","DefaultCooldown","AvailabilityZones","HealthCheckType","CreatedTime"],"members":{"AutoScalingGroupName":{},"AutoScalingGroupARN":{},"LaunchConfigurationName":{},"LaunchTemplate":{"shape":"S10"},"MixedInstancesPolicy":{"shape":"S12"},"MinSize":{"type":"integer"},"MaxSize":{"type":"integer"},"DesiredCapacity":{"type":"integer"},"PredictedCapacity":{"type":"integer"},"DefaultCooldown":{"type":"integer"},"AvailabilityZones":{"shape":"S1d"},"LoadBalancerNames":{"shape":"Sa"},"TargetGroupARNs":{"shape":"S6"},"HealthCheckType":{},"HealthCheckGracePeriod":{"type":"integer"},"Instances":{"shape":"S3b"},"CreatedTime":{"type":"timestamp"},"SuspendedProcesses":{"type":"list","member":{"type":"structure","members":{"ProcessName":{},"SuspensionReason":{}}}},"PlacementGroup":{},"VPCZoneIdentifier":{},"EnabledMetrics":{"type":"list","member":{"type":"structure","members":{"Metric":{},"Granularity":{}}}},"Status":{},"Tags":{"shape":"S3i"},"TerminationPolicies":{"shape":"S1g"},"NewInstancesProtectedFromScaleIn":{"type":"boolean"},"ServiceLinkedRoleARN":{},"MaxInstanceLifetime":{"type":"integer"},"CapacityRebalance":{"type":"boolean"},"WarmPoolConfiguration":{"shape":"S3k"},"WarmPoolSize":{"type":"integer"},"Context":{}}}},"NextToken":{}}}},"DescribeAutoScalingInstances":{"input":{"type":"structure","members":{"InstanceIds":{"shape":"S2"},"MaxRecords":{"type":"integer"},"NextToken":{}}},"output":{"resultWrapper":"DescribeAutoScalingInstancesResult","type":"structure","members":{"AutoScalingInstances":{"type":"list","member":{"type":"structure","required":["InstanceId","AutoScalingGroupName","AvailabilityZone","LifecycleState","HealthStatus","ProtectedFromScaleIn"],"members":{"InstanceId":{},"InstanceType":{},"AutoScalingGroupName":{},"AvailabilityZone":{},"LifecycleState":{},"HealthStatus":{},"LaunchConfigurationName":{},"LaunchTemplate":{"shape":"S10"},"ProtectedFromScaleIn":{"type":"boolean"},"WeightedCapacity":{}}}},"NextToken":{}}}},"DescribeAutoScalingNotificationTypes":{"output":{"resultWrapper":"DescribeAutoScalingNotificationTypesResult","type":"structure","members":{"AutoScalingNotificationTypes":{"shape":"S3v"}}}},"DescribeInstanceRefreshes":{"input":{"type":"structure","required":["AutoScalingGroupName"],"members":{"AutoScalingGroupName":{},"InstanceRefreshIds":{"type":"list","member":{}},"NextToken":{},"MaxRecords":{"type":"integer"}}},"output":{"resultWrapper":"DescribeInstanceRefreshesResult","type":"structure","members":{"InstanceRefreshes":{"type":"list","member":{"type":"structure","members":{"InstanceRefreshId":{},"AutoScalingGroupName":{},"Status":{},"StatusReason":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"PercentageComplete":{"type":"integer"},"InstancesToUpdate":{"type":"integer"},"ProgressDetails":{"type":"structure","members":{"LivePoolProgress":{"type":"structure","members":{"PercentageComplete":{"type":"integer"},"InstancesToUpdate":{"type":"integer"}}},"WarmPoolProgress":{"type":"structure","members":{"PercentageComplete":{"type":"integer"},"InstancesToUpdate":{"type":"integer"}}}}}}}},"NextToken":{}}}},"DescribeLaunchConfigurations":{"input":{"type":"structure","members":{"LaunchConfigurationNames":{"type":"list","member":{}},"NextToken":{},"MaxRecords":{"type":"integer"}}},"output":{"resultWrapper":"DescribeLaunchConfigurationsResult","type":"structure","required":["LaunchConfigurations"],"members":{"LaunchConfigurations":{"type":"list","member":{"type":"structure","required":["LaunchConfigurationName","ImageId","InstanceType","CreatedTime"],"members":{"LaunchConfigurationName":{},"LaunchConfigurationARN":{},"ImageId":{},"KeyName":{},"SecurityGroups":{"shape":"S1y"},"ClassicLinkVPCId":{},"ClassicLinkVPCSecurityGroups":{"shape":"S1z"},"UserData":{},"InstanceType":{},"KernelId":{},"RamdiskId":{},"BlockDeviceMappings":{"shape":"S21"},"InstanceMonitoring":{"shape":"S2b"},"SpotPrice":{},"IamInstanceProfile":{},"CreatedTime":{"type":"timestamp"},"EbsOptimized":{"type":"boolean"},"AssociatePublicIpAddress":{"type":"boolean"},"PlacementTenancy":{},"MetadataOptions":{"shape":"S2g"}}}},"NextToken":{}}}},"DescribeLifecycleHookTypes":{"output":{"resultWrapper":"DescribeLifecycleHookTypesResult","type":"structure","members":{"LifecycleHookTypes":{"shape":"S3v"}}}},"DescribeLifecycleHooks":{"input":{"type":"structure","required":["AutoScalingGroupName"],"members":{"AutoScalingGroupName":{},"LifecycleHookNames":{"type":"list","member":{}}}},"output":{"resultWrapper":"DescribeLifecycleHooksResult","type":"structure","members":{"LifecycleHooks":{"type":"list","member":{"type":"structure","members":{"LifecycleHookName":{},"AutoScalingGroupName":{},"LifecycleTransition":{},"NotificationTargetARN":{},"RoleARN":{},"NotificationMetadata":{},"HeartbeatTimeout":{"type":"integer"},"GlobalTimeout":{"type":"integer"},"DefaultResult":{}}}}}}},"DescribeLoadBalancerTargetGroups":{"input":{"type":"structure","required":["AutoScalingGroupName"],"members":{"AutoScalingGroupName":{},"NextToken":{},"MaxRecords":{"type":"integer"}}},"output":{"resultWrapper":"DescribeLoadBalancerTargetGroupsResult","type":"structure","members":{"LoadBalancerTargetGroups":{"type":"list","member":{"type":"structure","members":{"LoadBalancerTargetGroupARN":{},"State":{}}}},"NextToken":{}}}},"DescribeLoadBalancers":{"input":{"type":"structure","required":["AutoScalingGroupName"],"members":{"AutoScalingGroupName":{},"NextToken":{},"MaxRecords":{"type":"integer"}}},"output":{"resultWrapper":"DescribeLoadBalancersResult","type":"structure","members":{"LoadBalancers":{"type":"list","member":{"type":"structure","members":{"LoadBalancerName":{},"State":{}}}},"NextToken":{}}}},"DescribeMetricCollectionTypes":{"output":{"resultWrapper":"DescribeMetricCollectionTypesResult","type":"structure","members":{"Metrics":{"type":"list","member":{"type":"structure","members":{"Metric":{}}}},"Granularities":{"type":"list","member":{"type":"structure","members":{"Granularity":{}}}}}}},"DescribeNotificationConfigurations":{"input":{"type":"structure","members":{"AutoScalingGroupNames":{"shape":"S35"},"NextToken":{},"MaxRecords":{"type":"integer"}}},"output":{"resultWrapper":"DescribeNotificationConfigurationsResult","type":"structure","required":["NotificationConfigurations"],"members":{"NotificationConfigurations":{"type":"list","member":{"type":"structure","members":{"AutoScalingGroupName":{},"TopicARN":{},"NotificationType":{}}}},"NextToken":{}}}},"DescribePolicies":{"input":{"type":"structure","members":{"AutoScalingGroupName":{},"PolicyNames":{"type":"list","member":{}},"PolicyTypes":{"type":"list","member":{}},"NextToken":{},"MaxRecords":{"type":"integer"}}},"output":{"resultWrapper":"DescribePoliciesResult","type":"structure","members":{"ScalingPolicies":{"type":"list","member":{"type":"structure","members":{"AutoScalingGroupName":{},"PolicyName":{},"PolicyARN":{},"PolicyType":{},"AdjustmentType":{},"MinAdjustmentStep":{"shape":"S56"},"MinAdjustmentMagnitude":{"type":"integer"},"ScalingAdjustment":{"type":"integer"},"Cooldown":{"type":"integer"},"StepAdjustments":{"shape":"S59"},"MetricAggregationType":{},"EstimatedInstanceWarmup":{"type":"integer"},"Alarms":{"shape":"S5d"},"TargetTrackingConfiguration":{"shape":"S5f"},"Enabled":{"type":"boolean"},"PredictiveScalingConfiguration":{"shape":"S5t"}}}},"NextToken":{}}}},"DescribeScalingActivities":{"input":{"type":"structure","members":{"ActivityIds":{"type":"list","member":{}},"AutoScalingGroupName":{},"IncludeDeletedGroups":{"type":"boolean"},"MaxRecords":{"type":"integer"},"NextToken":{}}},"output":{"resultWrapper":"DescribeScalingActivitiesResult","type":"structure","required":["Activities"],"members":{"Activities":{"shape":"S6a"},"NextToken":{}}}},"DescribeScalingProcessTypes":{"output":{"resultWrapper":"DescribeScalingProcessTypesResult","type":"structure","members":{"Processes":{"type":"list","member":{"type":"structure","required":["ProcessName"],"members":{"ProcessName":{}}}}}}},"DescribeScheduledActions":{"input":{"type":"structure","members":{"AutoScalingGroupName":{},"ScheduledActionNames":{"shape":"Sd"},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"NextToken":{},"MaxRecords":{"type":"integer"}}},"output":{"resultWrapper":"DescribeScheduledActionsResult","type":"structure","members":{"ScheduledUpdateGroupActions":{"type":"list","member":{"type":"structure","members":{"AutoScalingGroupName":{},"ScheduledActionName":{},"ScheduledActionARN":{},"Time":{"type":"timestamp"},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Recurrence":{},"MinSize":{"type":"integer"},"MaxSize":{"type":"integer"},"DesiredCapacity":{"type":"integer"},"TimeZone":{}}}},"NextToken":{}}}},"DescribeTags":{"input":{"type":"structure","members":{"Filters":{"type":"list","member":{"type":"structure","members":{"Name":{},"Values":{"type":"list","member":{}}}}},"NextToken":{},"MaxRecords":{"type":"integer"}}},"output":{"resultWrapper":"DescribeTagsResult","type":"structure","members":{"Tags":{"shape":"S3i"},"NextToken":{}}}},"DescribeTerminationPolicyTypes":{"output":{"resultWrapper":"DescribeTerminationPolicyTypesResult","type":"structure","members":{"TerminationPolicyTypes":{"shape":"S1g"}}}},"DescribeWarmPool":{"input":{"type":"structure","required":["AutoScalingGroupName"],"members":{"AutoScalingGroupName":{},"MaxRecords":{"type":"integer"},"NextToken":{}}},"output":{"resultWrapper":"DescribeWarmPoolResult","type":"structure","members":{"WarmPoolConfiguration":{"shape":"S3k"},"Instances":{"shape":"S3b"},"NextToken":{}}}},"DetachInstances":{"input":{"type":"structure","required":["AutoScalingGroupName","ShouldDecrementDesiredCapacity"],"members":{"InstanceIds":{"shape":"S2"},"AutoScalingGroupName":{},"ShouldDecrementDesiredCapacity":{"type":"boolean"}}},"output":{"resultWrapper":"DetachInstancesResult","type":"structure","members":{"Activities":{"shape":"S6a"}}}},"DetachLoadBalancerTargetGroups":{"input":{"type":"structure","required":["AutoScalingGroupName","TargetGroupARNs"],"members":{"AutoScalingGroupName":{},"TargetGroupARNs":{"shape":"S6"}}},"output":{"resultWrapper":"DetachLoadBalancerTargetGroupsResult","type":"structure","members":{}}},"DetachLoadBalancers":{"input":{"type":"structure","required":["AutoScalingGroupName","LoadBalancerNames"],"members":{"AutoScalingGroupName":{},"LoadBalancerNames":{"shape":"Sa"}}},"output":{"resultWrapper":"DetachLoadBalancersResult","type":"structure","members":{}}},"DisableMetricsCollection":{"input":{"type":"structure","required":["AutoScalingGroupName"],"members":{"AutoScalingGroupName":{},"Metrics":{"shape":"S72"}}}},"EnableMetricsCollection":{"input":{"type":"structure","required":["AutoScalingGroupName","Granularity"],"members":{"AutoScalingGroupName":{},"Metrics":{"shape":"S72"},"Granularity":{}}}},"EnterStandby":{"input":{"type":"structure","required":["AutoScalingGroupName","ShouldDecrementDesiredCapacity"],"members":{"InstanceIds":{"shape":"S2"},"AutoScalingGroupName":{},"ShouldDecrementDesiredCapacity":{"type":"boolean"}}},"output":{"resultWrapper":"EnterStandbyResult","type":"structure","members":{"Activities":{"shape":"S6a"}}}},"ExecutePolicy":{"input":{"type":"structure","required":["PolicyName"],"members":{"AutoScalingGroupName":{},"PolicyName":{},"HonorCooldown":{"type":"boolean"},"MetricValue":{"type":"double"},"BreachThreshold":{"type":"double"}}}},"ExitStandby":{"input":{"type":"structure","required":["AutoScalingGroupName"],"members":{"InstanceIds":{"shape":"S2"},"AutoScalingGroupName":{}}},"output":{"resultWrapper":"ExitStandbyResult","type":"structure","members":{"Activities":{"shape":"S6a"}}}},"GetPredictiveScalingForecast":{"input":{"type":"structure","required":["AutoScalingGroupName","PolicyName","StartTime","EndTime"],"members":{"AutoScalingGroupName":{},"PolicyName":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"}}},"output":{"resultWrapper":"GetPredictiveScalingForecastResult","type":"structure","required":["LoadForecast","CapacityForecast","UpdateTime"],"members":{"LoadForecast":{"type":"list","member":{"type":"structure","required":["Timestamps","Values","MetricSpecification"],"members":{"Timestamps":{"shape":"S7e"},"Values":{"shape":"S7f"},"MetricSpecification":{"shape":"S5v"}}}},"CapacityForecast":{"type":"structure","required":["Timestamps","Values"],"members":{"Timestamps":{"shape":"S7e"},"Values":{"shape":"S7f"}}},"UpdateTime":{"type":"timestamp"}}}},"PutLifecycleHook":{"input":{"type":"structure","required":["LifecycleHookName","AutoScalingGroupName"],"members":{"LifecycleHookName":{},"AutoScalingGroupName":{},"LifecycleTransition":{},"RoleARN":{},"NotificationTargetARN":{},"NotificationMetadata":{},"HeartbeatTimeout":{"type":"integer"},"DefaultResult":{}}},"output":{"resultWrapper":"PutLifecycleHookResult","type":"structure","members":{}}},"PutNotificationConfiguration":{"input":{"type":"structure","required":["AutoScalingGroupName","TopicARN","NotificationTypes"],"members":{"AutoScalingGroupName":{},"TopicARN":{},"NotificationTypes":{"shape":"S3v"}}}},"PutScalingPolicy":{"input":{"type":"structure","required":["AutoScalingGroupName","PolicyName"],"members":{"AutoScalingGroupName":{},"PolicyName":{},"PolicyType":{},"AdjustmentType":{},"MinAdjustmentStep":{"shape":"S56"},"MinAdjustmentMagnitude":{"type":"integer"},"ScalingAdjustment":{"type":"integer"},"Cooldown":{"type":"integer"},"MetricAggregationType":{},"StepAdjustments":{"shape":"S59"},"EstimatedInstanceWarmup":{"type":"integer"},"TargetTrackingConfiguration":{"shape":"S5f"},"Enabled":{"type":"boolean"},"PredictiveScalingConfiguration":{"shape":"S5t"}}},"output":{"resultWrapper":"PutScalingPolicyResult","type":"structure","members":{"PolicyARN":{},"Alarms":{"shape":"S5d"}}}},"PutScheduledUpdateGroupAction":{"input":{"type":"structure","required":["AutoScalingGroupName","ScheduledActionName"],"members":{"AutoScalingGroupName":{},"ScheduledActionName":{},"Time":{"type":"timestamp"},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Recurrence":{},"MinSize":{"type":"integer"},"MaxSize":{"type":"integer"},"DesiredCapacity":{"type":"integer"},"TimeZone":{}}}},"PutWarmPool":{"input":{"type":"structure","required":["AutoScalingGroupName"],"members":{"AutoScalingGroupName":{},"MaxGroupPreparedCapacity":{"type":"integer"},"MinSize":{"type":"integer"},"PoolState":{}}},"output":{"resultWrapper":"PutWarmPoolResult","type":"structure","members":{}}},"RecordLifecycleActionHeartbeat":{"input":{"type":"structure","required":["LifecycleHookName","AutoScalingGroupName"],"members":{"LifecycleHookName":{},"AutoScalingGroupName":{},"LifecycleActionToken":{},"InstanceId":{}}},"output":{"resultWrapper":"RecordLifecycleActionHeartbeatResult","type":"structure","members":{}}},"ResumeProcesses":{"input":{"shape":"S7r"}},"SetDesiredCapacity":{"input":{"type":"structure","required":["AutoScalingGroupName","DesiredCapacity"],"members":{"AutoScalingGroupName":{},"DesiredCapacity":{"type":"integer"},"HonorCooldown":{"type":"boolean"}}}},"SetInstanceHealth":{"input":{"type":"structure","required":["InstanceId","HealthStatus"],"members":{"InstanceId":{},"HealthStatus":{},"ShouldRespectGracePeriod":{"type":"boolean"}}}},"SetInstanceProtection":{"input":{"type":"structure","required":["InstanceIds","AutoScalingGroupName","ProtectedFromScaleIn"],"members":{"InstanceIds":{"shape":"S2"},"AutoScalingGroupName":{},"ProtectedFromScaleIn":{"type":"boolean"}}},"output":{"resultWrapper":"SetInstanceProtectionResult","type":"structure","members":{}}},"StartInstanceRefresh":{"input":{"type":"structure","required":["AutoScalingGroupName"],"members":{"AutoScalingGroupName":{},"Strategy":{},"Preferences":{"type":"structure","members":{"MinHealthyPercentage":{"type":"integer"},"InstanceWarmup":{"type":"integer"},"CheckpointPercentages":{"type":"list","member":{"type":"integer"}},"CheckpointDelay":{"type":"integer"}}}}},"output":{"resultWrapper":"StartInstanceRefreshResult","type":"structure","members":{"InstanceRefreshId":{}}}},"SuspendProcesses":{"input":{"shape":"S7r"}},"TerminateInstanceInAutoScalingGroup":{"input":{"type":"structure","required":["InstanceId","ShouldDecrementDesiredCapacity"],"members":{"InstanceId":{},"ShouldDecrementDesiredCapacity":{"type":"boolean"}}},"output":{"resultWrapper":"TerminateInstanceInAutoScalingGroupResult","type":"structure","members":{"Activity":{"shape":"S6b"}}}},"UpdateAutoScalingGroup":{"input":{"type":"structure","required":["AutoScalingGroupName"],"members":{"AutoScalingGroupName":{},"LaunchConfigurationName":{},"LaunchTemplate":{"shape":"S10"},"MixedInstancesPolicy":{"shape":"S12"},"MinSize":{"type":"integer"},"MaxSize":{"type":"integer"},"DesiredCapacity":{"type":"integer"},"DefaultCooldown":{"type":"integer"},"AvailabilityZones":{"shape":"S1d"},"HealthCheckType":{},"HealthCheckGracePeriod":{"type":"integer"},"PlacementGroup":{},"VPCZoneIdentifier":{},"TerminationPolicies":{"shape":"S1g"},"NewInstancesProtectedFromScaleIn":{"type":"boolean"},"ServiceLinkedRoleARN":{},"MaxInstanceLifetime":{"type":"integer"},"CapacityRebalance":{"type":"boolean"},"Context":{}}}}},"shapes":{"S2":{"type":"list","member":{}},"S6":{"type":"list","member":{}},"Sa":{"type":"list","member":{}},"Sd":{"type":"list","member":{}},"Sf":{"type":"list","member":{"type":"structure","required":["ScheduledActionName"],"members":{"ScheduledActionName":{},"ErrorCode":{},"ErrorMessage":{}}}},"S10":{"type":"structure","members":{"LaunchTemplateId":{},"LaunchTemplateName":{},"Version":{}}},"S12":{"type":"structure","members":{"LaunchTemplate":{"type":"structure","members":{"LaunchTemplateSpecification":{"shape":"S10"},"Overrides":{"type":"list","member":{"type":"structure","members":{"InstanceType":{},"WeightedCapacity":{},"LaunchTemplateSpecification":{"shape":"S10"}}}}}},"InstancesDistribution":{"type":"structure","members":{"OnDemandAllocationStrategy":{},"OnDemandBaseCapacity":{"type":"integer"},"OnDemandPercentageAboveBaseCapacity":{"type":"integer"},"SpotAllocationStrategy":{},"SpotInstancePools":{"type":"integer"},"SpotMaxPrice":{}}}}},"S1d":{"type":"list","member":{}},"S1g":{"type":"list","member":{}},"S1q":{"type":"list","member":{"type":"structure","required":["Key"],"members":{"ResourceId":{},"ResourceType":{},"Key":{},"Value":{},"PropagateAtLaunch":{"type":"boolean"}}}},"S1y":{"type":"list","member":{}},"S1z":{"type":"list","member":{}},"S21":{"type":"list","member":{"type":"structure","required":["DeviceName"],"members":{"VirtualName":{},"DeviceName":{},"Ebs":{"type":"structure","members":{"SnapshotId":{},"VolumeSize":{"type":"integer"},"VolumeType":{},"DeleteOnTermination":{"type":"boolean"},"Iops":{"type":"integer"},"Encrypted":{"type":"boolean"},"Throughput":{"type":"integer"}}},"NoDevice":{"type":"boolean"}}}},"S2b":{"type":"structure","members":{"Enabled":{"type":"boolean"}}},"S2g":{"type":"structure","members":{"HttpTokens":{},"HttpPutResponseHopLimit":{"type":"integer"},"HttpEndpoint":{}}},"S35":{"type":"list","member":{}},"S3b":{"type":"list","member":{"type":"structure","required":["InstanceId","AvailabilityZone","LifecycleState","HealthStatus","ProtectedFromScaleIn"],"members":{"InstanceId":{},"InstanceType":{},"AvailabilityZone":{},"LifecycleState":{},"HealthStatus":{},"LaunchConfigurationName":{},"LaunchTemplate":{"shape":"S10"},"ProtectedFromScaleIn":{"type":"boolean"},"WeightedCapacity":{}}}},"S3i":{"type":"list","member":{"type":"structure","members":{"ResourceId":{},"ResourceType":{},"Key":{},"Value":{},"PropagateAtLaunch":{"type":"boolean"}}}},"S3k":{"type":"structure","members":{"MaxGroupPreparedCapacity":{"type":"integer"},"MinSize":{"type":"integer"},"PoolState":{},"Status":{}}},"S3v":{"type":"list","member":{}},"S56":{"type":"integer","deprecated":true},"S59":{"type":"list","member":{"type":"structure","required":["ScalingAdjustment"],"members":{"MetricIntervalLowerBound":{"type":"double"},"MetricIntervalUpperBound":{"type":"double"},"ScalingAdjustment":{"type":"integer"}}}},"S5d":{"type":"list","member":{"type":"structure","members":{"AlarmName":{},"AlarmARN":{}}}},"S5f":{"type":"structure","required":["TargetValue"],"members":{"PredefinedMetricSpecification":{"type":"structure","required":["PredefinedMetricType"],"members":{"PredefinedMetricType":{},"ResourceLabel":{}}},"CustomizedMetricSpecification":{"type":"structure","required":["MetricName","Namespace","Statistic"],"members":{"MetricName":{},"Namespace":{},"Dimensions":{"type":"list","member":{"type":"structure","required":["Name","Value"],"members":{"Name":{},"Value":{}}}},"Statistic":{},"Unit":{}}},"TargetValue":{"type":"double"},"DisableScaleIn":{"type":"boolean"}}},"S5t":{"type":"structure","required":["MetricSpecifications"],"members":{"MetricSpecifications":{"type":"list","member":{"shape":"S5v"}},"Mode":{},"SchedulingBufferTime":{"type":"integer"},"MaxCapacityBreachBehavior":{},"MaxCapacityBuffer":{"type":"integer"}}},"S5v":{"type":"structure","required":["TargetValue"],"members":{"TargetValue":{"type":"double"},"PredefinedMetricPairSpecification":{"type":"structure","required":["PredefinedMetricType"],"members":{"PredefinedMetricType":{},"ResourceLabel":{}}},"PredefinedScalingMetricSpecification":{"type":"structure","required":["PredefinedMetricType"],"members":{"PredefinedMetricType":{},"ResourceLabel":{}}},"PredefinedLoadMetricSpecification":{"type":"structure","required":["PredefinedMetricType"],"members":{"PredefinedMetricType":{},"ResourceLabel":{}}}}},"S6a":{"type":"list","member":{"shape":"S6b"}},"S6b":{"type":"structure","required":["ActivityId","AutoScalingGroupName","Cause","StartTime","StatusCode"],"members":{"ActivityId":{},"AutoScalingGroupName":{},"Description":{},"Cause":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"StatusCode":{},"StatusMessage":{},"Progress":{"type":"integer"},"Details":{},"AutoScalingGroupState":{},"AutoScalingGroupARN":{}}},"S72":{"type":"list","member":{}},"S7e":{"type":"list","member":{"type":"timestamp"}},"S7f":{"type":"list","member":{"type":"double"}},"S7r":{"type":"structure","required":["AutoScalingGroupName"],"members":{"AutoScalingGroupName":{},"ScalingProcesses":{"type":"list","member":{}}}}}}

/***/ }),
/* 67 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeAutoScalingGroups":{"input_token":"NextToken","limit_key":"MaxRecords","output_token":"NextToken","result_key":"AutoScalingGroups"},"DescribeAutoScalingInstances":{"input_token":"NextToken","limit_key":"MaxRecords","output_token":"NextToken","result_key":"AutoScalingInstances"},"DescribeLaunchConfigurations":{"input_token":"NextToken","limit_key":"MaxRecords","output_token":"NextToken","result_key":"LaunchConfigurations"},"DescribeNotificationConfigurations":{"input_token":"NextToken","limit_key":"MaxRecords","output_token":"NextToken","result_key":"NotificationConfigurations"},"DescribePolicies":{"input_token":"NextToken","limit_key":"MaxRecords","output_token":"NextToken","result_key":"ScalingPolicies"},"DescribeScalingActivities":{"input_token":"NextToken","limit_key":"MaxRecords","output_token":"NextToken","result_key":"Activities"},"DescribeScheduledActions":{"input_token":"NextToken","limit_key":"MaxRecords","output_token":"NextToken","result_key":"ScheduledUpdateGroupActions"},"DescribeTags":{"input_token":"NextToken","limit_key":"MaxRecords","output_token":"NextToken","result_key":"Tags"}}}

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['batch'] = {};
	AWS.Batch = Service.defineService('batch', ['2016-08-10']);
	Object.defineProperty(apiLoader.services['batch'], '2016-08-10', {
	  get: function get() {
	    var model = __webpack_require__(69);
	    model.paginators = __webpack_require__(70).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.Batch;


/***/ }),
/* 69 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-08-10","endpointPrefix":"batch","jsonVersion":"1.1","protocol":"rest-json","serviceAbbreviation":"AWS Batch","serviceFullName":"AWS Batch","serviceId":"Batch","signatureVersion":"v4","uid":"batch-2016-08-10"},"operations":{"CancelJob":{"http":{"requestUri":"/v1/canceljob"},"input":{"type":"structure","required":["jobId","reason"],"members":{"jobId":{},"reason":{}}},"output":{"type":"structure","members":{}}},"CreateComputeEnvironment":{"http":{"requestUri":"/v1/createcomputeenvironment"},"input":{"type":"structure","required":["computeEnvironmentName","type"],"members":{"computeEnvironmentName":{},"type":{},"state":{},"computeResources":{"shape":"S7"},"serviceRole":{},"tags":{"shape":"Si"}}},"output":{"type":"structure","members":{"computeEnvironmentName":{},"computeEnvironmentArn":{}}}},"CreateJobQueue":{"http":{"requestUri":"/v1/createjobqueue"},"input":{"type":"structure","required":["jobQueueName","priority","computeEnvironmentOrder"],"members":{"jobQueueName":{},"state":{},"priority":{"type":"integer"},"computeEnvironmentOrder":{"shape":"So"},"tags":{"shape":"Si"}}},"output":{"type":"structure","required":["jobQueueName","jobQueueArn"],"members":{"jobQueueName":{},"jobQueueArn":{}}}},"DeleteComputeEnvironment":{"http":{"requestUri":"/v1/deletecomputeenvironment"},"input":{"type":"structure","required":["computeEnvironment"],"members":{"computeEnvironment":{}}},"output":{"type":"structure","members":{}}},"DeleteJobQueue":{"http":{"requestUri":"/v1/deletejobqueue"},"input":{"type":"structure","required":["jobQueue"],"members":{"jobQueue":{}}},"output":{"type":"structure","members":{}}},"DeregisterJobDefinition":{"http":{"requestUri":"/v1/deregisterjobdefinition"},"input":{"type":"structure","required":["jobDefinition"],"members":{"jobDefinition":{}}},"output":{"type":"structure","members":{}}},"DescribeComputeEnvironments":{"http":{"requestUri":"/v1/describecomputeenvironments"},"input":{"type":"structure","members":{"computeEnvironments":{"shape":"Sb"},"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"computeEnvironments":{"type":"list","member":{"type":"structure","required":["computeEnvironmentName","computeEnvironmentArn","ecsClusterArn"],"members":{"computeEnvironmentName":{},"computeEnvironmentArn":{},"ecsClusterArn":{},"tags":{"shape":"Si"},"type":{},"state":{},"status":{},"statusReason":{},"computeResources":{"shape":"S7"},"serviceRole":{}}}},"nextToken":{}}}},"DescribeJobDefinitions":{"http":{"requestUri":"/v1/describejobdefinitions"},"input":{"type":"structure","members":{"jobDefinitions":{"shape":"Sb"},"maxResults":{"type":"integer"},"jobDefinitionName":{},"status":{},"nextToken":{}}},"output":{"type":"structure","members":{"jobDefinitions":{"type":"list","member":{"type":"structure","required":["jobDefinitionName","jobDefinitionArn","revision","type"],"members":{"jobDefinitionName":{},"jobDefinitionArn":{},"revision":{"type":"integer"},"status":{},"type":{},"parameters":{"shape":"S16"},"retryStrategy":{"shape":"S17"},"containerProperties":{"shape":"S1b"},"timeout":{"shape":"S28"},"nodeProperties":{"shape":"S29"},"tags":{"shape":"Si"},"propagateTags":{"type":"boolean"},"platformCapabilities":{"shape":"S2c"}}}},"nextToken":{}}}},"DescribeJobQueues":{"http":{"requestUri":"/v1/describejobqueues"},"input":{"type":"structure","members":{"jobQueues":{"shape":"Sb"},"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"jobQueues":{"type":"list","member":{"type":"structure","required":["jobQueueName","jobQueueArn","state","priority","computeEnvironmentOrder"],"members":{"jobQueueName":{},"jobQueueArn":{},"state":{},"status":{},"statusReason":{},"priority":{"type":"integer"},"computeEnvironmentOrder":{"shape":"So"},"tags":{"shape":"Si"}}}},"nextToken":{}}}},"DescribeJobs":{"http":{"requestUri":"/v1/describejobs"},"input":{"type":"structure","required":["jobs"],"members":{"jobs":{"shape":"Sb"}}},"output":{"type":"structure","members":{"jobs":{"type":"list","member":{"type":"structure","required":["jobName","jobId","jobQueue","status","startedAt","jobDefinition"],"members":{"jobArn":{},"jobName":{},"jobId":{},"jobQueue":{},"status":{},"attempts":{"type":"list","member":{"type":"structure","members":{"container":{"type":"structure","members":{"containerInstanceArn":{},"taskArn":{},"exitCode":{"type":"integer"},"reason":{},"logStreamName":{},"networkInterfaces":{"shape":"S2r"}}},"startedAt":{"type":"long"},"stoppedAt":{"type":"long"},"statusReason":{}}}},"statusReason":{},"createdAt":{"type":"long"},"retryStrategy":{"shape":"S17"},"startedAt":{"type":"long"},"stoppedAt":{"type":"long"},"dependsOn":{"shape":"S2u"},"jobDefinition":{},"parameters":{"shape":"S16"},"container":{"type":"structure","members":{"image":{},"vcpus":{"type":"integer"},"memory":{"type":"integer"},"command":{"shape":"Sb"},"jobRoleArn":{},"executionRoleArn":{},"volumes":{"shape":"S1c"},"environment":{"shape":"S1j"},"mountPoints":{"shape":"S1l"},"readonlyRootFilesystem":{"type":"boolean"},"ulimits":{"shape":"S1o"},"privileged":{"type":"boolean"},"user":{},"exitCode":{"type":"integer"},"reason":{},"containerInstanceArn":{},"taskArn":{},"logStreamName":{},"instanceType":{},"networkInterfaces":{"shape":"S2r"},"resourceRequirements":{"shape":"S1q"},"linuxParameters":{"shape":"S1t"},"logConfiguration":{"shape":"S20"},"secrets":{"shape":"S23"},"networkConfiguration":{"shape":"S25"},"fargatePlatformConfiguration":{"shape":"S27"}}},"nodeDetails":{"type":"structure","members":{"nodeIndex":{"type":"integer"},"isMainNode":{"type":"boolean"}}},"nodeProperties":{"shape":"S29"},"arrayProperties":{"type":"structure","members":{"statusSummary":{"type":"map","key":{},"value":{"type":"integer"}},"size":{"type":"integer"},"index":{"type":"integer"}}},"timeout":{"shape":"S28"},"tags":{"shape":"Si"},"propagateTags":{"type":"boolean"},"platformCapabilities":{"shape":"S2c"}}}}}}},"ListJobs":{"http":{"requestUri":"/v1/listjobs"},"input":{"type":"structure","members":{"jobQueue":{},"arrayJobId":{},"multiNodeJobId":{},"jobStatus":{},"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","required":["jobSummaryList"],"members":{"jobSummaryList":{"type":"list","member":{"type":"structure","required":["jobId","jobName"],"members":{"jobArn":{},"jobId":{},"jobName":{},"createdAt":{"type":"long"},"status":{},"statusReason":{},"startedAt":{"type":"long"},"stoppedAt":{"type":"long"},"container":{"type":"structure","members":{"exitCode":{"type":"integer"},"reason":{}}},"arrayProperties":{"type":"structure","members":{"size":{"type":"integer"},"index":{"type":"integer"}}},"nodeProperties":{"type":"structure","members":{"isMainNode":{"type":"boolean"},"numNodes":{"type":"integer"},"nodeIndex":{"type":"integer"}}}}}},"nextToken":{}}}},"ListTagsForResource":{"http":{"method":"GET","requestUri":"/v1/tags/{resourceArn}"},"input":{"type":"structure","required":["resourceArn"],"members":{"resourceArn":{"location":"uri","locationName":"resourceArn"}}},"output":{"type":"structure","members":{"tags":{"shape":"Si"}}}},"RegisterJobDefinition":{"http":{"requestUri":"/v1/registerjobdefinition"},"input":{"type":"structure","required":["jobDefinitionName","type"],"members":{"jobDefinitionName":{},"type":{},"parameters":{"shape":"S16"},"containerProperties":{"shape":"S1b"},"nodeProperties":{"shape":"S29"},"retryStrategy":{"shape":"S17"},"propagateTags":{"type":"boolean"},"timeout":{"shape":"S28"},"tags":{"shape":"Si"},"platformCapabilities":{"shape":"S2c"}}},"output":{"type":"structure","required":["jobDefinitionName","jobDefinitionArn","revision"],"members":{"jobDefinitionName":{},"jobDefinitionArn":{},"revision":{"type":"integer"}}}},"SubmitJob":{"http":{"requestUri":"/v1/submitjob"},"input":{"type":"structure","required":["jobName","jobQueue","jobDefinition"],"members":{"jobName":{},"jobQueue":{},"arrayProperties":{"type":"structure","members":{"size":{"type":"integer"}}},"dependsOn":{"shape":"S2u"},"jobDefinition":{},"parameters":{"shape":"S16"},"containerOverrides":{"shape":"S3f"},"nodeOverrides":{"type":"structure","members":{"numNodes":{"type":"integer"},"nodePropertyOverrides":{"type":"list","member":{"type":"structure","required":["targetNodes"],"members":{"targetNodes":{},"containerOverrides":{"shape":"S3f"}}}}}},"retryStrategy":{"shape":"S17"},"propagateTags":{"type":"boolean"},"timeout":{"shape":"S28"},"tags":{"shape":"Si"}}},"output":{"type":"structure","required":["jobName","jobId"],"members":{"jobArn":{},"jobName":{},"jobId":{}}}},"TagResource":{"http":{"requestUri":"/v1/tags/{resourceArn}"},"input":{"type":"structure","required":["resourceArn","tags"],"members":{"resourceArn":{"location":"uri","locationName":"resourceArn"},"tags":{"shape":"Si"}}},"output":{"type":"structure","members":{}}},"TerminateJob":{"http":{"requestUri":"/v1/terminatejob"},"input":{"type":"structure","required":["jobId","reason"],"members":{"jobId":{},"reason":{}}},"output":{"type":"structure","members":{}}},"UntagResource":{"http":{"method":"DELETE","requestUri":"/v1/tags/{resourceArn}"},"input":{"type":"structure","required":["resourceArn","tagKeys"],"members":{"resourceArn":{"location":"uri","locationName":"resourceArn"},"tagKeys":{"location":"querystring","locationName":"tagKeys","type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"UpdateComputeEnvironment":{"http":{"requestUri":"/v1/updatecomputeenvironment"},"input":{"type":"structure","required":["computeEnvironment"],"members":{"computeEnvironment":{},"state":{},"computeResources":{"type":"structure","members":{"minvCpus":{"type":"integer"},"maxvCpus":{"type":"integer"},"desiredvCpus":{"type":"integer"},"subnets":{"shape":"Sb"},"securityGroupIds":{"shape":"Sb"}}},"serviceRole":{}}},"output":{"type":"structure","members":{"computeEnvironmentName":{},"computeEnvironmentArn":{}}}},"UpdateJobQueue":{"http":{"requestUri":"/v1/updatejobqueue"},"input":{"type":"structure","required":["jobQueue"],"members":{"jobQueue":{},"state":{},"priority":{"type":"integer"},"computeEnvironmentOrder":{"shape":"So"}}},"output":{"type":"structure","members":{"jobQueueName":{},"jobQueueArn":{}}}}},"shapes":{"S7":{"type":"structure","required":["type","maxvCpus","subnets"],"members":{"type":{},"allocationStrategy":{},"minvCpus":{"type":"integer"},"maxvCpus":{"type":"integer"},"desiredvCpus":{"type":"integer"},"instanceTypes":{"shape":"Sb"},"imageId":{"deprecated":true,"deprecatedMessage":"This field is deprecated, use ec2Configuration[].imageIdOverride instead."},"subnets":{"shape":"Sb"},"securityGroupIds":{"shape":"Sb"},"ec2KeyPair":{},"instanceRole":{},"tags":{"type":"map","key":{},"value":{}},"placementGroup":{},"bidPercentage":{"type":"integer"},"spotIamFleetRole":{},"launchTemplate":{"type":"structure","members":{"launchTemplateId":{},"launchTemplateName":{},"version":{}}},"ec2Configuration":{"type":"list","member":{"type":"structure","required":["imageType"],"members":{"imageType":{},"imageIdOverride":{}}}}}},"Sb":{"type":"list","member":{}},"Si":{"type":"map","key":{},"value":{}},"So":{"type":"list","member":{"type":"structure","required":["order","computeEnvironment"],"members":{"order":{"type":"integer"},"computeEnvironment":{}}}},"S16":{"type":"map","key":{},"value":{}},"S17":{"type":"structure","members":{"attempts":{"type":"integer"},"evaluateOnExit":{"type":"list","member":{"type":"structure","required":["action"],"members":{"onStatusReason":{},"onReason":{},"onExitCode":{},"action":{}}}}}},"S1b":{"type":"structure","members":{"image":{},"vcpus":{"deprecated":true,"deprecatedMessage":"This field is deprecated, use resourceRequirements instead.","type":"integer"},"memory":{"deprecated":true,"deprecatedMessage":"This field is deprecated, use resourceRequirements instead.","type":"integer"},"command":{"shape":"Sb"},"jobRoleArn":{},"executionRoleArn":{},"volumes":{"shape":"S1c"},"environment":{"shape":"S1j"},"mountPoints":{"shape":"S1l"},"readonlyRootFilesystem":{"type":"boolean"},"privileged":{"type":"boolean"},"ulimits":{"shape":"S1o"},"user":{},"instanceType":{},"resourceRequirements":{"shape":"S1q"},"linuxParameters":{"shape":"S1t"},"logConfiguration":{"shape":"S20"},"secrets":{"shape":"S23"},"networkConfiguration":{"shape":"S25"},"fargatePlatformConfiguration":{"shape":"S27"}}},"S1c":{"type":"list","member":{"type":"structure","members":{"host":{"type":"structure","members":{"sourcePath":{}}},"name":{},"efsVolumeConfiguration":{"type":"structure","required":["fileSystemId"],"members":{"fileSystemId":{},"rootDirectory":{},"transitEncryption":{},"transitEncryptionPort":{"type":"integer"},"authorizationConfig":{"type":"structure","members":{"accessPointId":{},"iam":{}}}}}}}},"S1j":{"type":"list","member":{"type":"structure","members":{"name":{},"value":{}}}},"S1l":{"type":"list","member":{"type":"structure","members":{"containerPath":{},"readOnly":{"type":"boolean"},"sourceVolume":{}}}},"S1o":{"type":"list","member":{"type":"structure","required":["hardLimit","name","softLimit"],"members":{"hardLimit":{"type":"integer"},"name":{},"softLimit":{"type":"integer"}}}},"S1q":{"type":"list","member":{"type":"structure","required":["value","type"],"members":{"value":{},"type":{}}}},"S1t":{"type":"structure","members":{"devices":{"type":"list","member":{"type":"structure","required":["hostPath"],"members":{"hostPath":{},"containerPath":{},"permissions":{"type":"list","member":{}}}}},"initProcessEnabled":{"type":"boolean"},"sharedMemorySize":{"type":"integer"},"tmpfs":{"type":"list","member":{"type":"structure","required":["containerPath","size"],"members":{"containerPath":{},"size":{"type":"integer"},"mountOptions":{"shape":"Sb"}}}},"maxSwap":{"type":"integer"},"swappiness":{"type":"integer"}}},"S20":{"type":"structure","required":["logDriver"],"members":{"logDriver":{},"options":{"type":"map","key":{},"value":{}},"secretOptions":{"shape":"S23"}}},"S23":{"type":"list","member":{"type":"structure","required":["name","valueFrom"],"members":{"name":{},"valueFrom":{}}}},"S25":{"type":"structure","members":{"assignPublicIp":{}}},"S27":{"type":"structure","members":{"platformVersion":{}}},"S28":{"type":"structure","members":{"attemptDurationSeconds":{"type":"integer"}}},"S29":{"type":"structure","required":["numNodes","mainNode","nodeRangeProperties"],"members":{"numNodes":{"type":"integer"},"mainNode":{"type":"integer"},"nodeRangeProperties":{"type":"list","member":{"type":"structure","required":["targetNodes"],"members":{"targetNodes":{},"container":{"shape":"S1b"}}}}}},"S2c":{"type":"list","member":{}},"S2r":{"type":"list","member":{"type":"structure","members":{"attachmentId":{},"ipv6Address":{},"privateIpv4Address":{}}}},"S2u":{"type":"list","member":{"type":"structure","members":{"jobId":{},"type":{}}}},"S3f":{"type":"structure","members":{"vcpus":{"deprecated":true,"deprecatedMessage":"This field is deprecated, use resourceRequirements instead.","type":"integer"},"memory":{"deprecated":true,"deprecatedMessage":"This field is deprecated, use resourceRequirements instead.","type":"integer"},"command":{"shape":"Sb"},"instanceType":{},"environment":{"shape":"S1j"},"resourceRequirements":{"shape":"S1q"}}}}}

/***/ }),
/* 70 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeComputeEnvironments":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults","result_key":"computeEnvironments"},"DescribeJobDefinitions":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults","result_key":"jobDefinitions"},"DescribeJobQueues":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults","result_key":"jobQueues"},"ListJobs":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults","result_key":"jobSummaryList"}}}

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['budgets'] = {};
	AWS.Budgets = Service.defineService('budgets', ['2016-10-20']);
	Object.defineProperty(apiLoader.services['budgets'], '2016-10-20', {
	  get: function get() {
	    var model = __webpack_require__(72);
	    model.paginators = __webpack_require__(73).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.Budgets;


/***/ }),
/* 72 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-10-20","endpointPrefix":"budgets","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"AWSBudgets","serviceFullName":"AWS Budgets","serviceId":"Budgets","signatureVersion":"v4","targetPrefix":"AWSBudgetServiceGateway","uid":"budgets-2016-10-20"},"operations":{"CreateBudget":{"input":{"type":"structure","required":["AccountId","Budget"],"members":{"AccountId":{},"Budget":{"shape":"S3"},"NotificationsWithSubscribers":{"type":"list","member":{"type":"structure","required":["Notification","Subscribers"],"members":{"Notification":{"shape":"Sl"},"Subscribers":{"shape":"Sr"}}}}}},"output":{"type":"structure","members":{}}},"CreateBudgetAction":{"input":{"type":"structure","required":["AccountId","BudgetName","NotificationType","ActionType","ActionThreshold","Definition","ExecutionRoleArn","ApprovalModel","Subscribers"],"members":{"AccountId":{},"BudgetName":{},"NotificationType":{},"ActionType":{},"ActionThreshold":{"shape":"Sy"},"Definition":{"shape":"Sz"},"ExecutionRoleArn":{},"ApprovalModel":{},"Subscribers":{"shape":"Sr"}}},"output":{"type":"structure","required":["AccountId","BudgetName","ActionId"],"members":{"AccountId":{},"BudgetName":{},"ActionId":{}}}},"CreateNotification":{"input":{"type":"structure","required":["AccountId","BudgetName","Notification","Subscribers"],"members":{"AccountId":{},"BudgetName":{},"Notification":{"shape":"Sl"},"Subscribers":{"shape":"Sr"}}},"output":{"type":"structure","members":{}}},"CreateSubscriber":{"input":{"type":"structure","required":["AccountId","BudgetName","Notification","Subscriber"],"members":{"AccountId":{},"BudgetName":{},"Notification":{"shape":"Sl"},"Subscriber":{"shape":"Ss"}}},"output":{"type":"structure","members":{}}},"DeleteBudget":{"input":{"type":"structure","required":["AccountId","BudgetName"],"members":{"AccountId":{},"BudgetName":{}}},"output":{"type":"structure","members":{}}},"DeleteBudgetAction":{"input":{"type":"structure","required":["AccountId","BudgetName","ActionId"],"members":{"AccountId":{},"BudgetName":{},"ActionId":{}}},"output":{"type":"structure","required":["AccountId","BudgetName","Action"],"members":{"AccountId":{},"BudgetName":{},"Action":{"shape":"S1t"}}}},"DeleteNotification":{"input":{"type":"structure","required":["AccountId","BudgetName","Notification"],"members":{"AccountId":{},"BudgetName":{},"Notification":{"shape":"Sl"}}},"output":{"type":"structure","members":{}}},"DeleteSubscriber":{"input":{"type":"structure","required":["AccountId","BudgetName","Notification","Subscriber"],"members":{"AccountId":{},"BudgetName":{},"Notification":{"shape":"Sl"},"Subscriber":{"shape":"Ss"}}},"output":{"type":"structure","members":{}}},"DescribeBudget":{"input":{"type":"structure","required":["AccountId","BudgetName"],"members":{"AccountId":{},"BudgetName":{}}},"output":{"type":"structure","members":{"Budget":{"shape":"S3"}}}},"DescribeBudgetAction":{"input":{"type":"structure","required":["AccountId","BudgetName","ActionId"],"members":{"AccountId":{},"BudgetName":{},"ActionId":{}}},"output":{"type":"structure","required":["AccountId","BudgetName","Action"],"members":{"AccountId":{},"BudgetName":{},"Action":{"shape":"S1t"}}}},"DescribeBudgetActionHistories":{"input":{"type":"structure","required":["AccountId","BudgetName","ActionId"],"members":{"AccountId":{},"BudgetName":{},"ActionId":{},"TimePeriod":{"shape":"Sf"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","required":["ActionHistories"],"members":{"ActionHistories":{"type":"list","member":{"type":"structure","required":["Timestamp","Status","EventType","ActionHistoryDetails"],"members":{"Timestamp":{"type":"timestamp"},"Status":{},"EventType":{},"ActionHistoryDetails":{"type":"structure","required":["Message","Action"],"members":{"Message":{},"Action":{"shape":"S1t"}}}}}},"NextToken":{}}}},"DescribeBudgetActionsForAccount":{"input":{"type":"structure","required":["AccountId"],"members":{"AccountId":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","required":["Actions"],"members":{"Actions":{"shape":"S2c"},"NextToken":{}}}},"DescribeBudgetActionsForBudget":{"input":{"type":"structure","required":["AccountId","BudgetName"],"members":{"AccountId":{},"BudgetName":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","required":["Actions"],"members":{"Actions":{"shape":"S2c"},"NextToken":{}}}},"DescribeBudgetPerformanceHistory":{"input":{"type":"structure","required":["AccountId","BudgetName"],"members":{"AccountId":{},"BudgetName":{},"TimePeriod":{"shape":"Sf"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"BudgetPerformanceHistory":{"type":"structure","members":{"BudgetName":{},"BudgetType":{},"CostFilters":{"shape":"Sa"},"CostTypes":{"shape":"Sc"},"TimeUnit":{},"BudgetedAndActualAmountsList":{"type":"list","member":{"type":"structure","members":{"BudgetedAmount":{"shape":"S5"},"ActualAmount":{"shape":"S5"},"TimePeriod":{"shape":"Sf"}}}}}},"NextToken":{}}}},"DescribeBudgets":{"input":{"type":"structure","required":["AccountId"],"members":{"AccountId":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Budgets":{"type":"list","member":{"shape":"S3"}},"NextToken":{}}}},"DescribeNotificationsForBudget":{"input":{"type":"structure","required":["AccountId","BudgetName"],"members":{"AccountId":{},"BudgetName":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Notifications":{"type":"list","member":{"shape":"Sl"}},"NextToken":{}}}},"DescribeSubscribersForNotification":{"input":{"type":"structure","required":["AccountId","BudgetName","Notification"],"members":{"AccountId":{},"BudgetName":{},"Notification":{"shape":"Sl"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Subscribers":{"shape":"Sr"},"NextToken":{}}}},"ExecuteBudgetAction":{"input":{"type":"structure","required":["AccountId","BudgetName","ActionId","ExecutionType"],"members":{"AccountId":{},"BudgetName":{},"ActionId":{},"ExecutionType":{}}},"output":{"type":"structure","required":["AccountId","BudgetName","ActionId","ExecutionType"],"members":{"AccountId":{},"BudgetName":{},"ActionId":{},"ExecutionType":{}}}},"UpdateBudget":{"input":{"type":"structure","required":["AccountId","NewBudget"],"members":{"AccountId":{},"NewBudget":{"shape":"S3"}}},"output":{"type":"structure","members":{}}},"UpdateBudgetAction":{"input":{"type":"structure","required":["AccountId","BudgetName","ActionId"],"members":{"AccountId":{},"BudgetName":{},"ActionId":{},"NotificationType":{},"ActionThreshold":{"shape":"Sy"},"Definition":{"shape":"Sz"},"ExecutionRoleArn":{},"ApprovalModel":{},"Subscribers":{"shape":"Sr"}}},"output":{"type":"structure","required":["AccountId","BudgetName","OldAction","NewAction"],"members":{"AccountId":{},"BudgetName":{},"OldAction":{"shape":"S1t"},"NewAction":{"shape":"S1t"}}}},"UpdateNotification":{"input":{"type":"structure","required":["AccountId","BudgetName","OldNotification","NewNotification"],"members":{"AccountId":{},"BudgetName":{},"OldNotification":{"shape":"Sl"},"NewNotification":{"shape":"Sl"}}},"output":{"type":"structure","members":{}}},"UpdateSubscriber":{"input":{"type":"structure","required":["AccountId","BudgetName","Notification","OldSubscriber","NewSubscriber"],"members":{"AccountId":{},"BudgetName":{},"Notification":{"shape":"Sl"},"OldSubscriber":{"shape":"Ss"},"NewSubscriber":{"shape":"Ss"}}},"output":{"type":"structure","members":{}}}},"shapes":{"S3":{"type":"structure","required":["BudgetName","TimeUnit","BudgetType"],"members":{"BudgetName":{},"BudgetLimit":{"shape":"S5"},"PlannedBudgetLimits":{"type":"map","key":{},"value":{"shape":"S5"}},"CostFilters":{"shape":"Sa"},"CostTypes":{"shape":"Sc"},"TimeUnit":{},"TimePeriod":{"shape":"Sf"},"CalculatedSpend":{"type":"structure","required":["ActualSpend"],"members":{"ActualSpend":{"shape":"S5"},"ForecastedSpend":{"shape":"S5"}}},"BudgetType":{},"LastUpdatedTime":{"type":"timestamp"}}},"S5":{"type":"structure","required":["Amount","Unit"],"members":{"Amount":{},"Unit":{}}},"Sa":{"type":"map","key":{},"value":{"type":"list","member":{}}},"Sc":{"type":"structure","members":{"IncludeTax":{"type":"boolean"},"IncludeSubscription":{"type":"boolean"},"UseBlended":{"type":"boolean"},"IncludeRefund":{"type":"boolean"},"IncludeCredit":{"type":"boolean"},"IncludeUpfront":{"type":"boolean"},"IncludeRecurring":{"type":"boolean"},"IncludeOtherSubscription":{"type":"boolean"},"IncludeSupport":{"type":"boolean"},"IncludeDiscount":{"type":"boolean"},"UseAmortized":{"type":"boolean"}}},"Sf":{"type":"structure","members":{"Start":{"type":"timestamp"},"End":{"type":"timestamp"}}},"Sl":{"type":"structure","required":["NotificationType","ComparisonOperator","Threshold"],"members":{"NotificationType":{},"ComparisonOperator":{},"Threshold":{"type":"double"},"ThresholdType":{},"NotificationState":{}}},"Sr":{"type":"list","member":{"shape":"Ss"}},"Ss":{"type":"structure","required":["SubscriptionType","Address"],"members":{"SubscriptionType":{},"Address":{"type":"string","sensitive":true}}},"Sy":{"type":"structure","required":["ActionThresholdValue","ActionThresholdType"],"members":{"ActionThresholdValue":{"type":"double"},"ActionThresholdType":{}}},"Sz":{"type":"structure","members":{"IamActionDefinition":{"type":"structure","required":["PolicyArn"],"members":{"PolicyArn":{},"Roles":{"type":"list","member":{}},"Groups":{"type":"list","member":{}},"Users":{"type":"list","member":{}}}},"ScpActionDefinition":{"type":"structure","required":["PolicyId","TargetIds"],"members":{"PolicyId":{},"TargetIds":{"type":"list","member":{}}}},"SsmActionDefinition":{"type":"structure","required":["ActionSubType","Region","InstanceIds"],"members":{"ActionSubType":{},"Region":{},"InstanceIds":{"type":"list","member":{}}}}}},"S1t":{"type":"structure","required":["ActionId","BudgetName","NotificationType","ActionType","ActionThreshold","Definition","ExecutionRoleArn","ApprovalModel","Status","Subscribers"],"members":{"ActionId":{},"BudgetName":{},"NotificationType":{},"ActionType":{},"ActionThreshold":{"shape":"Sy"},"Definition":{"shape":"Sz"},"ExecutionRoleArn":{},"ApprovalModel":{},"Status":{},"Subscribers":{"shape":"Sr"}}},"S2c":{"type":"list","member":{"shape":"S1t"}}}}

/***/ }),
/* 73 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeBudgetActionHistories":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"ActionHistories"},"DescribeBudgetActionsForAccount":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Actions"},"DescribeBudgetActionsForBudget":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Actions"},"DescribeBudgetPerformanceHistory":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"BudgetPerformanceHistory"},"DescribeBudgets":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Budgets"},"DescribeNotificationsForBudget":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Notifications"},"DescribeSubscribersForNotification":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Subscribers"}}}

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['clouddirectory'] = {};
	AWS.CloudDirectory = Service.defineService('clouddirectory', ['2016-05-10', '2016-05-10*', '2017-01-11']);
	Object.defineProperty(apiLoader.services['clouddirectory'], '2016-05-10', {
	  get: function get() {
	    var model = __webpack_require__(75);
	    model.paginators = __webpack_require__(76).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	Object.defineProperty(apiLoader.services['clouddirectory'], '2017-01-11', {
	  get: function get() {
	    var model = __webpack_require__(77);
	    model.paginators = __webpack_require__(78).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.CloudDirectory;


/***/ }),
/* 75 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-05-10","endpointPrefix":"clouddirectory","protocol":"rest-json","serviceFullName":"Amazon CloudDirectory","serviceId":"CloudDirectory","signatureVersion":"v4","signingName":"clouddirectory","uid":"clouddirectory-2016-05-10"},"operations":{"AddFacetToObject":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/object/facets","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","SchemaFacet","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"SchemaFacet":{"shape":"S3"},"ObjectAttributeList":{"shape":"S5"},"ObjectReference":{"shape":"Sf"}}},"output":{"type":"structure","members":{}}},"ApplySchema":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/schema/apply","responseCode":200},"input":{"type":"structure","required":["PublishedSchemaArn","DirectoryArn"],"members":{"PublishedSchemaArn":{},"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"}}},"output":{"type":"structure","members":{"AppliedSchemaArn":{},"DirectoryArn":{}}}},"AttachObject":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/object/attach","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ParentReference","ChildReference","LinkName"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ParentReference":{"shape":"Sf"},"ChildReference":{"shape":"Sf"},"LinkName":{}}},"output":{"type":"structure","members":{"AttachedObjectIdentifier":{}}}},"AttachPolicy":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/policy/attach","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","PolicyReference","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"PolicyReference":{"shape":"Sf"},"ObjectReference":{"shape":"Sf"}}},"output":{"type":"structure","members":{}}},"AttachToIndex":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/index/attach","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","IndexReference","TargetReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"IndexReference":{"shape":"Sf"},"TargetReference":{"shape":"Sf"}}},"output":{"type":"structure","members":{"AttachedObjectIdentifier":{}}}},"AttachTypedLink":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/typedlink/attach","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","SourceObjectReference","TargetObjectReference","TypedLinkFacet","Attributes"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"SourceObjectReference":{"shape":"Sf"},"TargetObjectReference":{"shape":"Sf"},"TypedLinkFacet":{"shape":"St"},"Attributes":{"shape":"Sv"}}},"output":{"type":"structure","members":{"TypedLinkSpecifier":{"shape":"Sy"}}}},"BatchRead":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/batchread","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","Operations"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"Operations":{"type":"list","member":{"type":"structure","members":{"ListObjectAttributes":{"type":"structure","required":["ObjectReference"],"members":{"ObjectReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"},"FacetFilter":{"shape":"S3"}}},"ListObjectChildren":{"type":"structure","required":["ObjectReference"],"members":{"ObjectReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"}}},"ListAttachedIndices":{"type":"structure","required":["TargetReference"],"members":{"TargetReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"}}},"ListObjectParentPaths":{"type":"structure","required":["ObjectReference"],"members":{"ObjectReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"}}},"GetObjectInformation":{"type":"structure","required":["ObjectReference"],"members":{"ObjectReference":{"shape":"Sf"}}},"GetObjectAttributes":{"type":"structure","required":["ObjectReference","SchemaFacet","AttributeNames"],"members":{"ObjectReference":{"shape":"Sf"},"SchemaFacet":{"shape":"S3"},"AttributeNames":{"shape":"S1a"}}},"ListObjectPolicies":{"type":"structure","required":["ObjectReference"],"members":{"ObjectReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"}}},"ListPolicyAttachments":{"type":"structure","required":["PolicyReference"],"members":{"PolicyReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"}}},"LookupPolicy":{"type":"structure","required":["ObjectReference"],"members":{"ObjectReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"}}},"ListIndex":{"type":"structure","required":["IndexReference"],"members":{"RangesOnIndexedValues":{"shape":"S1f"},"IndexReference":{"shape":"Sf"},"MaxResults":{"type":"integer"},"NextToken":{}}},"ListOutgoingTypedLinks":{"type":"structure","required":["ObjectReference"],"members":{"ObjectReference":{"shape":"Sf"},"FilterAttributeRanges":{"shape":"S1k"},"FilterTypedLink":{"shape":"St"},"NextToken":{},"MaxResults":{"type":"integer"}}},"ListIncomingTypedLinks":{"type":"structure","required":["ObjectReference"],"members":{"ObjectReference":{"shape":"Sf"},"FilterAttributeRanges":{"shape":"S1k"},"FilterTypedLink":{"shape":"St"},"NextToken":{},"MaxResults":{"type":"integer"}}},"GetLinkAttributes":{"type":"structure","required":["TypedLinkSpecifier","AttributeNames"],"members":{"TypedLinkSpecifier":{"shape":"Sy"},"AttributeNames":{"shape":"S1a"}}}}}},"ConsistencyLevel":{"location":"header","locationName":"x-amz-consistency-level"}}},"output":{"type":"structure","members":{"Responses":{"type":"list","member":{"type":"structure","members":{"SuccessfulResponse":{"type":"structure","members":{"ListObjectAttributes":{"type":"structure","members":{"Attributes":{"shape":"S5"},"NextToken":{}}},"ListObjectChildren":{"type":"structure","members":{"Children":{"shape":"S1v"},"NextToken":{}}},"GetObjectInformation":{"type":"structure","members":{"SchemaFacets":{"shape":"S1x"},"ObjectIdentifier":{}}},"GetObjectAttributes":{"type":"structure","members":{"Attributes":{"shape":"S5"}}},"ListAttachedIndices":{"type":"structure","members":{"IndexAttachments":{"shape":"S20"},"NextToken":{}}},"ListObjectParentPaths":{"type":"structure","members":{"PathToObjectIdentifiersList":{"shape":"S23"},"NextToken":{}}},"ListObjectPolicies":{"type":"structure","members":{"AttachedPolicyIds":{"shape":"S26"},"NextToken":{}}},"ListPolicyAttachments":{"type":"structure","members":{"ObjectIdentifiers":{"shape":"S26"},"NextToken":{}}},"LookupPolicy":{"type":"structure","members":{"PolicyToPathList":{"shape":"S2a"},"NextToken":{}}},"ListIndex":{"type":"structure","members":{"IndexAttachments":{"shape":"S20"},"NextToken":{}}},"ListOutgoingTypedLinks":{"type":"structure","members":{"TypedLinkSpecifiers":{"shape":"S2h"},"NextToken":{}}},"ListIncomingTypedLinks":{"type":"structure","members":{"LinkSpecifiers":{"shape":"S2h"},"NextToken":{}}},"GetLinkAttributes":{"type":"structure","members":{"Attributes":{"shape":"S5"}}}}},"ExceptionResponse":{"type":"structure","members":{"Type":{},"Message":{}}}}}}}}},"BatchWrite":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/batchwrite","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","Operations"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"Operations":{"type":"list","member":{"type":"structure","members":{"CreateObject":{"type":"structure","required":["SchemaFacet","ObjectAttributeList"],"members":{"SchemaFacet":{"shape":"S1x"},"ObjectAttributeList":{"shape":"S5"},"ParentReference":{"shape":"Sf"},"LinkName":{},"BatchReferenceName":{}}},"AttachObject":{"type":"structure","required":["ParentReference","ChildReference","LinkName"],"members":{"ParentReference":{"shape":"Sf"},"ChildReference":{"shape":"Sf"},"LinkName":{}}},"DetachObject":{"type":"structure","required":["ParentReference","LinkName"],"members":{"ParentReference":{"shape":"Sf"},"LinkName":{},"BatchReferenceName":{}}},"UpdateObjectAttributes":{"type":"structure","required":["ObjectReference","AttributeUpdates"],"members":{"ObjectReference":{"shape":"Sf"},"AttributeUpdates":{"shape":"S2v"}}},"DeleteObject":{"type":"structure","required":["ObjectReference"],"members":{"ObjectReference":{"shape":"Sf"}}},"AddFacetToObject":{"type":"structure","required":["SchemaFacet","ObjectAttributeList","ObjectReference"],"members":{"SchemaFacet":{"shape":"S3"},"ObjectAttributeList":{"shape":"S5"},"ObjectReference":{"shape":"Sf"}}},"RemoveFacetFromObject":{"type":"structure","required":["SchemaFacet","ObjectReference"],"members":{"SchemaFacet":{"shape":"S3"},"ObjectReference":{"shape":"Sf"}}},"AttachPolicy":{"type":"structure","required":["PolicyReference","ObjectReference"],"members":{"PolicyReference":{"shape":"Sf"},"ObjectReference":{"shape":"Sf"}}},"DetachPolicy":{"type":"structure","required":["PolicyReference","ObjectReference"],"members":{"PolicyReference":{"shape":"Sf"},"ObjectReference":{"shape":"Sf"}}},"CreateIndex":{"type":"structure","required":["OrderedIndexedAttributeList","IsUnique"],"members":{"OrderedIndexedAttributeList":{"shape":"S35"},"IsUnique":{"type":"boolean"},"ParentReference":{"shape":"Sf"},"LinkName":{},"BatchReferenceName":{}}},"AttachToIndex":{"type":"structure","required":["IndexReference","TargetReference"],"members":{"IndexReference":{"shape":"Sf"},"TargetReference":{"shape":"Sf"}}},"DetachFromIndex":{"type":"structure","required":["IndexReference","TargetReference"],"members":{"IndexReference":{"shape":"Sf"},"TargetReference":{"shape":"Sf"}}},"AttachTypedLink":{"type":"structure","required":["SourceObjectReference","TargetObjectReference","TypedLinkFacet","Attributes"],"members":{"SourceObjectReference":{"shape":"Sf"},"TargetObjectReference":{"shape":"Sf"},"TypedLinkFacet":{"shape":"St"},"Attributes":{"shape":"Sv"}}},"DetachTypedLink":{"type":"structure","required":["TypedLinkSpecifier"],"members":{"TypedLinkSpecifier":{"shape":"Sy"}}},"UpdateLinkAttributes":{"type":"structure","required":["TypedLinkSpecifier","AttributeUpdates"],"members":{"TypedLinkSpecifier":{"shape":"Sy"},"AttributeUpdates":{"shape":"S3c"}}}}}}}},"output":{"type":"structure","members":{"Responses":{"type":"list","member":{"type":"structure","members":{"CreateObject":{"type":"structure","members":{"ObjectIdentifier":{}}},"AttachObject":{"type":"structure","members":{"attachedObjectIdentifier":{}}},"DetachObject":{"type":"structure","members":{"detachedObjectIdentifier":{}}},"UpdateObjectAttributes":{"type":"structure","members":{"ObjectIdentifier":{}}},"DeleteObject":{"type":"structure","members":{}},"AddFacetToObject":{"type":"structure","members":{}},"RemoveFacetFromObject":{"type":"structure","members":{}},"AttachPolicy":{"type":"structure","members":{}},"DetachPolicy":{"type":"structure","members":{}},"CreateIndex":{"type":"structure","members":{"ObjectIdentifier":{}}},"AttachToIndex":{"type":"structure","members":{"AttachedObjectIdentifier":{}}},"DetachFromIndex":{"type":"structure","members":{"DetachedObjectIdentifier":{}}},"AttachTypedLink":{"type":"structure","members":{"TypedLinkSpecifier":{"shape":"Sy"}}},"DetachTypedLink":{"type":"structure","members":{}},"UpdateLinkAttributes":{"type":"structure","members":{}}}}}}}},"CreateDirectory":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/directory/create","responseCode":200},"input":{"type":"structure","required":["Name","SchemaArn"],"members":{"Name":{},"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"}}},"output":{"type":"structure","required":["DirectoryArn","Name","ObjectIdentifier","AppliedSchemaArn"],"members":{"DirectoryArn":{},"Name":{},"ObjectIdentifier":{},"AppliedSchemaArn":{}}}},"CreateFacet":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/facet/create","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Name","ObjectType"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Name":{},"Attributes":{"shape":"S42"},"ObjectType":{}}},"output":{"type":"structure","members":{}}},"CreateIndex":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/index","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","OrderedIndexedAttributeList","IsUnique"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"OrderedIndexedAttributeList":{"shape":"S35"},"IsUnique":{"type":"boolean"},"ParentReference":{"shape":"Sf"},"LinkName":{}}},"output":{"type":"structure","members":{"ObjectIdentifier":{}}}},"CreateObject":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/object","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","SchemaFacets"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"SchemaFacets":{"shape":"S1x"},"ObjectAttributeList":{"shape":"S5"},"ParentReference":{"shape":"Sf"},"LinkName":{}}},"output":{"type":"structure","members":{"ObjectIdentifier":{}}}},"CreateSchema":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/schema/create","responseCode":200},"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{"SchemaArn":{}}}},"CreateTypedLinkFacet":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/typedlink/facet/create","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Facet"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Facet":{"type":"structure","required":["Name","Attributes","IdentityAttributeOrder"],"members":{"Name":{},"Attributes":{"shape":"S4q"},"IdentityAttributeOrder":{"shape":"S1a"}}}}},"output":{"type":"structure","members":{}}},"DeleteDirectory":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/directory","responseCode":200},"input":{"type":"structure","required":["DirectoryArn"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"}}},"output":{"type":"structure","required":["DirectoryArn"],"members":{"DirectoryArn":{}}}},"DeleteFacet":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/facet/delete","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Name"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Name":{}}},"output":{"type":"structure","members":{}}},"DeleteObject":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/object/delete","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ObjectReference":{"shape":"Sf"}}},"output":{"type":"structure","members":{}}},"DeleteSchema":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/schema","responseCode":200},"input":{"type":"structure","required":["SchemaArn"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"}}},"output":{"type":"structure","members":{"SchemaArn":{}}}},"DeleteTypedLinkFacet":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/typedlink/facet/delete","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Name"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Name":{}}},"output":{"type":"structure","members":{}}},"DetachFromIndex":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/index/detach","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","IndexReference","TargetReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"IndexReference":{"shape":"Sf"},"TargetReference":{"shape":"Sf"}}},"output":{"type":"structure","members":{"DetachedObjectIdentifier":{}}}},"DetachObject":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/object/detach","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ParentReference","LinkName"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ParentReference":{"shape":"Sf"},"LinkName":{}}},"output":{"type":"structure","members":{"DetachedObjectIdentifier":{}}}},"DetachPolicy":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/policy/detach","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","PolicyReference","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"PolicyReference":{"shape":"Sf"},"ObjectReference":{"shape":"Sf"}}},"output":{"type":"structure","members":{}}},"DetachTypedLink":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/typedlink/detach","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","TypedLinkSpecifier"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"TypedLinkSpecifier":{"shape":"Sy"}}}},"DisableDirectory":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/directory/disable","responseCode":200},"input":{"type":"structure","required":["DirectoryArn"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"}}},"output":{"type":"structure","required":["DirectoryArn"],"members":{"DirectoryArn":{}}}},"EnableDirectory":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/directory/enable","responseCode":200},"input":{"type":"structure","required":["DirectoryArn"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"}}},"output":{"type":"structure","required":["DirectoryArn"],"members":{"DirectoryArn":{}}}},"GetAppliedSchemaVersion":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/schema/getappliedschema","responseCode":200},"input":{"type":"structure","required":["SchemaArn"],"members":{"SchemaArn":{}}},"output":{"type":"structure","members":{"AppliedSchemaArn":{}}}},"GetDirectory":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/directory/get","responseCode":200},"input":{"type":"structure","required":["DirectoryArn"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"}}},"output":{"type":"structure","required":["Directory"],"members":{"Directory":{"shape":"S5i"}}}},"GetFacet":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/facet","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Name"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Name":{}}},"output":{"type":"structure","members":{"Facet":{"type":"structure","members":{"Name":{},"ObjectType":{}}}}}},"GetLinkAttributes":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/typedlink/attributes/get","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","TypedLinkSpecifier","AttributeNames"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"TypedLinkSpecifier":{"shape":"Sy"},"AttributeNames":{"shape":"S1a"},"ConsistencyLevel":{}}},"output":{"type":"structure","members":{"Attributes":{"shape":"S5"}}}},"GetObjectAttributes":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/object/attributes/get","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ObjectReference","SchemaFacet","AttributeNames"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ObjectReference":{"shape":"Sf"},"ConsistencyLevel":{"location":"header","locationName":"x-amz-consistency-level"},"SchemaFacet":{"shape":"S3"},"AttributeNames":{"shape":"S1a"}}},"output":{"type":"structure","members":{"Attributes":{"shape":"S5"}}}},"GetObjectInformation":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/object/information","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ObjectReference":{"shape":"Sf"},"ConsistencyLevel":{"location":"header","locationName":"x-amz-consistency-level"}}},"output":{"type":"structure","members":{"SchemaFacets":{"shape":"S1x"},"ObjectIdentifier":{}}}},"GetSchemaAsJson":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/schema/json","responseCode":200},"input":{"type":"structure","required":["SchemaArn"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"}}},"output":{"type":"structure","members":{"Name":{},"Document":{}}}},"GetTypedLinkFacetInformation":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/typedlink/facet/get","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Name"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Name":{}}},"output":{"type":"structure","members":{"IdentityAttributeOrder":{"shape":"S1a"}}}},"ListAppliedSchemaArns":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/schema/applied","responseCode":200},"input":{"type":"structure","required":["DirectoryArn"],"members":{"DirectoryArn":{},"SchemaArn":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"SchemaArns":{"shape":"S61"},"NextToken":{}}}},"ListAttachedIndices":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/object/indices","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","TargetReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"TargetReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"},"ConsistencyLevel":{"location":"header","locationName":"x-amz-consistency-level"}}},"output":{"type":"structure","members":{"IndexAttachments":{"shape":"S20"},"NextToken":{}}}},"ListDevelopmentSchemaArns":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/schema/development","responseCode":200},"input":{"type":"structure","members":{"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"SchemaArns":{"shape":"S61"},"NextToken":{}}}},"ListDirectories":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/directory/list","responseCode":200},"input":{"type":"structure","members":{"NextToken":{},"MaxResults":{"type":"integer"},"state":{}}},"output":{"type":"structure","required":["Directories"],"members":{"Directories":{"type":"list","member":{"shape":"S5i"}},"NextToken":{}}}},"ListFacetAttributes":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/facet/attributes","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Name"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Name":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Attributes":{"shape":"S42"},"NextToken":{}}}},"ListFacetNames":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/facet/list","responseCode":200},"input":{"type":"structure","required":["SchemaArn"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"FacetNames":{"type":"list","member":{}},"NextToken":{}}}},"ListIncomingTypedLinks":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/typedlink/incoming","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ObjectReference":{"shape":"Sf"},"FilterAttributeRanges":{"shape":"S1k"},"FilterTypedLink":{"shape":"St"},"NextToken":{},"MaxResults":{"type":"integer"},"ConsistencyLevel":{}}},"output":{"type":"structure","members":{"LinkSpecifiers":{"shape":"S2h"},"NextToken":{}}}},"ListIndex":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/index/targets","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","IndexReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"RangesOnIndexedValues":{"shape":"S1f"},"IndexReference":{"shape":"Sf"},"MaxResults":{"type":"integer"},"NextToken":{},"ConsistencyLevel":{"location":"header","locationName":"x-amz-consistency-level"}}},"output":{"type":"structure","members":{"IndexAttachments":{"shape":"S20"},"NextToken":{}}}},"ListObjectAttributes":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/object/attributes","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ObjectReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"},"ConsistencyLevel":{"location":"header","locationName":"x-amz-consistency-level"},"FacetFilter":{"shape":"S3"}}},"output":{"type":"structure","members":{"Attributes":{"shape":"S5"},"NextToken":{}}}},"ListObjectChildren":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/object/children","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ObjectReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"},"ConsistencyLevel":{"location":"header","locationName":"x-amz-consistency-level"}}},"output":{"type":"structure","members":{"Children":{"shape":"S1v"},"NextToken":{}}}},"ListObjectParentPaths":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/object/parentpaths","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ObjectReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"PathToObjectIdentifiersList":{"shape":"S23"},"NextToken":{}}}},"ListObjectParents":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/object/parent","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ObjectReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"},"ConsistencyLevel":{"location":"header","locationName":"x-amz-consistency-level"}}},"output":{"type":"structure","members":{"Parents":{"type":"map","key":{},"value":{}},"NextToken":{}}}},"ListObjectPolicies":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/object/policy","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ObjectReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"},"ConsistencyLevel":{"location":"header","locationName":"x-amz-consistency-level"}}},"output":{"type":"structure","members":{"AttachedPolicyIds":{"shape":"S26"},"NextToken":{}}}},"ListOutgoingTypedLinks":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/typedlink/outgoing","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ObjectReference":{"shape":"Sf"},"FilterAttributeRanges":{"shape":"S1k"},"FilterTypedLink":{"shape":"St"},"NextToken":{},"MaxResults":{"type":"integer"},"ConsistencyLevel":{}}},"output":{"type":"structure","members":{"TypedLinkSpecifiers":{"shape":"S2h"},"NextToken":{}}}},"ListPolicyAttachments":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/policy/attachment","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","PolicyReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"PolicyReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"},"ConsistencyLevel":{"location":"header","locationName":"x-amz-consistency-level"}}},"output":{"type":"structure","members":{"ObjectIdentifiers":{"shape":"S26"},"NextToken":{}}}},"ListPublishedSchemaArns":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/schema/published","responseCode":200},"input":{"type":"structure","members":{"SchemaArn":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"SchemaArns":{"shape":"S61"},"NextToken":{}}}},"ListTagsForResource":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/tags","responseCode":200},"input":{"type":"structure","required":["ResourceArn"],"members":{"ResourceArn":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Tags":{"shape":"S72"},"NextToken":{}}}},"ListTypedLinkFacetAttributes":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/typedlink/facet/attributes","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Name"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Name":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Attributes":{"shape":"S4q"},"NextToken":{}}}},"ListTypedLinkFacetNames":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/typedlink/facet/list","responseCode":200},"input":{"type":"structure","required":["SchemaArn"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"FacetNames":{"type":"list","member":{}},"NextToken":{}}}},"LookupPolicy":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/policy/lookup","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ObjectReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"PolicyToPathList":{"shape":"S2a"},"NextToken":{}}}},"PublishSchema":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/schema/publish","responseCode":200},"input":{"type":"structure","required":["DevelopmentSchemaArn","Version"],"members":{"DevelopmentSchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Version":{},"MinorVersion":{},"Name":{}}},"output":{"type":"structure","members":{"PublishedSchemaArn":{}}}},"PutSchemaFromJson":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/schema/json","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Document"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Document":{}}},"output":{"type":"structure","members":{"Arn":{}}}},"RemoveFacetFromObject":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/object/facets/delete","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","SchemaFacet","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"SchemaFacet":{"shape":"S3"},"ObjectReference":{"shape":"Sf"}}},"output":{"type":"structure","members":{}}},"TagResource":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/tags/add","responseCode":200},"input":{"type":"structure","required":["ResourceArn","Tags"],"members":{"ResourceArn":{},"Tags":{"shape":"S72"}}},"output":{"type":"structure","members":{}}},"UntagResource":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/tags/remove","responseCode":200},"input":{"type":"structure","required":["ResourceArn","TagKeys"],"members":{"ResourceArn":{},"TagKeys":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"UpdateFacet":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/facet","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Name"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Name":{},"AttributeUpdates":{"type":"list","member":{"type":"structure","members":{"Attribute":{"shape":"S43"},"Action":{}}}},"ObjectType":{}}},"output":{"type":"structure","members":{}}},"UpdateLinkAttributes":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/typedlink/attributes/update","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","TypedLinkSpecifier","AttributeUpdates"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"TypedLinkSpecifier":{"shape":"Sy"},"AttributeUpdates":{"shape":"S3c"}}},"output":{"type":"structure","members":{}}},"UpdateObjectAttributes":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/object/update","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ObjectReference","AttributeUpdates"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ObjectReference":{"shape":"Sf"},"AttributeUpdates":{"shape":"S2v"}}},"output":{"type":"structure","members":{"ObjectIdentifier":{}}}},"UpdateSchema":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/schema/update","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Name"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Name":{}}},"output":{"type":"structure","members":{"SchemaArn":{}}}},"UpdateTypedLinkFacet":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/typedlink/facet","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Name","AttributeUpdates","IdentityAttributeOrder"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Name":{},"AttributeUpdates":{"type":"list","member":{"type":"structure","required":["Attribute","Action"],"members":{"Attribute":{"shape":"S4r"},"Action":{}}}},"IdentityAttributeOrder":{"shape":"S1a"}}},"output":{"type":"structure","members":{}}},"UpgradeAppliedSchema":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/schema/upgradeapplied","responseCode":200},"input":{"type":"structure","required":["PublishedSchemaArn","DirectoryArn"],"members":{"PublishedSchemaArn":{},"DirectoryArn":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"UpgradedSchemaArn":{},"DirectoryArn":{}}}},"UpgradePublishedSchema":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/schema/upgradepublished","responseCode":200},"input":{"type":"structure","required":["DevelopmentSchemaArn","PublishedSchemaArn","MinorVersion"],"members":{"DevelopmentSchemaArn":{},"PublishedSchemaArn":{},"MinorVersion":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"UpgradedSchemaArn":{}}}}},"shapes":{"S3":{"type":"structure","members":{"SchemaArn":{},"FacetName":{}}},"S5":{"type":"list","member":{"type":"structure","required":["Key","Value"],"members":{"Key":{"shape":"S7"},"Value":{"shape":"S9"}}}},"S7":{"type":"structure","required":["SchemaArn","FacetName","Name"],"members":{"SchemaArn":{},"FacetName":{},"Name":{}}},"S9":{"type":"structure","members":{"StringValue":{},"BinaryValue":{"type":"blob"},"BooleanValue":{"type":"boolean"},"NumberValue":{},"DatetimeValue":{"type":"timestamp"}}},"Sf":{"type":"structure","members":{"Selector":{}}},"St":{"type":"structure","required":["SchemaArn","TypedLinkName"],"members":{"SchemaArn":{},"TypedLinkName":{}}},"Sv":{"type":"list","member":{"type":"structure","required":["AttributeName","Value"],"members":{"AttributeName":{},"Value":{"shape":"S9"}}}},"Sy":{"type":"structure","required":["TypedLinkFacet","SourceObjectReference","TargetObjectReference","IdentityAttributeValues"],"members":{"TypedLinkFacet":{"shape":"St"},"SourceObjectReference":{"shape":"Sf"},"TargetObjectReference":{"shape":"Sf"},"IdentityAttributeValues":{"shape":"Sv"}}},"S1a":{"type":"list","member":{}},"S1f":{"type":"list","member":{"type":"structure","members":{"AttributeKey":{"shape":"S7"},"Range":{"shape":"S1h"}}}},"S1h":{"type":"structure","required":["StartMode","EndMode"],"members":{"StartMode":{},"StartValue":{"shape":"S9"},"EndMode":{},"EndValue":{"shape":"S9"}}},"S1k":{"type":"list","member":{"type":"structure","required":["Range"],"members":{"AttributeName":{},"Range":{"shape":"S1h"}}}},"S1v":{"type":"map","key":{},"value":{}},"S1x":{"type":"list","member":{"shape":"S3"}},"S20":{"type":"list","member":{"type":"structure","members":{"IndexedAttributes":{"shape":"S5"},"ObjectIdentifier":{}}}},"S23":{"type":"list","member":{"type":"structure","members":{"Path":{},"ObjectIdentifiers":{"shape":"S26"}}}},"S26":{"type":"list","member":{}},"S2a":{"type":"list","member":{"type":"structure","members":{"Path":{},"Policies":{"type":"list","member":{"type":"structure","members":{"PolicyId":{},"ObjectIdentifier":{},"PolicyType":{}}}}}}},"S2h":{"type":"list","member":{"shape":"Sy"}},"S2v":{"type":"list","member":{"type":"structure","members":{"ObjectAttributeKey":{"shape":"S7"},"ObjectAttributeAction":{"type":"structure","members":{"ObjectAttributeActionType":{},"ObjectAttributeUpdateValue":{"shape":"S9"}}}}}},"S35":{"type":"list","member":{"shape":"S7"}},"S3c":{"type":"list","member":{"type":"structure","members":{"AttributeKey":{"shape":"S7"},"AttributeAction":{"type":"structure","members":{"AttributeActionType":{},"AttributeUpdateValue":{"shape":"S9"}}}}}},"S42":{"type":"list","member":{"shape":"S43"}},"S43":{"type":"structure","required":["Name"],"members":{"Name":{},"AttributeDefinition":{"type":"structure","required":["Type"],"members":{"Type":{},"DefaultValue":{"shape":"S9"},"IsImmutable":{"type":"boolean"},"Rules":{"shape":"S46"}}},"AttributeReference":{"type":"structure","required":["TargetFacetName","TargetAttributeName"],"members":{"TargetFacetName":{},"TargetAttributeName":{}}},"RequiredBehavior":{}}},"S46":{"type":"map","key":{},"value":{"type":"structure","members":{"Type":{},"Parameters":{"type":"map","key":{},"value":{}}}}},"S4q":{"type":"list","member":{"shape":"S4r"}},"S4r":{"type":"structure","required":["Name","Type","RequiredBehavior"],"members":{"Name":{},"Type":{},"DefaultValue":{"shape":"S9"},"IsImmutable":{"type":"boolean"},"Rules":{"shape":"S46"},"RequiredBehavior":{}}},"S5i":{"type":"structure","members":{"Name":{},"DirectoryArn":{},"State":{},"CreationDateTime":{"type":"timestamp"}}},"S61":{"type":"list","member":{}},"S72":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{}}}}}}

/***/ }),
/* 76 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"ListAppliedSchemaArns":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListAttachedIndices":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListDevelopmentSchemaArns":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListDirectories":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListFacetAttributes":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListFacetNames":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListIndex":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListObjectAttributes":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListObjectChildren":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListObjectParentPaths":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListObjectParents":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListObjectPolicies":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListPolicyAttachments":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListPublishedSchemaArns":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListTagsForResource":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListTypedLinkFacetAttributes":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListTypedLinkFacetNames":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"LookupPolicy":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"}}}

/***/ }),
/* 77 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2017-01-11","endpointPrefix":"clouddirectory","protocol":"rest-json","serviceFullName":"Amazon CloudDirectory","serviceId":"CloudDirectory","signatureVersion":"v4","signingName":"clouddirectory","uid":"clouddirectory-2017-01-11"},"operations":{"AddFacetToObject":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/object/facets","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","SchemaFacet","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"SchemaFacet":{"shape":"S3"},"ObjectAttributeList":{"shape":"S5"},"ObjectReference":{"shape":"Sf"}}},"output":{"type":"structure","members":{}}},"ApplySchema":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/schema/apply","responseCode":200},"input":{"type":"structure","required":["PublishedSchemaArn","DirectoryArn"],"members":{"PublishedSchemaArn":{},"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"}}},"output":{"type":"structure","members":{"AppliedSchemaArn":{},"DirectoryArn":{}}}},"AttachObject":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/object/attach","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ParentReference","ChildReference","LinkName"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ParentReference":{"shape":"Sf"},"ChildReference":{"shape":"Sf"},"LinkName":{}}},"output":{"type":"structure","members":{"AttachedObjectIdentifier":{}}}},"AttachPolicy":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/policy/attach","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","PolicyReference","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"PolicyReference":{"shape":"Sf"},"ObjectReference":{"shape":"Sf"}}},"output":{"type":"structure","members":{}}},"AttachToIndex":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/index/attach","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","IndexReference","TargetReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"IndexReference":{"shape":"Sf"},"TargetReference":{"shape":"Sf"}}},"output":{"type":"structure","members":{"AttachedObjectIdentifier":{}}}},"AttachTypedLink":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/typedlink/attach","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","SourceObjectReference","TargetObjectReference","TypedLinkFacet","Attributes"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"SourceObjectReference":{"shape":"Sf"},"TargetObjectReference":{"shape":"Sf"},"TypedLinkFacet":{"shape":"St"},"Attributes":{"shape":"Sv"}}},"output":{"type":"structure","members":{"TypedLinkSpecifier":{"shape":"Sy"}}}},"BatchRead":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/batchread","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","Operations"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"Operations":{"type":"list","member":{"type":"structure","members":{"ListObjectAttributes":{"type":"structure","required":["ObjectReference"],"members":{"ObjectReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"},"FacetFilter":{"shape":"S3"}}},"ListObjectChildren":{"type":"structure","required":["ObjectReference"],"members":{"ObjectReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"}}},"ListAttachedIndices":{"type":"structure","required":["TargetReference"],"members":{"TargetReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"}}},"ListObjectParentPaths":{"type":"structure","required":["ObjectReference"],"members":{"ObjectReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"}}},"GetObjectInformation":{"type":"structure","required":["ObjectReference"],"members":{"ObjectReference":{"shape":"Sf"}}},"GetObjectAttributes":{"type":"structure","required":["ObjectReference","SchemaFacet","AttributeNames"],"members":{"ObjectReference":{"shape":"Sf"},"SchemaFacet":{"shape":"S3"},"AttributeNames":{"shape":"S1a"}}},"ListObjectParents":{"type":"structure","required":["ObjectReference"],"members":{"ObjectReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"}}},"ListObjectPolicies":{"type":"structure","required":["ObjectReference"],"members":{"ObjectReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"}}},"ListPolicyAttachments":{"type":"structure","required":["PolicyReference"],"members":{"PolicyReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"}}},"LookupPolicy":{"type":"structure","required":["ObjectReference"],"members":{"ObjectReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"}}},"ListIndex":{"type":"structure","required":["IndexReference"],"members":{"RangesOnIndexedValues":{"shape":"S1g"},"IndexReference":{"shape":"Sf"},"MaxResults":{"type":"integer"},"NextToken":{}}},"ListOutgoingTypedLinks":{"type":"structure","required":["ObjectReference"],"members":{"ObjectReference":{"shape":"Sf"},"FilterAttributeRanges":{"shape":"S1l"},"FilterTypedLink":{"shape":"St"},"NextToken":{},"MaxResults":{"type":"integer"}}},"ListIncomingTypedLinks":{"type":"structure","required":["ObjectReference"],"members":{"ObjectReference":{"shape":"Sf"},"FilterAttributeRanges":{"shape":"S1l"},"FilterTypedLink":{"shape":"St"},"NextToken":{},"MaxResults":{"type":"integer"}}},"GetLinkAttributes":{"type":"structure","required":["TypedLinkSpecifier","AttributeNames"],"members":{"TypedLinkSpecifier":{"shape":"Sy"},"AttributeNames":{"shape":"S1a"}}}}}},"ConsistencyLevel":{"location":"header","locationName":"x-amz-consistency-level"}}},"output":{"type":"structure","members":{"Responses":{"type":"list","member":{"type":"structure","members":{"SuccessfulResponse":{"type":"structure","members":{"ListObjectAttributes":{"type":"structure","members":{"Attributes":{"shape":"S5"},"NextToken":{}}},"ListObjectChildren":{"type":"structure","members":{"Children":{"shape":"S1w"},"NextToken":{}}},"GetObjectInformation":{"type":"structure","members":{"SchemaFacets":{"shape":"S1y"},"ObjectIdentifier":{}}},"GetObjectAttributes":{"type":"structure","members":{"Attributes":{"shape":"S5"}}},"ListAttachedIndices":{"type":"structure","members":{"IndexAttachments":{"shape":"S21"},"NextToken":{}}},"ListObjectParentPaths":{"type":"structure","members":{"PathToObjectIdentifiersList":{"shape":"S24"},"NextToken":{}}},"ListObjectPolicies":{"type":"structure","members":{"AttachedPolicyIds":{"shape":"S27"},"NextToken":{}}},"ListPolicyAttachments":{"type":"structure","members":{"ObjectIdentifiers":{"shape":"S27"},"NextToken":{}}},"LookupPolicy":{"type":"structure","members":{"PolicyToPathList":{"shape":"S2b"},"NextToken":{}}},"ListIndex":{"type":"structure","members":{"IndexAttachments":{"shape":"S21"},"NextToken":{}}},"ListOutgoingTypedLinks":{"type":"structure","members":{"TypedLinkSpecifiers":{"shape":"S2i"},"NextToken":{}}},"ListIncomingTypedLinks":{"type":"structure","members":{"LinkSpecifiers":{"shape":"S2i"},"NextToken":{}}},"GetLinkAttributes":{"type":"structure","members":{"Attributes":{"shape":"S5"}}},"ListObjectParents":{"type":"structure","members":{"ParentLinks":{"shape":"S2m"},"NextToken":{}}}}},"ExceptionResponse":{"type":"structure","members":{"Type":{},"Message":{}}}}}}}}},"BatchWrite":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/batchwrite","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","Operations"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"Operations":{"type":"list","member":{"type":"structure","members":{"CreateObject":{"type":"structure","required":["SchemaFacet","ObjectAttributeList"],"members":{"SchemaFacet":{"shape":"S1y"},"ObjectAttributeList":{"shape":"S5"},"ParentReference":{"shape":"Sf"},"LinkName":{},"BatchReferenceName":{}}},"AttachObject":{"type":"structure","required":["ParentReference","ChildReference","LinkName"],"members":{"ParentReference":{"shape":"Sf"},"ChildReference":{"shape":"Sf"},"LinkName":{}}},"DetachObject":{"type":"structure","required":["ParentReference","LinkName"],"members":{"ParentReference":{"shape":"Sf"},"LinkName":{},"BatchReferenceName":{}}},"UpdateObjectAttributes":{"type":"structure","required":["ObjectReference","AttributeUpdates"],"members":{"ObjectReference":{"shape":"Sf"},"AttributeUpdates":{"shape":"S2z"}}},"DeleteObject":{"type":"structure","required":["ObjectReference"],"members":{"ObjectReference":{"shape":"Sf"}}},"AddFacetToObject":{"type":"structure","required":["SchemaFacet","ObjectAttributeList","ObjectReference"],"members":{"SchemaFacet":{"shape":"S3"},"ObjectAttributeList":{"shape":"S5"},"ObjectReference":{"shape":"Sf"}}},"RemoveFacetFromObject":{"type":"structure","required":["SchemaFacet","ObjectReference"],"members":{"SchemaFacet":{"shape":"S3"},"ObjectReference":{"shape":"Sf"}}},"AttachPolicy":{"type":"structure","required":["PolicyReference","ObjectReference"],"members":{"PolicyReference":{"shape":"Sf"},"ObjectReference":{"shape":"Sf"}}},"DetachPolicy":{"type":"structure","required":["PolicyReference","ObjectReference"],"members":{"PolicyReference":{"shape":"Sf"},"ObjectReference":{"shape":"Sf"}}},"CreateIndex":{"type":"structure","required":["OrderedIndexedAttributeList","IsUnique"],"members":{"OrderedIndexedAttributeList":{"shape":"S39"},"IsUnique":{"type":"boolean"},"ParentReference":{"shape":"Sf"},"LinkName":{},"BatchReferenceName":{}}},"AttachToIndex":{"type":"structure","required":["IndexReference","TargetReference"],"members":{"IndexReference":{"shape":"Sf"},"TargetReference":{"shape":"Sf"}}},"DetachFromIndex":{"type":"structure","required":["IndexReference","TargetReference"],"members":{"IndexReference":{"shape":"Sf"},"TargetReference":{"shape":"Sf"}}},"AttachTypedLink":{"type":"structure","required":["SourceObjectReference","TargetObjectReference","TypedLinkFacet","Attributes"],"members":{"SourceObjectReference":{"shape":"Sf"},"TargetObjectReference":{"shape":"Sf"},"TypedLinkFacet":{"shape":"St"},"Attributes":{"shape":"Sv"}}},"DetachTypedLink":{"type":"structure","required":["TypedLinkSpecifier"],"members":{"TypedLinkSpecifier":{"shape":"Sy"}}},"UpdateLinkAttributes":{"type":"structure","required":["TypedLinkSpecifier","AttributeUpdates"],"members":{"TypedLinkSpecifier":{"shape":"Sy"},"AttributeUpdates":{"shape":"S3g"}}}}}}}},"output":{"type":"structure","members":{"Responses":{"type":"list","member":{"type":"structure","members":{"CreateObject":{"type":"structure","members":{"ObjectIdentifier":{}}},"AttachObject":{"type":"structure","members":{"attachedObjectIdentifier":{}}},"DetachObject":{"type":"structure","members":{"detachedObjectIdentifier":{}}},"UpdateObjectAttributes":{"type":"structure","members":{"ObjectIdentifier":{}}},"DeleteObject":{"type":"structure","members":{}},"AddFacetToObject":{"type":"structure","members":{}},"RemoveFacetFromObject":{"type":"structure","members":{}},"AttachPolicy":{"type":"structure","members":{}},"DetachPolicy":{"type":"structure","members":{}},"CreateIndex":{"type":"structure","members":{"ObjectIdentifier":{}}},"AttachToIndex":{"type":"structure","members":{"AttachedObjectIdentifier":{}}},"DetachFromIndex":{"type":"structure","members":{"DetachedObjectIdentifier":{}}},"AttachTypedLink":{"type":"structure","members":{"TypedLinkSpecifier":{"shape":"Sy"}}},"DetachTypedLink":{"type":"structure","members":{}},"UpdateLinkAttributes":{"type":"structure","members":{}}}}}}}},"CreateDirectory":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/directory/create","responseCode":200},"input":{"type":"structure","required":["Name","SchemaArn"],"members":{"Name":{},"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"}}},"output":{"type":"structure","required":["DirectoryArn","Name","ObjectIdentifier","AppliedSchemaArn"],"members":{"DirectoryArn":{},"Name":{},"ObjectIdentifier":{},"AppliedSchemaArn":{}}}},"CreateFacet":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/facet/create","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Name"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Name":{},"Attributes":{"shape":"S46"},"ObjectType":{},"FacetStyle":{}}},"output":{"type":"structure","members":{}}},"CreateIndex":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/index","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","OrderedIndexedAttributeList","IsUnique"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"OrderedIndexedAttributeList":{"shape":"S39"},"IsUnique":{"type":"boolean"},"ParentReference":{"shape":"Sf"},"LinkName":{}}},"output":{"type":"structure","members":{"ObjectIdentifier":{}}}},"CreateObject":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/object","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","SchemaFacets"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"SchemaFacets":{"shape":"S1y"},"ObjectAttributeList":{"shape":"S5"},"ParentReference":{"shape":"Sf"},"LinkName":{}}},"output":{"type":"structure","members":{"ObjectIdentifier":{}}}},"CreateSchema":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/schema/create","responseCode":200},"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{"SchemaArn":{}}}},"CreateTypedLinkFacet":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/typedlink/facet/create","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Facet"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Facet":{"type":"structure","required":["Name","Attributes","IdentityAttributeOrder"],"members":{"Name":{},"Attributes":{"shape":"S4v"},"IdentityAttributeOrder":{"shape":"S1a"}}}}},"output":{"type":"structure","members":{}}},"DeleteDirectory":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/directory","responseCode":200},"input":{"type":"structure","required":["DirectoryArn"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"}}},"output":{"type":"structure","required":["DirectoryArn"],"members":{"DirectoryArn":{}}}},"DeleteFacet":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/facet/delete","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Name"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Name":{}}},"output":{"type":"structure","members":{}}},"DeleteObject":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/object/delete","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ObjectReference":{"shape":"Sf"}}},"output":{"type":"structure","members":{}}},"DeleteSchema":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/schema","responseCode":200},"input":{"type":"structure","required":["SchemaArn"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"}}},"output":{"type":"structure","members":{"SchemaArn":{}}}},"DeleteTypedLinkFacet":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/typedlink/facet/delete","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Name"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Name":{}}},"output":{"type":"structure","members":{}}},"DetachFromIndex":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/index/detach","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","IndexReference","TargetReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"IndexReference":{"shape":"Sf"},"TargetReference":{"shape":"Sf"}}},"output":{"type":"structure","members":{"DetachedObjectIdentifier":{}}}},"DetachObject":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/object/detach","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ParentReference","LinkName"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ParentReference":{"shape":"Sf"},"LinkName":{}}},"output":{"type":"structure","members":{"DetachedObjectIdentifier":{}}}},"DetachPolicy":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/policy/detach","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","PolicyReference","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"PolicyReference":{"shape":"Sf"},"ObjectReference":{"shape":"Sf"}}},"output":{"type":"structure","members":{}}},"DetachTypedLink":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/typedlink/detach","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","TypedLinkSpecifier"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"TypedLinkSpecifier":{"shape":"Sy"}}}},"DisableDirectory":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/directory/disable","responseCode":200},"input":{"type":"structure","required":["DirectoryArn"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"}}},"output":{"type":"structure","required":["DirectoryArn"],"members":{"DirectoryArn":{}}}},"EnableDirectory":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/directory/enable","responseCode":200},"input":{"type":"structure","required":["DirectoryArn"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"}}},"output":{"type":"structure","required":["DirectoryArn"],"members":{"DirectoryArn":{}}}},"GetAppliedSchemaVersion":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/schema/getappliedschema","responseCode":200},"input":{"type":"structure","required":["SchemaArn"],"members":{"SchemaArn":{}}},"output":{"type":"structure","members":{"AppliedSchemaArn":{}}}},"GetDirectory":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/directory/get","responseCode":200},"input":{"type":"structure","required":["DirectoryArn"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"}}},"output":{"type":"structure","required":["Directory"],"members":{"Directory":{"shape":"S5n"}}}},"GetFacet":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/facet","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Name"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Name":{}}},"output":{"type":"structure","members":{"Facet":{"type":"structure","members":{"Name":{},"ObjectType":{},"FacetStyle":{}}}}}},"GetLinkAttributes":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/typedlink/attributes/get","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","TypedLinkSpecifier","AttributeNames"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"TypedLinkSpecifier":{"shape":"Sy"},"AttributeNames":{"shape":"S1a"},"ConsistencyLevel":{}}},"output":{"type":"structure","members":{"Attributes":{"shape":"S5"}}}},"GetObjectAttributes":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/object/attributes/get","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ObjectReference","SchemaFacet","AttributeNames"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ObjectReference":{"shape":"Sf"},"ConsistencyLevel":{"location":"header","locationName":"x-amz-consistency-level"},"SchemaFacet":{"shape":"S3"},"AttributeNames":{"shape":"S1a"}}},"output":{"type":"structure","members":{"Attributes":{"shape":"S5"}}}},"GetObjectInformation":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/object/information","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ObjectReference":{"shape":"Sf"},"ConsistencyLevel":{"location":"header","locationName":"x-amz-consistency-level"}}},"output":{"type":"structure","members":{"SchemaFacets":{"shape":"S1y"},"ObjectIdentifier":{}}}},"GetSchemaAsJson":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/schema/json","responseCode":200},"input":{"type":"structure","required":["SchemaArn"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"}}},"output":{"type":"structure","members":{"Name":{},"Document":{}}}},"GetTypedLinkFacetInformation":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/typedlink/facet/get","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Name"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Name":{}}},"output":{"type":"structure","members":{"IdentityAttributeOrder":{"shape":"S1a"}}}},"ListAppliedSchemaArns":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/schema/applied","responseCode":200},"input":{"type":"structure","required":["DirectoryArn"],"members":{"DirectoryArn":{},"SchemaArn":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"SchemaArns":{"shape":"S66"},"NextToken":{}}}},"ListAttachedIndices":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/object/indices","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","TargetReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"TargetReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"},"ConsistencyLevel":{"location":"header","locationName":"x-amz-consistency-level"}}},"output":{"type":"structure","members":{"IndexAttachments":{"shape":"S21"},"NextToken":{}}}},"ListDevelopmentSchemaArns":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/schema/development","responseCode":200},"input":{"type":"structure","members":{"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"SchemaArns":{"shape":"S66"},"NextToken":{}}}},"ListDirectories":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/directory/list","responseCode":200},"input":{"type":"structure","members":{"NextToken":{},"MaxResults":{"type":"integer"},"state":{}}},"output":{"type":"structure","required":["Directories"],"members":{"Directories":{"type":"list","member":{"shape":"S5n"}},"NextToken":{}}}},"ListFacetAttributes":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/facet/attributes","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Name"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Name":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Attributes":{"shape":"S46"},"NextToken":{}}}},"ListFacetNames":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/facet/list","responseCode":200},"input":{"type":"structure","required":["SchemaArn"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"FacetNames":{"type":"list","member":{}},"NextToken":{}}}},"ListIncomingTypedLinks":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/typedlink/incoming","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ObjectReference":{"shape":"Sf"},"FilterAttributeRanges":{"shape":"S1l"},"FilterTypedLink":{"shape":"St"},"NextToken":{},"MaxResults":{"type":"integer"},"ConsistencyLevel":{}}},"output":{"type":"structure","members":{"LinkSpecifiers":{"shape":"S2i"},"NextToken":{}}}},"ListIndex":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/index/targets","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","IndexReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"RangesOnIndexedValues":{"shape":"S1g"},"IndexReference":{"shape":"Sf"},"MaxResults":{"type":"integer"},"NextToken":{},"ConsistencyLevel":{"location":"header","locationName":"x-amz-consistency-level"}}},"output":{"type":"structure","members":{"IndexAttachments":{"shape":"S21"},"NextToken":{}}}},"ListManagedSchemaArns":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/schema/managed","responseCode":200},"input":{"type":"structure","members":{"SchemaArn":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"SchemaArns":{"shape":"S66"},"NextToken":{}}}},"ListObjectAttributes":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/object/attributes","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ObjectReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"},"ConsistencyLevel":{"location":"header","locationName":"x-amz-consistency-level"},"FacetFilter":{"shape":"S3"}}},"output":{"type":"structure","members":{"Attributes":{"shape":"S5"},"NextToken":{}}}},"ListObjectChildren":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/object/children","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ObjectReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"},"ConsistencyLevel":{"location":"header","locationName":"x-amz-consistency-level"}}},"output":{"type":"structure","members":{"Children":{"shape":"S1w"},"NextToken":{}}}},"ListObjectParentPaths":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/object/parentpaths","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ObjectReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"PathToObjectIdentifiersList":{"shape":"S24"},"NextToken":{}}}},"ListObjectParents":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/object/parent","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ObjectReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"},"ConsistencyLevel":{"location":"header","locationName":"x-amz-consistency-level"},"IncludeAllLinksToEachParent":{"type":"boolean"}}},"output":{"type":"structure","members":{"Parents":{"type":"map","key":{},"value":{}},"NextToken":{},"ParentLinks":{"shape":"S2m"}}}},"ListObjectPolicies":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/object/policy","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ObjectReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"},"ConsistencyLevel":{"location":"header","locationName":"x-amz-consistency-level"}}},"output":{"type":"structure","members":{"AttachedPolicyIds":{"shape":"S27"},"NextToken":{}}}},"ListOutgoingTypedLinks":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/typedlink/outgoing","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ObjectReference":{"shape":"Sf"},"FilterAttributeRanges":{"shape":"S1l"},"FilterTypedLink":{"shape":"St"},"NextToken":{},"MaxResults":{"type":"integer"},"ConsistencyLevel":{}}},"output":{"type":"structure","members":{"TypedLinkSpecifiers":{"shape":"S2i"},"NextToken":{}}}},"ListPolicyAttachments":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/policy/attachment","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","PolicyReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"PolicyReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"},"ConsistencyLevel":{"location":"header","locationName":"x-amz-consistency-level"}}},"output":{"type":"structure","members":{"ObjectIdentifiers":{"shape":"S27"},"NextToken":{}}}},"ListPublishedSchemaArns":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/schema/published","responseCode":200},"input":{"type":"structure","members":{"SchemaArn":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"SchemaArns":{"shape":"S66"},"NextToken":{}}}},"ListTagsForResource":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/tags","responseCode":200},"input":{"type":"structure","required":["ResourceArn"],"members":{"ResourceArn":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Tags":{"shape":"S79"},"NextToken":{}}}},"ListTypedLinkFacetAttributes":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/typedlink/facet/attributes","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Name"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Name":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Attributes":{"shape":"S4v"},"NextToken":{}}}},"ListTypedLinkFacetNames":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/typedlink/facet/list","responseCode":200},"input":{"type":"structure","required":["SchemaArn"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"FacetNames":{"type":"list","member":{}},"NextToken":{}}}},"LookupPolicy":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/policy/lookup","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ObjectReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"PolicyToPathList":{"shape":"S2b"},"NextToken":{}}}},"PublishSchema":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/schema/publish","responseCode":200},"input":{"type":"structure","required":["DevelopmentSchemaArn","Version"],"members":{"DevelopmentSchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Version":{},"MinorVersion":{},"Name":{}}},"output":{"type":"structure","members":{"PublishedSchemaArn":{}}}},"PutSchemaFromJson":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/schema/json","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Document"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Document":{}}},"output":{"type":"structure","members":{"Arn":{}}}},"RemoveFacetFromObject":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/object/facets/delete","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","SchemaFacet","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"SchemaFacet":{"shape":"S3"},"ObjectReference":{"shape":"Sf"}}},"output":{"type":"structure","members":{}}},"TagResource":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/tags/add","responseCode":200},"input":{"type":"structure","required":["ResourceArn","Tags"],"members":{"ResourceArn":{},"Tags":{"shape":"S79"}}},"output":{"type":"structure","members":{}}},"UntagResource":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/tags/remove","responseCode":200},"input":{"type":"structure","required":["ResourceArn","TagKeys"],"members":{"ResourceArn":{},"TagKeys":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"UpdateFacet":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/facet","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Name"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Name":{},"AttributeUpdates":{"type":"list","member":{"type":"structure","members":{"Attribute":{"shape":"S47"},"Action":{}}}},"ObjectType":{}}},"output":{"type":"structure","members":{}}},"UpdateLinkAttributes":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/typedlink/attributes/update","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","TypedLinkSpecifier","AttributeUpdates"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"TypedLinkSpecifier":{"shape":"Sy"},"AttributeUpdates":{"shape":"S3g"}}},"output":{"type":"structure","members":{}}},"UpdateObjectAttributes":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/object/update","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ObjectReference","AttributeUpdates"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ObjectReference":{"shape":"Sf"},"AttributeUpdates":{"shape":"S2z"}}},"output":{"type":"structure","members":{"ObjectIdentifier":{}}}},"UpdateSchema":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/schema/update","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Name"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Name":{}}},"output":{"type":"structure","members":{"SchemaArn":{}}}},"UpdateTypedLinkFacet":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/typedlink/facet","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Name","AttributeUpdates","IdentityAttributeOrder"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Name":{},"AttributeUpdates":{"type":"list","member":{"type":"structure","required":["Attribute","Action"],"members":{"Attribute":{"shape":"S4w"},"Action":{}}}},"IdentityAttributeOrder":{"shape":"S1a"}}},"output":{"type":"structure","members":{}}},"UpgradeAppliedSchema":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/schema/upgradeapplied","responseCode":200},"input":{"type":"structure","required":["PublishedSchemaArn","DirectoryArn"],"members":{"PublishedSchemaArn":{},"DirectoryArn":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"UpgradedSchemaArn":{},"DirectoryArn":{}}}},"UpgradePublishedSchema":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/schema/upgradepublished","responseCode":200},"input":{"type":"structure","required":["DevelopmentSchemaArn","PublishedSchemaArn","MinorVersion"],"members":{"DevelopmentSchemaArn":{},"PublishedSchemaArn":{},"MinorVersion":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"UpgradedSchemaArn":{}}}}},"shapes":{"S3":{"type":"structure","members":{"SchemaArn":{},"FacetName":{}}},"S5":{"type":"list","member":{"type":"structure","required":["Key","Value"],"members":{"Key":{"shape":"S7"},"Value":{"shape":"S9"}}}},"S7":{"type":"structure","required":["SchemaArn","FacetName","Name"],"members":{"SchemaArn":{},"FacetName":{},"Name":{}}},"S9":{"type":"structure","members":{"StringValue":{},"BinaryValue":{"type":"blob"},"BooleanValue":{"type":"boolean"},"NumberValue":{},"DatetimeValue":{"type":"timestamp"}}},"Sf":{"type":"structure","members":{"Selector":{}}},"St":{"type":"structure","required":["SchemaArn","TypedLinkName"],"members":{"SchemaArn":{},"TypedLinkName":{}}},"Sv":{"type":"list","member":{"type":"structure","required":["AttributeName","Value"],"members":{"AttributeName":{},"Value":{"shape":"S9"}}}},"Sy":{"type":"structure","required":["TypedLinkFacet","SourceObjectReference","TargetObjectReference","IdentityAttributeValues"],"members":{"TypedLinkFacet":{"shape":"St"},"SourceObjectReference":{"shape":"Sf"},"TargetObjectReference":{"shape":"Sf"},"IdentityAttributeValues":{"shape":"Sv"}}},"S1a":{"type":"list","member":{}},"S1g":{"type":"list","member":{"type":"structure","members":{"AttributeKey":{"shape":"S7"},"Range":{"shape":"S1i"}}}},"S1i":{"type":"structure","required":["StartMode","EndMode"],"members":{"StartMode":{},"StartValue":{"shape":"S9"},"EndMode":{},"EndValue":{"shape":"S9"}}},"S1l":{"type":"list","member":{"type":"structure","required":["Range"],"members":{"AttributeName":{},"Range":{"shape":"S1i"}}}},"S1w":{"type":"map","key":{},"value":{}},"S1y":{"type":"list","member":{"shape":"S3"}},"S21":{"type":"list","member":{"type":"structure","members":{"IndexedAttributes":{"shape":"S5"},"ObjectIdentifier":{}}}},"S24":{"type":"list","member":{"type":"structure","members":{"Path":{},"ObjectIdentifiers":{"shape":"S27"}}}},"S27":{"type":"list","member":{}},"S2b":{"type":"list","member":{"type":"structure","members":{"Path":{},"Policies":{"type":"list","member":{"type":"structure","members":{"PolicyId":{},"ObjectIdentifier":{},"PolicyType":{}}}}}}},"S2i":{"type":"list","member":{"shape":"Sy"}},"S2m":{"type":"list","member":{"type":"structure","members":{"ObjectIdentifier":{},"LinkName":{}}}},"S2z":{"type":"list","member":{"type":"structure","members":{"ObjectAttributeKey":{"shape":"S7"},"ObjectAttributeAction":{"type":"structure","members":{"ObjectAttributeActionType":{},"ObjectAttributeUpdateValue":{"shape":"S9"}}}}}},"S39":{"type":"list","member":{"shape":"S7"}},"S3g":{"type":"list","member":{"type":"structure","members":{"AttributeKey":{"shape":"S7"},"AttributeAction":{"type":"structure","members":{"AttributeActionType":{},"AttributeUpdateValue":{"shape":"S9"}}}}}},"S46":{"type":"list","member":{"shape":"S47"}},"S47":{"type":"structure","required":["Name"],"members":{"Name":{},"AttributeDefinition":{"type":"structure","required":["Type"],"members":{"Type":{},"DefaultValue":{"shape":"S9"},"IsImmutable":{"type":"boolean"},"Rules":{"shape":"S4a"}}},"AttributeReference":{"type":"structure","required":["TargetFacetName","TargetAttributeName"],"members":{"TargetFacetName":{},"TargetAttributeName":{}}},"RequiredBehavior":{}}},"S4a":{"type":"map","key":{},"value":{"type":"structure","members":{"Type":{},"Parameters":{"type":"map","key":{},"value":{}}}}},"S4v":{"type":"list","member":{"shape":"S4w"}},"S4w":{"type":"structure","required":["Name","Type","RequiredBehavior"],"members":{"Name":{},"Type":{},"DefaultValue":{"shape":"S9"},"IsImmutable":{"type":"boolean"},"Rules":{"shape":"S4a"},"RequiredBehavior":{}}},"S5n":{"type":"structure","members":{"Name":{},"DirectoryArn":{},"State":{},"CreationDateTime":{"type":"timestamp"}}},"S66":{"type":"list","member":{}},"S79":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{}}}}}}

/***/ }),
/* 78 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"ListAppliedSchemaArns":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListAttachedIndices":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListDevelopmentSchemaArns":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListDirectories":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListFacetAttributes":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListFacetNames":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListIndex":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListManagedSchemaArns":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListObjectAttributes":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListObjectChildren":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListObjectParentPaths":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListObjectParents":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListObjectPolicies":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListPolicyAttachments":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListPublishedSchemaArns":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListTagsForResource":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListTypedLinkFacetAttributes":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListTypedLinkFacetNames":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"LookupPolicy":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"}}}

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['cloudformation'] = {};
	AWS.CloudFormation = Service.defineService('cloudformation', ['2010-05-15']);
	Object.defineProperty(apiLoader.services['cloudformation'], '2010-05-15', {
	  get: function get() {
	    var model = __webpack_require__(80);
	    model.paginators = __webpack_require__(81).pagination;
	    model.waiters = __webpack_require__(82).waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.CloudFormation;


/***/ }),
/* 80 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2010-05-15","endpointPrefix":"cloudformation","protocol":"query","serviceFullName":"AWS CloudFormation","serviceId":"CloudFormation","signatureVersion":"v4","uid":"cloudformation-2010-05-15","xmlNamespace":"http://cloudformation.amazonaws.com/doc/2010-05-15/"},"operations":{"ActivateType":{"input":{"type":"structure","members":{"Type":{},"PublicTypeArn":{},"PublisherId":{},"TypeName":{},"TypeNameAlias":{},"AutoUpdate":{"type":"boolean"},"LoggingConfig":{"shape":"S7"},"ExecutionRoleArn":{},"VersionBump":{},"MajorVersion":{"type":"long"}}},"output":{"resultWrapper":"ActivateTypeResult","type":"structure","members":{"Arn":{}}},"idempotent":true},"BatchDescribeTypeConfigurations":{"input":{"type":"structure","required":["TypeConfigurationIdentifiers"],"members":{"TypeConfigurationIdentifiers":{"type":"list","member":{"shape":"Sg"}}}},"output":{"resultWrapper":"BatchDescribeTypeConfigurationsResult","type":"structure","members":{"Errors":{"type":"list","member":{"type":"structure","members":{"ErrorCode":{},"ErrorMessage":{},"TypeConfigurationIdentifier":{"shape":"Sg"}}}},"UnprocessedTypeConfigurations":{"type":"list","member":{"shape":"Sg"}},"TypeConfigurations":{"type":"list","member":{"type":"structure","members":{"Arn":{},"Alias":{},"Configuration":{},"LastUpdated":{"type":"timestamp"},"TypeArn":{},"TypeName":{},"IsDefaultConfiguration":{"type":"boolean"}}}}}}},"CancelUpdateStack":{"input":{"type":"structure","required":["StackName"],"members":{"StackName":{},"ClientRequestToken":{}}}},"ContinueUpdateRollback":{"input":{"type":"structure","required":["StackName"],"members":{"StackName":{},"RoleARN":{},"ResourcesToSkip":{"type":"list","member":{}},"ClientRequestToken":{}}},"output":{"resultWrapper":"ContinueUpdateRollbackResult","type":"structure","members":{}}},"CreateChangeSet":{"input":{"type":"structure","required":["StackName","ChangeSetName"],"members":{"StackName":{},"TemplateBody":{},"TemplateURL":{},"UsePreviousTemplate":{"type":"boolean"},"Parameters":{"shape":"S18"},"Capabilities":{"shape":"S1d"},"ResourceTypes":{"shape":"S1f"},"RoleARN":{},"RollbackConfiguration":{"shape":"S1h"},"NotificationARNs":{"shape":"S1n"},"Tags":{"shape":"S1p"},"ChangeSetName":{},"ClientToken":{},"Description":{},"ChangeSetType":{},"ResourcesToImport":{"type":"list","member":{"type":"structure","required":["ResourceType","LogicalResourceId","ResourceIdentifier"],"members":{"ResourceType":{},"LogicalResourceId":{},"ResourceIdentifier":{"type":"map","key":{},"value":{}}}}},"IncludeNestedStacks":{"type":"boolean"}}},"output":{"resultWrapper":"CreateChangeSetResult","type":"structure","members":{"Id":{},"StackId":{}}}},"CreateStack":{"input":{"type":"structure","required":["StackName"],"members":{"StackName":{},"TemplateBody":{},"TemplateURL":{},"Parameters":{"shape":"S18"},"DisableRollback":{"type":"boolean"},"RollbackConfiguration":{"shape":"S1h"},"TimeoutInMinutes":{"type":"integer"},"NotificationARNs":{"shape":"S1n"},"Capabilities":{"shape":"S1d"},"ResourceTypes":{"shape":"S1f"},"RoleARN":{},"OnFailure":{},"StackPolicyBody":{},"StackPolicyURL":{},"Tags":{"shape":"S1p"},"ClientRequestToken":{},"EnableTerminationProtection":{"type":"boolean"}}},"output":{"resultWrapper":"CreateStackResult","type":"structure","members":{"StackId":{}}}},"CreateStackInstances":{"input":{"type":"structure","required":["StackSetName","Regions"],"members":{"StackSetName":{},"Accounts":{"shape":"S2h"},"DeploymentTargets":{"shape":"S2j"},"Regions":{"shape":"S2n"},"ParameterOverrides":{"shape":"S18"},"OperationPreferences":{"shape":"S2p"},"OperationId":{"idempotencyToken":true},"CallAs":{}}},"output":{"resultWrapper":"CreateStackInstancesResult","type":"structure","members":{"OperationId":{}}}},"CreateStackSet":{"input":{"type":"structure","required":["StackSetName"],"members":{"StackSetName":{},"Description":{},"TemplateBody":{},"TemplateURL":{},"Parameters":{"shape":"S18"},"Capabilities":{"shape":"S1d"},"Tags":{"shape":"S1p"},"AdministrationRoleARN":{},"ExecutionRoleName":{},"PermissionModel":{},"AutoDeployment":{"shape":"S30"},"CallAs":{},"ClientRequestToken":{"idempotencyToken":true}}},"output":{"resultWrapper":"CreateStackSetResult","type":"structure","members":{"StackSetId":{}}}},"DeactivateType":{"input":{"type":"structure","members":{"TypeName":{},"Type":{},"Arn":{}}},"output":{"resultWrapper":"DeactivateTypeResult","type":"structure","members":{}},"idempotent":true},"DeleteChangeSet":{"input":{"type":"structure","required":["ChangeSetName"],"members":{"ChangeSetName":{},"StackName":{}}},"output":{"resultWrapper":"DeleteChangeSetResult","type":"structure","members":{}}},"DeleteStack":{"input":{"type":"structure","required":["StackName"],"members":{"StackName":{},"RetainResources":{"type":"list","member":{}},"RoleARN":{},"ClientRequestToken":{}}}},"DeleteStackInstances":{"input":{"type":"structure","required":["StackSetName","Regions","RetainStacks"],"members":{"StackSetName":{},"Accounts":{"shape":"S2h"},"DeploymentTargets":{"shape":"S2j"},"Regions":{"shape":"S2n"},"OperationPreferences":{"shape":"S2p"},"RetainStacks":{"type":"boolean"},"OperationId":{"idempotencyToken":true},"CallAs":{}}},"output":{"resultWrapper":"DeleteStackInstancesResult","type":"structure","members":{"OperationId":{}}}},"DeleteStackSet":{"input":{"type":"structure","required":["StackSetName"],"members":{"StackSetName":{},"CallAs":{}}},"output":{"resultWrapper":"DeleteStackSetResult","type":"structure","members":{}}},"DeregisterType":{"input":{"type":"structure","members":{"Arn":{},"Type":{},"TypeName":{},"VersionId":{}}},"output":{"resultWrapper":"DeregisterTypeResult","type":"structure","members":{}},"idempotent":true},"DescribeAccountLimits":{"input":{"type":"structure","members":{"NextToken":{}}},"output":{"resultWrapper":"DescribeAccountLimitsResult","type":"structure","members":{"AccountLimits":{"type":"list","member":{"type":"structure","members":{"Name":{},"Value":{"type":"integer"}}}},"NextToken":{}}}},"DescribeChangeSet":{"input":{"type":"structure","required":["ChangeSetName"],"members":{"ChangeSetName":{},"StackName":{},"NextToken":{}}},"output":{"resultWrapper":"DescribeChangeSetResult","type":"structure","members":{"ChangeSetName":{},"ChangeSetId":{},"StackId":{},"StackName":{},"Description":{},"Parameters":{"shape":"S18"},"CreationTime":{"type":"timestamp"},"ExecutionStatus":{},"Status":{},"StatusReason":{},"NotificationARNs":{"shape":"S1n"},"RollbackConfiguration":{"shape":"S1h"},"Capabilities":{"shape":"S1d"},"Tags":{"shape":"S1p"},"Changes":{"type":"list","member":{"type":"structure","members":{"Type":{},"ResourceChange":{"type":"structure","members":{"Action":{},"LogicalResourceId":{},"PhysicalResourceId":{},"ResourceType":{},"Replacement":{},"Scope":{"type":"list","member":{}},"Details":{"type":"list","member":{"type":"structure","members":{"Target":{"type":"structure","members":{"Attribute":{},"Name":{},"RequiresRecreation":{}}},"Evaluation":{},"ChangeSource":{},"CausingEntity":{}}}},"ChangeSetId":{},"ModuleInfo":{"shape":"S4f"}}}}}},"NextToken":{},"IncludeNestedStacks":{"type":"boolean"},"ParentChangeSetId":{},"RootChangeSetId":{}}}},"DescribePublisher":{"input":{"type":"structure","members":{"PublisherId":{}}},"output":{"resultWrapper":"DescribePublisherResult","type":"structure","members":{"PublisherId":{},"PublisherStatus":{},"IdentityProvider":{},"PublisherProfile":{}}},"idempotent":true},"DescribeStackDriftDetectionStatus":{"input":{"type":"structure","required":["StackDriftDetectionId"],"members":{"StackDriftDetectionId":{}}},"output":{"resultWrapper":"DescribeStackDriftDetectionStatusResult","type":"structure","required":["StackId","StackDriftDetectionId","DetectionStatus","Timestamp"],"members":{"StackId":{},"StackDriftDetectionId":{},"StackDriftStatus":{},"DetectionStatus":{},"DetectionStatusReason":{},"DriftedStackResourceCount":{"type":"integer"},"Timestamp":{"type":"timestamp"}}}},"DescribeStackEvents":{"input":{"type":"structure","members":{"StackName":{},"NextToken":{}}},"output":{"resultWrapper":"DescribeStackEventsResult","type":"structure","members":{"StackEvents":{"type":"list","member":{"type":"structure","required":["StackId","EventId","StackName","Timestamp"],"members":{"StackId":{},"EventId":{},"StackName":{},"LogicalResourceId":{},"PhysicalResourceId":{},"ResourceType":{},"Timestamp":{"type":"timestamp"},"ResourceStatus":{},"ResourceStatusReason":{},"ResourceProperties":{},"ClientRequestToken":{}}}},"NextToken":{}}}},"DescribeStackInstance":{"input":{"type":"structure","required":["StackSetName","StackInstanceAccount","StackInstanceRegion"],"members":{"StackSetName":{},"StackInstanceAccount":{},"StackInstanceRegion":{},"CallAs":{}}},"output":{"resultWrapper":"DescribeStackInstanceResult","type":"structure","members":{"StackInstance":{"type":"structure","members":{"StackSetId":{},"Region":{},"Account":{},"StackId":{},"ParameterOverrides":{"shape":"S18"},"Status":{},"StackInstanceStatus":{"shape":"S56"},"StatusReason":{},"OrganizationalUnitId":{},"DriftStatus":{},"LastDriftCheckTimestamp":{"type":"timestamp"}}}}}},"DescribeStackResource":{"input":{"type":"structure","required":["StackName","LogicalResourceId"],"members":{"StackName":{},"LogicalResourceId":{}}},"output":{"resultWrapper":"DescribeStackResourceResult","type":"structure","members":{"StackResourceDetail":{"type":"structure","required":["LogicalResourceId","ResourceType","LastUpdatedTimestamp","ResourceStatus"],"members":{"StackName":{},"StackId":{},"LogicalResourceId":{},"PhysicalResourceId":{},"ResourceType":{},"LastUpdatedTimestamp":{"type":"timestamp"},"ResourceStatus":{},"ResourceStatusReason":{},"Description":{},"Metadata":{},"DriftInformation":{"shape":"S5d"},"ModuleInfo":{"shape":"S4f"}}}}}},"DescribeStackResourceDrifts":{"input":{"type":"structure","required":["StackName"],"members":{"StackName":{},"StackResourceDriftStatusFilters":{"type":"list","member":{}},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"resultWrapper":"DescribeStackResourceDriftsResult","type":"structure","required":["StackResourceDrifts"],"members":{"StackResourceDrifts":{"type":"list","member":{"shape":"S5k"}},"NextToken":{}}}},"DescribeStackResources":{"input":{"type":"structure","members":{"StackName":{},"LogicalResourceId":{},"PhysicalResourceId":{}}},"output":{"resultWrapper":"DescribeStackResourcesResult","type":"structure","members":{"StackResources":{"type":"list","member":{"type":"structure","required":["LogicalResourceId","ResourceType","Timestamp","ResourceStatus"],"members":{"StackName":{},"StackId":{},"LogicalResourceId":{},"PhysicalResourceId":{},"ResourceType":{},"Timestamp":{"type":"timestamp"},"ResourceStatus":{},"ResourceStatusReason":{},"Description":{},"DriftInformation":{"shape":"S5d"},"ModuleInfo":{"shape":"S4f"}}}}}}},"DescribeStackSet":{"input":{"type":"structure","required":["StackSetName"],"members":{"StackSetName":{},"CallAs":{}}},"output":{"resultWrapper":"DescribeStackSetResult","type":"structure","members":{"StackSet":{"type":"structure","members":{"StackSetName":{},"StackSetId":{},"Description":{},"Status":{},"TemplateBody":{},"Parameters":{"shape":"S18"},"Capabilities":{"shape":"S1d"},"Tags":{"shape":"S1p"},"StackSetARN":{},"AdministrationRoleARN":{},"ExecutionRoleName":{},"StackSetDriftDetectionDetails":{"shape":"S64"},"AutoDeployment":{"shape":"S30"},"PermissionModel":{},"OrganizationalUnitIds":{"shape":"S2l"}}}}}},"DescribeStackSetOperation":{"input":{"type":"structure","required":["StackSetName","OperationId"],"members":{"StackSetName":{},"OperationId":{},"CallAs":{}}},"output":{"resultWrapper":"DescribeStackSetOperationResult","type":"structure","members":{"StackSetOperation":{"type":"structure","members":{"OperationId":{},"StackSetId":{},"Action":{},"Status":{},"OperationPreferences":{"shape":"S2p"},"RetainStacks":{"type":"boolean"},"AdministrationRoleARN":{},"ExecutionRoleName":{},"CreationTimestamp":{"type":"timestamp"},"EndTimestamp":{"type":"timestamp"},"DeploymentTargets":{"shape":"S2j"},"StackSetDriftDetectionDetails":{"shape":"S64"}}}}}},"DescribeStacks":{"input":{"type":"structure","members":{"StackName":{},"NextToken":{}}},"output":{"resultWrapper":"DescribeStacksResult","type":"structure","members":{"Stacks":{"type":"list","member":{"type":"structure","required":["StackName","CreationTime","StackStatus"],"members":{"StackId":{},"StackName":{},"ChangeSetId":{},"Description":{},"Parameters":{"shape":"S18"},"CreationTime":{"type":"timestamp"},"DeletionTime":{"type":"timestamp"},"LastUpdatedTime":{"type":"timestamp"},"RollbackConfiguration":{"shape":"S1h"},"StackStatus":{},"StackStatusReason":{},"DisableRollback":{"type":"boolean"},"NotificationARNs":{"shape":"S1n"},"TimeoutInMinutes":{"type":"integer"},"Capabilities":{"shape":"S1d"},"Outputs":{"type":"list","member":{"type":"structure","members":{"OutputKey":{},"OutputValue":{},"Description":{},"ExportName":{}}}},"RoleARN":{},"Tags":{"shape":"S1p"},"EnableTerminationProtection":{"type":"boolean"},"ParentId":{},"RootId":{},"DriftInformation":{"type":"structure","required":["StackDriftStatus"],"members":{"StackDriftStatus":{},"LastCheckTimestamp":{"type":"timestamp"}}}}}},"NextToken":{}}}},"DescribeType":{"input":{"type":"structure","members":{"Type":{},"TypeName":{},"Arn":{},"VersionId":{},"PublisherId":{},"PublicVersionNumber":{}}},"output":{"resultWrapper":"DescribeTypeResult","type":"structure","members":{"Arn":{},"Type":{},"TypeName":{},"DefaultVersionId":{},"IsDefaultVersion":{"type":"boolean"},"TypeTestsStatus":{},"TypeTestsStatusDescription":{},"Description":{},"Schema":{},"ProvisioningType":{},"DeprecatedStatus":{},"LoggingConfig":{"shape":"S7"},"RequiredActivatedTypes":{"type":"list","member":{"type":"structure","members":{"TypeNameAlias":{},"OriginalTypeName":{},"PublisherId":{},"SupportedMajorVersions":{"type":"list","member":{"type":"integer"}}}}},"ExecutionRoleArn":{},"Visibility":{},"SourceUrl":{},"DocumentationUrl":{},"LastUpdated":{"type":"timestamp"},"TimeCreated":{"type":"timestamp"},"ConfigurationSchema":{},"PublisherId":{},"OriginalTypeName":{},"OriginalTypeArn":{},"PublicVersionNumber":{},"LatestPublicVersion":{},"IsActivated":{"type":"boolean"},"AutoUpdate":{"type":"boolean"}}},"idempotent":true},"DescribeTypeRegistration":{"input":{"type":"structure","required":["RegistrationToken"],"members":{"RegistrationToken":{}}},"output":{"resultWrapper":"DescribeTypeRegistrationResult","type":"structure","members":{"ProgressStatus":{},"Description":{},"TypeArn":{},"TypeVersionArn":{}}},"idempotent":true},"DetectStackDrift":{"input":{"type":"structure","required":["StackName"],"members":{"StackName":{},"LogicalResourceIds":{"shape":"S7i"}}},"output":{"resultWrapper":"DetectStackDriftResult","type":"structure","required":["StackDriftDetectionId"],"members":{"StackDriftDetectionId":{}}}},"DetectStackResourceDrift":{"input":{"type":"structure","required":["StackName","LogicalResourceId"],"members":{"StackName":{},"LogicalResourceId":{}}},"output":{"resultWrapper":"DetectStackResourceDriftResult","type":"structure","required":["StackResourceDrift"],"members":{"StackResourceDrift":{"shape":"S5k"}}}},"DetectStackSetDrift":{"input":{"type":"structure","required":["StackSetName"],"members":{"StackSetName":{},"OperationPreferences":{"shape":"S2p"},"OperationId":{"idempotencyToken":true},"CallAs":{}}},"output":{"resultWrapper":"DetectStackSetDriftResult","type":"structure","members":{"OperationId":{}}}},"EstimateTemplateCost":{"input":{"type":"structure","members":{"TemplateBody":{},"TemplateURL":{},"Parameters":{"shape":"S18"}}},"output":{"resultWrapper":"EstimateTemplateCostResult","type":"structure","members":{"Url":{}}}},"ExecuteChangeSet":{"input":{"type":"structure","required":["ChangeSetName"],"members":{"ChangeSetName":{},"StackName":{},"ClientRequestToken":{}}},"output":{"resultWrapper":"ExecuteChangeSetResult","type":"structure","members":{}}},"GetStackPolicy":{"input":{"type":"structure","required":["StackName"],"members":{"StackName":{}}},"output":{"resultWrapper":"GetStackPolicyResult","type":"structure","members":{"StackPolicyBody":{}}}},"GetTemplate":{"input":{"type":"structure","members":{"StackName":{},"ChangeSetName":{},"TemplateStage":{}}},"output":{"resultWrapper":"GetTemplateResult","type":"structure","members":{"TemplateBody":{},"StagesAvailable":{"type":"list","member":{}}}}},"GetTemplateSummary":{"input":{"type":"structure","members":{"TemplateBody":{},"TemplateURL":{},"StackName":{},"StackSetName":{},"CallAs":{}}},"output":{"resultWrapper":"GetTemplateSummaryResult","type":"structure","members":{"Parameters":{"type":"list","member":{"type":"structure","members":{"ParameterKey":{},"DefaultValue":{},"ParameterType":{},"NoEcho":{"type":"boolean"},"Description":{},"ParameterConstraints":{"type":"structure","members":{"AllowedValues":{"type":"list","member":{}}}}}}},"Description":{},"Capabilities":{"shape":"S1d"},"CapabilitiesReason":{},"ResourceTypes":{"shape":"S1f"},"Version":{},"Metadata":{},"DeclaredTransforms":{"shape":"S8b"},"ResourceIdentifierSummaries":{"type":"list","member":{"type":"structure","members":{"ResourceType":{},"LogicalResourceIds":{"shape":"S7i"},"ResourceIdentifiers":{"type":"list","member":{}}}}}}}},"ListChangeSets":{"input":{"type":"structure","required":["StackName"],"members":{"StackName":{},"NextToken":{}}},"output":{"resultWrapper":"ListChangeSetsResult","type":"structure","members":{"Summaries":{"type":"list","member":{"type":"structure","members":{"StackId":{},"StackName":{},"ChangeSetId":{},"ChangeSetName":{},"ExecutionStatus":{},"Status":{},"StatusReason":{},"CreationTime":{"type":"timestamp"},"Description":{},"IncludeNestedStacks":{"type":"boolean"},"ParentChangeSetId":{},"RootChangeSetId":{}}}},"NextToken":{}}}},"ListExports":{"input":{"type":"structure","members":{"NextToken":{}}},"output":{"resultWrapper":"ListExportsResult","type":"structure","members":{"Exports":{"type":"list","member":{"type":"structure","members":{"ExportingStackId":{},"Name":{},"Value":{}}}},"NextToken":{}}}},"ListImports":{"input":{"type":"structure","required":["ExportName"],"members":{"ExportName":{},"NextToken":{}}},"output":{"resultWrapper":"ListImportsResult","type":"structure","members":{"Imports":{"type":"list","member":{}},"NextToken":{}}}},"ListStackInstances":{"input":{"type":"structure","required":["StackSetName"],"members":{"StackSetName":{},"NextToken":{},"MaxResults":{"type":"integer"},"Filters":{"type":"list","member":{"type":"structure","members":{"Name":{},"Values":{}}}},"StackInstanceAccount":{},"StackInstanceRegion":{},"CallAs":{}}},"output":{"resultWrapper":"ListStackInstancesResult","type":"structure","members":{"Summaries":{"type":"list","member":{"type":"structure","members":{"StackSetId":{},"Region":{},"Account":{},"StackId":{},"Status":{},"StatusReason":{},"StackInstanceStatus":{"shape":"S56"},"OrganizationalUnitId":{},"DriftStatus":{},"LastDriftCheckTimestamp":{"type":"timestamp"}}}},"NextToken":{}}}},"ListStackResources":{"input":{"type":"structure","required":["StackName"],"members":{"StackName":{},"NextToken":{}}},"output":{"resultWrapper":"ListStackResourcesResult","type":"structure","members":{"StackResourceSummaries":{"type":"list","member":{"type":"structure","required":["LogicalResourceId","ResourceType","LastUpdatedTimestamp","ResourceStatus"],"members":{"LogicalResourceId":{},"PhysicalResourceId":{},"ResourceType":{},"LastUpdatedTimestamp":{"type":"timestamp"},"ResourceStatus":{},"ResourceStatusReason":{},"DriftInformation":{"type":"structure","required":["StackResourceDriftStatus"],"members":{"StackResourceDriftStatus":{},"LastCheckTimestamp":{"type":"timestamp"}}},"ModuleInfo":{"shape":"S4f"}}}},"NextToken":{}}}},"ListStackSetOperationResults":{"input":{"type":"structure","required":["StackSetName","OperationId"],"members":{"StackSetName":{},"OperationId":{},"NextToken":{},"MaxResults":{"type":"integer"},"CallAs":{}}},"output":{"resultWrapper":"ListStackSetOperationResultsResult","type":"structure","members":{"Summaries":{"type":"list","member":{"type":"structure","members":{"Account":{},"Region":{},"Status":{},"StatusReason":{},"AccountGateResult":{"type":"structure","members":{"Status":{},"StatusReason":{}}},"OrganizationalUnitId":{}}}},"NextToken":{}}}},"ListStackSetOperations":{"input":{"type":"structure","required":["StackSetName"],"members":{"StackSetName":{},"NextToken":{},"MaxResults":{"type":"integer"},"CallAs":{}}},"output":{"resultWrapper":"ListStackSetOperationsResult","type":"structure","members":{"Summaries":{"type":"list","member":{"type":"structure","members":{"OperationId":{},"Action":{},"Status":{},"CreationTimestamp":{"type":"timestamp"},"EndTimestamp":{"type":"timestamp"}}}},"NextToken":{}}}},"ListStackSets":{"input":{"type":"structure","members":{"NextToken":{},"MaxResults":{"type":"integer"},"Status":{},"CallAs":{}}},"output":{"resultWrapper":"ListStackSetsResult","type":"structure","members":{"Summaries":{"type":"list","member":{"type":"structure","members":{"StackSetName":{},"StackSetId":{},"Description":{},"Status":{},"AutoDeployment":{"shape":"S30"},"PermissionModel":{},"DriftStatus":{},"LastDriftCheckTimestamp":{"type":"timestamp"}}}},"NextToken":{}}}},"ListStacks":{"input":{"type":"structure","members":{"NextToken":{},"StackStatusFilter":{"type":"list","member":{}}}},"output":{"resultWrapper":"ListStacksResult","type":"structure","members":{"StackSummaries":{"type":"list","member":{"type":"structure","required":["StackName","CreationTime","StackStatus"],"members":{"StackId":{},"StackName":{},"TemplateDescription":{},"CreationTime":{"type":"timestamp"},"LastUpdatedTime":{"type":"timestamp"},"DeletionTime":{"type":"timestamp"},"StackStatus":{},"StackStatusReason":{},"ParentId":{},"RootId":{},"DriftInformation":{"type":"structure","required":["StackDriftStatus"],"members":{"StackDriftStatus":{},"LastCheckTimestamp":{"type":"timestamp"}}}}}},"NextToken":{}}}},"ListTypeRegistrations":{"input":{"type":"structure","members":{"Type":{},"TypeName":{},"TypeArn":{},"RegistrationStatusFilter":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"resultWrapper":"ListTypeRegistrationsResult","type":"structure","members":{"RegistrationTokenList":{"type":"list","member":{}},"NextToken":{}}},"idempotent":true},"ListTypeVersions":{"input":{"type":"structure","members":{"Type":{},"TypeName":{},"Arn":{},"MaxResults":{"type":"integer"},"NextToken":{},"DeprecatedStatus":{},"PublisherId":{}}},"output":{"resultWrapper":"ListTypeVersionsResult","type":"structure","members":{"TypeVersionSummaries":{"type":"list","member":{"type":"structure","members":{"Type":{},"TypeName":{},"VersionId":{},"IsDefaultVersion":{"type":"boolean"},"Arn":{},"TimeCreated":{"type":"timestamp"},"Description":{},"PublicVersionNumber":{}}}},"NextToken":{}}},"idempotent":true},"ListTypes":{"input":{"type":"structure","members":{"Visibility":{},"ProvisioningType":{},"DeprecatedStatus":{},"Type":{},"Filters":{"type":"structure","members":{"Category":{},"PublisherId":{},"TypeNamePrefix":{}}},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"resultWrapper":"ListTypesResult","type":"structure","members":{"TypeSummaries":{"type":"list","member":{"type":"structure","members":{"Type":{},"TypeName":{},"DefaultVersionId":{},"TypeArn":{},"LastUpdated":{"type":"timestamp"},"Description":{},"PublisherId":{},"OriginalTypeName":{},"PublicVersionNumber":{},"LatestPublicVersion":{},"PublisherIdentity":{},"PublisherName":{},"IsActivated":{"type":"boolean"}}}},"NextToken":{}}},"idempotent":true},"PublishType":{"input":{"type":"structure","members":{"Type":{},"Arn":{},"TypeName":{},"PublicVersionNumber":{}}},"output":{"resultWrapper":"PublishTypeResult","type":"structure","members":{"PublicTypeArn":{}}},"idempotent":true},"RecordHandlerProgress":{"input":{"type":"structure","required":["BearerToken","OperationStatus"],"members":{"BearerToken":{},"OperationStatus":{},"CurrentOperationStatus":{},"StatusMessage":{},"ErrorCode":{},"ResourceModel":{},"ClientRequestToken":{}}},"output":{"resultWrapper":"RecordHandlerProgressResult","type":"structure","members":{}},"idempotent":true},"RegisterPublisher":{"input":{"type":"structure","members":{"AcceptTermsAndConditions":{"type":"boolean"},"ConnectionArn":{}}},"output":{"resultWrapper":"RegisterPublisherResult","type":"structure","members":{"PublisherId":{}}},"idempotent":true},"RegisterType":{"input":{"type":"structure","required":["TypeName","SchemaHandlerPackage"],"members":{"Type":{},"TypeName":{},"SchemaHandlerPackage":{},"LoggingConfig":{"shape":"S7"},"ExecutionRoleArn":{},"ClientRequestToken":{}}},"output":{"resultWrapper":"RegisterTypeResult","type":"structure","members":{"RegistrationToken":{}}},"idempotent":true},"SetStackPolicy":{"input":{"type":"structure","required":["StackName"],"members":{"StackName":{},"StackPolicyBody":{},"StackPolicyURL":{}}}},"SetTypeConfiguration":{"input":{"type":"structure","required":["Configuration"],"members":{"TypeArn":{},"Configuration":{},"ConfigurationAlias":{},"TypeName":{},"Type":{}}},"output":{"resultWrapper":"SetTypeConfigurationResult","type":"structure","members":{"ConfigurationArn":{}}}},"SetTypeDefaultVersion":{"input":{"type":"structure","members":{"Arn":{},"Type":{},"TypeName":{},"VersionId":{}}},"output":{"resultWrapper":"SetTypeDefaultVersionResult","type":"structure","members":{}},"idempotent":true},"SignalResource":{"input":{"type":"structure","required":["StackName","LogicalResourceId","UniqueId","Status"],"members":{"StackName":{},"LogicalResourceId":{},"UniqueId":{},"Status":{}}}},"StopStackSetOperation":{"input":{"type":"structure","required":["StackSetName","OperationId"],"members":{"StackSetName":{},"OperationId":{},"CallAs":{}}},"output":{"resultWrapper":"StopStackSetOperationResult","type":"structure","members":{}}},"TestType":{"input":{"type":"structure","members":{"Arn":{},"Type":{},"TypeName":{},"VersionId":{},"LogDeliveryBucket":{}}},"output":{"resultWrapper":"TestTypeResult","type":"structure","members":{"TypeVersionArn":{}}},"idempotent":true},"UpdateStack":{"input":{"type":"structure","required":["StackName"],"members":{"StackName":{},"TemplateBody":{},"TemplateURL":{},"UsePreviousTemplate":{"type":"boolean"},"StackPolicyDuringUpdateBody":{},"StackPolicyDuringUpdateURL":{},"Parameters":{"shape":"S18"},"Capabilities":{"shape":"S1d"},"ResourceTypes":{"shape":"S1f"},"RoleARN":{},"RollbackConfiguration":{"shape":"S1h"},"StackPolicyBody":{},"StackPolicyURL":{},"NotificationARNs":{"shape":"S1n"},"Tags":{"shape":"S1p"},"ClientRequestToken":{}}},"output":{"resultWrapper":"UpdateStackResult","type":"structure","members":{"StackId":{}}}},"UpdateStackInstances":{"input":{"type":"structure","required":["StackSetName","Regions"],"members":{"StackSetName":{},"Accounts":{"shape":"S2h"},"DeploymentTargets":{"shape":"S2j"},"Regions":{"shape":"S2n"},"ParameterOverrides":{"shape":"S18"},"OperationPreferences":{"shape":"S2p"},"OperationId":{"idempotencyToken":true},"CallAs":{}}},"output":{"resultWrapper":"UpdateStackInstancesResult","type":"structure","members":{"OperationId":{}}}},"UpdateStackSet":{"input":{"type":"structure","required":["StackSetName"],"members":{"StackSetName":{},"Description":{},"TemplateBody":{},"TemplateURL":{},"UsePreviousTemplate":{"type":"boolean"},"Parameters":{"shape":"S18"},"Capabilities":{"shape":"S1d"},"Tags":{"shape":"S1p"},"OperationPreferences":{"shape":"S2p"},"AdministrationRoleARN":{},"ExecutionRoleName":{},"DeploymentTargets":{"shape":"S2j"},"PermissionModel":{},"AutoDeployment":{"shape":"S30"},"OperationId":{"idempotencyToken":true},"Accounts":{"shape":"S2h"},"Regions":{"shape":"S2n"},"CallAs":{}}},"output":{"resultWrapper":"UpdateStackSetResult","type":"structure","members":{"OperationId":{}}}},"UpdateTerminationProtection":{"input":{"type":"structure","required":["EnableTerminationProtection","StackName"],"members":{"EnableTerminationProtection":{"type":"boolean"},"StackName":{}}},"output":{"resultWrapper":"UpdateTerminationProtectionResult","type":"structure","members":{"StackId":{}}}},"ValidateTemplate":{"input":{"type":"structure","members":{"TemplateBody":{},"TemplateURL":{}}},"output":{"resultWrapper":"ValidateTemplateResult","type":"structure","members":{"Parameters":{"type":"list","member":{"type":"structure","members":{"ParameterKey":{},"DefaultValue":{},"NoEcho":{"type":"boolean"},"Description":{}}}},"Description":{},"Capabilities":{"shape":"S1d"},"CapabilitiesReason":{},"DeclaredTransforms":{"shape":"S8b"}}}}},"shapes":{"S7":{"type":"structure","required":["LogRoleArn","LogGroupName"],"members":{"LogRoleArn":{},"LogGroupName":{}}},"Sg":{"type":"structure","members":{"TypeArn":{},"TypeConfigurationAlias":{},"TypeConfigurationArn":{},"Type":{},"TypeName":{}}},"S18":{"type":"list","member":{"type":"structure","members":{"ParameterKey":{},"ParameterValue":{},"UsePreviousValue":{"type":"boolean"},"ResolvedValue":{}}}},"S1d":{"type":"list","member":{}},"S1f":{"type":"list","member":{}},"S1h":{"type":"structure","members":{"RollbackTriggers":{"type":"list","member":{"type":"structure","required":["Arn","Type"],"members":{"Arn":{},"Type":{}}}},"MonitoringTimeInMinutes":{"type":"integer"}}},"S1n":{"type":"list","member":{}},"S1p":{"type":"list","member":{"type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{}}}},"S2h":{"type":"list","member":{}},"S2j":{"type":"structure","members":{"Accounts":{"shape":"S2h"},"AccountsUrl":{},"OrganizationalUnitIds":{"shape":"S2l"}}},"S2l":{"type":"list","member":{}},"S2n":{"type":"list","member":{}},"S2p":{"type":"structure","members":{"RegionConcurrencyType":{},"RegionOrder":{"shape":"S2n"},"FailureToleranceCount":{"type":"integer"},"FailureTolerancePercentage":{"type":"integer"},"MaxConcurrentCount":{"type":"integer"},"MaxConcurrentPercentage":{"type":"integer"}}},"S30":{"type":"structure","members":{"Enabled":{"type":"boolean"},"RetainStacksOnAccountRemoval":{"type":"boolean"}}},"S4f":{"type":"structure","members":{"TypeHierarchy":{},"LogicalIdHierarchy":{}}},"S56":{"type":"structure","members":{"DetailedStatus":{}}},"S5d":{"type":"structure","required":["StackResourceDriftStatus"],"members":{"StackResourceDriftStatus":{},"LastCheckTimestamp":{"type":"timestamp"}}},"S5k":{"type":"structure","required":["StackId","LogicalResourceId","ResourceType","StackResourceDriftStatus","Timestamp"],"members":{"StackId":{},"LogicalResourceId":{},"PhysicalResourceId":{},"PhysicalResourceIdContext":{"type":"list","member":{"type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{}}}},"ResourceType":{},"ExpectedProperties":{},"ActualProperties":{},"PropertyDifferences":{"type":"list","member":{"type":"structure","required":["PropertyPath","ExpectedValue","ActualValue","DifferenceType"],"members":{"PropertyPath":{},"ExpectedValue":{},"ActualValue":{},"DifferenceType":{}}}},"StackResourceDriftStatus":{},"Timestamp":{"type":"timestamp"},"ModuleInfo":{"shape":"S4f"}}},"S64":{"type":"structure","members":{"DriftStatus":{},"DriftDetectionStatus":{},"LastDriftCheckTimestamp":{"type":"timestamp"},"TotalStackInstancesCount":{"type":"integer"},"DriftedStackInstancesCount":{"type":"integer"},"InSyncStackInstancesCount":{"type":"integer"},"InProgressStackInstancesCount":{"type":"integer"},"FailedStackInstancesCount":{"type":"integer"}}},"S7i":{"type":"list","member":{}},"S8b":{"type":"list","member":{}}}}

/***/ }),
/* 81 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeAccountLimits":{"input_token":"NextToken","output_token":"NextToken","result_key":"AccountLimits"},"DescribeStackEvents":{"input_token":"NextToken","output_token":"NextToken","result_key":"StackEvents"},"DescribeStackResourceDrifts":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken"},"DescribeStackResources":{"result_key":"StackResources"},"DescribeStacks":{"input_token":"NextToken","output_token":"NextToken","result_key":"Stacks"},"ListChangeSets":{"input_token":"NextToken","output_token":"NextToken","result_key":"Summaries"},"ListExports":{"input_token":"NextToken","output_token":"NextToken","result_key":"Exports"},"ListImports":{"input_token":"NextToken","output_token":"NextToken","result_key":"Imports"},"ListStackInstances":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Summaries"},"ListStackResources":{"input_token":"NextToken","output_token":"NextToken","result_key":"StackResourceSummaries"},"ListStackSetOperationResults":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Summaries"},"ListStackSetOperations":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Summaries"},"ListStackSets":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Summaries"},"ListStacks":{"input_token":"NextToken","output_token":"NextToken","result_key":"StackSummaries"},"ListTypeRegistrations":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken"},"ListTypeVersions":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken"},"ListTypes":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"TypeSummaries"}}}

/***/ }),
/* 82 */
/***/ (function(module, exports) {

	module.exports = {"version":2,"waiters":{"StackExists":{"delay":5,"operation":"DescribeStacks","maxAttempts":20,"acceptors":[{"matcher":"status","expected":200,"state":"success"},{"matcher":"error","expected":"ValidationError","state":"retry"}]},"StackCreateComplete":{"delay":30,"operation":"DescribeStacks","maxAttempts":120,"description":"Wait until stack status is CREATE_COMPLETE.","acceptors":[{"argument":"Stacks[].StackStatus","expected":"CREATE_COMPLETE","matcher":"pathAll","state":"success"},{"argument":"Stacks[].StackStatus","expected":"CREATE_FAILED","matcher":"pathAny","state":"failure"},{"argument":"Stacks[].StackStatus","expected":"DELETE_COMPLETE","matcher":"pathAny","state":"failure"},{"argument":"Stacks[].StackStatus","expected":"DELETE_FAILED","matcher":"pathAny","state":"failure"},{"argument":"Stacks[].StackStatus","expected":"ROLLBACK_FAILED","matcher":"pathAny","state":"failure"},{"argument":"Stacks[].StackStatus","expected":"ROLLBACK_COMPLETE","matcher":"pathAny","state":"failure"},{"expected":"ValidationError","matcher":"error","state":"failure"}]},"StackDeleteComplete":{"delay":30,"operation":"DescribeStacks","maxAttempts":120,"description":"Wait until stack status is DELETE_COMPLETE.","acceptors":[{"argument":"Stacks[].StackStatus","expected":"DELETE_COMPLETE","matcher":"pathAll","state":"success"},{"expected":"ValidationError","matcher":"error","state":"success"},{"argument":"Stacks[].StackStatus","expected":"DELETE_FAILED","matcher":"pathAny","state":"failure"},{"argument":"Stacks[].StackStatus","expected":"CREATE_FAILED","matcher":"pathAny","state":"failure"},{"argument":"Stacks[].StackStatus","expected":"ROLLBACK_FAILED","matcher":"pathAny","state":"failure"},{"argument":"Stacks[].StackStatus","expected":"UPDATE_ROLLBACK_IN_PROGRESS","matcher":"pathAny","state":"failure"},{"argument":"Stacks[].StackStatus","expected":"UPDATE_ROLLBACK_FAILED","matcher":"pathAny","state":"failure"},{"argument":"Stacks[].StackStatus","expected":"UPDATE_ROLLBACK_COMPLETE","matcher":"pathAny","state":"failure"}]},"StackUpdateComplete":{"delay":30,"maxAttempts":120,"operation":"DescribeStacks","description":"Wait until stack status is UPDATE_COMPLETE.","acceptors":[{"argument":"Stacks[].StackStatus","expected":"UPDATE_COMPLETE","matcher":"pathAll","state":"success"},{"expected":"UPDATE_FAILED","matcher":"pathAny","state":"failure","argument":"Stacks[].StackStatus"},{"argument":"Stacks[].StackStatus","expected":"UPDATE_ROLLBACK_FAILED","matcher":"pathAny","state":"failure"},{"expected":"UPDATE_ROLLBACK_COMPLETE","matcher":"pathAny","state":"failure","argument":"Stacks[].StackStatus"},{"expected":"ValidationError","matcher":"error","state":"failure"}]},"StackImportComplete":{"delay":30,"maxAttempts":120,"operation":"DescribeStacks","description":"Wait until stack status is IMPORT_COMPLETE.","acceptors":[{"argument":"Stacks[].StackStatus","expected":"IMPORT_COMPLETE","matcher":"pathAll","state":"success"},{"expected":"ROLLBACK_COMPLETE","matcher":"pathAny","state":"failure","argument":"Stacks[].StackStatus"},{"expected":"ROLLBACK_FAILED","matcher":"pathAny","state":"failure","argument":"Stacks[].StackStatus"},{"argument":"Stacks[].StackStatus","expected":"IMPORT_ROLLBACK_IN_PROGRESS","matcher":"pathAny","state":"failure"},{"argument":"Stacks[].StackStatus","expected":"IMPORT_ROLLBACK_FAILED","matcher":"pathAny","state":"failure"},{"expected":"IMPORT_ROLLBACK_COMPLETE","matcher":"pathAny","state":"failure","argument":"Stacks[].StackStatus"},{"expected":"ValidationError","matcher":"error","state":"failure"}]},"StackRollbackComplete":{"delay":30,"operation":"DescribeStacks","maxAttempts":120,"description":"Wait until stack status is UPDATE_ROLLBACK_COMPLETE.","acceptors":[{"argument":"Stacks[].StackStatus","expected":"UPDATE_ROLLBACK_COMPLETE","matcher":"pathAll","state":"success"},{"argument":"Stacks[].StackStatus","expected":"UPDATE_FAILED","matcher":"pathAny","state":"failure"},{"argument":"Stacks[].StackStatus","expected":"UPDATE_ROLLBACK_FAILED","matcher":"pathAny","state":"failure"},{"argument":"Stacks[].StackStatus","expected":"DELETE_FAILED","matcher":"pathAny","state":"failure"},{"expected":"ValidationError","matcher":"error","state":"failure"}]},"ChangeSetCreateComplete":{"delay":30,"operation":"DescribeChangeSet","maxAttempts":120,"description":"Wait until change set status is CREATE_COMPLETE.","acceptors":[{"argument":"Status","expected":"CREATE_COMPLETE","matcher":"path","state":"success"},{"argument":"Status","expected":"FAILED","matcher":"path","state":"failure"},{"expected":"ValidationError","matcher":"error","state":"failure"}]},"TypeRegistrationComplete":{"delay":30,"operation":"DescribeTypeRegistration","maxAttempts":120,"description":"Wait until type registration is COMPLETE.","acceptors":[{"argument":"ProgressStatus","expected":"COMPLETE","matcher":"path","state":"success"},{"argument":"ProgressStatus","expected":"FAILED","matcher":"path","state":"failure"}]}}}

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['cloudfront'] = {};
	AWS.CloudFront = Service.defineService('cloudfront', ['2013-05-12*', '2013-11-11*', '2014-05-31*', '2014-10-21*', '2014-11-06*', '2015-04-17*', '2015-07-27*', '2015-09-17*', '2016-01-13*', '2016-01-28*', '2016-08-01*', '2016-08-20*', '2016-09-07*', '2016-09-29*', '2016-11-25', '2016-11-25*', '2017-03-25', '2017-03-25*', '2017-10-30', '2017-10-30*', '2018-06-18', '2018-06-18*', '2018-11-05', '2018-11-05*', '2019-03-26', '2019-03-26*', '2020-05-31']);
	__webpack_require__(84);
	Object.defineProperty(apiLoader.services['cloudfront'], '2016-11-25', {
	  get: function get() {
	    var model = __webpack_require__(86);
	    model.paginators = __webpack_require__(87).pagination;
	    model.waiters = __webpack_require__(88).waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	Object.defineProperty(apiLoader.services['cloudfront'], '2017-03-25', {
	  get: function get() {
	    var model = __webpack_require__(89);
	    model.paginators = __webpack_require__(90).pagination;
	    model.waiters = __webpack_require__(91).waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	Object.defineProperty(apiLoader.services['cloudfront'], '2017-10-30', {
	  get: function get() {
	    var model = __webpack_require__(92);
	    model.paginators = __webpack_require__(93).pagination;
	    model.waiters = __webpack_require__(94).waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	Object.defineProperty(apiLoader.services['cloudfront'], '2018-06-18', {
	  get: function get() {
	    var model = __webpack_require__(95);
	    model.paginators = __webpack_require__(96).pagination;
	    model.waiters = __webpack_require__(97).waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	Object.defineProperty(apiLoader.services['cloudfront'], '2018-11-05', {
	  get: function get() {
	    var model = __webpack_require__(98);
	    model.paginators = __webpack_require__(99).pagination;
	    model.waiters = __webpack_require__(100).waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	Object.defineProperty(apiLoader.services['cloudfront'], '2019-03-26', {
	  get: function get() {
	    var model = __webpack_require__(101);
	    model.paginators = __webpack_require__(102).pagination;
	    model.waiters = __webpack_require__(103).waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	Object.defineProperty(apiLoader.services['cloudfront'], '2020-05-31', {
	  get: function get() {
	    var model = __webpack_require__(104);
	    model.paginators = __webpack_require__(105).pagination;
	    model.waiters = __webpack_require__(106).waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.CloudFront;


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(4);

	// pull in CloudFront signer
	__webpack_require__(85);

	AWS.util.update(AWS.CloudFront.prototype, {

	  setupRequestListeners: function setupRequestListeners(request) {
	    request.addListener('extractData', AWS.util.hoistPayloadMember);
	  }

	});


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(4),
	    url = AWS.util.url,
	    crypto = AWS.util.crypto.lib,
	    base64Encode = AWS.util.base64.encode,
	    inherit = AWS.util.inherit;

	var queryEncode = function (string) {
	    var replacements = {
	        '+': '-',
	        '=': '_',
	        '/': '~'
	    };
	    return string.replace(/[\+=\/]/g, function (match) {
	        return replacements[match];
	    });
	};

	var signPolicy = function (policy, privateKey) {
	    var sign = crypto.createSign('RSA-SHA1');
	    sign.write(policy);
	    return queryEncode(sign.sign(privateKey, 'base64'));
	};

	var signWithCannedPolicy = function (url, expires, keyPairId, privateKey) {
	    var policy = JSON.stringify({
	        Statement: [
	            {
	                Resource: url,
	                Condition: { DateLessThan: { 'AWS:EpochTime': expires } }
	            }
	        ]
	    });

	    return {
	        Expires: expires,
	        'Key-Pair-Id': keyPairId,
	        Signature: signPolicy(policy.toString(), privateKey)
	    };
	};

	var signWithCustomPolicy = function (policy, keyPairId, privateKey) {
	    policy = policy.replace(/\s/mg, '');

	    return {
	        Policy: queryEncode(base64Encode(policy)),
	        'Key-Pair-Id': keyPairId,
	        Signature: signPolicy(policy, privateKey)
	    };
	};

	var determineScheme = function (url) {
	    var parts = url.split('://');
	    if (parts.length < 2) {
	        throw new Error('Invalid URL.');
	    }

	    return parts[0].replace('*', '');
	};

	var getRtmpUrl = function (rtmpUrl) {
	    var parsed = url.parse(rtmpUrl);
	    return parsed.path.replace(/^\//, '') + (parsed.hash || '');
	};

	var getResource = function (url) {
	    switch (determineScheme(url)) {
	        case 'http':
	        case 'https':
	            return url;
	        case 'rtmp':
	            return getRtmpUrl(url);
	        default:
	            throw new Error('Invalid URI scheme. Scheme must be one of'
	                + ' http, https, or rtmp');
	    }
	};

	var handleError = function (err, callback) {
	    if (!callback || typeof callback !== 'function') {
	        throw err;
	    }

	    callback(err);
	};

	var handleSuccess = function (result, callback) {
	    if (!callback || typeof callback !== 'function') {
	        return result;
	    }

	    callback(null, result);
	};

	AWS.CloudFront.Signer = inherit({
	    /**
	     * A signer object can be used to generate signed URLs and cookies for granting
	     * access to content on restricted CloudFront distributions.
	     *
	     * @see http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html
	     *
	     * @param keyPairId [String]    (Required) The ID of the CloudFront key pair
	     *                              being used.
	     * @param privateKey [String]   (Required) A private key in RSA format.
	     */
	    constructor: function Signer(keyPairId, privateKey) {
	        if (keyPairId === void 0 || privateKey === void 0) {
	            throw new Error('A key pair ID and private key are required');
	        }

	        this.keyPairId = keyPairId;
	        this.privateKey = privateKey;
	    },

	    /**
	     * Create a signed Amazon CloudFront Cookie.
	     *
	     * @param options [Object]            The options to create a signed cookie.
	     * @option options url [String]     The URL to which the signature will grant
	     *                                  access. Required unless you pass in a full
	     *                                  policy.
	     * @option options expires [Number] A Unix UTC timestamp indicating when the
	     *                                  signature should expire. Required unless you
	     *                                  pass in a full policy.
	     * @option options policy [String]  A CloudFront JSON policy. Required unless
	     *                                  you pass in a url and an expiry time.
	     *
	     * @param cb [Function] if a callback is provided, this function will
	     *   pass the hash as the second parameter (after the error parameter) to
	     *   the callback function.
	     *
	     * @return [Object] if called synchronously (with no callback), returns the
	     *   signed cookie parameters.
	     * @return [null] nothing is returned if a callback is provided.
	     */
	    getSignedCookie: function (options, cb) {
	        var signatureHash = 'policy' in options
	            ? signWithCustomPolicy(options.policy, this.keyPairId, this.privateKey)
	            : signWithCannedPolicy(options.url, options.expires, this.keyPairId, this.privateKey);

	        var cookieHash = {};
	        for (var key in signatureHash) {
	            if (Object.prototype.hasOwnProperty.call(signatureHash, key)) {
	                cookieHash['CloudFront-' + key] = signatureHash[key];
	            }
	        }

	        return handleSuccess(cookieHash, cb);
	    },

	    /**
	     * Create a signed Amazon CloudFront URL.
	     *
	     * Keep in mind that URLs meant for use in media/flash players may have
	     * different requirements for URL formats (e.g. some require that the
	     * extension be removed, some require the file name to be prefixed
	     * - mp4:<path>, some require you to add "/cfx/st" into your URL).
	     *
	     * @param options [Object]          The options to create a signed URL.
	     * @option options url [String]     The URL to which the signature will grant
	     *                                  access. Any query params included with
	     *                                  the URL should be encoded. Required.
	     * @option options expires [Number] A Unix UTC timestamp indicating when the
	     *                                  signature should expire. Required unless you
	     *                                  pass in a full policy.
	     * @option options policy [String]  A CloudFront JSON policy. Required unless
	     *                                  you pass in a url and an expiry time.
	     *
	     * @param cb [Function] if a callback is provided, this function will
	     *   pass the URL as the second parameter (after the error parameter) to
	     *   the callback function.
	     *
	     * @return [String] if called synchronously (with no callback), returns the
	     *   signed URL.
	     * @return [null] nothing is returned if a callback is provided.
	     */
	    getSignedUrl: function (options, cb) {
	        try {
	            var resource = getResource(options.url);
	        } catch (err) {
	            return handleError(err, cb);
	        }

	        var parsedUrl = url.parse(options.url, true),
	            signatureHash = Object.prototype.hasOwnProperty.call(options, 'policy')
	                ? signWithCustomPolicy(options.policy, this.keyPairId, this.privateKey)
	                : signWithCannedPolicy(resource, options.expires, this.keyPairId, this.privateKey);

	        parsedUrl.search = null;
	        for (var key in signatureHash) {
	            if (Object.prototype.hasOwnProperty.call(signatureHash, key)) {
	                parsedUrl.query[key] = signatureHash[key];
	            }
	        }

	        try {
	            var signedUrl = determineScheme(options.url) === 'rtmp'
	                    ? getRtmpUrl(url.format(parsedUrl))
	                    : url.format(parsedUrl);
	        } catch (err) {
	            return handleError(err, cb);
	        }

	        return handleSuccess(signedUrl, cb);
	    }
	});

	/**
	 * @api private
	 */
	module.exports = AWS.CloudFront.Signer;


/***/ }),
/* 86 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-11-25","endpointPrefix":"cloudfront","globalEndpoint":"cloudfront.amazonaws.com","protocol":"rest-xml","serviceAbbreviation":"CloudFront","serviceFullName":"Amazon CloudFront","serviceId":"CloudFront","signatureVersion":"v4","uid":"cloudfront-2016-11-25"},"operations":{"CreateCloudFrontOriginAccessIdentity":{"http":{"requestUri":"/2016-11-25/origin-access-identity/cloudfront","responseCode":201},"input":{"type":"structure","required":["CloudFrontOriginAccessIdentityConfig"],"members":{"CloudFrontOriginAccessIdentityConfig":{"shape":"S2","locationName":"CloudFrontOriginAccessIdentityConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2016-11-25/"}}},"payload":"CloudFrontOriginAccessIdentityConfig"},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentity":{"shape":"S5"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentity"}},"CreateDistribution":{"http":{"requestUri":"/2016-11-25/distribution","responseCode":201},"input":{"type":"structure","required":["DistributionConfig"],"members":{"DistributionConfig":{"shape":"S7","locationName":"DistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2016-11-25/"}}},"payload":"DistributionConfig"},"output":{"type":"structure","members":{"Distribution":{"shape":"S1s"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"CreateDistributionWithTags":{"http":{"requestUri":"/2016-11-25/distribution?WithTags","responseCode":201},"input":{"type":"structure","required":["DistributionConfigWithTags"],"members":{"DistributionConfigWithTags":{"locationName":"DistributionConfigWithTags","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2016-11-25/"},"type":"structure","required":["DistributionConfig","Tags"],"members":{"DistributionConfig":{"shape":"S7"},"Tags":{"shape":"S21"}}}},"payload":"DistributionConfigWithTags"},"output":{"type":"structure","members":{"Distribution":{"shape":"S1s"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"CreateInvalidation":{"http":{"requestUri":"/2016-11-25/distribution/{DistributionId}/invalidation","responseCode":201},"input":{"type":"structure","required":["DistributionId","InvalidationBatch"],"members":{"DistributionId":{"location":"uri","locationName":"DistributionId"},"InvalidationBatch":{"shape":"S28","locationName":"InvalidationBatch","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2016-11-25/"}}},"payload":"InvalidationBatch"},"output":{"type":"structure","members":{"Location":{"location":"header","locationName":"Location"},"Invalidation":{"shape":"S2c"}},"payload":"Invalidation"}},"CreateStreamingDistribution":{"http":{"requestUri":"/2016-11-25/streaming-distribution","responseCode":201},"input":{"type":"structure","required":["StreamingDistributionConfig"],"members":{"StreamingDistributionConfig":{"shape":"S2e","locationName":"StreamingDistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2016-11-25/"}}},"payload":"StreamingDistributionConfig"},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S2i"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}},"CreateStreamingDistributionWithTags":{"http":{"requestUri":"/2016-11-25/streaming-distribution?WithTags","responseCode":201},"input":{"type":"structure","required":["StreamingDistributionConfigWithTags"],"members":{"StreamingDistributionConfigWithTags":{"locationName":"StreamingDistributionConfigWithTags","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2016-11-25/"},"type":"structure","required":["StreamingDistributionConfig","Tags"],"members":{"StreamingDistributionConfig":{"shape":"S2e"},"Tags":{"shape":"S21"}}}},"payload":"StreamingDistributionConfigWithTags"},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S2i"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}},"DeleteCloudFrontOriginAccessIdentity":{"http":{"method":"DELETE","requestUri":"/2016-11-25/origin-access-identity/cloudfront/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeleteDistribution":{"http":{"method":"DELETE","requestUri":"/2016-11-25/distribution/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeleteStreamingDistribution":{"http":{"method":"DELETE","requestUri":"/2016-11-25/streaming-distribution/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"GetCloudFrontOriginAccessIdentity":{"http":{"method":"GET","requestUri":"/2016-11-25/origin-access-identity/cloudfront/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentity":{"shape":"S5"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentity"}},"GetCloudFrontOriginAccessIdentityConfig":{"http":{"method":"GET","requestUri":"/2016-11-25/origin-access-identity/cloudfront/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentityConfig":{"shape":"S2"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentityConfig"}},"GetDistribution":{"http":{"method":"GET","requestUri":"/2016-11-25/distribution/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"Distribution":{"shape":"S1s"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"GetDistributionConfig":{"http":{"method":"GET","requestUri":"/2016-11-25/distribution/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"DistributionConfig":{"shape":"S7"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"DistributionConfig"}},"GetInvalidation":{"http":{"method":"GET","requestUri":"/2016-11-25/distribution/{DistributionId}/invalidation/{Id}"},"input":{"type":"structure","required":["DistributionId","Id"],"members":{"DistributionId":{"location":"uri","locationName":"DistributionId"},"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"Invalidation":{"shape":"S2c"}},"payload":"Invalidation"}},"GetStreamingDistribution":{"http":{"method":"GET","requestUri":"/2016-11-25/streaming-distribution/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S2i"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}},"GetStreamingDistributionConfig":{"http":{"method":"GET","requestUri":"/2016-11-25/streaming-distribution/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"StreamingDistributionConfig":{"shape":"S2e"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistributionConfig"}},"ListCloudFrontOriginAccessIdentities":{"http":{"method":"GET","requestUri":"/2016-11-25/origin-access-identity/cloudfront"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentityList":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CloudFrontOriginAccessIdentitySummary","type":"structure","required":["Id","S3CanonicalUserId","Comment"],"members":{"Id":{},"S3CanonicalUserId":{},"Comment":{}}}}}}},"payload":"CloudFrontOriginAccessIdentityList"}},"ListDistributions":{"http":{"method":"GET","requestUri":"/2016-11-25/distribution"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"DistributionList":{"shape":"S3a"}},"payload":"DistributionList"}},"ListDistributionsByWebACLId":{"http":{"method":"GET","requestUri":"/2016-11-25/distributionsByWebACLId/{WebACLId}"},"input":{"type":"structure","required":["WebACLId"],"members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"},"WebACLId":{"location":"uri","locationName":"WebACLId"}}},"output":{"type":"structure","members":{"DistributionList":{"shape":"S3a"}},"payload":"DistributionList"}},"ListInvalidations":{"http":{"method":"GET","requestUri":"/2016-11-25/distribution/{DistributionId}/invalidation"},"input":{"type":"structure","required":["DistributionId"],"members":{"DistributionId":{"location":"uri","locationName":"DistributionId"},"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"InvalidationList":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"InvalidationSummary","type":"structure","required":["Id","CreateTime","Status"],"members":{"Id":{},"CreateTime":{"type":"timestamp"},"Status":{}}}}}}},"payload":"InvalidationList"}},"ListStreamingDistributions":{"http":{"method":"GET","requestUri":"/2016-11-25/streaming-distribution"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"StreamingDistributionList":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"StreamingDistributionSummary","type":"structure","required":["Id","ARN","Status","LastModifiedTime","DomainName","S3Origin","Aliases","TrustedSigners","Comment","PriceClass","Enabled"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"DomainName":{},"S3Origin":{"shape":"S2f"},"Aliases":{"shape":"S8"},"TrustedSigners":{"shape":"Sy"},"Comment":{},"PriceClass":{},"Enabled":{"type":"boolean"}}}}}}},"payload":"StreamingDistributionList"}},"ListTagsForResource":{"http":{"method":"GET","requestUri":"/2016-11-25/tagging"},"input":{"type":"structure","required":["Resource"],"members":{"Resource":{"location":"querystring","locationName":"Resource"}}},"output":{"type":"structure","required":["Tags"],"members":{"Tags":{"shape":"S21"}},"payload":"Tags"}},"TagResource":{"http":{"requestUri":"/2016-11-25/tagging?Operation=Tag","responseCode":204},"input":{"type":"structure","required":["Resource","Tags"],"members":{"Resource":{"location":"querystring","locationName":"Resource"},"Tags":{"shape":"S21","locationName":"Tags","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2016-11-25/"}}},"payload":"Tags"}},"UntagResource":{"http":{"requestUri":"/2016-11-25/tagging?Operation=Untag","responseCode":204},"input":{"type":"structure","required":["Resource","TagKeys"],"members":{"Resource":{"location":"querystring","locationName":"Resource"},"TagKeys":{"locationName":"TagKeys","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2016-11-25/"},"type":"structure","members":{"Items":{"type":"list","member":{"locationName":"Key"}}}}},"payload":"TagKeys"}},"UpdateCloudFrontOriginAccessIdentity":{"http":{"method":"PUT","requestUri":"/2016-11-25/origin-access-identity/cloudfront/{Id}/config"},"input":{"type":"structure","required":["CloudFrontOriginAccessIdentityConfig","Id"],"members":{"CloudFrontOriginAccessIdentityConfig":{"shape":"S2","locationName":"CloudFrontOriginAccessIdentityConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2016-11-25/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"CloudFrontOriginAccessIdentityConfig"},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentity":{"shape":"S5"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentity"}},"UpdateDistribution":{"http":{"method":"PUT","requestUri":"/2016-11-25/distribution/{Id}/config"},"input":{"type":"structure","required":["DistributionConfig","Id"],"members":{"DistributionConfig":{"shape":"S7","locationName":"DistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2016-11-25/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"DistributionConfig"},"output":{"type":"structure","members":{"Distribution":{"shape":"S1s"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"UpdateStreamingDistribution":{"http":{"method":"PUT","requestUri":"/2016-11-25/streaming-distribution/{Id}/config"},"input":{"type":"structure","required":["StreamingDistributionConfig","Id"],"members":{"StreamingDistributionConfig":{"shape":"S2e","locationName":"StreamingDistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2016-11-25/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"StreamingDistributionConfig"},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S2i"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}}},"shapes":{"S2":{"type":"structure","required":["CallerReference","Comment"],"members":{"CallerReference":{},"Comment":{}}},"S5":{"type":"structure","required":["Id","S3CanonicalUserId"],"members":{"Id":{},"S3CanonicalUserId":{},"CloudFrontOriginAccessIdentityConfig":{"shape":"S2"}}},"S7":{"type":"structure","required":["CallerReference","Origins","DefaultCacheBehavior","Comment","Enabled"],"members":{"CallerReference":{},"Aliases":{"shape":"S8"},"DefaultRootObject":{},"Origins":{"shape":"Sb"},"DefaultCacheBehavior":{"shape":"Sn"},"CacheBehaviors":{"shape":"S1a"},"CustomErrorResponses":{"shape":"S1d"},"Comment":{},"Logging":{"type":"structure","required":["Enabled","IncludeCookies","Bucket","Prefix"],"members":{"Enabled":{"type":"boolean"},"IncludeCookies":{"type":"boolean"},"Bucket":{},"Prefix":{}}},"PriceClass":{},"Enabled":{"type":"boolean"},"ViewerCertificate":{"shape":"S1i"},"Restrictions":{"shape":"S1m"},"WebACLId":{},"HttpVersion":{},"IsIPV6Enabled":{"type":"boolean"}}},"S8":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CNAME"}}}},"Sb":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Origin","type":"structure","required":["Id","DomainName"],"members":{"Id":{},"DomainName":{},"OriginPath":{},"CustomHeaders":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"OriginCustomHeader","type":"structure","required":["HeaderName","HeaderValue"],"members":{"HeaderName":{},"HeaderValue":{}}}}}},"S3OriginConfig":{"type":"structure","required":["OriginAccessIdentity"],"members":{"OriginAccessIdentity":{}}},"CustomOriginConfig":{"type":"structure","required":["HTTPPort","HTTPSPort","OriginProtocolPolicy"],"members":{"HTTPPort":{"type":"integer"},"HTTPSPort":{"type":"integer"},"OriginProtocolPolicy":{},"OriginSslProtocols":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"SslProtocol"}}}}}}}}}}},"Sn":{"type":"structure","required":["TargetOriginId","ForwardedValues","TrustedSigners","ViewerProtocolPolicy","MinTTL"],"members":{"TargetOriginId":{},"ForwardedValues":{"shape":"So"},"TrustedSigners":{"shape":"Sy"},"ViewerProtocolPolicy":{},"MinTTL":{"type":"long"},"AllowedMethods":{"shape":"S12"},"SmoothStreaming":{"type":"boolean"},"DefaultTTL":{"type":"long"},"MaxTTL":{"type":"long"},"Compress":{"type":"boolean"},"LambdaFunctionAssociations":{"shape":"S16"}}},"So":{"type":"structure","required":["QueryString","Cookies"],"members":{"QueryString":{"type":"boolean"},"Cookies":{"type":"structure","required":["Forward"],"members":{"Forward":{},"WhitelistedNames":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Name"}}}}}},"Headers":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Name"}}}},"QueryStringCacheKeys":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Name"}}}}}},"Sy":{"type":"structure","required":["Enabled","Quantity"],"members":{"Enabled":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"AwsAccountNumber"}}}},"S12":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"shape":"S13"},"CachedMethods":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"shape":"S13"}}}}},"S13":{"type":"list","member":{"locationName":"Method"}},"S16":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"LambdaFunctionAssociation","type":"structure","members":{"LambdaFunctionARN":{},"EventType":{}}}}}},"S1a":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CacheBehavior","type":"structure","required":["PathPattern","TargetOriginId","ForwardedValues","TrustedSigners","ViewerProtocolPolicy","MinTTL"],"members":{"PathPattern":{},"TargetOriginId":{},"ForwardedValues":{"shape":"So"},"TrustedSigners":{"shape":"Sy"},"ViewerProtocolPolicy":{},"MinTTL":{"type":"long"},"AllowedMethods":{"shape":"S12"},"SmoothStreaming":{"type":"boolean"},"DefaultTTL":{"type":"long"},"MaxTTL":{"type":"long"},"Compress":{"type":"boolean"},"LambdaFunctionAssociations":{"shape":"S16"}}}}}},"S1d":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CustomErrorResponse","type":"structure","required":["ErrorCode"],"members":{"ErrorCode":{"type":"integer"},"ResponsePagePath":{},"ResponseCode":{},"ErrorCachingMinTTL":{"type":"long"}}}}}},"S1i":{"type":"structure","members":{"CloudFrontDefaultCertificate":{"type":"boolean"},"IAMCertificateId":{},"ACMCertificateArn":{},"SSLSupportMethod":{},"MinimumProtocolVersion":{},"Certificate":{"deprecated":true},"CertificateSource":{"deprecated":true}}},"S1m":{"type":"structure","required":["GeoRestriction"],"members":{"GeoRestriction":{"type":"structure","required":["RestrictionType","Quantity"],"members":{"RestrictionType":{},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Location"}}}}}},"S1s":{"type":"structure","required":["Id","ARN","Status","LastModifiedTime","InProgressInvalidationBatches","DomainName","ActiveTrustedSigners","DistributionConfig"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"InProgressInvalidationBatches":{"type":"integer"},"DomainName":{},"ActiveTrustedSigners":{"shape":"S1u"},"DistributionConfig":{"shape":"S7"}}},"S1u":{"type":"structure","required":["Enabled","Quantity"],"members":{"Enabled":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Signer","type":"structure","members":{"AwsAccountNumber":{},"KeyPairIds":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"KeyPairId"}}}}}}}}},"S21":{"type":"structure","members":{"Items":{"type":"list","member":{"locationName":"Tag","type":"structure","required":["Key"],"members":{"Key":{},"Value":{}}}}}},"S28":{"type":"structure","required":["Paths","CallerReference"],"members":{"Paths":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Path"}}}},"CallerReference":{}}},"S2c":{"type":"structure","required":["Id","Status","CreateTime","InvalidationBatch"],"members":{"Id":{},"Status":{},"CreateTime":{"type":"timestamp"},"InvalidationBatch":{"shape":"S28"}}},"S2e":{"type":"structure","required":["CallerReference","S3Origin","Comment","TrustedSigners","Enabled"],"members":{"CallerReference":{},"S3Origin":{"shape":"S2f"},"Aliases":{"shape":"S8"},"Comment":{},"Logging":{"type":"structure","required":["Enabled","Bucket","Prefix"],"members":{"Enabled":{"type":"boolean"},"Bucket":{},"Prefix":{}}},"TrustedSigners":{"shape":"Sy"},"PriceClass":{},"Enabled":{"type":"boolean"}}},"S2f":{"type":"structure","required":["DomainName","OriginAccessIdentity"],"members":{"DomainName":{},"OriginAccessIdentity":{}}},"S2i":{"type":"structure","required":["Id","ARN","Status","DomainName","ActiveTrustedSigners","StreamingDistributionConfig"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"DomainName":{},"ActiveTrustedSigners":{"shape":"S1u"},"StreamingDistributionConfig":{"shape":"S2e"}}},"S3a":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"DistributionSummary","type":"structure","required":["Id","ARN","Status","LastModifiedTime","DomainName","Aliases","Origins","DefaultCacheBehavior","CacheBehaviors","CustomErrorResponses","Comment","PriceClass","Enabled","ViewerCertificate","Restrictions","WebACLId","HttpVersion","IsIPV6Enabled"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"DomainName":{},"Aliases":{"shape":"S8"},"Origins":{"shape":"Sb"},"DefaultCacheBehavior":{"shape":"Sn"},"CacheBehaviors":{"shape":"S1a"},"CustomErrorResponses":{"shape":"S1d"},"Comment":{},"PriceClass":{},"Enabled":{"type":"boolean"},"ViewerCertificate":{"shape":"S1i"},"Restrictions":{"shape":"S1m"},"WebACLId":{},"HttpVersion":{},"IsIPV6Enabled":{"type":"boolean"}}}}}}}}

/***/ }),
/* 87 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"ListCloudFrontOriginAccessIdentities":{"input_token":"Marker","output_token":"CloudFrontOriginAccessIdentityList.NextMarker","limit_key":"MaxItems","more_results":"CloudFrontOriginAccessIdentityList.IsTruncated","result_key":"CloudFrontOriginAccessIdentityList.Items"},"ListDistributions":{"input_token":"Marker","output_token":"DistributionList.NextMarker","limit_key":"MaxItems","more_results":"DistributionList.IsTruncated","result_key":"DistributionList.Items"},"ListInvalidations":{"input_token":"Marker","output_token":"InvalidationList.NextMarker","limit_key":"MaxItems","more_results":"InvalidationList.IsTruncated","result_key":"InvalidationList.Items"},"ListStreamingDistributions":{"input_token":"Marker","output_token":"StreamingDistributionList.NextMarker","limit_key":"MaxItems","more_results":"StreamingDistributionList.IsTruncated","result_key":"StreamingDistributionList.Items"}}}

/***/ }),
/* 88 */
/***/ (function(module, exports) {

	module.exports = {"version":2,"waiters":{"DistributionDeployed":{"delay":60,"operation":"GetDistribution","maxAttempts":25,"description":"Wait until a distribution is deployed.","acceptors":[{"expected":"Deployed","matcher":"path","state":"success","argument":"Distribution.Status"}]},"InvalidationCompleted":{"delay":20,"operation":"GetInvalidation","maxAttempts":30,"description":"Wait until an invalidation has completed.","acceptors":[{"expected":"Completed","matcher":"path","state":"success","argument":"Invalidation.Status"}]},"StreamingDistributionDeployed":{"delay":60,"operation":"GetStreamingDistribution","maxAttempts":25,"description":"Wait until a streaming distribution is deployed.","acceptors":[{"expected":"Deployed","matcher":"path","state":"success","argument":"StreamingDistribution.Status"}]}}}

/***/ }),
/* 89 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2017-03-25","endpointPrefix":"cloudfront","globalEndpoint":"cloudfront.amazonaws.com","protocol":"rest-xml","serviceAbbreviation":"CloudFront","serviceFullName":"Amazon CloudFront","serviceId":"CloudFront","signatureVersion":"v4","uid":"cloudfront-2017-03-25"},"operations":{"CreateCloudFrontOriginAccessIdentity":{"http":{"requestUri":"/2017-03-25/origin-access-identity/cloudfront","responseCode":201},"input":{"type":"structure","required":["CloudFrontOriginAccessIdentityConfig"],"members":{"CloudFrontOriginAccessIdentityConfig":{"shape":"S2","locationName":"CloudFrontOriginAccessIdentityConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-03-25/"}}},"payload":"CloudFrontOriginAccessIdentityConfig"},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentity":{"shape":"S5"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentity"}},"CreateDistribution":{"http":{"requestUri":"/2017-03-25/distribution","responseCode":201},"input":{"type":"structure","required":["DistributionConfig"],"members":{"DistributionConfig":{"shape":"S7","locationName":"DistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-03-25/"}}},"payload":"DistributionConfig"},"output":{"type":"structure","members":{"Distribution":{"shape":"S1s"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"CreateDistributionWithTags":{"http":{"requestUri":"/2017-03-25/distribution?WithTags","responseCode":201},"input":{"type":"structure","required":["DistributionConfigWithTags"],"members":{"DistributionConfigWithTags":{"locationName":"DistributionConfigWithTags","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-03-25/"},"type":"structure","required":["DistributionConfig","Tags"],"members":{"DistributionConfig":{"shape":"S7"},"Tags":{"shape":"S21"}}}},"payload":"DistributionConfigWithTags"},"output":{"type":"structure","members":{"Distribution":{"shape":"S1s"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"CreateInvalidation":{"http":{"requestUri":"/2017-03-25/distribution/{DistributionId}/invalidation","responseCode":201},"input":{"type":"structure","required":["DistributionId","InvalidationBatch"],"members":{"DistributionId":{"location":"uri","locationName":"DistributionId"},"InvalidationBatch":{"shape":"S28","locationName":"InvalidationBatch","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-03-25/"}}},"payload":"InvalidationBatch"},"output":{"type":"structure","members":{"Location":{"location":"header","locationName":"Location"},"Invalidation":{"shape":"S2c"}},"payload":"Invalidation"}},"CreateStreamingDistribution":{"http":{"requestUri":"/2017-03-25/streaming-distribution","responseCode":201},"input":{"type":"structure","required":["StreamingDistributionConfig"],"members":{"StreamingDistributionConfig":{"shape":"S2e","locationName":"StreamingDistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-03-25/"}}},"payload":"StreamingDistributionConfig"},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S2i"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}},"CreateStreamingDistributionWithTags":{"http":{"requestUri":"/2017-03-25/streaming-distribution?WithTags","responseCode":201},"input":{"type":"structure","required":["StreamingDistributionConfigWithTags"],"members":{"StreamingDistributionConfigWithTags":{"locationName":"StreamingDistributionConfigWithTags","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-03-25/"},"type":"structure","required":["StreamingDistributionConfig","Tags"],"members":{"StreamingDistributionConfig":{"shape":"S2e"},"Tags":{"shape":"S21"}}}},"payload":"StreamingDistributionConfigWithTags"},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S2i"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}},"DeleteCloudFrontOriginAccessIdentity":{"http":{"method":"DELETE","requestUri":"/2017-03-25/origin-access-identity/cloudfront/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeleteDistribution":{"http":{"method":"DELETE","requestUri":"/2017-03-25/distribution/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeleteServiceLinkedRole":{"http":{"method":"DELETE","requestUri":"/2017-03-25/service-linked-role/{RoleName}","responseCode":204},"input":{"type":"structure","required":["RoleName"],"members":{"RoleName":{"location":"uri","locationName":"RoleName"}}}},"DeleteStreamingDistribution":{"http":{"method":"DELETE","requestUri":"/2017-03-25/streaming-distribution/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"GetCloudFrontOriginAccessIdentity":{"http":{"method":"GET","requestUri":"/2017-03-25/origin-access-identity/cloudfront/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentity":{"shape":"S5"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentity"}},"GetCloudFrontOriginAccessIdentityConfig":{"http":{"method":"GET","requestUri":"/2017-03-25/origin-access-identity/cloudfront/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentityConfig":{"shape":"S2"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentityConfig"}},"GetDistribution":{"http":{"method":"GET","requestUri":"/2017-03-25/distribution/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"Distribution":{"shape":"S1s"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"GetDistributionConfig":{"http":{"method":"GET","requestUri":"/2017-03-25/distribution/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"DistributionConfig":{"shape":"S7"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"DistributionConfig"}},"GetInvalidation":{"http":{"method":"GET","requestUri":"/2017-03-25/distribution/{DistributionId}/invalidation/{Id}"},"input":{"type":"structure","required":["DistributionId","Id"],"members":{"DistributionId":{"location":"uri","locationName":"DistributionId"},"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"Invalidation":{"shape":"S2c"}},"payload":"Invalidation"}},"GetStreamingDistribution":{"http":{"method":"GET","requestUri":"/2017-03-25/streaming-distribution/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S2i"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}},"GetStreamingDistributionConfig":{"http":{"method":"GET","requestUri":"/2017-03-25/streaming-distribution/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"StreamingDistributionConfig":{"shape":"S2e"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistributionConfig"}},"ListCloudFrontOriginAccessIdentities":{"http":{"method":"GET","requestUri":"/2017-03-25/origin-access-identity/cloudfront"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentityList":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CloudFrontOriginAccessIdentitySummary","type":"structure","required":["Id","S3CanonicalUserId","Comment"],"members":{"Id":{},"S3CanonicalUserId":{},"Comment":{}}}}}}},"payload":"CloudFrontOriginAccessIdentityList"}},"ListDistributions":{"http":{"method":"GET","requestUri":"/2017-03-25/distribution"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"DistributionList":{"shape":"S3b"}},"payload":"DistributionList"}},"ListDistributionsByWebACLId":{"http":{"method":"GET","requestUri":"/2017-03-25/distributionsByWebACLId/{WebACLId}"},"input":{"type":"structure","required":["WebACLId"],"members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"},"WebACLId":{"location":"uri","locationName":"WebACLId"}}},"output":{"type":"structure","members":{"DistributionList":{"shape":"S3b"}},"payload":"DistributionList"}},"ListInvalidations":{"http":{"method":"GET","requestUri":"/2017-03-25/distribution/{DistributionId}/invalidation"},"input":{"type":"structure","required":["DistributionId"],"members":{"DistributionId":{"location":"uri","locationName":"DistributionId"},"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"InvalidationList":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"InvalidationSummary","type":"structure","required":["Id","CreateTime","Status"],"members":{"Id":{},"CreateTime":{"type":"timestamp"},"Status":{}}}}}}},"payload":"InvalidationList"}},"ListStreamingDistributions":{"http":{"method":"GET","requestUri":"/2017-03-25/streaming-distribution"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"StreamingDistributionList":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"StreamingDistributionSummary","type":"structure","required":["Id","ARN","Status","LastModifiedTime","DomainName","S3Origin","Aliases","TrustedSigners","Comment","PriceClass","Enabled"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"DomainName":{},"S3Origin":{"shape":"S2f"},"Aliases":{"shape":"S8"},"TrustedSigners":{"shape":"Sy"},"Comment":{},"PriceClass":{},"Enabled":{"type":"boolean"}}}}}}},"payload":"StreamingDistributionList"}},"ListTagsForResource":{"http":{"method":"GET","requestUri":"/2017-03-25/tagging"},"input":{"type":"structure","required":["Resource"],"members":{"Resource":{"location":"querystring","locationName":"Resource"}}},"output":{"type":"structure","required":["Tags"],"members":{"Tags":{"shape":"S21"}},"payload":"Tags"}},"TagResource":{"http":{"requestUri":"/2017-03-25/tagging?Operation=Tag","responseCode":204},"input":{"type":"structure","required":["Resource","Tags"],"members":{"Resource":{"location":"querystring","locationName":"Resource"},"Tags":{"shape":"S21","locationName":"Tags","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-03-25/"}}},"payload":"Tags"}},"UntagResource":{"http":{"requestUri":"/2017-03-25/tagging?Operation=Untag","responseCode":204},"input":{"type":"structure","required":["Resource","TagKeys"],"members":{"Resource":{"location":"querystring","locationName":"Resource"},"TagKeys":{"locationName":"TagKeys","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-03-25/"},"type":"structure","members":{"Items":{"type":"list","member":{"locationName":"Key"}}}}},"payload":"TagKeys"}},"UpdateCloudFrontOriginAccessIdentity":{"http":{"method":"PUT","requestUri":"/2017-03-25/origin-access-identity/cloudfront/{Id}/config"},"input":{"type":"structure","required":["CloudFrontOriginAccessIdentityConfig","Id"],"members":{"CloudFrontOriginAccessIdentityConfig":{"shape":"S2","locationName":"CloudFrontOriginAccessIdentityConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-03-25/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"CloudFrontOriginAccessIdentityConfig"},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentity":{"shape":"S5"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentity"}},"UpdateDistribution":{"http":{"method":"PUT","requestUri":"/2017-03-25/distribution/{Id}/config"},"input":{"type":"structure","required":["DistributionConfig","Id"],"members":{"DistributionConfig":{"shape":"S7","locationName":"DistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-03-25/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"DistributionConfig"},"output":{"type":"structure","members":{"Distribution":{"shape":"S1s"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"UpdateStreamingDistribution":{"http":{"method":"PUT","requestUri":"/2017-03-25/streaming-distribution/{Id}/config"},"input":{"type":"structure","required":["StreamingDistributionConfig","Id"],"members":{"StreamingDistributionConfig":{"shape":"S2e","locationName":"StreamingDistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-03-25/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"StreamingDistributionConfig"},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S2i"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}}},"shapes":{"S2":{"type":"structure","required":["CallerReference","Comment"],"members":{"CallerReference":{},"Comment":{}}},"S5":{"type":"structure","required":["Id","S3CanonicalUserId"],"members":{"Id":{},"S3CanonicalUserId":{},"CloudFrontOriginAccessIdentityConfig":{"shape":"S2"}}},"S7":{"type":"structure","required":["CallerReference","Origins","DefaultCacheBehavior","Comment","Enabled"],"members":{"CallerReference":{},"Aliases":{"shape":"S8"},"DefaultRootObject":{},"Origins":{"shape":"Sb"},"DefaultCacheBehavior":{"shape":"Sn"},"CacheBehaviors":{"shape":"S1a"},"CustomErrorResponses":{"shape":"S1d"},"Comment":{},"Logging":{"type":"structure","required":["Enabled","IncludeCookies","Bucket","Prefix"],"members":{"Enabled":{"type":"boolean"},"IncludeCookies":{"type":"boolean"},"Bucket":{},"Prefix":{}}},"PriceClass":{},"Enabled":{"type":"boolean"},"ViewerCertificate":{"shape":"S1i"},"Restrictions":{"shape":"S1m"},"WebACLId":{},"HttpVersion":{},"IsIPV6Enabled":{"type":"boolean"}}},"S8":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CNAME"}}}},"Sb":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Origin","type":"structure","required":["Id","DomainName"],"members":{"Id":{},"DomainName":{},"OriginPath":{},"CustomHeaders":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"OriginCustomHeader","type":"structure","required":["HeaderName","HeaderValue"],"members":{"HeaderName":{},"HeaderValue":{}}}}}},"S3OriginConfig":{"type":"structure","required":["OriginAccessIdentity"],"members":{"OriginAccessIdentity":{}}},"CustomOriginConfig":{"type":"structure","required":["HTTPPort","HTTPSPort","OriginProtocolPolicy"],"members":{"HTTPPort":{"type":"integer"},"HTTPSPort":{"type":"integer"},"OriginProtocolPolicy":{},"OriginSslProtocols":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"SslProtocol"}}}},"OriginReadTimeout":{"type":"integer"},"OriginKeepaliveTimeout":{"type":"integer"}}}}}}}},"Sn":{"type":"structure","required":["TargetOriginId","ForwardedValues","TrustedSigners","ViewerProtocolPolicy","MinTTL"],"members":{"TargetOriginId":{},"ForwardedValues":{"shape":"So"},"TrustedSigners":{"shape":"Sy"},"ViewerProtocolPolicy":{},"MinTTL":{"type":"long"},"AllowedMethods":{"shape":"S12"},"SmoothStreaming":{"type":"boolean"},"DefaultTTL":{"type":"long"},"MaxTTL":{"type":"long"},"Compress":{"type":"boolean"},"LambdaFunctionAssociations":{"shape":"S16"}}},"So":{"type":"structure","required":["QueryString","Cookies"],"members":{"QueryString":{"type":"boolean"},"Cookies":{"type":"structure","required":["Forward"],"members":{"Forward":{},"WhitelistedNames":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Name"}}}}}},"Headers":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Name"}}}},"QueryStringCacheKeys":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Name"}}}}}},"Sy":{"type":"structure","required":["Enabled","Quantity"],"members":{"Enabled":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"AwsAccountNumber"}}}},"S12":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"shape":"S13"},"CachedMethods":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"shape":"S13"}}}}},"S13":{"type":"list","member":{"locationName":"Method"}},"S16":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"LambdaFunctionAssociation","type":"structure","members":{"LambdaFunctionARN":{},"EventType":{}}}}}},"S1a":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CacheBehavior","type":"structure","required":["PathPattern","TargetOriginId","ForwardedValues","TrustedSigners","ViewerProtocolPolicy","MinTTL"],"members":{"PathPattern":{},"TargetOriginId":{},"ForwardedValues":{"shape":"So"},"TrustedSigners":{"shape":"Sy"},"ViewerProtocolPolicy":{},"MinTTL":{"type":"long"},"AllowedMethods":{"shape":"S12"},"SmoothStreaming":{"type":"boolean"},"DefaultTTL":{"type":"long"},"MaxTTL":{"type":"long"},"Compress":{"type":"boolean"},"LambdaFunctionAssociations":{"shape":"S16"}}}}}},"S1d":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CustomErrorResponse","type":"structure","required":["ErrorCode"],"members":{"ErrorCode":{"type":"integer"},"ResponsePagePath":{},"ResponseCode":{},"ErrorCachingMinTTL":{"type":"long"}}}}}},"S1i":{"type":"structure","members":{"CloudFrontDefaultCertificate":{"type":"boolean"},"IAMCertificateId":{},"ACMCertificateArn":{},"SSLSupportMethod":{},"MinimumProtocolVersion":{},"Certificate":{"deprecated":true},"CertificateSource":{"deprecated":true}}},"S1m":{"type":"structure","required":["GeoRestriction"],"members":{"GeoRestriction":{"type":"structure","required":["RestrictionType","Quantity"],"members":{"RestrictionType":{},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Location"}}}}}},"S1s":{"type":"structure","required":["Id","ARN","Status","LastModifiedTime","InProgressInvalidationBatches","DomainName","ActiveTrustedSigners","DistributionConfig"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"InProgressInvalidationBatches":{"type":"integer"},"DomainName":{},"ActiveTrustedSigners":{"shape":"S1u"},"DistributionConfig":{"shape":"S7"}}},"S1u":{"type":"structure","required":["Enabled","Quantity"],"members":{"Enabled":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Signer","type":"structure","members":{"AwsAccountNumber":{},"KeyPairIds":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"KeyPairId"}}}}}}}}},"S21":{"type":"structure","members":{"Items":{"type":"list","member":{"locationName":"Tag","type":"structure","required":["Key"],"members":{"Key":{},"Value":{}}}}}},"S28":{"type":"structure","required":["Paths","CallerReference"],"members":{"Paths":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Path"}}}},"CallerReference":{}}},"S2c":{"type":"structure","required":["Id","Status","CreateTime","InvalidationBatch"],"members":{"Id":{},"Status":{},"CreateTime":{"type":"timestamp"},"InvalidationBatch":{"shape":"S28"}}},"S2e":{"type":"structure","required":["CallerReference","S3Origin","Comment","TrustedSigners","Enabled"],"members":{"CallerReference":{},"S3Origin":{"shape":"S2f"},"Aliases":{"shape":"S8"},"Comment":{},"Logging":{"type":"structure","required":["Enabled","Bucket","Prefix"],"members":{"Enabled":{"type":"boolean"},"Bucket":{},"Prefix":{}}},"TrustedSigners":{"shape":"Sy"},"PriceClass":{},"Enabled":{"type":"boolean"}}},"S2f":{"type":"structure","required":["DomainName","OriginAccessIdentity"],"members":{"DomainName":{},"OriginAccessIdentity":{}}},"S2i":{"type":"structure","required":["Id","ARN","Status","DomainName","ActiveTrustedSigners","StreamingDistributionConfig"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"DomainName":{},"ActiveTrustedSigners":{"shape":"S1u"},"StreamingDistributionConfig":{"shape":"S2e"}}},"S3b":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"DistributionSummary","type":"structure","required":["Id","ARN","Status","LastModifiedTime","DomainName","Aliases","Origins","DefaultCacheBehavior","CacheBehaviors","CustomErrorResponses","Comment","PriceClass","Enabled","ViewerCertificate","Restrictions","WebACLId","HttpVersion","IsIPV6Enabled"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"DomainName":{},"Aliases":{"shape":"S8"},"Origins":{"shape":"Sb"},"DefaultCacheBehavior":{"shape":"Sn"},"CacheBehaviors":{"shape":"S1a"},"CustomErrorResponses":{"shape":"S1d"},"Comment":{},"PriceClass":{},"Enabled":{"type":"boolean"},"ViewerCertificate":{"shape":"S1i"},"Restrictions":{"shape":"S1m"},"WebACLId":{},"HttpVersion":{},"IsIPV6Enabled":{"type":"boolean"}}}}}}}}

/***/ }),
/* 90 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"ListCloudFrontOriginAccessIdentities":{"input_token":"Marker","limit_key":"MaxItems","more_results":"CloudFrontOriginAccessIdentityList.IsTruncated","output_token":"CloudFrontOriginAccessIdentityList.NextMarker","result_key":"CloudFrontOriginAccessIdentityList.Items"},"ListDistributions":{"input_token":"Marker","limit_key":"MaxItems","more_results":"DistributionList.IsTruncated","output_token":"DistributionList.NextMarker","result_key":"DistributionList.Items"},"ListInvalidations":{"input_token":"Marker","limit_key":"MaxItems","more_results":"InvalidationList.IsTruncated","output_token":"InvalidationList.NextMarker","result_key":"InvalidationList.Items"},"ListStreamingDistributions":{"input_token":"Marker","limit_key":"MaxItems","more_results":"StreamingDistributionList.IsTruncated","output_token":"StreamingDistributionList.NextMarker","result_key":"StreamingDistributionList.Items"}}}

/***/ }),
/* 91 */
/***/ (function(module, exports) {

	module.exports = {"version":2,"waiters":{"DistributionDeployed":{"delay":60,"operation":"GetDistribution","maxAttempts":25,"description":"Wait until a distribution is deployed.","acceptors":[{"expected":"Deployed","matcher":"path","state":"success","argument":"Distribution.Status"}]},"InvalidationCompleted":{"delay":20,"operation":"GetInvalidation","maxAttempts":30,"description":"Wait until an invalidation has completed.","acceptors":[{"expected":"Completed","matcher":"path","state":"success","argument":"Invalidation.Status"}]},"StreamingDistributionDeployed":{"delay":60,"operation":"GetStreamingDistribution","maxAttempts":25,"description":"Wait until a streaming distribution is deployed.","acceptors":[{"expected":"Deployed","matcher":"path","state":"success","argument":"StreamingDistribution.Status"}]}}}

/***/ }),
/* 92 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2017-10-30","endpointPrefix":"cloudfront","globalEndpoint":"cloudfront.amazonaws.com","protocol":"rest-xml","serviceAbbreviation":"CloudFront","serviceFullName":"Amazon CloudFront","serviceId":"CloudFront","signatureVersion":"v4","uid":"cloudfront-2017-10-30"},"operations":{"CreateCloudFrontOriginAccessIdentity":{"http":{"requestUri":"/2017-10-30/origin-access-identity/cloudfront","responseCode":201},"input":{"type":"structure","required":["CloudFrontOriginAccessIdentityConfig"],"members":{"CloudFrontOriginAccessIdentityConfig":{"shape":"S2","locationName":"CloudFrontOriginAccessIdentityConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-10-30/"}}},"payload":"CloudFrontOriginAccessIdentityConfig"},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentity":{"shape":"S5"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentity"}},"CreateDistribution":{"http":{"requestUri":"/2017-10-30/distribution","responseCode":201},"input":{"type":"structure","required":["DistributionConfig"],"members":{"DistributionConfig":{"shape":"S7","locationName":"DistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-10-30/"}}},"payload":"DistributionConfig"},"output":{"type":"structure","members":{"Distribution":{"shape":"S1t"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"CreateDistributionWithTags":{"http":{"requestUri":"/2017-10-30/distribution?WithTags","responseCode":201},"input":{"type":"structure","required":["DistributionConfigWithTags"],"members":{"DistributionConfigWithTags":{"locationName":"DistributionConfigWithTags","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-10-30/"},"type":"structure","required":["DistributionConfig","Tags"],"members":{"DistributionConfig":{"shape":"S7"},"Tags":{"shape":"S22"}}}},"payload":"DistributionConfigWithTags"},"output":{"type":"structure","members":{"Distribution":{"shape":"S1t"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"CreateFieldLevelEncryptionConfig":{"http":{"requestUri":"/2017-10-30/field-level-encryption","responseCode":201},"input":{"type":"structure","required":["FieldLevelEncryptionConfig"],"members":{"FieldLevelEncryptionConfig":{"shape":"S29","locationName":"FieldLevelEncryptionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-10-30/"}}},"payload":"FieldLevelEncryptionConfig"},"output":{"type":"structure","members":{"FieldLevelEncryption":{"shape":"S2k"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryption"}},"CreateFieldLevelEncryptionProfile":{"http":{"requestUri":"/2017-10-30/field-level-encryption-profile","responseCode":201},"input":{"type":"structure","required":["FieldLevelEncryptionProfileConfig"],"members":{"FieldLevelEncryptionProfileConfig":{"shape":"S2m","locationName":"FieldLevelEncryptionProfileConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-10-30/"}}},"payload":"FieldLevelEncryptionProfileConfig"},"output":{"type":"structure","members":{"FieldLevelEncryptionProfile":{"shape":"S2t"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryptionProfile"}},"CreateInvalidation":{"http":{"requestUri":"/2017-10-30/distribution/{DistributionId}/invalidation","responseCode":201},"input":{"type":"structure","required":["DistributionId","InvalidationBatch"],"members":{"DistributionId":{"location":"uri","locationName":"DistributionId"},"InvalidationBatch":{"shape":"S2v","locationName":"InvalidationBatch","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-10-30/"}}},"payload":"InvalidationBatch"},"output":{"type":"structure","members":{"Location":{"location":"header","locationName":"Location"},"Invalidation":{"shape":"S2z"}},"payload":"Invalidation"}},"CreatePublicKey":{"http":{"requestUri":"/2017-10-30/public-key","responseCode":201},"input":{"type":"structure","required":["PublicKeyConfig"],"members":{"PublicKeyConfig":{"shape":"S31","locationName":"PublicKeyConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-10-30/"}}},"payload":"PublicKeyConfig"},"output":{"type":"structure","members":{"PublicKey":{"shape":"S33"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"PublicKey"}},"CreateStreamingDistribution":{"http":{"requestUri":"/2017-10-30/streaming-distribution","responseCode":201},"input":{"type":"structure","required":["StreamingDistributionConfig"],"members":{"StreamingDistributionConfig":{"shape":"S35","locationName":"StreamingDistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-10-30/"}}},"payload":"StreamingDistributionConfig"},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S39"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}},"CreateStreamingDistributionWithTags":{"http":{"requestUri":"/2017-10-30/streaming-distribution?WithTags","responseCode":201},"input":{"type":"structure","required":["StreamingDistributionConfigWithTags"],"members":{"StreamingDistributionConfigWithTags":{"locationName":"StreamingDistributionConfigWithTags","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-10-30/"},"type":"structure","required":["StreamingDistributionConfig","Tags"],"members":{"StreamingDistributionConfig":{"shape":"S35"},"Tags":{"shape":"S22"}}}},"payload":"StreamingDistributionConfigWithTags"},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S39"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}},"DeleteCloudFrontOriginAccessIdentity":{"http":{"method":"DELETE","requestUri":"/2017-10-30/origin-access-identity/cloudfront/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeleteDistribution":{"http":{"method":"DELETE","requestUri":"/2017-10-30/distribution/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeleteFieldLevelEncryptionConfig":{"http":{"method":"DELETE","requestUri":"/2017-10-30/field-level-encryption/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeleteFieldLevelEncryptionProfile":{"http":{"method":"DELETE","requestUri":"/2017-10-30/field-level-encryption-profile/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeletePublicKey":{"http":{"method":"DELETE","requestUri":"/2017-10-30/public-key/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeleteStreamingDistribution":{"http":{"method":"DELETE","requestUri":"/2017-10-30/streaming-distribution/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"GetCloudFrontOriginAccessIdentity":{"http":{"method":"GET","requestUri":"/2017-10-30/origin-access-identity/cloudfront/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentity":{"shape":"S5"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentity"}},"GetCloudFrontOriginAccessIdentityConfig":{"http":{"method":"GET","requestUri":"/2017-10-30/origin-access-identity/cloudfront/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentityConfig":{"shape":"S2"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentityConfig"}},"GetDistribution":{"http":{"method":"GET","requestUri":"/2017-10-30/distribution/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"Distribution":{"shape":"S1t"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"GetDistributionConfig":{"http":{"method":"GET","requestUri":"/2017-10-30/distribution/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"DistributionConfig":{"shape":"S7"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"DistributionConfig"}},"GetFieldLevelEncryption":{"http":{"method":"GET","requestUri":"/2017-10-30/field-level-encryption/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"FieldLevelEncryption":{"shape":"S2k"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryption"}},"GetFieldLevelEncryptionConfig":{"http":{"method":"GET","requestUri":"/2017-10-30/field-level-encryption/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"FieldLevelEncryptionConfig":{"shape":"S29"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryptionConfig"}},"GetFieldLevelEncryptionProfile":{"http":{"method":"GET","requestUri":"/2017-10-30/field-level-encryption-profile/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"FieldLevelEncryptionProfile":{"shape":"S2t"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryptionProfile"}},"GetFieldLevelEncryptionProfileConfig":{"http":{"method":"GET","requestUri":"/2017-10-30/field-level-encryption-profile/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"FieldLevelEncryptionProfileConfig":{"shape":"S2m"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryptionProfileConfig"}},"GetInvalidation":{"http":{"method":"GET","requestUri":"/2017-10-30/distribution/{DistributionId}/invalidation/{Id}"},"input":{"type":"structure","required":["DistributionId","Id"],"members":{"DistributionId":{"location":"uri","locationName":"DistributionId"},"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"Invalidation":{"shape":"S2z"}},"payload":"Invalidation"}},"GetPublicKey":{"http":{"method":"GET","requestUri":"/2017-10-30/public-key/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"PublicKey":{"shape":"S33"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"PublicKey"}},"GetPublicKeyConfig":{"http":{"method":"GET","requestUri":"/2017-10-30/public-key/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"PublicKeyConfig":{"shape":"S31"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"PublicKeyConfig"}},"GetStreamingDistribution":{"http":{"method":"GET","requestUri":"/2017-10-30/streaming-distribution/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S39"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}},"GetStreamingDistributionConfig":{"http":{"method":"GET","requestUri":"/2017-10-30/streaming-distribution/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"StreamingDistributionConfig":{"shape":"S35"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistributionConfig"}},"ListCloudFrontOriginAccessIdentities":{"http":{"method":"GET","requestUri":"/2017-10-30/origin-access-identity/cloudfront"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentityList":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CloudFrontOriginAccessIdentitySummary","type":"structure","required":["Id","S3CanonicalUserId","Comment"],"members":{"Id":{},"S3CanonicalUserId":{},"Comment":{}}}}}}},"payload":"CloudFrontOriginAccessIdentityList"}},"ListDistributions":{"http":{"method":"GET","requestUri":"/2017-10-30/distribution"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"DistributionList":{"shape":"S4g"}},"payload":"DistributionList"}},"ListDistributionsByWebACLId":{"http":{"method":"GET","requestUri":"/2017-10-30/distributionsByWebACLId/{WebACLId}"},"input":{"type":"structure","required":["WebACLId"],"members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"},"WebACLId":{"location":"uri","locationName":"WebACLId"}}},"output":{"type":"structure","members":{"DistributionList":{"shape":"S4g"}},"payload":"DistributionList"}},"ListFieldLevelEncryptionConfigs":{"http":{"method":"GET","requestUri":"/2017-10-30/field-level-encryption"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"FieldLevelEncryptionList":{"type":"structure","required":["MaxItems","Quantity"],"members":{"NextMarker":{},"MaxItems":{"type":"integer"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"FieldLevelEncryptionSummary","type":"structure","required":["Id","LastModifiedTime"],"members":{"Id":{},"LastModifiedTime":{"type":"timestamp"},"Comment":{},"QueryArgProfileConfig":{"shape":"S2a"},"ContentTypeProfileConfig":{"shape":"S2e"}}}}}}},"payload":"FieldLevelEncryptionList"}},"ListFieldLevelEncryptionProfiles":{"http":{"method":"GET","requestUri":"/2017-10-30/field-level-encryption-profile"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"FieldLevelEncryptionProfileList":{"type":"structure","required":["MaxItems","Quantity"],"members":{"NextMarker":{},"MaxItems":{"type":"integer"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"FieldLevelEncryptionProfileSummary","type":"structure","required":["Id","LastModifiedTime","Name","EncryptionEntities"],"members":{"Id":{},"LastModifiedTime":{"type":"timestamp"},"Name":{},"EncryptionEntities":{"shape":"S2n"},"Comment":{}}}}}}},"payload":"FieldLevelEncryptionProfileList"}},"ListInvalidations":{"http":{"method":"GET","requestUri":"/2017-10-30/distribution/{DistributionId}/invalidation"},"input":{"type":"structure","required":["DistributionId"],"members":{"DistributionId":{"location":"uri","locationName":"DistributionId"},"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"InvalidationList":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"InvalidationSummary","type":"structure","required":["Id","CreateTime","Status"],"members":{"Id":{},"CreateTime":{"type":"timestamp"},"Status":{}}}}}}},"payload":"InvalidationList"}},"ListPublicKeys":{"http":{"method":"GET","requestUri":"/2017-10-30/public-key"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"PublicKeyList":{"type":"structure","required":["MaxItems","Quantity"],"members":{"NextMarker":{},"MaxItems":{"type":"integer"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"PublicKeySummary","type":"structure","required":["Id","Name","CreatedTime","EncodedKey"],"members":{"Id":{},"Name":{},"CreatedTime":{"type":"timestamp"},"EncodedKey":{},"Comment":{}}}}}}},"payload":"PublicKeyList"}},"ListStreamingDistributions":{"http":{"method":"GET","requestUri":"/2017-10-30/streaming-distribution"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"StreamingDistributionList":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"StreamingDistributionSummary","type":"structure","required":["Id","ARN","Status","LastModifiedTime","DomainName","S3Origin","Aliases","TrustedSigners","Comment","PriceClass","Enabled"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"DomainName":{},"S3Origin":{"shape":"S36"},"Aliases":{"shape":"S8"},"TrustedSigners":{"shape":"Sy"},"Comment":{},"PriceClass":{},"Enabled":{"type":"boolean"}}}}}}},"payload":"StreamingDistributionList"}},"ListTagsForResource":{"http":{"method":"GET","requestUri":"/2017-10-30/tagging"},"input":{"type":"structure","required":["Resource"],"members":{"Resource":{"location":"querystring","locationName":"Resource"}}},"output":{"type":"structure","required":["Tags"],"members":{"Tags":{"shape":"S22"}},"payload":"Tags"}},"TagResource":{"http":{"requestUri":"/2017-10-30/tagging?Operation=Tag","responseCode":204},"input":{"type":"structure","required":["Resource","Tags"],"members":{"Resource":{"location":"querystring","locationName":"Resource"},"Tags":{"shape":"S22","locationName":"Tags","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-10-30/"}}},"payload":"Tags"}},"UntagResource":{"http":{"requestUri":"/2017-10-30/tagging?Operation=Untag","responseCode":204},"input":{"type":"structure","required":["Resource","TagKeys"],"members":{"Resource":{"location":"querystring","locationName":"Resource"},"TagKeys":{"locationName":"TagKeys","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-10-30/"},"type":"structure","members":{"Items":{"type":"list","member":{"locationName":"Key"}}}}},"payload":"TagKeys"}},"UpdateCloudFrontOriginAccessIdentity":{"http":{"method":"PUT","requestUri":"/2017-10-30/origin-access-identity/cloudfront/{Id}/config"},"input":{"type":"structure","required":["CloudFrontOriginAccessIdentityConfig","Id"],"members":{"CloudFrontOriginAccessIdentityConfig":{"shape":"S2","locationName":"CloudFrontOriginAccessIdentityConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-10-30/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"CloudFrontOriginAccessIdentityConfig"},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentity":{"shape":"S5"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentity"}},"UpdateDistribution":{"http":{"method":"PUT","requestUri":"/2017-10-30/distribution/{Id}/config"},"input":{"type":"structure","required":["DistributionConfig","Id"],"members":{"DistributionConfig":{"shape":"S7","locationName":"DistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-10-30/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"DistributionConfig"},"output":{"type":"structure","members":{"Distribution":{"shape":"S1t"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"UpdateFieldLevelEncryptionConfig":{"http":{"method":"PUT","requestUri":"/2017-10-30/field-level-encryption/{Id}/config"},"input":{"type":"structure","required":["FieldLevelEncryptionConfig","Id"],"members":{"FieldLevelEncryptionConfig":{"shape":"S29","locationName":"FieldLevelEncryptionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-10-30/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"FieldLevelEncryptionConfig"},"output":{"type":"structure","members":{"FieldLevelEncryption":{"shape":"S2k"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryption"}},"UpdateFieldLevelEncryptionProfile":{"http":{"method":"PUT","requestUri":"/2017-10-30/field-level-encryption-profile/{Id}/config"},"input":{"type":"structure","required":["FieldLevelEncryptionProfileConfig","Id"],"members":{"FieldLevelEncryptionProfileConfig":{"shape":"S2m","locationName":"FieldLevelEncryptionProfileConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-10-30/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"FieldLevelEncryptionProfileConfig"},"output":{"type":"structure","members":{"FieldLevelEncryptionProfile":{"shape":"S2t"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryptionProfile"}},"UpdatePublicKey":{"http":{"method":"PUT","requestUri":"/2017-10-30/public-key/{Id}/config"},"input":{"type":"structure","required":["PublicKeyConfig","Id"],"members":{"PublicKeyConfig":{"shape":"S31","locationName":"PublicKeyConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-10-30/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"PublicKeyConfig"},"output":{"type":"structure","members":{"PublicKey":{"shape":"S33"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"PublicKey"}},"UpdateStreamingDistribution":{"http":{"method":"PUT","requestUri":"/2017-10-30/streaming-distribution/{Id}/config"},"input":{"type":"structure","required":["StreamingDistributionConfig","Id"],"members":{"StreamingDistributionConfig":{"shape":"S35","locationName":"StreamingDistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-10-30/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"StreamingDistributionConfig"},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S39"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}}},"shapes":{"S2":{"type":"structure","required":["CallerReference","Comment"],"members":{"CallerReference":{},"Comment":{}}},"S5":{"type":"structure","required":["Id","S3CanonicalUserId"],"members":{"Id":{},"S3CanonicalUserId":{},"CloudFrontOriginAccessIdentityConfig":{"shape":"S2"}}},"S7":{"type":"structure","required":["CallerReference","Origins","DefaultCacheBehavior","Comment","Enabled"],"members":{"CallerReference":{},"Aliases":{"shape":"S8"},"DefaultRootObject":{},"Origins":{"shape":"Sb"},"DefaultCacheBehavior":{"shape":"Sn"},"CacheBehaviors":{"shape":"S1b"},"CustomErrorResponses":{"shape":"S1e"},"Comment":{},"Logging":{"type":"structure","required":["Enabled","IncludeCookies","Bucket","Prefix"],"members":{"Enabled":{"type":"boolean"},"IncludeCookies":{"type":"boolean"},"Bucket":{},"Prefix":{}}},"PriceClass":{},"Enabled":{"type":"boolean"},"ViewerCertificate":{"shape":"S1j"},"Restrictions":{"shape":"S1n"},"WebACLId":{},"HttpVersion":{},"IsIPV6Enabled":{"type":"boolean"}}},"S8":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CNAME"}}}},"Sb":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Origin","type":"structure","required":["Id","DomainName"],"members":{"Id":{},"DomainName":{},"OriginPath":{},"CustomHeaders":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"OriginCustomHeader","type":"structure","required":["HeaderName","HeaderValue"],"members":{"HeaderName":{},"HeaderValue":{}}}}}},"S3OriginConfig":{"type":"structure","required":["OriginAccessIdentity"],"members":{"OriginAccessIdentity":{}}},"CustomOriginConfig":{"type":"structure","required":["HTTPPort","HTTPSPort","OriginProtocolPolicy"],"members":{"HTTPPort":{"type":"integer"},"HTTPSPort":{"type":"integer"},"OriginProtocolPolicy":{},"OriginSslProtocols":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"SslProtocol"}}}},"OriginReadTimeout":{"type":"integer"},"OriginKeepaliveTimeout":{"type":"integer"}}}}}}}},"Sn":{"type":"structure","required":["TargetOriginId","ForwardedValues","TrustedSigners","ViewerProtocolPolicy","MinTTL"],"members":{"TargetOriginId":{},"ForwardedValues":{"shape":"So"},"TrustedSigners":{"shape":"Sy"},"ViewerProtocolPolicy":{},"MinTTL":{"type":"long"},"AllowedMethods":{"shape":"S12"},"SmoothStreaming":{"type":"boolean"},"DefaultTTL":{"type":"long"},"MaxTTL":{"type":"long"},"Compress":{"type":"boolean"},"LambdaFunctionAssociations":{"shape":"S16"},"FieldLevelEncryptionId":{}}},"So":{"type":"structure","required":["QueryString","Cookies"],"members":{"QueryString":{"type":"boolean"},"Cookies":{"type":"structure","required":["Forward"],"members":{"Forward":{},"WhitelistedNames":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Name"}}}}}},"Headers":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Name"}}}},"QueryStringCacheKeys":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Name"}}}}}},"Sy":{"type":"structure","required":["Enabled","Quantity"],"members":{"Enabled":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"AwsAccountNumber"}}}},"S12":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"shape":"S13"},"CachedMethods":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"shape":"S13"}}}}},"S13":{"type":"list","member":{"locationName":"Method"}},"S16":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"LambdaFunctionAssociation","type":"structure","required":["LambdaFunctionARN","EventType"],"members":{"LambdaFunctionARN":{},"EventType":{}}}}}},"S1b":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CacheBehavior","type":"structure","required":["PathPattern","TargetOriginId","ForwardedValues","TrustedSigners","ViewerProtocolPolicy","MinTTL"],"members":{"PathPattern":{},"TargetOriginId":{},"ForwardedValues":{"shape":"So"},"TrustedSigners":{"shape":"Sy"},"ViewerProtocolPolicy":{},"MinTTL":{"type":"long"},"AllowedMethods":{"shape":"S12"},"SmoothStreaming":{"type":"boolean"},"DefaultTTL":{"type":"long"},"MaxTTL":{"type":"long"},"Compress":{"type":"boolean"},"LambdaFunctionAssociations":{"shape":"S16"},"FieldLevelEncryptionId":{}}}}}},"S1e":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CustomErrorResponse","type":"structure","required":["ErrorCode"],"members":{"ErrorCode":{"type":"integer"},"ResponsePagePath":{},"ResponseCode":{},"ErrorCachingMinTTL":{"type":"long"}}}}}},"S1j":{"type":"structure","members":{"CloudFrontDefaultCertificate":{"type":"boolean"},"IAMCertificateId":{},"ACMCertificateArn":{},"SSLSupportMethod":{},"MinimumProtocolVersion":{},"Certificate":{"deprecated":true},"CertificateSource":{"deprecated":true}}},"S1n":{"type":"structure","required":["GeoRestriction"],"members":{"GeoRestriction":{"type":"structure","required":["RestrictionType","Quantity"],"members":{"RestrictionType":{},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Location"}}}}}},"S1t":{"type":"structure","required":["Id","ARN","Status","LastModifiedTime","InProgressInvalidationBatches","DomainName","ActiveTrustedSigners","DistributionConfig"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"InProgressInvalidationBatches":{"type":"integer"},"DomainName":{},"ActiveTrustedSigners":{"shape":"S1v"},"DistributionConfig":{"shape":"S7"}}},"S1v":{"type":"structure","required":["Enabled","Quantity"],"members":{"Enabled":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Signer","type":"structure","members":{"AwsAccountNumber":{},"KeyPairIds":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"KeyPairId"}}}}}}}}},"S22":{"type":"structure","members":{"Items":{"type":"list","member":{"locationName":"Tag","type":"structure","required":["Key"],"members":{"Key":{},"Value":{}}}}}},"S29":{"type":"structure","required":["CallerReference"],"members":{"CallerReference":{},"Comment":{},"QueryArgProfileConfig":{"shape":"S2a"},"ContentTypeProfileConfig":{"shape":"S2e"}}},"S2a":{"type":"structure","required":["ForwardWhenQueryArgProfileIsUnknown"],"members":{"ForwardWhenQueryArgProfileIsUnknown":{"type":"boolean"},"QueryArgProfiles":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"QueryArgProfile","type":"structure","required":["QueryArg","ProfileId"],"members":{"QueryArg":{},"ProfileId":{}}}}}}}},"S2e":{"type":"structure","required":["ForwardWhenContentTypeIsUnknown"],"members":{"ForwardWhenContentTypeIsUnknown":{"type":"boolean"},"ContentTypeProfiles":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"ContentTypeProfile","type":"structure","required":["Format","ContentType"],"members":{"Format":{},"ProfileId":{},"ContentType":{}}}}}}}},"S2k":{"type":"structure","required":["Id","LastModifiedTime","FieldLevelEncryptionConfig"],"members":{"Id":{},"LastModifiedTime":{"type":"timestamp"},"FieldLevelEncryptionConfig":{"shape":"S29"}}},"S2m":{"type":"structure","required":["Name","CallerReference","EncryptionEntities"],"members":{"Name":{},"CallerReference":{},"Comment":{},"EncryptionEntities":{"shape":"S2n"}}},"S2n":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"EncryptionEntity","type":"structure","required":["PublicKeyId","ProviderId","FieldPatterns"],"members":{"PublicKeyId":{},"ProviderId":{},"FieldPatterns":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"FieldPattern"}}}}}}}}},"S2t":{"type":"structure","required":["Id","LastModifiedTime","FieldLevelEncryptionProfileConfig"],"members":{"Id":{},"LastModifiedTime":{"type":"timestamp"},"FieldLevelEncryptionProfileConfig":{"shape":"S2m"}}},"S2v":{"type":"structure","required":["Paths","CallerReference"],"members":{"Paths":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Path"}}}},"CallerReference":{}}},"S2z":{"type":"structure","required":["Id","Status","CreateTime","InvalidationBatch"],"members":{"Id":{},"Status":{},"CreateTime":{"type":"timestamp"},"InvalidationBatch":{"shape":"S2v"}}},"S31":{"type":"structure","required":["CallerReference","Name","EncodedKey"],"members":{"CallerReference":{},"Name":{},"EncodedKey":{},"Comment":{}}},"S33":{"type":"structure","required":["Id","CreatedTime","PublicKeyConfig"],"members":{"Id":{},"CreatedTime":{"type":"timestamp"},"PublicKeyConfig":{"shape":"S31"}}},"S35":{"type":"structure","required":["CallerReference","S3Origin","Comment","TrustedSigners","Enabled"],"members":{"CallerReference":{},"S3Origin":{"shape":"S36"},"Aliases":{"shape":"S8"},"Comment":{},"Logging":{"type":"structure","required":["Enabled","Bucket","Prefix"],"members":{"Enabled":{"type":"boolean"},"Bucket":{},"Prefix":{}}},"TrustedSigners":{"shape":"Sy"},"PriceClass":{},"Enabled":{"type":"boolean"}}},"S36":{"type":"structure","required":["DomainName","OriginAccessIdentity"],"members":{"DomainName":{},"OriginAccessIdentity":{}}},"S39":{"type":"structure","required":["Id","ARN","Status","DomainName","ActiveTrustedSigners","StreamingDistributionConfig"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"DomainName":{},"ActiveTrustedSigners":{"shape":"S1v"},"StreamingDistributionConfig":{"shape":"S35"}}},"S4g":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"DistributionSummary","type":"structure","required":["Id","ARN","Status","LastModifiedTime","DomainName","Aliases","Origins","DefaultCacheBehavior","CacheBehaviors","CustomErrorResponses","Comment","PriceClass","Enabled","ViewerCertificate","Restrictions","WebACLId","HttpVersion","IsIPV6Enabled"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"DomainName":{},"Aliases":{"shape":"S8"},"Origins":{"shape":"Sb"},"DefaultCacheBehavior":{"shape":"Sn"},"CacheBehaviors":{"shape":"S1b"},"CustomErrorResponses":{"shape":"S1e"},"Comment":{},"PriceClass":{},"Enabled":{"type":"boolean"},"ViewerCertificate":{"shape":"S1j"},"Restrictions":{"shape":"S1n"},"WebACLId":{},"HttpVersion":{},"IsIPV6Enabled":{"type":"boolean"}}}}}}}}

/***/ }),
/* 93 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"ListCloudFrontOriginAccessIdentities":{"input_token":"Marker","limit_key":"MaxItems","more_results":"CloudFrontOriginAccessIdentityList.IsTruncated","output_token":"CloudFrontOriginAccessIdentityList.NextMarker","result_key":"CloudFrontOriginAccessIdentityList.Items"},"ListDistributions":{"input_token":"Marker","limit_key":"MaxItems","more_results":"DistributionList.IsTruncated","output_token":"DistributionList.NextMarker","result_key":"DistributionList.Items"},"ListInvalidations":{"input_token":"Marker","limit_key":"MaxItems","more_results":"InvalidationList.IsTruncated","output_token":"InvalidationList.NextMarker","result_key":"InvalidationList.Items"},"ListStreamingDistributions":{"input_token":"Marker","limit_key":"MaxItems","more_results":"StreamingDistributionList.IsTruncated","output_token":"StreamingDistributionList.NextMarker","result_key":"StreamingDistributionList.Items"}}}

/***/ }),
/* 94 */
/***/ (function(module, exports) {

	module.exports = {"version":2,"waiters":{"DistributionDeployed":{"delay":60,"operation":"GetDistribution","maxAttempts":25,"description":"Wait until a distribution is deployed.","acceptors":[{"expected":"Deployed","matcher":"path","state":"success","argument":"Distribution.Status"}]},"InvalidationCompleted":{"delay":20,"operation":"GetInvalidation","maxAttempts":30,"description":"Wait until an invalidation has completed.","acceptors":[{"expected":"Completed","matcher":"path","state":"success","argument":"Invalidation.Status"}]},"StreamingDistributionDeployed":{"delay":60,"operation":"GetStreamingDistribution","maxAttempts":25,"description":"Wait until a streaming distribution is deployed.","acceptors":[{"expected":"Deployed","matcher":"path","state":"success","argument":"StreamingDistribution.Status"}]}}}

/***/ }),
/* 95 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2018-06-18","endpointPrefix":"cloudfront","globalEndpoint":"cloudfront.amazonaws.com","protocol":"rest-xml","serviceAbbreviation":"CloudFront","serviceFullName":"Amazon CloudFront","serviceId":"CloudFront","signatureVersion":"v4","uid":"cloudfront-2018-06-18"},"operations":{"CreateCloudFrontOriginAccessIdentity":{"http":{"requestUri":"/2018-06-18/origin-access-identity/cloudfront","responseCode":201},"input":{"type":"structure","required":["CloudFrontOriginAccessIdentityConfig"],"members":{"CloudFrontOriginAccessIdentityConfig":{"shape":"S2","locationName":"CloudFrontOriginAccessIdentityConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2018-06-18/"}}},"payload":"CloudFrontOriginAccessIdentityConfig"},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentity":{"shape":"S5"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentity"}},"CreateDistribution":{"http":{"requestUri":"/2018-06-18/distribution","responseCode":201},"input":{"type":"structure","required":["DistributionConfig"],"members":{"DistributionConfig":{"shape":"S7","locationName":"DistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2018-06-18/"}}},"payload":"DistributionConfig"},"output":{"type":"structure","members":{"Distribution":{"shape":"S1t"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"CreateDistributionWithTags":{"http":{"requestUri":"/2018-06-18/distribution?WithTags","responseCode":201},"input":{"type":"structure","required":["DistributionConfigWithTags"],"members":{"DistributionConfigWithTags":{"locationName":"DistributionConfigWithTags","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2018-06-18/"},"type":"structure","required":["DistributionConfig","Tags"],"members":{"DistributionConfig":{"shape":"S7"},"Tags":{"shape":"S22"}}}},"payload":"DistributionConfigWithTags"},"output":{"type":"structure","members":{"Distribution":{"shape":"S1t"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"CreateFieldLevelEncryptionConfig":{"http":{"requestUri":"/2018-06-18/field-level-encryption","responseCode":201},"input":{"type":"structure","required":["FieldLevelEncryptionConfig"],"members":{"FieldLevelEncryptionConfig":{"shape":"S29","locationName":"FieldLevelEncryptionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2018-06-18/"}}},"payload":"FieldLevelEncryptionConfig"},"output":{"type":"structure","members":{"FieldLevelEncryption":{"shape":"S2k"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryption"}},"CreateFieldLevelEncryptionProfile":{"http":{"requestUri":"/2018-06-18/field-level-encryption-profile","responseCode":201},"input":{"type":"structure","required":["FieldLevelEncryptionProfileConfig"],"members":{"FieldLevelEncryptionProfileConfig":{"shape":"S2m","locationName":"FieldLevelEncryptionProfileConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2018-06-18/"}}},"payload":"FieldLevelEncryptionProfileConfig"},"output":{"type":"structure","members":{"FieldLevelEncryptionProfile":{"shape":"S2t"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryptionProfile"}},"CreateInvalidation":{"http":{"requestUri":"/2018-06-18/distribution/{DistributionId}/invalidation","responseCode":201},"input":{"type":"structure","required":["DistributionId","InvalidationBatch"],"members":{"DistributionId":{"location":"uri","locationName":"DistributionId"},"InvalidationBatch":{"shape":"S2v","locationName":"InvalidationBatch","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2018-06-18/"}}},"payload":"InvalidationBatch"},"output":{"type":"structure","members":{"Location":{"location":"header","locationName":"Location"},"Invalidation":{"shape":"S2z"}},"payload":"Invalidation"}},"CreatePublicKey":{"http":{"requestUri":"/2018-06-18/public-key","responseCode":201},"input":{"type":"structure","required":["PublicKeyConfig"],"members":{"PublicKeyConfig":{"shape":"S31","locationName":"PublicKeyConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2018-06-18/"}}},"payload":"PublicKeyConfig"},"output":{"type":"structure","members":{"PublicKey":{"shape":"S33"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"PublicKey"}},"CreateStreamingDistribution":{"http":{"requestUri":"/2018-06-18/streaming-distribution","responseCode":201},"input":{"type":"structure","required":["StreamingDistributionConfig"],"members":{"StreamingDistributionConfig":{"shape":"S35","locationName":"StreamingDistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2018-06-18/"}}},"payload":"StreamingDistributionConfig"},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S39"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}},"CreateStreamingDistributionWithTags":{"http":{"requestUri":"/2018-06-18/streaming-distribution?WithTags","responseCode":201},"input":{"type":"structure","required":["StreamingDistributionConfigWithTags"],"members":{"StreamingDistributionConfigWithTags":{"locationName":"StreamingDistributionConfigWithTags","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2018-06-18/"},"type":"structure","required":["StreamingDistributionConfig","Tags"],"members":{"StreamingDistributionConfig":{"shape":"S35"},"Tags":{"shape":"S22"}}}},"payload":"StreamingDistributionConfigWithTags"},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S39"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}},"DeleteCloudFrontOriginAccessIdentity":{"http":{"method":"DELETE","requestUri":"/2018-06-18/origin-access-identity/cloudfront/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeleteDistribution":{"http":{"method":"DELETE","requestUri":"/2018-06-18/distribution/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeleteFieldLevelEncryptionConfig":{"http":{"method":"DELETE","requestUri":"/2018-06-18/field-level-encryption/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeleteFieldLevelEncryptionProfile":{"http":{"method":"DELETE","requestUri":"/2018-06-18/field-level-encryption-profile/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeletePublicKey":{"http":{"method":"DELETE","requestUri":"/2018-06-18/public-key/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeleteStreamingDistribution":{"http":{"method":"DELETE","requestUri":"/2018-06-18/streaming-distribution/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"GetCloudFrontOriginAccessIdentity":{"http":{"method":"GET","requestUri":"/2018-06-18/origin-access-identity/cloudfront/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentity":{"shape":"S5"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentity"}},"GetCloudFrontOriginAccessIdentityConfig":{"http":{"method":"GET","requestUri":"/2018-06-18/origin-access-identity/cloudfront/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentityConfig":{"shape":"S2"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentityConfig"}},"GetDistribution":{"http":{"method":"GET","requestUri":"/2018-06-18/distribution/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"Distribution":{"shape":"S1t"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"GetDistributionConfig":{"http":{"method":"GET","requestUri":"/2018-06-18/distribution/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"DistributionConfig":{"shape":"S7"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"DistributionConfig"}},"GetFieldLevelEncryption":{"http":{"method":"GET","requestUri":"/2018-06-18/field-level-encryption/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"FieldLevelEncryption":{"shape":"S2k"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryption"}},"GetFieldLevelEncryptionConfig":{"http":{"method":"GET","requestUri":"/2018-06-18/field-level-encryption/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"FieldLevelEncryptionConfig":{"shape":"S29"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryptionConfig"}},"GetFieldLevelEncryptionProfile":{"http":{"method":"GET","requestUri":"/2018-06-18/field-level-encryption-profile/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"FieldLevelEncryptionProfile":{"shape":"S2t"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryptionProfile"}},"GetFieldLevelEncryptionProfileConfig":{"http":{"method":"GET","requestUri":"/2018-06-18/field-level-encryption-profile/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"FieldLevelEncryptionProfileConfig":{"shape":"S2m"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryptionProfileConfig"}},"GetInvalidation":{"http":{"method":"GET","requestUri":"/2018-06-18/distribution/{DistributionId}/invalidation/{Id}"},"input":{"type":"structure","required":["DistributionId","Id"],"members":{"DistributionId":{"location":"uri","locationName":"DistributionId"},"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"Invalidation":{"shape":"S2z"}},"payload":"Invalidation"}},"GetPublicKey":{"http":{"method":"GET","requestUri":"/2018-06-18/public-key/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"PublicKey":{"shape":"S33"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"PublicKey"}},"GetPublicKeyConfig":{"http":{"method":"GET","requestUri":"/2018-06-18/public-key/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"PublicKeyConfig":{"shape":"S31"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"PublicKeyConfig"}},"GetStreamingDistribution":{"http":{"method":"GET","requestUri":"/2018-06-18/streaming-distribution/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S39"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}},"GetStreamingDistributionConfig":{"http":{"method":"GET","requestUri":"/2018-06-18/streaming-distribution/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"StreamingDistributionConfig":{"shape":"S35"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistributionConfig"}},"ListCloudFrontOriginAccessIdentities":{"http":{"method":"GET","requestUri":"/2018-06-18/origin-access-identity/cloudfront"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentityList":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CloudFrontOriginAccessIdentitySummary","type":"structure","required":["Id","S3CanonicalUserId","Comment"],"members":{"Id":{},"S3CanonicalUserId":{},"Comment":{}}}}}}},"payload":"CloudFrontOriginAccessIdentityList"}},"ListDistributions":{"http":{"method":"GET","requestUri":"/2018-06-18/distribution"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"DistributionList":{"shape":"S4g"}},"payload":"DistributionList"}},"ListDistributionsByWebACLId":{"http":{"method":"GET","requestUri":"/2018-06-18/distributionsByWebACLId/{WebACLId}"},"input":{"type":"structure","required":["WebACLId"],"members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"},"WebACLId":{"location":"uri","locationName":"WebACLId"}}},"output":{"type":"structure","members":{"DistributionList":{"shape":"S4g"}},"payload":"DistributionList"}},"ListFieldLevelEncryptionConfigs":{"http":{"method":"GET","requestUri":"/2018-06-18/field-level-encryption"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"FieldLevelEncryptionList":{"type":"structure","required":["MaxItems","Quantity"],"members":{"NextMarker":{},"MaxItems":{"type":"integer"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"FieldLevelEncryptionSummary","type":"structure","required":["Id","LastModifiedTime"],"members":{"Id":{},"LastModifiedTime":{"type":"timestamp"},"Comment":{},"QueryArgProfileConfig":{"shape":"S2a"},"ContentTypeProfileConfig":{"shape":"S2e"}}}}}}},"payload":"FieldLevelEncryptionList"}},"ListFieldLevelEncryptionProfiles":{"http":{"method":"GET","requestUri":"/2018-06-18/field-level-encryption-profile"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"FieldLevelEncryptionProfileList":{"type":"structure","required":["MaxItems","Quantity"],"members":{"NextMarker":{},"MaxItems":{"type":"integer"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"FieldLevelEncryptionProfileSummary","type":"structure","required":["Id","LastModifiedTime","Name","EncryptionEntities"],"members":{"Id":{},"LastModifiedTime":{"type":"timestamp"},"Name":{},"EncryptionEntities":{"shape":"S2n"},"Comment":{}}}}}}},"payload":"FieldLevelEncryptionProfileList"}},"ListInvalidations":{"http":{"method":"GET","requestUri":"/2018-06-18/distribution/{DistributionId}/invalidation"},"input":{"type":"structure","required":["DistributionId"],"members":{"DistributionId":{"location":"uri","locationName":"DistributionId"},"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"InvalidationList":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"InvalidationSummary","type":"structure","required":["Id","CreateTime","Status"],"members":{"Id":{},"CreateTime":{"type":"timestamp"},"Status":{}}}}}}},"payload":"InvalidationList"}},"ListPublicKeys":{"http":{"method":"GET","requestUri":"/2018-06-18/public-key"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"PublicKeyList":{"type":"structure","required":["MaxItems","Quantity"],"members":{"NextMarker":{},"MaxItems":{"type":"integer"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"PublicKeySummary","type":"structure","required":["Id","Name","CreatedTime","EncodedKey"],"members":{"Id":{},"Name":{},"CreatedTime":{"type":"timestamp"},"EncodedKey":{},"Comment":{}}}}}}},"payload":"PublicKeyList"}},"ListStreamingDistributions":{"http":{"method":"GET","requestUri":"/2018-06-18/streaming-distribution"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"StreamingDistributionList":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"StreamingDistributionSummary","type":"structure","required":["Id","ARN","Status","LastModifiedTime","DomainName","S3Origin","Aliases","TrustedSigners","Comment","PriceClass","Enabled"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"DomainName":{},"S3Origin":{"shape":"S36"},"Aliases":{"shape":"S8"},"TrustedSigners":{"shape":"Sy"},"Comment":{},"PriceClass":{},"Enabled":{"type":"boolean"}}}}}}},"payload":"StreamingDistributionList"}},"ListTagsForResource":{"http":{"method":"GET","requestUri":"/2018-06-18/tagging"},"input":{"type":"structure","required":["Resource"],"members":{"Resource":{"location":"querystring","locationName":"Resource"}}},"output":{"type":"structure","required":["Tags"],"members":{"Tags":{"shape":"S22"}},"payload":"Tags"}},"TagResource":{"http":{"requestUri":"/2018-06-18/tagging?Operation=Tag","responseCode":204},"input":{"type":"structure","required":["Resource","Tags"],"members":{"Resource":{"location":"querystring","locationName":"Resource"},"Tags":{"shape":"S22","locationName":"Tags","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2018-06-18/"}}},"payload":"Tags"}},"UntagResource":{"http":{"requestUri":"/2018-06-18/tagging?Operation=Untag","responseCode":204},"input":{"type":"structure","required":["Resource","TagKeys"],"members":{"Resource":{"location":"querystring","locationName":"Resource"},"TagKeys":{"locationName":"TagKeys","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2018-06-18/"},"type":"structure","members":{"Items":{"type":"list","member":{"locationName":"Key"}}}}},"payload":"TagKeys"}},"UpdateCloudFrontOriginAccessIdentity":{"http":{"method":"PUT","requestUri":"/2018-06-18/origin-access-identity/cloudfront/{Id}/config"},"input":{"type":"structure","required":["CloudFrontOriginAccessIdentityConfig","Id"],"members":{"CloudFrontOriginAccessIdentityConfig":{"shape":"S2","locationName":"CloudFrontOriginAccessIdentityConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2018-06-18/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"CloudFrontOriginAccessIdentityConfig"},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentity":{"shape":"S5"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentity"}},"UpdateDistribution":{"http":{"method":"PUT","requestUri":"/2018-06-18/distribution/{Id}/config"},"input":{"type":"structure","required":["DistributionConfig","Id"],"members":{"DistributionConfig":{"shape":"S7","locationName":"DistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2018-06-18/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"DistributionConfig"},"output":{"type":"structure","members":{"Distribution":{"shape":"S1t"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"UpdateFieldLevelEncryptionConfig":{"http":{"method":"PUT","requestUri":"/2018-06-18/field-level-encryption/{Id}/config"},"input":{"type":"structure","required":["FieldLevelEncryptionConfig","Id"],"members":{"FieldLevelEncryptionConfig":{"shape":"S29","locationName":"FieldLevelEncryptionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2018-06-18/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"FieldLevelEncryptionConfig"},"output":{"type":"structure","members":{"FieldLevelEncryption":{"shape":"S2k"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryption"}},"UpdateFieldLevelEncryptionProfile":{"http":{"method":"PUT","requestUri":"/2018-06-18/field-level-encryption-profile/{Id}/config"},"input":{"type":"structure","required":["FieldLevelEncryptionProfileConfig","Id"],"members":{"FieldLevelEncryptionProfileConfig":{"shape":"S2m","locationName":"FieldLevelEncryptionProfileConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2018-06-18/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"FieldLevelEncryptionProfileConfig"},"output":{"type":"structure","members":{"FieldLevelEncryptionProfile":{"shape":"S2t"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryptionProfile"}},"UpdatePublicKey":{"http":{"method":"PUT","requestUri":"/2018-06-18/public-key/{Id}/config"},"input":{"type":"structure","required":["PublicKeyConfig","Id"],"members":{"PublicKeyConfig":{"shape":"S31","locationName":"PublicKeyConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2018-06-18/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"PublicKeyConfig"},"output":{"type":"structure","members":{"PublicKey":{"shape":"S33"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"PublicKey"}},"UpdateStreamingDistribution":{"http":{"method":"PUT","requestUri":"/2018-06-18/streaming-distribution/{Id}/config"},"input":{"type":"structure","required":["StreamingDistributionConfig","Id"],"members":{"StreamingDistributionConfig":{"shape":"S35","locationName":"StreamingDistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2018-06-18/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"StreamingDistributionConfig"},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S39"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}}},"shapes":{"S2":{"type":"structure","required":["CallerReference","Comment"],"members":{"CallerReference":{},"Comment":{}}},"S5":{"type":"structure","required":["Id","S3CanonicalUserId"],"members":{"Id":{},"S3CanonicalUserId":{},"CloudFrontOriginAccessIdentityConfig":{"shape":"S2"}}},"S7":{"type":"structure","required":["CallerReference","Origins","DefaultCacheBehavior","Comment","Enabled"],"members":{"CallerReference":{},"Aliases":{"shape":"S8"},"DefaultRootObject":{},"Origins":{"shape":"Sb"},"DefaultCacheBehavior":{"shape":"Sn"},"CacheBehaviors":{"shape":"S1b"},"CustomErrorResponses":{"shape":"S1e"},"Comment":{},"Logging":{"type":"structure","required":["Enabled","IncludeCookies","Bucket","Prefix"],"members":{"Enabled":{"type":"boolean"},"IncludeCookies":{"type":"boolean"},"Bucket":{},"Prefix":{}}},"PriceClass":{},"Enabled":{"type":"boolean"},"ViewerCertificate":{"shape":"S1j"},"Restrictions":{"shape":"S1n"},"WebACLId":{},"HttpVersion":{},"IsIPV6Enabled":{"type":"boolean"}}},"S8":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CNAME"}}}},"Sb":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Origin","type":"structure","required":["Id","DomainName"],"members":{"Id":{},"DomainName":{},"OriginPath":{},"CustomHeaders":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"OriginCustomHeader","type":"structure","required":["HeaderName","HeaderValue"],"members":{"HeaderName":{},"HeaderValue":{}}}}}},"S3OriginConfig":{"type":"structure","required":["OriginAccessIdentity"],"members":{"OriginAccessIdentity":{}}},"CustomOriginConfig":{"type":"structure","required":["HTTPPort","HTTPSPort","OriginProtocolPolicy"],"members":{"HTTPPort":{"type":"integer"},"HTTPSPort":{"type":"integer"},"OriginProtocolPolicy":{},"OriginSslProtocols":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"SslProtocol"}}}},"OriginReadTimeout":{"type":"integer"},"OriginKeepaliveTimeout":{"type":"integer"}}}}}}}},"Sn":{"type":"structure","required":["TargetOriginId","ForwardedValues","TrustedSigners","ViewerProtocolPolicy","MinTTL"],"members":{"TargetOriginId":{},"ForwardedValues":{"shape":"So"},"TrustedSigners":{"shape":"Sy"},"ViewerProtocolPolicy":{},"MinTTL":{"type":"long"},"AllowedMethods":{"shape":"S12"},"SmoothStreaming":{"type":"boolean"},"DefaultTTL":{"type":"long"},"MaxTTL":{"type":"long"},"Compress":{"type":"boolean"},"LambdaFunctionAssociations":{"shape":"S16"},"FieldLevelEncryptionId":{}}},"So":{"type":"structure","required":["QueryString","Cookies"],"members":{"QueryString":{"type":"boolean"},"Cookies":{"type":"structure","required":["Forward"],"members":{"Forward":{},"WhitelistedNames":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Name"}}}}}},"Headers":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Name"}}}},"QueryStringCacheKeys":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Name"}}}}}},"Sy":{"type":"structure","required":["Enabled","Quantity"],"members":{"Enabled":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"AwsAccountNumber"}}}},"S12":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"shape":"S13"},"CachedMethods":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"shape":"S13"}}}}},"S13":{"type":"list","member":{"locationName":"Method"}},"S16":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"LambdaFunctionAssociation","type":"structure","required":["LambdaFunctionARN","EventType"],"members":{"LambdaFunctionARN":{},"EventType":{},"IncludeBody":{"type":"boolean"}}}}}},"S1b":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CacheBehavior","type":"structure","required":["PathPattern","TargetOriginId","ForwardedValues","TrustedSigners","ViewerProtocolPolicy","MinTTL"],"members":{"PathPattern":{},"TargetOriginId":{},"ForwardedValues":{"shape":"So"},"TrustedSigners":{"shape":"Sy"},"ViewerProtocolPolicy":{},"MinTTL":{"type":"long"},"AllowedMethods":{"shape":"S12"},"SmoothStreaming":{"type":"boolean"},"DefaultTTL":{"type":"long"},"MaxTTL":{"type":"long"},"Compress":{"type":"boolean"},"LambdaFunctionAssociations":{"shape":"S16"},"FieldLevelEncryptionId":{}}}}}},"S1e":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CustomErrorResponse","type":"structure","required":["ErrorCode"],"members":{"ErrorCode":{"type":"integer"},"ResponsePagePath":{},"ResponseCode":{},"ErrorCachingMinTTL":{"type":"long"}}}}}},"S1j":{"type":"structure","members":{"CloudFrontDefaultCertificate":{"type":"boolean"},"IAMCertificateId":{},"ACMCertificateArn":{},"SSLSupportMethod":{},"MinimumProtocolVersion":{},"Certificate":{"deprecated":true},"CertificateSource":{"deprecated":true}}},"S1n":{"type":"structure","required":["GeoRestriction"],"members":{"GeoRestriction":{"type":"structure","required":["RestrictionType","Quantity"],"members":{"RestrictionType":{},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Location"}}}}}},"S1t":{"type":"structure","required":["Id","ARN","Status","LastModifiedTime","InProgressInvalidationBatches","DomainName","ActiveTrustedSigners","DistributionConfig"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"InProgressInvalidationBatches":{"type":"integer"},"DomainName":{},"ActiveTrustedSigners":{"shape":"S1v"},"DistributionConfig":{"shape":"S7"}}},"S1v":{"type":"structure","required":["Enabled","Quantity"],"members":{"Enabled":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Signer","type":"structure","members":{"AwsAccountNumber":{},"KeyPairIds":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"KeyPairId"}}}}}}}}},"S22":{"type":"structure","members":{"Items":{"type":"list","member":{"locationName":"Tag","type":"structure","required":["Key"],"members":{"Key":{},"Value":{}}}}}},"S29":{"type":"structure","required":["CallerReference"],"members":{"CallerReference":{},"Comment":{},"QueryArgProfileConfig":{"shape":"S2a"},"ContentTypeProfileConfig":{"shape":"S2e"}}},"S2a":{"type":"structure","required":["ForwardWhenQueryArgProfileIsUnknown"],"members":{"ForwardWhenQueryArgProfileIsUnknown":{"type":"boolean"},"QueryArgProfiles":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"QueryArgProfile","type":"structure","required":["QueryArg","ProfileId"],"members":{"QueryArg":{},"ProfileId":{}}}}}}}},"S2e":{"type":"structure","required":["ForwardWhenContentTypeIsUnknown"],"members":{"ForwardWhenContentTypeIsUnknown":{"type":"boolean"},"ContentTypeProfiles":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"ContentTypeProfile","type":"structure","required":["Format","ContentType"],"members":{"Format":{},"ProfileId":{},"ContentType":{}}}}}}}},"S2k":{"type":"structure","required":["Id","LastModifiedTime","FieldLevelEncryptionConfig"],"members":{"Id":{},"LastModifiedTime":{"type":"timestamp"},"FieldLevelEncryptionConfig":{"shape":"S29"}}},"S2m":{"type":"structure","required":["Name","CallerReference","EncryptionEntities"],"members":{"Name":{},"CallerReference":{},"Comment":{},"EncryptionEntities":{"shape":"S2n"}}},"S2n":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"EncryptionEntity","type":"structure","required":["PublicKeyId","ProviderId","FieldPatterns"],"members":{"PublicKeyId":{},"ProviderId":{},"FieldPatterns":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"FieldPattern"}}}}}}}}},"S2t":{"type":"structure","required":["Id","LastModifiedTime","FieldLevelEncryptionProfileConfig"],"members":{"Id":{},"LastModifiedTime":{"type":"timestamp"},"FieldLevelEncryptionProfileConfig":{"shape":"S2m"}}},"S2v":{"type":"structure","required":["Paths","CallerReference"],"members":{"Paths":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Path"}}}},"CallerReference":{}}},"S2z":{"type":"structure","required":["Id","Status","CreateTime","InvalidationBatch"],"members":{"Id":{},"Status":{},"CreateTime":{"type":"timestamp"},"InvalidationBatch":{"shape":"S2v"}}},"S31":{"type":"structure","required":["CallerReference","Name","EncodedKey"],"members":{"CallerReference":{},"Name":{},"EncodedKey":{},"Comment":{}}},"S33":{"type":"structure","required":["Id","CreatedTime","PublicKeyConfig"],"members":{"Id":{},"CreatedTime":{"type":"timestamp"},"PublicKeyConfig":{"shape":"S31"}}},"S35":{"type":"structure","required":["CallerReference","S3Origin","Comment","TrustedSigners","Enabled"],"members":{"CallerReference":{},"S3Origin":{"shape":"S36"},"Aliases":{"shape":"S8"},"Comment":{},"Logging":{"type":"structure","required":["Enabled","Bucket","Prefix"],"members":{"Enabled":{"type":"boolean"},"Bucket":{},"Prefix":{}}},"TrustedSigners":{"shape":"Sy"},"PriceClass":{},"Enabled":{"type":"boolean"}}},"S36":{"type":"structure","required":["DomainName","OriginAccessIdentity"],"members":{"DomainName":{},"OriginAccessIdentity":{}}},"S39":{"type":"structure","required":["Id","ARN","Status","DomainName","ActiveTrustedSigners","StreamingDistributionConfig"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"DomainName":{},"ActiveTrustedSigners":{"shape":"S1v"},"StreamingDistributionConfig":{"shape":"S35"}}},"S4g":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"DistributionSummary","type":"structure","required":["Id","ARN","Status","LastModifiedTime","DomainName","Aliases","Origins","DefaultCacheBehavior","CacheBehaviors","CustomErrorResponses","Comment","PriceClass","Enabled","ViewerCertificate","Restrictions","WebACLId","HttpVersion","IsIPV6Enabled"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"DomainName":{},"Aliases":{"shape":"S8"},"Origins":{"shape":"Sb"},"DefaultCacheBehavior":{"shape":"Sn"},"CacheBehaviors":{"shape":"S1b"},"CustomErrorResponses":{"shape":"S1e"},"Comment":{},"PriceClass":{},"Enabled":{"type":"boolean"},"ViewerCertificate":{"shape":"S1j"},"Restrictions":{"shape":"S1n"},"WebACLId":{},"HttpVersion":{},"IsIPV6Enabled":{"type":"boolean"}}}}}}}}

/***/ }),
/* 96 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"ListCloudFrontOriginAccessIdentities":{"input_token":"Marker","limit_key":"MaxItems","more_results":"CloudFrontOriginAccessIdentityList.IsTruncated","output_token":"CloudFrontOriginAccessIdentityList.NextMarker","result_key":"CloudFrontOriginAccessIdentityList.Items"},"ListDistributions":{"input_token":"Marker","limit_key":"MaxItems","more_results":"DistributionList.IsTruncated","output_token":"DistributionList.NextMarker","result_key":"DistributionList.Items"},"ListInvalidations":{"input_token":"Marker","limit_key":"MaxItems","more_results":"InvalidationList.IsTruncated","output_token":"InvalidationList.NextMarker","result_key":"InvalidationList.Items"},"ListStreamingDistributions":{"input_token":"Marker","limit_key":"MaxItems","more_results":"StreamingDistributionList.IsTruncated","output_token":"StreamingDistributionList.NextMarker","result_key":"StreamingDistributionList.Items"}}}

/***/ }),
/* 97 */
/***/ (function(module, exports) {

	module.exports = {"version":2,"waiters":{"DistributionDeployed":{"delay":60,"operation":"GetDistribution","maxAttempts":25,"description":"Wait until a distribution is deployed.","acceptors":[{"expected":"Deployed","matcher":"path","state":"success","argument":"Distribution.Status"}]},"InvalidationCompleted":{"delay":20,"operation":"GetInvalidation","maxAttempts":30,"description":"Wait until an invalidation has completed.","acceptors":[{"expected":"Completed","matcher":"path","state":"success","argument":"Invalidation.Status"}]},"StreamingDistributionDeployed":{"delay":60,"operation":"GetStreamingDistribution","maxAttempts":25,"description":"Wait until a streaming distribution is deployed.","acceptors":[{"expected":"Deployed","matcher":"path","state":"success","argument":"StreamingDistribution.Status"}]}}}

/***/ }),
/* 98 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2018-11-05","endpointPrefix":"cloudfront","globalEndpoint":"cloudfront.amazonaws.com","protocol":"rest-xml","serviceAbbreviation":"CloudFront","serviceFullName":"Amazon CloudFront","serviceId":"CloudFront","signatureVersion":"v4","uid":"cloudfront-2018-11-05"},"operations":{"CreateCloudFrontOriginAccessIdentity":{"http":{"requestUri":"/2018-11-05/origin-access-identity/cloudfront","responseCode":201},"input":{"type":"structure","required":["CloudFrontOriginAccessIdentityConfig"],"members":{"CloudFrontOriginAccessIdentityConfig":{"shape":"S2","locationName":"CloudFrontOriginAccessIdentityConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2018-11-05/"}}},"payload":"CloudFrontOriginAccessIdentityConfig"},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentity":{"shape":"S5"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentity"}},"CreateDistribution":{"http":{"requestUri":"/2018-11-05/distribution","responseCode":201},"input":{"type":"structure","required":["DistributionConfig"],"members":{"DistributionConfig":{"shape":"S7","locationName":"DistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2018-11-05/"}}},"payload":"DistributionConfig"},"output":{"type":"structure","members":{"Distribution":{"shape":"S22"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"CreateDistributionWithTags":{"http":{"requestUri":"/2018-11-05/distribution?WithTags","responseCode":201},"input":{"type":"structure","required":["DistributionConfigWithTags"],"members":{"DistributionConfigWithTags":{"locationName":"DistributionConfigWithTags","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2018-11-05/"},"type":"structure","required":["DistributionConfig","Tags"],"members":{"DistributionConfig":{"shape":"S7"},"Tags":{"shape":"S2b"}}}},"payload":"DistributionConfigWithTags"},"output":{"type":"structure","members":{"Distribution":{"shape":"S22"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"CreateFieldLevelEncryptionConfig":{"http":{"requestUri":"/2018-11-05/field-level-encryption","responseCode":201},"input":{"type":"structure","required":["FieldLevelEncryptionConfig"],"members":{"FieldLevelEncryptionConfig":{"shape":"S2i","locationName":"FieldLevelEncryptionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2018-11-05/"}}},"payload":"FieldLevelEncryptionConfig"},"output":{"type":"structure","members":{"FieldLevelEncryption":{"shape":"S2t"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryption"}},"CreateFieldLevelEncryptionProfile":{"http":{"requestUri":"/2018-11-05/field-level-encryption-profile","responseCode":201},"input":{"type":"structure","required":["FieldLevelEncryptionProfileConfig"],"members":{"FieldLevelEncryptionProfileConfig":{"shape":"S2v","locationName":"FieldLevelEncryptionProfileConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2018-11-05/"}}},"payload":"FieldLevelEncryptionProfileConfig"},"output":{"type":"structure","members":{"FieldLevelEncryptionProfile":{"shape":"S32"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryptionProfile"}},"CreateInvalidation":{"http":{"requestUri":"/2018-11-05/distribution/{DistributionId}/invalidation","responseCode":201},"input":{"type":"structure","required":["DistributionId","InvalidationBatch"],"members":{"DistributionId":{"location":"uri","locationName":"DistributionId"},"InvalidationBatch":{"shape":"S34","locationName":"InvalidationBatch","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2018-11-05/"}}},"payload":"InvalidationBatch"},"output":{"type":"structure","members":{"Location":{"location":"header","locationName":"Location"},"Invalidation":{"shape":"S38"}},"payload":"Invalidation"}},"CreatePublicKey":{"http":{"requestUri":"/2018-11-05/public-key","responseCode":201},"input":{"type":"structure","required":["PublicKeyConfig"],"members":{"PublicKeyConfig":{"shape":"S3a","locationName":"PublicKeyConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2018-11-05/"}}},"payload":"PublicKeyConfig"},"output":{"type":"structure","members":{"PublicKey":{"shape":"S3c"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"PublicKey"}},"CreateStreamingDistribution":{"http":{"requestUri":"/2018-11-05/streaming-distribution","responseCode":201},"input":{"type":"structure","required":["StreamingDistributionConfig"],"members":{"StreamingDistributionConfig":{"shape":"S3e","locationName":"StreamingDistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2018-11-05/"}}},"payload":"StreamingDistributionConfig"},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S3i"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}},"CreateStreamingDistributionWithTags":{"http":{"requestUri":"/2018-11-05/streaming-distribution?WithTags","responseCode":201},"input":{"type":"structure","required":["StreamingDistributionConfigWithTags"],"members":{"StreamingDistributionConfigWithTags":{"locationName":"StreamingDistributionConfigWithTags","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2018-11-05/"},"type":"structure","required":["StreamingDistributionConfig","Tags"],"members":{"StreamingDistributionConfig":{"shape":"S3e"},"Tags":{"shape":"S2b"}}}},"payload":"StreamingDistributionConfigWithTags"},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S3i"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}},"DeleteCloudFrontOriginAccessIdentity":{"http":{"method":"DELETE","requestUri":"/2018-11-05/origin-access-identity/cloudfront/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeleteDistribution":{"http":{"method":"DELETE","requestUri":"/2018-11-05/distribution/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeleteFieldLevelEncryptionConfig":{"http":{"method":"DELETE","requestUri":"/2018-11-05/field-level-encryption/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeleteFieldLevelEncryptionProfile":{"http":{"method":"DELETE","requestUri":"/2018-11-05/field-level-encryption-profile/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeletePublicKey":{"http":{"method":"DELETE","requestUri":"/2018-11-05/public-key/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeleteStreamingDistribution":{"http":{"method":"DELETE","requestUri":"/2018-11-05/streaming-distribution/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"GetCloudFrontOriginAccessIdentity":{"http":{"method":"GET","requestUri":"/2018-11-05/origin-access-identity/cloudfront/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentity":{"shape":"S5"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentity"}},"GetCloudFrontOriginAccessIdentityConfig":{"http":{"method":"GET","requestUri":"/2018-11-05/origin-access-identity/cloudfront/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentityConfig":{"shape":"S2"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentityConfig"}},"GetDistribution":{"http":{"method":"GET","requestUri":"/2018-11-05/distribution/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"Distribution":{"shape":"S22"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"GetDistributionConfig":{"http":{"method":"GET","requestUri":"/2018-11-05/distribution/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"DistributionConfig":{"shape":"S7"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"DistributionConfig"}},"GetFieldLevelEncryption":{"http":{"method":"GET","requestUri":"/2018-11-05/field-level-encryption/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"FieldLevelEncryption":{"shape":"S2t"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryption"}},"GetFieldLevelEncryptionConfig":{"http":{"method":"GET","requestUri":"/2018-11-05/field-level-encryption/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"FieldLevelEncryptionConfig":{"shape":"S2i"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryptionConfig"}},"GetFieldLevelEncryptionProfile":{"http":{"method":"GET","requestUri":"/2018-11-05/field-level-encryption-profile/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"FieldLevelEncryptionProfile":{"shape":"S32"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryptionProfile"}},"GetFieldLevelEncryptionProfileConfig":{"http":{"method":"GET","requestUri":"/2018-11-05/field-level-encryption-profile/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"FieldLevelEncryptionProfileConfig":{"shape":"S2v"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryptionProfileConfig"}},"GetInvalidation":{"http":{"method":"GET","requestUri":"/2018-11-05/distribution/{DistributionId}/invalidation/{Id}"},"input":{"type":"structure","required":["DistributionId","Id"],"members":{"DistributionId":{"location":"uri","locationName":"DistributionId"},"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"Invalidation":{"shape":"S38"}},"payload":"Invalidation"}},"GetPublicKey":{"http":{"method":"GET","requestUri":"/2018-11-05/public-key/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"PublicKey":{"shape":"S3c"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"PublicKey"}},"GetPublicKeyConfig":{"http":{"method":"GET","requestUri":"/2018-11-05/public-key/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"PublicKeyConfig":{"shape":"S3a"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"PublicKeyConfig"}},"GetStreamingDistribution":{"http":{"method":"GET","requestUri":"/2018-11-05/streaming-distribution/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S3i"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}},"GetStreamingDistributionConfig":{"http":{"method":"GET","requestUri":"/2018-11-05/streaming-distribution/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"StreamingDistributionConfig":{"shape":"S3e"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistributionConfig"}},"ListCloudFrontOriginAccessIdentities":{"http":{"method":"GET","requestUri":"/2018-11-05/origin-access-identity/cloudfront"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentityList":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CloudFrontOriginAccessIdentitySummary","type":"structure","required":["Id","S3CanonicalUserId","Comment"],"members":{"Id":{},"S3CanonicalUserId":{},"Comment":{}}}}}}},"payload":"CloudFrontOriginAccessIdentityList"}},"ListDistributions":{"http":{"method":"GET","requestUri":"/2018-11-05/distribution"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"DistributionList":{"shape":"S4p"}},"payload":"DistributionList"}},"ListDistributionsByWebACLId":{"http":{"method":"GET","requestUri":"/2018-11-05/distributionsByWebACLId/{WebACLId}"},"input":{"type":"structure","required":["WebACLId"],"members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"},"WebACLId":{"location":"uri","locationName":"WebACLId"}}},"output":{"type":"structure","members":{"DistributionList":{"shape":"S4p"}},"payload":"DistributionList"}},"ListFieldLevelEncryptionConfigs":{"http":{"method":"GET","requestUri":"/2018-11-05/field-level-encryption"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"FieldLevelEncryptionList":{"type":"structure","required":["MaxItems","Quantity"],"members":{"NextMarker":{},"MaxItems":{"type":"integer"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"FieldLevelEncryptionSummary","type":"structure","required":["Id","LastModifiedTime"],"members":{"Id":{},"LastModifiedTime":{"type":"timestamp"},"Comment":{},"QueryArgProfileConfig":{"shape":"S2j"},"ContentTypeProfileConfig":{"shape":"S2n"}}}}}}},"payload":"FieldLevelEncryptionList"}},"ListFieldLevelEncryptionProfiles":{"http":{"method":"GET","requestUri":"/2018-11-05/field-level-encryption-profile"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"FieldLevelEncryptionProfileList":{"type":"structure","required":["MaxItems","Quantity"],"members":{"NextMarker":{},"MaxItems":{"type":"integer"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"FieldLevelEncryptionProfileSummary","type":"structure","required":["Id","LastModifiedTime","Name","EncryptionEntities"],"members":{"Id":{},"LastModifiedTime":{"type":"timestamp"},"Name":{},"EncryptionEntities":{"shape":"S2w"},"Comment":{}}}}}}},"payload":"FieldLevelEncryptionProfileList"}},"ListInvalidations":{"http":{"method":"GET","requestUri":"/2018-11-05/distribution/{DistributionId}/invalidation"},"input":{"type":"structure","required":["DistributionId"],"members":{"DistributionId":{"location":"uri","locationName":"DistributionId"},"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"InvalidationList":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"InvalidationSummary","type":"structure","required":["Id","CreateTime","Status"],"members":{"Id":{},"CreateTime":{"type":"timestamp"},"Status":{}}}}}}},"payload":"InvalidationList"}},"ListPublicKeys":{"http":{"method":"GET","requestUri":"/2018-11-05/public-key"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"PublicKeyList":{"type":"structure","required":["MaxItems","Quantity"],"members":{"NextMarker":{},"MaxItems":{"type":"integer"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"PublicKeySummary","type":"structure","required":["Id","Name","CreatedTime","EncodedKey"],"members":{"Id":{},"Name":{},"CreatedTime":{"type":"timestamp"},"EncodedKey":{},"Comment":{}}}}}}},"payload":"PublicKeyList"}},"ListStreamingDistributions":{"http":{"method":"GET","requestUri":"/2018-11-05/streaming-distribution"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"StreamingDistributionList":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"StreamingDistributionSummary","type":"structure","required":["Id","ARN","Status","LastModifiedTime","DomainName","S3Origin","Aliases","TrustedSigners","Comment","PriceClass","Enabled"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"DomainName":{},"S3Origin":{"shape":"S3f"},"Aliases":{"shape":"S8"},"TrustedSigners":{"shape":"S17"},"Comment":{},"PriceClass":{},"Enabled":{"type":"boolean"}}}}}}},"payload":"StreamingDistributionList"}},"ListTagsForResource":{"http":{"method":"GET","requestUri":"/2018-11-05/tagging"},"input":{"type":"structure","required":["Resource"],"members":{"Resource":{"location":"querystring","locationName":"Resource"}}},"output":{"type":"structure","required":["Tags"],"members":{"Tags":{"shape":"S2b"}},"payload":"Tags"}},"TagResource":{"http":{"requestUri":"/2018-11-05/tagging?Operation=Tag","responseCode":204},"input":{"type":"structure","required":["Resource","Tags"],"members":{"Resource":{"location":"querystring","locationName":"Resource"},"Tags":{"shape":"S2b","locationName":"Tags","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2018-11-05/"}}},"payload":"Tags"}},"UntagResource":{"http":{"requestUri":"/2018-11-05/tagging?Operation=Untag","responseCode":204},"input":{"type":"structure","required":["Resource","TagKeys"],"members":{"Resource":{"location":"querystring","locationName":"Resource"},"TagKeys":{"locationName":"TagKeys","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2018-11-05/"},"type":"structure","members":{"Items":{"type":"list","member":{"locationName":"Key"}}}}},"payload":"TagKeys"}},"UpdateCloudFrontOriginAccessIdentity":{"http":{"method":"PUT","requestUri":"/2018-11-05/origin-access-identity/cloudfront/{Id}/config"},"input":{"type":"structure","required":["CloudFrontOriginAccessIdentityConfig","Id"],"members":{"CloudFrontOriginAccessIdentityConfig":{"shape":"S2","locationName":"CloudFrontOriginAccessIdentityConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2018-11-05/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"CloudFrontOriginAccessIdentityConfig"},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentity":{"shape":"S5"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentity"}},"UpdateDistribution":{"http":{"method":"PUT","requestUri":"/2018-11-05/distribution/{Id}/config"},"input":{"type":"structure","required":["DistributionConfig","Id"],"members":{"DistributionConfig":{"shape":"S7","locationName":"DistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2018-11-05/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"DistributionConfig"},"output":{"type":"structure","members":{"Distribution":{"shape":"S22"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"UpdateFieldLevelEncryptionConfig":{"http":{"method":"PUT","requestUri":"/2018-11-05/field-level-encryption/{Id}/config"},"input":{"type":"structure","required":["FieldLevelEncryptionConfig","Id"],"members":{"FieldLevelEncryptionConfig":{"shape":"S2i","locationName":"FieldLevelEncryptionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2018-11-05/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"FieldLevelEncryptionConfig"},"output":{"type":"structure","members":{"FieldLevelEncryption":{"shape":"S2t"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryption"}},"UpdateFieldLevelEncryptionProfile":{"http":{"method":"PUT","requestUri":"/2018-11-05/field-level-encryption-profile/{Id}/config"},"input":{"type":"structure","required":["FieldLevelEncryptionProfileConfig","Id"],"members":{"FieldLevelEncryptionProfileConfig":{"shape":"S2v","locationName":"FieldLevelEncryptionProfileConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2018-11-05/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"FieldLevelEncryptionProfileConfig"},"output":{"type":"structure","members":{"FieldLevelEncryptionProfile":{"shape":"S32"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryptionProfile"}},"UpdatePublicKey":{"http":{"method":"PUT","requestUri":"/2018-11-05/public-key/{Id}/config"},"input":{"type":"structure","required":["PublicKeyConfig","Id"],"members":{"PublicKeyConfig":{"shape":"S3a","locationName":"PublicKeyConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2018-11-05/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"PublicKeyConfig"},"output":{"type":"structure","members":{"PublicKey":{"shape":"S3c"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"PublicKey"}},"UpdateStreamingDistribution":{"http":{"method":"PUT","requestUri":"/2018-11-05/streaming-distribution/{Id}/config"},"input":{"type":"structure","required":["StreamingDistributionConfig","Id"],"members":{"StreamingDistributionConfig":{"shape":"S3e","locationName":"StreamingDistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2018-11-05/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"StreamingDistributionConfig"},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S3i"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}}},"shapes":{"S2":{"type":"structure","required":["CallerReference","Comment"],"members":{"CallerReference":{},"Comment":{}}},"S5":{"type":"structure","required":["Id","S3CanonicalUserId"],"members":{"Id":{},"S3CanonicalUserId":{},"CloudFrontOriginAccessIdentityConfig":{"shape":"S2"}}},"S7":{"type":"structure","required":["CallerReference","Origins","DefaultCacheBehavior","Comment","Enabled"],"members":{"CallerReference":{},"Aliases":{"shape":"S8"},"DefaultRootObject":{},"Origins":{"shape":"Sb"},"OriginGroups":{"shape":"Sn"},"DefaultCacheBehavior":{"shape":"Sw"},"CacheBehaviors":{"shape":"S1k"},"CustomErrorResponses":{"shape":"S1n"},"Comment":{},"Logging":{"type":"structure","required":["Enabled","IncludeCookies","Bucket","Prefix"],"members":{"Enabled":{"type":"boolean"},"IncludeCookies":{"type":"boolean"},"Bucket":{},"Prefix":{}}},"PriceClass":{},"Enabled":{"type":"boolean"},"ViewerCertificate":{"shape":"S1s"},"Restrictions":{"shape":"S1w"},"WebACLId":{},"HttpVersion":{},"IsIPV6Enabled":{"type":"boolean"}}},"S8":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CNAME"}}}},"Sb":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Origin","type":"structure","required":["Id","DomainName"],"members":{"Id":{},"DomainName":{},"OriginPath":{},"CustomHeaders":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"OriginCustomHeader","type":"structure","required":["HeaderName","HeaderValue"],"members":{"HeaderName":{},"HeaderValue":{}}}}}},"S3OriginConfig":{"type":"structure","required":["OriginAccessIdentity"],"members":{"OriginAccessIdentity":{}}},"CustomOriginConfig":{"type":"structure","required":["HTTPPort","HTTPSPort","OriginProtocolPolicy"],"members":{"HTTPPort":{"type":"integer"},"HTTPSPort":{"type":"integer"},"OriginProtocolPolicy":{},"OriginSslProtocols":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"SslProtocol"}}}},"OriginReadTimeout":{"type":"integer"},"OriginKeepaliveTimeout":{"type":"integer"}}}}}}}},"Sn":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"OriginGroup","type":"structure","required":["Id","FailoverCriteria","Members"],"members":{"Id":{},"FailoverCriteria":{"type":"structure","required":["StatusCodes"],"members":{"StatusCodes":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"StatusCode","type":"integer"}}}}}},"Members":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"OriginGroupMember","type":"structure","required":["OriginId"],"members":{"OriginId":{}}}}}}}}}}},"Sw":{"type":"structure","required":["TargetOriginId","ForwardedValues","TrustedSigners","ViewerProtocolPolicy","MinTTL"],"members":{"TargetOriginId":{},"ForwardedValues":{"shape":"Sx"},"TrustedSigners":{"shape":"S17"},"ViewerProtocolPolicy":{},"MinTTL":{"type":"long"},"AllowedMethods":{"shape":"S1b"},"SmoothStreaming":{"type":"boolean"},"DefaultTTL":{"type":"long"},"MaxTTL":{"type":"long"},"Compress":{"type":"boolean"},"LambdaFunctionAssociations":{"shape":"S1f"},"FieldLevelEncryptionId":{}}},"Sx":{"type":"structure","required":["QueryString","Cookies"],"members":{"QueryString":{"type":"boolean"},"Cookies":{"type":"structure","required":["Forward"],"members":{"Forward":{},"WhitelistedNames":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Name"}}}}}},"Headers":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Name"}}}},"QueryStringCacheKeys":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Name"}}}}}},"S17":{"type":"structure","required":["Enabled","Quantity"],"members":{"Enabled":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"AwsAccountNumber"}}}},"S1b":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"shape":"S1c"},"CachedMethods":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"shape":"S1c"}}}}},"S1c":{"type":"list","member":{"locationName":"Method"}},"S1f":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"LambdaFunctionAssociation","type":"structure","required":["LambdaFunctionARN","EventType"],"members":{"LambdaFunctionARN":{},"EventType":{},"IncludeBody":{"type":"boolean"}}}}}},"S1k":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CacheBehavior","type":"structure","required":["PathPattern","TargetOriginId","ForwardedValues","TrustedSigners","ViewerProtocolPolicy","MinTTL"],"members":{"PathPattern":{},"TargetOriginId":{},"ForwardedValues":{"shape":"Sx"},"TrustedSigners":{"shape":"S17"},"ViewerProtocolPolicy":{},"MinTTL":{"type":"long"},"AllowedMethods":{"shape":"S1b"},"SmoothStreaming":{"type":"boolean"},"DefaultTTL":{"type":"long"},"MaxTTL":{"type":"long"},"Compress":{"type":"boolean"},"LambdaFunctionAssociations":{"shape":"S1f"},"FieldLevelEncryptionId":{}}}}}},"S1n":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CustomErrorResponse","type":"structure","required":["ErrorCode"],"members":{"ErrorCode":{"type":"integer"},"ResponsePagePath":{},"ResponseCode":{},"ErrorCachingMinTTL":{"type":"long"}}}}}},"S1s":{"type":"structure","members":{"CloudFrontDefaultCertificate":{"type":"boolean"},"IAMCertificateId":{},"ACMCertificateArn":{},"SSLSupportMethod":{},"MinimumProtocolVersion":{},"Certificate":{"deprecated":true},"CertificateSource":{"deprecated":true}}},"S1w":{"type":"structure","required":["GeoRestriction"],"members":{"GeoRestriction":{"type":"structure","required":["RestrictionType","Quantity"],"members":{"RestrictionType":{},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Location"}}}}}},"S22":{"type":"structure","required":["Id","ARN","Status","LastModifiedTime","InProgressInvalidationBatches","DomainName","ActiveTrustedSigners","DistributionConfig"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"InProgressInvalidationBatches":{"type":"integer"},"DomainName":{},"ActiveTrustedSigners":{"shape":"S24"},"DistributionConfig":{"shape":"S7"}}},"S24":{"type":"structure","required":["Enabled","Quantity"],"members":{"Enabled":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Signer","type":"structure","members":{"AwsAccountNumber":{},"KeyPairIds":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"KeyPairId"}}}}}}}}},"S2b":{"type":"structure","members":{"Items":{"type":"list","member":{"locationName":"Tag","type":"structure","required":["Key"],"members":{"Key":{},"Value":{}}}}}},"S2i":{"type":"structure","required":["CallerReference"],"members":{"CallerReference":{},"Comment":{},"QueryArgProfileConfig":{"shape":"S2j"},"ContentTypeProfileConfig":{"shape":"S2n"}}},"S2j":{"type":"structure","required":["ForwardWhenQueryArgProfileIsUnknown"],"members":{"ForwardWhenQueryArgProfileIsUnknown":{"type":"boolean"},"QueryArgProfiles":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"QueryArgProfile","type":"structure","required":["QueryArg","ProfileId"],"members":{"QueryArg":{},"ProfileId":{}}}}}}}},"S2n":{"type":"structure","required":["ForwardWhenContentTypeIsUnknown"],"members":{"ForwardWhenContentTypeIsUnknown":{"type":"boolean"},"ContentTypeProfiles":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"ContentTypeProfile","type":"structure","required":["Format","ContentType"],"members":{"Format":{},"ProfileId":{},"ContentType":{}}}}}}}},"S2t":{"type":"structure","required":["Id","LastModifiedTime","FieldLevelEncryptionConfig"],"members":{"Id":{},"LastModifiedTime":{"type":"timestamp"},"FieldLevelEncryptionConfig":{"shape":"S2i"}}},"S2v":{"type":"structure","required":["Name","CallerReference","EncryptionEntities"],"members":{"Name":{},"CallerReference":{},"Comment":{},"EncryptionEntities":{"shape":"S2w"}}},"S2w":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"EncryptionEntity","type":"structure","required":["PublicKeyId","ProviderId","FieldPatterns"],"members":{"PublicKeyId":{},"ProviderId":{},"FieldPatterns":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"FieldPattern"}}}}}}}}},"S32":{"type":"structure","required":["Id","LastModifiedTime","FieldLevelEncryptionProfileConfig"],"members":{"Id":{},"LastModifiedTime":{"type":"timestamp"},"FieldLevelEncryptionProfileConfig":{"shape":"S2v"}}},"S34":{"type":"structure","required":["Paths","CallerReference"],"members":{"Paths":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Path"}}}},"CallerReference":{}}},"S38":{"type":"structure","required":["Id","Status","CreateTime","InvalidationBatch"],"members":{"Id":{},"Status":{},"CreateTime":{"type":"timestamp"},"InvalidationBatch":{"shape":"S34"}}},"S3a":{"type":"structure","required":["CallerReference","Name","EncodedKey"],"members":{"CallerReference":{},"Name":{},"EncodedKey":{},"Comment":{}}},"S3c":{"type":"structure","required":["Id","CreatedTime","PublicKeyConfig"],"members":{"Id":{},"CreatedTime":{"type":"timestamp"},"PublicKeyConfig":{"shape":"S3a"}}},"S3e":{"type":"structure","required":["CallerReference","S3Origin","Comment","TrustedSigners","Enabled"],"members":{"CallerReference":{},"S3Origin":{"shape":"S3f"},"Aliases":{"shape":"S8"},"Comment":{},"Logging":{"type":"structure","required":["Enabled","Bucket","Prefix"],"members":{"Enabled":{"type":"boolean"},"Bucket":{},"Prefix":{}}},"TrustedSigners":{"shape":"S17"},"PriceClass":{},"Enabled":{"type":"boolean"}}},"S3f":{"type":"structure","required":["DomainName","OriginAccessIdentity"],"members":{"DomainName":{},"OriginAccessIdentity":{}}},"S3i":{"type":"structure","required":["Id","ARN","Status","DomainName","ActiveTrustedSigners","StreamingDistributionConfig"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"DomainName":{},"ActiveTrustedSigners":{"shape":"S24"},"StreamingDistributionConfig":{"shape":"S3e"}}},"S4p":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"DistributionSummary","type":"structure","required":["Id","ARN","Status","LastModifiedTime","DomainName","Aliases","Origins","DefaultCacheBehavior","CacheBehaviors","CustomErrorResponses","Comment","PriceClass","Enabled","ViewerCertificate","Restrictions","WebACLId","HttpVersion","IsIPV6Enabled"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"DomainName":{},"Aliases":{"shape":"S8"},"Origins":{"shape":"Sb"},"OriginGroups":{"shape":"Sn"},"DefaultCacheBehavior":{"shape":"Sw"},"CacheBehaviors":{"shape":"S1k"},"CustomErrorResponses":{"shape":"S1n"},"Comment":{},"PriceClass":{},"Enabled":{"type":"boolean"},"ViewerCertificate":{"shape":"S1s"},"Restrictions":{"shape":"S1w"},"WebACLId":{},"HttpVersion":{},"IsIPV6Enabled":{"type":"boolean"}}}}}}}}

/***/ }),
/* 99 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"ListCloudFrontOriginAccessIdentities":{"input_token":"Marker","limit_key":"MaxItems","more_results":"CloudFrontOriginAccessIdentityList.IsTruncated","output_token":"CloudFrontOriginAccessIdentityList.NextMarker","result_key":"CloudFrontOriginAccessIdentityList.Items"},"ListDistributions":{"input_token":"Marker","limit_key":"MaxItems","more_results":"DistributionList.IsTruncated","output_token":"DistributionList.NextMarker","result_key":"DistributionList.Items"},"ListInvalidations":{"input_token":"Marker","limit_key":"MaxItems","more_results":"InvalidationList.IsTruncated","output_token":"InvalidationList.NextMarker","result_key":"InvalidationList.Items"},"ListStreamingDistributions":{"input_token":"Marker","limit_key":"MaxItems","more_results":"StreamingDistributionList.IsTruncated","output_token":"StreamingDistributionList.NextMarker","result_key":"StreamingDistributionList.Items"}}}

/***/ }),
/* 100 */
/***/ (function(module, exports) {

	module.exports = {"version":2,"waiters":{"DistributionDeployed":{"delay":60,"operation":"GetDistribution","maxAttempts":25,"description":"Wait until a distribution is deployed.","acceptors":[{"expected":"Deployed","matcher":"path","state":"success","argument":"Distribution.Status"}]},"InvalidationCompleted":{"delay":20,"operation":"GetInvalidation","maxAttempts":30,"description":"Wait until an invalidation has completed.","acceptors":[{"expected":"Completed","matcher":"path","state":"success","argument":"Invalidation.Status"}]},"StreamingDistributionDeployed":{"delay":60,"operation":"GetStreamingDistribution","maxAttempts":25,"description":"Wait until a streaming distribution is deployed.","acceptors":[{"expected":"Deployed","matcher":"path","state":"success","argument":"StreamingDistribution.Status"}]}}}

/***/ }),
/* 101 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2019-03-26","endpointPrefix":"cloudfront","globalEndpoint":"cloudfront.amazonaws.com","protocol":"rest-xml","serviceAbbreviation":"CloudFront","serviceFullName":"Amazon CloudFront","serviceId":"CloudFront","signatureVersion":"v4","uid":"cloudfront-2019-03-26"},"operations":{"CreateCloudFrontOriginAccessIdentity":{"http":{"requestUri":"/2019-03-26/origin-access-identity/cloudfront","responseCode":201},"input":{"type":"structure","required":["CloudFrontOriginAccessIdentityConfig"],"members":{"CloudFrontOriginAccessIdentityConfig":{"shape":"S2","locationName":"CloudFrontOriginAccessIdentityConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2019-03-26/"}}},"payload":"CloudFrontOriginAccessIdentityConfig"},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentity":{"shape":"S5"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentity"}},"CreateDistribution":{"http":{"requestUri":"/2019-03-26/distribution","responseCode":201},"input":{"type":"structure","required":["DistributionConfig"],"members":{"DistributionConfig":{"shape":"S7","locationName":"DistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2019-03-26/"}}},"payload":"DistributionConfig"},"output":{"type":"structure","members":{"Distribution":{"shape":"S23"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"CreateDistributionWithTags":{"http":{"requestUri":"/2019-03-26/distribution?WithTags","responseCode":201},"input":{"type":"structure","required":["DistributionConfigWithTags"],"members":{"DistributionConfigWithTags":{"locationName":"DistributionConfigWithTags","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2019-03-26/"},"type":"structure","required":["DistributionConfig","Tags"],"members":{"DistributionConfig":{"shape":"S7"},"Tags":{"shape":"S2f"}}}},"payload":"DistributionConfigWithTags"},"output":{"type":"structure","members":{"Distribution":{"shape":"S23"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"CreateFieldLevelEncryptionConfig":{"http":{"requestUri":"/2019-03-26/field-level-encryption","responseCode":201},"input":{"type":"structure","required":["FieldLevelEncryptionConfig"],"members":{"FieldLevelEncryptionConfig":{"shape":"S2m","locationName":"FieldLevelEncryptionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2019-03-26/"}}},"payload":"FieldLevelEncryptionConfig"},"output":{"type":"structure","members":{"FieldLevelEncryption":{"shape":"S2x"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryption"}},"CreateFieldLevelEncryptionProfile":{"http":{"requestUri":"/2019-03-26/field-level-encryption-profile","responseCode":201},"input":{"type":"structure","required":["FieldLevelEncryptionProfileConfig"],"members":{"FieldLevelEncryptionProfileConfig":{"shape":"S2z","locationName":"FieldLevelEncryptionProfileConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2019-03-26/"}}},"payload":"FieldLevelEncryptionProfileConfig"},"output":{"type":"structure","members":{"FieldLevelEncryptionProfile":{"shape":"S36"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryptionProfile"}},"CreateInvalidation":{"http":{"requestUri":"/2019-03-26/distribution/{DistributionId}/invalidation","responseCode":201},"input":{"type":"structure","required":["DistributionId","InvalidationBatch"],"members":{"DistributionId":{"location":"uri","locationName":"DistributionId"},"InvalidationBatch":{"shape":"S38","locationName":"InvalidationBatch","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2019-03-26/"}}},"payload":"InvalidationBatch"},"output":{"type":"structure","members":{"Location":{"location":"header","locationName":"Location"},"Invalidation":{"shape":"S3c"}},"payload":"Invalidation"}},"CreatePublicKey":{"http":{"requestUri":"/2019-03-26/public-key","responseCode":201},"input":{"type":"structure","required":["PublicKeyConfig"],"members":{"PublicKeyConfig":{"shape":"S3e","locationName":"PublicKeyConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2019-03-26/"}}},"payload":"PublicKeyConfig"},"output":{"type":"structure","members":{"PublicKey":{"shape":"S3g"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"PublicKey"}},"CreateStreamingDistribution":{"http":{"requestUri":"/2019-03-26/streaming-distribution","responseCode":201},"input":{"type":"structure","required":["StreamingDistributionConfig"],"members":{"StreamingDistributionConfig":{"shape":"S3i","locationName":"StreamingDistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2019-03-26/"}}},"payload":"StreamingDistributionConfig"},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S3m"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}},"CreateStreamingDistributionWithTags":{"http":{"requestUri":"/2019-03-26/streaming-distribution?WithTags","responseCode":201},"input":{"type":"structure","required":["StreamingDistributionConfigWithTags"],"members":{"StreamingDistributionConfigWithTags":{"locationName":"StreamingDistributionConfigWithTags","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2019-03-26/"},"type":"structure","required":["StreamingDistributionConfig","Tags"],"members":{"StreamingDistributionConfig":{"shape":"S3i"},"Tags":{"shape":"S2f"}}}},"payload":"StreamingDistributionConfigWithTags"},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S3m"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}},"DeleteCloudFrontOriginAccessIdentity":{"http":{"method":"DELETE","requestUri":"/2019-03-26/origin-access-identity/cloudfront/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeleteDistribution":{"http":{"method":"DELETE","requestUri":"/2019-03-26/distribution/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeleteFieldLevelEncryptionConfig":{"http":{"method":"DELETE","requestUri":"/2019-03-26/field-level-encryption/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeleteFieldLevelEncryptionProfile":{"http":{"method":"DELETE","requestUri":"/2019-03-26/field-level-encryption-profile/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeletePublicKey":{"http":{"method":"DELETE","requestUri":"/2019-03-26/public-key/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeleteStreamingDistribution":{"http":{"method":"DELETE","requestUri":"/2019-03-26/streaming-distribution/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"GetCloudFrontOriginAccessIdentity":{"http":{"method":"GET","requestUri":"/2019-03-26/origin-access-identity/cloudfront/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentity":{"shape":"S5"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentity"}},"GetCloudFrontOriginAccessIdentityConfig":{"http":{"method":"GET","requestUri":"/2019-03-26/origin-access-identity/cloudfront/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentityConfig":{"shape":"S2"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentityConfig"}},"GetDistribution":{"http":{"method":"GET","requestUri":"/2019-03-26/distribution/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"Distribution":{"shape":"S23"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"GetDistributionConfig":{"http":{"method":"GET","requestUri":"/2019-03-26/distribution/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"DistributionConfig":{"shape":"S7"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"DistributionConfig"}},"GetFieldLevelEncryption":{"http":{"method":"GET","requestUri":"/2019-03-26/field-level-encryption/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"FieldLevelEncryption":{"shape":"S2x"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryption"}},"GetFieldLevelEncryptionConfig":{"http":{"method":"GET","requestUri":"/2019-03-26/field-level-encryption/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"FieldLevelEncryptionConfig":{"shape":"S2m"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryptionConfig"}},"GetFieldLevelEncryptionProfile":{"http":{"method":"GET","requestUri":"/2019-03-26/field-level-encryption-profile/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"FieldLevelEncryptionProfile":{"shape":"S36"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryptionProfile"}},"GetFieldLevelEncryptionProfileConfig":{"http":{"method":"GET","requestUri":"/2019-03-26/field-level-encryption-profile/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"FieldLevelEncryptionProfileConfig":{"shape":"S2z"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryptionProfileConfig"}},"GetInvalidation":{"http":{"method":"GET","requestUri":"/2019-03-26/distribution/{DistributionId}/invalidation/{Id}"},"input":{"type":"structure","required":["DistributionId","Id"],"members":{"DistributionId":{"location":"uri","locationName":"DistributionId"},"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"Invalidation":{"shape":"S3c"}},"payload":"Invalidation"}},"GetPublicKey":{"http":{"method":"GET","requestUri":"/2019-03-26/public-key/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"PublicKey":{"shape":"S3g"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"PublicKey"}},"GetPublicKeyConfig":{"http":{"method":"GET","requestUri":"/2019-03-26/public-key/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"PublicKeyConfig":{"shape":"S3e"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"PublicKeyConfig"}},"GetStreamingDistribution":{"http":{"method":"GET","requestUri":"/2019-03-26/streaming-distribution/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S3m"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}},"GetStreamingDistributionConfig":{"http":{"method":"GET","requestUri":"/2019-03-26/streaming-distribution/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"StreamingDistributionConfig":{"shape":"S3i"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistributionConfig"}},"ListCloudFrontOriginAccessIdentities":{"http":{"method":"GET","requestUri":"/2019-03-26/origin-access-identity/cloudfront"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentityList":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CloudFrontOriginAccessIdentitySummary","type":"structure","required":["Id","S3CanonicalUserId","Comment"],"members":{"Id":{},"S3CanonicalUserId":{},"Comment":{}}}}}}},"payload":"CloudFrontOriginAccessIdentityList"}},"ListDistributions":{"http":{"method":"GET","requestUri":"/2019-03-26/distribution"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"DistributionList":{"shape":"S4t"}},"payload":"DistributionList"}},"ListDistributionsByWebACLId":{"http":{"method":"GET","requestUri":"/2019-03-26/distributionsByWebACLId/{WebACLId}"},"input":{"type":"structure","required":["WebACLId"],"members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"},"WebACLId":{"location":"uri","locationName":"WebACLId"}}},"output":{"type":"structure","members":{"DistributionList":{"shape":"S4t"}},"payload":"DistributionList"}},"ListFieldLevelEncryptionConfigs":{"http":{"method":"GET","requestUri":"/2019-03-26/field-level-encryption"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"FieldLevelEncryptionList":{"type":"structure","required":["MaxItems","Quantity"],"members":{"NextMarker":{},"MaxItems":{"type":"integer"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"FieldLevelEncryptionSummary","type":"structure","required":["Id","LastModifiedTime"],"members":{"Id":{},"LastModifiedTime":{"type":"timestamp"},"Comment":{},"QueryArgProfileConfig":{"shape":"S2n"},"ContentTypeProfileConfig":{"shape":"S2r"}}}}}}},"payload":"FieldLevelEncryptionList"}},"ListFieldLevelEncryptionProfiles":{"http":{"method":"GET","requestUri":"/2019-03-26/field-level-encryption-profile"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"FieldLevelEncryptionProfileList":{"type":"structure","required":["MaxItems","Quantity"],"members":{"NextMarker":{},"MaxItems":{"type":"integer"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"FieldLevelEncryptionProfileSummary","type":"structure","required":["Id","LastModifiedTime","Name","EncryptionEntities"],"members":{"Id":{},"LastModifiedTime":{"type":"timestamp"},"Name":{},"EncryptionEntities":{"shape":"S30"},"Comment":{}}}}}}},"payload":"FieldLevelEncryptionProfileList"}},"ListInvalidations":{"http":{"method":"GET","requestUri":"/2019-03-26/distribution/{DistributionId}/invalidation"},"input":{"type":"structure","required":["DistributionId"],"members":{"DistributionId":{"location":"uri","locationName":"DistributionId"},"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"InvalidationList":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"InvalidationSummary","type":"structure","required":["Id","CreateTime","Status"],"members":{"Id":{},"CreateTime":{"type":"timestamp"},"Status":{}}}}}}},"payload":"InvalidationList"}},"ListPublicKeys":{"http":{"method":"GET","requestUri":"/2019-03-26/public-key"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"PublicKeyList":{"type":"structure","required":["MaxItems","Quantity"],"members":{"NextMarker":{},"MaxItems":{"type":"integer"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"PublicKeySummary","type":"structure","required":["Id","Name","CreatedTime","EncodedKey"],"members":{"Id":{},"Name":{},"CreatedTime":{"type":"timestamp"},"EncodedKey":{},"Comment":{}}}}}}},"payload":"PublicKeyList"}},"ListStreamingDistributions":{"http":{"method":"GET","requestUri":"/2019-03-26/streaming-distribution"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"StreamingDistributionList":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"StreamingDistributionSummary","type":"structure","required":["Id","ARN","Status","LastModifiedTime","DomainName","S3Origin","Aliases","TrustedSigners","Comment","PriceClass","Enabled"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"DomainName":{},"S3Origin":{"shape":"S3j"},"Aliases":{"shape":"S8"},"TrustedSigners":{"shape":"S17"},"Comment":{},"PriceClass":{},"Enabled":{"type":"boolean"}}}}}}},"payload":"StreamingDistributionList"}},"ListTagsForResource":{"http":{"method":"GET","requestUri":"/2019-03-26/tagging"},"input":{"type":"structure","required":["Resource"],"members":{"Resource":{"location":"querystring","locationName":"Resource"}}},"output":{"type":"structure","required":["Tags"],"members":{"Tags":{"shape":"S2f"}},"payload":"Tags"}},"TagResource":{"http":{"requestUri":"/2019-03-26/tagging?Operation=Tag","responseCode":204},"input":{"type":"structure","required":["Resource","Tags"],"members":{"Resource":{"location":"querystring","locationName":"Resource"},"Tags":{"shape":"S2f","locationName":"Tags","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2019-03-26/"}}},"payload":"Tags"}},"UntagResource":{"http":{"requestUri":"/2019-03-26/tagging?Operation=Untag","responseCode":204},"input":{"type":"structure","required":["Resource","TagKeys"],"members":{"Resource":{"location":"querystring","locationName":"Resource"},"TagKeys":{"locationName":"TagKeys","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2019-03-26/"},"type":"structure","members":{"Items":{"type":"list","member":{"locationName":"Key"}}}}},"payload":"TagKeys"}},"UpdateCloudFrontOriginAccessIdentity":{"http":{"method":"PUT","requestUri":"/2019-03-26/origin-access-identity/cloudfront/{Id}/config"},"input":{"type":"structure","required":["CloudFrontOriginAccessIdentityConfig","Id"],"members":{"CloudFrontOriginAccessIdentityConfig":{"shape":"S2","locationName":"CloudFrontOriginAccessIdentityConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2019-03-26/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"CloudFrontOriginAccessIdentityConfig"},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentity":{"shape":"S5"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentity"}},"UpdateDistribution":{"http":{"method":"PUT","requestUri":"/2019-03-26/distribution/{Id}/config"},"input":{"type":"structure","required":["DistributionConfig","Id"],"members":{"DistributionConfig":{"shape":"S7","locationName":"DistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2019-03-26/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"DistributionConfig"},"output":{"type":"structure","members":{"Distribution":{"shape":"S23"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"UpdateFieldLevelEncryptionConfig":{"http":{"method":"PUT","requestUri":"/2019-03-26/field-level-encryption/{Id}/config"},"input":{"type":"structure","required":["FieldLevelEncryptionConfig","Id"],"members":{"FieldLevelEncryptionConfig":{"shape":"S2m","locationName":"FieldLevelEncryptionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2019-03-26/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"FieldLevelEncryptionConfig"},"output":{"type":"structure","members":{"FieldLevelEncryption":{"shape":"S2x"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryption"}},"UpdateFieldLevelEncryptionProfile":{"http":{"method":"PUT","requestUri":"/2019-03-26/field-level-encryption-profile/{Id}/config"},"input":{"type":"structure","required":["FieldLevelEncryptionProfileConfig","Id"],"members":{"FieldLevelEncryptionProfileConfig":{"shape":"S2z","locationName":"FieldLevelEncryptionProfileConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2019-03-26/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"FieldLevelEncryptionProfileConfig"},"output":{"type":"structure","members":{"FieldLevelEncryptionProfile":{"shape":"S36"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryptionProfile"}},"UpdatePublicKey":{"http":{"method":"PUT","requestUri":"/2019-03-26/public-key/{Id}/config"},"input":{"type":"structure","required":["PublicKeyConfig","Id"],"members":{"PublicKeyConfig":{"shape":"S3e","locationName":"PublicKeyConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2019-03-26/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"PublicKeyConfig"},"output":{"type":"structure","members":{"PublicKey":{"shape":"S3g"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"PublicKey"}},"UpdateStreamingDistribution":{"http":{"method":"PUT","requestUri":"/2019-03-26/streaming-distribution/{Id}/config"},"input":{"type":"structure","required":["StreamingDistributionConfig","Id"],"members":{"StreamingDistributionConfig":{"shape":"S3i","locationName":"StreamingDistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2019-03-26/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"StreamingDistributionConfig"},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S3m"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}}},"shapes":{"S2":{"type":"structure","required":["CallerReference","Comment"],"members":{"CallerReference":{},"Comment":{}}},"S5":{"type":"structure","required":["Id","S3CanonicalUserId"],"members":{"Id":{},"S3CanonicalUserId":{},"CloudFrontOriginAccessIdentityConfig":{"shape":"S2"}}},"S7":{"type":"structure","required":["CallerReference","Origins","DefaultCacheBehavior","Comment","Enabled"],"members":{"CallerReference":{},"Aliases":{"shape":"S8"},"DefaultRootObject":{},"Origins":{"shape":"Sb"},"OriginGroups":{"shape":"Sn"},"DefaultCacheBehavior":{"shape":"Sw"},"CacheBehaviors":{"shape":"S1k"},"CustomErrorResponses":{"shape":"S1n"},"Comment":{"type":"string","sensitive":true},"Logging":{"type":"structure","required":["Enabled","IncludeCookies","Bucket","Prefix"],"members":{"Enabled":{"type":"boolean"},"IncludeCookies":{"type":"boolean"},"Bucket":{},"Prefix":{}}},"PriceClass":{},"Enabled":{"type":"boolean"},"ViewerCertificate":{"shape":"S1t"},"Restrictions":{"shape":"S1x"},"WebACLId":{},"HttpVersion":{},"IsIPV6Enabled":{"type":"boolean"}}},"S8":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CNAME"}}}},"Sb":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Origin","type":"structure","required":["Id","DomainName"],"members":{"Id":{},"DomainName":{},"OriginPath":{},"CustomHeaders":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"OriginCustomHeader","type":"structure","required":["HeaderName","HeaderValue"],"members":{"HeaderName":{},"HeaderValue":{}}}}}},"S3OriginConfig":{"type":"structure","required":["OriginAccessIdentity"],"members":{"OriginAccessIdentity":{}}},"CustomOriginConfig":{"type":"structure","required":["HTTPPort","HTTPSPort","OriginProtocolPolicy"],"members":{"HTTPPort":{"type":"integer"},"HTTPSPort":{"type":"integer"},"OriginProtocolPolicy":{},"OriginSslProtocols":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"SslProtocol"}}}},"OriginReadTimeout":{"type":"integer"},"OriginKeepaliveTimeout":{"type":"integer"}}},"ConnectionAttempts":{"type":"integer"},"ConnectionTimeout":{"type":"integer"}}}}}},"Sn":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"OriginGroup","type":"structure","required":["Id","FailoverCriteria","Members"],"members":{"Id":{},"FailoverCriteria":{"type":"structure","required":["StatusCodes"],"members":{"StatusCodes":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"StatusCode","type":"integer"}}}}}},"Members":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"OriginGroupMember","type":"structure","required":["OriginId"],"members":{"OriginId":{}}}}}}}}}}},"Sw":{"type":"structure","required":["TargetOriginId","ForwardedValues","TrustedSigners","ViewerProtocolPolicy","MinTTL"],"members":{"TargetOriginId":{},"ForwardedValues":{"shape":"Sx"},"TrustedSigners":{"shape":"S17"},"ViewerProtocolPolicy":{},"MinTTL":{"type":"long"},"AllowedMethods":{"shape":"S1b"},"SmoothStreaming":{"type":"boolean"},"DefaultTTL":{"type":"long"},"MaxTTL":{"type":"long"},"Compress":{"type":"boolean"},"LambdaFunctionAssociations":{"shape":"S1f"},"FieldLevelEncryptionId":{}}},"Sx":{"type":"structure","required":["QueryString","Cookies"],"members":{"QueryString":{"type":"boolean"},"Cookies":{"type":"structure","required":["Forward"],"members":{"Forward":{},"WhitelistedNames":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Name"}}}}}},"Headers":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Name"}}}},"QueryStringCacheKeys":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Name"}}}}}},"S17":{"type":"structure","required":["Enabled","Quantity"],"members":{"Enabled":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"AwsAccountNumber"}}}},"S1b":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"shape":"S1c"},"CachedMethods":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"shape":"S1c"}}}}},"S1c":{"type":"list","member":{"locationName":"Method"}},"S1f":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"LambdaFunctionAssociation","type":"structure","required":["LambdaFunctionARN","EventType"],"members":{"LambdaFunctionARN":{},"EventType":{},"IncludeBody":{"type":"boolean"}}}}}},"S1k":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CacheBehavior","type":"structure","required":["PathPattern","TargetOriginId","ForwardedValues","TrustedSigners","ViewerProtocolPolicy","MinTTL"],"members":{"PathPattern":{},"TargetOriginId":{},"ForwardedValues":{"shape":"Sx"},"TrustedSigners":{"shape":"S17"},"ViewerProtocolPolicy":{},"MinTTL":{"type":"long"},"AllowedMethods":{"shape":"S1b"},"SmoothStreaming":{"type":"boolean"},"DefaultTTL":{"type":"long"},"MaxTTL":{"type":"long"},"Compress":{"type":"boolean"},"LambdaFunctionAssociations":{"shape":"S1f"},"FieldLevelEncryptionId":{}}}}}},"S1n":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CustomErrorResponse","type":"structure","required":["ErrorCode"],"members":{"ErrorCode":{"type":"integer"},"ResponsePagePath":{},"ResponseCode":{},"ErrorCachingMinTTL":{"type":"long"}}}}}},"S1t":{"type":"structure","members":{"CloudFrontDefaultCertificate":{"type":"boolean"},"IAMCertificateId":{},"ACMCertificateArn":{},"SSLSupportMethod":{},"MinimumProtocolVersion":{},"Certificate":{"deprecated":true},"CertificateSource":{"deprecated":true}}},"S1x":{"type":"structure","required":["GeoRestriction"],"members":{"GeoRestriction":{"type":"structure","required":["RestrictionType","Quantity"],"members":{"RestrictionType":{},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Location"}}}}}},"S23":{"type":"structure","required":["Id","ARN","Status","LastModifiedTime","InProgressInvalidationBatches","DomainName","ActiveTrustedSigners","DistributionConfig"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"InProgressInvalidationBatches":{"type":"integer"},"DomainName":{},"ActiveTrustedSigners":{"shape":"S25"},"DistributionConfig":{"shape":"S7"},"AliasICPRecordals":{"shape":"S2a"}}},"S25":{"type":"structure","required":["Enabled","Quantity"],"members":{"Enabled":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Signer","type":"structure","members":{"AwsAccountNumber":{},"KeyPairIds":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"KeyPairId"}}}}}}}}},"S2a":{"type":"list","member":{"locationName":"AliasICPRecordal","type":"structure","members":{"CNAME":{},"ICPRecordalStatus":{}}}},"S2f":{"type":"structure","members":{"Items":{"type":"list","member":{"locationName":"Tag","type":"structure","required":["Key"],"members":{"Key":{},"Value":{}}}}}},"S2m":{"type":"structure","required":["CallerReference"],"members":{"CallerReference":{},"Comment":{},"QueryArgProfileConfig":{"shape":"S2n"},"ContentTypeProfileConfig":{"shape":"S2r"}}},"S2n":{"type":"structure","required":["ForwardWhenQueryArgProfileIsUnknown"],"members":{"ForwardWhenQueryArgProfileIsUnknown":{"type":"boolean"},"QueryArgProfiles":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"QueryArgProfile","type":"structure","required":["QueryArg","ProfileId"],"members":{"QueryArg":{},"ProfileId":{}}}}}}}},"S2r":{"type":"structure","required":["ForwardWhenContentTypeIsUnknown"],"members":{"ForwardWhenContentTypeIsUnknown":{"type":"boolean"},"ContentTypeProfiles":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"ContentTypeProfile","type":"structure","required":["Format","ContentType"],"members":{"Format":{},"ProfileId":{},"ContentType":{}}}}}}}},"S2x":{"type":"structure","required":["Id","LastModifiedTime","FieldLevelEncryptionConfig"],"members":{"Id":{},"LastModifiedTime":{"type":"timestamp"},"FieldLevelEncryptionConfig":{"shape":"S2m"}}},"S2z":{"type":"structure","required":["Name","CallerReference","EncryptionEntities"],"members":{"Name":{},"CallerReference":{},"Comment":{},"EncryptionEntities":{"shape":"S30"}}},"S30":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"EncryptionEntity","type":"structure","required":["PublicKeyId","ProviderId","FieldPatterns"],"members":{"PublicKeyId":{},"ProviderId":{},"FieldPatterns":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"FieldPattern"}}}}}}}}},"S36":{"type":"structure","required":["Id","LastModifiedTime","FieldLevelEncryptionProfileConfig"],"members":{"Id":{},"LastModifiedTime":{"type":"timestamp"},"FieldLevelEncryptionProfileConfig":{"shape":"S2z"}}},"S38":{"type":"structure","required":["Paths","CallerReference"],"members":{"Paths":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Path"}}}},"CallerReference":{}}},"S3c":{"type":"structure","required":["Id","Status","CreateTime","InvalidationBatch"],"members":{"Id":{},"Status":{},"CreateTime":{"type":"timestamp"},"InvalidationBatch":{"shape":"S38"}}},"S3e":{"type":"structure","required":["CallerReference","Name","EncodedKey"],"members":{"CallerReference":{},"Name":{},"EncodedKey":{},"Comment":{}}},"S3g":{"type":"structure","required":["Id","CreatedTime","PublicKeyConfig"],"members":{"Id":{},"CreatedTime":{"type":"timestamp"},"PublicKeyConfig":{"shape":"S3e"}}},"S3i":{"type":"structure","required":["CallerReference","S3Origin","Comment","TrustedSigners","Enabled"],"members":{"CallerReference":{},"S3Origin":{"shape":"S3j"},"Aliases":{"shape":"S8"},"Comment":{},"Logging":{"type":"structure","required":["Enabled","Bucket","Prefix"],"members":{"Enabled":{"type":"boolean"},"Bucket":{},"Prefix":{}}},"TrustedSigners":{"shape":"S17"},"PriceClass":{},"Enabled":{"type":"boolean"}}},"S3j":{"type":"structure","required":["DomainName","OriginAccessIdentity"],"members":{"DomainName":{},"OriginAccessIdentity":{}}},"S3m":{"type":"structure","required":["Id","ARN","Status","DomainName","ActiveTrustedSigners","StreamingDistributionConfig"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"DomainName":{},"ActiveTrustedSigners":{"shape":"S25"},"StreamingDistributionConfig":{"shape":"S3i"}}},"S4t":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"DistributionSummary","type":"structure","required":["Id","ARN","Status","LastModifiedTime","DomainName","Aliases","Origins","DefaultCacheBehavior","CacheBehaviors","CustomErrorResponses","Comment","PriceClass","Enabled","ViewerCertificate","Restrictions","WebACLId","HttpVersion","IsIPV6Enabled"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"DomainName":{},"Aliases":{"shape":"S8"},"Origins":{"shape":"Sb"},"OriginGroups":{"shape":"Sn"},"DefaultCacheBehavior":{"shape":"Sw"},"CacheBehaviors":{"shape":"S1k"},"CustomErrorResponses":{"shape":"S1n"},"Comment":{},"PriceClass":{},"Enabled":{"type":"boolean"},"ViewerCertificate":{"shape":"S1t"},"Restrictions":{"shape":"S1x"},"WebACLId":{},"HttpVersion":{},"IsIPV6Enabled":{"type":"boolean"},"AliasICPRecordals":{"shape":"S2a"}}}}}}}}

/***/ }),
/* 102 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"ListCloudFrontOriginAccessIdentities":{"input_token":"Marker","limit_key":"MaxItems","more_results":"CloudFrontOriginAccessIdentityList.IsTruncated","output_token":"CloudFrontOriginAccessIdentityList.NextMarker","result_key":"CloudFrontOriginAccessIdentityList.Items"},"ListDistributions":{"input_token":"Marker","limit_key":"MaxItems","more_results":"DistributionList.IsTruncated","output_token":"DistributionList.NextMarker","result_key":"DistributionList.Items"},"ListInvalidations":{"input_token":"Marker","limit_key":"MaxItems","more_results":"InvalidationList.IsTruncated","output_token":"InvalidationList.NextMarker","result_key":"InvalidationList.Items"},"ListStreamingDistributions":{"input_token":"Marker","limit_key":"MaxItems","more_results":"StreamingDistributionList.IsTruncated","output_token":"StreamingDistributionList.NextMarker","result_key":"StreamingDistributionList.Items"}}}

/***/ }),
/* 103 */
/***/ (function(module, exports) {

	module.exports = {"version":2,"waiters":{"DistributionDeployed":{"delay":60,"operation":"GetDistribution","maxAttempts":35,"description":"Wait until a distribution is deployed.","acceptors":[{"expected":"Deployed","matcher":"path","state":"success","argument":"Distribution.Status"}]},"InvalidationCompleted":{"delay":20,"operation":"GetInvalidation","maxAttempts":30,"description":"Wait until an invalidation has completed.","acceptors":[{"expected":"Completed","matcher":"path","state":"success","argument":"Invalidation.Status"}]},"StreamingDistributionDeployed":{"delay":60,"operation":"GetStreamingDistribution","maxAttempts":25,"description":"Wait until a streaming distribution is deployed.","acceptors":[{"expected":"Deployed","matcher":"path","state":"success","argument":"StreamingDistribution.Status"}]}}}

/***/ }),
/* 104 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2020-05-31","endpointPrefix":"cloudfront","globalEndpoint":"cloudfront.amazonaws.com","protocol":"rest-xml","serviceAbbreviation":"CloudFront","serviceFullName":"Amazon CloudFront","serviceId":"CloudFront","signatureVersion":"v4","uid":"cloudfront-2020-05-31"},"operations":{"AssociateAlias":{"http":{"method":"PUT","requestUri":"/2020-05-31/distribution/{TargetDistributionId}/associate-alias","responseCode":200},"input":{"type":"structure","required":["TargetDistributionId","Alias"],"members":{"TargetDistributionId":{"location":"uri","locationName":"TargetDistributionId"},"Alias":{"location":"querystring","locationName":"Alias"}}}},"CreateCachePolicy":{"http":{"requestUri":"/2020-05-31/cache-policy","responseCode":201},"input":{"type":"structure","required":["CachePolicyConfig"],"members":{"CachePolicyConfig":{"shape":"S4","locationName":"CachePolicyConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2020-05-31/"}}},"payload":"CachePolicyConfig"},"output":{"type":"structure","members":{"CachePolicy":{"shape":"Sm"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CachePolicy"}},"CreateCloudFrontOriginAccessIdentity":{"http":{"requestUri":"/2020-05-31/origin-access-identity/cloudfront","responseCode":201},"input":{"type":"structure","required":["CloudFrontOriginAccessIdentityConfig"],"members":{"CloudFrontOriginAccessIdentityConfig":{"shape":"Sp","locationName":"CloudFrontOriginAccessIdentityConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2020-05-31/"}}},"payload":"CloudFrontOriginAccessIdentityConfig"},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentity":{"shape":"Sr"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentity"}},"CreateDistribution":{"http":{"requestUri":"/2020-05-31/distribution","responseCode":201},"input":{"type":"structure","required":["DistributionConfig"],"members":{"DistributionConfig":{"shape":"St","locationName":"DistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2020-05-31/"}}},"payload":"DistributionConfig"},"output":{"type":"structure","members":{"Distribution":{"shape":"S2q"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"CreateDistributionWithTags":{"http":{"requestUri":"/2020-05-31/distribution?WithTags","responseCode":201},"input":{"type":"structure","required":["DistributionConfigWithTags"],"members":{"DistributionConfigWithTags":{"locationName":"DistributionConfigWithTags","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2020-05-31/"},"type":"structure","required":["DistributionConfig","Tags"],"members":{"DistributionConfig":{"shape":"St"},"Tags":{"shape":"S34"}}}},"payload":"DistributionConfigWithTags"},"output":{"type":"structure","members":{"Distribution":{"shape":"S2q"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"CreateFieldLevelEncryptionConfig":{"http":{"requestUri":"/2020-05-31/field-level-encryption","responseCode":201},"input":{"type":"structure","required":["FieldLevelEncryptionConfig"],"members":{"FieldLevelEncryptionConfig":{"shape":"S3b","locationName":"FieldLevelEncryptionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2020-05-31/"}}},"payload":"FieldLevelEncryptionConfig"},"output":{"type":"structure","members":{"FieldLevelEncryption":{"shape":"S3m"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryption"}},"CreateFieldLevelEncryptionProfile":{"http":{"requestUri":"/2020-05-31/field-level-encryption-profile","responseCode":201},"input":{"type":"structure","required":["FieldLevelEncryptionProfileConfig"],"members":{"FieldLevelEncryptionProfileConfig":{"shape":"S3o","locationName":"FieldLevelEncryptionProfileConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2020-05-31/"}}},"payload":"FieldLevelEncryptionProfileConfig"},"output":{"type":"structure","members":{"FieldLevelEncryptionProfile":{"shape":"S3v"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryptionProfile"}},"CreateFunction":{"http":{"requestUri":"/2020-05-31/function","responseCode":201},"input":{"locationName":"CreateFunctionRequest","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2020-05-31/"},"type":"structure","required":["Name","FunctionConfig","FunctionCode"],"members":{"Name":{},"FunctionConfig":{"shape":"S3y"},"FunctionCode":{"shape":"S40"}}},"output":{"type":"structure","members":{"FunctionSummary":{"shape":"S42"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FunctionSummary"}},"CreateInvalidation":{"http":{"requestUri":"/2020-05-31/distribution/{DistributionId}/invalidation","responseCode":201},"input":{"type":"structure","required":["DistributionId","InvalidationBatch"],"members":{"DistributionId":{"location":"uri","locationName":"DistributionId"},"InvalidationBatch":{"shape":"S46","locationName":"InvalidationBatch","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2020-05-31/"}}},"payload":"InvalidationBatch"},"output":{"type":"structure","members":{"Location":{"location":"header","locationName":"Location"},"Invalidation":{"shape":"S4a"}},"payload":"Invalidation"}},"CreateKeyGroup":{"http":{"requestUri":"/2020-05-31/key-group","responseCode":201},"input":{"type":"structure","required":["KeyGroupConfig"],"members":{"KeyGroupConfig":{"shape":"S4c","locationName":"KeyGroupConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2020-05-31/"}}},"payload":"KeyGroupConfig"},"output":{"type":"structure","members":{"KeyGroup":{"shape":"S4f"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"KeyGroup"}},"CreateMonitoringSubscription":{"http":{"requestUri":"/2020-05-31/distributions/{DistributionId}/monitoring-subscription"},"input":{"type":"structure","required":["MonitoringSubscription","DistributionId"],"members":{"DistributionId":{"location":"uri","locationName":"DistributionId"},"MonitoringSubscription":{"shape":"S4h","locationName":"MonitoringSubscription","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2020-05-31/"}}},"payload":"MonitoringSubscription"},"output":{"type":"structure","members":{"MonitoringSubscription":{"shape":"S4h"}},"payload":"MonitoringSubscription"}},"CreateOriginRequestPolicy":{"http":{"requestUri":"/2020-05-31/origin-request-policy","responseCode":201},"input":{"type":"structure","required":["OriginRequestPolicyConfig"],"members":{"OriginRequestPolicyConfig":{"shape":"S4m","locationName":"OriginRequestPolicyConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2020-05-31/"}}},"payload":"OriginRequestPolicyConfig"},"output":{"type":"structure","members":{"OriginRequestPolicy":{"shape":"S4u"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"OriginRequestPolicy"}},"CreatePublicKey":{"http":{"requestUri":"/2020-05-31/public-key","responseCode":201},"input":{"type":"structure","required":["PublicKeyConfig"],"members":{"PublicKeyConfig":{"shape":"S4w","locationName":"PublicKeyConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2020-05-31/"}}},"payload":"PublicKeyConfig"},"output":{"type":"structure","members":{"PublicKey":{"shape":"S4y"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"PublicKey"}},"CreateRealtimeLogConfig":{"http":{"requestUri":"/2020-05-31/realtime-log-config","responseCode":201},"input":{"locationName":"CreateRealtimeLogConfigRequest","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2020-05-31/"},"type":"structure","required":["EndPoints","Fields","Name","SamplingRate"],"members":{"EndPoints":{"shape":"S50"},"Fields":{"shape":"S53"},"Name":{},"SamplingRate":{"type":"long"}}},"output":{"type":"structure","members":{"RealtimeLogConfig":{"shape":"S55"}}}},"CreateStreamingDistribution":{"http":{"requestUri":"/2020-05-31/streaming-distribution","responseCode":201},"input":{"type":"structure","required":["StreamingDistributionConfig"],"members":{"StreamingDistributionConfig":{"shape":"S57","locationName":"StreamingDistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2020-05-31/"}}},"payload":"StreamingDistributionConfig"},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S5b"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}},"CreateStreamingDistributionWithTags":{"http":{"requestUri":"/2020-05-31/streaming-distribution?WithTags","responseCode":201},"input":{"type":"structure","required":["StreamingDistributionConfigWithTags"],"members":{"StreamingDistributionConfigWithTags":{"locationName":"StreamingDistributionConfigWithTags","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2020-05-31/"},"type":"structure","required":["StreamingDistributionConfig","Tags"],"members":{"StreamingDistributionConfig":{"shape":"S57"},"Tags":{"shape":"S34"}}}},"payload":"StreamingDistributionConfigWithTags"},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S5b"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}},"DeleteCachePolicy":{"http":{"method":"DELETE","requestUri":"/2020-05-31/cache-policy/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeleteCloudFrontOriginAccessIdentity":{"http":{"method":"DELETE","requestUri":"/2020-05-31/origin-access-identity/cloudfront/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeleteDistribution":{"http":{"method":"DELETE","requestUri":"/2020-05-31/distribution/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeleteFieldLevelEncryptionConfig":{"http":{"method":"DELETE","requestUri":"/2020-05-31/field-level-encryption/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeleteFieldLevelEncryptionProfile":{"http":{"method":"DELETE","requestUri":"/2020-05-31/field-level-encryption-profile/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeleteFunction":{"http":{"method":"DELETE","requestUri":"/2020-05-31/function/{Name}","responseCode":204},"input":{"type":"structure","required":["IfMatch","Name"],"members":{"Name":{"location":"uri","locationName":"Name"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeleteKeyGroup":{"http":{"method":"DELETE","requestUri":"/2020-05-31/key-group/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeleteMonitoringSubscription":{"http":{"method":"DELETE","requestUri":"/2020-05-31/distributions/{DistributionId}/monitoring-subscription"},"input":{"type":"structure","required":["DistributionId"],"members":{"DistributionId":{"location":"uri","locationName":"DistributionId"}}},"output":{"type":"structure","members":{}}},"DeleteOriginRequestPolicy":{"http":{"method":"DELETE","requestUri":"/2020-05-31/origin-request-policy/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeletePublicKey":{"http":{"method":"DELETE","requestUri":"/2020-05-31/public-key/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeleteRealtimeLogConfig":{"http":{"requestUri":"/2020-05-31/delete-realtime-log-config/","responseCode":204},"input":{"locationName":"DeleteRealtimeLogConfigRequest","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2020-05-31/"},"type":"structure","members":{"Name":{},"ARN":{}}}},"DeleteStreamingDistribution":{"http":{"method":"DELETE","requestUri":"/2020-05-31/streaming-distribution/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DescribeFunction":{"http":{"method":"GET","requestUri":"/2020-05-31/function/{Name}/describe"},"input":{"type":"structure","required":["Name"],"members":{"Name":{"location":"uri","locationName":"Name"},"Stage":{"location":"querystring","locationName":"Stage"}}},"output":{"type":"structure","members":{"FunctionSummary":{"shape":"S42"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FunctionSummary"}},"GetCachePolicy":{"http":{"method":"GET","requestUri":"/2020-05-31/cache-policy/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"CachePolicy":{"shape":"Sm"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CachePolicy"}},"GetCachePolicyConfig":{"http":{"method":"GET","requestUri":"/2020-05-31/cache-policy/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"CachePolicyConfig":{"shape":"S4"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CachePolicyConfig"}},"GetCloudFrontOriginAccessIdentity":{"http":{"method":"GET","requestUri":"/2020-05-31/origin-access-identity/cloudfront/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentity":{"shape":"Sr"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentity"}},"GetCloudFrontOriginAccessIdentityConfig":{"http":{"method":"GET","requestUri":"/2020-05-31/origin-access-identity/cloudfront/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentityConfig":{"shape":"Sp"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentityConfig"}},"GetDistribution":{"http":{"method":"GET","requestUri":"/2020-05-31/distribution/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"Distribution":{"shape":"S2q"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"GetDistributionConfig":{"http":{"method":"GET","requestUri":"/2020-05-31/distribution/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"DistributionConfig":{"shape":"St"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"DistributionConfig"}},"GetFieldLevelEncryption":{"http":{"method":"GET","requestUri":"/2020-05-31/field-level-encryption/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"FieldLevelEncryption":{"shape":"S3m"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryption"}},"GetFieldLevelEncryptionConfig":{"http":{"method":"GET","requestUri":"/2020-05-31/field-level-encryption/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"FieldLevelEncryptionConfig":{"shape":"S3b"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryptionConfig"}},"GetFieldLevelEncryptionProfile":{"http":{"method":"GET","requestUri":"/2020-05-31/field-level-encryption-profile/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"FieldLevelEncryptionProfile":{"shape":"S3v"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryptionProfile"}},"GetFieldLevelEncryptionProfileConfig":{"http":{"method":"GET","requestUri":"/2020-05-31/field-level-encryption-profile/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"FieldLevelEncryptionProfileConfig":{"shape":"S3o"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryptionProfileConfig"}},"GetFunction":{"http":{"method":"GET","requestUri":"/2020-05-31/function/{Name}"},"input":{"type":"structure","required":["Name"],"members":{"Name":{"location":"uri","locationName":"Name"},"Stage":{"location":"querystring","locationName":"Stage"}}},"output":{"type":"structure","members":{"FunctionCode":{"shape":"S40"},"ETag":{"location":"header","locationName":"ETag"},"ContentType":{"location":"header","locationName":"Content-Type"}},"payload":"FunctionCode"}},"GetInvalidation":{"http":{"method":"GET","requestUri":"/2020-05-31/distribution/{DistributionId}/invalidation/{Id}"},"input":{"type":"structure","required":["DistributionId","Id"],"members":{"DistributionId":{"location":"uri","locationName":"DistributionId"},"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"Invalidation":{"shape":"S4a"}},"payload":"Invalidation"}},"GetKeyGroup":{"http":{"method":"GET","requestUri":"/2020-05-31/key-group/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"KeyGroup":{"shape":"S4f"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"KeyGroup"}},"GetKeyGroupConfig":{"http":{"method":"GET","requestUri":"/2020-05-31/key-group/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"KeyGroupConfig":{"shape":"S4c"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"KeyGroupConfig"}},"GetMonitoringSubscription":{"http":{"method":"GET","requestUri":"/2020-05-31/distributions/{DistributionId}/monitoring-subscription"},"input":{"type":"structure","required":["DistributionId"],"members":{"DistributionId":{"location":"uri","locationName":"DistributionId"}}},"output":{"type":"structure","members":{"MonitoringSubscription":{"shape":"S4h"}},"payload":"MonitoringSubscription"}},"GetOriginRequestPolicy":{"http":{"method":"GET","requestUri":"/2020-05-31/origin-request-policy/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"OriginRequestPolicy":{"shape":"S4u"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"OriginRequestPolicy"}},"GetOriginRequestPolicyConfig":{"http":{"method":"GET","requestUri":"/2020-05-31/origin-request-policy/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"OriginRequestPolicyConfig":{"shape":"S4m"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"OriginRequestPolicyConfig"}},"GetPublicKey":{"http":{"method":"GET","requestUri":"/2020-05-31/public-key/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"PublicKey":{"shape":"S4y"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"PublicKey"}},"GetPublicKeyConfig":{"http":{"method":"GET","requestUri":"/2020-05-31/public-key/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"PublicKeyConfig":{"shape":"S4w"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"PublicKeyConfig"}},"GetRealtimeLogConfig":{"http":{"requestUri":"/2020-05-31/get-realtime-log-config/"},"input":{"locationName":"GetRealtimeLogConfigRequest","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2020-05-31/"},"type":"structure","members":{"Name":{},"ARN":{}}},"output":{"type":"structure","members":{"RealtimeLogConfig":{"shape":"S55"}}}},"GetStreamingDistribution":{"http":{"method":"GET","requestUri":"/2020-05-31/streaming-distribution/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S5b"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}},"GetStreamingDistributionConfig":{"http":{"method":"GET","requestUri":"/2020-05-31/streaming-distribution/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"StreamingDistributionConfig":{"shape":"S57"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistributionConfig"}},"ListCachePolicies":{"http":{"method":"GET","requestUri":"/2020-05-31/cache-policy"},"input":{"type":"structure","members":{"Type":{"location":"querystring","locationName":"Type"},"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"CachePolicyList":{"type":"structure","required":["MaxItems","Quantity"],"members":{"NextMarker":{},"MaxItems":{"type":"integer"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CachePolicySummary","type":"structure","required":["Type","CachePolicy"],"members":{"Type":{},"CachePolicy":{"shape":"Sm"}}}}}}},"payload":"CachePolicyList"}},"ListCloudFrontOriginAccessIdentities":{"http":{"method":"GET","requestUri":"/2020-05-31/origin-access-identity/cloudfront"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentityList":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CloudFrontOriginAccessIdentitySummary","type":"structure","required":["Id","S3CanonicalUserId","Comment"],"members":{"Id":{},"S3CanonicalUserId":{},"Comment":{}}}}}}},"payload":"CloudFrontOriginAccessIdentityList"}},"ListConflictingAliases":{"http":{"method":"GET","requestUri":"/2020-05-31/conflicting-alias","responseCode":200},"input":{"type":"structure","required":["DistributionId","Alias"],"members":{"DistributionId":{"location":"querystring","locationName":"DistributionId"},"Alias":{"location":"querystring","locationName":"Alias"},"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems","type":"integer"}}},"output":{"type":"structure","members":{"ConflictingAliasesList":{"type":"structure","members":{"NextMarker":{},"MaxItems":{"type":"integer"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"ConflictingAlias","type":"structure","members":{"Alias":{},"DistributionId":{},"AccountId":{}}}}}}},"payload":"ConflictingAliasesList"}},"ListDistributions":{"http":{"method":"GET","requestUri":"/2020-05-31/distribution"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"DistributionList":{"shape":"S7n"}},"payload":"DistributionList"}},"ListDistributionsByCachePolicyId":{"http":{"method":"GET","requestUri":"/2020-05-31/distributionsByCachePolicyId/{CachePolicyId}"},"input":{"type":"structure","required":["CachePolicyId"],"members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"},"CachePolicyId":{"location":"uri","locationName":"CachePolicyId"}}},"output":{"type":"structure","members":{"DistributionIdList":{"shape":"S7s"}},"payload":"DistributionIdList"}},"ListDistributionsByKeyGroup":{"http":{"method":"GET","requestUri":"/2020-05-31/distributionsByKeyGroupId/{KeyGroupId}"},"input":{"type":"structure","required":["KeyGroupId"],"members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"},"KeyGroupId":{"location":"uri","locationName":"KeyGroupId"}}},"output":{"type":"structure","members":{"DistributionIdList":{"shape":"S7s"}},"payload":"DistributionIdList"}},"ListDistributionsByOriginRequestPolicyId":{"http":{"method":"GET","requestUri":"/2020-05-31/distributionsByOriginRequestPolicyId/{OriginRequestPolicyId}"},"input":{"type":"structure","required":["OriginRequestPolicyId"],"members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"},"OriginRequestPolicyId":{"location":"uri","locationName":"OriginRequestPolicyId"}}},"output":{"type":"structure","members":{"DistributionIdList":{"shape":"S7s"}},"payload":"DistributionIdList"}},"ListDistributionsByRealtimeLogConfig":{"http":{"requestUri":"/2020-05-31/distributionsByRealtimeLogConfig/"},"input":{"locationName":"ListDistributionsByRealtimeLogConfigRequest","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2020-05-31/"},"type":"structure","members":{"Marker":{},"MaxItems":{},"RealtimeLogConfigName":{},"RealtimeLogConfigArn":{}}},"output":{"type":"structure","members":{"DistributionList":{"shape":"S7n"}},"payload":"DistributionList"}},"ListDistributionsByWebACLId":{"http":{"method":"GET","requestUri":"/2020-05-31/distributionsByWebACLId/{WebACLId}"},"input":{"type":"structure","required":["WebACLId"],"members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"},"WebACLId":{"location":"uri","locationName":"WebACLId"}}},"output":{"type":"structure","members":{"DistributionList":{"shape":"S7n"}},"payload":"DistributionList"}},"ListFieldLevelEncryptionConfigs":{"http":{"method":"GET","requestUri":"/2020-05-31/field-level-encryption"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"FieldLevelEncryptionList":{"type":"structure","required":["MaxItems","Quantity"],"members":{"NextMarker":{},"MaxItems":{"type":"integer"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"FieldLevelEncryptionSummary","type":"structure","required":["Id","LastModifiedTime"],"members":{"Id":{},"LastModifiedTime":{"type":"timestamp"},"Comment":{},"QueryArgProfileConfig":{"shape":"S3c"},"ContentTypeProfileConfig":{"shape":"S3g"}}}}}}},"payload":"FieldLevelEncryptionList"}},"ListFieldLevelEncryptionProfiles":{"http":{"method":"GET","requestUri":"/2020-05-31/field-level-encryption-profile"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"FieldLevelEncryptionProfileList":{"type":"structure","required":["MaxItems","Quantity"],"members":{"NextMarker":{},"MaxItems":{"type":"integer"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"FieldLevelEncryptionProfileSummary","type":"structure","required":["Id","LastModifiedTime","Name","EncryptionEntities"],"members":{"Id":{},"LastModifiedTime":{"type":"timestamp"},"Name":{},"EncryptionEntities":{"shape":"S3p"},"Comment":{}}}}}}},"payload":"FieldLevelEncryptionProfileList"}},"ListFunctions":{"http":{"method":"GET","requestUri":"/2020-05-31/function"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"},"Stage":{"location":"querystring","locationName":"Stage"}}},"output":{"type":"structure","members":{"FunctionList":{"type":"structure","required":["MaxItems","Quantity"],"members":{"NextMarker":{},"MaxItems":{"type":"integer"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"shape":"S42","locationName":"FunctionSummary"}}}}},"payload":"FunctionList"}},"ListInvalidations":{"http":{"method":"GET","requestUri":"/2020-05-31/distribution/{DistributionId}/invalidation"},"input":{"type":"structure","required":["DistributionId"],"members":{"DistributionId":{"location":"uri","locationName":"DistributionId"},"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"InvalidationList":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"InvalidationSummary","type":"structure","required":["Id","CreateTime","Status"],"members":{"Id":{},"CreateTime":{"type":"timestamp"},"Status":{}}}}}}},"payload":"InvalidationList"}},"ListKeyGroups":{"http":{"method":"GET","requestUri":"/2020-05-31/key-group"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"KeyGroupList":{"type":"structure","required":["MaxItems","Quantity"],"members":{"NextMarker":{},"MaxItems":{"type":"integer"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"KeyGroupSummary","type":"structure","required":["KeyGroup"],"members":{"KeyGroup":{"shape":"S4f"}}}}}}},"payload":"KeyGroupList"}},"ListOriginRequestPolicies":{"http":{"method":"GET","requestUri":"/2020-05-31/origin-request-policy"},"input":{"type":"structure","members":{"Type":{"location":"querystring","locationName":"Type"},"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"OriginRequestPolicyList":{"type":"structure","required":["MaxItems","Quantity"],"members":{"NextMarker":{},"MaxItems":{"type":"integer"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"OriginRequestPolicySummary","type":"structure","required":["Type","OriginRequestPolicy"],"members":{"Type":{},"OriginRequestPolicy":{"shape":"S4u"}}}}}}},"payload":"OriginRequestPolicyList"}},"ListPublicKeys":{"http":{"method":"GET","requestUri":"/2020-05-31/public-key"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"PublicKeyList":{"type":"structure","required":["MaxItems","Quantity"],"members":{"NextMarker":{},"MaxItems":{"type":"integer"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"PublicKeySummary","type":"structure","required":["Id","Name","CreatedTime","EncodedKey"],"members":{"Id":{},"Name":{},"CreatedTime":{"type":"timestamp"},"EncodedKey":{},"Comment":{}}}}}}},"payload":"PublicKeyList"}},"ListRealtimeLogConfigs":{"http":{"method":"GET","requestUri":"/2020-05-31/realtime-log-config"},"input":{"type":"structure","members":{"MaxItems":{"location":"querystring","locationName":"MaxItems"},"Marker":{"location":"querystring","locationName":"Marker"}}},"output":{"type":"structure","members":{"RealtimeLogConfigs":{"type":"structure","required":["MaxItems","IsTruncated","Marker"],"members":{"MaxItems":{"type":"integer"},"Items":{"type":"list","member":{"shape":"S55"}},"IsTruncated":{"type":"boolean"},"Marker":{},"NextMarker":{}}}},"payload":"RealtimeLogConfigs"}},"ListStreamingDistributions":{"http":{"method":"GET","requestUri":"/2020-05-31/streaming-distribution"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"StreamingDistributionList":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"StreamingDistributionSummary","type":"structure","required":["Id","ARN","Status","LastModifiedTime","DomainName","S3Origin","Aliases","TrustedSigners","Comment","PriceClass","Enabled"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"DomainName":{},"S3Origin":{"shape":"S58"},"Aliases":{"shape":"Su"},"TrustedSigners":{"shape":"S1k"},"Comment":{},"PriceClass":{},"Enabled":{"type":"boolean"}}}}}}},"payload":"StreamingDistributionList"}},"ListTagsForResource":{"http":{"method":"GET","requestUri":"/2020-05-31/tagging"},"input":{"type":"structure","required":["Resource"],"members":{"Resource":{"location":"querystring","locationName":"Resource"}}},"output":{"type":"structure","required":["Tags"],"members":{"Tags":{"shape":"S34"}},"payload":"Tags"}},"PublishFunction":{"http":{"requestUri":"/2020-05-31/function/{Name}/publish"},"input":{"type":"structure","required":["Name","IfMatch"],"members":{"Name":{"location":"uri","locationName":"Name"},"IfMatch":{"location":"header","locationName":"If-Match"}}},"output":{"type":"structure","members":{"FunctionSummary":{"shape":"S42"}},"payload":"FunctionSummary"}},"TagResource":{"http":{"requestUri":"/2020-05-31/tagging?Operation=Tag","responseCode":204},"input":{"type":"structure","required":["Resource","Tags"],"members":{"Resource":{"location":"querystring","locationName":"Resource"},"Tags":{"shape":"S34","locationName":"Tags","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2020-05-31/"}}},"payload":"Tags"}},"TestFunction":{"http":{"requestUri":"/2020-05-31/function/{Name}/test"},"input":{"locationName":"TestFunctionRequest","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2020-05-31/"},"type":"structure","required":["Name","IfMatch","EventObject"],"members":{"Name":{"location":"uri","locationName":"Name"},"IfMatch":{"location":"header","locationName":"If-Match"},"Stage":{},"EventObject":{"type":"blob","sensitive":true}}},"output":{"type":"structure","members":{"TestResult":{"type":"structure","members":{"FunctionSummary":{"shape":"S42"},"ComputeUtilization":{},"FunctionExecutionLogs":{"type":"list","member":{}},"FunctionErrorMessage":{},"FunctionOutput":{}}}},"payload":"TestResult"}},"UntagResource":{"http":{"requestUri":"/2020-05-31/tagging?Operation=Untag","responseCode":204},"input":{"type":"structure","required":["Resource","TagKeys"],"members":{"Resource":{"location":"querystring","locationName":"Resource"},"TagKeys":{"locationName":"TagKeys","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2020-05-31/"},"type":"structure","members":{"Items":{"type":"list","member":{"locationName":"Key"}}}}},"payload":"TagKeys"}},"UpdateCachePolicy":{"http":{"method":"PUT","requestUri":"/2020-05-31/cache-policy/{Id}"},"input":{"type":"structure","required":["CachePolicyConfig","Id"],"members":{"CachePolicyConfig":{"shape":"S4","locationName":"CachePolicyConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2020-05-31/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"CachePolicyConfig"},"output":{"type":"structure","members":{"CachePolicy":{"shape":"Sm"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CachePolicy"}},"UpdateCloudFrontOriginAccessIdentity":{"http":{"method":"PUT","requestUri":"/2020-05-31/origin-access-identity/cloudfront/{Id}/config"},"input":{"type":"structure","required":["CloudFrontOriginAccessIdentityConfig","Id"],"members":{"CloudFrontOriginAccessIdentityConfig":{"shape":"Sp","locationName":"CloudFrontOriginAccessIdentityConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2020-05-31/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"CloudFrontOriginAccessIdentityConfig"},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentity":{"shape":"Sr"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentity"}},"UpdateDistribution":{"http":{"method":"PUT","requestUri":"/2020-05-31/distribution/{Id}/config"},"input":{"type":"structure","required":["DistributionConfig","Id"],"members":{"DistributionConfig":{"shape":"St","locationName":"DistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2020-05-31/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"DistributionConfig"},"output":{"type":"structure","members":{"Distribution":{"shape":"S2q"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"UpdateFieldLevelEncryptionConfig":{"http":{"method":"PUT","requestUri":"/2020-05-31/field-level-encryption/{Id}/config"},"input":{"type":"structure","required":["FieldLevelEncryptionConfig","Id"],"members":{"FieldLevelEncryptionConfig":{"shape":"S3b","locationName":"FieldLevelEncryptionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2020-05-31/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"FieldLevelEncryptionConfig"},"output":{"type":"structure","members":{"FieldLevelEncryption":{"shape":"S3m"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryption"}},"UpdateFieldLevelEncryptionProfile":{"http":{"method":"PUT","requestUri":"/2020-05-31/field-level-encryption-profile/{Id}/config"},"input":{"type":"structure","required":["FieldLevelEncryptionProfileConfig","Id"],"members":{"FieldLevelEncryptionProfileConfig":{"shape":"S3o","locationName":"FieldLevelEncryptionProfileConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2020-05-31/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"FieldLevelEncryptionProfileConfig"},"output":{"type":"structure","members":{"FieldLevelEncryptionProfile":{"shape":"S3v"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"FieldLevelEncryptionProfile"}},"UpdateFunction":{"http":{"method":"PUT","requestUri":"/2020-05-31/function/{Name}"},"input":{"locationName":"UpdateFunctionRequest","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2020-05-31/"},"type":"structure","required":["IfMatch","FunctionConfig","FunctionCode","Name"],"members":{"Name":{"location":"uri","locationName":"Name"},"IfMatch":{"location":"header","locationName":"If-Match"},"FunctionConfig":{"shape":"S3y"},"FunctionCode":{"shape":"S40"}}},"output":{"type":"structure","members":{"FunctionSummary":{"shape":"S42"},"ETag":{"location":"header","locationName":"ETtag"}},"payload":"FunctionSummary"}},"UpdateKeyGroup":{"http":{"method":"PUT","requestUri":"/2020-05-31/key-group/{Id}"},"input":{"type":"structure","required":["KeyGroupConfig","Id"],"members":{"KeyGroupConfig":{"shape":"S4c","locationName":"KeyGroupConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2020-05-31/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"KeyGroupConfig"},"output":{"type":"structure","members":{"KeyGroup":{"shape":"S4f"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"KeyGroup"}},"UpdateOriginRequestPolicy":{"http":{"method":"PUT","requestUri":"/2020-05-31/origin-request-policy/{Id}"},"input":{"type":"structure","required":["OriginRequestPolicyConfig","Id"],"members":{"OriginRequestPolicyConfig":{"shape":"S4m","locationName":"OriginRequestPolicyConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2020-05-31/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"OriginRequestPolicyConfig"},"output":{"type":"structure","members":{"OriginRequestPolicy":{"shape":"S4u"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"OriginRequestPolicy"}},"UpdatePublicKey":{"http":{"method":"PUT","requestUri":"/2020-05-31/public-key/{Id}/config"},"input":{"type":"structure","required":["PublicKeyConfig","Id"],"members":{"PublicKeyConfig":{"shape":"S4w","locationName":"PublicKeyConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2020-05-31/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"PublicKeyConfig"},"output":{"type":"structure","members":{"PublicKey":{"shape":"S4y"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"PublicKey"}},"UpdateRealtimeLogConfig":{"http":{"method":"PUT","requestUri":"/2020-05-31/realtime-log-config/"},"input":{"locationName":"UpdateRealtimeLogConfigRequest","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2020-05-31/"},"type":"structure","members":{"EndPoints":{"shape":"S50"},"Fields":{"shape":"S53"},"Name":{},"ARN":{},"SamplingRate":{"type":"long"}}},"output":{"type":"structure","members":{"RealtimeLogConfig":{"shape":"S55"}}}},"UpdateStreamingDistribution":{"http":{"method":"PUT","requestUri":"/2020-05-31/streaming-distribution/{Id}/config"},"input":{"type":"structure","required":["StreamingDistributionConfig","Id"],"members":{"StreamingDistributionConfig":{"shape":"S57","locationName":"StreamingDistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2020-05-31/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"StreamingDistributionConfig"},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S5b"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}}},"shapes":{"S4":{"type":"structure","required":["Name","MinTTL"],"members":{"Comment":{},"Name":{},"DefaultTTL":{"type":"long"},"MaxTTL":{"type":"long"},"MinTTL":{"type":"long"},"ParametersInCacheKeyAndForwardedToOrigin":{"type":"structure","required":["EnableAcceptEncodingGzip","HeadersConfig","CookiesConfig","QueryStringsConfig"],"members":{"EnableAcceptEncodingGzip":{"type":"boolean"},"EnableAcceptEncodingBrotli":{"type":"boolean"},"HeadersConfig":{"type":"structure","required":["HeaderBehavior"],"members":{"HeaderBehavior":{},"Headers":{"shape":"Sa"}}},"CookiesConfig":{"type":"structure","required":["CookieBehavior"],"members":{"CookieBehavior":{},"Cookies":{"shape":"Sf"}}},"QueryStringsConfig":{"type":"structure","required":["QueryStringBehavior"],"members":{"QueryStringBehavior":{},"QueryStrings":{"shape":"Sj"}}}}}}},"Sa":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Name"}}}},"Sf":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Name"}}}},"Sj":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Name"}}}},"Sm":{"type":"structure","required":["Id","LastModifiedTime","CachePolicyConfig"],"members":{"Id":{},"LastModifiedTime":{"type":"timestamp"},"CachePolicyConfig":{"shape":"S4"}}},"Sp":{"type":"structure","required":["CallerReference","Comment"],"members":{"CallerReference":{},"Comment":{}}},"Sr":{"type":"structure","required":["Id","S3CanonicalUserId"],"members":{"Id":{},"S3CanonicalUserId":{},"CloudFrontOriginAccessIdentityConfig":{"shape":"Sp"}}},"St":{"type":"structure","required":["CallerReference","Origins","DefaultCacheBehavior","Comment","Enabled"],"members":{"CallerReference":{},"Aliases":{"shape":"Su"},"DefaultRootObject":{},"Origins":{"shape":"Sw"},"OriginGroups":{"shape":"S1a"},"DefaultCacheBehavior":{"shape":"S1j"},"CacheBehaviors":{"shape":"S27"},"CustomErrorResponses":{"shape":"S2a"},"Comment":{"type":"string","sensitive":true},"Logging":{"type":"structure","required":["Enabled","IncludeCookies","Bucket","Prefix"],"members":{"Enabled":{"type":"boolean"},"IncludeCookies":{"type":"boolean"},"Bucket":{},"Prefix":{}}},"PriceClass":{},"Enabled":{"type":"boolean"},"ViewerCertificate":{"shape":"S2g"},"Restrictions":{"shape":"S2k"},"WebACLId":{},"HttpVersion":{},"IsIPV6Enabled":{"type":"boolean"}}},"Su":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CNAME"}}}},"Sw":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Origin","type":"structure","required":["Id","DomainName"],"members":{"Id":{},"DomainName":{},"OriginPath":{},"CustomHeaders":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"OriginCustomHeader","type":"structure","required":["HeaderName","HeaderValue"],"members":{"HeaderName":{},"HeaderValue":{}}}}}},"S3OriginConfig":{"type":"structure","required":["OriginAccessIdentity"],"members":{"OriginAccessIdentity":{}}},"CustomOriginConfig":{"type":"structure","required":["HTTPPort","HTTPSPort","OriginProtocolPolicy"],"members":{"HTTPPort":{"type":"integer"},"HTTPSPort":{"type":"integer"},"OriginProtocolPolicy":{},"OriginSslProtocols":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"SslProtocol"}}}},"OriginReadTimeout":{"type":"integer"},"OriginKeepaliveTimeout":{"type":"integer"}}},"ConnectionAttempts":{"type":"integer"},"ConnectionTimeout":{"type":"integer"},"OriginShield":{"type":"structure","required":["Enabled"],"members":{"Enabled":{"type":"boolean"},"OriginShieldRegion":{}}}}}}}},"S1a":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"OriginGroup","type":"structure","required":["Id","FailoverCriteria","Members"],"members":{"Id":{},"FailoverCriteria":{"type":"structure","required":["StatusCodes"],"members":{"StatusCodes":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"StatusCode","type":"integer"}}}}}},"Members":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"OriginGroupMember","type":"structure","required":["OriginId"],"members":{"OriginId":{}}}}}}}}}}},"S1j":{"type":"structure","required":["TargetOriginId","ViewerProtocolPolicy"],"members":{"TargetOriginId":{},"TrustedSigners":{"shape":"S1k"},"TrustedKeyGroups":{"shape":"S1m"},"ViewerProtocolPolicy":{},"AllowedMethods":{"shape":"S1p"},"SmoothStreaming":{"type":"boolean"},"Compress":{"type":"boolean"},"LambdaFunctionAssociations":{"shape":"S1t"},"FunctionAssociations":{"shape":"S1y"},"FieldLevelEncryptionId":{},"RealtimeLogConfigArn":{},"CachePolicyId":{},"OriginRequestPolicyId":{},"ForwardedValues":{"shape":"S22","deprecated":true},"MinTTL":{"deprecated":true,"type":"long"},"DefaultTTL":{"deprecated":true,"type":"long"},"MaxTTL":{"deprecated":true,"type":"long"}}},"S1k":{"type":"structure","required":["Enabled","Quantity"],"members":{"Enabled":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"AwsAccountNumber"}}}},"S1m":{"type":"structure","required":["Enabled","Quantity"],"members":{"Enabled":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"KeyGroup"}}}},"S1p":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"shape":"S1q"},"CachedMethods":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"shape":"S1q"}}}}},"S1q":{"type":"list","member":{"locationName":"Method"}},"S1t":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"LambdaFunctionAssociation","type":"structure","required":["LambdaFunctionARN","EventType"],"members":{"LambdaFunctionARN":{},"EventType":{},"IncludeBody":{"type":"boolean"}}}}}},"S1y":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"FunctionAssociation","type":"structure","required":["FunctionARN","EventType"],"members":{"FunctionARN":{},"EventType":{}}}}}},"S22":{"type":"structure","required":["QueryString","Cookies"],"members":{"QueryString":{"type":"boolean"},"Cookies":{"type":"structure","required":["Forward"],"members":{"Forward":{},"WhitelistedNames":{"shape":"Sf"}}},"Headers":{"shape":"Sa"},"QueryStringCacheKeys":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Name"}}}}}},"S27":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CacheBehavior","type":"structure","required":["PathPattern","TargetOriginId","ViewerProtocolPolicy"],"members":{"PathPattern":{},"TargetOriginId":{},"TrustedSigners":{"shape":"S1k"},"TrustedKeyGroups":{"shape":"S1m"},"ViewerProtocolPolicy":{},"AllowedMethods":{"shape":"S1p"},"SmoothStreaming":{"type":"boolean"},"Compress":{"type":"boolean"},"LambdaFunctionAssociations":{"shape":"S1t"},"FunctionAssociations":{"shape":"S1y"},"FieldLevelEncryptionId":{},"RealtimeLogConfigArn":{},"CachePolicyId":{},"OriginRequestPolicyId":{},"ForwardedValues":{"shape":"S22","deprecated":true},"MinTTL":{"deprecated":true,"type":"long"},"DefaultTTL":{"deprecated":true,"type":"long"},"MaxTTL":{"deprecated":true,"type":"long"}}}}}},"S2a":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CustomErrorResponse","type":"structure","required":["ErrorCode"],"members":{"ErrorCode":{"type":"integer"},"ResponsePagePath":{},"ResponseCode":{},"ErrorCachingMinTTL":{"type":"long"}}}}}},"S2g":{"type":"structure","members":{"CloudFrontDefaultCertificate":{"type":"boolean"},"IAMCertificateId":{},"ACMCertificateArn":{},"SSLSupportMethod":{},"MinimumProtocolVersion":{},"Certificate":{"deprecated":true},"CertificateSource":{"deprecated":true}}},"S2k":{"type":"structure","required":["GeoRestriction"],"members":{"GeoRestriction":{"type":"structure","required":["RestrictionType","Quantity"],"members":{"RestrictionType":{},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Location"}}}}}},"S2q":{"type":"structure","required":["Id","ARN","Status","LastModifiedTime","InProgressInvalidationBatches","DomainName","DistributionConfig"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"InProgressInvalidationBatches":{"type":"integer"},"DomainName":{},"ActiveTrustedSigners":{"shape":"S2r"},"ActiveTrustedKeyGroups":{"type":"structure","required":["Enabled","Quantity"],"members":{"Enabled":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"KeyGroup","type":"structure","members":{"KeyGroupId":{},"KeyPairIds":{"shape":"S2u"}}}}}},"DistributionConfig":{"shape":"St"},"AliasICPRecordals":{"shape":"S2z"}}},"S2r":{"type":"structure","required":["Enabled","Quantity"],"members":{"Enabled":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Signer","type":"structure","members":{"AwsAccountNumber":{},"KeyPairIds":{"shape":"S2u"}}}}}},"S2u":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"KeyPairId"}}}},"S2z":{"type":"list","member":{"locationName":"AliasICPRecordal","type":"structure","members":{"CNAME":{},"ICPRecordalStatus":{}}}},"S34":{"type":"structure","members":{"Items":{"type":"list","member":{"locationName":"Tag","type":"structure","required":["Key"],"members":{"Key":{},"Value":{}}}}}},"S3b":{"type":"structure","required":["CallerReference"],"members":{"CallerReference":{},"Comment":{},"QueryArgProfileConfig":{"shape":"S3c"},"ContentTypeProfileConfig":{"shape":"S3g"}}},"S3c":{"type":"structure","required":["ForwardWhenQueryArgProfileIsUnknown"],"members":{"ForwardWhenQueryArgProfileIsUnknown":{"type":"boolean"},"QueryArgProfiles":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"QueryArgProfile","type":"structure","required":["QueryArg","ProfileId"],"members":{"QueryArg":{},"ProfileId":{}}}}}}}},"S3g":{"type":"structure","required":["ForwardWhenContentTypeIsUnknown"],"members":{"ForwardWhenContentTypeIsUnknown":{"type":"boolean"},"ContentTypeProfiles":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"ContentTypeProfile","type":"structure","required":["Format","ContentType"],"members":{"Format":{},"ProfileId":{},"ContentType":{}}}}}}}},"S3m":{"type":"structure","required":["Id","LastModifiedTime","FieldLevelEncryptionConfig"],"members":{"Id":{},"LastModifiedTime":{"type":"timestamp"},"FieldLevelEncryptionConfig":{"shape":"S3b"}}},"S3o":{"type":"structure","required":["Name","CallerReference","EncryptionEntities"],"members":{"Name":{},"CallerReference":{},"Comment":{},"EncryptionEntities":{"shape":"S3p"}}},"S3p":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"EncryptionEntity","type":"structure","required":["PublicKeyId","ProviderId","FieldPatterns"],"members":{"PublicKeyId":{},"ProviderId":{},"FieldPatterns":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"FieldPattern"}}}}}}}}},"S3v":{"type":"structure","required":["Id","LastModifiedTime","FieldLevelEncryptionProfileConfig"],"members":{"Id":{},"LastModifiedTime":{"type":"timestamp"},"FieldLevelEncryptionProfileConfig":{"shape":"S3o"}}},"S3y":{"type":"structure","required":["Comment","Runtime"],"members":{"Comment":{},"Runtime":{}}},"S40":{"type":"blob","sensitive":true},"S42":{"type":"structure","required":["Name","FunctionConfig","FunctionMetadata"],"members":{"Name":{},"Status":{},"FunctionConfig":{"shape":"S3y"},"FunctionMetadata":{"type":"structure","required":["FunctionARN","LastModifiedTime"],"members":{"FunctionARN":{},"Stage":{},"CreatedTime":{"type":"timestamp"},"LastModifiedTime":{"type":"timestamp"}}}}},"S46":{"type":"structure","required":["Paths","CallerReference"],"members":{"Paths":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Path"}}}},"CallerReference":{}}},"S4a":{"type":"structure","required":["Id","Status","CreateTime","InvalidationBatch"],"members":{"Id":{},"Status":{},"CreateTime":{"type":"timestamp"},"InvalidationBatch":{"shape":"S46"}}},"S4c":{"type":"structure","required":["Name","Items"],"members":{"Name":{},"Items":{"type":"list","member":{"locationName":"PublicKey"}},"Comment":{}}},"S4f":{"type":"structure","required":["Id","LastModifiedTime","KeyGroupConfig"],"members":{"Id":{},"LastModifiedTime":{"type":"timestamp"},"KeyGroupConfig":{"shape":"S4c"}}},"S4h":{"type":"structure","members":{"RealtimeMetricsSubscriptionConfig":{"type":"structure","required":["RealtimeMetricsSubscriptionStatus"],"members":{"RealtimeMetricsSubscriptionStatus":{}}}}},"S4m":{"type":"structure","required":["Name","HeadersConfig","CookiesConfig","QueryStringsConfig"],"members":{"Comment":{},"Name":{},"HeadersConfig":{"type":"structure","required":["HeaderBehavior"],"members":{"HeaderBehavior":{},"Headers":{"shape":"Sa"}}},"CookiesConfig":{"type":"structure","required":["CookieBehavior"],"members":{"CookieBehavior":{},"Cookies":{"shape":"Sf"}}},"QueryStringsConfig":{"type":"structure","required":["QueryStringBehavior"],"members":{"QueryStringBehavior":{},"QueryStrings":{"shape":"Sj"}}}}},"S4u":{"type":"structure","required":["Id","LastModifiedTime","OriginRequestPolicyConfig"],"members":{"Id":{},"LastModifiedTime":{"type":"timestamp"},"OriginRequestPolicyConfig":{"shape":"S4m"}}},"S4w":{"type":"structure","required":["CallerReference","Name","EncodedKey"],"members":{"CallerReference":{},"Name":{},"EncodedKey":{},"Comment":{}}},"S4y":{"type":"structure","required":["Id","CreatedTime","PublicKeyConfig"],"members":{"Id":{},"CreatedTime":{"type":"timestamp"},"PublicKeyConfig":{"shape":"S4w"}}},"S50":{"type":"list","member":{"type":"structure","required":["StreamType"],"members":{"StreamType":{},"KinesisStreamConfig":{"type":"structure","required":["RoleARN","StreamARN"],"members":{"RoleARN":{},"StreamARN":{}}}}}},"S53":{"type":"list","member":{"locationName":"Field"}},"S55":{"type":"structure","required":["ARN","Name","SamplingRate","EndPoints","Fields"],"members":{"ARN":{},"Name":{},"SamplingRate":{"type":"long"},"EndPoints":{"shape":"S50"},"Fields":{"shape":"S53"}}},"S57":{"type":"structure","required":["CallerReference","S3Origin","Comment","TrustedSigners","Enabled"],"members":{"CallerReference":{},"S3Origin":{"shape":"S58"},"Aliases":{"shape":"Su"},"Comment":{},"Logging":{"type":"structure","required":["Enabled","Bucket","Prefix"],"members":{"Enabled":{"type":"boolean"},"Bucket":{},"Prefix":{}}},"TrustedSigners":{"shape":"S1k"},"PriceClass":{},"Enabled":{"type":"boolean"}}},"S58":{"type":"structure","required":["DomainName","OriginAccessIdentity"],"members":{"DomainName":{},"OriginAccessIdentity":{}}},"S5b":{"type":"structure","required":["Id","ARN","Status","DomainName","ActiveTrustedSigners","StreamingDistributionConfig"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"DomainName":{},"ActiveTrustedSigners":{"shape":"S2r"},"StreamingDistributionConfig":{"shape":"S57"}}},"S7n":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"DistributionSummary","type":"structure","required":["Id","ARN","Status","LastModifiedTime","DomainName","Aliases","Origins","DefaultCacheBehavior","CacheBehaviors","CustomErrorResponses","Comment","PriceClass","Enabled","ViewerCertificate","Restrictions","WebACLId","HttpVersion","IsIPV6Enabled"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"DomainName":{},"Aliases":{"shape":"Su"},"Origins":{"shape":"Sw"},"OriginGroups":{"shape":"S1a"},"DefaultCacheBehavior":{"shape":"S1j"},"CacheBehaviors":{"shape":"S27"},"CustomErrorResponses":{"shape":"S2a"},"Comment":{},"PriceClass":{},"Enabled":{"type":"boolean"},"ViewerCertificate":{"shape":"S2g"},"Restrictions":{"shape":"S2k"},"WebACLId":{},"HttpVersion":{},"IsIPV6Enabled":{"type":"boolean"},"AliasICPRecordals":{"shape":"S2z"}}}}}},"S7s":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"DistributionId"}}}}}}

/***/ }),
/* 105 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"ListCloudFrontOriginAccessIdentities":{"input_token":"Marker","limit_key":"MaxItems","more_results":"CloudFrontOriginAccessIdentityList.IsTruncated","output_token":"CloudFrontOriginAccessIdentityList.NextMarker","result_key":"CloudFrontOriginAccessIdentityList.Items"},"ListDistributions":{"input_token":"Marker","limit_key":"MaxItems","more_results":"DistributionList.IsTruncated","output_token":"DistributionList.NextMarker","result_key":"DistributionList.Items"},"ListInvalidations":{"input_token":"Marker","limit_key":"MaxItems","more_results":"InvalidationList.IsTruncated","output_token":"InvalidationList.NextMarker","result_key":"InvalidationList.Items"},"ListStreamingDistributions":{"input_token":"Marker","limit_key":"MaxItems","more_results":"StreamingDistributionList.IsTruncated","output_token":"StreamingDistributionList.NextMarker","result_key":"StreamingDistributionList.Items"}}}

/***/ }),
/* 106 */
/***/ (function(module, exports) {

	module.exports = {"version":2,"waiters":{"DistributionDeployed":{"delay":60,"operation":"GetDistribution","maxAttempts":35,"description":"Wait until a distribution is deployed.","acceptors":[{"expected":"Deployed","matcher":"path","state":"success","argument":"Distribution.Status"}]},"InvalidationCompleted":{"delay":20,"operation":"GetInvalidation","maxAttempts":30,"description":"Wait until an invalidation has completed.","acceptors":[{"expected":"Completed","matcher":"path","state":"success","argument":"Invalidation.Status"}]},"StreamingDistributionDeployed":{"delay":60,"operation":"GetStreamingDistribution","maxAttempts":25,"description":"Wait until a streaming distribution is deployed.","acceptors":[{"expected":"Deployed","matcher":"path","state":"success","argument":"StreamingDistribution.Status"}]}}}

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['cloudhsm'] = {};
	AWS.CloudHSM = Service.defineService('cloudhsm', ['2014-05-30']);
	Object.defineProperty(apiLoader.services['cloudhsm'], '2014-05-30', {
	  get: function get() {
	    var model = __webpack_require__(108);
	    model.paginators = __webpack_require__(109).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.CloudHSM;


/***/ }),
/* 108 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2014-05-30","endpointPrefix":"cloudhsm","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"CloudHSM","serviceFullName":"Amazon CloudHSM","serviceId":"CloudHSM","signatureVersion":"v4","targetPrefix":"CloudHsmFrontendService","uid":"cloudhsm-2014-05-30"},"operations":{"AddTagsToResource":{"input":{"type":"structure","required":["ResourceArn","TagList"],"members":{"ResourceArn":{},"TagList":{"shape":"S3"}}},"output":{"type":"structure","required":["Status"],"members":{"Status":{}}}},"CreateHapg":{"input":{"type":"structure","required":["Label"],"members":{"Label":{}}},"output":{"type":"structure","members":{"HapgArn":{}}}},"CreateHsm":{"input":{"type":"structure","required":["SubnetId","SshKey","IamRoleArn","SubscriptionType"],"members":{"SubnetId":{},"SshKey":{},"EniIp":{},"IamRoleArn":{},"ExternalId":{},"SubscriptionType":{},"ClientToken":{},"SyslogIp":{}}},"output":{"type":"structure","members":{"HsmArn":{}}}},"CreateLunaClient":{"input":{"type":"structure","required":["Certificate"],"members":{"Label":{},"Certificate":{}}},"output":{"type":"structure","members":{"ClientArn":{}}}},"DeleteHapg":{"input":{"type":"structure","required":["HapgArn"],"members":{"HapgArn":{}}},"output":{"type":"structure","required":["Status"],"members":{"Status":{}}}},"DeleteHsm":{"input":{"type":"structure","required":["HsmArn"],"members":{"HsmArn":{}}},"output":{"type":"structure","required":["Status"],"members":{"Status":{}}}},"DeleteLunaClient":{"input":{"type":"structure","required":["ClientArn"],"members":{"ClientArn":{}}},"output":{"type":"structure","required":["Status"],"members":{"Status":{}}}},"DescribeHapg":{"input":{"type":"structure","required":["HapgArn"],"members":{"HapgArn":{}}},"output":{"type":"structure","members":{"HapgArn":{},"HapgSerial":{},"HsmsLastActionFailed":{"shape":"Sz"},"HsmsPendingDeletion":{"shape":"Sz"},"HsmsPendingRegistration":{"shape":"Sz"},"Label":{},"LastModifiedTimestamp":{},"PartitionSerialList":{"shape":"S11"},"State":{}}}},"DescribeHsm":{"input":{"type":"structure","members":{"HsmArn":{},"HsmSerialNumber":{}}},"output":{"type":"structure","members":{"HsmArn":{},"Status":{},"StatusDetails":{},"AvailabilityZone":{},"EniId":{},"EniIp":{},"SubscriptionType":{},"SubscriptionStartDate":{},"SubscriptionEndDate":{},"VpcId":{},"SubnetId":{},"IamRoleArn":{},"SerialNumber":{},"VendorName":{},"HsmType":{},"SoftwareVersion":{},"SshPublicKey":{},"SshKeyLastUpdated":{},"ServerCertUri":{},"ServerCertLastUpdated":{},"Partitions":{"type":"list","member":{}}}}},"DescribeLunaClient":{"input":{"type":"structure","members":{"ClientArn":{},"CertificateFingerprint":{}}},"output":{"type":"structure","members":{"ClientArn":{},"Certificate":{},"CertificateFingerprint":{},"LastModifiedTimestamp":{},"Label":{}}}},"GetConfig":{"input":{"type":"structure","required":["ClientArn","ClientVersion","HapgList"],"members":{"ClientArn":{},"ClientVersion":{},"HapgList":{"shape":"S1i"}}},"output":{"type":"structure","members":{"ConfigType":{},"ConfigFile":{},"ConfigCred":{}}}},"ListAvailableZones":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"AZList":{"type":"list","member":{}}}}},"ListHapgs":{"input":{"type":"structure","members":{"NextToken":{}}},"output":{"type":"structure","required":["HapgList"],"members":{"HapgList":{"shape":"S1i"},"NextToken":{}}}},"ListHsms":{"input":{"type":"structure","members":{"NextToken":{}}},"output":{"type":"structure","members":{"HsmList":{"shape":"Sz"},"NextToken":{}}}},"ListLunaClients":{"input":{"type":"structure","members":{"NextToken":{}}},"output":{"type":"structure","required":["ClientList"],"members":{"ClientList":{"type":"list","member":{}},"NextToken":{}}}},"ListTagsForResource":{"input":{"type":"structure","required":["ResourceArn"],"members":{"ResourceArn":{}}},"output":{"type":"structure","required":["TagList"],"members":{"TagList":{"shape":"S3"}}}},"ModifyHapg":{"input":{"type":"structure","required":["HapgArn"],"members":{"HapgArn":{},"Label":{},"PartitionSerialList":{"shape":"S11"}}},"output":{"type":"structure","members":{"HapgArn":{}}}},"ModifyHsm":{"input":{"type":"structure","required":["HsmArn"],"members":{"HsmArn":{},"SubnetId":{},"EniIp":{},"IamRoleArn":{},"ExternalId":{},"SyslogIp":{}}},"output":{"type":"structure","members":{"HsmArn":{}}}},"ModifyLunaClient":{"input":{"type":"structure","required":["ClientArn","Certificate"],"members":{"ClientArn":{},"Certificate":{}}},"output":{"type":"structure","members":{"ClientArn":{}}}},"RemoveTagsFromResource":{"input":{"type":"structure","required":["ResourceArn","TagKeyList"],"members":{"ResourceArn":{},"TagKeyList":{"type":"list","member":{}}}},"output":{"type":"structure","required":["Status"],"members":{"Status":{}}}}},"shapes":{"S3":{"type":"list","member":{"type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{}}}},"Sz":{"type":"list","member":{}},"S11":{"type":"list","member":{}},"S1i":{"type":"list","member":{}}}}

/***/ }),
/* 109 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{}}

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['cloudsearch'] = {};
	AWS.CloudSearch = Service.defineService('cloudsearch', ['2011-02-01', '2013-01-01']);
	Object.defineProperty(apiLoader.services['cloudsearch'], '2011-02-01', {
	  get: function get() {
	    var model = __webpack_require__(111);
	    model.paginators = __webpack_require__(112).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	Object.defineProperty(apiLoader.services['cloudsearch'], '2013-01-01', {
	  get: function get() {
	    var model = __webpack_require__(113);
	    model.paginators = __webpack_require__(114).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.CloudSearch;


/***/ }),
/* 111 */
/***/ (function(module, exports) {

	module.exports = {"metadata":{"apiVersion":"2011-02-01","endpointPrefix":"cloudsearch","serviceFullName":"Amazon CloudSearch","serviceId":"CloudSearch","signatureVersion":"v4","xmlNamespace":"http://cloudsearch.amazonaws.com/doc/2011-02-01/","protocol":"query"},"operations":{"CreateDomain":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"resultWrapper":"CreateDomainResult","type":"structure","members":{"DomainStatus":{"shape":"S4"}}}},"DefineIndexField":{"input":{"type":"structure","required":["DomainName","IndexField"],"members":{"DomainName":{},"IndexField":{"shape":"Sf"}}},"output":{"resultWrapper":"DefineIndexFieldResult","type":"structure","required":["IndexField"],"members":{"IndexField":{"shape":"Sx"}}}},"DefineRankExpression":{"input":{"type":"structure","required":["DomainName","RankExpression"],"members":{"DomainName":{},"RankExpression":{"shape":"S12"}}},"output":{"resultWrapper":"DefineRankExpressionResult","type":"structure","required":["RankExpression"],"members":{"RankExpression":{"shape":"S15"}}}},"DeleteDomain":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"resultWrapper":"DeleteDomainResult","type":"structure","members":{"DomainStatus":{"shape":"S4"}}}},"DeleteIndexField":{"input":{"type":"structure","required":["DomainName","IndexFieldName"],"members":{"DomainName":{},"IndexFieldName":{}}},"output":{"resultWrapper":"DeleteIndexFieldResult","type":"structure","required":["IndexField"],"members":{"IndexField":{"shape":"Sx"}}}},"DeleteRankExpression":{"input":{"type":"structure","required":["DomainName","RankName"],"members":{"DomainName":{},"RankName":{}}},"output":{"resultWrapper":"DeleteRankExpressionResult","type":"structure","required":["RankExpression"],"members":{"RankExpression":{"shape":"S15"}}}},"DescribeAvailabilityOptions":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"resultWrapper":"DescribeAvailabilityOptionsResult","type":"structure","members":{"AvailabilityOptions":{"shape":"S1e"}}}},"DescribeDefaultSearchField":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"resultWrapper":"DescribeDefaultSearchFieldResult","type":"structure","required":["DefaultSearchField"],"members":{"DefaultSearchField":{"shape":"S1i"}}}},"DescribeDomains":{"input":{"type":"structure","members":{"DomainNames":{"type":"list","member":{}}}},"output":{"resultWrapper":"DescribeDomainsResult","type":"structure","required":["DomainStatusList"],"members":{"DomainStatusList":{"type":"list","member":{"shape":"S4"}}}}},"DescribeIndexFields":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{},"FieldNames":{"shape":"S1o"}}},"output":{"resultWrapper":"DescribeIndexFieldsResult","type":"structure","required":["IndexFields"],"members":{"IndexFields":{"type":"list","member":{"shape":"Sx"}}}}},"DescribeRankExpressions":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{},"RankNames":{"shape":"S1o"}}},"output":{"resultWrapper":"DescribeRankExpressionsResult","type":"structure","required":["RankExpressions"],"members":{"RankExpressions":{"type":"list","member":{"shape":"S15"}}}}},"DescribeServiceAccessPolicies":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"resultWrapper":"DescribeServiceAccessPoliciesResult","type":"structure","required":["AccessPolicies"],"members":{"AccessPolicies":{"shape":"S1w"}}}},"DescribeStemmingOptions":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"resultWrapper":"DescribeStemmingOptionsResult","type":"structure","required":["Stems"],"members":{"Stems":{"shape":"S20"}}}},"DescribeStopwordOptions":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"resultWrapper":"DescribeStopwordOptionsResult","type":"structure","required":["Stopwords"],"members":{"Stopwords":{"shape":"S24"}}}},"DescribeSynonymOptions":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"resultWrapper":"DescribeSynonymOptionsResult","type":"structure","required":["Synonyms"],"members":{"Synonyms":{"shape":"S28"}}}},"IndexDocuments":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"resultWrapper":"IndexDocumentsResult","type":"structure","members":{"FieldNames":{"shape":"S1o"}}}},"UpdateAvailabilityOptions":{"input":{"type":"structure","required":["DomainName","MultiAZ"],"members":{"DomainName":{},"MultiAZ":{"type":"boolean"}}},"output":{"resultWrapper":"UpdateAvailabilityOptionsResult","type":"structure","members":{"AvailabilityOptions":{"shape":"S1e"}}}},"UpdateDefaultSearchField":{"input":{"type":"structure","required":["DomainName","DefaultSearchField"],"members":{"DomainName":{},"DefaultSearchField":{}}},"output":{"resultWrapper":"UpdateDefaultSearchFieldResult","type":"structure","required":["DefaultSearchField"],"members":{"DefaultSearchField":{"shape":"S1i"}}}},"UpdateServiceAccessPolicies":{"input":{"type":"structure","required":["DomainName","AccessPolicies"],"members":{"DomainName":{},"AccessPolicies":{}}},"output":{"resultWrapper":"UpdateServiceAccessPoliciesResult","type":"structure","required":["AccessPolicies"],"members":{"AccessPolicies":{"shape":"S1w"}}}},"UpdateStemmingOptions":{"input":{"type":"structure","required":["DomainName","Stems"],"members":{"DomainName":{},"Stems":{}}},"output":{"resultWrapper":"UpdateStemmingOptionsResult","type":"structure","required":["Stems"],"members":{"Stems":{"shape":"S20"}}}},"UpdateStopwordOptions":{"input":{"type":"structure","required":["DomainName","Stopwords"],"members":{"DomainName":{},"Stopwords":{}}},"output":{"resultWrapper":"UpdateStopwordOptionsResult","type":"structure","required":["Stopwords"],"members":{"Stopwords":{"shape":"S24"}}}},"UpdateSynonymOptions":{"input":{"type":"structure","required":["DomainName","Synonyms"],"members":{"DomainName":{},"Synonyms":{}}},"output":{"resultWrapper":"UpdateSynonymOptionsResult","type":"structure","required":["Synonyms"],"members":{"Synonyms":{"shape":"S28"}}}}},"shapes":{"S4":{"type":"structure","required":["DomainId","DomainName","RequiresIndexDocuments"],"members":{"DomainId":{},"DomainName":{},"Created":{"type":"boolean"},"Deleted":{"type":"boolean"},"NumSearchableDocs":{"type":"long"},"DocService":{"shape":"S8"},"SearchService":{"shape":"S8"},"RequiresIndexDocuments":{"type":"boolean"},"Processing":{"type":"boolean"},"SearchInstanceType":{},"SearchPartitionCount":{"type":"integer"},"SearchInstanceCount":{"type":"integer"}}},"S8":{"type":"structure","members":{"Arn":{},"Endpoint":{}}},"Sf":{"type":"structure","required":["IndexFieldName","IndexFieldType"],"members":{"IndexFieldName":{},"IndexFieldType":{},"UIntOptions":{"type":"structure","members":{"DefaultValue":{"type":"integer"}}},"LiteralOptions":{"type":"structure","members":{"DefaultValue":{},"SearchEnabled":{"type":"boolean"},"FacetEnabled":{"type":"boolean"},"ResultEnabled":{"type":"boolean"}}},"TextOptions":{"type":"structure","members":{"DefaultValue":{},"FacetEnabled":{"type":"boolean"},"ResultEnabled":{"type":"boolean"},"TextProcessor":{}}},"SourceAttributes":{"type":"list","member":{"type":"structure","required":["SourceDataFunction"],"members":{"SourceDataFunction":{},"SourceDataCopy":{"type":"structure","required":["SourceName"],"members":{"SourceName":{},"DefaultValue":{}}},"SourceDataTrimTitle":{"type":"structure","required":["SourceName"],"members":{"SourceName":{},"DefaultValue":{},"Separator":{},"Language":{}}},"SourceDataMap":{"type":"structure","required":["SourceName"],"members":{"SourceName":{},"DefaultValue":{},"Cases":{"type":"map","key":{},"value":{}}}}}}}}},"Sx":{"type":"structure","required":["Options","Status"],"members":{"Options":{"shape":"Sf"},"Status":{"shape":"Sy"}}},"Sy":{"type":"structure","required":["CreationDate","UpdateDate","State"],"members":{"CreationDate":{"type":"timestamp"},"UpdateDate":{"type":"timestamp"},"UpdateVersion":{"type":"integer"},"State":{},"PendingDeletion":{"type":"boolean"}}},"S12":{"type":"structure","required":["RankName","RankExpression"],"members":{"RankName":{},"RankExpression":{}}},"S15":{"type":"structure","required":["Options","Status"],"members":{"Options":{"shape":"S12"},"Status":{"shape":"Sy"}}},"S1e":{"type":"structure","required":["Options","Status"],"members":{"Options":{"type":"boolean"},"Status":{"shape":"Sy"}}},"S1i":{"type":"structure","required":["Options","Status"],"members":{"Options":{},"Status":{"shape":"Sy"}}},"S1o":{"type":"list","member":{}},"S1w":{"type":"structure","required":["Options","Status"],"members":{"Options":{},"Status":{"shape":"Sy"}}},"S20":{"type":"structure","required":["Options","Status"],"members":{"Options":{},"Status":{"shape":"Sy"}}},"S24":{"type":"structure","required":["Options","Status"],"members":{"Options":{},"Status":{"shape":"Sy"}}},"S28":{"type":"structure","required":["Options","Status"],"members":{"Options":{},"Status":{"shape":"Sy"}}}}}

/***/ }),
/* 112 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeDomains":{"result_key":"DomainStatusList"},"DescribeIndexFields":{"result_key":"IndexFields"},"DescribeRankExpressions":{"result_key":"RankExpressions"}}}

/***/ }),
/* 113 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2013-01-01","endpointPrefix":"cloudsearch","protocol":"query","serviceFullName":"Amazon CloudSearch","serviceId":"CloudSearch","signatureVersion":"v4","uid":"cloudsearch-2013-01-01","xmlNamespace":"http://cloudsearch.amazonaws.com/doc/2013-01-01/"},"operations":{"BuildSuggesters":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"resultWrapper":"BuildSuggestersResult","type":"structure","members":{"FieldNames":{"shape":"S4"}}}},"CreateDomain":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"resultWrapper":"CreateDomainResult","type":"structure","members":{"DomainStatus":{"shape":"S8"}}}},"DefineAnalysisScheme":{"input":{"type":"structure","required":["DomainName","AnalysisScheme"],"members":{"DomainName":{},"AnalysisScheme":{"shape":"Sl"}}},"output":{"resultWrapper":"DefineAnalysisSchemeResult","type":"structure","required":["AnalysisScheme"],"members":{"AnalysisScheme":{"shape":"Ss"}}}},"DefineExpression":{"input":{"type":"structure","required":["DomainName","Expression"],"members":{"DomainName":{},"Expression":{"shape":"Sy"}}},"output":{"resultWrapper":"DefineExpressionResult","type":"structure","required":["Expression"],"members":{"Expression":{"shape":"S11"}}}},"DefineIndexField":{"input":{"type":"structure","required":["DomainName","IndexField"],"members":{"DomainName":{},"IndexField":{"shape":"S13"}}},"output":{"resultWrapper":"DefineIndexFieldResult","type":"structure","required":["IndexField"],"members":{"IndexField":{"shape":"S1n"}}}},"DefineSuggester":{"input":{"type":"structure","required":["DomainName","Suggester"],"members":{"DomainName":{},"Suggester":{"shape":"S1p"}}},"output":{"resultWrapper":"DefineSuggesterResult","type":"structure","required":["Suggester"],"members":{"Suggester":{"shape":"S1t"}}}},"DeleteAnalysisScheme":{"input":{"type":"structure","required":["DomainName","AnalysisSchemeName"],"members":{"DomainName":{},"AnalysisSchemeName":{}}},"output":{"resultWrapper":"DeleteAnalysisSchemeResult","type":"structure","required":["AnalysisScheme"],"members":{"AnalysisScheme":{"shape":"Ss"}}}},"DeleteDomain":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"resultWrapper":"DeleteDomainResult","type":"structure","members":{"DomainStatus":{"shape":"S8"}}}},"DeleteExpression":{"input":{"type":"structure","required":["DomainName","ExpressionName"],"members":{"DomainName":{},"ExpressionName":{}}},"output":{"resultWrapper":"DeleteExpressionResult","type":"structure","required":["Expression"],"members":{"Expression":{"shape":"S11"}}}},"DeleteIndexField":{"input":{"type":"structure","required":["DomainName","IndexFieldName"],"members":{"DomainName":{},"IndexFieldName":{}}},"output":{"resultWrapper":"DeleteIndexFieldResult","type":"structure","required":["IndexField"],"members":{"IndexField":{"shape":"S1n"}}}},"DeleteSuggester":{"input":{"type":"structure","required":["DomainName","SuggesterName"],"members":{"DomainName":{},"SuggesterName":{}}},"output":{"resultWrapper":"DeleteSuggesterResult","type":"structure","required":["Suggester"],"members":{"Suggester":{"shape":"S1t"}}}},"DescribeAnalysisSchemes":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{},"AnalysisSchemeNames":{"shape":"S25"},"Deployed":{"type":"boolean"}}},"output":{"resultWrapper":"DescribeAnalysisSchemesResult","type":"structure","required":["AnalysisSchemes"],"members":{"AnalysisSchemes":{"type":"list","member":{"shape":"Ss"}}}}},"DescribeAvailabilityOptions":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{},"Deployed":{"type":"boolean"}}},"output":{"resultWrapper":"DescribeAvailabilityOptionsResult","type":"structure","members":{"AvailabilityOptions":{"shape":"S2a"}}}},"DescribeDomainEndpointOptions":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{},"Deployed":{"type":"boolean"}}},"output":{"resultWrapper":"DescribeDomainEndpointOptionsResult","type":"structure","members":{"DomainEndpointOptions":{"shape":"S2e"}}}},"DescribeDomains":{"input":{"type":"structure","members":{"DomainNames":{"type":"list","member":{}}}},"output":{"resultWrapper":"DescribeDomainsResult","type":"structure","required":["DomainStatusList"],"members":{"DomainStatusList":{"type":"list","member":{"shape":"S8"}}}}},"DescribeExpressions":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{},"ExpressionNames":{"shape":"S25"},"Deployed":{"type":"boolean"}}},"output":{"resultWrapper":"DescribeExpressionsResult","type":"structure","required":["Expressions"],"members":{"Expressions":{"type":"list","member":{"shape":"S11"}}}}},"DescribeIndexFields":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{},"FieldNames":{"type":"list","member":{}},"Deployed":{"type":"boolean"}}},"output":{"resultWrapper":"DescribeIndexFieldsResult","type":"structure","required":["IndexFields"],"members":{"IndexFields":{"type":"list","member":{"shape":"S1n"}}}}},"DescribeScalingParameters":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"resultWrapper":"DescribeScalingParametersResult","type":"structure","required":["ScalingParameters"],"members":{"ScalingParameters":{"shape":"S2u"}}}},"DescribeServiceAccessPolicies":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{},"Deployed":{"type":"boolean"}}},"output":{"resultWrapper":"DescribeServiceAccessPoliciesResult","type":"structure","required":["AccessPolicies"],"members":{"AccessPolicies":{"shape":"S2z"}}}},"DescribeSuggesters":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{},"SuggesterNames":{"shape":"S25"},"Deployed":{"type":"boolean"}}},"output":{"resultWrapper":"DescribeSuggestersResult","type":"structure","required":["Suggesters"],"members":{"Suggesters":{"type":"list","member":{"shape":"S1t"}}}}},"IndexDocuments":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"resultWrapper":"IndexDocumentsResult","type":"structure","members":{"FieldNames":{"shape":"S4"}}}},"ListDomainNames":{"output":{"resultWrapper":"ListDomainNamesResult","type":"structure","members":{"DomainNames":{"type":"map","key":{},"value":{}}}}},"UpdateAvailabilityOptions":{"input":{"type":"structure","required":["DomainName","MultiAZ"],"members":{"DomainName":{},"MultiAZ":{"type":"boolean"}}},"output":{"resultWrapper":"UpdateAvailabilityOptionsResult","type":"structure","members":{"AvailabilityOptions":{"shape":"S2a"}}}},"UpdateDomainEndpointOptions":{"input":{"type":"structure","required":["DomainName","DomainEndpointOptions"],"members":{"DomainName":{},"DomainEndpointOptions":{"shape":"S2f"}}},"output":{"resultWrapper":"UpdateDomainEndpointOptionsResult","type":"structure","members":{"DomainEndpointOptions":{"shape":"S2e"}}}},"UpdateScalingParameters":{"input":{"type":"structure","required":["DomainName","ScalingParameters"],"members":{"DomainName":{},"ScalingParameters":{"shape":"S2v"}}},"output":{"resultWrapper":"UpdateScalingParametersResult","type":"structure","required":["ScalingParameters"],"members":{"ScalingParameters":{"shape":"S2u"}}}},"UpdateServiceAccessPolicies":{"input":{"type":"structure","required":["DomainName","AccessPolicies"],"members":{"DomainName":{},"AccessPolicies":{}}},"output":{"resultWrapper":"UpdateServiceAccessPoliciesResult","type":"structure","required":["AccessPolicies"],"members":{"AccessPolicies":{"shape":"S2z"}}}}},"shapes":{"S4":{"type":"list","member":{}},"S8":{"type":"structure","required":["DomainId","DomainName","RequiresIndexDocuments"],"members":{"DomainId":{},"DomainName":{},"ARN":{},"Created":{"type":"boolean"},"Deleted":{"type":"boolean"},"DocService":{"shape":"Sc"},"SearchService":{"shape":"Sc"},"RequiresIndexDocuments":{"type":"boolean"},"Processing":{"type":"boolean"},"SearchInstanceType":{},"SearchPartitionCount":{"type":"integer"},"SearchInstanceCount":{"type":"integer"},"Limits":{"type":"structure","required":["MaximumReplicationCount","MaximumPartitionCount"],"members":{"MaximumReplicationCount":{"type":"integer"},"MaximumPartitionCount":{"type":"integer"}}}}},"Sc":{"type":"structure","members":{"Endpoint":{}}},"Sl":{"type":"structure","required":["AnalysisSchemeName","AnalysisSchemeLanguage"],"members":{"AnalysisSchemeName":{},"AnalysisSchemeLanguage":{},"AnalysisOptions":{"type":"structure","members":{"Synonyms":{},"Stopwords":{},"StemmingDictionary":{},"JapaneseTokenizationDictionary":{},"AlgorithmicStemming":{}}}}},"Ss":{"type":"structure","required":["Options","Status"],"members":{"Options":{"shape":"Sl"},"Status":{"shape":"St"}}},"St":{"type":"structure","required":["CreationDate","UpdateDate","State"],"members":{"CreationDate":{"type":"timestamp"},"UpdateDate":{"type":"timestamp"},"UpdateVersion":{"type":"integer"},"State":{},"PendingDeletion":{"type":"boolean"}}},"Sy":{"type":"structure","required":["ExpressionName","ExpressionValue"],"members":{"ExpressionName":{},"ExpressionValue":{}}},"S11":{"type":"structure","required":["Options","Status"],"members":{"Options":{"shape":"Sy"},"Status":{"shape":"St"}}},"S13":{"type":"structure","required":["IndexFieldName","IndexFieldType"],"members":{"IndexFieldName":{},"IndexFieldType":{},"IntOptions":{"type":"structure","members":{"DefaultValue":{"type":"long"},"SourceField":{},"FacetEnabled":{"type":"boolean"},"SearchEnabled":{"type":"boolean"},"ReturnEnabled":{"type":"boolean"},"SortEnabled":{"type":"boolean"}}},"DoubleOptions":{"type":"structure","members":{"DefaultValue":{"type":"double"},"SourceField":{},"FacetEnabled":{"type":"boolean"},"SearchEnabled":{"type":"boolean"},"ReturnEnabled":{"type":"boolean"},"SortEnabled":{"type":"boolean"}}},"LiteralOptions":{"type":"structure","members":{"DefaultValue":{},"SourceField":{},"FacetEnabled":{"type":"boolean"},"SearchEnabled":{"type":"boolean"},"ReturnEnabled":{"type":"boolean"},"SortEnabled":{"type":"boolean"}}},"TextOptions":{"type":"structure","members":{"DefaultValue":{},"SourceField":{},"ReturnEnabled":{"type":"boolean"},"SortEnabled":{"type":"boolean"},"HighlightEnabled":{"type":"boolean"},"AnalysisScheme":{}}},"DateOptions":{"type":"structure","members":{"DefaultValue":{},"SourceField":{},"FacetEnabled":{"type":"boolean"},"SearchEnabled":{"type":"boolean"},"ReturnEnabled":{"type":"boolean"},"SortEnabled":{"type":"boolean"}}},"LatLonOptions":{"type":"structure","members":{"DefaultValue":{},"SourceField":{},"FacetEnabled":{"type":"boolean"},"SearchEnabled":{"type":"boolean"},"ReturnEnabled":{"type":"boolean"},"SortEnabled":{"type":"boolean"}}},"IntArrayOptions":{"type":"structure","members":{"DefaultValue":{"type":"long"},"SourceFields":{},"FacetEnabled":{"type":"boolean"},"SearchEnabled":{"type":"boolean"},"ReturnEnabled":{"type":"boolean"}}},"DoubleArrayOptions":{"type":"structure","members":{"DefaultValue":{"type":"double"},"SourceFields":{},"FacetEnabled":{"type":"boolean"},"SearchEnabled":{"type":"boolean"},"ReturnEnabled":{"type":"boolean"}}},"LiteralArrayOptions":{"type":"structure","members":{"DefaultValue":{},"SourceFields":{},"FacetEnabled":{"type":"boolean"},"SearchEnabled":{"type":"boolean"},"ReturnEnabled":{"type":"boolean"}}},"TextArrayOptions":{"type":"structure","members":{"DefaultValue":{},"SourceFields":{},"ReturnEnabled":{"type":"boolean"},"HighlightEnabled":{"type":"boolean"},"AnalysisScheme":{}}},"DateArrayOptions":{"type":"structure","members":{"DefaultValue":{},"SourceFields":{},"FacetEnabled":{"type":"boolean"},"SearchEnabled":{"type":"boolean"},"ReturnEnabled":{"type":"boolean"}}}}},"S1n":{"type":"structure","required":["Options","Status"],"members":{"Options":{"shape":"S13"},"Status":{"shape":"St"}}},"S1p":{"type":"structure","required":["SuggesterName","DocumentSuggesterOptions"],"members":{"SuggesterName":{},"DocumentSuggesterOptions":{"type":"structure","required":["SourceField"],"members":{"SourceField":{},"FuzzyMatching":{},"SortExpression":{}}}}},"S1t":{"type":"structure","required":["Options","Status"],"members":{"Options":{"shape":"S1p"},"Status":{"shape":"St"}}},"S25":{"type":"list","member":{}},"S2a":{"type":"structure","required":["Options","Status"],"members":{"Options":{"type":"boolean"},"Status":{"shape":"St"}}},"S2e":{"type":"structure","required":["Options","Status"],"members":{"Options":{"shape":"S2f"},"Status":{"shape":"St"}}},"S2f":{"type":"structure","members":{"EnforceHTTPS":{"type":"boolean"},"TLSSecurityPolicy":{}}},"S2u":{"type":"structure","required":["Options","Status"],"members":{"Options":{"shape":"S2v"},"Status":{"shape":"St"}}},"S2v":{"type":"structure","members":{"DesiredInstanceType":{},"DesiredReplicationCount":{"type":"integer"},"DesiredPartitionCount":{"type":"integer"}}},"S2z":{"type":"structure","required":["Options","Status"],"members":{"Options":{},"Status":{"shape":"St"}}}}}

/***/ }),
/* 114 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeAnalysisSchemes":{"result_key":"AnalysisSchemes"},"DescribeDomains":{"result_key":"DomainStatusList"},"DescribeExpressions":{"result_key":"Expressions"},"DescribeIndexFields":{"result_key":"IndexFields"},"DescribeSuggesters":{"result_key":"Suggesters"}}}

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['cloudsearchdomain'] = {};
	AWS.CloudSearchDomain = Service.defineService('cloudsearchdomain', ['2013-01-01']);
	__webpack_require__(116);
	Object.defineProperty(apiLoader.services['cloudsearchdomain'], '2013-01-01', {
	  get: function get() {
	    var model = __webpack_require__(117);
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.CloudSearchDomain;


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(4);

	/**
	 * Constructs a service interface object. Each API operation is exposed as a
	 * function on service.
	 *
	 * ### Sending a Request Using CloudSearchDomain
	 *
	 * ```javascript
	 * var csd = new AWS.CloudSearchDomain({endpoint: 'my.host.tld'});
	 * csd.search(params, function (err, data) {
	 *   if (err) console.log(err, err.stack); // an error occurred
	 *   else     console.log(data);           // successful response
	 * });
	 * ```
	 *
	 * ### Locking the API Version
	 *
	 * In order to ensure that the CloudSearchDomain object uses this specific API,
	 * you can construct the object by passing the `apiVersion` option to the
	 * constructor:
	 *
	 * ```javascript
	 * var csd = new AWS.CloudSearchDomain({
	 *   endpoint: 'my.host.tld',
	 *   apiVersion: '2013-01-01'
	 * });
	 * ```
	 *
	 * You can also set the API version globally in `AWS.config.apiVersions` using
	 * the **cloudsearchdomain** service identifier:
	 *
	 * ```javascript
	 * AWS.config.apiVersions = {
	 *   cloudsearchdomain: '2013-01-01',
	 *   // other service API versions
	 * };
	 *
	 * var csd = new AWS.CloudSearchDomain({endpoint: 'my.host.tld'});
	 * ```
	 *
	 * @note You *must* provide an `endpoint` configuration parameter when
	 *   constructing this service. See {constructor} for more information.
	 *
	 * @!method constructor(options = {})
	 *   Constructs a service object. This object has one method for each
	 *   API operation.
	 *
	 *   @example Constructing a CloudSearchDomain object
	 *     var csd = new AWS.CloudSearchDomain({endpoint: 'my.host.tld'});
	 *   @note You *must* provide an `endpoint` when constructing this service.
	 *   @option (see AWS.Config.constructor)
	 *
	 * @service cloudsearchdomain
	 * @version 2013-01-01
	 */
	AWS.util.update(AWS.CloudSearchDomain.prototype, {
	  /**
	   * @api private
	   */
	  validateService: function validateService() {
	    if (!this.config.endpoint || this.config.endpoint.indexOf('{') >= 0) {
	      var msg = 'AWS.CloudSearchDomain requires an explicit ' +
	                '`endpoint\' configuration option.';
	      throw AWS.util.error(new Error(),
	        {name: 'InvalidEndpoint', message: msg});
	    }
	  },

	  /**
	   * @api private
	   */
	  setupRequestListeners: function setupRequestListeners(request) {
	    request.removeListener('validate',
	      AWS.EventListeners.Core.VALIDATE_CREDENTIALS
	    );
	    request.onAsync('validate', this.validateCredentials);
	    request.addListener('validate', this.updateRegion);
	    if (request.operation === 'search') {
	      request.addListener('build', this.convertGetToPost);
	    }
	  },

	  /**
	   * @api private
	   */
	  validateCredentials: function(req, done) {
	    if (!req.service.api.signatureVersion) return done(); // none
	    req.service.config.getCredentials(function(err) {
	      if (err) {
	        req.removeListener('sign', AWS.EventListeners.Core.SIGN);
	      }
	      done();
	    });
	  },

	  /**
	   * @api private
	   */
	  convertGetToPost: function(request) {
	    var httpRequest = request.httpRequest;
	    // convert queries to POST to avoid length restrictions
	    var path = httpRequest.path.split('?');
	    httpRequest.method = 'POST';
	    httpRequest.path = path[0];
	    httpRequest.body = path[1];
	    httpRequest.headers['Content-Length'] = httpRequest.body.length;
	    httpRequest.headers['Content-Type'] = 'application/x-www-form-urlencoded';
	  },

	  /**
	   * @api private
	   */
	  updateRegion: function updateRegion(request) {
	    var endpoint = request.httpRequest.endpoint.hostname;
	    var zones = endpoint.split('.');
	    request.httpRequest.region = zones[1] || request.httpRequest.region;
	  }

	});


/***/ }),
/* 117 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2013-01-01","endpointPrefix":"cloudsearchdomain","jsonVersion":"1.1","protocol":"rest-json","serviceFullName":"Amazon CloudSearch Domain","serviceId":"CloudSearch Domain","signatureVersion":"v4","signingName":"cloudsearch","uid":"cloudsearchdomain-2013-01-01"},"operations":{"Search":{"http":{"method":"GET","requestUri":"/2013-01-01/search?format=sdk&pretty=true"},"input":{"type":"structure","required":["query"],"members":{"cursor":{"location":"querystring","locationName":"cursor"},"expr":{"location":"querystring","locationName":"expr"},"facet":{"location":"querystring","locationName":"facet"},"filterQuery":{"location":"querystring","locationName":"fq"},"highlight":{"location":"querystring","locationName":"highlight"},"partial":{"location":"querystring","locationName":"partial","type":"boolean"},"query":{"location":"querystring","locationName":"q"},"queryOptions":{"location":"querystring","locationName":"q.options"},"queryParser":{"location":"querystring","locationName":"q.parser"},"return":{"location":"querystring","locationName":"return"},"size":{"location":"querystring","locationName":"size","type":"long"},"sort":{"location":"querystring","locationName":"sort"},"start":{"location":"querystring","locationName":"start","type":"long"},"stats":{"location":"querystring","locationName":"stats"}}},"output":{"type":"structure","members":{"status":{"type":"structure","members":{"timems":{"type":"long"},"rid":{}}},"hits":{"type":"structure","members":{"found":{"type":"long"},"start":{"type":"long"},"cursor":{},"hit":{"type":"list","member":{"type":"structure","members":{"id":{},"fields":{"type":"map","key":{},"value":{"type":"list","member":{}}},"exprs":{"type":"map","key":{},"value":{}},"highlights":{"type":"map","key":{},"value":{}}}}}}},"facets":{"type":"map","key":{},"value":{"type":"structure","members":{"buckets":{"type":"list","member":{"type":"structure","members":{"value":{},"count":{"type":"long"}}}}}}},"stats":{"type":"map","key":{},"value":{"type":"structure","members":{"min":{},"max":{},"count":{"type":"long"},"missing":{"type":"long"},"sum":{"type":"double"},"sumOfSquares":{"type":"double"},"mean":{},"stddev":{"type":"double"}}}}}}},"Suggest":{"http":{"method":"GET","requestUri":"/2013-01-01/suggest?format=sdk&pretty=true"},"input":{"type":"structure","required":["query","suggester"],"members":{"query":{"location":"querystring","locationName":"q"},"suggester":{"location":"querystring","locationName":"suggester"},"size":{"location":"querystring","locationName":"size","type":"long"}}},"output":{"type":"structure","members":{"status":{"type":"structure","members":{"timems":{"type":"long"},"rid":{}}},"suggest":{"type":"structure","members":{"query":{},"found":{"type":"long"},"suggestions":{"type":"list","member":{"type":"structure","members":{"suggestion":{},"score":{"type":"long"},"id":{}}}}}}}}},"UploadDocuments":{"http":{"requestUri":"/2013-01-01/documents/batch?format=sdk"},"input":{"type":"structure","required":["documents","contentType"],"members":{"documents":{"type":"blob","streaming":true},"contentType":{"location":"header","locationName":"Content-Type"}},"payload":"documents"},"output":{"type":"structure","members":{"status":{},"adds":{"type":"long"},"deletes":{"type":"long"},"warnings":{"type":"list","member":{"type":"structure","members":{"message":{}}}}}}}},"shapes":{}}

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['cloudtrail'] = {};
	AWS.CloudTrail = Service.defineService('cloudtrail', ['2013-11-01']);
	Object.defineProperty(apiLoader.services['cloudtrail'], '2013-11-01', {
	  get: function get() {
	    var model = __webpack_require__(119);
	    model.paginators = __webpack_require__(120).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.CloudTrail;


/***/ }),
/* 119 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2013-11-01","endpointPrefix":"cloudtrail","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"CloudTrail","serviceFullName":"AWS CloudTrail","serviceId":"CloudTrail","signatureVersion":"v4","targetPrefix":"com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101","uid":"cloudtrail-2013-11-01"},"operations":{"AddTags":{"input":{"type":"structure","required":["ResourceId"],"members":{"ResourceId":{},"TagsList":{"shape":"S3"}}},"output":{"type":"structure","members":{}},"idempotent":true},"CreateTrail":{"input":{"type":"structure","required":["Name","S3BucketName"],"members":{"Name":{},"S3BucketName":{},"S3KeyPrefix":{},"SnsTopicName":{},"IncludeGlobalServiceEvents":{"type":"boolean"},"IsMultiRegionTrail":{"type":"boolean"},"EnableLogFileValidation":{"type":"boolean"},"CloudWatchLogsLogGroupArn":{},"CloudWatchLogsRoleArn":{},"KmsKeyId":{},"IsOrganizationTrail":{"type":"boolean"},"TagsList":{"shape":"S3"}}},"output":{"type":"structure","members":{"Name":{},"S3BucketName":{},"S3KeyPrefix":{},"SnsTopicName":{"deprecated":true},"SnsTopicARN":{},"IncludeGlobalServiceEvents":{"type":"boolean"},"IsMultiRegionTrail":{"type":"boolean"},"TrailARN":{},"LogFileValidationEnabled":{"type":"boolean"},"CloudWatchLogsLogGroupArn":{},"CloudWatchLogsRoleArn":{},"KmsKeyId":{},"IsOrganizationTrail":{"type":"boolean"}}},"idempotent":true},"DeleteTrail":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{}},"idempotent":true},"DescribeTrails":{"input":{"type":"structure","members":{"trailNameList":{"type":"list","member":{}},"includeShadowTrails":{"type":"boolean"}}},"output":{"type":"structure","members":{"trailList":{"type":"list","member":{"shape":"Sf"}}}},"idempotent":true},"GetEventSelectors":{"input":{"type":"structure","required":["TrailName"],"members":{"TrailName":{}}},"output":{"type":"structure","members":{"TrailARN":{},"EventSelectors":{"shape":"Si"},"AdvancedEventSelectors":{"shape":"Sp"}}},"idempotent":true},"GetInsightSelectors":{"input":{"type":"structure","required":["TrailName"],"members":{"TrailName":{}}},"output":{"type":"structure","members":{"TrailARN":{},"InsightSelectors":{"shape":"Sz"}}},"idempotent":true},"GetTrail":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{"Trail":{"shape":"Sf"}}},"idempotent":true},"GetTrailStatus":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{"IsLogging":{"type":"boolean"},"LatestDeliveryError":{},"LatestNotificationError":{},"LatestDeliveryTime":{"type":"timestamp"},"LatestNotificationTime":{"type":"timestamp"},"StartLoggingTime":{"type":"timestamp"},"StopLoggingTime":{"type":"timestamp"},"LatestCloudWatchLogsDeliveryError":{},"LatestCloudWatchLogsDeliveryTime":{"type":"timestamp"},"LatestDigestDeliveryTime":{"type":"timestamp"},"LatestDigestDeliveryError":{},"LatestDeliveryAttemptTime":{},"LatestNotificationAttemptTime":{},"LatestNotificationAttemptSucceeded":{},"LatestDeliveryAttemptSucceeded":{},"TimeLoggingStarted":{},"TimeLoggingStopped":{}}},"idempotent":true},"ListPublicKeys":{"input":{"type":"structure","members":{"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"NextToken":{}}},"output":{"type":"structure","members":{"PublicKeyList":{"type":"list","member":{"type":"structure","members":{"Value":{"type":"blob"},"ValidityStartTime":{"type":"timestamp"},"ValidityEndTime":{"type":"timestamp"},"Fingerprint":{}}}},"NextToken":{}}},"idempotent":true},"ListTags":{"input":{"type":"structure","required":["ResourceIdList"],"members":{"ResourceIdList":{"type":"list","member":{}},"NextToken":{}}},"output":{"type":"structure","members":{"ResourceTagList":{"type":"list","member":{"type":"structure","members":{"ResourceId":{},"TagsList":{"shape":"S3"}}}},"NextToken":{}}},"idempotent":true},"ListTrails":{"input":{"type":"structure","members":{"NextToken":{}}},"output":{"type":"structure","members":{"Trails":{"type":"list","member":{"type":"structure","members":{"TrailARN":{},"Name":{},"HomeRegion":{}}}},"NextToken":{}}},"idempotent":true},"LookupEvents":{"input":{"type":"structure","members":{"LookupAttributes":{"type":"list","member":{"type":"structure","required":["AttributeKey","AttributeValue"],"members":{"AttributeKey":{},"AttributeValue":{}}}},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"EventCategory":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Events":{"type":"list","member":{"type":"structure","members":{"EventId":{},"EventName":{},"ReadOnly":{},"AccessKeyId":{},"EventTime":{"type":"timestamp"},"EventSource":{},"Username":{},"Resources":{"type":"list","member":{"type":"structure","members":{"ResourceType":{},"ResourceName":{}}}},"CloudTrailEvent":{}}}},"NextToken":{}}},"idempotent":true},"PutEventSelectors":{"input":{"type":"structure","required":["TrailName"],"members":{"TrailName":{},"EventSelectors":{"shape":"Si"},"AdvancedEventSelectors":{"shape":"Sp"}}},"output":{"type":"structure","members":{"TrailARN":{},"EventSelectors":{"shape":"Si"},"AdvancedEventSelectors":{"shape":"Sp"}}},"idempotent":true},"PutInsightSelectors":{"input":{"type":"structure","required":["TrailName","InsightSelectors"],"members":{"TrailName":{},"InsightSelectors":{"shape":"Sz"}}},"output":{"type":"structure","members":{"TrailARN":{},"InsightSelectors":{"shape":"Sz"}}},"idempotent":true},"RemoveTags":{"input":{"type":"structure","required":["ResourceId"],"members":{"ResourceId":{},"TagsList":{"shape":"S3"}}},"output":{"type":"structure","members":{}},"idempotent":true},"StartLogging":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{}},"idempotent":true},"StopLogging":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{}},"idempotent":true},"UpdateTrail":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"S3BucketName":{},"S3KeyPrefix":{},"SnsTopicName":{},"IncludeGlobalServiceEvents":{"type":"boolean"},"IsMultiRegionTrail":{"type":"boolean"},"EnableLogFileValidation":{"type":"boolean"},"CloudWatchLogsLogGroupArn":{},"CloudWatchLogsRoleArn":{},"KmsKeyId":{},"IsOrganizationTrail":{"type":"boolean"}}},"output":{"type":"structure","members":{"Name":{},"S3BucketName":{},"S3KeyPrefix":{},"SnsTopicName":{"deprecated":true},"SnsTopicARN":{},"IncludeGlobalServiceEvents":{"type":"boolean"},"IsMultiRegionTrail":{"type":"boolean"},"TrailARN":{},"LogFileValidationEnabled":{"type":"boolean"},"CloudWatchLogsLogGroupArn":{},"CloudWatchLogsRoleArn":{},"KmsKeyId":{},"IsOrganizationTrail":{"type":"boolean"}}},"idempotent":true}},"shapes":{"S3":{"type":"list","member":{"type":"structure","required":["Key"],"members":{"Key":{},"Value":{}}}},"Sf":{"type":"structure","members":{"Name":{},"S3BucketName":{},"S3KeyPrefix":{},"SnsTopicName":{"deprecated":true},"SnsTopicARN":{},"IncludeGlobalServiceEvents":{"type":"boolean"},"IsMultiRegionTrail":{"type":"boolean"},"HomeRegion":{},"TrailARN":{},"LogFileValidationEnabled":{"type":"boolean"},"CloudWatchLogsLogGroupArn":{},"CloudWatchLogsRoleArn":{},"KmsKeyId":{},"HasCustomEventSelectors":{"type":"boolean"},"HasInsightSelectors":{"type":"boolean"},"IsOrganizationTrail":{"type":"boolean"}}},"Si":{"type":"list","member":{"type":"structure","members":{"ReadWriteType":{},"IncludeManagementEvents":{"type":"boolean"},"DataResources":{"type":"list","member":{"type":"structure","members":{"Type":{},"Values":{"type":"list","member":{}}}}},"ExcludeManagementEventSources":{"type":"list","member":{}}}}},"Sp":{"type":"list","member":{"type":"structure","required":["FieldSelectors"],"members":{"Name":{},"FieldSelectors":{"type":"list","member":{"type":"structure","required":["Field"],"members":{"Field":{},"Equals":{"shape":"Sv"},"StartsWith":{"shape":"Sv"},"EndsWith":{"shape":"Sv"},"NotEquals":{"shape":"Sv"},"NotStartsWith":{"shape":"Sv"},"NotEndsWith":{"shape":"Sv"}}}}}}},"Sv":{"type":"list","member":{}},"Sz":{"type":"list","member":{"type":"structure","members":{"InsightType":{}}}}}}

/***/ }),
/* 120 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeTrails":{"result_key":"trailList"},"ListPublicKeys":{"input_token":"NextToken","output_token":"NextToken","result_key":"PublicKeyList"},"ListTags":{"input_token":"NextToken","output_token":"NextToken","result_key":"ResourceTagList"},"ListTrails":{"input_token":"NextToken","output_token":"NextToken","result_key":"Trails"},"LookupEvents":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Events"}}}

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['cloudwatch'] = {};
	AWS.CloudWatch = Service.defineService('cloudwatch', ['2010-08-01']);
	Object.defineProperty(apiLoader.services['cloudwatch'], '2010-08-01', {
	  get: function get() {
	    var model = __webpack_require__(122);
	    model.paginators = __webpack_require__(123).pagination;
	    model.waiters = __webpack_require__(124).waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.CloudWatch;


/***/ }),
/* 122 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2010-08-01","endpointPrefix":"monitoring","protocol":"query","serviceAbbreviation":"CloudWatch","serviceFullName":"Amazon CloudWatch","serviceId":"CloudWatch","signatureVersion":"v4","uid":"monitoring-2010-08-01","xmlNamespace":"http://monitoring.amazonaws.com/doc/2010-08-01/"},"operations":{"DeleteAlarms":{"input":{"type":"structure","required":["AlarmNames"],"members":{"AlarmNames":{"shape":"S2"}}}},"DeleteAnomalyDetector":{"input":{"type":"structure","required":["Namespace","MetricName","Stat"],"members":{"Namespace":{},"MetricName":{},"Dimensions":{"shape":"S7"},"Stat":{}}},"output":{"resultWrapper":"DeleteAnomalyDetectorResult","type":"structure","members":{}}},"DeleteDashboards":{"input":{"type":"structure","required":["DashboardNames"],"members":{"DashboardNames":{"type":"list","member":{}}}},"output":{"resultWrapper":"DeleteDashboardsResult","type":"structure","members":{}}},"DeleteInsightRules":{"input":{"type":"structure","required":["RuleNames"],"members":{"RuleNames":{"shape":"Si"}}},"output":{"resultWrapper":"DeleteInsightRulesResult","type":"structure","members":{"Failures":{"shape":"Sl"}}}},"DeleteMetricStream":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"resultWrapper":"DeleteMetricStreamResult","type":"structure","members":{}}},"DescribeAlarmHistory":{"input":{"type":"structure","members":{"AlarmName":{},"AlarmTypes":{"shape":"Sv"},"HistoryItemType":{},"StartDate":{"type":"timestamp"},"EndDate":{"type":"timestamp"},"MaxRecords":{"type":"integer"},"NextToken":{},"ScanBy":{}}},"output":{"resultWrapper":"DescribeAlarmHistoryResult","type":"structure","members":{"AlarmHistoryItems":{"type":"list","member":{"type":"structure","members":{"AlarmName":{},"AlarmType":{},"Timestamp":{"type":"timestamp"},"HistoryItemType":{},"HistorySummary":{},"HistoryData":{}}}},"NextToken":{}}}},"DescribeAlarms":{"input":{"type":"structure","members":{"AlarmNames":{"shape":"S2"},"AlarmNamePrefix":{},"AlarmTypes":{"shape":"Sv"},"ChildrenOfAlarmName":{},"ParentsOfAlarmName":{},"StateValue":{},"ActionPrefix":{},"MaxRecords":{"type":"integer"},"NextToken":{}}},"output":{"resultWrapper":"DescribeAlarmsResult","type":"structure","members":{"CompositeAlarms":{"type":"list","member":{"type":"structure","members":{"ActionsEnabled":{"type":"boolean"},"AlarmActions":{"shape":"S1f"},"AlarmArn":{},"AlarmConfigurationUpdatedTimestamp":{"type":"timestamp"},"AlarmDescription":{},"AlarmName":{},"AlarmRule":{},"InsufficientDataActions":{"shape":"S1f"},"OKActions":{"shape":"S1f"},"StateReason":{},"StateReasonData":{},"StateUpdatedTimestamp":{"type":"timestamp"},"StateValue":{}},"xmlOrder":["ActionsEnabled","AlarmActions","AlarmArn","AlarmConfigurationUpdatedTimestamp","AlarmDescription","AlarmName","AlarmRule","InsufficientDataActions","OKActions","StateReason","StateReasonData","StateUpdatedTimestamp","StateValue"]}},"MetricAlarms":{"shape":"S1m"},"NextToken":{}}}},"DescribeAlarmsForMetric":{"input":{"type":"structure","required":["MetricName","Namespace"],"members":{"MetricName":{},"Namespace":{},"Statistic":{},"ExtendedStatistic":{},"Dimensions":{"shape":"S7"},"Period":{"type":"integer"},"Unit":{}}},"output":{"resultWrapper":"DescribeAlarmsForMetricResult","type":"structure","members":{"MetricAlarms":{"shape":"S1m"}}}},"DescribeAnomalyDetectors":{"input":{"type":"structure","members":{"NextToken":{},"MaxResults":{"type":"integer"},"Namespace":{},"MetricName":{},"Dimensions":{"shape":"S7"}}},"output":{"resultWrapper":"DescribeAnomalyDetectorsResult","type":"structure","members":{"AnomalyDetectors":{"type":"list","member":{"type":"structure","members":{"Namespace":{},"MetricName":{},"Dimensions":{"shape":"S7"},"Stat":{},"Configuration":{"shape":"S2e"},"StateValue":{}}}},"NextToken":{}}}},"DescribeInsightRules":{"input":{"type":"structure","members":{"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"resultWrapper":"DescribeInsightRulesResult","type":"structure","members":{"NextToken":{},"InsightRules":{"type":"list","member":{"type":"structure","required":["Name","State","Schema","Definition"],"members":{"Name":{},"State":{},"Schema":{},"Definition":{}}}}}}},"DisableAlarmActions":{"input":{"type":"structure","required":["AlarmNames"],"members":{"AlarmNames":{"shape":"S2"}}}},"DisableInsightRules":{"input":{"type":"structure","required":["RuleNames"],"members":{"RuleNames":{"shape":"Si"}}},"output":{"resultWrapper":"DisableInsightRulesResult","type":"structure","members":{"Failures":{"shape":"Sl"}}}},"EnableAlarmActions":{"input":{"type":"structure","required":["AlarmNames"],"members":{"AlarmNames":{"shape":"S2"}}}},"EnableInsightRules":{"input":{"type":"structure","required":["RuleNames"],"members":{"RuleNames":{"shape":"Si"}}},"output":{"resultWrapper":"EnableInsightRulesResult","type":"structure","members":{"Failures":{"shape":"Sl"}}}},"GetDashboard":{"input":{"type":"structure","required":["DashboardName"],"members":{"DashboardName":{}}},"output":{"resultWrapper":"GetDashboardResult","type":"structure","members":{"DashboardArn":{},"DashboardBody":{},"DashboardName":{}}}},"GetInsightRuleReport":{"input":{"type":"structure","required":["RuleName","StartTime","EndTime","Period"],"members":{"RuleName":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Period":{"type":"integer"},"MaxContributorCount":{"type":"integer"},"Metrics":{"type":"list","member":{}},"OrderBy":{}}},"output":{"resultWrapper":"GetInsightRuleReportResult","type":"structure","members":{"KeyLabels":{"type":"list","member":{}},"AggregationStatistic":{},"AggregateValue":{"type":"double"},"ApproximateUniqueCount":{"type":"long"},"Contributors":{"type":"list","member":{"type":"structure","required":["Keys","ApproximateAggregateValue","Datapoints"],"members":{"Keys":{"type":"list","member":{}},"ApproximateAggregateValue":{"type":"double"},"Datapoints":{"type":"list","member":{"type":"structure","required":["Timestamp","ApproximateValue"],"members":{"Timestamp":{"type":"timestamp"},"ApproximateValue":{"type":"double"}}}}}}},"MetricDatapoints":{"type":"list","member":{"type":"structure","required":["Timestamp"],"members":{"Timestamp":{"type":"timestamp"},"UniqueContributors":{"type":"double"},"MaxContributorValue":{"type":"double"},"SampleCount":{"type":"double"},"Average":{"type":"double"},"Sum":{"type":"double"},"Minimum":{"type":"double"},"Maximum":{"type":"double"}}}}}}},"GetMetricData":{"input":{"type":"structure","required":["MetricDataQueries","StartTime","EndTime"],"members":{"MetricDataQueries":{"shape":"S1y"},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"NextToken":{},"ScanBy":{},"MaxDatapoints":{"type":"integer"},"LabelOptions":{"type":"structure","members":{"Timezone":{}}}}},"output":{"resultWrapper":"GetMetricDataResult","type":"structure","members":{"MetricDataResults":{"type":"list","member":{"type":"structure","members":{"Id":{},"Label":{},"Timestamps":{"type":"list","member":{"type":"timestamp"}},"Values":{"type":"list","member":{"type":"double"}},"StatusCode":{},"Messages":{"shape":"S3v"}}}},"NextToken":{},"Messages":{"shape":"S3v"}}}},"GetMetricStatistics":{"input":{"type":"structure","required":["Namespace","MetricName","StartTime","EndTime","Period"],"members":{"Namespace":{},"MetricName":{},"Dimensions":{"shape":"S7"},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Period":{"type":"integer"},"Statistics":{"type":"list","member":{}},"ExtendedStatistics":{"type":"list","member":{}},"Unit":{}}},"output":{"resultWrapper":"GetMetricStatisticsResult","type":"structure","members":{"Label":{},"Datapoints":{"type":"list","member":{"type":"structure","members":{"Timestamp":{"type":"timestamp"},"SampleCount":{"type":"double"},"Average":{"type":"double"},"Sum":{"type":"double"},"Minimum":{"type":"double"},"Maximum":{"type":"double"},"Unit":{},"ExtendedStatistics":{"type":"map","key":{},"value":{"type":"double"}}},"xmlOrder":["Timestamp","SampleCount","Average","Sum","Minimum","Maximum","Unit","ExtendedStatistics"]}}}}},"GetMetricStream":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"resultWrapper":"GetMetricStreamResult","type":"structure","members":{"Arn":{},"Name":{},"IncludeFilters":{"shape":"S49"},"ExcludeFilters":{"shape":"S49"},"FirehoseArn":{},"RoleArn":{},"State":{},"CreationDate":{"type":"timestamp"},"LastUpdateDate":{"type":"timestamp"},"OutputFormat":{}}}},"GetMetricWidgetImage":{"input":{"type":"structure","required":["MetricWidget"],"members":{"MetricWidget":{},"OutputFormat":{}}},"output":{"resultWrapper":"GetMetricWidgetImageResult","type":"structure","members":{"MetricWidgetImage":{"type":"blob"}}}},"ListDashboards":{"input":{"type":"structure","members":{"DashboardNamePrefix":{},"NextToken":{}}},"output":{"resultWrapper":"ListDashboardsResult","type":"structure","members":{"DashboardEntries":{"type":"list","member":{"type":"structure","members":{"DashboardName":{},"DashboardArn":{},"LastModified":{"type":"timestamp"},"Size":{"type":"long"}}}},"NextToken":{}}}},"ListMetricStreams":{"input":{"type":"structure","members":{"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"resultWrapper":"ListMetricStreamsResult","type":"structure","members":{"NextToken":{},"Entries":{"type":"list","member":{"type":"structure","members":{"Arn":{},"CreationDate":{"type":"timestamp"},"LastUpdateDate":{"type":"timestamp"},"Name":{},"FirehoseArn":{},"State":{},"OutputFormat":{}}}}}}},"ListMetrics":{"input":{"type":"structure","members":{"Namespace":{},"MetricName":{},"Dimensions":{"type":"list","member":{"type":"structure","required":["Name"],"members":{"Name":{},"Value":{}}}},"NextToken":{},"RecentlyActive":{}}},"output":{"resultWrapper":"ListMetricsResult","type":"structure","members":{"Metrics":{"type":"list","member":{"shape":"S22"}},"NextToken":{}},"xmlOrder":["Metrics","NextToken"]}},"ListTagsForResource":{"input":{"type":"structure","required":["ResourceARN"],"members":{"ResourceARN":{}}},"output":{"resultWrapper":"ListTagsForResourceResult","type":"structure","members":{"Tags":{"shape":"S52"}}}},"PutAnomalyDetector":{"input":{"type":"structure","required":["Namespace","MetricName","Stat"],"members":{"Namespace":{},"MetricName":{},"Dimensions":{"shape":"S7"},"Stat":{},"Configuration":{"shape":"S2e"}}},"output":{"resultWrapper":"PutAnomalyDetectorResult","type":"structure","members":{}}},"PutCompositeAlarm":{"input":{"type":"structure","required":["AlarmName","AlarmRule"],"members":{"ActionsEnabled":{"type":"boolean"},"AlarmActions":{"shape":"S1f"},"AlarmDescription":{},"AlarmName":{},"AlarmRule":{},"InsufficientDataActions":{"shape":"S1f"},"OKActions":{"shape":"S1f"},"Tags":{"shape":"S52"}}}},"PutDashboard":{"input":{"type":"structure","required":["DashboardName","DashboardBody"],"members":{"DashboardName":{},"DashboardBody":{}}},"output":{"resultWrapper":"PutDashboardResult","type":"structure","members":{"DashboardValidationMessages":{"type":"list","member":{"type":"structure","members":{"DataPath":{},"Message":{}}}}}}},"PutInsightRule":{"input":{"type":"structure","required":["RuleName","RuleDefinition"],"members":{"RuleName":{},"RuleState":{},"RuleDefinition":{},"Tags":{"shape":"S52"}}},"output":{"resultWrapper":"PutInsightRuleResult","type":"structure","members":{}}},"PutMetricAlarm":{"input":{"type":"structure","required":["AlarmName","EvaluationPeriods","ComparisonOperator"],"members":{"AlarmName":{},"AlarmDescription":{},"ActionsEnabled":{"type":"boolean"},"OKActions":{"shape":"S1f"},"AlarmActions":{"shape":"S1f"},"InsufficientDataActions":{"shape":"S1f"},"MetricName":{},"Namespace":{},"Statistic":{},"ExtendedStatistic":{},"Dimensions":{"shape":"S7"},"Period":{"type":"integer"},"Unit":{},"EvaluationPeriods":{"type":"integer"},"DatapointsToAlarm":{"type":"integer"},"Threshold":{"type":"double"},"ComparisonOperator":{},"TreatMissingData":{},"EvaluateLowSampleCountPercentile":{},"Metrics":{"shape":"S1y"},"Tags":{"shape":"S52"},"ThresholdMetricId":{}}}},"PutMetricData":{"input":{"type":"structure","required":["Namespace","MetricData"],"members":{"Namespace":{},"MetricData":{"type":"list","member":{"type":"structure","required":["MetricName"],"members":{"MetricName":{},"Dimensions":{"shape":"S7"},"Timestamp":{"type":"timestamp"},"Value":{"type":"double"},"StatisticValues":{"type":"structure","required":["SampleCount","Sum","Minimum","Maximum"],"members":{"SampleCount":{"type":"double"},"Sum":{"type":"double"},"Minimum":{"type":"double"},"Maximum":{"type":"double"}}},"Values":{"type":"list","member":{"type":"double"}},"Counts":{"type":"list","member":{"type":"double"}},"Unit":{},"StorageResolution":{"type":"integer"}}}}}}},"PutMetricStream":{"input":{"type":"structure","required":["Name","FirehoseArn","RoleArn","OutputFormat"],"members":{"Name":{},"IncludeFilters":{"shape":"S49"},"ExcludeFilters":{"shape":"S49"},"FirehoseArn":{},"RoleArn":{},"OutputFormat":{},"Tags":{"shape":"S52"}}},"output":{"resultWrapper":"PutMetricStreamResult","type":"structure","members":{"Arn":{}}}},"SetAlarmState":{"input":{"type":"structure","required":["AlarmName","StateValue","StateReason"],"members":{"AlarmName":{},"StateValue":{},"StateReason":{},"StateReasonData":{}}}},"StartMetricStreams":{"input":{"type":"structure","required":["Names"],"members":{"Names":{"shape":"S5t"}}},"output":{"resultWrapper":"StartMetricStreamsResult","type":"structure","members":{}}},"StopMetricStreams":{"input":{"type":"structure","required":["Names"],"members":{"Names":{"shape":"S5t"}}},"output":{"resultWrapper":"StopMetricStreamsResult","type":"structure","members":{}}},"TagResource":{"input":{"type":"structure","required":["ResourceARN","Tags"],"members":{"ResourceARN":{},"Tags":{"shape":"S52"}}},"output":{"resultWrapper":"TagResourceResult","type":"structure","members":{}}},"UntagResource":{"input":{"type":"structure","required":["ResourceARN","TagKeys"],"members":{"ResourceARN":{},"TagKeys":{"type":"list","member":{}}}},"output":{"resultWrapper":"UntagResourceResult","type":"structure","members":{}}}},"shapes":{"S2":{"type":"list","member":{}},"S7":{"type":"list","member":{"type":"structure","required":["Name","Value"],"members":{"Name":{},"Value":{}},"xmlOrder":["Name","Value"]}},"Si":{"type":"list","member":{}},"Sl":{"type":"list","member":{"type":"structure","members":{"FailureResource":{},"ExceptionType":{},"FailureCode":{},"FailureDescription":{}}}},"Sv":{"type":"list","member":{}},"S1f":{"type":"list","member":{}},"S1m":{"type":"list","member":{"type":"structure","members":{"AlarmName":{},"AlarmArn":{},"AlarmDescription":{},"AlarmConfigurationUpdatedTimestamp":{"type":"timestamp"},"ActionsEnabled":{"type":"boolean"},"OKActions":{"shape":"S1f"},"AlarmActions":{"shape":"S1f"},"InsufficientDataActions":{"shape":"S1f"},"StateValue":{},"StateReason":{},"StateReasonData":{},"StateUpdatedTimestamp":{"type":"timestamp"},"MetricName":{},"Namespace":{},"Statistic":{},"ExtendedStatistic":{},"Dimensions":{"shape":"S7"},"Period":{"type":"integer"},"Unit":{},"EvaluationPeriods":{"type":"integer"},"DatapointsToAlarm":{"type":"integer"},"Threshold":{"type":"double"},"ComparisonOperator":{},"TreatMissingData":{},"EvaluateLowSampleCountPercentile":{},"Metrics":{"shape":"S1y"},"ThresholdMetricId":{}},"xmlOrder":["AlarmName","AlarmArn","AlarmDescription","AlarmConfigurationUpdatedTimestamp","ActionsEnabled","OKActions","AlarmActions","InsufficientDataActions","StateValue","StateReason","StateReasonData","StateUpdatedTimestamp","MetricName","Namespace","Statistic","Dimensions","Period","Unit","EvaluationPeriods","Threshold","ComparisonOperator","ExtendedStatistic","TreatMissingData","EvaluateLowSampleCountPercentile","DatapointsToAlarm","Metrics","ThresholdMetricId"]}},"S1y":{"type":"list","member":{"type":"structure","required":["Id"],"members":{"Id":{},"MetricStat":{"type":"structure","required":["Metric","Period","Stat"],"members":{"Metric":{"shape":"S22"},"Period":{"type":"integer"},"Stat":{},"Unit":{}}},"Expression":{},"Label":{},"ReturnData":{"type":"boolean"},"Period":{"type":"integer"}}}},"S22":{"type":"structure","members":{"Namespace":{},"MetricName":{},"Dimensions":{"shape":"S7"}},"xmlOrder":["Namespace","MetricName","Dimensions"]},"S2e":{"type":"structure","members":{"ExcludedTimeRanges":{"type":"list","member":{"type":"structure","required":["StartTime","EndTime"],"members":{"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"}},"xmlOrder":["StartTime","EndTime"]}},"MetricTimezone":{}}},"S3v":{"type":"list","member":{"type":"structure","members":{"Code":{},"Value":{}}}},"S49":{"type":"list","member":{"type":"structure","members":{"Namespace":{}}}},"S52":{"type":"list","member":{"type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{}}}},"S5t":{"type":"list","member":{}}}}

/***/ }),
/* 123 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeAlarmHistory":{"input_token":"NextToken","limit_key":"MaxRecords","output_token":"NextToken","result_key":"AlarmHistoryItems"},"DescribeAlarms":{"input_token":"NextToken","limit_key":"MaxRecords","output_token":"NextToken","result_key":["MetricAlarms","CompositeAlarms"]},"DescribeAlarmsForMetric":{"result_key":"MetricAlarms"},"DescribeInsightRules":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken"},"GetMetricData":{"input_token":"NextToken","limit_key":"MaxDatapoints","output_token":"NextToken","result_key":["MetricDataResults","Messages"]},"ListDashboards":{"input_token":"NextToken","output_token":"NextToken","result_key":"DashboardEntries"},"ListMetricStreams":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken"},"ListMetrics":{"input_token":"NextToken","output_token":"NextToken","result_key":"Metrics"}}}

/***/ }),
/* 124 */
/***/ (function(module, exports) {

	module.exports = {"version":2,"waiters":{"AlarmExists":{"delay":5,"maxAttempts":40,"operation":"DescribeAlarms","acceptors":[{"matcher":"path","expected":true,"argument":"length(MetricAlarms[]) > `0`","state":"success"}]},"CompositeAlarmExists":{"delay":5,"maxAttempts":40,"operation":"DescribeAlarms","acceptors":[{"matcher":"path","expected":true,"argument":"length(CompositeAlarms[]) > `0`","state":"success"}]}}}

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['cloudwatchevents'] = {};
	AWS.CloudWatchEvents = Service.defineService('cloudwatchevents', ['2014-02-03*', '2015-10-07']);
	Object.defineProperty(apiLoader.services['cloudwatchevents'], '2015-10-07', {
	  get: function get() {
	    var model = __webpack_require__(126);
	    model.paginators = __webpack_require__(127).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.CloudWatchEvents;


/***/ }),
/* 126 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-10-07","endpointPrefix":"events","jsonVersion":"1.1","protocol":"json","serviceFullName":"Amazon CloudWatch Events","serviceId":"CloudWatch Events","signatureVersion":"v4","targetPrefix":"AWSEvents","uid":"events-2015-10-07"},"operations":{"ActivateEventSource":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}}},"CancelReplay":{"input":{"type":"structure","required":["ReplayName"],"members":{"ReplayName":{}}},"output":{"type":"structure","members":{"ReplayArn":{},"State":{},"StateReason":{}}}},"CreateApiDestination":{"input":{"type":"structure","required":["Name","ConnectionArn","InvocationEndpoint","HttpMethod"],"members":{"Name":{},"Description":{},"ConnectionArn":{},"InvocationEndpoint":{},"HttpMethod":{},"InvocationRateLimitPerSecond":{"type":"integer"}}},"output":{"type":"structure","members":{"ApiDestinationArn":{},"ApiDestinationState":{},"CreationTime":{"type":"timestamp"},"LastModifiedTime":{"type":"timestamp"}}}},"CreateArchive":{"input":{"type":"structure","required":["ArchiveName","EventSourceArn"],"members":{"ArchiveName":{},"EventSourceArn":{},"Description":{},"EventPattern":{},"RetentionDays":{"type":"integer"}}},"output":{"type":"structure","members":{"ArchiveArn":{},"State":{},"StateReason":{},"CreationTime":{"type":"timestamp"}}}},"CreateConnection":{"input":{"type":"structure","required":["Name","AuthorizationType","AuthParameters"],"members":{"Name":{},"Description":{},"AuthorizationType":{},"AuthParameters":{"type":"structure","members":{"BasicAuthParameters":{"type":"structure","required":["Username","Password"],"members":{"Username":{},"Password":{}}},"OAuthParameters":{"type":"structure","required":["ClientParameters","AuthorizationEndpoint","HttpMethod"],"members":{"ClientParameters":{"type":"structure","required":["ClientID","ClientSecret"],"members":{"ClientID":{},"ClientSecret":{}}},"AuthorizationEndpoint":{},"HttpMethod":{},"OAuthHttpParameters":{"shape":"S14"}}},"ApiKeyAuthParameters":{"type":"structure","required":["ApiKeyName","ApiKeyValue"],"members":{"ApiKeyName":{},"ApiKeyValue":{}}},"InvocationHttpParameters":{"shape":"S14"}}}}},"output":{"type":"structure","members":{"ConnectionArn":{},"ConnectionState":{},"CreationTime":{"type":"timestamp"},"LastModifiedTime":{"type":"timestamp"}}}},"CreateEventBus":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"EventSourceName":{},"Tags":{"shape":"S1m"}}},"output":{"type":"structure","members":{"EventBusArn":{}}}},"CreatePartnerEventSource":{"input":{"type":"structure","required":["Name","Account"],"members":{"Name":{},"Account":{}}},"output":{"type":"structure","members":{"EventSourceArn":{}}}},"DeactivateEventSource":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}}},"DeauthorizeConnection":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{"ConnectionArn":{},"ConnectionState":{},"CreationTime":{"type":"timestamp"},"LastModifiedTime":{"type":"timestamp"},"LastAuthorizedTime":{"type":"timestamp"}}}},"DeleteApiDestination":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{}}},"DeleteArchive":{"input":{"type":"structure","required":["ArchiveName"],"members":{"ArchiveName":{}}},"output":{"type":"structure","members":{}}},"DeleteConnection":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{"ConnectionArn":{},"ConnectionState":{},"CreationTime":{"type":"timestamp"},"LastModifiedTime":{"type":"timestamp"},"LastAuthorizedTime":{"type":"timestamp"}}}},"DeleteEventBus":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}}},"DeletePartnerEventSource":{"input":{"type":"structure","required":["Name","Account"],"members":{"Name":{},"Account":{}}}},"DeleteRule":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"EventBusName":{},"Force":{"type":"boolean"}}}},"DescribeApiDestination":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{"ApiDestinationArn":{},"Name":{},"Description":{},"ApiDestinationState":{},"ConnectionArn":{},"InvocationEndpoint":{},"HttpMethod":{},"InvocationRateLimitPerSecond":{"type":"integer"},"CreationTime":{"type":"timestamp"},"LastModifiedTime":{"type":"timestamp"}}}},"DescribeArchive":{"input":{"type":"structure","required":["ArchiveName"],"members":{"ArchiveName":{}}},"output":{"type":"structure","members":{"ArchiveArn":{},"ArchiveName":{},"EventSourceArn":{},"Description":{},"EventPattern":{},"State":{},"StateReason":{},"RetentionDays":{"type":"integer"},"SizeBytes":{"type":"long"},"EventCount":{"type":"long"},"CreationTime":{"type":"timestamp"}}}},"DescribeConnection":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{"ConnectionArn":{},"Name":{},"Description":{},"ConnectionState":{},"StateReason":{},"AuthorizationType":{},"SecretArn":{},"AuthParameters":{"type":"structure","members":{"BasicAuthParameters":{"type":"structure","members":{"Username":{}}},"OAuthParameters":{"type":"structure","members":{"ClientParameters":{"type":"structure","members":{"ClientID":{}}},"AuthorizationEndpoint":{},"HttpMethod":{},"OAuthHttpParameters":{"shape":"S14"}}},"ApiKeyAuthParameters":{"type":"structure","members":{"ApiKeyName":{}}},"InvocationHttpParameters":{"shape":"S14"}}},"CreationTime":{"type":"timestamp"},"LastModifiedTime":{"type":"timestamp"},"LastAuthorizedTime":{"type":"timestamp"}}}},"DescribeEventBus":{"input":{"type":"structure","members":{"Name":{}}},"output":{"type":"structure","members":{"Name":{},"Arn":{},"Policy":{}}}},"DescribeEventSource":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{"Arn":{},"CreatedBy":{},"CreationTime":{"type":"timestamp"},"ExpirationTime":{"type":"timestamp"},"Name":{},"State":{}}}},"DescribePartnerEventSource":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{"Arn":{},"Name":{}}}},"DescribeReplay":{"input":{"type":"structure","required":["ReplayName"],"members":{"ReplayName":{}}},"output":{"type":"structure","members":{"ReplayName":{},"ReplayArn":{},"Description":{},"State":{},"StateReason":{},"EventSourceArn":{},"Destination":{"shape":"S2w"},"EventStartTime":{"type":"timestamp"},"EventEndTime":{"type":"timestamp"},"EventLastReplayedTime":{"type":"timestamp"},"ReplayStartTime":{"type":"timestamp"},"ReplayEndTime":{"type":"timestamp"}}}},"DescribeRule":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"EventBusName":{}}},"output":{"type":"structure","members":{"Name":{},"Arn":{},"EventPattern":{},"ScheduleExpression":{},"State":{},"Description":{},"RoleArn":{},"ManagedBy":{},"EventBusName":{},"CreatedBy":{}}}},"DisableRule":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"EventBusName":{}}}},"EnableRule":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"EventBusName":{}}}},"ListApiDestinations":{"input":{"type":"structure","members":{"NamePrefix":{},"ConnectionArn":{},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"ApiDestinations":{"type":"list","member":{"type":"structure","members":{"ApiDestinationArn":{},"Name":{},"ApiDestinationState":{},"ConnectionArn":{},"InvocationEndpoint":{},"HttpMethod":{},"InvocationRateLimitPerSecond":{"type":"integer"},"CreationTime":{"type":"timestamp"},"LastModifiedTime":{"type":"timestamp"}}}},"NextToken":{}}}},"ListArchives":{"input":{"type":"structure","members":{"NamePrefix":{},"EventSourceArn":{},"State":{},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"Archives":{"type":"list","member":{"type":"structure","members":{"ArchiveName":{},"EventSourceArn":{},"State":{},"StateReason":{},"RetentionDays":{"type":"integer"},"SizeBytes":{"type":"long"},"EventCount":{"type":"long"},"CreationTime":{"type":"timestamp"}}}},"NextToken":{}}}},"ListConnections":{"input":{"type":"structure","members":{"NamePrefix":{},"ConnectionState":{},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"Connections":{"type":"list","member":{"type":"structure","members":{"ConnectionArn":{},"Name":{},"ConnectionState":{},"StateReason":{},"AuthorizationType":{},"CreationTime":{"type":"timestamp"},"LastModifiedTime":{"type":"timestamp"},"LastAuthorizedTime":{"type":"timestamp"}}}},"NextToken":{}}}},"ListEventBuses":{"input":{"type":"structure","members":{"NamePrefix":{},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"EventBuses":{"type":"list","member":{"type":"structure","members":{"Name":{},"Arn":{},"Policy":{}}}},"NextToken":{}}}},"ListEventSources":{"input":{"type":"structure","members":{"NamePrefix":{},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"EventSources":{"type":"list","member":{"type":"structure","members":{"Arn":{},"CreatedBy":{},"CreationTime":{"type":"timestamp"},"ExpirationTime":{"type":"timestamp"},"Name":{},"State":{}}}},"NextToken":{}}}},"ListPartnerEventSourceAccounts":{"input":{"type":"structure","required":["EventSourceName"],"members":{"EventSourceName":{},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"PartnerEventSourceAccounts":{"type":"list","member":{"type":"structure","members":{"Account":{},"CreationTime":{"type":"timestamp"},"ExpirationTime":{"type":"timestamp"},"State":{}}}},"NextToken":{}}}},"ListPartnerEventSources":{"input":{"type":"structure","required":["NamePrefix"],"members":{"NamePrefix":{},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"PartnerEventSources":{"type":"list","member":{"type":"structure","members":{"Arn":{},"Name":{}}}},"NextToken":{}}}},"ListReplays":{"input":{"type":"structure","members":{"NamePrefix":{},"State":{},"EventSourceArn":{},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"Replays":{"type":"list","member":{"type":"structure","members":{"ReplayName":{},"EventSourceArn":{},"State":{},"StateReason":{},"EventStartTime":{"type":"timestamp"},"EventEndTime":{"type":"timestamp"},"EventLastReplayedTime":{"type":"timestamp"},"ReplayStartTime":{"type":"timestamp"},"ReplayEndTime":{"type":"timestamp"}}}},"NextToken":{}}}},"ListRuleNamesByTarget":{"input":{"type":"structure","required":["TargetArn"],"members":{"TargetArn":{},"EventBusName":{},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"RuleNames":{"type":"list","member":{}},"NextToken":{}}}},"ListRules":{"input":{"type":"structure","members":{"NamePrefix":{},"EventBusName":{},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"Rules":{"type":"list","member":{"type":"structure","members":{"Name":{},"Arn":{},"EventPattern":{},"State":{},"Description":{},"ScheduleExpression":{},"RoleArn":{},"ManagedBy":{},"EventBusName":{}}}},"NextToken":{}}}},"ListTagsForResource":{"input":{"type":"structure","required":["ResourceARN"],"members":{"ResourceARN":{}}},"output":{"type":"structure","members":{"Tags":{"shape":"S1m"}}}},"ListTargetsByRule":{"input":{"type":"structure","required":["Rule"],"members":{"Rule":{},"EventBusName":{},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"Targets":{"shape":"S4l"},"NextToken":{}}}},"PutEvents":{"input":{"type":"structure","required":["Entries"],"members":{"Entries":{"type":"list","member":{"type":"structure","members":{"Time":{"type":"timestamp"},"Source":{},"Resources":{"shape":"S6j"},"DetailType":{},"Detail":{},"EventBusName":{},"TraceHeader":{}}}}}},"output":{"type":"structure","members":{"FailedEntryCount":{"type":"integer"},"Entries":{"type":"list","member":{"type":"structure","members":{"EventId":{},"ErrorCode":{},"ErrorMessage":{}}}}}}},"PutPartnerEvents":{"input":{"type":"structure","required":["Entries"],"members":{"Entries":{"type":"list","member":{"type":"structure","members":{"Time":{"type":"timestamp"},"Source":{},"Resources":{"shape":"S6j"},"DetailType":{},"Detail":{}}}}}},"output":{"type":"structure","members":{"FailedEntryCount":{"type":"integer"},"Entries":{"type":"list","member":{"type":"structure","members":{"EventId":{},"ErrorCode":{},"ErrorMessage":{}}}}}}},"PutPermission":{"input":{"type":"structure","members":{"EventBusName":{},"Action":{},"Principal":{},"StatementId":{},"Condition":{"type":"structure","required":["Type","Key","Value"],"members":{"Type":{},"Key":{},"Value":{}}},"Policy":{}}}},"PutRule":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"ScheduleExpression":{},"EventPattern":{},"State":{},"Description":{},"RoleArn":{},"Tags":{"shape":"S1m"},"EventBusName":{}}},"output":{"type":"structure","members":{"RuleArn":{}}}},"PutTargets":{"input":{"type":"structure","required":["Rule","Targets"],"members":{"Rule":{},"EventBusName":{},"Targets":{"shape":"S4l"}}},"output":{"type":"structure","members":{"FailedEntryCount":{"type":"integer"},"FailedEntries":{"type":"list","member":{"type":"structure","members":{"TargetId":{},"ErrorCode":{},"ErrorMessage":{}}}}}}},"RemovePermission":{"input":{"type":"structure","members":{"StatementId":{},"RemoveAllPermissions":{"type":"boolean"},"EventBusName":{}}}},"RemoveTargets":{"input":{"type":"structure","required":["Rule","Ids"],"members":{"Rule":{},"EventBusName":{},"Ids":{"type":"list","member":{}},"Force":{"type":"boolean"}}},"output":{"type":"structure","members":{"FailedEntryCount":{"type":"integer"},"FailedEntries":{"type":"list","member":{"type":"structure","members":{"TargetId":{},"ErrorCode":{},"ErrorMessage":{}}}}}}},"StartReplay":{"input":{"type":"structure","required":["ReplayName","EventSourceArn","EventStartTime","EventEndTime","Destination"],"members":{"ReplayName":{},"Description":{},"EventSourceArn":{},"EventStartTime":{"type":"timestamp"},"EventEndTime":{"type":"timestamp"},"Destination":{"shape":"S2w"}}},"output":{"type":"structure","members":{"ReplayArn":{},"State":{},"StateReason":{},"ReplayStartTime":{"type":"timestamp"}}}},"TagResource":{"input":{"type":"structure","required":["ResourceARN","Tags"],"members":{"ResourceARN":{},"Tags":{"shape":"S1m"}}},"output":{"type":"structure","members":{}}},"TestEventPattern":{"input":{"type":"structure","required":["EventPattern","Event"],"members":{"EventPattern":{},"Event":{}}},"output":{"type":"structure","members":{"Result":{"type":"boolean"}}}},"UntagResource":{"input":{"type":"structure","required":["ResourceARN","TagKeys"],"members":{"ResourceARN":{},"TagKeys":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"UpdateApiDestination":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"Description":{},"ConnectionArn":{},"InvocationEndpoint":{},"HttpMethod":{},"InvocationRateLimitPerSecond":{"type":"integer"}}},"output":{"type":"structure","members":{"ApiDestinationArn":{},"ApiDestinationState":{},"CreationTime":{"type":"timestamp"},"LastModifiedTime":{"type":"timestamp"}}}},"UpdateArchive":{"input":{"type":"structure","required":["ArchiveName"],"members":{"ArchiveName":{},"Description":{},"EventPattern":{},"RetentionDays":{"type":"integer"}}},"output":{"type":"structure","members":{"ArchiveArn":{},"State":{},"StateReason":{},"CreationTime":{"type":"timestamp"}}}},"UpdateConnection":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"Description":{},"AuthorizationType":{},"AuthParameters":{"type":"structure","members":{"BasicAuthParameters":{"type":"structure","members":{"Username":{},"Password":{}}},"OAuthParameters":{"type":"structure","members":{"ClientParameters":{"type":"structure","members":{"ClientID":{},"ClientSecret":{}}},"AuthorizationEndpoint":{},"HttpMethod":{},"OAuthHttpParameters":{"shape":"S14"}}},"ApiKeyAuthParameters":{"type":"structure","members":{"ApiKeyName":{},"ApiKeyValue":{}}},"InvocationHttpParameters":{"shape":"S14"}}}}},"output":{"type":"structure","members":{"ConnectionArn":{},"ConnectionState":{},"CreationTime":{"type":"timestamp"},"LastModifiedTime":{"type":"timestamp"},"LastAuthorizedTime":{"type":"timestamp"}}}}},"shapes":{"S14":{"type":"structure","members":{"HeaderParameters":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{},"IsValueSecret":{"type":"boolean"}}}},"QueryStringParameters":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{},"IsValueSecret":{"type":"boolean"}}}},"BodyParameters":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{},"IsValueSecret":{"type":"boolean"}}}}}},"S1m":{"type":"list","member":{"type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{}}}},"S2w":{"type":"structure","required":["Arn"],"members":{"Arn":{},"FilterArns":{"type":"list","member":{}}}},"S4l":{"type":"list","member":{"type":"structure","required":["Id","Arn"],"members":{"Id":{},"Arn":{},"RoleArn":{},"Input":{},"InputPath":{},"InputTransformer":{"type":"structure","required":["InputTemplate"],"members":{"InputPathsMap":{"type":"map","key":{},"value":{}},"InputTemplate":{}}},"KinesisParameters":{"type":"structure","required":["PartitionKeyPath"],"members":{"PartitionKeyPath":{}}},"RunCommandParameters":{"type":"structure","required":["RunCommandTargets"],"members":{"RunCommandTargets":{"type":"list","member":{"type":"structure","required":["Key","Values"],"members":{"Key":{},"Values":{"type":"list","member":{}}}}}}},"EcsParameters":{"type":"structure","required":["TaskDefinitionArn"],"members":{"TaskDefinitionArn":{},"TaskCount":{"type":"integer"},"LaunchType":{},"NetworkConfiguration":{"type":"structure","members":{"awsvpcConfiguration":{"type":"structure","required":["Subnets"],"members":{"Subnets":{"shape":"S57"},"SecurityGroups":{"shape":"S57"},"AssignPublicIp":{}}}}},"PlatformVersion":{},"Group":{},"CapacityProviderStrategy":{"type":"list","member":{"type":"structure","required":["capacityProvider"],"members":{"capacityProvider":{},"weight":{"type":"integer"},"base":{"type":"integer"}}}},"EnableECSManagedTags":{"type":"boolean"},"EnableExecuteCommand":{"type":"boolean"},"PlacementConstraints":{"type":"list","member":{"type":"structure","members":{"type":{},"expression":{}}}},"PlacementStrategy":{"type":"list","member":{"type":"structure","members":{"type":{},"field":{}}}},"PropagateTags":{},"ReferenceId":{},"Tags":{"shape":"S1m"}}},"BatchParameters":{"type":"structure","required":["JobDefinition","JobName"],"members":{"JobDefinition":{},"JobName":{},"ArrayProperties":{"type":"structure","members":{"Size":{"type":"integer"}}},"RetryStrategy":{"type":"structure","members":{"Attempts":{"type":"integer"}}}}},"SqsParameters":{"type":"structure","members":{"MessageGroupId":{}}},"HttpParameters":{"type":"structure","members":{"PathParameterValues":{"type":"list","member":{}},"HeaderParameters":{"type":"map","key":{},"value":{}},"QueryStringParameters":{"type":"map","key":{},"value":{}}}},"RedshiftDataParameters":{"type":"structure","required":["Database","Sql"],"members":{"SecretManagerArn":{},"Database":{},"DbUser":{},"Sql":{},"StatementName":{},"WithEvent":{"type":"boolean"}}},"SageMakerPipelineParameters":{"type":"structure","members":{"PipelineParameterList":{"type":"list","member":{"type":"structure","required":["Name","Value"],"members":{"Name":{},"Value":{}}}}}},"DeadLetterConfig":{"type":"structure","members":{"Arn":{}}},"RetryPolicy":{"type":"structure","members":{"MaximumRetryAttempts":{"type":"integer"},"MaximumEventAgeInSeconds":{"type":"integer"}}}}}},"S57":{"type":"list","member":{}},"S6j":{"type":"list","member":{}}}}

/***/ }),
/* 127 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{}}

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['cloudwatchlogs'] = {};
	AWS.CloudWatchLogs = Service.defineService('cloudwatchlogs', ['2014-03-28']);
	Object.defineProperty(apiLoader.services['cloudwatchlogs'], '2014-03-28', {
	  get: function get() {
	    var model = __webpack_require__(129);
	    model.paginators = __webpack_require__(130).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.CloudWatchLogs;


/***/ }),
/* 129 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2014-03-28","endpointPrefix":"logs","jsonVersion":"1.1","protocol":"json","serviceFullName":"Amazon CloudWatch Logs","serviceId":"CloudWatch Logs","signatureVersion":"v4","targetPrefix":"Logs_20140328","uid":"logs-2014-03-28"},"operations":{"AssociateKmsKey":{"input":{"type":"structure","required":["logGroupName","kmsKeyId"],"members":{"logGroupName":{},"kmsKeyId":{}}}},"CancelExportTask":{"input":{"type":"structure","required":["taskId"],"members":{"taskId":{}}}},"CreateExportTask":{"input":{"type":"structure","required":["logGroupName","from","to","destination"],"members":{"taskName":{},"logGroupName":{},"logStreamNamePrefix":{},"from":{"type":"long"},"to":{"type":"long"},"destination":{},"destinationPrefix":{}}},"output":{"type":"structure","members":{"taskId":{}}}},"CreateLogGroup":{"input":{"type":"structure","required":["logGroupName"],"members":{"logGroupName":{},"kmsKeyId":{},"tags":{"shape":"Se"}}}},"CreateLogStream":{"input":{"type":"structure","required":["logGroupName","logStreamName"],"members":{"logGroupName":{},"logStreamName":{}}}},"DeleteDestination":{"input":{"type":"structure","required":["destinationName"],"members":{"destinationName":{}}}},"DeleteLogGroup":{"input":{"type":"structure","required":["logGroupName"],"members":{"logGroupName":{}}}},"DeleteLogStream":{"input":{"type":"structure","required":["logGroupName","logStreamName"],"members":{"logGroupName":{},"logStreamName":{}}}},"DeleteMetricFilter":{"input":{"type":"structure","required":["logGroupName","filterName"],"members":{"logGroupName":{},"filterName":{}}}},"DeleteQueryDefinition":{"input":{"type":"structure","required":["queryDefinitionId"],"members":{"queryDefinitionId":{}}},"output":{"type":"structure","members":{"success":{"type":"boolean"}}}},"DeleteResourcePolicy":{"input":{"type":"structure","members":{"policyName":{}}}},"DeleteRetentionPolicy":{"input":{"type":"structure","required":["logGroupName"],"members":{"logGroupName":{}}}},"DeleteSubscriptionFilter":{"input":{"type":"structure","required":["logGroupName","filterName"],"members":{"logGroupName":{},"filterName":{}}}},"DescribeDestinations":{"input":{"type":"structure","members":{"DestinationNamePrefix":{},"nextToken":{},"limit":{"type":"integer"}}},"output":{"type":"structure","members":{"destinations":{"type":"list","member":{"shape":"S11"}},"nextToken":{}}}},"DescribeExportTasks":{"input":{"type":"structure","members":{"taskId":{},"statusCode":{},"nextToken":{},"limit":{"type":"integer"}}},"output":{"type":"structure","members":{"exportTasks":{"type":"list","member":{"type":"structure","members":{"taskId":{},"taskName":{},"logGroupName":{},"from":{"type":"long"},"to":{"type":"long"},"destination":{},"destinationPrefix":{},"status":{"type":"structure","members":{"code":{},"message":{}}},"executionInfo":{"type":"structure","members":{"creationTime":{"type":"long"},"completionTime":{"type":"long"}}}}}},"nextToken":{}}}},"DescribeLogGroups":{"input":{"type":"structure","members":{"logGroupNamePrefix":{},"nextToken":{},"limit":{"type":"integer"}}},"output":{"type":"structure","members":{"logGroups":{"type":"list","member":{"type":"structure","members":{"logGroupName":{},"creationTime":{"type":"long"},"retentionInDays":{"type":"integer"},"metricFilterCount":{"type":"integer"},"arn":{},"storedBytes":{"type":"long"},"kmsKeyId":{}}}},"nextToken":{}}}},"DescribeLogStreams":{"input":{"type":"structure","required":["logGroupName"],"members":{"logGroupName":{},"logStreamNamePrefix":{},"orderBy":{},"descending":{"type":"boolean"},"nextToken":{},"limit":{"type":"integer"}}},"output":{"type":"structure","members":{"logStreams":{"type":"list","member":{"type":"structure","members":{"logStreamName":{},"creationTime":{"type":"long"},"firstEventTimestamp":{"type":"long"},"lastEventTimestamp":{"type":"long"},"lastIngestionTime":{"type":"long"},"uploadSequenceToken":{},"arn":{},"storedBytes":{"deprecated":true,"deprecatedMessage":"Starting on June 17, 2019, this parameter will be deprecated for log streams, and will be reported as zero. This change applies only to log streams. The storedBytes parameter for log groups is not affected.","type":"long"}}}},"nextToken":{}}}},"DescribeMetricFilters":{"input":{"type":"structure","members":{"logGroupName":{},"filterNamePrefix":{},"nextToken":{},"limit":{"type":"integer"},"metricName":{},"metricNamespace":{}}},"output":{"type":"structure","members":{"metricFilters":{"type":"list","member":{"type":"structure","members":{"filterName":{},"filterPattern":{},"metricTransformations":{"shape":"S1z"},"creationTime":{"type":"long"},"logGroupName":{}}}},"nextToken":{}}}},"DescribeQueries":{"input":{"type":"structure","members":{"logGroupName":{},"status":{},"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"queries":{"type":"list","member":{"type":"structure","members":{"queryId":{},"queryString":{},"status":{},"createTime":{"type":"long"},"logGroupName":{}}}},"nextToken":{}}}},"DescribeQueryDefinitions":{"input":{"type":"structure","members":{"queryDefinitionNamePrefix":{},"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"queryDefinitions":{"type":"list","member":{"type":"structure","members":{"queryDefinitionId":{},"name":{},"queryString":{},"lastModified":{"type":"long"},"logGroupNames":{"shape":"S2l"}}}},"nextToken":{}}}},"DescribeResourcePolicies":{"input":{"type":"structure","members":{"nextToken":{},"limit":{"type":"integer"}}},"output":{"type":"structure","members":{"resourcePolicies":{"type":"list","member":{"shape":"S2p"}},"nextToken":{}}}},"DescribeSubscriptionFilters":{"input":{"type":"structure","required":["logGroupName"],"members":{"logGroupName":{},"filterNamePrefix":{},"nextToken":{},"limit":{"type":"integer"}}},"output":{"type":"structure","members":{"subscriptionFilters":{"type":"list","member":{"type":"structure","members":{"filterName":{},"logGroupName":{},"filterPattern":{},"destinationArn":{},"roleArn":{},"distribution":{},"creationTime":{"type":"long"}}}},"nextToken":{}}}},"DisassociateKmsKey":{"input":{"type":"structure","required":["logGroupName"],"members":{"logGroupName":{}}}},"FilterLogEvents":{"input":{"type":"structure","required":["logGroupName"],"members":{"logGroupName":{},"logStreamNames":{"type":"list","member":{}},"logStreamNamePrefix":{},"startTime":{"type":"long"},"endTime":{"type":"long"},"filterPattern":{},"nextToken":{},"limit":{"type":"integer"},"interleaved":{"deprecated":true,"deprecatedMessage":"Starting on June 17, 2019, this parameter will be ignored and the value will be assumed to be true. The response from this operation will always interleave events from multiple log streams within a log group.","type":"boolean"}}},"output":{"type":"structure","members":{"events":{"type":"list","member":{"type":"structure","members":{"logStreamName":{},"timestamp":{"type":"long"},"message":{},"ingestionTime":{"type":"long"},"eventId":{}}}},"searchedLogStreams":{"type":"list","member":{"type":"structure","members":{"logStreamName":{},"searchedCompletely":{"type":"boolean"}}}},"nextToken":{}}}},"GetLogEvents":{"input":{"type":"structure","required":["logGroupName","logStreamName"],"members":{"logGroupName":{},"logStreamName":{},"startTime":{"type":"long"},"endTime":{"type":"long"},"nextToken":{},"limit":{"type":"integer"},"startFromHead":{"type":"boolean"}}},"output":{"type":"structure","members":{"events":{"type":"list","member":{"type":"structure","members":{"timestamp":{"type":"long"},"message":{},"ingestionTime":{"type":"long"}}}},"nextForwardToken":{},"nextBackwardToken":{}}}},"GetLogGroupFields":{"input":{"type":"structure","required":["logGroupName"],"members":{"logGroupName":{},"time":{"type":"long"}}},"output":{"type":"structure","members":{"logGroupFields":{"type":"list","member":{"type":"structure","members":{"name":{},"percent":{"type":"integer"}}}}}}},"GetLogRecord":{"input":{"type":"structure","required":["logRecordPointer"],"members":{"logRecordPointer":{}}},"output":{"type":"structure","members":{"logRecord":{"type":"map","key":{},"value":{}}}}},"GetQueryResults":{"input":{"type":"structure","required":["queryId"],"members":{"queryId":{}}},"output":{"type":"structure","members":{"results":{"type":"list","member":{"type":"list","member":{"type":"structure","members":{"field":{},"value":{}}}}},"statistics":{"type":"structure","members":{"recordsMatched":{"type":"double"},"recordsScanned":{"type":"double"},"bytesScanned":{"type":"double"}}},"status":{}}}},"ListTagsLogGroup":{"input":{"type":"structure","required":["logGroupName"],"members":{"logGroupName":{}}},"output":{"type":"structure","members":{"tags":{"shape":"Se"}}}},"PutDestination":{"input":{"type":"structure","required":["destinationName","targetArn","roleArn"],"members":{"destinationName":{},"targetArn":{},"roleArn":{}}},"output":{"type":"structure","members":{"destination":{"shape":"S11"}}}},"PutDestinationPolicy":{"input":{"type":"structure","required":["destinationName","accessPolicy"],"members":{"destinationName":{},"accessPolicy":{}}}},"PutLogEvents":{"input":{"type":"structure","required":["logGroupName","logStreamName","logEvents"],"members":{"logGroupName":{},"logStreamName":{},"logEvents":{"type":"list","member":{"type":"structure","required":["timestamp","message"],"members":{"timestamp":{"type":"long"},"message":{}}}},"sequenceToken":{}}},"output":{"type":"structure","members":{"nextSequenceToken":{},"rejectedLogEventsInfo":{"type":"structure","members":{"tooNewLogEventStartIndex":{"type":"integer"},"tooOldLogEventEndIndex":{"type":"integer"},"expiredLogEventEndIndex":{"type":"integer"}}}}}},"PutMetricFilter":{"input":{"type":"structure","required":["logGroupName","filterName","filterPattern","metricTransformations"],"members":{"logGroupName":{},"filterName":{},"filterPattern":{},"metricTransformations":{"shape":"S1z"}}}},"PutQueryDefinition":{"input":{"type":"structure","required":["name","queryString"],"members":{"name":{},"queryDefinitionId":{},"logGroupNames":{"shape":"S2l"},"queryString":{}}},"output":{"type":"structure","members":{"queryDefinitionId":{}}}},"PutResourcePolicy":{"input":{"type":"structure","members":{"policyName":{},"policyDocument":{}}},"output":{"type":"structure","members":{"resourcePolicy":{"shape":"S2p"}}}},"PutRetentionPolicy":{"input":{"type":"structure","required":["logGroupName","retentionInDays"],"members":{"logGroupName":{},"retentionInDays":{"type":"integer"}}}},"PutSubscriptionFilter":{"input":{"type":"structure","required":["logGroupName","filterName","filterPattern","destinationArn"],"members":{"logGroupName":{},"filterName":{},"filterPattern":{},"destinationArn":{},"roleArn":{},"distribution":{}}}},"StartQuery":{"input":{"type":"structure","required":["startTime","endTime","queryString"],"members":{"logGroupName":{},"logGroupNames":{"shape":"S2l"},"startTime":{"type":"long"},"endTime":{"type":"long"},"queryString":{},"limit":{"type":"integer"}}},"output":{"type":"structure","members":{"queryId":{}}}},"StopQuery":{"input":{"type":"structure","required":["queryId"],"members":{"queryId":{}}},"output":{"type":"structure","members":{"success":{"type":"boolean"}}}},"TagLogGroup":{"input":{"type":"structure","required":["logGroupName","tags"],"members":{"logGroupName":{},"tags":{"shape":"Se"}}}},"TestMetricFilter":{"input":{"type":"structure","required":["filterPattern","logEventMessages"],"members":{"filterPattern":{},"logEventMessages":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"matches":{"type":"list","member":{"type":"structure","members":{"eventNumber":{"type":"long"},"eventMessage":{},"extractedValues":{"type":"map","key":{},"value":{}}}}}}}},"UntagLogGroup":{"input":{"type":"structure","required":["logGroupName","tags"],"members":{"logGroupName":{},"tags":{"type":"list","member":{}}}}}},"shapes":{"Se":{"type":"map","key":{},"value":{}},"S11":{"type":"structure","members":{"destinationName":{},"targetArn":{},"roleArn":{},"accessPolicy":{},"arn":{},"creationTime":{"type":"long"}}},"S1z":{"type":"list","member":{"type":"structure","required":["metricName","metricNamespace","metricValue"],"members":{"metricName":{},"metricNamespace":{},"metricValue":{},"defaultValue":{"type":"double"},"dimensions":{"type":"map","key":{},"value":{}},"unit":{}}}},"S2l":{"type":"list","member":{}},"S2p":{"type":"structure","members":{"policyName":{},"policyDocument":{},"lastUpdatedTime":{"type":"long"}}}}}

/***/ }),
/* 130 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeDestinations":{"input_token":"nextToken","limit_key":"limit","output_token":"nextToken","result_key":"destinations"},"DescribeLogGroups":{"input_token":"nextToken","limit_key":"limit","output_token":"nextToken","result_key":"logGroups"},"DescribeLogStreams":{"input_token":"nextToken","limit_key":"limit","output_token":"nextToken","result_key":"logStreams"},"DescribeMetricFilters":{"input_token":"nextToken","limit_key":"limit","output_token":"nextToken","result_key":"metricFilters"},"DescribeSubscriptionFilters":{"input_token":"nextToken","limit_key":"limit","output_token":"nextToken","result_key":"subscriptionFilters"},"FilterLogEvents":{"input_token":"nextToken","limit_key":"limit","output_token":"nextToken","result_key":["events","searchedLogStreams"]},"GetLogEvents":{"input_token":"nextToken","limit_key":"limit","output_token":"nextForwardToken","result_key":"events"}}}

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['codebuild'] = {};
	AWS.CodeBuild = Service.defineService('codebuild', ['2016-10-06']);
	Object.defineProperty(apiLoader.services['codebuild'], '2016-10-06', {
	  get: function get() {
	    var model = __webpack_require__(132);
	    model.paginators = __webpack_require__(133).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.CodeBuild;


/***/ }),
/* 132 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-10-06","endpointPrefix":"codebuild","jsonVersion":"1.1","protocol":"json","serviceFullName":"AWS CodeBuild","serviceId":"CodeBuild","signatureVersion":"v4","targetPrefix":"CodeBuild_20161006","uid":"codebuild-2016-10-06"},"operations":{"BatchDeleteBuilds":{"input":{"type":"structure","required":["ids"],"members":{"ids":{"shape":"S2"}}},"output":{"type":"structure","members":{"buildsDeleted":{"shape":"S2"},"buildsNotDeleted":{"shape":"S5"}}}},"BatchGetBuildBatches":{"input":{"type":"structure","required":["ids"],"members":{"ids":{"shape":"S9"}}},"output":{"type":"structure","members":{"buildBatches":{"type":"list","member":{"shape":"Sc"}},"buildBatchesNotFound":{"shape":"S9"}}}},"BatchGetBuilds":{"input":{"type":"structure","required":["ids"],"members":{"ids":{"shape":"S2"}}},"output":{"type":"structure","members":{"builds":{"type":"list","member":{"shape":"S22"}},"buildsNotFound":{"shape":"S2"}}}},"BatchGetProjects":{"input":{"type":"structure","required":["names"],"members":{"names":{"shape":"S2d"}}},"output":{"type":"structure","members":{"projects":{"type":"list","member":{"shape":"S2g"}},"projectsNotFound":{"shape":"S2d"}}}},"BatchGetReportGroups":{"input":{"type":"structure","required":["reportGroupArns"],"members":{"reportGroupArns":{"shape":"S30"}}},"output":{"type":"structure","members":{"reportGroups":{"type":"list","member":{"shape":"S33"}},"reportGroupsNotFound":{"shape":"S30"}}}},"BatchGetReports":{"input":{"type":"structure","required":["reportArns"],"members":{"reportArns":{"shape":"S3c"}}},"output":{"type":"structure","members":{"reports":{"type":"list","member":{"type":"structure","members":{"arn":{},"type":{},"name":{},"reportGroupArn":{},"executionId":{},"status":{},"created":{"type":"timestamp"},"expired":{"type":"timestamp"},"exportConfig":{"shape":"S36"},"truncated":{"type":"boolean"},"testSummary":{"type":"structure","required":["total","statusCounts","durationInNanoSeconds"],"members":{"total":{"type":"integer"},"statusCounts":{"type":"map","key":{},"value":{"type":"integer"}},"durationInNanoSeconds":{"type":"long"}}},"codeCoverageSummary":{"type":"structure","members":{"lineCoveragePercentage":{"type":"double"},"linesCovered":{"type":"integer"},"linesMissed":{"type":"integer"},"branchCoveragePercentage":{"type":"double"},"branchesCovered":{"type":"integer"},"branchesMissed":{"type":"integer"}}}}}},"reportsNotFound":{"shape":"S3c"}}}},"CreateProject":{"input":{"type":"structure","required":["name","source","artifacts","environment","serviceRole"],"members":{"name":{},"description":{},"source":{"shape":"Sl"},"secondarySources":{"shape":"St"},"sourceVersion":{},"secondarySourceVersions":{"shape":"Su"},"artifacts":{"shape":"S2j"},"secondaryArtifacts":{"shape":"S2m"},"cache":{"shape":"Sz"},"environment":{"shape":"S13"},"serviceRole":{},"timeoutInMinutes":{"type":"integer"},"queuedTimeoutInMinutes":{"type":"integer"},"encryptionKey":{},"tags":{"shape":"S2o"},"vpcConfig":{"shape":"S1i"},"badgeEnabled":{"type":"boolean"},"logsConfig":{"shape":"S1c"},"fileSystemLocations":{"shape":"S1l"},"buildBatchConfig":{"shape":"S1o"},"concurrentBuildLimit":{"type":"integer"}}},"output":{"type":"structure","members":{"project":{"shape":"S2g"}}}},"CreateReportGroup":{"input":{"type":"structure","required":["name","type","exportConfig"],"members":{"name":{},"type":{},"exportConfig":{"shape":"S36"},"tags":{"shape":"S2o"}}},"output":{"type":"structure","members":{"reportGroup":{"shape":"S33"}}}},"CreateWebhook":{"input":{"type":"structure","required":["projectName"],"members":{"projectName":{},"branchFilter":{},"filterGroups":{"shape":"S2t"},"buildType":{}}},"output":{"type":"structure","members":{"webhook":{"shape":"S2s"}}}},"DeleteBuildBatch":{"input":{"type":"structure","required":["id"],"members":{"id":{}}},"output":{"type":"structure","members":{"statusCode":{},"buildsDeleted":{"shape":"S2"},"buildsNotDeleted":{"shape":"S5"}}}},"DeleteProject":{"input":{"type":"structure","required":["name"],"members":{"name":{}}},"output":{"type":"structure","members":{}}},"DeleteReport":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{}}},"DeleteReportGroup":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"deleteReports":{"type":"boolean"}}},"output":{"type":"structure","members":{}}},"DeleteResourcePolicy":{"input":{"type":"structure","required":["resourceArn"],"members":{"resourceArn":{}}},"output":{"type":"structure","members":{}}},"DeleteSourceCredentials":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"arn":{}}}},"DeleteWebhook":{"input":{"type":"structure","required":["projectName"],"members":{"projectName":{}}},"output":{"type":"structure","members":{}}},"DescribeCodeCoverages":{"input":{"type":"structure","required":["reportArn"],"members":{"reportArn":{},"nextToken":{},"maxResults":{"type":"integer"},"sortOrder":{},"sortBy":{},"minLineCoveragePercentage":{"type":"double"},"maxLineCoveragePercentage":{"type":"double"}}},"output":{"type":"structure","members":{"nextToken":{},"codeCoverages":{"type":"list","member":{"type":"structure","members":{"id":{},"reportARN":{},"filePath":{},"lineCoveragePercentage":{"type":"double"},"linesCovered":{"type":"integer"},"linesMissed":{"type":"integer"},"branchCoveragePercentage":{"type":"double"},"branchesCovered":{"type":"integer"},"branchesMissed":{"type":"integer"},"expired":{"type":"timestamp"}}}}}}},"DescribeTestCases":{"input":{"type":"structure","required":["reportArn"],"members":{"reportArn":{},"nextToken":{},"maxResults":{"type":"integer"},"filter":{"type":"structure","members":{"status":{},"keyword":{}}}}},"output":{"type":"structure","members":{"nextToken":{},"testCases":{"type":"list","member":{"type":"structure","members":{"reportArn":{},"testRawDataPath":{},"prefix":{},"name":{},"status":{},"durationInNanoSeconds":{"type":"long"},"message":{},"expired":{"type":"timestamp"}}}}}}},"GetReportGroupTrend":{"input":{"type":"structure","required":["reportGroupArn","trendField"],"members":{"reportGroupArn":{},"numOfReports":{"type":"integer"},"trendField":{}}},"output":{"type":"structure","members":{"stats":{"type":"structure","members":{"average":{},"max":{},"min":{}}},"rawData":{"type":"list","member":{"type":"structure","members":{"reportArn":{},"data":{}}}}}}},"GetResourcePolicy":{"input":{"type":"structure","required":["resourceArn"],"members":{"resourceArn":{}}},"output":{"type":"structure","members":{"policy":{}}}},"ImportSourceCredentials":{"input":{"type":"structure","required":["token","serverType","authType"],"members":{"username":{},"token":{"type":"string","sensitive":true},"serverType":{},"authType":{},"shouldOverwrite":{"type":"boolean"}}},"output":{"type":"structure","members":{"arn":{}}}},"InvalidateProjectCache":{"input":{"type":"structure","required":["projectName"],"members":{"projectName":{}}},"output":{"type":"structure","members":{}}},"ListBuildBatches":{"input":{"type":"structure","members":{"filter":{"shape":"S4y"},"maxResults":{"type":"integer"},"sortOrder":{},"nextToken":{}}},"output":{"type":"structure","members":{"ids":{"shape":"S9"},"nextToken":{}}}},"ListBuildBatchesForProject":{"input":{"type":"structure","members":{"projectName":{},"filter":{"shape":"S4y"},"maxResults":{"type":"integer"},"sortOrder":{},"nextToken":{}}},"output":{"type":"structure","members":{"ids":{"shape":"S9"},"nextToken":{}}}},"ListBuilds":{"input":{"type":"structure","members":{"sortOrder":{},"nextToken":{}}},"output":{"type":"structure","members":{"ids":{"shape":"S2"},"nextToken":{}}}},"ListBuildsForProject":{"input":{"type":"structure","required":["projectName"],"members":{"projectName":{},"sortOrder":{},"nextToken":{}}},"output":{"type":"structure","members":{"ids":{"shape":"S2"},"nextToken":{}}}},"ListCuratedEnvironmentImages":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"platforms":{"type":"list","member":{"type":"structure","members":{"platform":{},"languages":{"type":"list","member":{"type":"structure","members":{"language":{},"images":{"type":"list","member":{"type":"structure","members":{"name":{},"description":{},"versions":{"type":"list","member":{}}}}}}}}}}}}}},"ListProjects":{"input":{"type":"structure","members":{"sortBy":{},"sortOrder":{},"nextToken":{}}},"output":{"type":"structure","members":{"nextToken":{},"projects":{"shape":"S2d"}}}},"ListReportGroups":{"input":{"type":"structure","members":{"sortOrder":{},"sortBy":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"nextToken":{},"reportGroups":{"shape":"S30"}}}},"ListReports":{"input":{"type":"structure","members":{"sortOrder":{},"nextToken":{},"maxResults":{"type":"integer"},"filter":{"shape":"S5o"}}},"output":{"type":"structure","members":{"nextToken":{},"reports":{"shape":"S3c"}}}},"ListReportsForReportGroup":{"input":{"type":"structure","required":["reportGroupArn"],"members":{"reportGroupArn":{},"nextToken":{},"sortOrder":{},"maxResults":{"type":"integer"},"filter":{"shape":"S5o"}}},"output":{"type":"structure","members":{"nextToken":{},"reports":{"shape":"S3c"}}}},"ListSharedProjects":{"input":{"type":"structure","members":{"sortBy":{},"sortOrder":{},"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"nextToken":{},"projects":{"type":"list","member":{}}}}},"ListSharedReportGroups":{"input":{"type":"structure","members":{"sortOrder":{},"sortBy":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"nextToken":{},"reportGroups":{"shape":"S30"}}}},"ListSourceCredentials":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"sourceCredentialsInfos":{"type":"list","member":{"type":"structure","members":{"arn":{},"serverType":{},"authType":{}}}}}}},"PutResourcePolicy":{"input":{"type":"structure","required":["policy","resourceArn"],"members":{"policy":{},"resourceArn":{}}},"output":{"type":"structure","members":{"resourceArn":{}}}},"RetryBuild":{"input":{"type":"structure","members":{"id":{},"idempotencyToken":{}}},"output":{"type":"structure","members":{"build":{"shape":"S22"}}}},"RetryBuildBatch":{"input":{"type":"structure","members":{"id":{},"idempotencyToken":{},"retryType":{}}},"output":{"type":"structure","members":{"buildBatch":{"shape":"Sc"}}}},"StartBuild":{"input":{"type":"structure","required":["projectName"],"members":{"projectName":{},"secondarySourcesOverride":{"shape":"St"},"secondarySourcesVersionOverride":{"shape":"Su"},"sourceVersion":{},"artifactsOverride":{"shape":"S2j"},"secondaryArtifactsOverride":{"shape":"S2m"},"environmentVariablesOverride":{"shape":"S16"},"sourceTypeOverride":{},"sourceLocationOverride":{},"sourceAuthOverride":{"shape":"Sq"},"gitCloneDepthOverride":{"type":"integer"},"gitSubmodulesConfigOverride":{"shape":"So"},"buildspecOverride":{},"insecureSslOverride":{"type":"boolean"},"reportBuildStatusOverride":{"type":"boolean"},"buildStatusConfigOverride":{"shape":"Ss"},"environmentTypeOverride":{},"imageOverride":{},"computeTypeOverride":{},"certificateOverride":{},"cacheOverride":{"shape":"Sz"},"serviceRoleOverride":{},"privilegedModeOverride":{"type":"boolean"},"timeoutInMinutesOverride":{"type":"integer"},"queuedTimeoutInMinutesOverride":{"type":"integer"},"encryptionKeyOverride":{},"idempotencyToken":{},"logsConfigOverride":{"shape":"S1c"},"registryCredentialOverride":{"shape":"S19"},"imagePullCredentialsTypeOverride":{},"debugSessionEnabled":{"type":"boolean"}}},"output":{"type":"structure","members":{"build":{"shape":"S22"}}}},"StartBuildBatch":{"input":{"type":"structure","required":["projectName"],"members":{"projectName":{},"secondarySourcesOverride":{"shape":"St"},"secondarySourcesVersionOverride":{"shape":"Su"},"sourceVersion":{},"artifactsOverride":{"shape":"S2j"},"secondaryArtifactsOverride":{"shape":"S2m"},"environmentVariablesOverride":{"shape":"S16"},"sourceTypeOverride":{},"sourceLocationOverride":{},"sourceAuthOverride":{"shape":"Sq"},"gitCloneDepthOverride":{"type":"integer"},"gitSubmodulesConfigOverride":{"shape":"So"},"buildspecOverride":{},"insecureSslOverride":{"type":"boolean"},"reportBuildBatchStatusOverride":{"type":"boolean"},"environmentTypeOverride":{},"imageOverride":{},"computeTypeOverride":{},"certificateOverride":{},"cacheOverride":{"shape":"Sz"},"serviceRoleOverride":{},"privilegedModeOverride":{"type":"boolean"},"buildTimeoutInMinutesOverride":{"type":"integer"},"queuedTimeoutInMinutesOverride":{"type":"integer"},"encryptionKeyOverride":{},"idempotencyToken":{},"logsConfigOverride":{"shape":"S1c"},"registryCredentialOverride":{"shape":"S19"},"imagePullCredentialsTypeOverride":{},"buildBatchConfigOverride":{"shape":"S1o"},"debugSessionEnabled":{"type":"boolean"}}},"output":{"type":"structure","members":{"buildBatch":{"shape":"Sc"}}}},"StopBuild":{"input":{"type":"structure","required":["id"],"members":{"id":{}}},"output":{"type":"structure","members":{"build":{"shape":"S22"}}}},"StopBuildBatch":{"input":{"type":"structure","required":["id"],"members":{"id":{}}},"output":{"type":"structure","members":{"buildBatch":{"shape":"Sc"}}}},"UpdateProject":{"input":{"type":"structure","required":["name"],"members":{"name":{},"description":{},"source":{"shape":"Sl"},"secondarySources":{"shape":"St"},"sourceVersion":{},"secondarySourceVersions":{"shape":"Su"},"artifacts":{"shape":"S2j"},"secondaryArtifacts":{"shape":"S2m"},"cache":{"shape":"Sz"},"environment":{"shape":"S13"},"serviceRole":{},"timeoutInMinutes":{"type":"integer"},"queuedTimeoutInMinutes":{"type":"integer"},"encryptionKey":{},"tags":{"shape":"S2o"},"vpcConfig":{"shape":"S1i"},"badgeEnabled":{"type":"boolean"},"logsConfig":{"shape":"S1c"},"fileSystemLocations":{"shape":"S1l"},"buildBatchConfig":{"shape":"S1o"},"concurrentBuildLimit":{"type":"integer"}}},"output":{"type":"structure","members":{"project":{"shape":"S2g"}}}},"UpdateReportGroup":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"exportConfig":{"shape":"S36"},"tags":{"shape":"S2o"}}},"output":{"type":"structure","members":{"reportGroup":{"shape":"S33"}}}},"UpdateWebhook":{"input":{"type":"structure","required":["projectName"],"members":{"projectName":{},"branchFilter":{},"rotateSecret":{"type":"boolean"},"filterGroups":{"shape":"S2t"},"buildType":{}}},"output":{"type":"structure","members":{"webhook":{"shape":"S2s"}}}}},"shapes":{"S2":{"type":"list","member":{}},"S5":{"type":"list","member":{"type":"structure","members":{"id":{},"statusCode":{}}}},"S9":{"type":"list","member":{}},"Sc":{"type":"structure","members":{"id":{},"arn":{},"startTime":{"type":"timestamp"},"endTime":{"type":"timestamp"},"currentPhase":{},"buildBatchStatus":{},"sourceVersion":{},"resolvedSourceVersion":{},"projectName":{},"phases":{"type":"list","member":{"type":"structure","members":{"phaseType":{},"phaseStatus":{},"startTime":{"type":"timestamp"},"endTime":{"type":"timestamp"},"durationInSeconds":{"type":"long"},"contexts":{"shape":"Sj"}}}},"source":{"shape":"Sl"},"secondarySources":{"shape":"St"},"secondarySourceVersions":{"shape":"Su"},"artifacts":{"shape":"Sw"},"secondaryArtifacts":{"shape":"Sy"},"cache":{"shape":"Sz"},"environment":{"shape":"S13"},"serviceRole":{},"logConfig":{"shape":"S1c"},"buildTimeoutInMinutes":{"type":"integer"},"queuedTimeoutInMinutes":{"type":"integer"},"complete":{"type":"boolean"},"initiator":{},"vpcConfig":{"shape":"S1i"},"encryptionKey":{},"buildBatchNumber":{"type":"long"},"fileSystemLocations":{"shape":"S1l"},"buildBatchConfig":{"shape":"S1o"},"buildGroups":{"type":"list","member":{"type":"structure","members":{"identifier":{},"dependsOn":{"type":"list","member":{}},"ignoreFailure":{"type":"boolean"},"currentBuildSummary":{"shape":"S1u"},"priorBuildSummaryList":{"type":"list","member":{"shape":"S1u"}}}}},"debugSessionEnabled":{"type":"boolean"}}},"Sj":{"type":"list","member":{"type":"structure","members":{"statusCode":{},"message":{}}}},"Sl":{"type":"structure","required":["type"],"members":{"type":{},"location":{},"gitCloneDepth":{"type":"integer"},"gitSubmodulesConfig":{"shape":"So"},"buildspec":{},"auth":{"shape":"Sq"},"reportBuildStatus":{"type":"boolean"},"buildStatusConfig":{"shape":"Ss"},"insecureSsl":{"type":"boolean"},"sourceIdentifier":{}}},"So":{"type":"structure","required":["fetchSubmodules"],"members":{"fetchSubmodules":{"type":"boolean"}}},"Sq":{"type":"structure","required":["type"],"members":{"type":{},"resource":{}}},"Ss":{"type":"structure","members":{"context":{},"targetUrl":{}}},"St":{"type":"list","member":{"shape":"Sl"}},"Su":{"type":"list","member":{"type":"structure","required":["sourceIdentifier","sourceVersion"],"members":{"sourceIdentifier":{},"sourceVersion":{}}}},"Sw":{"type":"structure","members":{"location":{},"sha256sum":{},"md5sum":{},"overrideArtifactName":{"type":"boolean"},"encryptionDisabled":{"type":"boolean"},"artifactIdentifier":{},"bucketOwnerAccess":{}}},"Sy":{"type":"list","member":{"shape":"Sw"}},"Sz":{"type":"structure","required":["type"],"members":{"type":{},"location":{},"modes":{"type":"list","member":{}}}},"S13":{"type":"structure","required":["type","image","computeType"],"members":{"type":{},"image":{},"computeType":{},"environmentVariables":{"shape":"S16"},"privilegedMode":{"type":"boolean"},"certificate":{},"registryCredential":{"shape":"S19"},"imagePullCredentialsType":{}}},"S16":{"type":"list","member":{"type":"structure","required":["name","value"],"members":{"name":{},"value":{},"type":{}}}},"S19":{"type":"structure","required":["credential","credentialProvider"],"members":{"credential":{},"credentialProvider":{}}},"S1c":{"type":"structure","members":{"cloudWatchLogs":{"shape":"S1d"},"s3Logs":{"shape":"S1f"}}},"S1d":{"type":"structure","required":["status"],"members":{"status":{},"groupName":{},"streamName":{}}},"S1f":{"type":"structure","required":["status"],"members":{"status":{},"location":{},"encryptionDisabled":{"type":"boolean"},"bucketOwnerAccess":{}}},"S1i":{"type":"structure","members":{"vpcId":{},"subnets":{"type":"list","member":{}},"securityGroupIds":{"type":"list","member":{}}}},"S1l":{"type":"list","member":{"type":"structure","members":{"type":{},"location":{},"mountPoint":{},"identifier":{},"mountOptions":{}}}},"S1o":{"type":"structure","members":{"serviceRole":{},"combineArtifacts":{"type":"boolean"},"restrictions":{"type":"structure","members":{"maximumBuildsAllowed":{"type":"integer"},"computeTypesAllowed":{"type":"list","member":{}}}},"timeoutInMins":{"type":"integer"}}},"S1u":{"type":"structure","members":{"arn":{},"requestedOn":{"type":"timestamp"},"buildStatus":{},"primaryArtifact":{"shape":"S1v"},"secondaryArtifacts":{"type":"list","member":{"shape":"S1v"}}}},"S1v":{"type":"structure","members":{"type":{},"location":{},"identifier":{}}},"S22":{"type":"structure","members":{"id":{},"arn":{},"buildNumber":{"type":"long"},"startTime":{"type":"timestamp"},"endTime":{"type":"timestamp"},"currentPhase":{},"buildStatus":{},"sourceVersion":{},"resolvedSourceVersion":{},"projectName":{},"phases":{"type":"list","member":{"type":"structure","members":{"phaseType":{},"phaseStatus":{},"startTime":{"type":"timestamp"},"endTime":{"type":"timestamp"},"durationInSeconds":{"type":"long"},"contexts":{"shape":"Sj"}}}},"source":{"shape":"Sl"},"secondarySources":{"shape":"St"},"secondarySourceVersions":{"shape":"Su"},"artifacts":{"shape":"Sw"},"secondaryArtifacts":{"shape":"Sy"},"cache":{"shape":"Sz"},"environment":{"shape":"S13"},"serviceRole":{},"logs":{"type":"structure","members":{"groupName":{},"streamName":{},"deepLink":{},"s3DeepLink":{},"cloudWatchLogsArn":{},"s3LogsArn":{},"cloudWatchLogs":{"shape":"S1d"},"s3Logs":{"shape":"S1f"}}},"timeoutInMinutes":{"type":"integer"},"queuedTimeoutInMinutes":{"type":"integer"},"buildComplete":{"type":"boolean"},"initiator":{},"vpcConfig":{"shape":"S1i"},"networkInterface":{"type":"structure","members":{"subnetId":{},"networkInterfaceId":{}}},"encryptionKey":{},"exportedEnvironmentVariables":{"type":"list","member":{"type":"structure","members":{"name":{},"value":{}}}},"reportArns":{"type":"list","member":{}},"fileSystemLocations":{"shape":"S1l"},"debugSession":{"type":"structure","members":{"sessionEnabled":{"type":"boolean"},"sessionTarget":{}}},"buildBatchArn":{}}},"S2d":{"type":"list","member":{}},"S2g":{"type":"structure","members":{"name":{},"arn":{},"description":{},"source":{"shape":"Sl"},"secondarySources":{"shape":"St"},"sourceVersion":{},"secondarySourceVersions":{"shape":"Su"},"artifacts":{"shape":"S2j"},"secondaryArtifacts":{"shape":"S2m"},"cache":{"shape":"Sz"},"environment":{"shape":"S13"},"serviceRole":{},"timeoutInMinutes":{"type":"integer"},"queuedTimeoutInMinutes":{"type":"integer"},"encryptionKey":{},"tags":{"shape":"S2o"},"created":{"type":"timestamp"},"lastModified":{"type":"timestamp"},"webhook":{"shape":"S2s"},"vpcConfig":{"shape":"S1i"},"badge":{"type":"structure","members":{"badgeEnabled":{"type":"boolean"},"badgeRequestUrl":{}}},"logsConfig":{"shape":"S1c"},"fileSystemLocations":{"shape":"S1l"},"buildBatchConfig":{"shape":"S1o"},"concurrentBuildLimit":{"type":"integer"}}},"S2j":{"type":"structure","required":["type"],"members":{"type":{},"location":{},"path":{},"namespaceType":{},"name":{},"packaging":{},"overrideArtifactName":{"type":"boolean"},"encryptionDisabled":{"type":"boolean"},"artifactIdentifier":{},"bucketOwnerAccess":{}}},"S2m":{"type":"list","member":{"shape":"S2j"}},"S2o":{"type":"list","member":{"type":"structure","members":{"key":{},"value":{}}}},"S2s":{"type":"structure","members":{"url":{},"payloadUrl":{},"secret":{},"branchFilter":{},"filterGroups":{"shape":"S2t"},"buildType":{},"lastModifiedSecret":{"type":"timestamp"}}},"S2t":{"type":"list","member":{"type":"list","member":{"type":"structure","required":["type","pattern"],"members":{"type":{},"pattern":{},"excludeMatchedPattern":{"type":"boolean"}}}}},"S30":{"type":"list","member":{}},"S33":{"type":"structure","members":{"arn":{},"name":{},"type":{},"exportConfig":{"shape":"S36"},"created":{"type":"timestamp"},"lastModified":{"type":"timestamp"},"tags":{"shape":"S2o"},"status":{}}},"S36":{"type":"structure","members":{"exportConfigType":{},"s3Destination":{"type":"structure","members":{"bucket":{},"bucketOwner":{},"path":{},"packaging":{},"encryptionKey":{},"encryptionDisabled":{"type":"boolean"}}}}},"S3c":{"type":"list","member":{}},"S4y":{"type":"structure","members":{"status":{}}},"S5o":{"type":"structure","members":{"status":{}}}}}

/***/ }),
/* 133 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeCodeCoverages":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"codeCoverages"},"DescribeTestCases":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"testCases"},"ListBuildBatches":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"ids"},"ListBuildBatchesForProject":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"ids"},"ListBuilds":{"input_token":"nextToken","output_token":"nextToken","result_key":"ids"},"ListBuildsForProject":{"input_token":"nextToken","output_token":"nextToken","result_key":"ids"},"ListProjects":{"input_token":"nextToken","output_token":"nextToken","result_key":"projects"},"ListReportGroups":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"reportGroups"},"ListReports":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"reports"},"ListReportsForReportGroup":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"reports"},"ListSharedProjects":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"projects"},"ListSharedReportGroups":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"reportGroups"}}}

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['codecommit'] = {};
	AWS.CodeCommit = Service.defineService('codecommit', ['2015-04-13']);
	Object.defineProperty(apiLoader.services['codecommit'], '2015-04-13', {
	  get: function get() {
	    var model = __webpack_require__(135);
	    model.paginators = __webpack_require__(136).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.CodeCommit;


/***/ }),
/* 135 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-04-13","endpointPrefix":"codecommit","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"CodeCommit","serviceFullName":"AWS CodeCommit","serviceId":"CodeCommit","signatureVersion":"v4","targetPrefix":"CodeCommit_20150413","uid":"codecommit-2015-04-13"},"operations":{"AssociateApprovalRuleTemplateWithRepository":{"input":{"type":"structure","required":["approvalRuleTemplateName","repositoryName"],"members":{"approvalRuleTemplateName":{},"repositoryName":{}}}},"BatchAssociateApprovalRuleTemplateWithRepositories":{"input":{"type":"structure","required":["approvalRuleTemplateName","repositoryNames"],"members":{"approvalRuleTemplateName":{},"repositoryNames":{"shape":"S5"}}},"output":{"type":"structure","required":["associatedRepositoryNames","errors"],"members":{"associatedRepositoryNames":{"shape":"S5"},"errors":{"type":"list","member":{"type":"structure","members":{"repositoryName":{},"errorCode":{},"errorMessage":{}}}}}}},"BatchDescribeMergeConflicts":{"input":{"type":"structure","required":["repositoryName","destinationCommitSpecifier","sourceCommitSpecifier","mergeOption"],"members":{"repositoryName":{},"destinationCommitSpecifier":{},"sourceCommitSpecifier":{},"mergeOption":{},"maxMergeHunks":{"type":"integer"},"maxConflictFiles":{"type":"integer"},"filePaths":{"type":"list","member":{}},"conflictDetailLevel":{},"conflictResolutionStrategy":{},"nextToken":{}}},"output":{"type":"structure","required":["conflicts","destinationCommitId","sourceCommitId"],"members":{"conflicts":{"type":"list","member":{"type":"structure","members":{"conflictMetadata":{"shape":"Sn"},"mergeHunks":{"shape":"S12"}}}},"nextToken":{},"errors":{"type":"list","member":{"type":"structure","required":["filePath","exceptionName","message"],"members":{"filePath":{},"exceptionName":{},"message":{}}}},"destinationCommitId":{},"sourceCommitId":{},"baseCommitId":{}}}},"BatchDisassociateApprovalRuleTemplateFromRepositories":{"input":{"type":"structure","required":["approvalRuleTemplateName","repositoryNames"],"members":{"approvalRuleTemplateName":{},"repositoryNames":{"shape":"S5"}}},"output":{"type":"structure","required":["disassociatedRepositoryNames","errors"],"members":{"disassociatedRepositoryNames":{"shape":"S5"},"errors":{"type":"list","member":{"type":"structure","members":{"repositoryName":{},"errorCode":{},"errorMessage":{}}}}}}},"BatchGetCommits":{"input":{"type":"structure","required":["commitIds","repositoryName"],"members":{"commitIds":{"type":"list","member":{}},"repositoryName":{}}},"output":{"type":"structure","members":{"commits":{"type":"list","member":{"shape":"S1l"}},"errors":{"type":"list","member":{"type":"structure","members":{"commitId":{},"errorCode":{},"errorMessage":{}}}}}}},"BatchGetRepositories":{"input":{"type":"structure","required":["repositoryNames"],"members":{"repositoryNames":{"shape":"S5"}}},"output":{"type":"structure","members":{"repositories":{"type":"list","member":{"shape":"S1x"}},"repositoriesNotFound":{"type":"list","member":{}}}}},"CreateApprovalRuleTemplate":{"input":{"type":"structure","required":["approvalRuleTemplateName","approvalRuleTemplateContent"],"members":{"approvalRuleTemplateName":{},"approvalRuleTemplateContent":{},"approvalRuleTemplateDescription":{}}},"output":{"type":"structure","required":["approvalRuleTemplate"],"members":{"approvalRuleTemplate":{"shape":"S2c"}}}},"CreateBranch":{"input":{"type":"structure","required":["repositoryName","branchName","commitId"],"members":{"repositoryName":{},"branchName":{},"commitId":{}}}},"CreateCommit":{"input":{"type":"structure","required":["repositoryName","branchName"],"members":{"repositoryName":{},"branchName":{},"parentCommitId":{},"authorName":{},"email":{},"commitMessage":{},"keepEmptyFolders":{"type":"boolean"},"putFiles":{"type":"list","member":{"type":"structure","required":["filePath"],"members":{"filePath":{},"fileMode":{},"fileContent":{"type":"blob"},"sourceFile":{"type":"structure","required":["filePath"],"members":{"filePath":{},"isMove":{"type":"boolean"}}}}}},"deleteFiles":{"shape":"S2o"},"setFileModes":{"shape":"S2q"}}},"output":{"type":"structure","members":{"commitId":{},"treeId":{},"filesAdded":{"shape":"S2t"},"filesUpdated":{"shape":"S2t"},"filesDeleted":{"shape":"S2t"}}}},"CreatePullRequest":{"input":{"type":"structure","required":["title","targets"],"members":{"title":{},"description":{},"targets":{"type":"list","member":{"type":"structure","required":["repositoryName","sourceReference"],"members":{"repositoryName":{},"sourceReference":{},"destinationReference":{}}}},"clientRequestToken":{"idempotencyToken":true}}},"output":{"type":"structure","required":["pullRequest"],"members":{"pullRequest":{"shape":"S33"}}}},"CreatePullRequestApprovalRule":{"input":{"type":"structure","required":["pullRequestId","approvalRuleName","approvalRuleContent"],"members":{"pullRequestId":{},"approvalRuleName":{},"approvalRuleContent":{}}},"output":{"type":"structure","required":["approvalRule"],"members":{"approvalRule":{"shape":"S3c"}}}},"CreateRepository":{"input":{"type":"structure","required":["repositoryName"],"members":{"repositoryName":{},"repositoryDescription":{},"tags":{"shape":"S3k"}}},"output":{"type":"structure","members":{"repositoryMetadata":{"shape":"S1x"}}}},"CreateUnreferencedMergeCommit":{"input":{"type":"structure","required":["repositoryName","sourceCommitSpecifier","destinationCommitSpecifier","mergeOption"],"members":{"repositoryName":{},"sourceCommitSpecifier":{},"destinationCommitSpecifier":{},"mergeOption":{},"conflictDetailLevel":{},"conflictResolutionStrategy":{},"authorName":{},"email":{},"commitMessage":{},"keepEmptyFolders":{"type":"boolean"},"conflictResolution":{"shape":"S3p"}}},"output":{"type":"structure","members":{"commitId":{},"treeId":{}}}},"DeleteApprovalRuleTemplate":{"input":{"type":"structure","required":["approvalRuleTemplateName"],"members":{"approvalRuleTemplateName":{}}},"output":{"type":"structure","required":["approvalRuleTemplateId"],"members":{"approvalRuleTemplateId":{}}}},"DeleteBranch":{"input":{"type":"structure","required":["repositoryName","branchName"],"members":{"repositoryName":{},"branchName":{}}},"output":{"type":"structure","members":{"deletedBranch":{"shape":"S3y"}}}},"DeleteCommentContent":{"input":{"type":"structure","required":["commentId"],"members":{"commentId":{}}},"output":{"type":"structure","members":{"comment":{"shape":"S42"}}}},"DeleteFile":{"input":{"type":"structure","required":["repositoryName","branchName","filePath","parentCommitId"],"members":{"repositoryName":{},"branchName":{},"filePath":{},"parentCommitId":{},"keepEmptyFolders":{"type":"boolean"},"commitMessage":{},"name":{},"email":{}}},"output":{"type":"structure","required":["commitId","blobId","treeId","filePath"],"members":{"commitId":{},"blobId":{},"treeId":{},"filePath":{}}}},"DeletePullRequestApprovalRule":{"input":{"type":"structure","required":["pullRequestId","approvalRuleName"],"members":{"pullRequestId":{},"approvalRuleName":{}}},"output":{"type":"structure","required":["approvalRuleId"],"members":{"approvalRuleId":{}}}},"DeleteRepository":{"input":{"type":"structure","required":["repositoryName"],"members":{"repositoryName":{}}},"output":{"type":"structure","members":{"repositoryId":{}}}},"DescribeMergeConflicts":{"input":{"type":"structure","required":["repositoryName","destinationCommitSpecifier","sourceCommitSpecifier","mergeOption","filePath"],"members":{"repositoryName":{},"destinationCommitSpecifier":{},"sourceCommitSpecifier":{},"mergeOption":{},"maxMergeHunks":{"type":"integer"},"filePath":{},"conflictDetailLevel":{},"conflictResolutionStrategy":{},"nextToken":{}}},"output":{"type":"structure","required":["conflictMetadata","mergeHunks","destinationCommitId","sourceCommitId"],"members":{"conflictMetadata":{"shape":"Sn"},"mergeHunks":{"shape":"S12"},"nextToken":{},"destinationCommitId":{},"sourceCommitId":{},"baseCommitId":{}}}},"DescribePullRequestEvents":{"input":{"type":"structure","required":["pullRequestId"],"members":{"pullRequestId":{},"pullRequestEventType":{},"actorArn":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","required":["pullRequestEvents"],"members":{"pullRequestEvents":{"type":"list","member":{"type":"structure","members":{"pullRequestId":{},"eventDate":{"type":"timestamp"},"pullRequestEventType":{},"actorArn":{},"pullRequestCreatedEventMetadata":{"type":"structure","members":{"repositoryName":{},"sourceCommitId":{},"destinationCommitId":{},"mergeBase":{}}},"pullRequestStatusChangedEventMetadata":{"type":"structure","members":{"pullRequestStatus":{}}},"pullRequestSourceReferenceUpdatedEventMetadata":{"type":"structure","members":{"repositoryName":{},"beforeCommitId":{},"afterCommitId":{},"mergeBase":{}}},"pullRequestMergedStateChangedEventMetadata":{"type":"structure","members":{"repositoryName":{},"destinationReference":{},"mergeMetadata":{"shape":"S38"}}},"approvalRuleEventMetadata":{"type":"structure","members":{"approvalRuleName":{},"approvalRuleId":{},"approvalRuleContent":{}}},"approvalStateChangedEventMetadata":{"type":"structure","members":{"revisionId":{},"approvalStatus":{}}},"approvalRuleOverriddenEventMetadata":{"type":"structure","members":{"revisionId":{},"overrideStatus":{}}}}}},"nextToken":{}}}},"DisassociateApprovalRuleTemplateFromRepository":{"input":{"type":"structure","required":["approvalRuleTemplateName","repositoryName"],"members":{"approvalRuleTemplateName":{},"repositoryName":{}}}},"EvaluatePullRequestApprovalRules":{"input":{"type":"structure","required":["pullRequestId","revisionId"],"members":{"pullRequestId":{},"revisionId":{}}},"output":{"type":"structure","required":["evaluation"],"members":{"evaluation":{"type":"structure","members":{"approved":{"type":"boolean"},"overridden":{"type":"boolean"},"approvalRulesSatisfied":{"type":"list","member":{}},"approvalRulesNotSatisfied":{"type":"list","member":{}}}}}}},"GetApprovalRuleTemplate":{"input":{"type":"structure","required":["approvalRuleTemplateName"],"members":{"approvalRuleTemplateName":{}}},"output":{"type":"structure","required":["approvalRuleTemplate"],"members":{"approvalRuleTemplate":{"shape":"S2c"}}}},"GetBlob":{"input":{"type":"structure","required":["repositoryName","blobId"],"members":{"repositoryName":{},"blobId":{}}},"output":{"type":"structure","required":["content"],"members":{"content":{"type":"blob"}}}},"GetBranch":{"input":{"type":"structure","members":{"repositoryName":{},"branchName":{}}},"output":{"type":"structure","members":{"branch":{"shape":"S3y"}}}},"GetComment":{"input":{"type":"structure","required":["commentId"],"members":{"commentId":{}}},"output":{"type":"structure","members":{"comment":{"shape":"S42"}}}},"GetCommentReactions":{"input":{"type":"structure","required":["commentId"],"members":{"commentId":{},"reactionUserArn":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","required":["reactionsForComment"],"members":{"reactionsForComment":{"type":"list","member":{"type":"structure","members":{"reaction":{"type":"structure","members":{"emoji":{},"shortCode":{},"unicode":{}}},"reactionUsers":{"type":"list","member":{}},"reactionsFromDeletedUsersCount":{"type":"integer"}}}},"nextToken":{}}}},"GetCommentsForComparedCommit":{"input":{"type":"structure","required":["repositoryName","afterCommitId"],"members":{"repositoryName":{},"beforeCommitId":{},"afterCommitId":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"commentsForComparedCommitData":{"type":"list","member":{"type":"structure","members":{"repositoryName":{},"beforeCommitId":{},"afterCommitId":{},"beforeBlobId":{},"afterBlobId":{},"location":{"shape":"S5q"},"comments":{"shape":"S5t"}}}},"nextToken":{}}}},"GetCommentsForPullRequest":{"input":{"type":"structure","required":["pullRequestId"],"members":{"pullRequestId":{},"repositoryName":{},"beforeCommitId":{},"afterCommitId":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"commentsForPullRequestData":{"type":"list","member":{"type":"structure","members":{"pullRequestId":{},"repositoryName":{},"beforeCommitId":{},"afterCommitId":{},"beforeBlobId":{},"afterBlobId":{},"location":{"shape":"S5q"},"comments":{"shape":"S5t"}}}},"nextToken":{}}}},"GetCommit":{"input":{"type":"structure","required":["repositoryName","commitId"],"members":{"repositoryName":{},"commitId":{}}},"output":{"type":"structure","required":["commit"],"members":{"commit":{"shape":"S1l"}}}},"GetDifferences":{"input":{"type":"structure","required":["repositoryName","afterCommitSpecifier"],"members":{"repositoryName":{},"beforeCommitSpecifier":{},"afterCommitSpecifier":{},"beforePath":{},"afterPath":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"differences":{"type":"list","member":{"type":"structure","members":{"beforeBlob":{"shape":"S65"},"afterBlob":{"shape":"S65"},"changeType":{}}}},"NextToken":{}}}},"GetFile":{"input":{"type":"structure","required":["repositoryName","filePath"],"members":{"repositoryName":{},"commitSpecifier":{},"filePath":{}}},"output":{"type":"structure","required":["commitId","blobId","filePath","fileMode","fileSize","fileContent"],"members":{"commitId":{},"blobId":{},"filePath":{},"fileMode":{},"fileSize":{"type":"long"},"fileContent":{"type":"blob"}}}},"GetFolder":{"input":{"type":"structure","required":["repositoryName","folderPath"],"members":{"repositoryName":{},"commitSpecifier":{},"folderPath":{}}},"output":{"type":"structure","required":["commitId","folderPath"],"members":{"commitId":{},"folderPath":{},"treeId":{},"subFolders":{"type":"list","member":{"type":"structure","members":{"treeId":{},"absolutePath":{},"relativePath":{}}}},"files":{"type":"list","member":{"type":"structure","members":{"blobId":{},"absolutePath":{},"relativePath":{},"fileMode":{}}}},"symbolicLinks":{"type":"list","member":{"type":"structure","members":{"blobId":{},"absolutePath":{},"relativePath":{},"fileMode":{}}}},"subModules":{"type":"list","member":{"type":"structure","members":{"commitId":{},"absolutePath":{},"relativePath":{}}}}}}},"GetMergeCommit":{"input":{"type":"structure","required":["repositoryName","sourceCommitSpecifier","destinationCommitSpecifier"],"members":{"repositoryName":{},"sourceCommitSpecifier":{},"destinationCommitSpecifier":{},"conflictDetailLevel":{},"conflictResolutionStrategy":{}}},"output":{"type":"structure","members":{"sourceCommitId":{},"destinationCommitId":{},"baseCommitId":{},"mergedCommitId":{}}}},"GetMergeConflicts":{"input":{"type":"structure","required":["repositoryName","destinationCommitSpecifier","sourceCommitSpecifier","mergeOption"],"members":{"repositoryName":{},"destinationCommitSpecifier":{},"sourceCommitSpecifier":{},"mergeOption":{},"conflictDetailLevel":{},"maxConflictFiles":{"type":"integer"},"conflictResolutionStrategy":{},"nextToken":{}}},"output":{"type":"structure","required":["mergeable","destinationCommitId","sourceCommitId","conflictMetadataList"],"members":{"mergeable":{"type":"boolean"},"destinationCommitId":{},"sourceCommitId":{},"baseCommitId":{},"conflictMetadataList":{"type":"list","member":{"shape":"Sn"}},"nextToken":{}}}},"GetMergeOptions":{"input":{"type":"structure","required":["repositoryName","sourceCommitSpecifier","destinationCommitSpecifier"],"members":{"repositoryName":{},"sourceCommitSpecifier":{},"destinationCommitSpecifier":{},"conflictDetailLevel":{},"conflictResolutionStrategy":{}}},"output":{"type":"structure","required":["mergeOptions","sourceCommitId","destinationCommitId","baseCommitId"],"members":{"mergeOptions":{"type":"list","member":{}},"sourceCommitId":{},"destinationCommitId":{},"baseCommitId":{}}}},"GetPullRequest":{"input":{"type":"structure","required":["pullRequestId"],"members":{"pullRequestId":{}}},"output":{"type":"structure","required":["pullRequest"],"members":{"pullRequest":{"shape":"S33"}}}},"GetPullRequestApprovalStates":{"input":{"type":"structure","required":["pullRequestId","revisionId"],"members":{"pullRequestId":{},"revisionId":{}}},"output":{"type":"structure","members":{"approvals":{"type":"list","member":{"type":"structure","members":{"userArn":{},"approvalState":{}}}}}}},"GetPullRequestOverrideState":{"input":{"type":"structure","required":["pullRequestId","revisionId"],"members":{"pullRequestId":{},"revisionId":{}}},"output":{"type":"structure","members":{"overridden":{"type":"boolean"},"overrider":{}}}},"GetRepository":{"input":{"type":"structure","required":["repositoryName"],"members":{"repositoryName":{}}},"output":{"type":"structure","members":{"repositoryMetadata":{"shape":"S1x"}}}},"GetRepositoryTriggers":{"input":{"type":"structure","required":["repositoryName"],"members":{"repositoryName":{}}},"output":{"type":"structure","members":{"configurationId":{},"triggers":{"shape":"S76"}}}},"ListApprovalRuleTemplates":{"input":{"type":"structure","members":{"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"approvalRuleTemplateNames":{"shape":"S7f"},"nextToken":{}}}},"ListAssociatedApprovalRuleTemplatesForRepository":{"input":{"type":"structure","required":["repositoryName"],"members":{"repositoryName":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"approvalRuleTemplateNames":{"shape":"S7f"},"nextToken":{}}}},"ListBranches":{"input":{"type":"structure","required":["repositoryName"],"members":{"repositoryName":{},"nextToken":{}}},"output":{"type":"structure","members":{"branches":{"shape":"S7a"},"nextToken":{}}}},"ListPullRequests":{"input":{"type":"structure","required":["repositoryName"],"members":{"repositoryName":{},"authorArn":{},"pullRequestStatus":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","required":["pullRequestIds"],"members":{"pullRequestIds":{"type":"list","member":{}},"nextToken":{}}}},"ListRepositories":{"input":{"type":"structure","members":{"nextToken":{},"sortBy":{},"order":{}}},"output":{"type":"structure","members":{"repositories":{"type":"list","member":{"type":"structure","members":{"repositoryName":{},"repositoryId":{}}}},"nextToken":{}}}},"ListRepositoriesForApprovalRuleTemplate":{"input":{"type":"structure","required":["approvalRuleTemplateName"],"members":{"approvalRuleTemplateName":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"repositoryNames":{"shape":"S5"},"nextToken":{}}}},"ListTagsForResource":{"input":{"type":"structure","required":["resourceArn"],"members":{"resourceArn":{},"nextToken":{}}},"output":{"type":"structure","members":{"tags":{"shape":"S3k"},"nextToken":{}}}},"MergeBranchesByFastForward":{"input":{"type":"structure","required":["repositoryName","sourceCommitSpecifier","destinationCommitSpecifier"],"members":{"repositoryName":{},"sourceCommitSpecifier":{},"destinationCommitSpecifier":{},"targetBranch":{}}},"output":{"type":"structure","members":{"commitId":{},"treeId":{}}}},"MergeBranchesBySquash":{"input":{"type":"structure","required":["repositoryName","sourceCommitSpecifier","destinationCommitSpecifier"],"members":{"repositoryName":{},"sourceCommitSpecifier":{},"destinationCommitSpecifier":{},"targetBranch":{},"conflictDetailLevel":{},"conflictResolutionStrategy":{},"authorName":{},"email":{},"commitMessage":{},"keepEmptyFolders":{"type":"boolean"},"conflictResolution":{"shape":"S3p"}}},"output":{"type":"structure","members":{"commitId":{},"treeId":{}}}},"MergeBranchesByThreeWay":{"input":{"type":"structure","required":["repositoryName","sourceCommitSpecifier","destinationCommitSpecifier"],"members":{"repositoryName":{},"sourceCommitSpecifier":{},"destinationCommitSpecifier":{},"targetBranch":{},"conflictDetailLevel":{},"conflictResolutionStrategy":{},"authorName":{},"email":{},"commitMessage":{},"keepEmptyFolders":{"type":"boolean"},"conflictResolution":{"shape":"S3p"}}},"output":{"type":"structure","members":{"commitId":{},"treeId":{}}}},"MergePullRequestByFastForward":{"input":{"type":"structure","required":["pullRequestId","repositoryName"],"members":{"pullRequestId":{},"repositoryName":{},"sourceCommitId":{}}},"output":{"type":"structure","members":{"pullRequest":{"shape":"S33"}}}},"MergePullRequestBySquash":{"input":{"type":"structure","required":["pullRequestId","repositoryName"],"members":{"pullRequestId":{},"repositoryName":{},"sourceCommitId":{},"conflictDetailLevel":{},"conflictResolutionStrategy":{},"commitMessage":{},"authorName":{},"email":{},"keepEmptyFolders":{"type":"boolean"},"conflictResolution":{"shape":"S3p"}}},"output":{"type":"structure","members":{"pullRequest":{"shape":"S33"}}}},"MergePullRequestByThreeWay":{"input":{"type":"structure","required":["pullRequestId","repositoryName"],"members":{"pullRequestId":{},"repositoryName":{},"sourceCommitId":{},"conflictDetailLevel":{},"conflictResolutionStrategy":{},"commitMessage":{},"authorName":{},"email":{},"keepEmptyFolders":{"type":"boolean"},"conflictResolution":{"shape":"S3p"}}},"output":{"type":"structure","members":{"pullRequest":{"shape":"S33"}}}},"OverridePullRequestApprovalRules":{"input":{"type":"structure","required":["pullRequestId","revisionId","overrideStatus"],"members":{"pullRequestId":{},"revisionId":{},"overrideStatus":{}}}},"PostCommentForComparedCommit":{"input":{"type":"structure","required":["repositoryName","afterCommitId","content"],"members":{"repositoryName":{},"beforeCommitId":{},"afterCommitId":{},"location":{"shape":"S5q"},"content":{},"clientRequestToken":{"idempotencyToken":true}}},"output":{"type":"structure","members":{"repositoryName":{},"beforeCommitId":{},"afterCommitId":{},"beforeBlobId":{},"afterBlobId":{},"location":{"shape":"S5q"},"comment":{"shape":"S42"}}},"idempotent":true},"PostCommentForPullRequest":{"input":{"type":"structure","required":["pullRequestId","repositoryName","beforeCommitId","afterCommitId","content"],"members":{"pullRequestId":{},"repositoryName":{},"beforeCommitId":{},"afterCommitId":{},"location":{"shape":"S5q"},"content":{},"clientRequestToken":{"idempotencyToken":true}}},"output":{"type":"structure","members":{"repositoryName":{},"pullRequestId":{},"beforeCommitId":{},"afterCommitId":{},"beforeBlobId":{},"afterBlobId":{},"location":{"shape":"S5q"},"comment":{"shape":"S42"}}},"idempotent":true},"PostCommentReply":{"input":{"type":"structure","required":["inReplyTo","content"],"members":{"inReplyTo":{},"clientRequestToken":{"idempotencyToken":true},"content":{}}},"output":{"type":"structure","members":{"comment":{"shape":"S42"}}},"idempotent":true},"PutCommentReaction":{"input":{"type":"structure","required":["commentId","reactionValue"],"members":{"commentId":{},"reactionValue":{}}}},"PutFile":{"input":{"type":"structure","required":["repositoryName","branchName","fileContent","filePath"],"members":{"repositoryName":{},"branchName":{},"fileContent":{"type":"blob"},"filePath":{},"fileMode":{},"parentCommitId":{},"commitMessage":{},"name":{},"email":{}}},"output":{"type":"structure","required":["commitId","blobId","treeId"],"members":{"commitId":{},"blobId":{},"treeId":{}}}},"PutRepositoryTriggers":{"input":{"type":"structure","required":["repositoryName","triggers"],"members":{"repositoryName":{},"triggers":{"shape":"S76"}}},"output":{"type":"structure","members":{"configurationId":{}}}},"TagResource":{"input":{"type":"structure","required":["resourceArn","tags"],"members":{"resourceArn":{},"tags":{"shape":"S3k"}}}},"TestRepositoryTriggers":{"input":{"type":"structure","required":["repositoryName","triggers"],"members":{"repositoryName":{},"triggers":{"shape":"S76"}}},"output":{"type":"structure","members":{"successfulExecutions":{"type":"list","member":{}},"failedExecutions":{"type":"list","member":{"type":"structure","members":{"trigger":{},"failureMessage":{}}}}}}},"UntagResource":{"input":{"type":"structure","required":["resourceArn","tagKeys"],"members":{"resourceArn":{},"tagKeys":{"type":"list","member":{}}}}},"UpdateApprovalRuleTemplateContent":{"input":{"type":"structure","required":["approvalRuleTemplateName","newRuleContent"],"members":{"approvalRuleTemplateName":{},"newRuleContent":{},"existingRuleContentSha256":{}}},"output":{"type":"structure","required":["approvalRuleTemplate"],"members":{"approvalRuleTemplate":{"shape":"S2c"}}}},"UpdateApprovalRuleTemplateDescription":{"input":{"type":"structure","required":["approvalRuleTemplateName","approvalRuleTemplateDescription"],"members":{"approvalRuleTemplateName":{},"approvalRuleTemplateDescription":{}}},"output":{"type":"structure","required":["approvalRuleTemplate"],"members":{"approvalRuleTemplate":{"shape":"S2c"}}}},"UpdateApprovalRuleTemplateName":{"input":{"type":"structure","required":["oldApprovalRuleTemplateName","newApprovalRuleTemplateName"],"members":{"oldApprovalRuleTemplateName":{},"newApprovalRuleTemplateName":{}}},"output":{"type":"structure","required":["approvalRuleTemplate"],"members":{"approvalRuleTemplate":{"shape":"S2c"}}}},"UpdateComment":{"input":{"type":"structure","required":["commentId","content"],"members":{"commentId":{},"content":{}}},"output":{"type":"structure","members":{"comment":{"shape":"S42"}}}},"UpdateDefaultBranch":{"input":{"type":"structure","required":["repositoryName","defaultBranchName"],"members":{"repositoryName":{},"defaultBranchName":{}}}},"UpdatePullRequestApprovalRuleContent":{"input":{"type":"structure","required":["pullRequestId","approvalRuleName","newRuleContent"],"members":{"pullRequestId":{},"approvalRuleName":{},"existingRuleContentSha256":{},"newRuleContent":{}}},"output":{"type":"structure","required":["approvalRule"],"members":{"approvalRule":{"shape":"S3c"}}}},"UpdatePullRequestApprovalState":{"input":{"type":"structure","required":["pullRequestId","revisionId","approvalState"],"members":{"pullRequestId":{},"revisionId":{},"approvalState":{}}}},"UpdatePullRequestDescription":{"input":{"type":"structure","required":["pullRequestId","description"],"members":{"pullRequestId":{},"description":{}}},"output":{"type":"structure","required":["pullRequest"],"members":{"pullRequest":{"shape":"S33"}}}},"UpdatePullRequestStatus":{"input":{"type":"structure","required":["pullRequestId","pullRequestStatus"],"members":{"pullRequestId":{},"pullRequestStatus":{}}},"output":{"type":"structure","required":["pullRequest"],"members":{"pullRequest":{"shape":"S33"}}}},"UpdatePullRequestTitle":{"input":{"type":"structure","required":["pullRequestId","title"],"members":{"pullRequestId":{},"title":{}}},"output":{"type":"structure","required":["pullRequest"],"members":{"pullRequest":{"shape":"S33"}}}},"UpdateRepositoryDescription":{"input":{"type":"structure","required":["repositoryName"],"members":{"repositoryName":{},"repositoryDescription":{}}}},"UpdateRepositoryName":{"input":{"type":"structure","required":["oldName","newName"],"members":{"oldName":{},"newName":{}}}}},"shapes":{"S5":{"type":"list","member":{}},"Sn":{"type":"structure","members":{"filePath":{},"fileSizes":{"type":"structure","members":{"source":{"type":"long"},"destination":{"type":"long"},"base":{"type":"long"}}},"fileModes":{"type":"structure","members":{"source":{},"destination":{},"base":{}}},"objectTypes":{"type":"structure","members":{"source":{},"destination":{},"base":{}}},"numberOfConflicts":{"type":"integer"},"isBinaryFile":{"type":"structure","members":{"source":{"type":"boolean"},"destination":{"type":"boolean"},"base":{"type":"boolean"}}},"contentConflict":{"type":"boolean"},"fileModeConflict":{"type":"boolean"},"objectTypeConflict":{"type":"boolean"},"mergeOperations":{"type":"structure","members":{"source":{},"destination":{}}}}},"S12":{"type":"list","member":{"type":"structure","members":{"isConflict":{"type":"boolean"},"source":{"shape":"S15"},"destination":{"shape":"S15"},"base":{"shape":"S15"}}}},"S15":{"type":"structure","members":{"startLine":{"type":"integer"},"endLine":{"type":"integer"},"hunkContent":{}}},"S1l":{"type":"structure","members":{"commitId":{},"treeId":{},"parents":{"type":"list","member":{}},"message":{},"author":{"shape":"S1n"},"committer":{"shape":"S1n"},"additionalData":{}}},"S1n":{"type":"structure","members":{"name":{},"email":{},"date":{}}},"S1x":{"type":"structure","members":{"accountId":{},"repositoryId":{},"repositoryName":{},"repositoryDescription":{},"defaultBranch":{},"lastModifiedDate":{"type":"timestamp"},"creationDate":{"type":"timestamp"},"cloneUrlHttp":{},"cloneUrlSsh":{},"Arn":{}}},"S2c":{"type":"structure","members":{"approvalRuleTemplateId":{},"approvalRuleTemplateName":{},"approvalRuleTemplateDescription":{},"approvalRuleTemplateContent":{},"ruleContentSha256":{},"lastModifiedDate":{"type":"timestamp"},"creationDate":{"type":"timestamp"},"lastModifiedUser":{}}},"S2o":{"type":"list","member":{"type":"structure","required":["filePath"],"members":{"filePath":{}}}},"S2q":{"type":"list","member":{"type":"structure","required":["filePath","fileMode"],"members":{"filePath":{},"fileMode":{}}}},"S2t":{"type":"list","member":{"type":"structure","members":{"absolutePath":{},"blobId":{},"fileMode":{}}}},"S33":{"type":"structure","members":{"pullRequestId":{},"title":{},"description":{},"lastActivityDate":{"type":"timestamp"},"creationDate":{"type":"timestamp"},"pullRequestStatus":{},"authorArn":{},"pullRequestTargets":{"type":"list","member":{"type":"structure","members":{"repositoryName":{},"sourceReference":{},"destinationReference":{},"destinationCommit":{},"sourceCommit":{},"mergeBase":{},"mergeMetadata":{"shape":"S38"}}}},"clientRequestToken":{},"revisionId":{},"approvalRules":{"type":"list","member":{"shape":"S3c"}}}},"S38":{"type":"structure","members":{"isMerged":{"type":"boolean"},"mergedBy":{},"mergeCommitId":{},"mergeOption":{}}},"S3c":{"type":"structure","members":{"approvalRuleId":{},"approvalRuleName":{},"approvalRuleContent":{},"ruleContentSha256":{},"lastModifiedDate":{"type":"timestamp"},"creationDate":{"type":"timestamp"},"lastModifiedUser":{},"originApprovalRuleTemplate":{"type":"structure","members":{"approvalRuleTemplateId":{},"approvalRuleTemplateName":{}}}}},"S3k":{"type":"map","key":{},"value":{}},"S3p":{"type":"structure","members":{"replaceContents":{"type":"list","member":{"type":"structure","required":["filePath","replacementType"],"members":{"filePath":{},"replacementType":{},"content":{"type":"blob"},"fileMode":{}}}},"deleteFiles":{"shape":"S2o"},"setFileModes":{"shape":"S2q"}}},"S3y":{"type":"structure","members":{"branchName":{},"commitId":{}}},"S42":{"type":"structure","members":{"commentId":{},"content":{},"inReplyTo":{},"creationDate":{"type":"timestamp"},"lastModifiedDate":{"type":"timestamp"},"authorArn":{},"deleted":{"type":"boolean"},"clientRequestToken":{},"callerReactions":{"type":"list","member":{}},"reactionCounts":{"type":"map","key":{},"value":{"type":"integer"}}}},"S5q":{"type":"structure","members":{"filePath":{},"filePosition":{"type":"long"},"relativeFileVersion":{}}},"S5t":{"type":"list","member":{"shape":"S42"}},"S65":{"type":"structure","members":{"blobId":{},"path":{},"mode":{}}},"S76":{"type":"list","member":{"type":"structure","required":["name","destinationArn","events"],"members":{"name":{},"destinationArn":{},"customData":{},"branches":{"shape":"S7a"},"events":{"type":"list","member":{}}}}},"S7a":{"type":"list","member":{}},"S7f":{"type":"list","member":{}}}}

/***/ }),
/* 136 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeMergeConflicts":{"input_token":"nextToken","limit_key":"maxMergeHunks","output_token":"nextToken"},"DescribePullRequestEvents":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken"},"GetCommentReactions":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken"},"GetCommentsForComparedCommit":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken"},"GetCommentsForPullRequest":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken"},"GetDifferences":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken"},"GetMergeConflicts":{"input_token":"nextToken","limit_key":"maxConflictFiles","output_token":"nextToken"},"ListApprovalRuleTemplates":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken"},"ListAssociatedApprovalRuleTemplatesForRepository":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken"},"ListBranches":{"input_token":"nextToken","output_token":"nextToken","result_key":"branches"},"ListPullRequests":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken"},"ListRepositories":{"input_token":"nextToken","output_token":"nextToken","result_key":"repositories"},"ListRepositoriesForApprovalRuleTemplate":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken"}}}

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['codedeploy'] = {};
	AWS.CodeDeploy = Service.defineService('codedeploy', ['2014-10-06']);
	Object.defineProperty(apiLoader.services['codedeploy'], '2014-10-06', {
	  get: function get() {
	    var model = __webpack_require__(138);
	    model.paginators = __webpack_require__(139).pagination;
	    model.waiters = __webpack_require__(140).waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.CodeDeploy;


/***/ }),
/* 138 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2014-10-06","endpointPrefix":"codedeploy","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"CodeDeploy","serviceFullName":"AWS CodeDeploy","serviceId":"CodeDeploy","signatureVersion":"v4","targetPrefix":"CodeDeploy_20141006","uid":"codedeploy-2014-10-06"},"operations":{"AddTagsToOnPremisesInstances":{"input":{"type":"structure","required":["tags","instanceNames"],"members":{"tags":{"shape":"S2"},"instanceNames":{"shape":"S6"}}}},"BatchGetApplicationRevisions":{"input":{"type":"structure","required":["applicationName","revisions"],"members":{"applicationName":{},"revisions":{"shape":"Sa"}}},"output":{"type":"structure","members":{"applicationName":{},"errorMessage":{},"revisions":{"type":"list","member":{"type":"structure","members":{"revisionLocation":{"shape":"Sb"},"genericRevisionInfo":{"shape":"Su"}}}}}}},"BatchGetApplications":{"input":{"type":"structure","required":["applicationNames"],"members":{"applicationNames":{"shape":"S10"}}},"output":{"type":"structure","members":{"applicationsInfo":{"type":"list","member":{"shape":"S13"}}}}},"BatchGetDeploymentGroups":{"input":{"type":"structure","required":["applicationName","deploymentGroupNames"],"members":{"applicationName":{},"deploymentGroupNames":{"shape":"Sw"}}},"output":{"type":"structure","members":{"deploymentGroupsInfo":{"type":"list","member":{"shape":"S1b"}},"errorMessage":{}}}},"BatchGetDeploymentInstances":{"input":{"type":"structure","required":["deploymentId","instanceIds"],"members":{"deploymentId":{},"instanceIds":{"shape":"S32"}}},"output":{"type":"structure","members":{"instancesSummary":{"type":"list","member":{"shape":"S36"}},"errorMessage":{}}},"deprecated":true,"deprecatedMessage":"This operation is deprecated, use BatchGetDeploymentTargets instead."},"BatchGetDeploymentTargets":{"input":{"type":"structure","members":{"deploymentId":{},"targetIds":{"shape":"S3j"}}},"output":{"type":"structure","members":{"deploymentTargets":{"type":"list","member":{"shape":"S3n"}}}}},"BatchGetDeployments":{"input":{"type":"structure","required":["deploymentIds"],"members":{"deploymentIds":{"shape":"S49"}}},"output":{"type":"structure","members":{"deploymentsInfo":{"type":"list","member":{"shape":"S4c"}}}}},"BatchGetOnPremisesInstances":{"input":{"type":"structure","required":["instanceNames"],"members":{"instanceNames":{"shape":"S6"}}},"output":{"type":"structure","members":{"instanceInfos":{"type":"list","member":{"shape":"S4t"}}}}},"ContinueDeployment":{"input":{"type":"structure","members":{"deploymentId":{},"deploymentWaitType":{}}}},"CreateApplication":{"input":{"type":"structure","required":["applicationName"],"members":{"applicationName":{},"computePlatform":{},"tags":{"shape":"S2"}}},"output":{"type":"structure","members":{"applicationId":{}}}},"CreateDeployment":{"input":{"type":"structure","required":["applicationName"],"members":{"applicationName":{},"deploymentGroupName":{},"revision":{"shape":"Sb"},"deploymentConfigName":{},"description":{},"ignoreApplicationStopFailures":{"type":"boolean"},"targetInstances":{"shape":"S4j"},"autoRollbackConfiguration":{"shape":"S1z"},"updateOutdatedInstancesOnly":{"type":"boolean"},"fileExistsBehavior":{}}},"output":{"type":"structure","members":{"deploymentId":{}}}},"CreateDeploymentConfig":{"input":{"type":"structure","required":["deploymentConfigName"],"members":{"deploymentConfigName":{},"minimumHealthyHosts":{"shape":"S54"},"trafficRoutingConfig":{"shape":"S57"},"computePlatform":{}}},"output":{"type":"structure","members":{"deploymentConfigId":{}}}},"CreateDeploymentGroup":{"input":{"type":"structure","required":["applicationName","deploymentGroupName","serviceRoleArn"],"members":{"applicationName":{},"deploymentGroupName":{},"deploymentConfigName":{},"ec2TagFilters":{"shape":"S1e"},"onPremisesInstanceTagFilters":{"shape":"S1h"},"autoScalingGroups":{"shape":"S4k"},"serviceRoleArn":{},"triggerConfigurations":{"shape":"S1p"},"alarmConfiguration":{"shape":"S1v"},"autoRollbackConfiguration":{"shape":"S1z"},"outdatedInstancesStrategy":{},"deploymentStyle":{"shape":"S22"},"blueGreenDeploymentConfiguration":{"shape":"S26"},"loadBalancerInfo":{"shape":"S2e"},"ec2TagSet":{"shape":"S2t"},"ecsServices":{"shape":"S2x"},"onPremisesTagSet":{"shape":"S2v"},"tags":{"shape":"S2"}}},"output":{"type":"structure","members":{"deploymentGroupId":{}}}},"DeleteApplication":{"input":{"type":"structure","required":["applicationName"],"members":{"applicationName":{}}}},"DeleteDeploymentConfig":{"input":{"type":"structure","required":["deploymentConfigName"],"members":{"deploymentConfigName":{}}}},"DeleteDeploymentGroup":{"input":{"type":"structure","required":["applicationName","deploymentGroupName"],"members":{"applicationName":{},"deploymentGroupName":{}}},"output":{"type":"structure","members":{"hooksNotCleanedUp":{"shape":"S1k"}}}},"DeleteGitHubAccountToken":{"input":{"type":"structure","members":{"tokenName":{}}},"output":{"type":"structure","members":{"tokenName":{}}}},"DeleteResourcesByExternalId":{"input":{"type":"structure","members":{"externalId":{}}},"output":{"type":"structure","members":{}}},"DeregisterOnPremisesInstance":{"input":{"type":"structure","required":["instanceName"],"members":{"instanceName":{}}}},"GetApplication":{"input":{"type":"structure","required":["applicationName"],"members":{"applicationName":{}}},"output":{"type":"structure","members":{"application":{"shape":"S13"}}}},"GetApplicationRevision":{"input":{"type":"structure","required":["applicationName","revision"],"members":{"applicationName":{},"revision":{"shape":"Sb"}}},"output":{"type":"structure","members":{"applicationName":{},"revision":{"shape":"Sb"},"revisionInfo":{"shape":"Su"}}}},"GetDeployment":{"input":{"type":"structure","required":["deploymentId"],"members":{"deploymentId":{}}},"output":{"type":"structure","members":{"deploymentInfo":{"shape":"S4c"}}}},"GetDeploymentConfig":{"input":{"type":"structure","required":["deploymentConfigName"],"members":{"deploymentConfigName":{}}},"output":{"type":"structure","members":{"deploymentConfigInfo":{"type":"structure","members":{"deploymentConfigId":{},"deploymentConfigName":{},"minimumHealthyHosts":{"shape":"S54"},"createTime":{"type":"timestamp"},"computePlatform":{},"trafficRoutingConfig":{"shape":"S57"}}}}}},"GetDeploymentGroup":{"input":{"type":"structure","required":["applicationName","deploymentGroupName"],"members":{"applicationName":{},"deploymentGroupName":{}}},"output":{"type":"structure","members":{"deploymentGroupInfo":{"shape":"S1b"}}}},"GetDeploymentInstance":{"input":{"type":"structure","required":["deploymentId","instanceId"],"members":{"deploymentId":{},"instanceId":{}}},"output":{"type":"structure","members":{"instanceSummary":{"shape":"S36"}}},"deprecated":true,"deprecatedMessage":"This operation is deprecated, use GetDeploymentTarget instead."},"GetDeploymentTarget":{"input":{"type":"structure","members":{"deploymentId":{},"targetId":{}}},"output":{"type":"structure","members":{"deploymentTarget":{"shape":"S3n"}}}},"GetOnPremisesInstance":{"input":{"type":"structure","required":["instanceName"],"members":{"instanceName":{}}},"output":{"type":"structure","members":{"instanceInfo":{"shape":"S4t"}}}},"ListApplicationRevisions":{"input":{"type":"structure","required":["applicationName"],"members":{"applicationName":{},"sortBy":{},"sortOrder":{},"s3Bucket":{},"s3KeyPrefix":{},"deployed":{},"nextToken":{}}},"output":{"type":"structure","members":{"revisions":{"shape":"Sa"},"nextToken":{}}}},"ListApplications":{"input":{"type":"structure","members":{"nextToken":{}}},"output":{"type":"structure","members":{"applications":{"shape":"S10"},"nextToken":{}}}},"ListDeploymentConfigs":{"input":{"type":"structure","members":{"nextToken":{}}},"output":{"type":"structure","members":{"deploymentConfigsList":{"type":"list","member":{}},"nextToken":{}}}},"ListDeploymentGroups":{"input":{"type":"structure","required":["applicationName"],"members":{"applicationName":{},"nextToken":{}}},"output":{"type":"structure","members":{"applicationName":{},"deploymentGroups":{"shape":"Sw"},"nextToken":{}}}},"ListDeploymentInstances":{"input":{"type":"structure","required":["deploymentId"],"members":{"deploymentId":{},"nextToken":{},"instanceStatusFilter":{"type":"list","member":{"shape":"S37"}},"instanceTypeFilter":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"instancesList":{"shape":"S32"},"nextToken":{}}},"deprecated":true,"deprecatedMessage":"This operation is deprecated, use ListDeploymentTargets instead."},"ListDeploymentTargets":{"input":{"type":"structure","members":{"deploymentId":{},"nextToken":{},"targetFilters":{"type":"map","key":{},"value":{"type":"list","member":{}}}}},"output":{"type":"structure","members":{"targetIds":{"shape":"S3j"},"nextToken":{}}}},"ListDeployments":{"input":{"type":"structure","members":{"applicationName":{},"deploymentGroupName":{},"externalId":{},"includeOnlyStatuses":{"type":"list","member":{}},"createTimeRange":{"type":"structure","members":{"start":{"type":"timestamp"},"end":{"type":"timestamp"}}},"nextToken":{}}},"output":{"type":"structure","members":{"deployments":{"shape":"S49"},"nextToken":{}}}},"ListGitHubAccountTokenNames":{"input":{"type":"structure","members":{"nextToken":{}}},"output":{"type":"structure","members":{"tokenNameList":{"type":"list","member":{}},"nextToken":{}}}},"ListOnPremisesInstances":{"input":{"type":"structure","members":{"registrationStatus":{},"tagFilters":{"shape":"S1h"},"nextToken":{}}},"output":{"type":"structure","members":{"instanceNames":{"shape":"S6"},"nextToken":{}}}},"ListTagsForResource":{"input":{"type":"structure","required":["ResourceArn"],"members":{"ResourceArn":{},"NextToken":{}}},"output":{"type":"structure","members":{"Tags":{"shape":"S2"},"NextToken":{}}}},"PutLifecycleEventHookExecutionStatus":{"input":{"type":"structure","members":{"deploymentId":{},"lifecycleEventHookExecutionId":{},"status":{}}},"output":{"type":"structure","members":{"lifecycleEventHookExecutionId":{}}}},"RegisterApplicationRevision":{"input":{"type":"structure","required":["applicationName","revision"],"members":{"applicationName":{},"description":{},"revision":{"shape":"Sb"}}}},"RegisterOnPremisesInstance":{"input":{"type":"structure","required":["instanceName"],"members":{"instanceName":{},"iamSessionArn":{},"iamUserArn":{}}}},"RemoveTagsFromOnPremisesInstances":{"input":{"type":"structure","required":["tags","instanceNames"],"members":{"tags":{"shape":"S2"},"instanceNames":{"shape":"S6"}}}},"SkipWaitTimeForInstanceTermination":{"input":{"type":"structure","members":{"deploymentId":{}}},"deprecated":true,"deprecatedMessage":"This operation is deprecated, use ContinueDeployment with DeploymentWaitType instead."},"StopDeployment":{"input":{"type":"structure","required":["deploymentId"],"members":{"deploymentId":{},"autoRollbackEnabled":{"type":"boolean"}}},"output":{"type":"structure","members":{"status":{},"statusMessage":{}}}},"TagResource":{"input":{"type":"structure","required":["ResourceArn","Tags"],"members":{"ResourceArn":{},"Tags":{"shape":"S2"}}},"output":{"type":"structure","members":{}}},"UntagResource":{"input":{"type":"structure","required":["ResourceArn","TagKeys"],"members":{"ResourceArn":{},"TagKeys":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"UpdateApplication":{"input":{"type":"structure","members":{"applicationName":{},"newApplicationName":{}}}},"UpdateDeploymentGroup":{"input":{"type":"structure","required":["applicationName","currentDeploymentGroupName"],"members":{"applicationName":{},"currentDeploymentGroupName":{},"newDeploymentGroupName":{},"deploymentConfigName":{},"ec2TagFilters":{"shape":"S1e"},"onPremisesInstanceTagFilters":{"shape":"S1h"},"autoScalingGroups":{"shape":"S4k"},"serviceRoleArn":{},"triggerConfigurations":{"shape":"S1p"},"alarmConfiguration":{"shape":"S1v"},"autoRollbackConfiguration":{"shape":"S1z"},"outdatedInstancesStrategy":{},"deploymentStyle":{"shape":"S22"},"blueGreenDeploymentConfiguration":{"shape":"S26"},"loadBalancerInfo":{"shape":"S2e"},"ec2TagSet":{"shape":"S2t"},"ecsServices":{"shape":"S2x"},"onPremisesTagSet":{"shape":"S2v"}}},"output":{"type":"structure","members":{"hooksNotCleanedUp":{"shape":"S1k"}}}}},"shapes":{"S2":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{}}}},"S6":{"type":"list","member":{}},"Sa":{"type":"list","member":{"shape":"Sb"}},"Sb":{"type":"structure","members":{"revisionType":{},"s3Location":{"type":"structure","members":{"bucket":{},"key":{},"bundleType":{},"version":{},"eTag":{}}},"gitHubLocation":{"type":"structure","members":{"repository":{},"commitId":{}}},"string":{"type":"structure","members":{"content":{},"sha256":{}},"deprecated":true,"deprecatedMessage":"RawString and String revision type are deprecated, use AppSpecContent type instead."},"appSpecContent":{"type":"structure","members":{"content":{},"sha256":{}}}}},"Su":{"type":"structure","members":{"description":{},"deploymentGroups":{"shape":"Sw"},"firstUsedTime":{"type":"timestamp"},"lastUsedTime":{"type":"timestamp"},"registerTime":{"type":"timestamp"}}},"Sw":{"type":"list","member":{}},"S10":{"type":"list","member":{}},"S13":{"type":"structure","members":{"applicationId":{},"applicationName":{},"createTime":{"type":"timestamp"},"linkedToGitHub":{"type":"boolean"},"gitHubAccountName":{},"computePlatform":{}}},"S1b":{"type":"structure","members":{"applicationName":{},"deploymentGroupId":{},"deploymentGroupName":{},"deploymentConfigName":{},"ec2TagFilters":{"shape":"S1e"},"onPremisesInstanceTagFilters":{"shape":"S1h"},"autoScalingGroups":{"shape":"S1k"},"serviceRoleArn":{},"targetRevision":{"shape":"Sb"},"triggerConfigurations":{"shape":"S1p"},"alarmConfiguration":{"shape":"S1v"},"autoRollbackConfiguration":{"shape":"S1z"},"deploymentStyle":{"shape":"S22"},"outdatedInstancesStrategy":{},"blueGreenDeploymentConfiguration":{"shape":"S26"},"loadBalancerInfo":{"shape":"S2e"},"lastSuccessfulDeployment":{"shape":"S2q"},"lastAttemptedDeployment":{"shape":"S2q"},"ec2TagSet":{"shape":"S2t"},"onPremisesTagSet":{"shape":"S2v"},"computePlatform":{},"ecsServices":{"shape":"S2x"}}},"S1e":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{},"Type":{}}}},"S1h":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{},"Type":{}}}},"S1k":{"type":"list","member":{"type":"structure","members":{"name":{},"hook":{}}}},"S1p":{"type":"list","member":{"type":"structure","members":{"triggerName":{},"triggerTargetArn":{},"triggerEvents":{"type":"list","member":{}}}}},"S1v":{"type":"structure","members":{"enabled":{"type":"boolean"},"ignorePollAlarmFailure":{"type":"boolean"},"alarms":{"type":"list","member":{"type":"structure","members":{"name":{}}}}}},"S1z":{"type":"structure","members":{"enabled":{"type":"boolean"},"events":{"type":"list","member":{}}}},"S22":{"type":"structure","members":{"deploymentType":{},"deploymentOption":{}}},"S26":{"type":"structure","members":{"terminateBlueInstancesOnDeploymentSuccess":{"type":"structure","members":{"action":{},"terminationWaitTimeInMinutes":{"type":"integer"}}},"deploymentReadyOption":{"type":"structure","members":{"actionOnTimeout":{},"waitTimeInMinutes":{"type":"integer"}}},"greenFleetProvisioningOption":{"type":"structure","members":{"action":{}}}}},"S2e":{"type":"structure","members":{"elbInfoList":{"type":"list","member":{"type":"structure","members":{"name":{}}}},"targetGroupInfoList":{"shape":"S2i"},"targetGroupPairInfoList":{"type":"list","member":{"type":"structure","members":{"targetGroups":{"shape":"S2i"},"prodTrafficRoute":{"shape":"S2n"},"testTrafficRoute":{"shape":"S2n"}}}}}},"S2i":{"type":"list","member":{"shape":"S2j"}},"S2j":{"type":"structure","members":{"name":{}}},"S2n":{"type":"structure","members":{"listenerArns":{"type":"list","member":{}}}},"S2q":{"type":"structure","members":{"deploymentId":{},"status":{},"endTime":{"type":"timestamp"},"createTime":{"type":"timestamp"}}},"S2t":{"type":"structure","members":{"ec2TagSetList":{"type":"list","member":{"shape":"S1e"}}}},"S2v":{"type":"structure","members":{"onPremisesTagSetList":{"type":"list","member":{"shape":"S1h"}}}},"S2x":{"type":"list","member":{"type":"structure","members":{"serviceName":{},"clusterName":{}}}},"S32":{"type":"list","member":{}},"S36":{"type":"structure","members":{"deploymentId":{},"instanceId":{},"status":{"shape":"S37"},"lastUpdatedAt":{"type":"timestamp"},"lifecycleEvents":{"shape":"S38"},"instanceType":{}},"deprecated":true,"deprecatedMessage":"InstanceSummary is deprecated, use DeploymentTarget instead."},"S37":{"type":"string","deprecated":true,"deprecatedMessage":"InstanceStatus is deprecated, use TargetStatus instead."},"S38":{"type":"list","member":{"type":"structure","members":{"lifecycleEventName":{},"diagnostics":{"type":"structure","members":{"errorCode":{},"scriptName":{},"message":{},"logTail":{}}},"startTime":{"type":"timestamp"},"endTime":{"type":"timestamp"},"status":{}}}},"S3j":{"type":"list","member":{}},"S3n":{"type":"structure","members":{"deploymentTargetType":{},"instanceTarget":{"type":"structure","members":{"deploymentId":{},"targetId":{},"targetArn":{},"status":{},"lastUpdatedAt":{"type":"timestamp"},"lifecycleEvents":{"shape":"S38"},"instanceLabel":{}}},"lambdaTarget":{"type":"structure","members":{"deploymentId":{},"targetId":{},"targetArn":{},"status":{},"lastUpdatedAt":{"type":"timestamp"},"lifecycleEvents":{"shape":"S38"},"lambdaFunctionInfo":{"type":"structure","members":{"functionName":{},"functionAlias":{},"currentVersion":{},"targetVersion":{},"targetVersionWeight":{"type":"double"}}}}},"ecsTarget":{"type":"structure","members":{"deploymentId":{},"targetId":{},"targetArn":{},"lastUpdatedAt":{"type":"timestamp"},"lifecycleEvents":{"shape":"S38"},"status":{},"taskSetsInfo":{"type":"list","member":{"type":"structure","members":{"identifer":{},"desiredCount":{"type":"long"},"pendingCount":{"type":"long"},"runningCount":{"type":"long"},"status":{},"trafficWeight":{"type":"double"},"targetGroup":{"shape":"S2j"},"taskSetLabel":{}}}}}},"cloudFormationTarget":{"type":"structure","members":{"deploymentId":{},"targetId":{},"lastUpdatedAt":{"type":"timestamp"},"lifecycleEvents":{"shape":"S38"},"status":{},"resourceType":{},"targetVersionWeight":{"type":"double"}}}}},"S49":{"type":"list","member":{}},"S4c":{"type":"structure","members":{"applicationName":{},"deploymentGroupName":{},"deploymentConfigName":{},"deploymentId":{},"previousRevision":{"shape":"Sb"},"revision":{"shape":"Sb"},"status":{},"errorInformation":{"type":"structure","members":{"code":{},"message":{}}},"createTime":{"type":"timestamp"},"startTime":{"type":"timestamp"},"completeTime":{"type":"timestamp"},"deploymentOverview":{"type":"structure","members":{"Pending":{"type":"long"},"InProgress":{"type":"long"},"Succeeded":{"type":"long"},"Failed":{"type":"long"},"Skipped":{"type":"long"},"Ready":{"type":"long"}}},"description":{},"creator":{},"ignoreApplicationStopFailures":{"type":"boolean"},"autoRollbackConfiguration":{"shape":"S1z"},"updateOutdatedInstancesOnly":{"type":"boolean"},"rollbackInfo":{"type":"structure","members":{"rollbackDeploymentId":{},"rollbackTriggeringDeploymentId":{},"rollbackMessage":{}}},"deploymentStyle":{"shape":"S22"},"targetInstances":{"shape":"S4j"},"instanceTerminationWaitTimeStarted":{"type":"boolean"},"blueGreenDeploymentConfiguration":{"shape":"S26"},"loadBalancerInfo":{"shape":"S2e"},"additionalDeploymentStatusInfo":{"type":"string","deprecated":true,"deprecatedMessage":"AdditionalDeploymentStatusInfo is deprecated, use DeploymentStatusMessageList instead."},"fileExistsBehavior":{},"deploymentStatusMessages":{"type":"list","member":{}},"computePlatform":{},"externalId":{},"relatedDeployments":{"type":"structure","members":{"autoUpdateOutdatedInstancesRootDeploymentId":{},"autoUpdateOutdatedInstancesDeploymentIds":{"shape":"S49"}}}}},"S4j":{"type":"structure","members":{"tagFilters":{"shape":"S1e"},"autoScalingGroups":{"shape":"S4k"},"ec2TagSet":{"shape":"S2t"}}},"S4k":{"type":"list","member":{}},"S4t":{"type":"structure","members":{"instanceName":{},"iamSessionArn":{},"iamUserArn":{},"instanceArn":{},"registerTime":{"type":"timestamp"},"deregisterTime":{"type":"timestamp"},"tags":{"shape":"S2"}}},"S54":{"type":"structure","members":{"type":{},"value":{"type":"integer"}}},"S57":{"type":"structure","members":{"type":{},"timeBasedCanary":{"type":"structure","members":{"canaryPercentage":{"type":"integer"},"canaryInterval":{"type":"integer"}}},"timeBasedLinear":{"type":"structure","members":{"linearPercentage":{"type":"integer"},"linearInterval":{"type":"integer"}}}}}}}

/***/ }),
/* 139 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"ListApplicationRevisions":{"input_token":"nextToken","output_token":"nextToken","result_key":"revisions"},"ListApplications":{"input_token":"nextToken","output_token":"nextToken","result_key":"applications"},"ListDeploymentConfigs":{"input_token":"nextToken","output_token":"nextToken","result_key":"deploymentConfigsList"},"ListDeploymentGroups":{"input_token":"nextToken","output_token":"nextToken","result_key":"deploymentGroups"},"ListDeploymentInstances":{"input_token":"nextToken","output_token":"nextToken","result_key":"instancesList"},"ListDeployments":{"input_token":"nextToken","output_token":"nextToken","result_key":"deployments"}}}

/***/ }),
/* 140 */
/***/ (function(module, exports) {

	module.exports = {"version":2,"waiters":{"DeploymentSuccessful":{"delay":15,"operation":"GetDeployment","maxAttempts":120,"acceptors":[{"expected":"Succeeded","matcher":"path","state":"success","argument":"deploymentInfo.status"},{"expected":"Failed","matcher":"path","state":"failure","argument":"deploymentInfo.status"},{"expected":"Stopped","matcher":"path","state":"failure","argument":"deploymentInfo.status"}]}}}

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['codepipeline'] = {};
	AWS.CodePipeline = Service.defineService('codepipeline', ['2015-07-09']);
	Object.defineProperty(apiLoader.services['codepipeline'], '2015-07-09', {
	  get: function get() {
	    var model = __webpack_require__(142);
	    model.paginators = __webpack_require__(143).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.CodePipeline;


/***/ }),
/* 142 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-07-09","endpointPrefix":"codepipeline","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"CodePipeline","serviceFullName":"AWS CodePipeline","serviceId":"CodePipeline","signatureVersion":"v4","targetPrefix":"CodePipeline_20150709","uid":"codepipeline-2015-07-09"},"operations":{"AcknowledgeJob":{"input":{"type":"structure","required":["jobId","nonce"],"members":{"jobId":{},"nonce":{}}},"output":{"type":"structure","members":{"status":{}}}},"AcknowledgeThirdPartyJob":{"input":{"type":"structure","required":["jobId","nonce","clientToken"],"members":{"jobId":{},"nonce":{},"clientToken":{}}},"output":{"type":"structure","members":{"status":{}}}},"CreateCustomActionType":{"input":{"type":"structure","required":["category","provider","version","inputArtifactDetails","outputArtifactDetails"],"members":{"category":{},"provider":{},"version":{},"settings":{"shape":"Se"},"configurationProperties":{"shape":"Sh"},"inputArtifactDetails":{"shape":"Sn"},"outputArtifactDetails":{"shape":"Sn"},"tags":{"shape":"Sq"}}},"output":{"type":"structure","required":["actionType"],"members":{"actionType":{"shape":"Sv"},"tags":{"shape":"Sq"}}}},"CreatePipeline":{"input":{"type":"structure","required":["pipeline"],"members":{"pipeline":{"shape":"Sz"},"tags":{"shape":"Sq"}}},"output":{"type":"structure","members":{"pipeline":{"shape":"Sz"},"tags":{"shape":"Sq"}}}},"DeleteCustomActionType":{"input":{"type":"structure","required":["category","provider","version"],"members":{"category":{},"provider":{},"version":{}}}},"DeletePipeline":{"input":{"type":"structure","required":["name"],"members":{"name":{}}}},"DeleteWebhook":{"input":{"type":"structure","required":["name"],"members":{"name":{}}},"output":{"type":"structure","members":{}}},"DeregisterWebhookWithThirdParty":{"input":{"type":"structure","members":{"webhookName":{}}},"output":{"type":"structure","members":{}}},"DisableStageTransition":{"input":{"type":"structure","required":["pipelineName","stageName","transitionType","reason"],"members":{"pipelineName":{},"stageName":{},"transitionType":{},"reason":{}}}},"EnableStageTransition":{"input":{"type":"structure","required":["pipelineName","stageName","transitionType"],"members":{"pipelineName":{},"stageName":{},"transitionType":{}}}},"GetActionType":{"input":{"type":"structure","required":["category","owner","provider","version"],"members":{"category":{},"owner":{},"provider":{},"version":{}}},"output":{"type":"structure","members":{"actionType":{"shape":"S29"}}}},"GetJobDetails":{"input":{"type":"structure","required":["jobId"],"members":{"jobId":{}}},"output":{"type":"structure","members":{"jobDetails":{"type":"structure","members":{"id":{},"data":{"shape":"S31"},"accountId":{}}}}}},"GetPipeline":{"input":{"type":"structure","required":["name"],"members":{"name":{},"version":{"type":"integer"}}},"output":{"type":"structure","members":{"pipeline":{"shape":"Sz"},"metadata":{"type":"structure","members":{"pipelineArn":{},"created":{"type":"timestamp"},"updated":{"type":"timestamp"}}}}}},"GetPipelineExecution":{"input":{"type":"structure","required":["pipelineName","pipelineExecutionId"],"members":{"pipelineName":{},"pipelineExecutionId":{}}},"output":{"type":"structure","members":{"pipelineExecution":{"type":"structure","members":{"pipelineName":{},"pipelineVersion":{"type":"integer"},"pipelineExecutionId":{},"status":{},"statusSummary":{},"artifactRevisions":{"type":"list","member":{"type":"structure","members":{"name":{},"revisionId":{},"revisionChangeIdentifier":{},"revisionSummary":{},"created":{"type":"timestamp"},"revisionUrl":{}}}}}}}}},"GetPipelineState":{"input":{"type":"structure","required":["name"],"members":{"name":{}}},"output":{"type":"structure","members":{"pipelineName":{},"pipelineVersion":{"type":"integer"},"stageStates":{"type":"list","member":{"type":"structure","members":{"stageName":{},"inboundExecution":{"shape":"S43"},"inboundTransitionState":{"type":"structure","members":{"enabled":{"type":"boolean"},"lastChangedBy":{},"lastChangedAt":{"type":"timestamp"},"disabledReason":{}}},"actionStates":{"type":"list","member":{"type":"structure","members":{"actionName":{},"currentRevision":{"shape":"S4b"},"latestExecution":{"type":"structure","members":{"actionExecutionId":{},"status":{},"summary":{},"lastStatusChange":{"type":"timestamp"},"token":{},"lastUpdatedBy":{},"externalExecutionId":{},"externalExecutionUrl":{},"percentComplete":{"type":"integer"},"errorDetails":{"type":"structure","members":{"code":{},"message":{}}}}},"entityUrl":{},"revisionUrl":{}}}},"latestExecution":{"shape":"S43"}}}},"created":{"type":"timestamp"},"updated":{"type":"timestamp"}}}},"GetThirdPartyJobDetails":{"input":{"type":"structure","required":["jobId","clientToken"],"members":{"jobId":{},"clientToken":{}}},"output":{"type":"structure","members":{"jobDetails":{"type":"structure","members":{"id":{},"data":{"type":"structure","members":{"actionTypeId":{"shape":"Sw"},"actionConfiguration":{"shape":"S32"},"pipelineContext":{"shape":"S33"},"inputArtifacts":{"shape":"S39"},"outputArtifacts":{"shape":"S39"},"artifactCredentials":{"shape":"S3h"},"continuationToken":{},"encryptionKey":{"shape":"S15"}}},"nonce":{}}}}}},"ListActionExecutions":{"input":{"type":"structure","required":["pipelineName"],"members":{"pipelineName":{},"filter":{"type":"structure","members":{"pipelineExecutionId":{}}},"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"actionExecutionDetails":{"type":"list","member":{"type":"structure","members":{"pipelineExecutionId":{},"actionExecutionId":{},"pipelineVersion":{"type":"integer"},"stageName":{},"actionName":{},"startTime":{"type":"timestamp"},"lastUpdateTime":{"type":"timestamp"},"status":{},"input":{"type":"structure","members":{"actionTypeId":{"shape":"Sw"},"configuration":{"shape":"S1l"},"resolvedConfiguration":{"type":"map","key":{},"value":{}},"roleArn":{},"region":{},"inputArtifacts":{"shape":"S50"},"namespace":{}}},"output":{"type":"structure","members":{"outputArtifacts":{"shape":"S50"},"executionResult":{"type":"structure","members":{"externalExecutionId":{},"externalExecutionSummary":{},"externalExecutionUrl":{}}},"outputVariables":{"shape":"S59"}}}}}},"nextToken":{}}}},"ListActionTypes":{"input":{"type":"structure","members":{"actionOwnerFilter":{},"nextToken":{},"regionFilter":{}}},"output":{"type":"structure","required":["actionTypes"],"members":{"actionTypes":{"type":"list","member":{"shape":"Sv"}},"nextToken":{}}}},"ListPipelineExecutions":{"input":{"type":"structure","required":["pipelineName"],"members":{"pipelineName":{},"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"pipelineExecutionSummaries":{"type":"list","member":{"type":"structure","members":{"pipelineExecutionId":{},"status":{},"startTime":{"type":"timestamp"},"lastUpdateTime":{"type":"timestamp"},"sourceRevisions":{"type":"list","member":{"type":"structure","required":["actionName"],"members":{"actionName":{},"revisionId":{},"revisionSummary":{},"revisionUrl":{}}}},"trigger":{"type":"structure","members":{"triggerType":{},"triggerDetail":{}}},"stopTrigger":{"type":"structure","members":{"reason":{}}}}}},"nextToken":{}}}},"ListPipelines":{"input":{"type":"structure","members":{"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"pipelines":{"type":"list","member":{"type":"structure","members":{"name":{},"version":{"type":"integer"},"created":{"type":"timestamp"},"updated":{"type":"timestamp"}}}},"nextToken":{}}}},"ListTagsForResource":{"input":{"type":"structure","required":["resourceArn"],"members":{"resourceArn":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"tags":{"shape":"Sq"},"nextToken":{}}}},"ListWebhooks":{"input":{"type":"structure","members":{"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"webhooks":{"type":"list","member":{"shape":"S61"}},"NextToken":{}}}},"PollForJobs":{"input":{"type":"structure","required":["actionTypeId"],"members":{"actionTypeId":{"shape":"Sw"},"maxBatchSize":{"type":"integer"},"queryParam":{"type":"map","key":{},"value":{}}}},"output":{"type":"structure","members":{"jobs":{"type":"list","member":{"type":"structure","members":{"id":{},"data":{"shape":"S31"},"nonce":{},"accountId":{}}}}}}},"PollForThirdPartyJobs":{"input":{"type":"structure","required":["actionTypeId"],"members":{"actionTypeId":{"shape":"Sw"},"maxBatchSize":{"type":"integer"}}},"output":{"type":"structure","members":{"jobs":{"type":"list","member":{"type":"structure","members":{"clientId":{},"jobId":{}}}}}}},"PutActionRevision":{"input":{"type":"structure","required":["pipelineName","stageName","actionName","actionRevision"],"members":{"pipelineName":{},"stageName":{},"actionName":{},"actionRevision":{"shape":"S4b"}}},"output":{"type":"structure","members":{"newRevision":{"type":"boolean"},"pipelineExecutionId":{}}}},"PutApprovalResult":{"input":{"type":"structure","required":["pipelineName","stageName","actionName","result","token"],"members":{"pipelineName":{},"stageName":{},"actionName":{},"result":{"type":"structure","required":["summary","status"],"members":{"summary":{},"status":{}}},"token":{}}},"output":{"type":"structure","members":{"approvedAt":{"type":"timestamp"}}}},"PutJobFailureResult":{"input":{"type":"structure","required":["jobId","failureDetails"],"members":{"jobId":{},"failureDetails":{"shape":"S71"}}}},"PutJobSuccessResult":{"input":{"type":"structure","required":["jobId"],"members":{"jobId":{},"currentRevision":{"shape":"S74"},"continuationToken":{},"executionDetails":{"shape":"S76"},"outputVariables":{"shape":"S59"}}}},"PutThirdPartyJobFailureResult":{"input":{"type":"structure","required":["jobId","clientToken","failureDetails"],"members":{"jobId":{},"clientToken":{},"failureDetails":{"shape":"S71"}}}},"PutThirdPartyJobSuccessResult":{"input":{"type":"structure","required":["jobId","clientToken"],"members":{"jobId":{},"clientToken":{},"currentRevision":{"shape":"S74"},"continuationToken":{},"executionDetails":{"shape":"S76"}}}},"PutWebhook":{"input":{"type":"structure","required":["webhook"],"members":{"webhook":{"shape":"S62"},"tags":{"shape":"Sq"}}},"output":{"type":"structure","members":{"webhook":{"shape":"S61"}}}},"RegisterWebhookWithThirdParty":{"input":{"type":"structure","members":{"webhookName":{}}},"output":{"type":"structure","members":{}}},"RetryStageExecution":{"input":{"type":"structure","required":["pipelineName","stageName","pipelineExecutionId","retryMode"],"members":{"pipelineName":{},"stageName":{},"pipelineExecutionId":{},"retryMode":{}}},"output":{"type":"structure","members":{"pipelineExecutionId":{}}}},"StartPipelineExecution":{"input":{"type":"structure","required":["name"],"members":{"name":{},"clientRequestToken":{"idempotencyToken":true}}},"output":{"type":"structure","members":{"pipelineExecutionId":{}}}},"StopPipelineExecution":{"input":{"type":"structure","required":["pipelineName","pipelineExecutionId"],"members":{"pipelineName":{},"pipelineExecutionId":{},"abandon":{"type":"boolean"},"reason":{}}},"output":{"type":"structure","members":{"pipelineExecutionId":{}}}},"TagResource":{"input":{"type":"structure","required":["resourceArn","tags"],"members":{"resourceArn":{},"tags":{"shape":"Sq"}}},"output":{"type":"structure","members":{}}},"UntagResource":{"input":{"type":"structure","required":["resourceArn","tagKeys"],"members":{"resourceArn":{},"tagKeys":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"UpdateActionType":{"input":{"type":"structure","required":["actionType"],"members":{"actionType":{"shape":"S29"}}}},"UpdatePipeline":{"input":{"type":"structure","required":["pipeline"],"members":{"pipeline":{"shape":"Sz"}}},"output":{"type":"structure","members":{"pipeline":{"shape":"Sz"}}}}},"shapes":{"Se":{"type":"structure","members":{"thirdPartyConfigurationUrl":{},"entityUrlTemplate":{},"executionUrlTemplate":{},"revisionUrlTemplate":{}}},"Sh":{"type":"list","member":{"type":"structure","required":["name","required","key","secret"],"members":{"name":{},"required":{"type":"boolean"},"key":{"type":"boolean"},"secret":{"type":"boolean"},"queryable":{"type":"boolean"},"description":{},"type":{}}}},"Sn":{"type":"structure","required":["minimumCount","maximumCount"],"members":{"minimumCount":{"type":"integer"},"maximumCount":{"type":"integer"}}},"Sq":{"type":"list","member":{"type":"structure","required":["key","value"],"members":{"key":{},"value":{}}}},"Sv":{"type":"structure","required":["id","inputArtifactDetails","outputArtifactDetails"],"members":{"id":{"shape":"Sw"},"settings":{"shape":"Se"},"actionConfigurationProperties":{"shape":"Sh"},"inputArtifactDetails":{"shape":"Sn"},"outputArtifactDetails":{"shape":"Sn"}}},"Sw":{"type":"structure","required":["category","owner","provider","version"],"members":{"category":{},"owner":{},"provider":{},"version":{}}},"Sz":{"type":"structure","required":["name","roleArn","stages"],"members":{"name":{},"roleArn":{},"artifactStore":{"shape":"S12"},"artifactStores":{"type":"map","key":{},"value":{"shape":"S12"}},"stages":{"type":"list","member":{"type":"structure","required":["name","actions"],"members":{"name":{},"blockers":{"type":"list","member":{"type":"structure","required":["name","type"],"members":{"name":{},"type":{}}}},"actions":{"type":"list","member":{"type":"structure","required":["name","actionTypeId"],"members":{"name":{},"actionTypeId":{"shape":"Sw"},"runOrder":{"type":"integer"},"configuration":{"shape":"S1l"},"outputArtifacts":{"type":"list","member":{"type":"structure","required":["name"],"members":{"name":{}}}},"inputArtifacts":{"type":"list","member":{"type":"structure","required":["name"],"members":{"name":{}}}},"roleArn":{},"region":{},"namespace":{}}}}}}},"version":{"type":"integer"}}},"S12":{"type":"structure","required":["type","location"],"members":{"type":{},"location":{},"encryptionKey":{"shape":"S15"}}},"S15":{"type":"structure","required":["id","type"],"members":{"id":{},"type":{}}},"S1l":{"type":"map","key":{},"value":{}},"S29":{"type":"structure","required":["executor","id","inputArtifactDetails","outputArtifactDetails"],"members":{"description":{},"executor":{"type":"structure","required":["configuration","type"],"members":{"configuration":{"type":"structure","members":{"lambdaExecutorConfiguration":{"type":"structure","required":["lambdaFunctionArn"],"members":{"lambdaFunctionArn":{}}},"jobWorkerExecutorConfiguration":{"type":"structure","members":{"pollingAccounts":{"type":"list","member":{}},"pollingServicePrincipals":{"type":"list","member":{}}}}}},"type":{},"policyStatementsTemplate":{},"jobTimeout":{"type":"integer"}}},"id":{"type":"structure","required":["category","owner","provider","version"],"members":{"category":{},"owner":{},"provider":{},"version":{}}},"inputArtifactDetails":{"shape":"S2o"},"outputArtifactDetails":{"shape":"S2o"},"permissions":{"type":"structure","required":["allowedAccounts"],"members":{"allowedAccounts":{"type":"list","member":{}}}},"properties":{"type":"list","member":{"type":"structure","required":["name","optional","key","noEcho"],"members":{"name":{},"optional":{"type":"boolean"},"key":{"type":"boolean"},"noEcho":{"type":"boolean"},"queryable":{"type":"boolean"},"description":{}}}},"urls":{"type":"structure","members":{"configurationUrl":{},"entityUrlTemplate":{},"executionUrlTemplate":{},"revisionUrlTemplate":{}}}}},"S2o":{"type":"structure","required":["minimumCount","maximumCount"],"members":{"minimumCount":{"type":"integer"},"maximumCount":{"type":"integer"}}},"S31":{"type":"structure","members":{"actionTypeId":{"shape":"Sw"},"actionConfiguration":{"shape":"S32"},"pipelineContext":{"shape":"S33"},"inputArtifacts":{"shape":"S39"},"outputArtifacts":{"shape":"S39"},"artifactCredentials":{"shape":"S3h"},"continuationToken":{},"encryptionKey":{"shape":"S15"}}},"S32":{"type":"structure","members":{"configuration":{"shape":"S1l"}}},"S33":{"type":"structure","members":{"pipelineName":{},"stage":{"type":"structure","members":{"name":{}}},"action":{"type":"structure","members":{"name":{},"actionExecutionId":{}}},"pipelineArn":{},"pipelineExecutionId":{}}},"S39":{"type":"list","member":{"type":"structure","members":{"name":{},"revision":{},"location":{"type":"structure","members":{"type":{},"s3Location":{"type":"structure","required":["bucketName","objectKey"],"members":{"bucketName":{},"objectKey":{}}}}}}}},"S3h":{"type":"structure","required":["accessKeyId","secretAccessKey","sessionToken"],"members":{"accessKeyId":{"type":"string","sensitive":true},"secretAccessKey":{"type":"string","sensitive":true},"sessionToken":{"type":"string","sensitive":true}},"sensitive":true},"S43":{"type":"structure","required":["pipelineExecutionId","status"],"members":{"pipelineExecutionId":{},"status":{}}},"S4b":{"type":"structure","required":["revisionId","revisionChangeId","created"],"members":{"revisionId":{},"revisionChangeId":{},"created":{"type":"timestamp"}}},"S50":{"type":"list","member":{"type":"structure","members":{"name":{},"s3location":{"type":"structure","members":{"bucket":{},"key":{}}}}}},"S59":{"type":"map","key":{},"value":{}},"S61":{"type":"structure","required":["definition","url"],"members":{"definition":{"shape":"S62"},"url":{},"errorMessage":{},"errorCode":{},"lastTriggered":{"type":"timestamp"},"arn":{},"tags":{"shape":"Sq"}}},"S62":{"type":"structure","required":["name","targetPipeline","targetAction","filters","authentication","authenticationConfiguration"],"members":{"name":{},"targetPipeline":{},"targetAction":{},"filters":{"type":"list","member":{"type":"structure","required":["jsonPath"],"members":{"jsonPath":{},"matchEquals":{}}}},"authentication":{},"authenticationConfiguration":{"type":"structure","members":{"AllowedIPRange":{},"SecretToken":{}}}}},"S71":{"type":"structure","required":["type","message"],"members":{"type":{},"message":{},"externalExecutionId":{}}},"S74":{"type":"structure","required":["revision","changeIdentifier"],"members":{"revision":{},"changeIdentifier":{},"created":{"type":"timestamp"},"revisionSummary":{}}},"S76":{"type":"structure","members":{"summary":{},"externalExecutionId":{},"percentComplete":{"type":"integer"}}}}}

/***/ }),
/* 143 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"ListActionExecutions":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults","result_key":"actionExecutionDetails"},"ListActionTypes":{"input_token":"nextToken","output_token":"nextToken","result_key":"actionTypes"},"ListPipelineExecutions":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults","result_key":"pipelineExecutionSummaries"},"ListPipelines":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults","result_key":"pipelines"},"ListTagsForResource":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults","result_key":"tags"},"ListWebhooks":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults","result_key":"webhooks"}}}

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['cognitoidentityserviceprovider'] = {};
	AWS.CognitoIdentityServiceProvider = Service.defineService('cognitoidentityserviceprovider', ['2016-04-18']);
	Object.defineProperty(apiLoader.services['cognitoidentityserviceprovider'], '2016-04-18', {
	  get: function get() {
	    var model = __webpack_require__(145);
	    model.paginators = __webpack_require__(146).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.CognitoIdentityServiceProvider;


/***/ }),
/* 145 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-04-18","endpointPrefix":"cognito-idp","jsonVersion":"1.1","protocol":"json","serviceFullName":"Amazon Cognito Identity Provider","serviceId":"Cognito Identity Provider","signatureVersion":"v4","targetPrefix":"AWSCognitoIdentityProviderService","uid":"cognito-idp-2016-04-18"},"operations":{"AddCustomAttributes":{"input":{"type":"structure","required":["UserPoolId","CustomAttributes"],"members":{"UserPoolId":{},"CustomAttributes":{"type":"list","member":{"shape":"S4"}}}},"output":{"type":"structure","members":{}}},"AdminAddUserToGroup":{"input":{"type":"structure","required":["UserPoolId","Username","GroupName"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"},"GroupName":{}}}},"AdminConfirmSignUp":{"input":{"type":"structure","required":["UserPoolId","Username"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"},"ClientMetadata":{"shape":"Sg"}}},"output":{"type":"structure","members":{}}},"AdminCreateUser":{"input":{"type":"structure","required":["UserPoolId","Username"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"},"UserAttributes":{"shape":"Sj"},"ValidationData":{"shape":"Sj"},"TemporaryPassword":{"shape":"Sn"},"ForceAliasCreation":{"type":"boolean"},"MessageAction":{},"DesiredDeliveryMediums":{"type":"list","member":{}},"ClientMetadata":{"shape":"Sg"}}},"output":{"type":"structure","members":{"User":{"shape":"St"}}}},"AdminDeleteUser":{"input":{"type":"structure","required":["UserPoolId","Username"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"}}}},"AdminDeleteUserAttributes":{"input":{"type":"structure","required":["UserPoolId","Username","UserAttributeNames"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"},"UserAttributeNames":{"shape":"S10"}}},"output":{"type":"structure","members":{}}},"AdminDisableProviderForUser":{"input":{"type":"structure","required":["UserPoolId","User"],"members":{"UserPoolId":{},"User":{"shape":"S13"}}},"output":{"type":"structure","members":{}}},"AdminDisableUser":{"input":{"type":"structure","required":["UserPoolId","Username"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"}}},"output":{"type":"structure","members":{}}},"AdminEnableUser":{"input":{"type":"structure","required":["UserPoolId","Username"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"}}},"output":{"type":"structure","members":{}}},"AdminForgetDevice":{"input":{"type":"structure","required":["UserPoolId","Username","DeviceKey"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"},"DeviceKey":{}}}},"AdminGetDevice":{"input":{"type":"structure","required":["DeviceKey","UserPoolId","Username"],"members":{"DeviceKey":{},"UserPoolId":{},"Username":{"shape":"Sd"}}},"output":{"type":"structure","required":["Device"],"members":{"Device":{"shape":"S1e"}}}},"AdminGetUser":{"input":{"type":"structure","required":["UserPoolId","Username"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"}}},"output":{"type":"structure","required":["Username"],"members":{"Username":{"shape":"Sd"},"UserAttributes":{"shape":"Sj"},"UserCreateDate":{"type":"timestamp"},"UserLastModifiedDate":{"type":"timestamp"},"Enabled":{"type":"boolean"},"UserStatus":{},"MFAOptions":{"shape":"Sw"},"PreferredMfaSetting":{},"UserMFASettingList":{"shape":"S1h"}}}},"AdminInitiateAuth":{"input":{"type":"structure","required":["UserPoolId","ClientId","AuthFlow"],"members":{"UserPoolId":{},"ClientId":{"shape":"S1j"},"AuthFlow":{},"AuthParameters":{"shape":"S1l"},"ClientMetadata":{"shape":"Sg"},"AnalyticsMetadata":{"shape":"S1m"},"ContextData":{"shape":"S1n"}}},"output":{"type":"structure","members":{"ChallengeName":{},"Session":{},"ChallengeParameters":{"shape":"S1t"},"AuthenticationResult":{"shape":"S1u"}}}},"AdminLinkProviderForUser":{"input":{"type":"structure","required":["UserPoolId","DestinationUser","SourceUser"],"members":{"UserPoolId":{},"DestinationUser":{"shape":"S13"},"SourceUser":{"shape":"S13"}}},"output":{"type":"structure","members":{}}},"AdminListDevices":{"input":{"type":"structure","required":["UserPoolId","Username"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"},"Limit":{"type":"integer"},"PaginationToken":{}}},"output":{"type":"structure","members":{"Devices":{"shape":"S24"},"PaginationToken":{}}}},"AdminListGroupsForUser":{"input":{"type":"structure","required":["Username","UserPoolId"],"members":{"Username":{"shape":"Sd"},"UserPoolId":{},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Groups":{"shape":"S28"},"NextToken":{}}}},"AdminListUserAuthEvents":{"input":{"type":"structure","required":["UserPoolId","Username"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"AuthEvents":{"type":"list","member":{"type":"structure","members":{"EventId":{},"EventType":{},"CreationDate":{"type":"timestamp"},"EventResponse":{},"EventRisk":{"type":"structure","members":{"RiskDecision":{},"RiskLevel":{},"CompromisedCredentialsDetected":{"type":"boolean"}}},"ChallengeResponses":{"type":"list","member":{"type":"structure","members":{"ChallengeName":{},"ChallengeResponse":{}}}},"EventContextData":{"type":"structure","members":{"IpAddress":{},"DeviceName":{},"Timezone":{},"City":{},"Country":{}}},"EventFeedback":{"type":"structure","required":["FeedbackValue","Provider"],"members":{"FeedbackValue":{},"Provider":{},"FeedbackDate":{"type":"timestamp"}}}}}},"NextToken":{}}}},"AdminRemoveUserFromGroup":{"input":{"type":"structure","required":["UserPoolId","Username","GroupName"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"},"GroupName":{}}}},"AdminResetUserPassword":{"input":{"type":"structure","required":["UserPoolId","Username"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"},"ClientMetadata":{"shape":"Sg"}}},"output":{"type":"structure","members":{}}},"AdminRespondToAuthChallenge":{"input":{"type":"structure","required":["UserPoolId","ClientId","ChallengeName"],"members":{"UserPoolId":{},"ClientId":{"shape":"S1j"},"ChallengeName":{},"ChallengeResponses":{"shape":"S2y"},"Session":{},"AnalyticsMetadata":{"shape":"S1m"},"ContextData":{"shape":"S1n"},"ClientMetadata":{"shape":"Sg"}}},"output":{"type":"structure","members":{"ChallengeName":{},"Session":{},"ChallengeParameters":{"shape":"S1t"},"AuthenticationResult":{"shape":"S1u"}}}},"AdminSetUserMFAPreference":{"input":{"type":"structure","required":["Username","UserPoolId"],"members":{"SMSMfaSettings":{"shape":"S31"},"SoftwareTokenMfaSettings":{"shape":"S32"},"Username":{"shape":"Sd"},"UserPoolId":{}}},"output":{"type":"structure","members":{}}},"AdminSetUserPassword":{"input":{"type":"structure","required":["UserPoolId","Username","Password"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"},"Password":{"shape":"Sn"},"Permanent":{"type":"boolean"}}},"output":{"type":"structure","members":{}}},"AdminSetUserSettings":{"input":{"type":"structure","required":["UserPoolId","Username","MFAOptions"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"},"MFAOptions":{"shape":"Sw"}}},"output":{"type":"structure","members":{}}},"AdminUpdateAuthEventFeedback":{"input":{"type":"structure","required":["UserPoolId","Username","EventId","FeedbackValue"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"},"EventId":{},"FeedbackValue":{}}},"output":{"type":"structure","members":{}}},"AdminUpdateDeviceStatus":{"input":{"type":"structure","required":["UserPoolId","Username","DeviceKey"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"},"DeviceKey":{},"DeviceRememberedStatus":{}}},"output":{"type":"structure","members":{}}},"AdminUpdateUserAttributes":{"input":{"type":"structure","required":["UserPoolId","Username","UserAttributes"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"},"UserAttributes":{"shape":"Sj"},"ClientMetadata":{"shape":"Sg"}}},"output":{"type":"structure","members":{}}},"AdminUserGlobalSignOut":{"input":{"type":"structure","required":["UserPoolId","Username"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"}}},"output":{"type":"structure","members":{}}},"AssociateSoftwareToken":{"input":{"type":"structure","members":{"AccessToken":{"shape":"S1v"},"Session":{}}},"output":{"type":"structure","members":{"SecretCode":{"type":"string","sensitive":true},"Session":{}}}},"ChangePassword":{"input":{"type":"structure","required":["PreviousPassword","ProposedPassword","AccessToken"],"members":{"PreviousPassword":{"shape":"Sn"},"ProposedPassword":{"shape":"Sn"},"AccessToken":{"shape":"S1v"}}},"output":{"type":"structure","members":{}},"authtype":"none"},"ConfirmDevice":{"input":{"type":"structure","required":["AccessToken","DeviceKey"],"members":{"AccessToken":{"shape":"S1v"},"DeviceKey":{},"DeviceSecretVerifierConfig":{"type":"structure","members":{"PasswordVerifier":{},"Salt":{}}},"DeviceName":{}}},"output":{"type":"structure","members":{"UserConfirmationNecessary":{"type":"boolean"}}}},"ConfirmForgotPassword":{"input":{"type":"structure","required":["ClientId","Username","ConfirmationCode","Password"],"members":{"ClientId":{"shape":"S1j"},"SecretHash":{"shape":"S3s"},"Username":{"shape":"Sd"},"ConfirmationCode":{},"Password":{"shape":"Sn"},"AnalyticsMetadata":{"shape":"S1m"},"UserContextData":{"shape":"S3u"},"ClientMetadata":{"shape":"Sg"}}},"output":{"type":"structure","members":{}},"authtype":"none"},"ConfirmSignUp":{"input":{"type":"structure","required":["ClientId","Username","ConfirmationCode"],"members":{"ClientId":{"shape":"S1j"},"SecretHash":{"shape":"S3s"},"Username":{"shape":"Sd"},"ConfirmationCode":{},"ForceAliasCreation":{"type":"boolean"},"AnalyticsMetadata":{"shape":"S1m"},"UserContextData":{"shape":"S3u"},"ClientMetadata":{"shape":"Sg"}}},"output":{"type":"structure","members":{}},"authtype":"none"},"CreateGroup":{"input":{"type":"structure","required":["GroupName","UserPoolId"],"members":{"GroupName":{},"UserPoolId":{},"Description":{},"RoleArn":{},"Precedence":{"type":"integer"}}},"output":{"type":"structure","members":{"Group":{"shape":"S29"}}}},"CreateIdentityProvider":{"input":{"type":"structure","required":["UserPoolId","ProviderName","ProviderType","ProviderDetails"],"members":{"UserPoolId":{},"ProviderName":{},"ProviderType":{},"ProviderDetails":{"shape":"S43"},"AttributeMapping":{"shape":"S44"},"IdpIdentifiers":{"shape":"S46"}}},"output":{"type":"structure","required":["IdentityProvider"],"members":{"IdentityProvider":{"shape":"S49"}}}},"CreateResourceServer":{"input":{"type":"structure","required":["UserPoolId","Identifier","Name"],"members":{"UserPoolId":{},"Identifier":{},"Name":{},"Scopes":{"shape":"S4d"}}},"output":{"type":"structure","required":["ResourceServer"],"members":{"ResourceServer":{"shape":"S4i"}}}},"CreateUserImportJob":{"input":{"type":"structure","required":["JobName","UserPoolId","CloudWatchLogsRoleArn"],"members":{"JobName":{},"UserPoolId":{},"CloudWatchLogsRoleArn":{}}},"output":{"type":"structure","members":{"UserImportJob":{"shape":"S4m"}}}},"CreateUserPool":{"input":{"type":"structure","required":["PoolName"],"members":{"PoolName":{},"Policies":{"shape":"S4u"},"LambdaConfig":{"shape":"S4y"},"AutoVerifiedAttributes":{"shape":"S53"},"AliasAttributes":{"shape":"S55"},"UsernameAttributes":{"shape":"S57"},"SmsVerificationMessage":{},"EmailVerificationMessage":{},"EmailVerificationSubject":{},"VerificationMessageTemplate":{"shape":"S5c"},"SmsAuthenticationMessage":{},"MfaConfiguration":{},"DeviceConfiguration":{"shape":"S5h"},"EmailConfiguration":{"shape":"S5i"},"SmsConfiguration":{"shape":"S5m"},"UserPoolTags":{"shape":"S5n"},"AdminCreateUserConfig":{"shape":"S5q"},"Schema":{"shape":"S5t"},"UserPoolAddOns":{"shape":"S5u"},"UsernameConfiguration":{"shape":"S5w"},"AccountRecoverySetting":{"shape":"S5x"}}},"output":{"type":"structure","members":{"UserPool":{"shape":"S63"}}}},"CreateUserPoolClient":{"input":{"type":"structure","required":["UserPoolId","ClientName"],"members":{"UserPoolId":{},"ClientName":{},"GenerateSecret":{"type":"boolean"},"RefreshTokenValidity":{"type":"integer"},"AccessTokenValidity":{"type":"integer"},"IdTokenValidity":{"type":"integer"},"TokenValidityUnits":{"shape":"S6c"},"ReadAttributes":{"shape":"S6e"},"WriteAttributes":{"shape":"S6e"},"ExplicitAuthFlows":{"shape":"S6g"},"SupportedIdentityProviders":{"shape":"S6i"},"CallbackURLs":{"shape":"S6j"},"LogoutURLs":{"shape":"S6l"},"DefaultRedirectURI":{},"AllowedOAuthFlows":{"shape":"S6m"},"AllowedOAuthScopes":{"shape":"S6o"},"AllowedOAuthFlowsUserPoolClient":{"type":"boolean"},"AnalyticsConfiguration":{"shape":"S6q"},"PreventUserExistenceErrors":{},"EnableTokenRevocation":{"type":"boolean"}}},"output":{"type":"structure","members":{"UserPoolClient":{"shape":"S6u"}}}},"CreateUserPoolDomain":{"input":{"type":"structure","required":["Domain","UserPoolId"],"members":{"Domain":{},"UserPoolId":{},"CustomDomainConfig":{"shape":"S6x"}}},"output":{"type":"structure","members":{"CloudFrontDomain":{}}}},"DeleteGroup":{"input":{"type":"structure","required":["GroupName","UserPoolId"],"members":{"GroupName":{},"UserPoolId":{}}}},"DeleteIdentityProvider":{"input":{"type":"structure","required":["UserPoolId","ProviderName"],"members":{"UserPoolId":{},"ProviderName":{}}}},"DeleteResourceServer":{"input":{"type":"structure","required":["UserPoolId","Identifier"],"members":{"UserPoolId":{},"Identifier":{}}}},"DeleteUser":{"input":{"type":"structure","required":["AccessToken"],"members":{"AccessToken":{"shape":"S1v"}}},"authtype":"none"},"DeleteUserAttributes":{"input":{"type":"structure","required":["UserAttributeNames","AccessToken"],"members":{"UserAttributeNames":{"shape":"S10"},"AccessToken":{"shape":"S1v"}}},"output":{"type":"structure","members":{}},"authtype":"none"},"DeleteUserPool":{"input":{"type":"structure","required":["UserPoolId"],"members":{"UserPoolId":{}}}},"DeleteUserPoolClient":{"input":{"type":"structure","required":["UserPoolId","ClientId"],"members":{"UserPoolId":{},"ClientId":{"shape":"S1j"}}}},"DeleteUserPoolDomain":{"input":{"type":"structure","required":["Domain","UserPoolId"],"members":{"Domain":{},"UserPoolId":{}}},"output":{"type":"structure","members":{}}},"DescribeIdentityProvider":{"input":{"type":"structure","required":["UserPoolId","ProviderName"],"members":{"UserPoolId":{},"ProviderName":{}}},"output":{"type":"structure","required":["IdentityProvider"],"members":{"IdentityProvider":{"shape":"S49"}}}},"DescribeResourceServer":{"input":{"type":"structure","required":["UserPoolId","Identifier"],"members":{"UserPoolId":{},"Identifier":{}}},"output":{"type":"structure","required":["ResourceServer"],"members":{"ResourceServer":{"shape":"S4i"}}}},"DescribeRiskConfiguration":{"input":{"type":"structure","required":["UserPoolId"],"members":{"UserPoolId":{},"ClientId":{"shape":"S1j"}}},"output":{"type":"structure","required":["RiskConfiguration"],"members":{"RiskConfiguration":{"shape":"S7f"}}}},"DescribeUserImportJob":{"input":{"type":"structure","required":["UserPoolId","JobId"],"members":{"UserPoolId":{},"JobId":{}}},"output":{"type":"structure","members":{"UserImportJob":{"shape":"S4m"}}}},"DescribeUserPool":{"input":{"type":"structure","required":["UserPoolId"],"members":{"UserPoolId":{}}},"output":{"type":"structure","members":{"UserPool":{"shape":"S63"}}}},"DescribeUserPoolClient":{"input":{"type":"structure","required":["UserPoolId","ClientId"],"members":{"UserPoolId":{},"ClientId":{"shape":"S1j"}}},"output":{"type":"structure","members":{"UserPoolClient":{"shape":"S6u"}}}},"DescribeUserPoolDomain":{"input":{"type":"structure","required":["Domain"],"members":{"Domain":{}}},"output":{"type":"structure","members":{"DomainDescription":{"type":"structure","members":{"UserPoolId":{},"AWSAccountId":{},"Domain":{},"S3Bucket":{},"CloudFrontDistribution":{},"Version":{},"Status":{},"CustomDomainConfig":{"shape":"S6x"}}}}}},"ForgetDevice":{"input":{"type":"structure","required":["DeviceKey"],"members":{"AccessToken":{"shape":"S1v"},"DeviceKey":{}}}},"ForgotPassword":{"input":{"type":"structure","required":["ClientId","Username"],"members":{"ClientId":{"shape":"S1j"},"SecretHash":{"shape":"S3s"},"UserContextData":{"shape":"S3u"},"Username":{"shape":"Sd"},"AnalyticsMetadata":{"shape":"S1m"},"ClientMetadata":{"shape":"Sg"}}},"output":{"type":"structure","members":{"CodeDeliveryDetails":{"shape":"S8d"}}},"authtype":"none"},"GetCSVHeader":{"input":{"type":"structure","required":["UserPoolId"],"members":{"UserPoolId":{}}},"output":{"type":"structure","members":{"UserPoolId":{},"CSVHeader":{"type":"list","member":{}}}}},"GetDevice":{"input":{"type":"structure","required":["DeviceKey"],"members":{"DeviceKey":{},"AccessToken":{"shape":"S1v"}}},"output":{"type":"structure","required":["Device"],"members":{"Device":{"shape":"S1e"}}}},"GetGroup":{"input":{"type":"structure","required":["GroupName","UserPoolId"],"members":{"GroupName":{},"UserPoolId":{}}},"output":{"type":"structure","members":{"Group":{"shape":"S29"}}}},"GetIdentityProviderByIdentifier":{"input":{"type":"structure","required":["UserPoolId","IdpIdentifier"],"members":{"UserPoolId":{},"IdpIdentifier":{}}},"output":{"type":"structure","required":["IdentityProvider"],"members":{"IdentityProvider":{"shape":"S49"}}}},"GetSigningCertificate":{"input":{"type":"structure","required":["UserPoolId"],"members":{"UserPoolId":{}}},"output":{"type":"structure","members":{"Certificate":{}}}},"GetUICustomization":{"input":{"type":"structure","required":["UserPoolId"],"members":{"UserPoolId":{},"ClientId":{"shape":"S1j"}}},"output":{"type":"structure","required":["UICustomization"],"members":{"UICustomization":{"shape":"S8r"}}}},"GetUser":{"input":{"type":"structure","required":["AccessToken"],"members":{"AccessToken":{"shape":"S1v"}}},"output":{"type":"structure","required":["Username","UserAttributes"],"members":{"Username":{"shape":"Sd"},"UserAttributes":{"shape":"Sj"},"MFAOptions":{"shape":"Sw"},"PreferredMfaSetting":{},"UserMFASettingList":{"shape":"S1h"}}},"authtype":"none"},"GetUserAttributeVerificationCode":{"input":{"type":"structure","required":["AccessToken","AttributeName"],"members":{"AccessToken":{"shape":"S1v"},"AttributeName":{},"ClientMetadata":{"shape":"Sg"}}},"output":{"type":"structure","members":{"CodeDeliveryDetails":{"shape":"S8d"}}},"authtype":"none"},"GetUserPoolMfaConfig":{"input":{"type":"structure","required":["UserPoolId"],"members":{"UserPoolId":{}}},"output":{"type":"structure","members":{"SmsMfaConfiguration":{"shape":"S91"},"SoftwareTokenMfaConfiguration":{"shape":"S92"},"MfaConfiguration":{}}}},"GlobalSignOut":{"input":{"type":"structure","required":["AccessToken"],"members":{"AccessToken":{"shape":"S1v"}}},"output":{"type":"structure","members":{}}},"InitiateAuth":{"input":{"type":"structure","required":["AuthFlow","ClientId"],"members":{"AuthFlow":{},"AuthParameters":{"shape":"S1l"},"ClientMetadata":{"shape":"Sg"},"ClientId":{"shape":"S1j"},"AnalyticsMetadata":{"shape":"S1m"},"UserContextData":{"shape":"S3u"}}},"output":{"type":"structure","members":{"ChallengeName":{},"Session":{},"ChallengeParameters":{"shape":"S1t"},"AuthenticationResult":{"shape":"S1u"}}},"authtype":"none"},"ListDevices":{"input":{"type":"structure","required":["AccessToken"],"members":{"AccessToken":{"shape":"S1v"},"Limit":{"type":"integer"},"PaginationToken":{}}},"output":{"type":"structure","members":{"Devices":{"shape":"S24"},"PaginationToken":{}}}},"ListGroups":{"input":{"type":"structure","required":["UserPoolId"],"members":{"UserPoolId":{},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Groups":{"shape":"S28"},"NextToken":{}}}},"ListIdentityProviders":{"input":{"type":"structure","required":["UserPoolId"],"members":{"UserPoolId":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","required":["Providers"],"members":{"Providers":{"type":"list","member":{"type":"structure","members":{"ProviderName":{},"ProviderType":{},"LastModifiedDate":{"type":"timestamp"},"CreationDate":{"type":"timestamp"}}}},"NextToken":{}}}},"ListResourceServers":{"input":{"type":"structure","required":["UserPoolId"],"members":{"UserPoolId":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","required":["ResourceServers"],"members":{"ResourceServers":{"type":"list","member":{"shape":"S4i"}},"NextToken":{}}}},"ListTagsForResource":{"input":{"type":"structure","required":["ResourceArn"],"members":{"ResourceArn":{}}},"output":{"type":"structure","members":{"Tags":{"shape":"S5n"}}}},"ListUserImportJobs":{"input":{"type":"structure","required":["UserPoolId","MaxResults"],"members":{"UserPoolId":{},"MaxResults":{"type":"integer"},"PaginationToken":{}}},"output":{"type":"structure","members":{"UserImportJobs":{"type":"list","member":{"shape":"S4m"}},"PaginationToken":{}}}},"ListUserPoolClients":{"input":{"type":"structure","required":["UserPoolId"],"members":{"UserPoolId":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"UserPoolClients":{"type":"list","member":{"type":"structure","members":{"ClientId":{"shape":"S1j"},"UserPoolId":{},"ClientName":{}}}},"NextToken":{}}}},"ListUserPools":{"input":{"type":"structure","required":["MaxResults"],"members":{"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"UserPools":{"type":"list","member":{"type":"structure","members":{"Id":{},"Name":{},"LambdaConfig":{"shape":"S4y"},"Status":{},"LastModifiedDate":{"type":"timestamp"},"CreationDate":{"type":"timestamp"}}}},"NextToken":{}}}},"ListUsers":{"input":{"type":"structure","required":["UserPoolId"],"members":{"UserPoolId":{},"AttributesToGet":{"type":"list","member":{}},"Limit":{"type":"integer"},"PaginationToken":{},"Filter":{}}},"output":{"type":"structure","members":{"Users":{"shape":"Sa4"},"PaginationToken":{}}}},"ListUsersInGroup":{"input":{"type":"structure","required":["UserPoolId","GroupName"],"members":{"UserPoolId":{},"GroupName":{},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Users":{"shape":"Sa4"},"NextToken":{}}}},"ResendConfirmationCode":{"input":{"type":"structure","required":["ClientId","Username"],"members":{"ClientId":{"shape":"S1j"},"SecretHash":{"shape":"S3s"},"UserContextData":{"shape":"S3u"},"Username":{"shape":"Sd"},"AnalyticsMetadata":{"shape":"S1m"},"ClientMetadata":{"shape":"Sg"}}},"output":{"type":"structure","members":{"CodeDeliveryDetails":{"shape":"S8d"}}},"authtype":"none"},"RespondToAuthChallenge":{"input":{"type":"structure","required":["ClientId","ChallengeName"],"members":{"ClientId":{"shape":"S1j"},"ChallengeName":{},"Session":{},"ChallengeResponses":{"shape":"S2y"},"AnalyticsMetadata":{"shape":"S1m"},"UserContextData":{"shape":"S3u"},"ClientMetadata":{"shape":"Sg"}}},"output":{"type":"structure","members":{"ChallengeName":{},"Session":{},"ChallengeParameters":{"shape":"S1t"},"AuthenticationResult":{"shape":"S1u"}}},"authtype":"none"},"RevokeToken":{"input":{"type":"structure","required":["Token","ClientId"],"members":{"Token":{"shape":"S1v"},"ClientId":{"shape":"S1j"},"ClientSecret":{"shape":"S6v"}}},"output":{"type":"structure","members":{}}},"SetRiskConfiguration":{"input":{"type":"structure","required":["UserPoolId"],"members":{"UserPoolId":{},"ClientId":{"shape":"S1j"},"CompromisedCredentialsRiskConfiguration":{"shape":"S7g"},"AccountTakeoverRiskConfiguration":{"shape":"S7l"},"RiskExceptionConfiguration":{"shape":"S7u"}}},"output":{"type":"structure","required":["RiskConfiguration"],"members":{"RiskConfiguration":{"shape":"S7f"}}}},"SetUICustomization":{"input":{"type":"structure","required":["UserPoolId"],"members":{"UserPoolId":{},"ClientId":{"shape":"S1j"},"CSS":{},"ImageFile":{"type":"blob"}}},"output":{"type":"structure","required":["UICustomization"],"members":{"UICustomization":{"shape":"S8r"}}}},"SetUserMFAPreference":{"input":{"type":"structure","required":["AccessToken"],"members":{"SMSMfaSettings":{"shape":"S31"},"SoftwareTokenMfaSettings":{"shape":"S32"},"AccessToken":{"shape":"S1v"}}},"output":{"type":"structure","members":{}}},"SetUserPoolMfaConfig":{"input":{"type":"structure","required":["UserPoolId"],"members":{"UserPoolId":{},"SmsMfaConfiguration":{"shape":"S91"},"SoftwareTokenMfaConfiguration":{"shape":"S92"},"MfaConfiguration":{}}},"output":{"type":"structure","members":{"SmsMfaConfiguration":{"shape":"S91"},"SoftwareTokenMfaConfiguration":{"shape":"S92"},"MfaConfiguration":{}}}},"SetUserSettings":{"input":{"type":"structure","required":["AccessToken","MFAOptions"],"members":{"AccessToken":{"shape":"S1v"},"MFAOptions":{"shape":"Sw"}}},"output":{"type":"structure","members":{}},"authtype":"none"},"SignUp":{"input":{"type":"structure","required":["ClientId","Username","Password"],"members":{"ClientId":{"shape":"S1j"},"SecretHash":{"shape":"S3s"},"Username":{"shape":"Sd"},"Password":{"shape":"Sn"},"UserAttributes":{"shape":"Sj"},"ValidationData":{"shape":"Sj"},"AnalyticsMetadata":{"shape":"S1m"},"UserContextData":{"shape":"S3u"},"ClientMetadata":{"shape":"Sg"}}},"output":{"type":"structure","required":["UserConfirmed","UserSub"],"members":{"UserConfirmed":{"type":"boolean"},"CodeDeliveryDetails":{"shape":"S8d"},"UserSub":{}}},"authtype":"none"},"StartUserImportJob":{"input":{"type":"structure","required":["UserPoolId","JobId"],"members":{"UserPoolId":{},"JobId":{}}},"output":{"type":"structure","members":{"UserImportJob":{"shape":"S4m"}}}},"StopUserImportJob":{"input":{"type":"structure","required":["UserPoolId","JobId"],"members":{"UserPoolId":{},"JobId":{}}},"output":{"type":"structure","members":{"UserImportJob":{"shape":"S4m"}}}},"TagResource":{"input":{"type":"structure","required":["ResourceArn","Tags"],"members":{"ResourceArn":{},"Tags":{"shape":"S5n"}}},"output":{"type":"structure","members":{}}},"UntagResource":{"input":{"type":"structure","required":["ResourceArn","TagKeys"],"members":{"ResourceArn":{},"TagKeys":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"UpdateAuthEventFeedback":{"input":{"type":"structure","required":["UserPoolId","Username","EventId","FeedbackToken","FeedbackValue"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"},"EventId":{},"FeedbackToken":{"shape":"S1v"},"FeedbackValue":{}}},"output":{"type":"structure","members":{}}},"UpdateDeviceStatus":{"input":{"type":"structure","required":["AccessToken","DeviceKey"],"members":{"AccessToken":{"shape":"S1v"},"DeviceKey":{},"DeviceRememberedStatus":{}}},"output":{"type":"structure","members":{}}},"UpdateGroup":{"input":{"type":"structure","required":["GroupName","UserPoolId"],"members":{"GroupName":{},"UserPoolId":{},"Description":{},"RoleArn":{},"Precedence":{"type":"integer"}}},"output":{"type":"structure","members":{"Group":{"shape":"S29"}}}},"UpdateIdentityProvider":{"input":{"type":"structure","required":["UserPoolId","ProviderName"],"members":{"UserPoolId":{},"ProviderName":{},"ProviderDetails":{"shape":"S43"},"AttributeMapping":{"shape":"S44"},"IdpIdentifiers":{"shape":"S46"}}},"output":{"type":"structure","required":["IdentityProvider"],"members":{"IdentityProvider":{"shape":"S49"}}}},"UpdateResourceServer":{"input":{"type":"structure","required":["UserPoolId","Identifier","Name"],"members":{"UserPoolId":{},"Identifier":{},"Name":{},"Scopes":{"shape":"S4d"}}},"output":{"type":"structure","required":["ResourceServer"],"members":{"ResourceServer":{"shape":"S4i"}}}},"UpdateUserAttributes":{"input":{"type":"structure","required":["UserAttributes","AccessToken"],"members":{"UserAttributes":{"shape":"Sj"},"AccessToken":{"shape":"S1v"},"ClientMetadata":{"shape":"Sg"}}},"output":{"type":"structure","members":{"CodeDeliveryDetailsList":{"type":"list","member":{"shape":"S8d"}}}},"authtype":"none"},"UpdateUserPool":{"input":{"type":"structure","required":["UserPoolId"],"members":{"UserPoolId":{},"Policies":{"shape":"S4u"},"LambdaConfig":{"shape":"S4y"},"AutoVerifiedAttributes":{"shape":"S53"},"SmsVerificationMessage":{},"EmailVerificationMessage":{},"EmailVerificationSubject":{},"VerificationMessageTemplate":{"shape":"S5c"},"SmsAuthenticationMessage":{},"MfaConfiguration":{},"DeviceConfiguration":{"shape":"S5h"},"EmailConfiguration":{"shape":"S5i"},"SmsConfiguration":{"shape":"S5m"},"UserPoolTags":{"shape":"S5n"},"AdminCreateUserConfig":{"shape":"S5q"},"UserPoolAddOns":{"shape":"S5u"},"AccountRecoverySetting":{"shape":"S5x"}}},"output":{"type":"structure","members":{}}},"UpdateUserPoolClient":{"input":{"type":"structure","required":["UserPoolId","ClientId"],"members":{"UserPoolId":{},"ClientId":{"shape":"S1j"},"ClientName":{},"RefreshTokenValidity":{"type":"integer"},"AccessTokenValidity":{"type":"integer"},"IdTokenValidity":{"type":"integer"},"TokenValidityUnits":{"shape":"S6c"},"ReadAttributes":{"shape":"S6e"},"WriteAttributes":{"shape":"S6e"},"ExplicitAuthFlows":{"shape":"S6g"},"SupportedIdentityProviders":{"shape":"S6i"},"CallbackURLs":{"shape":"S6j"},"LogoutURLs":{"shape":"S6l"},"DefaultRedirectURI":{},"AllowedOAuthFlows":{"shape":"S6m"},"AllowedOAuthScopes":{"shape":"S6o"},"AllowedOAuthFlowsUserPoolClient":{"type":"boolean"},"AnalyticsConfiguration":{"shape":"S6q"},"PreventUserExistenceErrors":{},"EnableTokenRevocation":{"type":"boolean"}}},"output":{"type":"structure","members":{"UserPoolClient":{"shape":"S6u"}}}},"UpdateUserPoolDomain":{"input":{"type":"structure","required":["Domain","UserPoolId","CustomDomainConfig"],"members":{"Domain":{},"UserPoolId":{},"CustomDomainConfig":{"shape":"S6x"}}},"output":{"type":"structure","members":{"CloudFrontDomain":{}}}},"VerifySoftwareToken":{"input":{"type":"structure","required":["UserCode"],"members":{"AccessToken":{"shape":"S1v"},"Session":{},"UserCode":{},"FriendlyDeviceName":{}}},"output":{"type":"structure","members":{"Status":{},"Session":{}}}},"VerifyUserAttribute":{"input":{"type":"structure","required":["AccessToken","AttributeName","Code"],"members":{"AccessToken":{"shape":"S1v"},"AttributeName":{},"Code":{}}},"output":{"type":"structure","members":{}},"authtype":"none"}},"shapes":{"S4":{"type":"structure","members":{"Name":{},"AttributeDataType":{},"DeveloperOnlyAttribute":{"type":"boolean"},"Mutable":{"type":"boolean"},"Required":{"type":"boolean"},"NumberAttributeConstraints":{"type":"structure","members":{"MinValue":{},"MaxValue":{}}},"StringAttributeConstraints":{"type":"structure","members":{"MinLength":{},"MaxLength":{}}}}},"Sd":{"type":"string","sensitive":true},"Sg":{"type":"map","key":{},"value":{}},"Sj":{"type":"list","member":{"type":"structure","required":["Name"],"members":{"Name":{},"Value":{"type":"string","sensitive":true}}}},"Sn":{"type":"string","sensitive":true},"St":{"type":"structure","members":{"Username":{"shape":"Sd"},"Attributes":{"shape":"Sj"},"UserCreateDate":{"type":"timestamp"},"UserLastModifiedDate":{"type":"timestamp"},"Enabled":{"type":"boolean"},"UserStatus":{},"MFAOptions":{"shape":"Sw"}}},"Sw":{"type":"list","member":{"type":"structure","members":{"DeliveryMedium":{},"AttributeName":{}}}},"S10":{"type":"list","member":{}},"S13":{"type":"structure","members":{"ProviderName":{},"ProviderAttributeName":{},"ProviderAttributeValue":{}}},"S1e":{"type":"structure","members":{"DeviceKey":{},"DeviceAttributes":{"shape":"Sj"},"DeviceCreateDate":{"type":"timestamp"},"DeviceLastModifiedDate":{"type":"timestamp"},"DeviceLastAuthenticatedDate":{"type":"timestamp"}}},"S1h":{"type":"list","member":{}},"S1j":{"type":"string","sensitive":true},"S1l":{"type":"map","key":{},"value":{},"sensitive":true},"S1m":{"type":"structure","members":{"AnalyticsEndpointId":{}}},"S1n":{"type":"structure","required":["IpAddress","ServerName","ServerPath","HttpHeaders"],"members":{"IpAddress":{},"ServerName":{},"ServerPath":{},"HttpHeaders":{"type":"list","member":{"type":"structure","members":{"headerName":{},"headerValue":{}}}},"EncodedData":{}}},"S1t":{"type":"map","key":{},"value":{}},"S1u":{"type":"structure","members":{"AccessToken":{"shape":"S1v"},"ExpiresIn":{"type":"integer"},"TokenType":{},"RefreshToken":{"shape":"S1v"},"IdToken":{"shape":"S1v"},"NewDeviceMetadata":{"type":"structure","members":{"DeviceKey":{},"DeviceGroupKey":{}}}}},"S1v":{"type":"string","sensitive":true},"S24":{"type":"list","member":{"shape":"S1e"}},"S28":{"type":"list","member":{"shape":"S29"}},"S29":{"type":"structure","members":{"GroupName":{},"UserPoolId":{},"Description":{},"RoleArn":{},"Precedence":{"type":"integer"},"LastModifiedDate":{"type":"timestamp"},"CreationDate":{"type":"timestamp"}}},"S2y":{"type":"map","key":{},"value":{}},"S31":{"type":"structure","members":{"Enabled":{"type":"boolean"},"PreferredMfa":{"type":"boolean"}}},"S32":{"type":"structure","members":{"Enabled":{"type":"boolean"},"PreferredMfa":{"type":"boolean"}}},"S3s":{"type":"string","sensitive":true},"S3u":{"type":"structure","members":{"EncodedData":{}}},"S43":{"type":"map","key":{},"value":{}},"S44":{"type":"map","key":{},"value":{}},"S46":{"type":"list","member":{}},"S49":{"type":"structure","members":{"UserPoolId":{},"ProviderName":{},"ProviderType":{},"ProviderDetails":{"shape":"S43"},"AttributeMapping":{"shape":"S44"},"IdpIdentifiers":{"shape":"S46"},"LastModifiedDate":{"type":"timestamp"},"CreationDate":{"type":"timestamp"}}},"S4d":{"type":"list","member":{"type":"structure","required":["ScopeName","ScopeDescription"],"members":{"ScopeName":{},"ScopeDescription":{}}}},"S4i":{"type":"structure","members":{"UserPoolId":{},"Identifier":{},"Name":{},"Scopes":{"shape":"S4d"}}},"S4m":{"type":"structure","members":{"JobName":{},"JobId":{},"UserPoolId":{},"PreSignedUrl":{},"CreationDate":{"type":"timestamp"},"StartDate":{"type":"timestamp"},"CompletionDate":{"type":"timestamp"},"Status":{},"CloudWatchLogsRoleArn":{},"ImportedUsers":{"type":"long"},"SkippedUsers":{"type":"long"},"FailedUsers":{"type":"long"},"CompletionMessage":{}}},"S4u":{"type":"structure","members":{"PasswordPolicy":{"type":"structure","members":{"MinimumLength":{"type":"integer"},"RequireUppercase":{"type":"boolean"},"RequireLowercase":{"type":"boolean"},"RequireNumbers":{"type":"boolean"},"RequireSymbols":{"type":"boolean"},"TemporaryPasswordValidityDays":{"type":"integer"}}}}},"S4y":{"type":"structure","members":{"PreSignUp":{},"CustomMessage":{},"PostConfirmation":{},"PreAuthentication":{},"PostAuthentication":{},"DefineAuthChallenge":{},"CreateAuthChallenge":{},"VerifyAuthChallengeResponse":{},"PreTokenGeneration":{},"UserMigration":{},"CustomSMSSender":{"type":"structure","required":["LambdaVersion","LambdaArn"],"members":{"LambdaVersion":{},"LambdaArn":{}}},"CustomEmailSender":{"type":"structure","required":["LambdaVersion","LambdaArn"],"members":{"LambdaVersion":{},"LambdaArn":{}}},"KMSKeyID":{}}},"S53":{"type":"list","member":{}},"S55":{"type":"list","member":{}},"S57":{"type":"list","member":{}},"S5c":{"type":"structure","members":{"SmsMessage":{},"EmailMessage":{},"EmailSubject":{},"EmailMessageByLink":{},"EmailSubjectByLink":{},"DefaultEmailOption":{}}},"S5h":{"type":"structure","members":{"ChallengeRequiredOnNewDevice":{"type":"boolean"},"DeviceOnlyRememberedOnUserPrompt":{"type":"boolean"}}},"S5i":{"type":"structure","members":{"SourceArn":{},"ReplyToEmailAddress":{},"EmailSendingAccount":{},"From":{},"ConfigurationSet":{}}},"S5m":{"type":"structure","required":["SnsCallerArn"],"members":{"SnsCallerArn":{},"ExternalId":{}}},"S5n":{"type":"map","key":{},"value":{}},"S5q":{"type":"structure","members":{"AllowAdminCreateUserOnly":{"type":"boolean"},"UnusedAccountValidityDays":{"type":"integer"},"InviteMessageTemplate":{"type":"structure","members":{"SMSMessage":{},"EmailMessage":{},"EmailSubject":{}}}}},"S5t":{"type":"list","member":{"shape":"S4"}},"S5u":{"type":"structure","required":["AdvancedSecurityMode"],"members":{"AdvancedSecurityMode":{}}},"S5w":{"type":"structure","required":["CaseSensitive"],"members":{"CaseSensitive":{"type":"boolean"}}},"S5x":{"type":"structure","members":{"RecoveryMechanisms":{"type":"list","member":{"type":"structure","required":["Priority","Name"],"members":{"Priority":{"type":"integer"},"Name":{}}}}}},"S63":{"type":"structure","members":{"Id":{},"Name":{},"Policies":{"shape":"S4u"},"LambdaConfig":{"shape":"S4y"},"Status":{},"LastModifiedDate":{"type":"timestamp"},"CreationDate":{"type":"timestamp"},"SchemaAttributes":{"shape":"S5t"},"AutoVerifiedAttributes":{"shape":"S53"},"AliasAttributes":{"shape":"S55"},"UsernameAttributes":{"shape":"S57"},"SmsVerificationMessage":{},"EmailVerificationMessage":{},"EmailVerificationSubject":{},"VerificationMessageTemplate":{"shape":"S5c"},"SmsAuthenticationMessage":{},"MfaConfiguration":{},"DeviceConfiguration":{"shape":"S5h"},"EstimatedNumberOfUsers":{"type":"integer"},"EmailConfiguration":{"shape":"S5i"},"SmsConfiguration":{"shape":"S5m"},"UserPoolTags":{"shape":"S5n"},"SmsConfigurationFailure":{},"EmailConfigurationFailure":{},"Domain":{},"CustomDomain":{},"AdminCreateUserConfig":{"shape":"S5q"},"UserPoolAddOns":{"shape":"S5u"},"UsernameConfiguration":{"shape":"S5w"},"Arn":{},"AccountRecoverySetting":{"shape":"S5x"}}},"S6c":{"type":"structure","members":{"AccessToken":{},"IdToken":{},"RefreshToken":{}}},"S6e":{"type":"list","member":{}},"S6g":{"type":"list","member":{}},"S6i":{"type":"list","member":{}},"S6j":{"type":"list","member":{}},"S6l":{"type":"list","member":{}},"S6m":{"type":"list","member":{}},"S6o":{"type":"list","member":{}},"S6q":{"type":"structure","members":{"ApplicationId":{},"ApplicationArn":{},"RoleArn":{},"ExternalId":{},"UserDataShared":{"type":"boolean"}}},"S6u":{"type":"structure","members":{"UserPoolId":{},"ClientName":{},"ClientId":{"shape":"S1j"},"ClientSecret":{"shape":"S6v"},"LastModifiedDate":{"type":"timestamp"},"CreationDate":{"type":"timestamp"},"RefreshTokenValidity":{"type":"integer"},"AccessTokenValidity":{"type":"integer"},"IdTokenValidity":{"type":"integer"},"TokenValidityUnits":{"shape":"S6c"},"ReadAttributes":{"shape":"S6e"},"WriteAttributes":{"shape":"S6e"},"ExplicitAuthFlows":{"shape":"S6g"},"SupportedIdentityProviders":{"shape":"S6i"},"CallbackURLs":{"shape":"S6j"},"LogoutURLs":{"shape":"S6l"},"DefaultRedirectURI":{},"AllowedOAuthFlows":{"shape":"S6m"},"AllowedOAuthScopes":{"shape":"S6o"},"AllowedOAuthFlowsUserPoolClient":{"type":"boolean"},"AnalyticsConfiguration":{"shape":"S6q"},"PreventUserExistenceErrors":{},"EnableTokenRevocation":{"type":"boolean"}}},"S6v":{"type":"string","sensitive":true},"S6x":{"type":"structure","required":["CertificateArn"],"members":{"CertificateArn":{}}},"S7f":{"type":"structure","members":{"UserPoolId":{},"ClientId":{"shape":"S1j"},"CompromisedCredentialsRiskConfiguration":{"shape":"S7g"},"AccountTakeoverRiskConfiguration":{"shape":"S7l"},"RiskExceptionConfiguration":{"shape":"S7u"},"LastModifiedDate":{"type":"timestamp"}}},"S7g":{"type":"structure","required":["Actions"],"members":{"EventFilter":{"type":"list","member":{}},"Actions":{"type":"structure","required":["EventAction"],"members":{"EventAction":{}}}}},"S7l":{"type":"structure","required":["Actions"],"members":{"NotifyConfiguration":{"type":"structure","required":["SourceArn"],"members":{"From":{},"ReplyTo":{},"SourceArn":{},"BlockEmail":{"shape":"S7n"},"NoActionEmail":{"shape":"S7n"},"MfaEmail":{"shape":"S7n"}}},"Actions":{"type":"structure","members":{"LowAction":{"shape":"S7r"},"MediumAction":{"shape":"S7r"},"HighAction":{"shape":"S7r"}}}}},"S7n":{"type":"structure","required":["Subject"],"members":{"Subject":{},"HtmlBody":{},"TextBody":{}}},"S7r":{"type":"structure","required":["Notify","EventAction"],"members":{"Notify":{"type":"boolean"},"EventAction":{}}},"S7u":{"type":"structure","members":{"BlockedIPRangeList":{"type":"list","member":{}},"SkippedIPRangeList":{"type":"list","member":{}}}},"S8d":{"type":"structure","members":{"Destination":{},"DeliveryMedium":{},"AttributeName":{}}},"S8r":{"type":"structure","members":{"UserPoolId":{},"ClientId":{"shape":"S1j"},"ImageUrl":{},"CSS":{},"CSSVersion":{},"LastModifiedDate":{"type":"timestamp"},"CreationDate":{"type":"timestamp"}}},"S91":{"type":"structure","members":{"SmsAuthenticationMessage":{},"SmsConfiguration":{"shape":"S5m"}}},"S92":{"type":"structure","members":{"Enabled":{"type":"boolean"}}},"Sa4":{"type":"list","member":{"shape":"St"}}}}

/***/ }),
/* 146 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"AdminListGroupsForUser":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken","result_key":"Groups"},"AdminListUserAuthEvents":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"AuthEvents"},"ListGroups":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken","result_key":"Groups"},"ListIdentityProviders":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Providers"},"ListResourceServers":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"ResourceServers"},"ListUserPoolClients":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"UserPoolClients"},"ListUserPools":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"UserPools"},"ListUsers":{"input_token":"PaginationToken","limit_key":"Limit","output_token":"PaginationToken","result_key":"Users"},"ListUsersInGroup":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken","result_key":"Users"}}}

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['cognitosync'] = {};
	AWS.CognitoSync = Service.defineService('cognitosync', ['2014-06-30']);
	Object.defineProperty(apiLoader.services['cognitosync'], '2014-06-30', {
	  get: function get() {
	    var model = __webpack_require__(148);
	    model.paginators = __webpack_require__(149).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.CognitoSync;


/***/ }),
/* 148 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2014-06-30","endpointPrefix":"cognito-sync","jsonVersion":"1.1","protocol":"rest-json","serviceFullName":"Amazon Cognito Sync","serviceId":"Cognito Sync","signatureVersion":"v4","uid":"cognito-sync-2014-06-30"},"operations":{"BulkPublish":{"http":{"requestUri":"/identitypools/{IdentityPoolId}/bulkpublish","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"}}},"output":{"type":"structure","members":{"IdentityPoolId":{}}}},"DeleteDataset":{"http":{"method":"DELETE","requestUri":"/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId","IdentityId","DatasetName"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"},"IdentityId":{"location":"uri","locationName":"IdentityId"},"DatasetName":{"location":"uri","locationName":"DatasetName"}}},"output":{"type":"structure","members":{"Dataset":{"shape":"S8"}}}},"DescribeDataset":{"http":{"method":"GET","requestUri":"/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId","IdentityId","DatasetName"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"},"IdentityId":{"location":"uri","locationName":"IdentityId"},"DatasetName":{"location":"uri","locationName":"DatasetName"}}},"output":{"type":"structure","members":{"Dataset":{"shape":"S8"}}}},"DescribeIdentityPoolUsage":{"http":{"method":"GET","requestUri":"/identitypools/{IdentityPoolId}","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"}}},"output":{"type":"structure","members":{"IdentityPoolUsage":{"shape":"Sg"}}}},"DescribeIdentityUsage":{"http":{"method":"GET","requestUri":"/identitypools/{IdentityPoolId}/identities/{IdentityId}","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId","IdentityId"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"},"IdentityId":{"location":"uri","locationName":"IdentityId"}}},"output":{"type":"structure","members":{"IdentityUsage":{"type":"structure","members":{"IdentityId":{},"IdentityPoolId":{},"LastModifiedDate":{"type":"timestamp"},"DatasetCount":{"type":"integer"},"DataStorage":{"type":"long"}}}}}},"GetBulkPublishDetails":{"http":{"requestUri":"/identitypools/{IdentityPoolId}/getBulkPublishDetails","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"}}},"output":{"type":"structure","members":{"IdentityPoolId":{},"BulkPublishStartTime":{"type":"timestamp"},"BulkPublishCompleteTime":{"type":"timestamp"},"BulkPublishStatus":{},"FailureMessage":{}}}},"GetCognitoEvents":{"http":{"method":"GET","requestUri":"/identitypools/{IdentityPoolId}/events","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"}}},"output":{"type":"structure","members":{"Events":{"shape":"Sq"}}}},"GetIdentityPoolConfiguration":{"http":{"method":"GET","requestUri":"/identitypools/{IdentityPoolId}/configuration","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"}}},"output":{"type":"structure","members":{"IdentityPoolId":{},"PushSync":{"shape":"Sv"},"CognitoStreams":{"shape":"Sz"}}}},"ListDatasets":{"http":{"method":"GET","requestUri":"/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets","responseCode":200},"input":{"type":"structure","required":["IdentityId","IdentityPoolId"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"},"IdentityId":{"location":"uri","locationName":"IdentityId"},"NextToken":{"location":"querystring","locationName":"nextToken"},"MaxResults":{"location":"querystring","locationName":"maxResults","type":"integer"}}},"output":{"type":"structure","members":{"Datasets":{"type":"list","member":{"shape":"S8"}},"Count":{"type":"integer"},"NextToken":{}}}},"ListIdentityPoolUsage":{"http":{"method":"GET","requestUri":"/identitypools","responseCode":200},"input":{"type":"structure","members":{"NextToken":{"location":"querystring","locationName":"nextToken"},"MaxResults":{"location":"querystring","locationName":"maxResults","type":"integer"}}},"output":{"type":"structure","members":{"IdentityPoolUsages":{"type":"list","member":{"shape":"Sg"}},"MaxResults":{"type":"integer"},"Count":{"type":"integer"},"NextToken":{}}}},"ListRecords":{"http":{"method":"GET","requestUri":"/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/records","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId","IdentityId","DatasetName"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"},"IdentityId":{"location":"uri","locationName":"IdentityId"},"DatasetName":{"location":"uri","locationName":"DatasetName"},"LastSyncCount":{"location":"querystring","locationName":"lastSyncCount","type":"long"},"NextToken":{"location":"querystring","locationName":"nextToken"},"MaxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"SyncSessionToken":{"location":"querystring","locationName":"syncSessionToken"}}},"output":{"type":"structure","members":{"Records":{"shape":"S1c"},"NextToken":{},"Count":{"type":"integer"},"DatasetSyncCount":{"type":"long"},"LastModifiedBy":{},"MergedDatasetNames":{"type":"list","member":{}},"DatasetExists":{"type":"boolean"},"DatasetDeletedAfterRequestedSyncCount":{"type":"boolean"},"SyncSessionToken":{}}}},"RegisterDevice":{"http":{"requestUri":"/identitypools/{IdentityPoolId}/identity/{IdentityId}/device","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId","IdentityId","Platform","Token"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"},"IdentityId":{"location":"uri","locationName":"IdentityId"},"Platform":{},"Token":{}}},"output":{"type":"structure","members":{"DeviceId":{}}}},"SetCognitoEvents":{"http":{"requestUri":"/identitypools/{IdentityPoolId}/events","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId","Events"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"},"Events":{"shape":"Sq"}}}},"SetIdentityPoolConfiguration":{"http":{"requestUri":"/identitypools/{IdentityPoolId}/configuration","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"},"PushSync":{"shape":"Sv"},"CognitoStreams":{"shape":"Sz"}}},"output":{"type":"structure","members":{"IdentityPoolId":{},"PushSync":{"shape":"Sv"},"CognitoStreams":{"shape":"Sz"}}}},"SubscribeToDataset":{"http":{"requestUri":"/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/subscriptions/{DeviceId}","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId","IdentityId","DatasetName","DeviceId"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"},"IdentityId":{"location":"uri","locationName":"IdentityId"},"DatasetName":{"location":"uri","locationName":"DatasetName"},"DeviceId":{"location":"uri","locationName":"DeviceId"}}},"output":{"type":"structure","members":{}}},"UnsubscribeFromDataset":{"http":{"method":"DELETE","requestUri":"/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/subscriptions/{DeviceId}","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId","IdentityId","DatasetName","DeviceId"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"},"IdentityId":{"location":"uri","locationName":"IdentityId"},"DatasetName":{"location":"uri","locationName":"DatasetName"},"DeviceId":{"location":"uri","locationName":"DeviceId"}}},"output":{"type":"structure","members":{}}},"UpdateRecords":{"http":{"requestUri":"/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId","IdentityId","DatasetName","SyncSessionToken"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"},"IdentityId":{"location":"uri","locationName":"IdentityId"},"DatasetName":{"location":"uri","locationName":"DatasetName"},"DeviceId":{},"RecordPatches":{"type":"list","member":{"type":"structure","required":["Op","Key","SyncCount"],"members":{"Op":{},"Key":{},"Value":{},"SyncCount":{"type":"long"},"DeviceLastModifiedDate":{"type":"timestamp"}}}},"SyncSessionToken":{},"ClientContext":{"location":"header","locationName":"x-amz-Client-Context"}}},"output":{"type":"structure","members":{"Records":{"shape":"S1c"}}}}},"shapes":{"S8":{"type":"structure","members":{"IdentityId":{},"DatasetName":{},"CreationDate":{"type":"timestamp"},"LastModifiedDate":{"type":"timestamp"},"LastModifiedBy":{},"DataStorage":{"type":"long"},"NumRecords":{"type":"long"}}},"Sg":{"type":"structure","members":{"IdentityPoolId":{},"SyncSessionsCount":{"type":"long"},"DataStorage":{"type":"long"},"LastModifiedDate":{"type":"timestamp"}}},"Sq":{"type":"map","key":{},"value":{}},"Sv":{"type":"structure","members":{"ApplicationArns":{"type":"list","member":{}},"RoleArn":{}}},"Sz":{"type":"structure","members":{"StreamName":{},"RoleArn":{},"StreamingStatus":{}}},"S1c":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{},"SyncCount":{"type":"long"},"LastModifiedDate":{"type":"timestamp"},"LastModifiedBy":{},"DeviceLastModifiedDate":{"type":"timestamp"}}}}}}

/***/ }),
/* 149 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{}}

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['configservice'] = {};
	AWS.ConfigService = Service.defineService('configservice', ['2014-11-12']);
	Object.defineProperty(apiLoader.services['configservice'], '2014-11-12', {
	  get: function get() {
	    var model = __webpack_require__(151);
	    model.paginators = __webpack_require__(152).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.ConfigService;


/***/ }),
/* 151 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2014-11-12","endpointPrefix":"config","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"Config Service","serviceFullName":"AWS Config","serviceId":"Config Service","signatureVersion":"v4","targetPrefix":"StarlingDoveService","uid":"config-2014-11-12"},"operations":{"BatchGetAggregateResourceConfig":{"input":{"type":"structure","required":["ConfigurationAggregatorName","ResourceIdentifiers"],"members":{"ConfigurationAggregatorName":{},"ResourceIdentifiers":{"type":"list","member":{"shape":"S4"}}}},"output":{"type":"structure","members":{"BaseConfigurationItems":{"shape":"Sb"},"UnprocessedResourceIdentifiers":{"type":"list","member":{"shape":"S4"}}}}},"BatchGetResourceConfig":{"input":{"type":"structure","required":["resourceKeys"],"members":{"resourceKeys":{"shape":"Sq"}}},"output":{"type":"structure","members":{"baseConfigurationItems":{"shape":"Sb"},"unprocessedResourceKeys":{"shape":"Sq"}}}},"DeleteAggregationAuthorization":{"input":{"type":"structure","required":["AuthorizedAccountId","AuthorizedAwsRegion"],"members":{"AuthorizedAccountId":{},"AuthorizedAwsRegion":{}}}},"DeleteConfigRule":{"input":{"type":"structure","required":["ConfigRuleName"],"members":{"ConfigRuleName":{}}}},"DeleteConfigurationAggregator":{"input":{"type":"structure","required":["ConfigurationAggregatorName"],"members":{"ConfigurationAggregatorName":{}}}},"DeleteConfigurationRecorder":{"input":{"type":"structure","required":["ConfigurationRecorderName"],"members":{"ConfigurationRecorderName":{}}}},"DeleteConformancePack":{"input":{"type":"structure","required":["ConformancePackName"],"members":{"ConformancePackName":{}}}},"DeleteDeliveryChannel":{"input":{"type":"structure","required":["DeliveryChannelName"],"members":{"DeliveryChannelName":{}}}},"DeleteEvaluationResults":{"input":{"type":"structure","required":["ConfigRuleName"],"members":{"ConfigRuleName":{}}},"output":{"type":"structure","members":{}}},"DeleteOrganizationConfigRule":{"input":{"type":"structure","required":["OrganizationConfigRuleName"],"members":{"OrganizationConfigRuleName":{}}}},"DeleteOrganizationConformancePack":{"input":{"type":"structure","required":["OrganizationConformancePackName"],"members":{"OrganizationConformancePackName":{}}}},"DeletePendingAggregationRequest":{"input":{"type":"structure","required":["RequesterAccountId","RequesterAwsRegion"],"members":{"RequesterAccountId":{},"RequesterAwsRegion":{}}}},"DeleteRemediationConfiguration":{"input":{"type":"structure","required":["ConfigRuleName"],"members":{"ConfigRuleName":{},"ResourceType":{}}},"output":{"type":"structure","members":{}}},"DeleteRemediationExceptions":{"input":{"type":"structure","required":["ConfigRuleName","ResourceKeys"],"members":{"ConfigRuleName":{},"ResourceKeys":{"shape":"S1f"}}},"output":{"type":"structure","members":{"FailedBatches":{"type":"list","member":{"type":"structure","members":{"FailureMessage":{},"FailedItems":{"shape":"S1f"}}}}}}},"DeleteResourceConfig":{"input":{"type":"structure","required":["ResourceType","ResourceId"],"members":{"ResourceType":{},"ResourceId":{}}}},"DeleteRetentionConfiguration":{"input":{"type":"structure","required":["RetentionConfigurationName"],"members":{"RetentionConfigurationName":{}}}},"DeleteStoredQuery":{"input":{"type":"structure","required":["QueryName"],"members":{"QueryName":{}}},"output":{"type":"structure","members":{}}},"DeliverConfigSnapshot":{"input":{"type":"structure","required":["deliveryChannelName"],"members":{"deliveryChannelName":{}}},"output":{"type":"structure","members":{"configSnapshotId":{}}}},"DescribeAggregateComplianceByConfigRules":{"input":{"type":"structure","required":["ConfigurationAggregatorName"],"members":{"ConfigurationAggregatorName":{},"Filters":{"type":"structure","members":{"ConfigRuleName":{},"ComplianceType":{},"AccountId":{},"AwsRegion":{}}},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"AggregateComplianceByConfigRules":{"type":"list","member":{"type":"structure","members":{"ConfigRuleName":{},"Compliance":{"shape":"S23"},"AccountId":{},"AwsRegion":{}}}},"NextToken":{}}}},"DescribeAggregateComplianceByConformancePacks":{"input":{"type":"structure","required":["ConfigurationAggregatorName"],"members":{"ConfigurationAggregatorName":{},"Filters":{"type":"structure","members":{"ConformancePackName":{},"ComplianceType":{},"AccountId":{},"AwsRegion":{}}},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"AggregateComplianceByConformancePacks":{"type":"list","member":{"type":"structure","members":{"ConformancePackName":{},"Compliance":{"type":"structure","members":{"ComplianceType":{},"CompliantRuleCount":{"type":"integer"},"NonCompliantRuleCount":{"type":"integer"},"TotalRuleCount":{"type":"integer"}}},"AccountId":{},"AwsRegion":{}}}},"NextToken":{}}}},"DescribeAggregationAuthorizations":{"input":{"type":"structure","members":{"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"AggregationAuthorizations":{"type":"list","member":{"shape":"S2i"}},"NextToken":{}}}},"DescribeComplianceByConfigRule":{"input":{"type":"structure","members":{"ConfigRuleNames":{"shape":"S2l"},"ComplianceTypes":{"shape":"S2m"},"NextToken":{}}},"output":{"type":"structure","members":{"ComplianceByConfigRules":{"type":"list","member":{"type":"structure","members":{"ConfigRuleName":{},"Compliance":{"shape":"S23"}}}},"NextToken":{}}}},"DescribeComplianceByResource":{"input":{"type":"structure","members":{"ResourceType":{},"ResourceId":{},"ComplianceTypes":{"shape":"S2m"},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"ComplianceByResources":{"type":"list","member":{"type":"structure","members":{"ResourceType":{},"ResourceId":{},"Compliance":{"shape":"S23"}}}},"NextToken":{}}}},"DescribeConfigRuleEvaluationStatus":{"input":{"type":"structure","members":{"ConfigRuleNames":{"shape":"S2l"},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"ConfigRulesEvaluationStatus":{"type":"list","member":{"type":"structure","members":{"ConfigRuleName":{},"ConfigRuleArn":{},"ConfigRuleId":{},"LastSuccessfulInvocationTime":{"type":"timestamp"},"LastFailedInvocationTime":{"type":"timestamp"},"LastSuccessfulEvaluationTime":{"type":"timestamp"},"LastFailedEvaluationTime":{"type":"timestamp"},"FirstActivatedTime":{"type":"timestamp"},"LastDeactivatedTime":{"type":"timestamp"},"LastErrorCode":{},"LastErrorMessage":{},"FirstEvaluationStarted":{"type":"boolean"}}}},"NextToken":{}}}},"DescribeConfigRules":{"input":{"type":"structure","members":{"ConfigRuleNames":{"shape":"S2l"},"NextToken":{}}},"output":{"type":"structure","members":{"ConfigRules":{"type":"list","member":{"shape":"S33"}},"NextToken":{}}}},"DescribeConfigurationAggregatorSourcesStatus":{"input":{"type":"structure","required":["ConfigurationAggregatorName"],"members":{"ConfigurationAggregatorName":{},"UpdateStatus":{"type":"list","member":{}},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"AggregatedSourceStatusList":{"type":"list","member":{"type":"structure","members":{"SourceId":{},"SourceType":{},"AwsRegion":{},"LastUpdateStatus":{},"LastUpdateTime":{"type":"timestamp"},"LastErrorCode":{},"LastErrorMessage":{}}}},"NextToken":{}}}},"DescribeConfigurationAggregators":{"input":{"type":"structure","members":{"ConfigurationAggregatorNames":{"type":"list","member":{}},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"ConfigurationAggregators":{"type":"list","member":{"shape":"S3r"}},"NextToken":{}}}},"DescribeConfigurationRecorderStatus":{"input":{"type":"structure","members":{"ConfigurationRecorderNames":{"shape":"S3z"}}},"output":{"type":"structure","members":{"ConfigurationRecordersStatus":{"type":"list","member":{"type":"structure","members":{"name":{},"lastStartTime":{"type":"timestamp"},"lastStopTime":{"type":"timestamp"},"recording":{"type":"boolean"},"lastStatus":{},"lastErrorCode":{},"lastErrorMessage":{},"lastStatusChangeTime":{"type":"timestamp"}}}}}}},"DescribeConfigurationRecorders":{"input":{"type":"structure","members":{"ConfigurationRecorderNames":{"shape":"S3z"}}},"output":{"type":"structure","members":{"ConfigurationRecorders":{"type":"list","member":{"shape":"S47"}}}}},"DescribeConformancePackCompliance":{"input":{"type":"structure","required":["ConformancePackName"],"members":{"ConformancePackName":{},"Filters":{"type":"structure","members":{"ConfigRuleNames":{"shape":"S4e"},"ComplianceType":{}}},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","required":["ConformancePackName","ConformancePackRuleComplianceList"],"members":{"ConformancePackName":{},"ConformancePackRuleComplianceList":{"type":"list","member":{"type":"structure","members":{"ConfigRuleName":{},"ComplianceType":{},"Controls":{"type":"list","member":{}}}}},"NextToken":{}}}},"DescribeConformancePackStatus":{"input":{"type":"structure","members":{"ConformancePackNames":{"shape":"S4l"},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"ConformancePackStatusDetails":{"type":"list","member":{"type":"structure","required":["ConformancePackName","ConformancePackId","ConformancePackArn","ConformancePackState","StackArn","LastUpdateRequestedTime"],"members":{"ConformancePackName":{},"ConformancePackId":{},"ConformancePackArn":{},"ConformancePackState":{},"StackArn":{},"ConformancePackStatusReason":{},"LastUpdateRequestedTime":{"type":"timestamp"},"LastUpdateCompletedTime":{"type":"timestamp"}}}},"NextToken":{}}}},"DescribeConformancePacks":{"input":{"type":"structure","members":{"ConformancePackNames":{"shape":"S4l"},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"ConformancePackDetails":{"type":"list","member":{"type":"structure","required":["ConformancePackName","ConformancePackArn","ConformancePackId"],"members":{"ConformancePackName":{},"ConformancePackArn":{},"ConformancePackId":{},"DeliveryS3Bucket":{},"DeliveryS3KeyPrefix":{},"ConformancePackInputParameters":{"shape":"S51"},"LastUpdateRequestedTime":{"type":"timestamp"},"CreatedBy":{}}}},"NextToken":{}}}},"DescribeDeliveryChannelStatus":{"input":{"type":"structure","members":{"DeliveryChannelNames":{"shape":"S56"}}},"output":{"type":"structure","members":{"DeliveryChannelsStatus":{"type":"list","member":{"type":"structure","members":{"name":{},"configSnapshotDeliveryInfo":{"shape":"S5a"},"configHistoryDeliveryInfo":{"shape":"S5a"},"configStreamDeliveryInfo":{"type":"structure","members":{"lastStatus":{},"lastErrorCode":{},"lastErrorMessage":{},"lastStatusChangeTime":{"type":"timestamp"}}}}}}}}},"DescribeDeliveryChannels":{"input":{"type":"structure","members":{"DeliveryChannelNames":{"shape":"S56"}}},"output":{"type":"structure","members":{"DeliveryChannels":{"type":"list","member":{"shape":"S5g"}}}}},"DescribeOrganizationConfigRuleStatuses":{"input":{"type":"structure","members":{"OrganizationConfigRuleNames":{"shape":"S5j"},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"OrganizationConfigRuleStatuses":{"type":"list","member":{"type":"structure","required":["OrganizationConfigRuleName","OrganizationRuleStatus"],"members":{"OrganizationConfigRuleName":{},"OrganizationRuleStatus":{},"ErrorCode":{},"ErrorMessage":{},"LastUpdateTime":{"type":"timestamp"}}}},"NextToken":{}}}},"DescribeOrganizationConfigRules":{"input":{"type":"structure","members":{"OrganizationConfigRuleNames":{"shape":"S5j"},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"OrganizationConfigRules":{"type":"list","member":{"type":"structure","required":["OrganizationConfigRuleName","OrganizationConfigRuleArn"],"members":{"OrganizationConfigRuleName":{},"OrganizationConfigRuleArn":{},"OrganizationManagedRuleMetadata":{"shape":"S5t"},"OrganizationCustomRuleMetadata":{"shape":"S5y"},"ExcludedAccounts":{"shape":"S61"},"LastUpdateTime":{"type":"timestamp"}}}},"NextToken":{}}}},"DescribeOrganizationConformancePackStatuses":{"input":{"type":"structure","members":{"OrganizationConformancePackNames":{"shape":"S63"},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"OrganizationConformancePackStatuses":{"type":"list","member":{"type":"structure","required":["OrganizationConformancePackName","Status"],"members":{"OrganizationConformancePackName":{},"Status":{},"ErrorCode":{},"ErrorMessage":{},"LastUpdateTime":{"type":"timestamp"}}}},"NextToken":{}}}},"DescribeOrganizationConformancePacks":{"input":{"type":"structure","members":{"OrganizationConformancePackNames":{"shape":"S63"},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"OrganizationConformancePacks":{"type":"list","member":{"type":"structure","required":["OrganizationConformancePackName","OrganizationConformancePackArn","LastUpdateTime"],"members":{"OrganizationConformancePackName":{},"OrganizationConformancePackArn":{},"DeliveryS3Bucket":{},"DeliveryS3KeyPrefix":{},"ConformancePackInputParameters":{"shape":"S51"},"ExcludedAccounts":{"shape":"S61"},"LastUpdateTime":{"type":"timestamp"}}}},"NextToken":{}}}},"DescribePendingAggregationRequests":{"input":{"type":"structure","members":{"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"PendingAggregationRequests":{"type":"list","member":{"type":"structure","members":{"RequesterAccountId":{},"RequesterAwsRegion":{}}}},"NextToken":{}}}},"DescribeRemediationConfigurations":{"input":{"type":"structure","required":["ConfigRuleNames"],"members":{"ConfigRuleNames":{"shape":"S2l"}}},"output":{"type":"structure","members":{"RemediationConfigurations":{"shape":"S6j"}}}},"DescribeRemediationExceptions":{"input":{"type":"structure","required":["ConfigRuleName"],"members":{"ConfigRuleName":{},"ResourceKeys":{"shape":"S1f"},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"RemediationExceptions":{"shape":"S6z"},"NextToken":{}}}},"DescribeRemediationExecutionStatus":{"input":{"type":"structure","required":["ConfigRuleName"],"members":{"ConfigRuleName":{},"ResourceKeys":{"shape":"Sq"},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"RemediationExecutionStatuses":{"type":"list","member":{"type":"structure","members":{"ResourceKey":{"shape":"Sr"},"State":{},"StepDetails":{"type":"list","member":{"type":"structure","members":{"Name":{},"State":{},"ErrorMessage":{},"StartTime":{"type":"timestamp"},"StopTime":{"type":"timestamp"}}}},"InvocationTime":{"type":"timestamp"},"LastUpdatedTime":{"type":"timestamp"}}}},"NextToken":{}}}},"DescribeRetentionConfigurations":{"input":{"type":"structure","members":{"RetentionConfigurationNames":{"type":"list","member":{}},"NextToken":{}}},"output":{"type":"structure","members":{"RetentionConfigurations":{"type":"list","member":{"shape":"S7d"}},"NextToken":{}}}},"GetAggregateComplianceDetailsByConfigRule":{"input":{"type":"structure","required":["ConfigurationAggregatorName","ConfigRuleName","AccountId","AwsRegion"],"members":{"ConfigurationAggregatorName":{},"ConfigRuleName":{},"AccountId":{},"AwsRegion":{},"ComplianceType":{},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"AggregateEvaluationResults":{"type":"list","member":{"type":"structure","members":{"EvaluationResultIdentifier":{"shape":"S7j"},"ComplianceType":{},"ResultRecordedTime":{"type":"timestamp"},"ConfigRuleInvokedTime":{"type":"timestamp"},"Annotation":{},"AccountId":{},"AwsRegion":{}}}},"NextToken":{}}}},"GetAggregateConfigRuleComplianceSummary":{"input":{"type":"structure","required":["ConfigurationAggregatorName"],"members":{"ConfigurationAggregatorName":{},"Filters":{"type":"structure","members":{"AccountId":{},"AwsRegion":{}}},"GroupByKey":{},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"GroupByKey":{},"AggregateComplianceCounts":{"type":"list","member":{"type":"structure","members":{"GroupName":{},"ComplianceSummary":{"shape":"S7r"}}}},"NextToken":{}}}},"GetAggregateConformancePackComplianceSummary":{"input":{"type":"structure","required":["ConfigurationAggregatorName"],"members":{"ConfigurationAggregatorName":{},"Filters":{"type":"structure","members":{"AccountId":{},"AwsRegion":{}}},"GroupByKey":{},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"AggregateConformancePackComplianceSummaries":{"type":"list","member":{"type":"structure","members":{"ComplianceSummary":{"type":"structure","members":{"CompliantConformancePackCount":{"type":"integer"},"NonCompliantConformancePackCount":{"type":"integer"}}},"GroupName":{}}}},"GroupByKey":{},"NextToken":{}}}},"GetAggregateDiscoveredResourceCounts":{"input":{"type":"structure","required":["ConfigurationAggregatorName"],"members":{"ConfigurationAggregatorName":{},"Filters":{"type":"structure","members":{"ResourceType":{},"AccountId":{},"Region":{}}},"GroupByKey":{},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","required":["TotalDiscoveredResources"],"members":{"TotalDiscoveredResources":{"type":"long"},"GroupByKey":{},"GroupedResourceCounts":{"type":"list","member":{"type":"structure","required":["GroupName","ResourceCount"],"members":{"GroupName":{},"ResourceCount":{"type":"long"}}}},"NextToken":{}}}},"GetAggregateResourceConfig":{"input":{"type":"structure","required":["ConfigurationAggregatorName","ResourceIdentifier"],"members":{"ConfigurationAggregatorName":{},"ResourceIdentifier":{"shape":"S4"}}},"output":{"type":"structure","members":{"ConfigurationItem":{"shape":"S88"}}}},"GetComplianceDetailsByConfigRule":{"input":{"type":"structure","required":["ConfigRuleName"],"members":{"ConfigRuleName":{},"ComplianceTypes":{"shape":"S2m"},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"EvaluationResults":{"shape":"S8k"},"NextToken":{}}}},"GetComplianceDetailsByResource":{"input":{"type":"structure","required":["ResourceType","ResourceId"],"members":{"ResourceType":{},"ResourceId":{},"ComplianceTypes":{"shape":"S2m"},"NextToken":{}}},"output":{"type":"structure","members":{"EvaluationResults":{"shape":"S8k"},"NextToken":{}}}},"GetComplianceSummaryByConfigRule":{"output":{"type":"structure","members":{"ComplianceSummary":{"shape":"S7r"}}}},"GetComplianceSummaryByResourceType":{"input":{"type":"structure","members":{"ResourceTypes":{"shape":"S8q"}}},"output":{"type":"structure","members":{"ComplianceSummariesByResourceType":{"type":"list","member":{"type":"structure","members":{"ResourceType":{},"ComplianceSummary":{"shape":"S7r"}}}}}}},"GetConformancePackComplianceDetails":{"input":{"type":"structure","required":["ConformancePackName"],"members":{"ConformancePackName":{},"Filters":{"type":"structure","members":{"ConfigRuleNames":{"shape":"S4e"},"ComplianceType":{},"ResourceType":{},"ResourceIds":{"type":"list","member":{}}}},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","required":["ConformancePackName"],"members":{"ConformancePackName":{},"ConformancePackRuleEvaluationResults":{"type":"list","member":{"type":"structure","required":["ComplianceType","EvaluationResultIdentifier","ConfigRuleInvokedTime","ResultRecordedTime"],"members":{"ComplianceType":{},"EvaluationResultIdentifier":{"shape":"S7j"},"ConfigRuleInvokedTime":{"type":"timestamp"},"ResultRecordedTime":{"type":"timestamp"},"Annotation":{}}}},"NextToken":{}}}},"GetConformancePackComplianceSummary":{"input":{"type":"structure","required":["ConformancePackNames"],"members":{"ConformancePackNames":{"type":"list","member":{}},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"ConformancePackComplianceSummaryList":{"type":"list","member":{"type":"structure","required":["ConformancePackName","ConformancePackComplianceStatus"],"members":{"ConformancePackName":{},"ConformancePackComplianceStatus":{}}}},"NextToken":{}}}},"GetDiscoveredResourceCounts":{"input":{"type":"structure","members":{"resourceTypes":{"shape":"S8q"},"limit":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"totalDiscoveredResources":{"type":"long"},"resourceCounts":{"type":"list","member":{"type":"structure","members":{"resourceType":{},"count":{"type":"long"}}}},"nextToken":{}}}},"GetOrganizationConfigRuleDetailedStatus":{"input":{"type":"structure","required":["OrganizationConfigRuleName"],"members":{"OrganizationConfigRuleName":{},"Filters":{"type":"structure","members":{"AccountId":{},"MemberAccountRuleStatus":{}}},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"OrganizationConfigRuleDetailedStatus":{"type":"list","member":{"type":"structure","required":["AccountId","ConfigRuleName","MemberAccountRuleStatus"],"members":{"AccountId":{},"ConfigRuleName":{},"MemberAccountRuleStatus":{},"ErrorCode":{},"ErrorMessage":{},"LastUpdateTime":{"type":"timestamp"}}}},"NextToken":{}}}},"GetOrganizationConformancePackDetailedStatus":{"input":{"type":"structure","required":["OrganizationConformancePackName"],"members":{"OrganizationConformancePackName":{},"Filters":{"type":"structure","members":{"AccountId":{},"Status":{}}},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"OrganizationConformancePackDetailedStatuses":{"type":"list","member":{"type":"structure","required":["AccountId","ConformancePackName","Status"],"members":{"AccountId":{},"ConformancePackName":{},"Status":{},"ErrorCode":{},"ErrorMessage":{},"LastUpdateTime":{"type":"timestamp"}}}},"NextToken":{}}}},"GetResourceConfigHistory":{"input":{"type":"structure","required":["resourceType","resourceId"],"members":{"resourceType":{},"resourceId":{},"laterTime":{"type":"timestamp"},"earlierTime":{"type":"timestamp"},"chronologicalOrder":{},"limit":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"configurationItems":{"type":"list","member":{"shape":"S88"}},"nextToken":{}}}},"GetStoredQuery":{"input":{"type":"structure","required":["QueryName"],"members":{"QueryName":{}}},"output":{"type":"structure","members":{"StoredQuery":{"shape":"S9v"}}}},"ListAggregateDiscoveredResources":{"input":{"type":"structure","required":["ConfigurationAggregatorName","ResourceType"],"members":{"ConfigurationAggregatorName":{},"ResourceType":{},"Filters":{"type":"structure","members":{"AccountId":{},"ResourceId":{},"ResourceName":{},"Region":{}}},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"ResourceIdentifiers":{"type":"list","member":{"shape":"S4"}},"NextToken":{}}}},"ListDiscoveredResources":{"input":{"type":"structure","required":["resourceType"],"members":{"resourceType":{},"resourceIds":{"type":"list","member":{}},"resourceName":{},"limit":{"type":"integer"},"includeDeletedResources":{"type":"boolean"},"nextToken":{}}},"output":{"type":"structure","members":{"resourceIdentifiers":{"type":"list","member":{"type":"structure","members":{"resourceType":{},"resourceId":{},"resourceName":{},"resourceDeletionTime":{"type":"timestamp"}}}},"nextToken":{}}}},"ListStoredQueries":{"input":{"type":"structure","members":{"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"StoredQueryMetadata":{"type":"list","member":{"type":"structure","required":["QueryId","QueryArn","QueryName"],"members":{"QueryId":{},"QueryArn":{},"QueryName":{},"Description":{}}}},"NextToken":{}}}},"ListTagsForResource":{"input":{"type":"structure","required":["ResourceArn"],"members":{"ResourceArn":{},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Tags":{"shape":"Sah"},"NextToken":{}}}},"PutAggregationAuthorization":{"input":{"type":"structure","required":["AuthorizedAccountId","AuthorizedAwsRegion"],"members":{"AuthorizedAccountId":{},"AuthorizedAwsRegion":{},"Tags":{"shape":"Sam"}}},"output":{"type":"structure","members":{"AggregationAuthorization":{"shape":"S2i"}}}},"PutConfigRule":{"input":{"type":"structure","required":["ConfigRule"],"members":{"ConfigRule":{"shape":"S33"},"Tags":{"shape":"Sam"}}}},"PutConfigurationAggregator":{"input":{"type":"structure","required":["ConfigurationAggregatorName"],"members":{"ConfigurationAggregatorName":{},"AccountAggregationSources":{"shape":"S3t"},"OrganizationAggregationSource":{"shape":"S3x"},"Tags":{"shape":"Sam"}}},"output":{"type":"structure","members":{"ConfigurationAggregator":{"shape":"S3r"}}}},"PutConfigurationRecorder":{"input":{"type":"structure","required":["ConfigurationRecorder"],"members":{"ConfigurationRecorder":{"shape":"S47"}}}},"PutConformancePack":{"input":{"type":"structure","required":["ConformancePackName"],"members":{"ConformancePackName":{},"TemplateS3Uri":{},"TemplateBody":{},"DeliveryS3Bucket":{},"DeliveryS3KeyPrefix":{},"ConformancePackInputParameters":{"shape":"S51"}}},"output":{"type":"structure","members":{"ConformancePackArn":{}}}},"PutDeliveryChannel":{"input":{"type":"structure","required":["DeliveryChannel"],"members":{"DeliveryChannel":{"shape":"S5g"}}}},"PutEvaluations":{"input":{"type":"structure","required":["ResultToken"],"members":{"Evaluations":{"shape":"Say"},"ResultToken":{},"TestMode":{"type":"boolean"}}},"output":{"type":"structure","members":{"FailedEvaluations":{"shape":"Say"}}}},"PutExternalEvaluation":{"input":{"type":"structure","required":["ConfigRuleName","ExternalEvaluation"],"members":{"ConfigRuleName":{},"ExternalEvaluation":{"type":"structure","required":["ComplianceResourceType","ComplianceResourceId","ComplianceType","OrderingTimestamp"],"members":{"ComplianceResourceType":{},"ComplianceResourceId":{},"ComplianceType":{},"Annotation":{},"OrderingTimestamp":{"type":"timestamp"}}}}},"output":{"type":"structure","members":{}}},"PutOrganizationConfigRule":{"input":{"type":"structure","required":["OrganizationConfigRuleName"],"members":{"OrganizationConfigRuleName":{},"OrganizationManagedRuleMetadata":{"shape":"S5t"},"OrganizationCustomRuleMetadata":{"shape":"S5y"},"ExcludedAccounts":{"shape":"S61"}}},"output":{"type":"structure","members":{"OrganizationConfigRuleArn":{}}}},"PutOrganizationConformancePack":{"input":{"type":"structure","required":["OrganizationConformancePackName"],"members":{"OrganizationConformancePackName":{},"TemplateS3Uri":{},"TemplateBody":{},"DeliveryS3Bucket":{},"DeliveryS3KeyPrefix":{},"ConformancePackInputParameters":{"shape":"S51"},"ExcludedAccounts":{"shape":"S61"}}},"output":{"type":"structure","members":{"OrganizationConformancePackArn":{}}}},"PutRemediationConfigurations":{"input":{"type":"structure","required":["RemediationConfigurations"],"members":{"RemediationConfigurations":{"shape":"S6j"}}},"output":{"type":"structure","members":{"FailedBatches":{"type":"list","member":{"type":"structure","members":{"FailureMessage":{},"FailedItems":{"shape":"S6j"}}}}}}},"PutRemediationExceptions":{"input":{"type":"structure","required":["ConfigRuleName","ResourceKeys"],"members":{"ConfigRuleName":{},"ResourceKeys":{"shape":"S1f"},"Message":{},"ExpirationTime":{"type":"timestamp"}}},"output":{"type":"structure","members":{"FailedBatches":{"type":"list","member":{"type":"structure","members":{"FailureMessage":{},"FailedItems":{"shape":"S6z"}}}}}}},"PutResourceConfig":{"input":{"type":"structure","required":["ResourceType","SchemaVersionId","ResourceId","Configuration"],"members":{"ResourceType":{},"SchemaVersionId":{},"ResourceId":{},"ResourceName":{},"Configuration":{},"Tags":{"shape":"S8a"}}}},"PutRetentionConfiguration":{"input":{"type":"structure","required":["RetentionPeriodInDays"],"members":{"RetentionPeriodInDays":{"type":"integer"}}},"output":{"type":"structure","members":{"RetentionConfiguration":{"shape":"S7d"}}}},"PutStoredQuery":{"input":{"type":"structure","required":["StoredQuery"],"members":{"StoredQuery":{"shape":"S9v"},"Tags":{"shape":"Sam"}}},"output":{"type":"structure","members":{"QueryArn":{}}}},"SelectAggregateResourceConfig":{"input":{"type":"structure","required":["Expression","ConfigurationAggregatorName"],"members":{"Expression":{},"ConfigurationAggregatorName":{},"Limit":{"type":"integer"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Results":{"shape":"Sbq"},"QueryInfo":{"shape":"Sbr"},"NextToken":{}}}},"SelectResourceConfig":{"input":{"type":"structure","required":["Expression"],"members":{"Expression":{},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Results":{"shape":"Sbq"},"QueryInfo":{"shape":"Sbr"},"NextToken":{}}}},"StartConfigRulesEvaluation":{"input":{"type":"structure","members":{"ConfigRuleNames":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"StartConfigurationRecorder":{"input":{"type":"structure","required":["ConfigurationRecorderName"],"members":{"ConfigurationRecorderName":{}}}},"StartRemediationExecution":{"input":{"type":"structure","required":["ConfigRuleName","ResourceKeys"],"members":{"ConfigRuleName":{},"ResourceKeys":{"shape":"Sq"}}},"output":{"type":"structure","members":{"FailureMessage":{},"FailedItems":{"shape":"Sq"}}}},"StopConfigurationRecorder":{"input":{"type":"structure","required":["ConfigurationRecorderName"],"members":{"ConfigurationRecorderName":{}}}},"TagResource":{"input":{"type":"structure","required":["ResourceArn","Tags"],"members":{"ResourceArn":{},"Tags":{"shape":"Sah"}}}},"UntagResource":{"input":{"type":"structure","required":["ResourceArn","TagKeys"],"members":{"ResourceArn":{},"TagKeys":{"type":"list","member":{}}}}}},"shapes":{"S4":{"type":"structure","required":["SourceAccountId","SourceRegion","ResourceId","ResourceType"],"members":{"SourceAccountId":{},"SourceRegion":{},"ResourceId":{},"ResourceType":{},"ResourceName":{}}},"Sb":{"type":"list","member":{"type":"structure","members":{"version":{},"accountId":{},"configurationItemCaptureTime":{"type":"timestamp"},"configurationItemStatus":{},"configurationStateId":{},"arn":{},"resourceType":{},"resourceId":{},"resourceName":{},"awsRegion":{},"availabilityZone":{},"resourceCreationTime":{"type":"timestamp"},"configuration":{},"supplementaryConfiguration":{"shape":"Sl"}}}},"Sl":{"type":"map","key":{},"value":{}},"Sq":{"type":"list","member":{"shape":"Sr"}},"Sr":{"type":"structure","required":["resourceType","resourceId"],"members":{"resourceType":{},"resourceId":{}}},"S1f":{"type":"list","member":{"type":"structure","members":{"ResourceType":{},"ResourceId":{}}}},"S23":{"type":"structure","members":{"ComplianceType":{},"ComplianceContributorCount":{"shape":"S24"}}},"S24":{"type":"structure","members":{"CappedCount":{"type":"integer"},"CapExceeded":{"type":"boolean"}}},"S2i":{"type":"structure","members":{"AggregationAuthorizationArn":{},"AuthorizedAccountId":{},"AuthorizedAwsRegion":{},"CreationTime":{"type":"timestamp"}}},"S2l":{"type":"list","member":{}},"S2m":{"type":"list","member":{}},"S33":{"type":"structure","required":["Source"],"members":{"ConfigRuleName":{},"ConfigRuleArn":{},"ConfigRuleId":{},"Description":{},"Scope":{"type":"structure","members":{"ComplianceResourceTypes":{"type":"list","member":{}},"TagKey":{},"TagValue":{},"ComplianceResourceId":{}}},"Source":{"type":"structure","required":["Owner","SourceIdentifier"],"members":{"Owner":{},"SourceIdentifier":{},"SourceDetails":{"type":"list","member":{"type":"structure","members":{"EventSource":{},"MessageType":{},"MaximumExecutionFrequency":{}}}}}},"InputParameters":{},"MaximumExecutionFrequency":{},"ConfigRuleState":{},"CreatedBy":{}}},"S3r":{"type":"structure","members":{"ConfigurationAggregatorName":{},"ConfigurationAggregatorArn":{},"AccountAggregationSources":{"shape":"S3t"},"OrganizationAggregationSource":{"shape":"S3x"},"CreationTime":{"type":"timestamp"},"LastUpdatedTime":{"type":"timestamp"},"CreatedBy":{}}},"S3t":{"type":"list","member":{"type":"structure","required":["AccountIds"],"members":{"AccountIds":{"type":"list","member":{}},"AllAwsRegions":{"type":"boolean"},"AwsRegions":{"shape":"S3w"}}}},"S3w":{"type":"list","member":{}},"S3x":{"type":"structure","required":["RoleArn"],"members":{"RoleArn":{},"AwsRegions":{"shape":"S3w"},"AllAwsRegions":{"type":"boolean"}}},"S3z":{"type":"list","member":{}},"S47":{"type":"structure","members":{"name":{},"roleARN":{},"recordingGroup":{"type":"structure","members":{"allSupported":{"type":"boolean"},"includeGlobalResourceTypes":{"type":"boolean"},"resourceTypes":{"type":"list","member":{}}}}}},"S4e":{"type":"list","member":{}},"S4l":{"type":"list","member":{}},"S51":{"type":"list","member":{"type":"structure","required":["ParameterName","ParameterValue"],"members":{"ParameterName":{},"ParameterValue":{}}}},"S56":{"type":"list","member":{}},"S5a":{"type":"structure","members":{"lastStatus":{},"lastErrorCode":{},"lastErrorMessage":{},"lastAttemptTime":{"type":"timestamp"},"lastSuccessfulTime":{"type":"timestamp"},"nextDeliveryTime":{"type":"timestamp"}}},"S5g":{"type":"structure","members":{"name":{},"s3BucketName":{},"s3KeyPrefix":{},"s3KmsKeyArn":{},"snsTopicARN":{},"configSnapshotDeliveryProperties":{"type":"structure","members":{"deliveryFrequency":{}}}}},"S5j":{"type":"list","member":{}},"S5t":{"type":"structure","required":["RuleIdentifier"],"members":{"Description":{},"RuleIdentifier":{},"InputParameters":{},"MaximumExecutionFrequency":{},"ResourceTypesScope":{"shape":"S5w"},"ResourceIdScope":{},"TagKeyScope":{},"TagValueScope":{}}},"S5w":{"type":"list","member":{}},"S5y":{"type":"structure","required":["LambdaFunctionArn","OrganizationConfigRuleTriggerTypes"],"members":{"Description":{},"LambdaFunctionArn":{},"OrganizationConfigRuleTriggerTypes":{"type":"list","member":{}},"InputParameters":{},"MaximumExecutionFrequency":{},"ResourceTypesScope":{"shape":"S5w"},"ResourceIdScope":{},"TagKeyScope":{},"TagValueScope":{}}},"S61":{"type":"list","member":{}},"S63":{"type":"list","member":{}},"S6j":{"type":"list","member":{"type":"structure","required":["ConfigRuleName","TargetType","TargetId"],"members":{"ConfigRuleName":{},"TargetType":{},"TargetId":{},"TargetVersion":{},"Parameters":{"type":"map","key":{},"value":{"type":"structure","members":{"ResourceValue":{"type":"structure","required":["Value"],"members":{"Value":{}}},"StaticValue":{"type":"structure","required":["Values"],"members":{"Values":{"type":"list","member":{}}}}}}},"ResourceType":{},"Automatic":{"type":"boolean"},"ExecutionControls":{"type":"structure","members":{"SsmControls":{"type":"structure","members":{"ConcurrentExecutionRatePercentage":{"type":"integer"},"ErrorPercentage":{"type":"integer"}}}}},"MaximumAutomaticAttempts":{"type":"integer"},"RetryAttemptSeconds":{"type":"long"},"Arn":{},"CreatedByService":{}}}},"S6z":{"type":"list","member":{"type":"structure","required":["ConfigRuleName","ResourceType","ResourceId"],"members":{"ConfigRuleName":{},"ResourceType":{},"ResourceId":{},"Message":{},"ExpirationTime":{"type":"timestamp"}}}},"S7d":{"type":"structure","required":["Name","RetentionPeriodInDays"],"members":{"Name":{},"RetentionPeriodInDays":{"type":"integer"}}},"S7j":{"type":"structure","members":{"EvaluationResultQualifier":{"type":"structure","members":{"ConfigRuleName":{},"ResourceType":{},"ResourceId":{}}},"OrderingTimestamp":{"type":"timestamp"}}},"S7r":{"type":"structure","members":{"CompliantResourceCount":{"shape":"S24"},"NonCompliantResourceCount":{"shape":"S24"},"ComplianceSummaryTimestamp":{"type":"timestamp"}}},"S88":{"type":"structure","members":{"version":{},"accountId":{},"configurationItemCaptureTime":{"type":"timestamp"},"configurationItemStatus":{},"configurationStateId":{},"configurationItemMD5Hash":{},"arn":{},"resourceType":{},"resourceId":{},"resourceName":{},"awsRegion":{},"availabilityZone":{},"resourceCreationTime":{"type":"timestamp"},"tags":{"shape":"S8a"},"relatedEvents":{"type":"list","member":{}},"relationships":{"type":"list","member":{"type":"structure","members":{"resourceType":{},"resourceId":{},"resourceName":{},"relationshipName":{}}}},"configuration":{},"supplementaryConfiguration":{"shape":"Sl"}}},"S8a":{"type":"map","key":{},"value":{}},"S8k":{"type":"list","member":{"type":"structure","members":{"EvaluationResultIdentifier":{"shape":"S7j"},"ComplianceType":{},"ResultRecordedTime":{"type":"timestamp"},"ConfigRuleInvokedTime":{"type":"timestamp"},"Annotation":{},"ResultToken":{}}}},"S8q":{"type":"list","member":{}},"S9v":{"type":"structure","required":["QueryName"],"members":{"QueryId":{},"QueryArn":{},"QueryName":{},"Description":{},"Expression":{}}},"Sah":{"type":"list","member":{"shape":"Sai"}},"Sai":{"type":"structure","members":{"Key":{},"Value":{}}},"Sam":{"type":"list","member":{"shape":"Sai"}},"Say":{"type":"list","member":{"type":"structure","required":["ComplianceResourceType","ComplianceResourceId","ComplianceType","OrderingTimestamp"],"members":{"ComplianceResourceType":{},"ComplianceResourceId":{},"ComplianceType":{},"Annotation":{},"OrderingTimestamp":{"type":"timestamp"}}}},"Sbq":{"type":"list","member":{}},"Sbr":{"type":"structure","members":{"SelectFields":{"type":"list","member":{"type":"structure","members":{"Name":{}}}}}}}}

/***/ }),
/* 152 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeAggregateComplianceByConfigRules":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken"},"DescribeAggregateComplianceByConformancePacks":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken","result_key":"AggregateComplianceByConformancePacks"},"DescribeAggregationAuthorizations":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken","result_key":"AggregationAuthorizations"},"DescribeComplianceByConfigRule":{"input_token":"NextToken","output_token":"NextToken","result_key":"ComplianceByConfigRules"},"DescribeComplianceByResource":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken","result_key":"ComplianceByResources"},"DescribeConfigRuleEvaluationStatus":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken","result_key":"ConfigRulesEvaluationStatus"},"DescribeConfigRules":{"input_token":"NextToken","output_token":"NextToken","result_key":"ConfigRules"},"DescribeConfigurationAggregatorSourcesStatus":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken","result_key":"AggregatedSourceStatusList"},"DescribeConfigurationAggregators":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken","result_key":"ConfigurationAggregators"},"DescribeConformancePackCompliance":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken"},"DescribeConformancePackStatus":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken","result_key":"ConformancePackStatusDetails"},"DescribeConformancePacks":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken","result_key":"ConformancePackDetails"},"DescribeOrganizationConfigRuleStatuses":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken","result_key":"OrganizationConfigRuleStatuses"},"DescribeOrganizationConfigRules":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken","result_key":"OrganizationConfigRules"},"DescribeOrganizationConformancePackStatuses":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken","result_key":"OrganizationConformancePackStatuses"},"DescribeOrganizationConformancePacks":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken","result_key":"OrganizationConformancePacks"},"DescribePendingAggregationRequests":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken","result_key":"PendingAggregationRequests"},"DescribeRemediationExceptions":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken"},"DescribeRemediationExecutionStatus":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken","result_key":"RemediationExecutionStatuses"},"DescribeRetentionConfigurations":{"input_token":"NextToken","output_token":"NextToken","result_key":"RetentionConfigurations"},"GetAggregateComplianceDetailsByConfigRule":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken","result_key":"AggregateEvaluationResults"},"GetAggregateConfigRuleComplianceSummary":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken"},"GetAggregateConformancePackComplianceSummary":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken"},"GetAggregateDiscoveredResourceCounts":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken"},"GetComplianceDetailsByConfigRule":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken","result_key":"EvaluationResults"},"GetComplianceDetailsByResource":{"input_token":"NextToken","output_token":"NextToken","result_key":"EvaluationResults"},"GetConformancePackComplianceDetails":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken"},"GetConformancePackComplianceSummary":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken","result_key":"ConformancePackComplianceSummaryList"},"GetDiscoveredResourceCounts":{"input_token":"nextToken","limit_key":"limit","output_token":"nextToken"},"GetOrganizationConfigRuleDetailedStatus":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken","result_key":"OrganizationConfigRuleDetailedStatus"},"GetOrganizationConformancePackDetailedStatus":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken","result_key":"OrganizationConformancePackDetailedStatuses"},"GetResourceConfigHistory":{"input_token":"nextToken","limit_key":"limit","output_token":"nextToken","result_key":"configurationItems"},"ListAggregateDiscoveredResources":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken","result_key":"ResourceIdentifiers"},"ListDiscoveredResources":{"input_token":"nextToken","limit_key":"limit","output_token":"nextToken","result_key":"resourceIdentifiers"},"ListStoredQueries":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken"},"ListTagsForResource":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken","result_key":"Tags"},"SelectAggregateResourceConfig":{"input_token":"NextToken","limit_key":"Limit","non_aggregate_keys":["QueryInfo"],"output_token":"NextToken","result_key":"Results"},"SelectResourceConfig":{"input_token":"NextToken","limit_key":"Limit","non_aggregate_keys":["QueryInfo"],"output_token":"NextToken","result_key":"Results"}}}

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['cur'] = {};
	AWS.CUR = Service.defineService('cur', ['2017-01-06']);
	Object.defineProperty(apiLoader.services['cur'], '2017-01-06', {
	  get: function get() {
	    var model = __webpack_require__(154);
	    model.paginators = __webpack_require__(155).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.CUR;


/***/ }),
/* 154 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2017-01-06","endpointPrefix":"cur","jsonVersion":"1.1","protocol":"json","serviceFullName":"AWS Cost and Usage Report Service","serviceId":"Cost and Usage Report Service","signatureVersion":"v4","signingName":"cur","targetPrefix":"AWSOrigamiServiceGatewayService","uid":"cur-2017-01-06"},"operations":{"DeleteReportDefinition":{"input":{"type":"structure","members":{"ReportName":{}}},"output":{"type":"structure","members":{"ResponseMessage":{}}}},"DescribeReportDefinitions":{"input":{"type":"structure","members":{"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"ReportDefinitions":{"type":"list","member":{"shape":"Sa"}},"NextToken":{}}}},"ModifyReportDefinition":{"input":{"type":"structure","required":["ReportName","ReportDefinition"],"members":{"ReportName":{},"ReportDefinition":{"shape":"Sa"}}},"output":{"type":"structure","members":{}}},"PutReportDefinition":{"input":{"type":"structure","required":["ReportDefinition"],"members":{"ReportDefinition":{"shape":"Sa"}}},"output":{"type":"structure","members":{}}}},"shapes":{"Sa":{"type":"structure","required":["ReportName","TimeUnit","Format","Compression","AdditionalSchemaElements","S3Bucket","S3Prefix","S3Region"],"members":{"ReportName":{},"TimeUnit":{},"Format":{},"Compression":{},"AdditionalSchemaElements":{"type":"list","member":{}},"S3Bucket":{},"S3Prefix":{},"S3Region":{},"AdditionalArtifacts":{"type":"list","member":{}},"RefreshClosedReports":{"type":"boolean"},"ReportVersioning":{},"BillingViewArn":{}}}}}

/***/ }),
/* 155 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeReportDefinitions":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"}}}

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['datapipeline'] = {};
	AWS.DataPipeline = Service.defineService('datapipeline', ['2012-10-29']);
	Object.defineProperty(apiLoader.services['datapipeline'], '2012-10-29', {
	  get: function get() {
	    var model = __webpack_require__(157);
	    model.paginators = __webpack_require__(158).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.DataPipeline;


/***/ }),
/* 157 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2012-10-29","endpointPrefix":"datapipeline","jsonVersion":"1.1","protocol":"json","serviceFullName":"AWS Data Pipeline","serviceId":"Data Pipeline","signatureVersion":"v4","targetPrefix":"DataPipeline","uid":"datapipeline-2012-10-29"},"operations":{"ActivatePipeline":{"input":{"type":"structure","required":["pipelineId"],"members":{"pipelineId":{},"parameterValues":{"shape":"S3"},"startTimestamp":{"type":"timestamp"}}},"output":{"type":"structure","members":{}}},"AddTags":{"input":{"type":"structure","required":["pipelineId","tags"],"members":{"pipelineId":{},"tags":{"shape":"Sa"}}},"output":{"type":"structure","members":{}}},"CreatePipeline":{"input":{"type":"structure","required":["name","uniqueId"],"members":{"name":{},"uniqueId":{},"description":{},"tags":{"shape":"Sa"}}},"output":{"type":"structure","required":["pipelineId"],"members":{"pipelineId":{}}}},"DeactivatePipeline":{"input":{"type":"structure","required":["pipelineId"],"members":{"pipelineId":{},"cancelActive":{"type":"boolean"}}},"output":{"type":"structure","members":{}}},"DeletePipeline":{"input":{"type":"structure","required":["pipelineId"],"members":{"pipelineId":{}}}},"DescribeObjects":{"input":{"type":"structure","required":["pipelineId","objectIds"],"members":{"pipelineId":{},"objectIds":{"shape":"Sn"},"evaluateExpressions":{"type":"boolean"},"marker":{}}},"output":{"type":"structure","required":["pipelineObjects"],"members":{"pipelineObjects":{"shape":"Sq"},"marker":{},"hasMoreResults":{"type":"boolean"}}}},"DescribePipelines":{"input":{"type":"structure","required":["pipelineIds"],"members":{"pipelineIds":{"shape":"Sn"}}},"output":{"type":"structure","required":["pipelineDescriptionList"],"members":{"pipelineDescriptionList":{"type":"list","member":{"type":"structure","required":["pipelineId","name","fields"],"members":{"pipelineId":{},"name":{},"fields":{"shape":"Ss"},"description":{},"tags":{"shape":"Sa"}}}}}}},"EvaluateExpression":{"input":{"type":"structure","required":["pipelineId","objectId","expression"],"members":{"pipelineId":{},"objectId":{},"expression":{}}},"output":{"type":"structure","required":["evaluatedExpression"],"members":{"evaluatedExpression":{}}}},"GetPipelineDefinition":{"input":{"type":"structure","required":["pipelineId"],"members":{"pipelineId":{},"version":{}}},"output":{"type":"structure","members":{"pipelineObjects":{"shape":"Sq"},"parameterObjects":{"shape":"S13"},"parameterValues":{"shape":"S3"}}}},"ListPipelines":{"input":{"type":"structure","members":{"marker":{}}},"output":{"type":"structure","required":["pipelineIdList"],"members":{"pipelineIdList":{"type":"list","member":{"type":"structure","members":{"id":{},"name":{}}}},"marker":{},"hasMoreResults":{"type":"boolean"}}}},"PollForTask":{"input":{"type":"structure","required":["workerGroup"],"members":{"workerGroup":{},"hostname":{},"instanceIdentity":{"type":"structure","members":{"document":{},"signature":{}}}}},"output":{"type":"structure","members":{"taskObject":{"type":"structure","members":{"taskId":{},"pipelineId":{},"attemptId":{},"objects":{"type":"map","key":{},"value":{"shape":"Sr"}}}}}}},"PutPipelineDefinition":{"input":{"type":"structure","required":["pipelineId","pipelineObjects"],"members":{"pipelineId":{},"pipelineObjects":{"shape":"Sq"},"parameterObjects":{"shape":"S13"},"parameterValues":{"shape":"S3"}}},"output":{"type":"structure","required":["errored"],"members":{"validationErrors":{"shape":"S1l"},"validationWarnings":{"shape":"S1p"},"errored":{"type":"boolean"}}}},"QueryObjects":{"input":{"type":"structure","required":["pipelineId","sphere"],"members":{"pipelineId":{},"query":{"type":"structure","members":{"selectors":{"type":"list","member":{"type":"structure","members":{"fieldName":{},"operator":{"type":"structure","members":{"type":{},"values":{"shape":"S1x"}}}}}}}},"sphere":{},"marker":{},"limit":{"type":"integer"}}},"output":{"type":"structure","members":{"ids":{"shape":"Sn"},"marker":{},"hasMoreResults":{"type":"boolean"}}}},"RemoveTags":{"input":{"type":"structure","required":["pipelineId","tagKeys"],"members":{"pipelineId":{},"tagKeys":{"shape":"S1x"}}},"output":{"type":"structure","members":{}}},"ReportTaskProgress":{"input":{"type":"structure","required":["taskId"],"members":{"taskId":{},"fields":{"shape":"Ss"}}},"output":{"type":"structure","required":["canceled"],"members":{"canceled":{"type":"boolean"}}}},"ReportTaskRunnerHeartbeat":{"input":{"type":"structure","required":["taskrunnerId"],"members":{"taskrunnerId":{},"workerGroup":{},"hostname":{}}},"output":{"type":"structure","required":["terminate"],"members":{"terminate":{"type":"boolean"}}}},"SetStatus":{"input":{"type":"structure","required":["pipelineId","objectIds","status"],"members":{"pipelineId":{},"objectIds":{"shape":"Sn"},"status":{}}}},"SetTaskStatus":{"input":{"type":"structure","required":["taskId","taskStatus"],"members":{"taskId":{},"taskStatus":{},"errorId":{},"errorMessage":{},"errorStackTrace":{}}},"output":{"type":"structure","members":{}}},"ValidatePipelineDefinition":{"input":{"type":"structure","required":["pipelineId","pipelineObjects"],"members":{"pipelineId":{},"pipelineObjects":{"shape":"Sq"},"parameterObjects":{"shape":"S13"},"parameterValues":{"shape":"S3"}}},"output":{"type":"structure","required":["errored"],"members":{"validationErrors":{"shape":"S1l"},"validationWarnings":{"shape":"S1p"},"errored":{"type":"boolean"}}}}},"shapes":{"S3":{"type":"list","member":{"type":"structure","required":["id","stringValue"],"members":{"id":{},"stringValue":{}}}},"Sa":{"type":"list","member":{"type":"structure","required":["key","value"],"members":{"key":{},"value":{}}}},"Sn":{"type":"list","member":{}},"Sq":{"type":"list","member":{"shape":"Sr"}},"Sr":{"type":"structure","required":["id","name","fields"],"members":{"id":{},"name":{},"fields":{"shape":"Ss"}}},"Ss":{"type":"list","member":{"type":"structure","required":["key"],"members":{"key":{},"stringValue":{},"refValue":{}}}},"S13":{"type":"list","member":{"type":"structure","required":["id","attributes"],"members":{"id":{},"attributes":{"type":"list","member":{"type":"structure","required":["key","stringValue"],"members":{"key":{},"stringValue":{}}}}}}},"S1l":{"type":"list","member":{"type":"structure","members":{"id":{},"errors":{"shape":"S1n"}}}},"S1n":{"type":"list","member":{}},"S1p":{"type":"list","member":{"type":"structure","members":{"id":{},"warnings":{"shape":"S1n"}}}},"S1x":{"type":"list","member":{}}}}

/***/ }),
/* 158 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeObjects":{"input_token":"marker","more_results":"hasMoreResults","output_token":"marker","result_key":"pipelineObjects"},"DescribePipelines":{"result_key":"pipelineDescriptionList"},"ListPipelines":{"input_token":"marker","more_results":"hasMoreResults","output_token":"marker","result_key":"pipelineIdList"},"QueryObjects":{"input_token":"marker","limit_key":"limit","more_results":"hasMoreResults","output_token":"marker","result_key":"ids"}}}

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['devicefarm'] = {};
	AWS.DeviceFarm = Service.defineService('devicefarm', ['2015-06-23']);
	Object.defineProperty(apiLoader.services['devicefarm'], '2015-06-23', {
	  get: function get() {
	    var model = __webpack_require__(160);
	    model.paginators = __webpack_require__(161).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.DeviceFarm;


/***/ }),
/* 160 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-06-23","endpointPrefix":"devicefarm","jsonVersion":"1.1","protocol":"json","serviceFullName":"AWS Device Farm","serviceId":"Device Farm","signatureVersion":"v4","targetPrefix":"DeviceFarm_20150623","uid":"devicefarm-2015-06-23"},"operations":{"CreateDevicePool":{"input":{"type":"structure","required":["projectArn","name","rules"],"members":{"projectArn":{},"name":{},"description":{},"rules":{"shape":"S5"},"maxDevices":{"type":"integer"}}},"output":{"type":"structure","members":{"devicePool":{"shape":"Sc"}}}},"CreateInstanceProfile":{"input":{"type":"structure","required":["name"],"members":{"name":{},"description":{},"packageCleanup":{"type":"boolean"},"excludeAppPackagesFromCleanup":{"shape":"Sg"},"rebootAfterUse":{"type":"boolean"}}},"output":{"type":"structure","members":{"instanceProfile":{"shape":"Si"}}}},"CreateNetworkProfile":{"input":{"type":"structure","required":["projectArn","name"],"members":{"projectArn":{},"name":{},"description":{},"type":{},"uplinkBandwidthBits":{"type":"long"},"downlinkBandwidthBits":{"type":"long"},"uplinkDelayMs":{"type":"long"},"downlinkDelayMs":{"type":"long"},"uplinkJitterMs":{"type":"long"},"downlinkJitterMs":{"type":"long"},"uplinkLossPercent":{"type":"integer"},"downlinkLossPercent":{"type":"integer"}}},"output":{"type":"structure","members":{"networkProfile":{"shape":"So"}}}},"CreateProject":{"input":{"type":"structure","required":["name"],"members":{"name":{},"defaultJobTimeoutMinutes":{"type":"integer"}}},"output":{"type":"structure","members":{"project":{"shape":"Ss"}}}},"CreateRemoteAccessSession":{"input":{"type":"structure","required":["projectArn","deviceArn"],"members":{"projectArn":{},"deviceArn":{},"instanceArn":{},"sshPublicKey":{},"remoteDebugEnabled":{"type":"boolean"},"remoteRecordEnabled":{"type":"boolean"},"remoteRecordAppArn":{},"name":{},"clientId":{},"configuration":{"type":"structure","members":{"billingMethod":{},"vpceConfigurationArns":{"shape":"Sz"}}},"interactionMode":{},"skipAppResign":{"type":"boolean"}}},"output":{"type":"structure","members":{"remoteAccessSession":{"shape":"S12"}}}},"CreateTestGridProject":{"input":{"type":"structure","required":["name"],"members":{"name":{},"description":{},"vpcConfig":{"shape":"S1m"}}},"output":{"type":"structure","members":{"testGridProject":{"shape":"S1r"}}}},"CreateTestGridUrl":{"input":{"type":"structure","required":["projectArn","expiresInSeconds"],"members":{"projectArn":{},"expiresInSeconds":{"type":"integer"}}},"output":{"type":"structure","members":{"url":{"shape":"S1w"},"expires":{"type":"timestamp"}}}},"CreateUpload":{"input":{"type":"structure","required":["projectArn","name","type"],"members":{"projectArn":{},"name":{},"type":{},"contentType":{}}},"output":{"type":"structure","members":{"upload":{"shape":"S21"}}}},"CreateVPCEConfiguration":{"input":{"type":"structure","required":["vpceConfigurationName","vpceServiceName","serviceDnsName"],"members":{"vpceConfigurationName":{},"vpceServiceName":{},"serviceDnsName":{},"vpceConfigurationDescription":{}}},"output":{"type":"structure","members":{"vpceConfiguration":{"shape":"S2c"}}}},"DeleteDevicePool":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{}}},"DeleteInstanceProfile":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{}}},"DeleteNetworkProfile":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{}}},"DeleteProject":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{}}},"DeleteRemoteAccessSession":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{}}},"DeleteRun":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{}}},"DeleteTestGridProject":{"input":{"type":"structure","required":["projectArn"],"members":{"projectArn":{}}},"output":{"type":"structure","members":{}}},"DeleteUpload":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{}}},"DeleteVPCEConfiguration":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{}}},"GetAccountSettings":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"accountSettings":{"type":"structure","members":{"awsAccountNumber":{},"unmeteredDevices":{"shape":"S2z"},"unmeteredRemoteAccessDevices":{"shape":"S2z"},"maxJobTimeoutMinutes":{"type":"integer"},"trialMinutes":{"type":"structure","members":{"total":{"type":"double"},"remaining":{"type":"double"}}},"maxSlots":{"type":"map","key":{},"value":{"type":"integer"}},"defaultJobTimeoutMinutes":{"type":"integer"},"skipAppResign":{"type":"boolean"}}}}}},"GetDevice":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"device":{"shape":"S15"}}}},"GetDeviceInstance":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"deviceInstance":{"shape":"S1c"}}}},"GetDevicePool":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"devicePool":{"shape":"Sc"}}}},"GetDevicePoolCompatibility":{"input":{"type":"structure","required":["devicePoolArn"],"members":{"devicePoolArn":{},"appArn":{},"testType":{},"test":{"shape":"S3a"},"configuration":{"shape":"S3d"}}},"output":{"type":"structure","members":{"compatibleDevices":{"shape":"S3l"},"incompatibleDevices":{"shape":"S3l"}}}},"GetInstanceProfile":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"instanceProfile":{"shape":"Si"}}}},"GetJob":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"job":{"shape":"S3t"}}}},"GetNetworkProfile":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"networkProfile":{"shape":"So"}}}},"GetOfferingStatus":{"input":{"type":"structure","members":{"nextToken":{}}},"output":{"type":"structure","members":{"current":{"shape":"S41"},"nextPeriod":{"shape":"S41"},"nextToken":{}}}},"GetProject":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"project":{"shape":"Ss"}}}},"GetRemoteAccessSession":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"remoteAccessSession":{"shape":"S12"}}}},"GetRun":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"run":{"shape":"S4i"}}}},"GetSuite":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"suite":{"shape":"S4r"}}}},"GetTest":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"test":{"shape":"S4u"}}}},"GetTestGridProject":{"input":{"type":"structure","required":["projectArn"],"members":{"projectArn":{}}},"output":{"type":"structure","members":{"testGridProject":{"shape":"S1r"}}}},"GetTestGridSession":{"input":{"type":"structure","members":{"projectArn":{},"sessionId":{},"sessionArn":{}}},"output":{"type":"structure","members":{"testGridSession":{"shape":"S50"}}}},"GetUpload":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"upload":{"shape":"S21"}}}},"GetVPCEConfiguration":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"vpceConfiguration":{"shape":"S2c"}}}},"InstallToRemoteAccessSession":{"input":{"type":"structure","required":["remoteAccessSessionArn","appArn"],"members":{"remoteAccessSessionArn":{},"appArn":{}}},"output":{"type":"structure","members":{"appUpload":{"shape":"S21"}}}},"ListArtifacts":{"input":{"type":"structure","required":["arn","type"],"members":{"arn":{},"type":{},"nextToken":{}}},"output":{"type":"structure","members":{"artifacts":{"type":"list","member":{"type":"structure","members":{"arn":{},"name":{},"type":{},"extension":{},"url":{}}}},"nextToken":{}}}},"ListDeviceInstances":{"input":{"type":"structure","members":{"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"deviceInstances":{"shape":"S1b"},"nextToken":{}}}},"ListDevicePools":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"type":{},"nextToken":{}}},"output":{"type":"structure","members":{"devicePools":{"type":"list","member":{"shape":"Sc"}},"nextToken":{}}}},"ListDevices":{"input":{"type":"structure","members":{"arn":{},"nextToken":{},"filters":{"shape":"S4l"}}},"output":{"type":"structure","members":{"devices":{"type":"list","member":{"shape":"S15"}},"nextToken":{}}}},"ListInstanceProfiles":{"input":{"type":"structure","members":{"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"instanceProfiles":{"type":"list","member":{"shape":"Si"}},"nextToken":{}}}},"ListJobs":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"nextToken":{}}},"output":{"type":"structure","members":{"jobs":{"type":"list","member":{"shape":"S3t"}},"nextToken":{}}}},"ListNetworkProfiles":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"type":{},"nextToken":{}}},"output":{"type":"structure","members":{"networkProfiles":{"type":"list","member":{"shape":"So"}},"nextToken":{}}}},"ListOfferingPromotions":{"input":{"type":"structure","members":{"nextToken":{}}},"output":{"type":"structure","members":{"offeringPromotions":{"type":"list","member":{"type":"structure","members":{"id":{},"description":{}}}},"nextToken":{}}}},"ListOfferingTransactions":{"input":{"type":"structure","members":{"nextToken":{}}},"output":{"type":"structure","members":{"offeringTransactions":{"type":"list","member":{"shape":"S64"}},"nextToken":{}}}},"ListOfferings":{"input":{"type":"structure","members":{"nextToken":{}}},"output":{"type":"structure","members":{"offerings":{"type":"list","member":{"shape":"S45"}},"nextToken":{}}}},"ListProjects":{"input":{"type":"structure","members":{"arn":{},"nextToken":{}}},"output":{"type":"structure","members":{"projects":{"type":"list","member":{"shape":"Ss"}},"nextToken":{}}}},"ListRemoteAccessSessions":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"nextToken":{}}},"output":{"type":"structure","members":{"remoteAccessSessions":{"type":"list","member":{"shape":"S12"}},"nextToken":{}}}},"ListRuns":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"nextToken":{}}},"output":{"type":"structure","members":{"runs":{"type":"list","member":{"shape":"S4i"}},"nextToken":{}}}},"ListSamples":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"nextToken":{}}},"output":{"type":"structure","members":{"samples":{"type":"list","member":{"type":"structure","members":{"arn":{},"type":{},"url":{}}}},"nextToken":{}}}},"ListSuites":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"nextToken":{}}},"output":{"type":"structure","members":{"suites":{"type":"list","member":{"shape":"S4r"}},"nextToken":{}}}},"ListTagsForResource":{"input":{"type":"structure","required":["ResourceARN"],"members":{"ResourceARN":{}}},"output":{"type":"structure","members":{"Tags":{"shape":"S6s"}}}},"ListTestGridProjects":{"input":{"type":"structure","members":{"maxResult":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"testGridProjects":{"type":"list","member":{"shape":"S1r"}},"nextToken":{}}}},"ListTestGridSessionActions":{"input":{"type":"structure","required":["sessionArn"],"members":{"sessionArn":{},"maxResult":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"actions":{"type":"list","member":{"type":"structure","members":{"action":{},"started":{"type":"timestamp"},"duration":{"type":"long"},"statusCode":{},"requestMethod":{}}}},"nextToken":{}}}},"ListTestGridSessionArtifacts":{"input":{"type":"structure","required":["sessionArn"],"members":{"sessionArn":{},"type":{},"maxResult":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"artifacts":{"type":"list","member":{"type":"structure","members":{"filename":{},"type":{},"url":{"shape":"S1w"}}}},"nextToken":{}}}},"ListTestGridSessions":{"input":{"type":"structure","required":["projectArn"],"members":{"projectArn":{},"status":{},"creationTimeAfter":{"type":"timestamp"},"creationTimeBefore":{"type":"timestamp"},"endTimeAfter":{"type":"timestamp"},"endTimeBefore":{"type":"timestamp"},"maxResult":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"testGridSessions":{"type":"list","member":{"shape":"S50"}},"nextToken":{}}}},"ListTests":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"nextToken":{}}},"output":{"type":"structure","members":{"tests":{"type":"list","member":{"shape":"S4u"}},"nextToken":{}}}},"ListUniqueProblems":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"nextToken":{}}},"output":{"type":"structure","members":{"uniqueProblems":{"type":"map","key":{},"value":{"type":"list","member":{"type":"structure","members":{"message":{},"problems":{"type":"list","member":{"type":"structure","members":{"run":{"shape":"S7n"},"job":{"shape":"S7n"},"suite":{"shape":"S7n"},"test":{"shape":"S7n"},"device":{"shape":"S15"},"result":{},"message":{}}}}}}}},"nextToken":{}}}},"ListUploads":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"type":{},"nextToken":{}}},"output":{"type":"structure","members":{"uploads":{"type":"list","member":{"shape":"S21"}},"nextToken":{}}}},"ListVPCEConfigurations":{"input":{"type":"structure","members":{"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"vpceConfigurations":{"type":"list","member":{"shape":"S2c"}},"nextToken":{}}}},"PurchaseOffering":{"input":{"type":"structure","required":["offeringId","quantity"],"members":{"offeringId":{},"quantity":{"type":"integer"},"offeringPromotionId":{}}},"output":{"type":"structure","members":{"offeringTransaction":{"shape":"S64"}}}},"RenewOffering":{"input":{"type":"structure","required":["offeringId","quantity"],"members":{"offeringId":{},"quantity":{"type":"integer"}}},"output":{"type":"structure","members":{"offeringTransaction":{"shape":"S64"}}}},"ScheduleRun":{"input":{"type":"structure","required":["projectArn","test"],"members":{"projectArn":{},"appArn":{},"devicePoolArn":{},"deviceSelectionConfiguration":{"type":"structure","required":["filters","maxDevices"],"members":{"filters":{"shape":"S4l"},"maxDevices":{"type":"integer"}}},"name":{},"test":{"shape":"S3a"},"configuration":{"shape":"S3d"},"executionConfiguration":{"type":"structure","members":{"jobTimeoutMinutes":{"type":"integer"},"accountsCleanup":{"type":"boolean"},"appPackagesCleanup":{"type":"boolean"},"videoCapture":{"type":"boolean"},"skipAppResign":{"type":"boolean"}}}}},"output":{"type":"structure","members":{"run":{"shape":"S4i"}}}},"StopJob":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"job":{"shape":"S3t"}}}},"StopRemoteAccessSession":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"remoteAccessSession":{"shape":"S12"}}}},"StopRun":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"run":{"shape":"S4i"}}}},"TagResource":{"input":{"type":"structure","required":["ResourceARN","Tags"],"members":{"ResourceARN":{},"Tags":{"shape":"S6s"}}},"output":{"type":"structure","members":{}}},"UntagResource":{"input":{"type":"structure","required":["ResourceARN","TagKeys"],"members":{"ResourceARN":{},"TagKeys":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"UpdateDeviceInstance":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"profileArn":{},"labels":{"shape":"S1d"}}},"output":{"type":"structure","members":{"deviceInstance":{"shape":"S1c"}}}},"UpdateDevicePool":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"name":{},"description":{},"rules":{"shape":"S5"},"maxDevices":{"type":"integer"},"clearMaxDevices":{"type":"boolean"}}},"output":{"type":"structure","members":{"devicePool":{"shape":"Sc"}}}},"UpdateInstanceProfile":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"name":{},"description":{},"packageCleanup":{"type":"boolean"},"excludeAppPackagesFromCleanup":{"shape":"Sg"},"rebootAfterUse":{"type":"boolean"}}},"output":{"type":"structure","members":{"instanceProfile":{"shape":"Si"}}}},"UpdateNetworkProfile":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"name":{},"description":{},"type":{},"uplinkBandwidthBits":{"type":"long"},"downlinkBandwidthBits":{"type":"long"},"uplinkDelayMs":{"type":"long"},"downlinkDelayMs":{"type":"long"},"uplinkJitterMs":{"type":"long"},"downlinkJitterMs":{"type":"long"},"uplinkLossPercent":{"type":"integer"},"downlinkLossPercent":{"type":"integer"}}},"output":{"type":"structure","members":{"networkProfile":{"shape":"So"}}}},"UpdateProject":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"name":{},"defaultJobTimeoutMinutes":{"type":"integer"}}},"output":{"type":"structure","members":{"project":{"shape":"Ss"}}}},"UpdateTestGridProject":{"input":{"type":"structure","required":["projectArn"],"members":{"projectArn":{},"name":{},"description":{},"vpcConfig":{"shape":"S1m"}}},"output":{"type":"structure","members":{"testGridProject":{"shape":"S1r"}}}},"UpdateUpload":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"name":{},"contentType":{},"editContent":{"type":"boolean"}}},"output":{"type":"structure","members":{"upload":{"shape":"S21"}}}},"UpdateVPCEConfiguration":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"vpceConfigurationName":{},"vpceServiceName":{},"serviceDnsName":{},"vpceConfigurationDescription":{}}},"output":{"type":"structure","members":{"vpceConfiguration":{"shape":"S2c"}}}}},"shapes":{"S5":{"type":"list","member":{"type":"structure","members":{"attribute":{},"operator":{},"value":{}}}},"Sc":{"type":"structure","members":{"arn":{},"name":{},"description":{},"type":{},"rules":{"shape":"S5"},"maxDevices":{"type":"integer"}}},"Sg":{"type":"list","member":{}},"Si":{"type":"structure","members":{"arn":{},"packageCleanup":{"type":"boolean"},"excludeAppPackagesFromCleanup":{"shape":"Sg"},"rebootAfterUse":{"type":"boolean"},"name":{},"description":{}}},"So":{"type":"structure","members":{"arn":{},"name":{},"description":{},"type":{},"uplinkBandwidthBits":{"type":"long"},"downlinkBandwidthBits":{"type":"long"},"uplinkDelayMs":{"type":"long"},"downlinkDelayMs":{"type":"long"},"uplinkJitterMs":{"type":"long"},"downlinkJitterMs":{"type":"long"},"uplinkLossPercent":{"type":"integer"},"downlinkLossPercent":{"type":"integer"}}},"Ss":{"type":"structure","members":{"arn":{},"name":{},"defaultJobTimeoutMinutes":{"type":"integer"},"created":{"type":"timestamp"}}},"Sz":{"type":"list","member":{}},"S12":{"type":"structure","members":{"arn":{},"name":{},"created":{"type":"timestamp"},"status":{},"result":{},"message":{},"started":{"type":"timestamp"},"stopped":{"type":"timestamp"},"device":{"shape":"S15"},"instanceArn":{},"remoteDebugEnabled":{"type":"boolean"},"remoteRecordEnabled":{"type":"boolean"},"remoteRecordAppArn":{},"hostAddress":{},"clientId":{},"billingMethod":{},"deviceMinutes":{"shape":"S1h"},"endpoint":{},"deviceUdid":{},"interactionMode":{},"skipAppResign":{"type":"boolean"}}},"S15":{"type":"structure","members":{"arn":{},"name":{},"manufacturer":{},"model":{},"modelId":{},"formFactor":{},"platform":{},"os":{},"cpu":{"type":"structure","members":{"frequency":{},"architecture":{},"clock":{"type":"double"}}},"resolution":{"type":"structure","members":{"width":{"type":"integer"},"height":{"type":"integer"}}},"heapSize":{"type":"long"},"memory":{"type":"long"},"image":{},"carrier":{},"radio":{},"remoteAccessEnabled":{"type":"boolean"},"remoteDebugEnabled":{"type":"boolean"},"fleetType":{},"fleetName":{},"instances":{"shape":"S1b"},"availability":{}}},"S1b":{"type":"list","member":{"shape":"S1c"}},"S1c":{"type":"structure","members":{"arn":{},"deviceArn":{},"labels":{"shape":"S1d"},"status":{},"udid":{},"instanceProfile":{"shape":"Si"}}},"S1d":{"type":"list","member":{}},"S1h":{"type":"structure","members":{"total":{"type":"double"},"metered":{"type":"double"},"unmetered":{"type":"double"}}},"S1m":{"type":"structure","required":["securityGroupIds","subnetIds","vpcId"],"members":{"securityGroupIds":{"type":"list","member":{}},"subnetIds":{"type":"list","member":{}},"vpcId":{}}},"S1r":{"type":"structure","members":{"arn":{},"name":{},"description":{},"vpcConfig":{"shape":"S1m"},"created":{"type":"timestamp"}}},"S1w":{"type":"string","sensitive":true},"S21":{"type":"structure","members":{"arn":{},"name":{},"created":{"type":"timestamp"},"type":{},"status":{},"url":{"type":"string","sensitive":true},"metadata":{},"contentType":{},"message":{},"category":{}}},"S2c":{"type":"structure","members":{"arn":{},"vpceConfigurationName":{},"vpceServiceName":{},"serviceDnsName":{},"vpceConfigurationDescription":{}}},"S2z":{"type":"map","key":{},"value":{"type":"integer"}},"S3a":{"type":"structure","required":["type"],"members":{"type":{},"testPackageArn":{},"testSpecArn":{},"filter":{},"parameters":{"type":"map","key":{},"value":{}}}},"S3d":{"type":"structure","members":{"extraDataPackageArn":{},"networkProfileArn":{},"locale":{},"location":{"shape":"S3e"},"vpceConfigurationArns":{"shape":"Sz"},"customerArtifactPaths":{"shape":"S3f"},"radios":{"shape":"S3j"},"auxiliaryApps":{"shape":"Sz"},"billingMethod":{}}},"S3e":{"type":"structure","required":["latitude","longitude"],"members":{"latitude":{"type":"double"},"longitude":{"type":"double"}}},"S3f":{"type":"structure","members":{"iosPaths":{"type":"list","member":{}},"androidPaths":{"type":"list","member":{}},"deviceHostPaths":{"type":"list","member":{}}}},"S3j":{"type":"structure","members":{"wifi":{"type":"boolean"},"bluetooth":{"type":"boolean"},"nfc":{"type":"boolean"},"gps":{"type":"boolean"}}},"S3l":{"type":"list","member":{"type":"structure","members":{"device":{"shape":"S15"},"compatible":{"type":"boolean"},"incompatibilityMessages":{"type":"list","member":{"type":"structure","members":{"message":{},"type":{}}}}}}},"S3t":{"type":"structure","members":{"arn":{},"name":{},"type":{},"created":{"type":"timestamp"},"status":{},"result":{},"started":{"type":"timestamp"},"stopped":{"type":"timestamp"},"counters":{"shape":"S3u"},"message":{},"device":{"shape":"S15"},"instanceArn":{},"deviceMinutes":{"shape":"S1h"},"videoEndpoint":{},"videoCapture":{"type":"boolean"}}},"S3u":{"type":"structure","members":{"total":{"type":"integer"},"passed":{"type":"integer"},"failed":{"type":"integer"},"warned":{"type":"integer"},"errored":{"type":"integer"},"stopped":{"type":"integer"},"skipped":{"type":"integer"}}},"S41":{"type":"map","key":{},"value":{"shape":"S43"}},"S43":{"type":"structure","members":{"type":{},"offering":{"shape":"S45"},"quantity":{"type":"integer"},"effectiveOn":{"type":"timestamp"}}},"S45":{"type":"structure","members":{"id":{},"description":{},"type":{},"platform":{},"recurringCharges":{"type":"list","member":{"type":"structure","members":{"cost":{"shape":"S49"},"frequency":{}}}}}},"S49":{"type":"structure","members":{"amount":{"type":"double"},"currencyCode":{}}},"S4i":{"type":"structure","members":{"arn":{},"name":{},"type":{},"platform":{},"created":{"type":"timestamp"},"status":{},"result":{},"started":{"type":"timestamp"},"stopped":{"type":"timestamp"},"counters":{"shape":"S3u"},"message":{},"totalJobs":{"type":"integer"},"completedJobs":{"type":"integer"},"billingMethod":{},"deviceMinutes":{"shape":"S1h"},"networkProfile":{"shape":"So"},"parsingResultUrl":{},"resultCode":{},"seed":{"type":"integer"},"appUpload":{},"eventCount":{"type":"integer"},"jobTimeoutMinutes":{"type":"integer"},"devicePoolArn":{},"locale":{},"radios":{"shape":"S3j"},"location":{"shape":"S3e"},"customerArtifactPaths":{"shape":"S3f"},"webUrl":{},"skipAppResign":{"type":"boolean"},"testSpecArn":{},"deviceSelectionResult":{"type":"structure","members":{"filters":{"shape":"S4l"},"matchedDevicesCount":{"type":"integer"},"maxDevices":{"type":"integer"}}}}},"S4l":{"type":"list","member":{"type":"structure","required":["attribute","operator","values"],"members":{"attribute":{},"operator":{},"values":{"type":"list","member":{}}}}},"S4r":{"type":"structure","members":{"arn":{},"name":{},"type":{},"created":{"type":"timestamp"},"status":{},"result":{},"started":{"type":"timestamp"},"stopped":{"type":"timestamp"},"counters":{"shape":"S3u"},"message":{},"deviceMinutes":{"shape":"S1h"}}},"S4u":{"type":"structure","members":{"arn":{},"name":{},"type":{},"created":{"type":"timestamp"},"status":{},"result":{},"started":{"type":"timestamp"},"stopped":{"type":"timestamp"},"counters":{"shape":"S3u"},"message":{},"deviceMinutes":{"shape":"S1h"}}},"S50":{"type":"structure","members":{"arn":{},"status":{},"created":{"type":"timestamp"},"ended":{"type":"timestamp"},"billingMinutes":{"type":"double"},"seleniumProperties":{}}},"S64":{"type":"structure","members":{"offeringStatus":{"shape":"S43"},"transactionId":{},"offeringPromotionId":{},"createdOn":{"type":"timestamp"},"cost":{"shape":"S49"}}},"S6s":{"type":"list","member":{"type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{}}}},"S7n":{"type":"structure","members":{"arn":{},"name":{}}}}}

/***/ }),
/* 161 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"GetOfferingStatus":{"input_token":"nextToken","output_token":"nextToken","result_key":["current","nextPeriod"]},"ListArtifacts":{"input_token":"nextToken","output_token":"nextToken","result_key":"artifacts"},"ListDevicePools":{"input_token":"nextToken","output_token":"nextToken","result_key":"devicePools"},"ListDevices":{"input_token":"nextToken","output_token":"nextToken","result_key":"devices"},"ListJobs":{"input_token":"nextToken","output_token":"nextToken","result_key":"jobs"},"ListOfferingTransactions":{"input_token":"nextToken","output_token":"nextToken","result_key":"offeringTransactions"},"ListOfferings":{"input_token":"nextToken","output_token":"nextToken","result_key":"offerings"},"ListProjects":{"input_token":"nextToken","output_token":"nextToken","result_key":"projects"},"ListRuns":{"input_token":"nextToken","output_token":"nextToken","result_key":"runs"},"ListSamples":{"input_token":"nextToken","output_token":"nextToken","result_key":"samples"},"ListSuites":{"input_token":"nextToken","output_token":"nextToken","result_key":"suites"},"ListTestGridProjects":{"input_token":"nextToken","limit_key":"maxResult","output_token":"nextToken"},"ListTestGridSessionActions":{"input_token":"nextToken","limit_key":"maxResult","output_token":"nextToken"},"ListTestGridSessionArtifacts":{"input_token":"nextToken","limit_key":"maxResult","output_token":"nextToken"},"ListTestGridSessions":{"input_token":"nextToken","limit_key":"maxResult","output_token":"nextToken"},"ListTests":{"input_token":"nextToken","output_token":"nextToken","result_key":"tests"},"ListUniqueProblems":{"input_token":"nextToken","output_token":"nextToken","result_key":"uniqueProblems"},"ListUploads":{"input_token":"nextToken","output_token":"nextToken","result_key":"uploads"}}}

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['directconnect'] = {};
	AWS.DirectConnect = Service.defineService('directconnect', ['2012-10-25']);
	Object.defineProperty(apiLoader.services['directconnect'], '2012-10-25', {
	  get: function get() {
	    var model = __webpack_require__(163);
	    model.paginators = __webpack_require__(164).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.DirectConnect;


/***/ }),
/* 163 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2012-10-25","endpointPrefix":"directconnect","jsonVersion":"1.1","protocol":"json","serviceFullName":"AWS Direct Connect","serviceId":"Direct Connect","signatureVersion":"v4","targetPrefix":"OvertureService","uid":"directconnect-2012-10-25"},"operations":{"AcceptDirectConnectGatewayAssociationProposal":{"input":{"type":"structure","required":["directConnectGatewayId","proposalId","associatedGatewayOwnerAccount"],"members":{"directConnectGatewayId":{},"proposalId":{},"associatedGatewayOwnerAccount":{},"overrideAllowedPrefixesToDirectConnectGateway":{"shape":"S5"}}},"output":{"type":"structure","members":{"directConnectGatewayAssociation":{"shape":"S9"}}}},"AllocateConnectionOnInterconnect":{"input":{"type":"structure","required":["bandwidth","connectionName","ownerAccount","interconnectId","vlan"],"members":{"bandwidth":{},"connectionName":{},"ownerAccount":{},"interconnectId":{},"vlan":{"type":"integer"}}},"output":{"shape":"So"},"deprecated":true},"AllocateHostedConnection":{"input":{"type":"structure","required":["connectionId","ownerAccount","bandwidth","connectionName","vlan"],"members":{"connectionId":{},"ownerAccount":{},"bandwidth":{},"connectionName":{},"vlan":{"type":"integer"},"tags":{"shape":"S10"}}},"output":{"shape":"So"}},"AllocatePrivateVirtualInterface":{"input":{"type":"structure","required":["connectionId","ownerAccount","newPrivateVirtualInterfaceAllocation"],"members":{"connectionId":{},"ownerAccount":{},"newPrivateVirtualInterfaceAllocation":{"type":"structure","required":["virtualInterfaceName","vlan","asn"],"members":{"virtualInterfaceName":{},"vlan":{"type":"integer"},"asn":{"type":"integer"},"mtu":{"type":"integer"},"authKey":{},"amazonAddress":{},"addressFamily":{},"customerAddress":{},"tags":{"shape":"S10"}}}}},"output":{"shape":"S1o"}},"AllocatePublicVirtualInterface":{"input":{"type":"structure","required":["connectionId","ownerAccount","newPublicVirtualInterfaceAllocation"],"members":{"connectionId":{},"ownerAccount":{},"newPublicVirtualInterfaceAllocation":{"type":"structure","required":["virtualInterfaceName","vlan","asn"],"members":{"virtualInterfaceName":{},"vlan":{"type":"integer"},"asn":{"type":"integer"},"authKey":{},"amazonAddress":{},"customerAddress":{},"addressFamily":{},"routeFilterPrefixes":{"shape":"S5"},"tags":{"shape":"S10"}}}}},"output":{"shape":"S1o"}},"AllocateTransitVirtualInterface":{"input":{"type":"structure","required":["connectionId","ownerAccount","newTransitVirtualInterfaceAllocation"],"members":{"connectionId":{},"ownerAccount":{},"newTransitVirtualInterfaceAllocation":{"type":"structure","members":{"virtualInterfaceName":{},"vlan":{"type":"integer"},"asn":{"type":"integer"},"mtu":{"type":"integer"},"authKey":{},"amazonAddress":{},"customerAddress":{},"addressFamily":{},"tags":{"shape":"S10"}}}}},"output":{"type":"structure","members":{"virtualInterface":{"shape":"S1o"}}}},"AssociateConnectionWithLag":{"input":{"type":"structure","required":["connectionId","lagId"],"members":{"connectionId":{},"lagId":{}}},"output":{"shape":"So"}},"AssociateHostedConnection":{"input":{"type":"structure","required":["connectionId","parentConnectionId"],"members":{"connectionId":{},"parentConnectionId":{}}},"output":{"shape":"So"}},"AssociateMacSecKey":{"input":{"type":"structure","required":["connectionId"],"members":{"connectionId":{},"secretARN":{},"ckn":{},"cak":{}}},"output":{"type":"structure","members":{"connectionId":{},"macSecKeys":{"shape":"S18"}}}},"AssociateVirtualInterface":{"input":{"type":"structure","required":["virtualInterfaceId","connectionId"],"members":{"virtualInterfaceId":{},"connectionId":{}}},"output":{"shape":"S1o"}},"ConfirmConnection":{"input":{"type":"structure","required":["connectionId"],"members":{"connectionId":{}}},"output":{"type":"structure","members":{"connectionState":{}}}},"ConfirmPrivateVirtualInterface":{"input":{"type":"structure","required":["virtualInterfaceId"],"members":{"virtualInterfaceId":{},"virtualGatewayId":{},"directConnectGatewayId":{}}},"output":{"type":"structure","members":{"virtualInterfaceState":{}}}},"ConfirmPublicVirtualInterface":{"input":{"type":"structure","required":["virtualInterfaceId"],"members":{"virtualInterfaceId":{}}},"output":{"type":"structure","members":{"virtualInterfaceState":{}}}},"ConfirmTransitVirtualInterface":{"input":{"type":"structure","required":["virtualInterfaceId","directConnectGatewayId"],"members":{"virtualInterfaceId":{},"directConnectGatewayId":{}}},"output":{"type":"structure","members":{"virtualInterfaceState":{}}}},"CreateBGPPeer":{"input":{"type":"structure","members":{"virtualInterfaceId":{},"newBGPPeer":{"type":"structure","members":{"asn":{"type":"integer"},"authKey":{},"addressFamily":{},"amazonAddress":{},"customerAddress":{}}}}},"output":{"type":"structure","members":{"virtualInterface":{"shape":"S1o"}}}},"CreateConnection":{"input":{"type":"structure","required":["location","bandwidth","connectionName"],"members":{"location":{},"bandwidth":{},"connectionName":{},"lagId":{},"tags":{"shape":"S10"},"providerName":{},"requestMACSec":{"type":"boolean"}}},"output":{"shape":"So"}},"CreateDirectConnectGateway":{"input":{"type":"structure","required":["directConnectGatewayName"],"members":{"directConnectGatewayName":{},"amazonSideAsn":{"type":"long"}}},"output":{"type":"structure","members":{"directConnectGateway":{"shape":"S2q"}}}},"CreateDirectConnectGatewayAssociation":{"input":{"type":"structure","required":["directConnectGatewayId"],"members":{"directConnectGatewayId":{},"gatewayId":{},"addAllowedPrefixesToDirectConnectGateway":{"shape":"S5"},"virtualGatewayId":{}}},"output":{"type":"structure","members":{"directConnectGatewayAssociation":{"shape":"S9"}}}},"CreateDirectConnectGatewayAssociationProposal":{"input":{"type":"structure","required":["directConnectGatewayId","directConnectGatewayOwnerAccount","gatewayId"],"members":{"directConnectGatewayId":{},"directConnectGatewayOwnerAccount":{},"gatewayId":{},"addAllowedPrefixesToDirectConnectGateway":{"shape":"S5"},"removeAllowedPrefixesToDirectConnectGateway":{"shape":"S5"}}},"output":{"type":"structure","members":{"directConnectGatewayAssociationProposal":{"shape":"S2x"}}}},"CreateInterconnect":{"input":{"type":"structure","required":["interconnectName","bandwidth","location"],"members":{"interconnectName":{},"bandwidth":{},"location":{},"lagId":{},"tags":{"shape":"S10"},"providerName":{}}},"output":{"shape":"S31"}},"CreateLag":{"input":{"type":"structure","required":["numberOfConnections","location","connectionsBandwidth","lagName"],"members":{"numberOfConnections":{"type":"integer"},"location":{},"connectionsBandwidth":{},"lagName":{},"connectionId":{},"tags":{"shape":"S10"},"childConnectionTags":{"shape":"S10"},"providerName":{},"requestMACSec":{"type":"boolean"}}},"output":{"shape":"S36"}},"CreatePrivateVirtualInterface":{"input":{"type":"structure","required":["connectionId","newPrivateVirtualInterface"],"members":{"connectionId":{},"newPrivateVirtualInterface":{"type":"structure","required":["virtualInterfaceName","vlan","asn"],"members":{"virtualInterfaceName":{},"vlan":{"type":"integer"},"asn":{"type":"integer"},"mtu":{"type":"integer"},"authKey":{},"amazonAddress":{},"customerAddress":{},"addressFamily":{},"virtualGatewayId":{},"directConnectGatewayId":{},"tags":{"shape":"S10"}}}}},"output":{"shape":"S1o"}},"CreatePublicVirtualInterface":{"input":{"type":"structure","required":["connectionId","newPublicVirtualInterface"],"members":{"connectionId":{},"newPublicVirtualInterface":{"type":"structure","required":["virtualInterfaceName","vlan","asn"],"members":{"virtualInterfaceName":{},"vlan":{"type":"integer"},"asn":{"type":"integer"},"authKey":{},"amazonAddress":{},"customerAddress":{},"addressFamily":{},"routeFilterPrefixes":{"shape":"S5"},"tags":{"shape":"S10"}}}}},"output":{"shape":"S1o"}},"CreateTransitVirtualInterface":{"input":{"type":"structure","required":["connectionId","newTransitVirtualInterface"],"members":{"connectionId":{},"newTransitVirtualInterface":{"type":"structure","members":{"virtualInterfaceName":{},"vlan":{"type":"integer"},"asn":{"type":"integer"},"mtu":{"type":"integer"},"authKey":{},"amazonAddress":{},"customerAddress":{},"addressFamily":{},"directConnectGatewayId":{},"tags":{"shape":"S10"}}}}},"output":{"type":"structure","members":{"virtualInterface":{"shape":"S1o"}}}},"DeleteBGPPeer":{"input":{"type":"structure","members":{"virtualInterfaceId":{},"asn":{"type":"integer"},"customerAddress":{},"bgpPeerId":{}}},"output":{"type":"structure","members":{"virtualInterface":{"shape":"S1o"}}}},"DeleteConnection":{"input":{"type":"structure","required":["connectionId"],"members":{"connectionId":{}}},"output":{"shape":"So"}},"DeleteDirectConnectGateway":{"input":{"type":"structure","required":["directConnectGatewayId"],"members":{"directConnectGatewayId":{}}},"output":{"type":"structure","members":{"directConnectGateway":{"shape":"S2q"}}}},"DeleteDirectConnectGatewayAssociation":{"input":{"type":"structure","members":{"associationId":{},"directConnectGatewayId":{},"virtualGatewayId":{}}},"output":{"type":"structure","members":{"directConnectGatewayAssociation":{"shape":"S9"}}}},"DeleteDirectConnectGatewayAssociationProposal":{"input":{"type":"structure","required":["proposalId"],"members":{"proposalId":{}}},"output":{"type":"structure","members":{"directConnectGatewayAssociationProposal":{"shape":"S2x"}}}},"DeleteInterconnect":{"input":{"type":"structure","required":["interconnectId"],"members":{"interconnectId":{}}},"output":{"type":"structure","members":{"interconnectState":{}}}},"DeleteLag":{"input":{"type":"structure","required":["lagId"],"members":{"lagId":{}}},"output":{"shape":"S36"}},"DeleteVirtualInterface":{"input":{"type":"structure","required":["virtualInterfaceId"],"members":{"virtualInterfaceId":{}}},"output":{"type":"structure","members":{"virtualInterfaceState":{}}}},"DescribeConnectionLoa":{"input":{"type":"structure","required":["connectionId"],"members":{"connectionId":{},"providerName":{},"loaContentType":{}}},"output":{"type":"structure","members":{"loa":{"shape":"S3y"}}},"deprecated":true},"DescribeConnections":{"input":{"type":"structure","members":{"connectionId":{}}},"output":{"shape":"S41"}},"DescribeConnectionsOnInterconnect":{"input":{"type":"structure","required":["interconnectId"],"members":{"interconnectId":{}}},"output":{"shape":"S41"},"deprecated":true},"DescribeDirectConnectGatewayAssociationProposals":{"input":{"type":"structure","members":{"directConnectGatewayId":{},"proposalId":{},"associatedGatewayId":{},"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"directConnectGatewayAssociationProposals":{"type":"list","member":{"shape":"S2x"}},"nextToken":{}}}},"DescribeDirectConnectGatewayAssociations":{"input":{"type":"structure","members":{"associationId":{},"associatedGatewayId":{},"directConnectGatewayId":{},"maxResults":{"type":"integer"},"nextToken":{},"virtualGatewayId":{}}},"output":{"type":"structure","members":{"directConnectGatewayAssociations":{"type":"list","member":{"shape":"S9"}},"nextToken":{}}}},"DescribeDirectConnectGatewayAttachments":{"input":{"type":"structure","members":{"directConnectGatewayId":{},"virtualInterfaceId":{},"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"directConnectGatewayAttachments":{"type":"list","member":{"type":"structure","members":{"directConnectGatewayId":{},"virtualInterfaceId":{},"virtualInterfaceRegion":{},"virtualInterfaceOwnerAccount":{},"attachmentState":{},"attachmentType":{},"stateChangeError":{}}}},"nextToken":{}}}},"DescribeDirectConnectGateways":{"input":{"type":"structure","members":{"directConnectGatewayId":{},"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"directConnectGateways":{"type":"list","member":{"shape":"S2q"}},"nextToken":{}}}},"DescribeHostedConnections":{"input":{"type":"structure","required":["connectionId"],"members":{"connectionId":{}}},"output":{"shape":"S41"}},"DescribeInterconnectLoa":{"input":{"type":"structure","required":["interconnectId"],"members":{"interconnectId":{},"providerName":{},"loaContentType":{}}},"output":{"type":"structure","members":{"loa":{"shape":"S3y"}}},"deprecated":true},"DescribeInterconnects":{"input":{"type":"structure","members":{"interconnectId":{}}},"output":{"type":"structure","members":{"interconnects":{"type":"list","member":{"shape":"S31"}}}}},"DescribeLags":{"input":{"type":"structure","members":{"lagId":{}}},"output":{"type":"structure","members":{"lags":{"type":"list","member":{"shape":"S36"}}}}},"DescribeLoa":{"input":{"type":"structure","required":["connectionId"],"members":{"connectionId":{},"providerName":{},"loaContentType":{}}},"output":{"shape":"S3y"}},"DescribeLocations":{"output":{"type":"structure","members":{"locations":{"type":"list","member":{"type":"structure","members":{"locationCode":{},"locationName":{},"region":{},"availablePortSpeeds":{"type":"list","member":{}},"availableProviders":{"type":"list","member":{}},"availableMacSecPortSpeeds":{"type":"list","member":{}}}}}}}},"DescribeTags":{"input":{"type":"structure","required":["resourceArns"],"members":{"resourceArns":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"resourceTags":{"type":"list","member":{"type":"structure","members":{"resourceArn":{},"tags":{"shape":"S10"}}}}}}},"DescribeVirtualGateways":{"output":{"type":"structure","members":{"virtualGateways":{"type":"list","member":{"type":"structure","members":{"virtualGatewayId":{},"virtualGatewayState":{}}}}}}},"DescribeVirtualInterfaces":{"input":{"type":"structure","members":{"connectionId":{},"virtualInterfaceId":{}}},"output":{"type":"structure","members":{"virtualInterfaces":{"type":"list","member":{"shape":"S1o"}}}}},"DisassociateConnectionFromLag":{"input":{"type":"structure","required":["connectionId","lagId"],"members":{"connectionId":{},"lagId":{}}},"output":{"shape":"So"}},"DisassociateMacSecKey":{"input":{"type":"structure","required":["connectionId","secretARN"],"members":{"connectionId":{},"secretARN":{}}},"output":{"type":"structure","members":{"connectionId":{},"macSecKeys":{"shape":"S18"}}}},"ListVirtualInterfaceTestHistory":{"input":{"type":"structure","members":{"testId":{},"virtualInterfaceId":{},"bgpPeers":{"shape":"S5m"},"status":{},"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"virtualInterfaceTestHistory":{"type":"list","member":{"shape":"S5q"}},"nextToken":{}}}},"StartBgpFailoverTest":{"input":{"type":"structure","required":["virtualInterfaceId"],"members":{"virtualInterfaceId":{},"bgpPeers":{"shape":"S5m"},"testDurationInMinutes":{"type":"integer"}}},"output":{"type":"structure","members":{"virtualInterfaceTest":{"shape":"S5q"}}}},"StopBgpFailoverTest":{"input":{"type":"structure","required":["virtualInterfaceId"],"members":{"virtualInterfaceId":{}}},"output":{"type":"structure","members":{"virtualInterfaceTest":{"shape":"S5q"}}}},"TagResource":{"input":{"type":"structure","required":["resourceArn","tags"],"members":{"resourceArn":{},"tags":{"shape":"S10"}}},"output":{"type":"structure","members":{}}},"UntagResource":{"input":{"type":"structure","required":["resourceArn","tagKeys"],"members":{"resourceArn":{},"tagKeys":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"UpdateConnection":{"input":{"type":"structure","required":["connectionId"],"members":{"connectionId":{},"connectionName":{},"encryptionMode":{}}},"output":{"shape":"So"}},"UpdateDirectConnectGatewayAssociation":{"input":{"type":"structure","members":{"associationId":{},"addAllowedPrefixesToDirectConnectGateway":{"shape":"S5"},"removeAllowedPrefixesToDirectConnectGateway":{"shape":"S5"}}},"output":{"type":"structure","members":{"directConnectGatewayAssociation":{"shape":"S9"}}}},"UpdateLag":{"input":{"type":"structure","required":["lagId"],"members":{"lagId":{},"lagName":{},"minimumLinks":{"type":"integer"},"encryptionMode":{}}},"output":{"shape":"S36"}},"UpdateVirtualInterfaceAttributes":{"input":{"type":"structure","required":["virtualInterfaceId"],"members":{"virtualInterfaceId":{},"mtu":{"type":"integer"}}},"output":{"shape":"S1o"}}},"shapes":{"S5":{"type":"list","member":{"type":"structure","members":{"cidr":{}}}},"S9":{"type":"structure","members":{"directConnectGatewayId":{},"directConnectGatewayOwnerAccount":{},"associationState":{},"stateChangeError":{},"associatedGateway":{"shape":"Sc"},"associationId":{},"allowedPrefixesToDirectConnectGateway":{"shape":"S5"},"virtualGatewayId":{},"virtualGatewayRegion":{"type":"string","deprecated":true},"virtualGatewayOwnerAccount":{}}},"Sc":{"type":"structure","members":{"id":{},"type":{},"ownerAccount":{},"region":{}}},"So":{"type":"structure","members":{"ownerAccount":{},"connectionId":{},"connectionName":{},"connectionState":{},"region":{},"location":{},"bandwidth":{},"vlan":{"type":"integer"},"partnerName":{},"loaIssueTime":{"type":"timestamp"},"lagId":{},"awsDevice":{"shape":"Sv"},"jumboFrameCapable":{"type":"boolean"},"awsDeviceV2":{},"awsLogicalDeviceId":{},"hasLogicalRedundancy":{},"tags":{"shape":"S10"},"providerName":{},"macSecCapable":{"type":"boolean"},"portEncryptionStatus":{},"encryptionMode":{},"macSecKeys":{"shape":"S18"}}},"Sv":{"type":"string","deprecated":true},"S10":{"type":"list","member":{"type":"structure","required":["key"],"members":{"key":{},"value":{}}}},"S18":{"type":"list","member":{"type":"structure","members":{"secretARN":{},"ckn":{},"state":{},"startOn":{}}}},"S1o":{"type":"structure","members":{"ownerAccount":{},"virtualInterfaceId":{},"location":{},"connectionId":{},"virtualInterfaceType":{},"virtualInterfaceName":{},"vlan":{"type":"integer"},"asn":{"type":"integer"},"amazonSideAsn":{"type":"long"},"authKey":{},"amazonAddress":{},"customerAddress":{},"addressFamily":{},"virtualInterfaceState":{},"customerRouterConfig":{},"mtu":{"type":"integer"},"jumboFrameCapable":{"type":"boolean"},"virtualGatewayId":{},"directConnectGatewayId":{},"routeFilterPrefixes":{"shape":"S5"},"bgpPeers":{"type":"list","member":{"type":"structure","members":{"bgpPeerId":{},"asn":{"type":"integer"},"authKey":{},"addressFamily":{},"amazonAddress":{},"customerAddress":{},"bgpPeerState":{},"bgpStatus":{},"awsDeviceV2":{},"awsLogicalDeviceId":{}}}},"region":{},"awsDeviceV2":{},"awsLogicalDeviceId":{},"tags":{"shape":"S10"}}},"S2q":{"type":"structure","members":{"directConnectGatewayId":{},"directConnectGatewayName":{},"amazonSideAsn":{"type":"long"},"ownerAccount":{},"directConnectGatewayState":{},"stateChangeError":{}}},"S2x":{"type":"structure","members":{"proposalId":{},"directConnectGatewayId":{},"directConnectGatewayOwnerAccount":{},"proposalState":{},"associatedGateway":{"shape":"Sc"},"existingAllowedPrefixesToDirectConnectGateway":{"shape":"S5"},"requestedAllowedPrefixesToDirectConnectGateway":{"shape":"S5"}}},"S31":{"type":"structure","members":{"interconnectId":{},"interconnectName":{},"interconnectState":{},"region":{},"location":{},"bandwidth":{},"loaIssueTime":{"type":"timestamp"},"lagId":{},"awsDevice":{"shape":"Sv"},"jumboFrameCapable":{"type":"boolean"},"awsDeviceV2":{},"awsLogicalDeviceId":{},"hasLogicalRedundancy":{},"tags":{"shape":"S10"},"providerName":{}}},"S36":{"type":"structure","members":{"connectionsBandwidth":{},"numberOfConnections":{"type":"integer"},"lagId":{},"ownerAccount":{},"lagName":{},"lagState":{},"location":{},"region":{},"minimumLinks":{"type":"integer"},"awsDevice":{"shape":"Sv"},"awsDeviceV2":{},"awsLogicalDeviceId":{},"connections":{"shape":"S38"},"allowsHostedConnections":{"type":"boolean"},"jumboFrameCapable":{"type":"boolean"},"hasLogicalRedundancy":{},"tags":{"shape":"S10"},"providerName":{},"macSecCapable":{"type":"boolean"},"encryptionMode":{},"macSecKeys":{"shape":"S18"}}},"S38":{"type":"list","member":{"shape":"So"}},"S3y":{"type":"structure","members":{"loaContent":{"type":"blob"},"loaContentType":{}}},"S41":{"type":"structure","members":{"connections":{"shape":"S38"}}},"S5m":{"type":"list","member":{}},"S5q":{"type":"structure","members":{"testId":{},"virtualInterfaceId":{},"bgpPeers":{"shape":"S5m"},"status":{},"ownerAccount":{},"testDurationInMinutes":{"type":"integer"},"startTime":{"type":"timestamp"},"endTime":{"type":"timestamp"}}}}}

/***/ }),
/* 164 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeConnections":{"result_key":"connections"},"DescribeConnectionsOnInterconnect":{"result_key":"connections"},"DescribeInterconnects":{"result_key":"interconnects"},"DescribeLocations":{"result_key":"locations"},"DescribeVirtualGateways":{"result_key":"virtualGateways"},"DescribeVirtualInterfaces":{"result_key":"virtualInterfaces"}}}

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['directoryservice'] = {};
	AWS.DirectoryService = Service.defineService('directoryservice', ['2015-04-16']);
	Object.defineProperty(apiLoader.services['directoryservice'], '2015-04-16', {
	  get: function get() {
	    var model = __webpack_require__(166);
	    model.paginators = __webpack_require__(167).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.DirectoryService;


/***/ }),
/* 166 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-04-16","endpointPrefix":"ds","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"Directory Service","serviceFullName":"AWS Directory Service","serviceId":"Directory Service","signatureVersion":"v4","targetPrefix":"DirectoryService_20150416","uid":"ds-2015-04-16"},"operations":{"AcceptSharedDirectory":{"input":{"type":"structure","required":["SharedDirectoryId"],"members":{"SharedDirectoryId":{}}},"output":{"type":"structure","members":{"SharedDirectory":{"shape":"S4"}}}},"AddIpRoutes":{"input":{"type":"structure","required":["DirectoryId","IpRoutes"],"members":{"DirectoryId":{},"IpRoutes":{"type":"list","member":{"type":"structure","members":{"CidrIp":{},"Description":{}}}},"UpdateSecurityGroupForDirectoryControllers":{"type":"boolean"}}},"output":{"type":"structure","members":{}}},"AddRegion":{"input":{"type":"structure","required":["DirectoryId","RegionName","VPCSettings"],"members":{"DirectoryId":{},"RegionName":{},"VPCSettings":{"shape":"Sk"}}},"output":{"type":"structure","members":{}}},"AddTagsToResource":{"input":{"type":"structure","required":["ResourceId","Tags"],"members":{"ResourceId":{},"Tags":{"shape":"Sr"}}},"output":{"type":"structure","members":{}}},"CancelSchemaExtension":{"input":{"type":"structure","required":["DirectoryId","SchemaExtensionId"],"members":{"DirectoryId":{},"SchemaExtensionId":{}}},"output":{"type":"structure","members":{}}},"ConnectDirectory":{"input":{"type":"structure","required":["Name","Password","Size","ConnectSettings"],"members":{"Name":{},"ShortName":{},"Password":{"shape":"S12"},"Description":{},"Size":{},"ConnectSettings":{"type":"structure","required":["VpcId","SubnetIds","CustomerDnsIps","CustomerUserName"],"members":{"VpcId":{},"SubnetIds":{"shape":"Sm"},"CustomerDnsIps":{"shape":"S15"},"CustomerUserName":{}}},"Tags":{"shape":"Sr"}}},"output":{"type":"structure","members":{"DirectoryId":{}}}},"CreateAlias":{"input":{"type":"structure","required":["DirectoryId","Alias"],"members":{"DirectoryId":{},"Alias":{}}},"output":{"type":"structure","members":{"DirectoryId":{},"Alias":{}}}},"CreateComputer":{"input":{"type":"structure","required":["DirectoryId","ComputerName","Password"],"members":{"DirectoryId":{},"ComputerName":{},"Password":{"type":"string","sensitive":true},"OrganizationalUnitDistinguishedName":{},"ComputerAttributes":{"shape":"S1g"}}},"output":{"type":"structure","members":{"Computer":{"type":"structure","members":{"ComputerId":{},"ComputerName":{},"ComputerAttributes":{"shape":"S1g"}}}}}},"CreateConditionalForwarder":{"input":{"type":"structure","required":["DirectoryId","RemoteDomainName","DnsIpAddrs"],"members":{"DirectoryId":{},"RemoteDomainName":{},"DnsIpAddrs":{"shape":"S15"}}},"output":{"type":"structure","members":{}}},"CreateDirectory":{"input":{"type":"structure","required":["Name","Password","Size"],"members":{"Name":{},"ShortName":{},"Password":{"shape":"S1r"},"Description":{},"Size":{},"VpcSettings":{"shape":"Sk"},"Tags":{"shape":"Sr"}}},"output":{"type":"structure","members":{"DirectoryId":{}}}},"CreateLogSubscription":{"input":{"type":"structure","required":["DirectoryId","LogGroupName"],"members":{"DirectoryId":{},"LogGroupName":{}}},"output":{"type":"structure","members":{}}},"CreateMicrosoftAD":{"input":{"type":"structure","required":["Name","Password","VpcSettings"],"members":{"Name":{},"ShortName":{},"Password":{"shape":"S1r"},"Description":{},"VpcSettings":{"shape":"Sk"},"Edition":{},"Tags":{"shape":"Sr"}}},"output":{"type":"structure","members":{"DirectoryId":{}}}},"CreateSnapshot":{"input":{"type":"structure","required":["DirectoryId"],"members":{"DirectoryId":{},"Name":{}}},"output":{"type":"structure","members":{"SnapshotId":{}}}},"CreateTrust":{"input":{"type":"structure","required":["DirectoryId","RemoteDomainName","TrustPassword","TrustDirection"],"members":{"DirectoryId":{},"RemoteDomainName":{},"TrustPassword":{"type":"string","sensitive":true},"TrustDirection":{},"TrustType":{},"ConditionalForwarderIpAddrs":{"shape":"S15"},"SelectiveAuth":{}}},"output":{"type":"structure","members":{"TrustId":{}}}},"DeleteConditionalForwarder":{"input":{"type":"structure","required":["DirectoryId","RemoteDomainName"],"members":{"DirectoryId":{},"RemoteDomainName":{}}},"output":{"type":"structure","members":{}}},"DeleteDirectory":{"input":{"type":"structure","required":["DirectoryId"],"members":{"DirectoryId":{}}},"output":{"type":"structure","members":{"DirectoryId":{}}}},"DeleteLogSubscription":{"input":{"type":"structure","required":["DirectoryId"],"members":{"DirectoryId":{}}},"output":{"type":"structure","members":{}}},"DeleteSnapshot":{"input":{"type":"structure","required":["SnapshotId"],"members":{"SnapshotId":{}}},"output":{"type":"structure","members":{"SnapshotId":{}}}},"DeleteTrust":{"input":{"type":"structure","required":["TrustId"],"members":{"TrustId":{},"DeleteAssociatedConditionalForwarder":{"type":"boolean"}}},"output":{"type":"structure","members":{"TrustId":{}}}},"DeregisterCertificate":{"input":{"type":"structure","required":["DirectoryId","CertificateId"],"members":{"DirectoryId":{},"CertificateId":{}}},"output":{"type":"structure","members":{}}},"DeregisterEventTopic":{"input":{"type":"structure","required":["DirectoryId","TopicName"],"members":{"DirectoryId":{},"TopicName":{}}},"output":{"type":"structure","members":{}}},"DescribeCertificate":{"input":{"type":"structure","required":["DirectoryId","CertificateId"],"members":{"DirectoryId":{},"CertificateId":{}}},"output":{"type":"structure","members":{"Certificate":{"type":"structure","members":{"CertificateId":{},"State":{},"StateReason":{},"CommonName":{},"RegisteredDateTime":{"type":"timestamp"},"ExpiryDateTime":{"type":"timestamp"},"Type":{},"ClientCertAuthSettings":{"shape":"S30"}}}}}},"DescribeConditionalForwarders":{"input":{"type":"structure","required":["DirectoryId"],"members":{"DirectoryId":{},"RemoteDomainNames":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"ConditionalForwarders":{"type":"list","member":{"type":"structure","members":{"RemoteDomainName":{},"DnsIpAddrs":{"shape":"S15"},"ReplicationScope":{}}}}}}},"DescribeDirectories":{"input":{"type":"structure","members":{"DirectoryIds":{"shape":"S39"},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"DirectoryDescriptions":{"type":"list","member":{"type":"structure","members":{"DirectoryId":{},"Name":{},"ShortName":{},"Size":{},"Edition":{},"Alias":{},"AccessUrl":{},"Description":{},"DnsIpAddrs":{"shape":"S15"},"Stage":{},"ShareStatus":{},"ShareMethod":{},"ShareNotes":{"shape":"S8"},"LaunchTime":{"type":"timestamp"},"StageLastUpdatedDateTime":{"type":"timestamp"},"Type":{},"VpcSettings":{"shape":"S3j"},"ConnectSettings":{"type":"structure","members":{"VpcId":{},"SubnetIds":{"shape":"Sm"},"CustomerUserName":{},"SecurityGroupId":{},"AvailabilityZones":{"shape":"S3l"},"ConnectIps":{"type":"list","member":{}}}},"RadiusSettings":{"shape":"S3p"},"RadiusStatus":{},"StageReason":{},"SsoEnabled":{"type":"boolean"},"DesiredNumberOfDomainControllers":{"type":"integer"},"OwnerDirectoryDescription":{"type":"structure","members":{"DirectoryId":{},"AccountId":{},"DnsIpAddrs":{"shape":"S15"},"VpcSettings":{"shape":"S3j"},"RadiusSettings":{"shape":"S3p"},"RadiusStatus":{}}},"RegionsInfo":{"type":"structure","members":{"PrimaryRegion":{},"AdditionalRegions":{"type":"list","member":{}}}}}}},"NextToken":{}}}},"DescribeDomainControllers":{"input":{"type":"structure","required":["DirectoryId"],"members":{"DirectoryId":{},"DomainControllerIds":{"type":"list","member":{}},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"DomainControllers":{"type":"list","member":{"type":"structure","members":{"DirectoryId":{},"DomainControllerId":{},"DnsIpAddr":{},"VpcId":{},"SubnetId":{},"AvailabilityZone":{},"Status":{},"StatusReason":{},"LaunchTime":{"type":"timestamp"},"StatusLastUpdatedDateTime":{"type":"timestamp"}}}},"NextToken":{}}}},"DescribeEventTopics":{"input":{"type":"structure","members":{"DirectoryId":{},"TopicNames":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"EventTopics":{"type":"list","member":{"type":"structure","members":{"DirectoryId":{},"TopicName":{},"TopicArn":{},"CreatedDateTime":{"type":"timestamp"},"Status":{}}}}}}},"DescribeLDAPSSettings":{"input":{"type":"structure","required":["DirectoryId"],"members":{"DirectoryId":{},"Type":{},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"LDAPSSettingsInfo":{"type":"list","member":{"type":"structure","members":{"LDAPSStatus":{},"LDAPSStatusReason":{},"LastUpdatedDateTime":{"type":"timestamp"}}}},"NextToken":{}}}},"DescribeRegions":{"input":{"type":"structure","required":["DirectoryId"],"members":{"DirectoryId":{},"RegionName":{},"NextToken":{}}},"output":{"type":"structure","members":{"RegionsDescription":{"type":"list","member":{"type":"structure","members":{"DirectoryId":{},"RegionName":{},"RegionType":{},"Status":{},"VpcSettings":{"shape":"Sk"},"DesiredNumberOfDomainControllers":{"type":"integer"},"LaunchTime":{"type":"timestamp"},"StatusLastUpdatedDateTime":{"type":"timestamp"},"LastUpdatedDateTime":{"type":"timestamp"}}}},"NextToken":{}}}},"DescribeSharedDirectories":{"input":{"type":"structure","required":["OwnerDirectoryId"],"members":{"OwnerDirectoryId":{},"SharedDirectoryIds":{"shape":"S39"},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"SharedDirectories":{"type":"list","member":{"shape":"S4"}},"NextToken":{}}}},"DescribeSnapshots":{"input":{"type":"structure","members":{"DirectoryId":{},"SnapshotIds":{"type":"list","member":{}},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"Snapshots":{"type":"list","member":{"type":"structure","members":{"DirectoryId":{},"SnapshotId":{},"Type":{},"Name":{},"Status":{},"StartTime":{"type":"timestamp"}}}},"NextToken":{}}}},"DescribeTrusts":{"input":{"type":"structure","members":{"DirectoryId":{},"TrustIds":{"type":"list","member":{}},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"Trusts":{"type":"list","member":{"type":"structure","members":{"DirectoryId":{},"TrustId":{},"RemoteDomainName":{},"TrustType":{},"TrustDirection":{},"TrustState":{},"CreatedDateTime":{"type":"timestamp"},"LastUpdatedDateTime":{"type":"timestamp"},"StateLastUpdatedDateTime":{"type":"timestamp"},"TrustStateReason":{},"SelectiveAuth":{}}}},"NextToken":{}}}},"DisableClientAuthentication":{"input":{"type":"structure","required":["DirectoryId","Type"],"members":{"DirectoryId":{},"Type":{}}},"output":{"type":"structure","members":{}}},"DisableLDAPS":{"input":{"type":"structure","required":["DirectoryId","Type"],"members":{"DirectoryId":{},"Type":{}}},"output":{"type":"structure","members":{}}},"DisableRadius":{"input":{"type":"structure","required":["DirectoryId"],"members":{"DirectoryId":{}}},"output":{"type":"structure","members":{}}},"DisableSso":{"input":{"type":"structure","required":["DirectoryId"],"members":{"DirectoryId":{},"UserName":{},"Password":{"shape":"S12"}}},"output":{"type":"structure","members":{}}},"EnableClientAuthentication":{"input":{"type":"structure","required":["DirectoryId","Type"],"members":{"DirectoryId":{},"Type":{}}},"output":{"type":"structure","members":{}}},"EnableLDAPS":{"input":{"type":"structure","required":["DirectoryId","Type"],"members":{"DirectoryId":{},"Type":{}}},"output":{"type":"structure","members":{}}},"EnableRadius":{"input":{"type":"structure","required":["DirectoryId","RadiusSettings"],"members":{"DirectoryId":{},"RadiusSettings":{"shape":"S3p"}}},"output":{"type":"structure","members":{}}},"EnableSso":{"input":{"type":"structure","required":["DirectoryId"],"members":{"DirectoryId":{},"UserName":{},"Password":{"shape":"S12"}}},"output":{"type":"structure","members":{}}},"GetDirectoryLimits":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"DirectoryLimits":{"type":"structure","members":{"CloudOnlyDirectoriesLimit":{"type":"integer"},"CloudOnlyDirectoriesCurrentCount":{"type":"integer"},"CloudOnlyDirectoriesLimitReached":{"type":"boolean"},"CloudOnlyMicrosoftADLimit":{"type":"integer"},"CloudOnlyMicrosoftADCurrentCount":{"type":"integer"},"CloudOnlyMicrosoftADLimitReached":{"type":"boolean"},"ConnectedDirectoriesLimit":{"type":"integer"},"ConnectedDirectoriesCurrentCount":{"type":"integer"},"ConnectedDirectoriesLimitReached":{"type":"boolean"}}}}}},"GetSnapshotLimits":{"input":{"type":"structure","required":["DirectoryId"],"members":{"DirectoryId":{}}},"output":{"type":"structure","members":{"SnapshotLimits":{"type":"structure","members":{"ManualSnapshotsLimit":{"type":"integer"},"ManualSnapshotsCurrentCount":{"type":"integer"},"ManualSnapshotsLimitReached":{"type":"boolean"}}}}}},"ListCertificates":{"input":{"type":"structure","required":["DirectoryId"],"members":{"DirectoryId":{},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"NextToken":{},"CertificatesInfo":{"type":"list","member":{"type":"structure","members":{"CertificateId":{},"CommonName":{},"State":{},"ExpiryDateTime":{"type":"timestamp"},"Type":{}}}}}}},"ListIpRoutes":{"input":{"type":"structure","required":["DirectoryId"],"members":{"DirectoryId":{},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"IpRoutesInfo":{"type":"list","member":{"type":"structure","members":{"DirectoryId":{},"CidrIp":{},"IpRouteStatusMsg":{},"AddedDateTime":{"type":"timestamp"},"IpRouteStatusReason":{},"Description":{}}}},"NextToken":{}}}},"ListLogSubscriptions":{"input":{"type":"structure","members":{"DirectoryId":{},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"LogSubscriptions":{"type":"list","member":{"type":"structure","members":{"DirectoryId":{},"LogGroupName":{},"SubscriptionCreatedDateTime":{"type":"timestamp"}}}},"NextToken":{}}}},"ListSchemaExtensions":{"input":{"type":"structure","required":["DirectoryId"],"members":{"DirectoryId":{},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"SchemaExtensionsInfo":{"type":"list","member":{"type":"structure","members":{"DirectoryId":{},"SchemaExtensionId":{},"Description":{},"SchemaExtensionStatus":{},"SchemaExtensionStatusReason":{},"StartDateTime":{"type":"timestamp"},"EndDateTime":{"type":"timestamp"}}}},"NextToken":{}}}},"ListTagsForResource":{"input":{"type":"structure","required":["ResourceId"],"members":{"ResourceId":{},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"Tags":{"shape":"Sr"},"NextToken":{}}}},"RegisterCertificate":{"input":{"type":"structure","required":["DirectoryId","CertificateData"],"members":{"DirectoryId":{},"CertificateData":{},"Type":{},"ClientCertAuthSettings":{"shape":"S30"}}},"output":{"type":"structure","members":{"CertificateId":{}}}},"RegisterEventTopic":{"input":{"type":"structure","required":["DirectoryId","TopicName"],"members":{"DirectoryId":{},"TopicName":{}}},"output":{"type":"structure","members":{}}},"RejectSharedDirectory":{"input":{"type":"structure","required":["SharedDirectoryId"],"members":{"SharedDirectoryId":{}}},"output":{"type":"structure","members":{"SharedDirectoryId":{}}}},"RemoveIpRoutes":{"input":{"type":"structure","required":["DirectoryId","CidrIps"],"members":{"DirectoryId":{},"CidrIps":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"RemoveRegion":{"input":{"type":"structure","required":["DirectoryId"],"members":{"DirectoryId":{}}},"output":{"type":"structure","members":{}}},"RemoveTagsFromResource":{"input":{"type":"structure","required":["ResourceId","TagKeys"],"members":{"ResourceId":{},"TagKeys":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"ResetUserPassword":{"input":{"type":"structure","required":["DirectoryId","UserName","NewPassword"],"members":{"DirectoryId":{},"UserName":{},"NewPassword":{"type":"string","sensitive":true}}},"output":{"type":"structure","members":{}}},"RestoreFromSnapshot":{"input":{"type":"structure","required":["SnapshotId"],"members":{"SnapshotId":{}}},"output":{"type":"structure","members":{}}},"ShareDirectory":{"input":{"type":"structure","required":["DirectoryId","ShareTarget","ShareMethod"],"members":{"DirectoryId":{},"ShareNotes":{"shape":"S8"},"ShareTarget":{"type":"structure","required":["Id","Type"],"members":{"Id":{},"Type":{}}},"ShareMethod":{}}},"output":{"type":"structure","members":{"SharedDirectoryId":{}}}},"StartSchemaExtension":{"input":{"type":"structure","required":["DirectoryId","CreateSnapshotBeforeSchemaExtension","LdifContent","Description"],"members":{"DirectoryId":{},"CreateSnapshotBeforeSchemaExtension":{"type":"boolean"},"LdifContent":{},"Description":{}}},"output":{"type":"structure","members":{"SchemaExtensionId":{}}}},"UnshareDirectory":{"input":{"type":"structure","required":["DirectoryId","UnshareTarget"],"members":{"DirectoryId":{},"UnshareTarget":{"type":"structure","required":["Id","Type"],"members":{"Id":{},"Type":{}}}}},"output":{"type":"structure","members":{"SharedDirectoryId":{}}}},"UpdateConditionalForwarder":{"input":{"type":"structure","required":["DirectoryId","RemoteDomainName","DnsIpAddrs"],"members":{"DirectoryId":{},"RemoteDomainName":{},"DnsIpAddrs":{"shape":"S15"}}},"output":{"type":"structure","members":{}}},"UpdateNumberOfDomainControllers":{"input":{"type":"structure","required":["DirectoryId","DesiredNumber"],"members":{"DirectoryId":{},"DesiredNumber":{"type":"integer"}}},"output":{"type":"structure","members":{}}},"UpdateRadius":{"input":{"type":"structure","required":["DirectoryId","RadiusSettings"],"members":{"DirectoryId":{},"RadiusSettings":{"shape":"S3p"}}},"output":{"type":"structure","members":{}}},"UpdateTrust":{"input":{"type":"structure","required":["TrustId"],"members":{"TrustId":{},"SelectiveAuth":{}}},"output":{"type":"structure","members":{"RequestId":{},"TrustId":{}}}},"VerifyTrust":{"input":{"type":"structure","required":["TrustId"],"members":{"TrustId":{}}},"output":{"type":"structure","members":{"TrustId":{}}}}},"shapes":{"S4":{"type":"structure","members":{"OwnerAccountId":{},"OwnerDirectoryId":{},"ShareMethod":{},"SharedAccountId":{},"SharedDirectoryId":{},"ShareStatus":{},"ShareNotes":{"shape":"S8"},"CreatedDateTime":{"type":"timestamp"},"LastUpdatedDateTime":{"type":"timestamp"}}},"S8":{"type":"string","sensitive":true},"Sk":{"type":"structure","required":["VpcId","SubnetIds"],"members":{"VpcId":{},"SubnetIds":{"shape":"Sm"}}},"Sm":{"type":"list","member":{}},"Sr":{"type":"list","member":{"type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{}}}},"S12":{"type":"string","sensitive":true},"S15":{"type":"list","member":{}},"S1g":{"type":"list","member":{"type":"structure","members":{"Name":{},"Value":{}}}},"S1r":{"type":"string","sensitive":true},"S30":{"type":"structure","members":{"OCSPUrl":{}}},"S39":{"type":"list","member":{}},"S3j":{"type":"structure","members":{"VpcId":{},"SubnetIds":{"shape":"Sm"},"SecurityGroupId":{},"AvailabilityZones":{"shape":"S3l"}}},"S3l":{"type":"list","member":{}},"S3p":{"type":"structure","members":{"RadiusServers":{"type":"list","member":{}},"RadiusPort":{"type":"integer"},"RadiusTimeout":{"type":"integer"},"RadiusRetries":{"type":"integer"},"SharedSecret":{"type":"string","sensitive":true},"AuthenticationProtocol":{},"DisplayLabel":{},"UseSameUsername":{"type":"boolean"}}}}}

/***/ }),
/* 167 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeDomainControllers":{"input_token":"NextToken","output_token":"NextToken","limit_key":"Limit"}}}

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['discovery'] = {};
	AWS.Discovery = Service.defineService('discovery', ['2015-11-01']);
	Object.defineProperty(apiLoader.services['discovery'], '2015-11-01', {
	  get: function get() {
	    var model = __webpack_require__(169);
	    model.paginators = __webpack_require__(170).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.Discovery;


/***/ }),
/* 169 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-11-01","endpointPrefix":"discovery","jsonVersion":"1.1","protocol":"json","serviceFullName":"AWS Application Discovery Service","serviceId":"Application Discovery Service","signatureVersion":"v4","targetPrefix":"AWSPoseidonService_V2015_11_01","uid":"discovery-2015-11-01"},"operations":{"AssociateConfigurationItemsToApplication":{"input":{"type":"structure","required":["applicationConfigurationId","configurationIds"],"members":{"applicationConfigurationId":{},"configurationIds":{"shape":"S3"}}},"output":{"type":"structure","members":{}}},"BatchDeleteImportData":{"input":{"type":"structure","required":["importTaskIds"],"members":{"importTaskIds":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"errors":{"type":"list","member":{"type":"structure","members":{"importTaskId":{},"errorCode":{},"errorDescription":{}}}}}}},"CreateApplication":{"input":{"type":"structure","required":["name"],"members":{"name":{},"description":{}}},"output":{"type":"structure","members":{"configurationId":{}}}},"CreateTags":{"input":{"type":"structure","required":["configurationIds","tags"],"members":{"configurationIds":{"shape":"S3"},"tags":{"shape":"Si"}}},"output":{"type":"structure","members":{}}},"DeleteApplications":{"input":{"type":"structure","required":["configurationIds"],"members":{"configurationIds":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"DeleteTags":{"input":{"type":"structure","required":["configurationIds"],"members":{"configurationIds":{"shape":"S3"},"tags":{"shape":"Si"}}},"output":{"type":"structure","members":{}}},"DescribeAgents":{"input":{"type":"structure","members":{"agentIds":{"shape":"St"},"filters":{"shape":"Sv"},"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"agentsInfo":{"type":"list","member":{"type":"structure","members":{"agentId":{},"hostName":{},"agentNetworkInfoList":{"type":"list","member":{"type":"structure","members":{"ipAddress":{},"macAddress":{}}}},"connectorId":{},"version":{},"health":{},"lastHealthPingTime":{},"collectionStatus":{},"agentType":{},"registeredTime":{}}}},"nextToken":{}}}},"DescribeConfigurations":{"input":{"type":"structure","required":["configurationIds"],"members":{"configurationIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"configurations":{"type":"list","member":{"type":"map","key":{},"value":{}}}}}},"DescribeContinuousExports":{"input":{"type":"structure","members":{"exportIds":{"type":"list","member":{}},"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"descriptions":{"type":"list","member":{"type":"structure","members":{"exportId":{},"status":{},"statusDetail":{},"s3Bucket":{},"startTime":{"type":"timestamp"},"stopTime":{"type":"timestamp"},"dataSource":{},"schemaStorageConfig":{"shape":"S1o"}}}},"nextToken":{}}}},"DescribeExportConfigurations":{"input":{"type":"structure","members":{"exportIds":{"shape":"S1r"},"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"exportsInfo":{"shape":"S1t"},"nextToken":{}}},"deprecated":true},"DescribeExportTasks":{"input":{"type":"structure","members":{"exportIds":{"shape":"S1r"},"filters":{"shape":"S21"},"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"exportsInfo":{"shape":"S1t"},"nextToken":{}}}},"DescribeImportTasks":{"input":{"type":"structure","members":{"filters":{"type":"list","member":{"type":"structure","members":{"name":{},"values":{"type":"list","member":{}}}}},"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"nextToken":{},"tasks":{"type":"list","member":{"shape":"S2e"}}}}},"DescribeTags":{"input":{"type":"structure","members":{"filters":{"type":"list","member":{"type":"structure","required":["name","values"],"members":{"name":{},"values":{"shape":"Sx"}}}},"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"tags":{"type":"list","member":{"type":"structure","members":{"configurationType":{},"configurationId":{},"key":{},"value":{},"timeOfCreation":{"type":"timestamp"}}}},"nextToken":{}}}},"DisassociateConfigurationItemsFromApplication":{"input":{"type":"structure","required":["applicationConfigurationId","configurationIds"],"members":{"applicationConfigurationId":{},"configurationIds":{"shape":"S3"}}},"output":{"type":"structure","members":{}}},"ExportConfigurations":{"output":{"type":"structure","members":{"exportId":{}}},"deprecated":true},"GetDiscoverySummary":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"servers":{"type":"long"},"applications":{"type":"long"},"serversMappedToApplications":{"type":"long"},"serversMappedtoTags":{"type":"long"},"agentSummary":{"type":"structure","required":["activeAgents","healthyAgents","blackListedAgents","shutdownAgents","unhealthyAgents","totalAgents","unknownAgents"],"members":{"activeAgents":{"type":"integer"},"healthyAgents":{"type":"integer"},"blackListedAgents":{"type":"integer"},"shutdownAgents":{"type":"integer"},"unhealthyAgents":{"type":"integer"},"totalAgents":{"type":"integer"},"unknownAgents":{"type":"integer"}}},"connectorSummary":{"type":"structure","required":["activeConnectors","healthyConnectors","blackListedConnectors","shutdownConnectors","unhealthyConnectors","totalConnectors","unknownConnectors"],"members":{"activeConnectors":{"type":"integer"},"healthyConnectors":{"type":"integer"},"blackListedConnectors":{"type":"integer"},"shutdownConnectors":{"type":"integer"},"unhealthyConnectors":{"type":"integer"},"totalConnectors":{"type":"integer"},"unknownConnectors":{"type":"integer"}}}}}},"ListConfigurations":{"input":{"type":"structure","required":["configurationType"],"members":{"configurationType":{},"filters":{"shape":"Sv"},"maxResults":{"type":"integer"},"nextToken":{},"orderBy":{"type":"list","member":{"type":"structure","required":["fieldName"],"members":{"fieldName":{},"sortOrder":{}}}}}},"output":{"type":"structure","members":{"configurations":{"type":"list","member":{"type":"map","key":{},"value":{}}},"nextToken":{}}}},"ListServerNeighbors":{"input":{"type":"structure","required":["configurationId"],"members":{"configurationId":{},"portInformationNeeded":{"type":"boolean"},"neighborConfigurationIds":{"shape":"S3"},"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","required":["neighbors"],"members":{"neighbors":{"type":"list","member":{"type":"structure","required":["sourceServerId","destinationServerId","connectionsCount"],"members":{"sourceServerId":{},"destinationServerId":{},"destinationPort":{"type":"integer"},"transportProtocol":{},"connectionsCount":{"type":"long"}}}},"nextToken":{},"knownDependencyCount":{"type":"long"}}}},"StartContinuousExport":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"exportId":{},"s3Bucket":{},"startTime":{"type":"timestamp"},"dataSource":{},"schemaStorageConfig":{"shape":"S1o"}}}},"StartDataCollectionByAgentIds":{"input":{"type":"structure","required":["agentIds"],"members":{"agentIds":{"shape":"St"}}},"output":{"type":"structure","members":{"agentsConfigurationStatus":{"shape":"S3f"}}}},"StartExportTask":{"input":{"type":"structure","members":{"exportDataFormat":{"type":"list","member":{}},"filters":{"shape":"S21"},"startTime":{"type":"timestamp"},"endTime":{"type":"timestamp"}}},"output":{"type":"structure","members":{"exportId":{}}}},"StartImportTask":{"input":{"type":"structure","required":["name","importUrl"],"members":{"clientRequestToken":{"idempotencyToken":true},"name":{},"importUrl":{}}},"output":{"type":"structure","members":{"task":{"shape":"S2e"}}}},"StopContinuousExport":{"input":{"type":"structure","required":["exportId"],"members":{"exportId":{}}},"output":{"type":"structure","members":{"startTime":{"type":"timestamp"},"stopTime":{"type":"timestamp"}}}},"StopDataCollectionByAgentIds":{"input":{"type":"structure","required":["agentIds"],"members":{"agentIds":{"shape":"St"}}},"output":{"type":"structure","members":{"agentsConfigurationStatus":{"shape":"S3f"}}}},"UpdateApplication":{"input":{"type":"structure","required":["configurationId"],"members":{"configurationId":{},"name":{},"description":{}}},"output":{"type":"structure","members":{}}}},"shapes":{"S3":{"type":"list","member":{}},"Si":{"type":"list","member":{"type":"structure","required":["key","value"],"members":{"key":{},"value":{}}}},"St":{"type":"list","member":{}},"Sv":{"type":"list","member":{"type":"structure","required":["name","values","condition"],"members":{"name":{},"values":{"shape":"Sx"},"condition":{}}}},"Sx":{"type":"list","member":{}},"S1o":{"type":"map","key":{},"value":{}},"S1r":{"type":"list","member":{}},"S1t":{"type":"list","member":{"type":"structure","required":["exportId","exportStatus","statusMessage","exportRequestTime"],"members":{"exportId":{},"exportStatus":{},"statusMessage":{},"configurationsDownloadUrl":{},"exportRequestTime":{"type":"timestamp"},"isTruncated":{"type":"boolean"},"requestedStartTime":{"type":"timestamp"},"requestedEndTime":{"type":"timestamp"}}}},"S21":{"type":"list","member":{"type":"structure","required":["name","values","condition"],"members":{"name":{},"values":{"shape":"Sx"},"condition":{}}}},"S2e":{"type":"structure","members":{"importTaskId":{},"clientRequestToken":{},"name":{},"importUrl":{},"status":{},"importRequestTime":{"type":"timestamp"},"importCompletionTime":{"type":"timestamp"},"importDeletedTime":{"type":"timestamp"},"serverImportSuccess":{"type":"integer"},"serverImportFailure":{"type":"integer"},"applicationImportSuccess":{"type":"integer"},"applicationImportFailure":{"type":"integer"},"errorsAndFailedEntriesZip":{}}},"S3f":{"type":"list","member":{"type":"structure","members":{"agentId":{},"operationSucceeded":{"type":"boolean"},"description":{}}}}}}

/***/ }),
/* 170 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeContinuousExports":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults"},"DescribeImportTasks":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults"}}}

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['dms'] = {};
	AWS.DMS = Service.defineService('dms', ['2016-01-01']);
	Object.defineProperty(apiLoader.services['dms'], '2016-01-01', {
	  get: function get() {
	    var model = __webpack_require__(172);
	    model.paginators = __webpack_require__(173).pagination;
	    model.waiters = __webpack_require__(174).waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.DMS;


/***/ }),
/* 172 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-01-01","endpointPrefix":"dms","jsonVersion":"1.1","protocol":"json","serviceFullName":"AWS Database Migration Service","serviceId":"Database Migration Service","signatureVersion":"v4","targetPrefix":"AmazonDMSv20160101","uid":"dms-2016-01-01"},"operations":{"AddTagsToResource":{"input":{"type":"structure","required":["ResourceArn","Tags"],"members":{"ResourceArn":{},"Tags":{"shape":"S3"}}},"output":{"type":"structure","members":{}}},"ApplyPendingMaintenanceAction":{"input":{"type":"structure","required":["ReplicationInstanceArn","ApplyAction","OptInType"],"members":{"ReplicationInstanceArn":{},"ApplyAction":{},"OptInType":{}}},"output":{"type":"structure","members":{"ResourcePendingMaintenanceActions":{"shape":"S8"}}}},"CancelReplicationTaskAssessmentRun":{"input":{"type":"structure","required":["ReplicationTaskAssessmentRunArn"],"members":{"ReplicationTaskAssessmentRunArn":{}}},"output":{"type":"structure","members":{"ReplicationTaskAssessmentRun":{"shape":"Se"}}}},"CreateEndpoint":{"input":{"type":"structure","required":["EndpointIdentifier","EndpointType","EngineName"],"members":{"EndpointIdentifier":{},"EndpointType":{},"EngineName":{},"Username":{},"Password":{"shape":"Sj"},"ServerName":{},"Port":{"type":"integer"},"DatabaseName":{},"ExtraConnectionAttributes":{},"KmsKeyId":{},"Tags":{"shape":"S3"},"CertificateArn":{},"SslMode":{},"ServiceAccessRoleArn":{},"ExternalTableDefinition":{},"DynamoDbSettings":{"shape":"Sm"},"S3Settings":{"shape":"Sn"},"DmsTransferSettings":{"shape":"Sw"},"MongoDbSettings":{"shape":"Sx"},"KinesisSettings":{"shape":"S11"},"KafkaSettings":{"shape":"S13"},"ElasticsearchSettings":{"shape":"S15"},"NeptuneSettings":{"shape":"S16"},"RedshiftSettings":{"shape":"S17"},"PostgreSQLSettings":{"shape":"S18"},"MySQLSettings":{"shape":"S1a"},"OracleSettings":{"shape":"S1c"},"SybaseSettings":{"shape":"S1e"},"MicrosoftSQLServerSettings":{"shape":"S1f"},"IBMDb2Settings":{"shape":"S1h"},"ResourceIdentifier":{},"DocDbSettings":{"shape":"S1i"}}},"output":{"type":"structure","members":{"Endpoint":{"shape":"S1k"}}}},"CreateEventSubscription":{"input":{"type":"structure","required":["SubscriptionName","SnsTopicArn"],"members":{"SubscriptionName":{},"SnsTopicArn":{},"SourceType":{},"EventCategories":{"shape":"S1m"},"SourceIds":{"shape":"S1n"},"Enabled":{"type":"boolean"},"Tags":{"shape":"S3"}}},"output":{"type":"structure","members":{"EventSubscription":{"shape":"S1p"}}}},"CreateReplicationInstance":{"input":{"type":"structure","required":["ReplicationInstanceIdentifier","ReplicationInstanceClass"],"members":{"ReplicationInstanceIdentifier":{},"AllocatedStorage":{"type":"integer"},"ReplicationInstanceClass":{},"VpcSecurityGroupIds":{"shape":"S1s"},"AvailabilityZone":{},"ReplicationSubnetGroupIdentifier":{},"PreferredMaintenanceWindow":{},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AutoMinorVersionUpgrade":{"type":"boolean"},"Tags":{"shape":"S3"},"KmsKeyId":{},"PubliclyAccessible":{"type":"boolean"},"DnsNameServers":{},"ResourceIdentifier":{}}},"output":{"type":"structure","members":{"ReplicationInstance":{"shape":"S1u"}}}},"CreateReplicationSubnetGroup":{"input":{"type":"structure","required":["ReplicationSubnetGroupIdentifier","ReplicationSubnetGroupDescription","SubnetIds"],"members":{"ReplicationSubnetGroupIdentifier":{},"ReplicationSubnetGroupDescription":{},"SubnetIds":{"shape":"S25"},"Tags":{"shape":"S3"}}},"output":{"type":"structure","members":{"ReplicationSubnetGroup":{"shape":"S1x"}}}},"CreateReplicationTask":{"input":{"type":"structure","required":["ReplicationTaskIdentifier","SourceEndpointArn","TargetEndpointArn","ReplicationInstanceArn","MigrationType","TableMappings"],"members":{"ReplicationTaskIdentifier":{},"SourceEndpointArn":{},"TargetEndpointArn":{},"ReplicationInstanceArn":{},"MigrationType":{},"TableMappings":{},"ReplicationTaskSettings":{},"CdcStartTime":{"type":"timestamp"},"CdcStartPosition":{},"CdcStopPosition":{},"Tags":{"shape":"S3"},"TaskData":{},"ResourceIdentifier":{}}},"output":{"type":"structure","members":{"ReplicationTask":{"shape":"S2a"}}}},"DeleteCertificate":{"input":{"type":"structure","required":["CertificateArn"],"members":{"CertificateArn":{}}},"output":{"type":"structure","members":{"Certificate":{"shape":"S2f"}}}},"DeleteConnection":{"input":{"type":"structure","required":["EndpointArn","ReplicationInstanceArn"],"members":{"EndpointArn":{},"ReplicationInstanceArn":{}}},"output":{"type":"structure","members":{"Connection":{"shape":"S2j"}}}},"DeleteEndpoint":{"input":{"type":"structure","required":["EndpointArn"],"members":{"EndpointArn":{}}},"output":{"type":"structure","members":{"Endpoint":{"shape":"S1k"}}}},"DeleteEventSubscription":{"input":{"type":"structure","required":["SubscriptionName"],"members":{"SubscriptionName":{}}},"output":{"type":"structure","members":{"EventSubscription":{"shape":"S1p"}}}},"DeleteReplicationInstance":{"input":{"type":"structure","required":["ReplicationInstanceArn"],"members":{"ReplicationInstanceArn":{}}},"output":{"type":"structure","members":{"ReplicationInstance":{"shape":"S1u"}}}},"DeleteReplicationSubnetGroup":{"input":{"type":"structure","required":["ReplicationSubnetGroupIdentifier"],"members":{"ReplicationSubnetGroupIdentifier":{}}},"output":{"type":"structure","members":{}}},"DeleteReplicationTask":{"input":{"type":"structure","required":["ReplicationTaskArn"],"members":{"ReplicationTaskArn":{}}},"output":{"type":"structure","members":{"ReplicationTask":{"shape":"S2a"}}}},"DeleteReplicationTaskAssessmentRun":{"input":{"type":"structure","required":["ReplicationTaskAssessmentRunArn"],"members":{"ReplicationTaskAssessmentRunArn":{}}},"output":{"type":"structure","members":{"ReplicationTaskAssessmentRun":{"shape":"Se"}}}},"DescribeAccountAttributes":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"AccountQuotas":{"type":"list","member":{"type":"structure","members":{"AccountQuotaName":{},"Used":{"type":"long"},"Max":{"type":"long"}}}},"UniqueAccountIdentifier":{}}}},"DescribeApplicableIndividualAssessments":{"input":{"type":"structure","members":{"ReplicationTaskArn":{},"ReplicationInstanceArn":{},"SourceEngineName":{},"TargetEngineName":{},"MigrationType":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"IndividualAssessmentNames":{"type":"list","member":{}},"Marker":{}}}},"DescribeCertificates":{"input":{"type":"structure","members":{"Filters":{"shape":"S34"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"Marker":{},"Certificates":{"type":"list","member":{"shape":"S2f"}}}}},"DescribeConnections":{"input":{"type":"structure","members":{"Filters":{"shape":"S34"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"Marker":{},"Connections":{"type":"list","member":{"shape":"S2j"}}}}},"DescribeEndpointSettings":{"input":{"type":"structure","required":["EngineName"],"members":{"EngineName":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"Marker":{},"EndpointSettings":{"type":"list","member":{"type":"structure","members":{"Name":{},"Type":{},"EnumValues":{"type":"list","member":{}},"Sensitive":{"type":"boolean"},"Units":{},"Applicability":{},"IntValueMin":{"type":"integer"},"IntValueMax":{"type":"integer"},"DefaultValue":{}}}}}}},"DescribeEndpointTypes":{"input":{"type":"structure","members":{"Filters":{"shape":"S34"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"Marker":{},"SupportedEndpointTypes":{"type":"list","member":{"type":"structure","members":{"EngineName":{},"SupportsCDC":{"type":"boolean"},"EndpointType":{},"ReplicationInstanceEngineMinimumVersion":{},"EngineDisplayName":{}}}}}}},"DescribeEndpoints":{"input":{"type":"structure","members":{"Filters":{"shape":"S34"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"Marker":{},"Endpoints":{"type":"list","member":{"shape":"S1k"}}}}},"DescribeEventCategories":{"input":{"type":"structure","members":{"SourceType":{},"Filters":{"shape":"S34"}}},"output":{"type":"structure","members":{"EventCategoryGroupList":{"type":"list","member":{"type":"structure","members":{"SourceType":{},"EventCategories":{"shape":"S1m"}}}}}}},"DescribeEventSubscriptions":{"input":{"type":"structure","members":{"SubscriptionName":{},"Filters":{"shape":"S34"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"Marker":{},"EventSubscriptionsList":{"type":"list","member":{"shape":"S1p"}}}}},"DescribeEvents":{"input":{"type":"structure","members":{"SourceIdentifier":{},"SourceType":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Duration":{"type":"integer"},"EventCategories":{"shape":"S1m"},"Filters":{"shape":"S34"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"Marker":{},"Events":{"type":"list","member":{"type":"structure","members":{"SourceIdentifier":{},"SourceType":{},"Message":{},"EventCategories":{"shape":"S1m"},"Date":{"type":"timestamp"}}}}}}},"DescribeOrderableReplicationInstances":{"input":{"type":"structure","members":{"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"OrderableReplicationInstances":{"type":"list","member":{"type":"structure","members":{"EngineVersion":{},"ReplicationInstanceClass":{},"StorageType":{},"MinAllocatedStorage":{"type":"integer"},"MaxAllocatedStorage":{"type":"integer"},"DefaultAllocatedStorage":{"type":"integer"},"IncludedAllocatedStorage":{"type":"integer"},"AvailabilityZones":{"type":"list","member":{}},"ReleaseStatus":{}}}},"Marker":{}}}},"DescribePendingMaintenanceActions":{"input":{"type":"structure","members":{"ReplicationInstanceArn":{},"Filters":{"shape":"S34"},"Marker":{},"MaxRecords":{"type":"integer"}}},"output":{"type":"structure","members":{"PendingMaintenanceActions":{"type":"list","member":{"shape":"S8"}},"Marker":{}}}},"DescribeRefreshSchemasStatus":{"input":{"type":"structure","required":["EndpointArn"],"members":{"EndpointArn":{}}},"output":{"type":"structure","members":{"RefreshSchemasStatus":{"shape":"S4c"}}}},"DescribeReplicationInstanceTaskLogs":{"input":{"type":"structure","required":["ReplicationInstanceArn"],"members":{"ReplicationInstanceArn":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"ReplicationInstanceArn":{},"ReplicationInstanceTaskLogs":{"type":"list","member":{"type":"structure","members":{"ReplicationTaskName":{},"ReplicationTaskArn":{},"ReplicationInstanceTaskLogSize":{"type":"long"}}}},"Marker":{}}}},"DescribeReplicationInstances":{"input":{"type":"structure","members":{"Filters":{"shape":"S34"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"Marker":{},"ReplicationInstances":{"type":"list","member":{"shape":"S1u"}}}}},"DescribeReplicationSubnetGroups":{"input":{"type":"structure","members":{"Filters":{"shape":"S34"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"Marker":{},"ReplicationSubnetGroups":{"type":"list","member":{"shape":"S1x"}}}}},"DescribeReplicationTaskAssessmentResults":{"input":{"type":"structure","members":{"ReplicationTaskArn":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"Marker":{},"BucketName":{},"ReplicationTaskAssessmentResults":{"type":"list","member":{"type":"structure","members":{"ReplicationTaskIdentifier":{},"ReplicationTaskArn":{},"ReplicationTaskLastAssessmentDate":{"type":"timestamp"},"AssessmentStatus":{},"AssessmentResultsFile":{},"AssessmentResults":{},"S3ObjectUrl":{}}}}}}},"DescribeReplicationTaskAssessmentRuns":{"input":{"type":"structure","members":{"Filters":{"shape":"S34"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"Marker":{},"ReplicationTaskAssessmentRuns":{"type":"list","member":{"shape":"Se"}}}}},"DescribeReplicationTaskIndividualAssessments":{"input":{"type":"structure","members":{"Filters":{"shape":"S34"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"Marker":{},"ReplicationTaskIndividualAssessments":{"type":"list","member":{"type":"structure","members":{"ReplicationTaskIndividualAssessmentArn":{},"ReplicationTaskAssessmentRunArn":{},"IndividualAssessmentName":{},"Status":{},"ReplicationTaskIndividualAssessmentStartDate":{"type":"timestamp"}}}}}}},"DescribeReplicationTasks":{"input":{"type":"structure","members":{"Filters":{"shape":"S34"},"MaxRecords":{"type":"integer"},"Marker":{},"WithoutSettings":{"type":"boolean"}}},"output":{"type":"structure","members":{"Marker":{},"ReplicationTasks":{"type":"list","member":{"shape":"S2a"}}}}},"DescribeSchemas":{"input":{"type":"structure","required":["EndpointArn"],"members":{"EndpointArn":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"Marker":{},"Schemas":{"type":"list","member":{}}}}},"DescribeTableStatistics":{"input":{"type":"structure","required":["ReplicationTaskArn"],"members":{"ReplicationTaskArn":{},"MaxRecords":{"type":"integer"},"Marker":{},"Filters":{"shape":"S34"}}},"output":{"type":"structure","members":{"ReplicationTaskArn":{},"TableStatistics":{"type":"list","member":{"type":"structure","members":{"SchemaName":{},"TableName":{},"Inserts":{"type":"long"},"Deletes":{"type":"long"},"Updates":{"type":"long"},"Ddls":{"type":"long"},"FullLoadRows":{"type":"long"},"FullLoadCondtnlChkFailedRows":{"type":"long"},"FullLoadErrorRows":{"type":"long"},"FullLoadStartTime":{"type":"timestamp"},"FullLoadEndTime":{"type":"timestamp"},"FullLoadReloaded":{"type":"boolean"},"LastUpdateTime":{"type":"timestamp"},"TableState":{},"ValidationPendingRecords":{"type":"long"},"ValidationFailedRecords":{"type":"long"},"ValidationSuspendedRecords":{"type":"long"},"ValidationState":{},"ValidationStateDetails":{}}}},"Marker":{}}}},"ImportCertificate":{"input":{"type":"structure","required":["CertificateIdentifier"],"members":{"CertificateIdentifier":{},"CertificatePem":{"shape":"Sj"},"CertificateWallet":{"type":"blob"},"Tags":{"shape":"S3"}}},"output":{"type":"structure","members":{"Certificate":{"shape":"S2f"}}}},"ListTagsForResource":{"input":{"type":"structure","required":["ResourceArn"],"members":{"ResourceArn":{}}},"output":{"type":"structure","members":{"TagList":{"shape":"S3"}}}},"ModifyEndpoint":{"input":{"type":"structure","required":["EndpointArn"],"members":{"EndpointArn":{},"EndpointIdentifier":{},"EndpointType":{},"EngineName":{},"Username":{},"Password":{"shape":"Sj"},"ServerName":{},"Port":{"type":"integer"},"DatabaseName":{},"ExtraConnectionAttributes":{},"CertificateArn":{},"SslMode":{},"ServiceAccessRoleArn":{},"ExternalTableDefinition":{},"DynamoDbSettings":{"shape":"Sm"},"S3Settings":{"shape":"Sn"},"DmsTransferSettings":{"shape":"Sw"},"MongoDbSettings":{"shape":"Sx"},"KinesisSettings":{"shape":"S11"},"KafkaSettings":{"shape":"S13"},"ElasticsearchSettings":{"shape":"S15"},"NeptuneSettings":{"shape":"S16"},"RedshiftSettings":{"shape":"S17"},"PostgreSQLSettings":{"shape":"S18"},"MySQLSettings":{"shape":"S1a"},"OracleSettings":{"shape":"S1c"},"SybaseSettings":{"shape":"S1e"},"MicrosoftSQLServerSettings":{"shape":"S1f"},"IBMDb2Settings":{"shape":"S1h"},"DocDbSettings":{"shape":"S1i"},"ExactSettings":{"type":"boolean"}}},"output":{"type":"structure","members":{"Endpoint":{"shape":"S1k"}}}},"ModifyEventSubscription":{"input":{"type":"structure","required":["SubscriptionName"],"members":{"SubscriptionName":{},"SnsTopicArn":{},"SourceType":{},"EventCategories":{"shape":"S1m"},"Enabled":{"type":"boolean"}}},"output":{"type":"structure","members":{"EventSubscription":{"shape":"S1p"}}}},"ModifyReplicationInstance":{"input":{"type":"structure","required":["ReplicationInstanceArn"],"members":{"ReplicationInstanceArn":{},"AllocatedStorage":{"type":"integer"},"ApplyImmediately":{"type":"boolean"},"ReplicationInstanceClass":{},"VpcSecurityGroupIds":{"shape":"S1s"},"PreferredMaintenanceWindow":{},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AllowMajorVersionUpgrade":{"type":"boolean"},"AutoMinorVersionUpgrade":{"type":"boolean"},"ReplicationInstanceIdentifier":{}}},"output":{"type":"structure","members":{"ReplicationInstance":{"shape":"S1u"}}}},"ModifyReplicationSubnetGroup":{"input":{"type":"structure","required":["ReplicationSubnetGroupIdentifier","SubnetIds"],"members":{"ReplicationSubnetGroupIdentifier":{},"ReplicationSubnetGroupDescription":{},"SubnetIds":{"shape":"S25"}}},"output":{"type":"structure","members":{"ReplicationSubnetGroup":{"shape":"S1x"}}}},"ModifyReplicationTask":{"input":{"type":"structure","required":["ReplicationTaskArn"],"members":{"ReplicationTaskArn":{},"ReplicationTaskIdentifier":{},"MigrationType":{},"TableMappings":{},"ReplicationTaskSettings":{},"CdcStartTime":{"type":"timestamp"},"CdcStartPosition":{},"CdcStopPosition":{},"TaskData":{}}},"output":{"type":"structure","members":{"ReplicationTask":{"shape":"S2a"}}}},"MoveReplicationTask":{"input":{"type":"structure","required":["ReplicationTaskArn","TargetReplicationInstanceArn"],"members":{"ReplicationTaskArn":{},"TargetReplicationInstanceArn":{}}},"output":{"type":"structure","members":{"ReplicationTask":{"shape":"S2a"}}}},"RebootReplicationInstance":{"input":{"type":"structure","required":["ReplicationInstanceArn"],"members":{"ReplicationInstanceArn":{},"ForceFailover":{"type":"boolean"}}},"output":{"type":"structure","members":{"ReplicationInstance":{"shape":"S1u"}}}},"RefreshSchemas":{"input":{"type":"structure","required":["EndpointArn","ReplicationInstanceArn"],"members":{"EndpointArn":{},"ReplicationInstanceArn":{}}},"output":{"type":"structure","members":{"RefreshSchemasStatus":{"shape":"S4c"}}}},"ReloadTables":{"input":{"type":"structure","required":["ReplicationTaskArn","TablesToReload"],"members":{"ReplicationTaskArn":{},"TablesToReload":{"type":"list","member":{"type":"structure","required":["SchemaName","TableName"],"members":{"SchemaName":{},"TableName":{}}}},"ReloadOption":{}}},"output":{"type":"structure","members":{"ReplicationTaskArn":{}}}},"RemoveTagsFromResource":{"input":{"type":"structure","required":["ResourceArn","TagKeys"],"members":{"ResourceArn":{},"TagKeys":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"StartReplicationTask":{"input":{"type":"structure","required":["ReplicationTaskArn","StartReplicationTaskType"],"members":{"ReplicationTaskArn":{},"StartReplicationTaskType":{},"CdcStartTime":{"type":"timestamp"},"CdcStartPosition":{},"CdcStopPosition":{}}},"output":{"type":"structure","members":{"ReplicationTask":{"shape":"S2a"}}}},"StartReplicationTaskAssessment":{"input":{"type":"structure","required":["ReplicationTaskArn"],"members":{"ReplicationTaskArn":{}}},"output":{"type":"structure","members":{"ReplicationTask":{"shape":"S2a"}}}},"StartReplicationTaskAssessmentRun":{"input":{"type":"structure","required":["ReplicationTaskArn","ServiceAccessRoleArn","ResultLocationBucket","AssessmentRunName"],"members":{"ReplicationTaskArn":{},"ServiceAccessRoleArn":{},"ResultLocationBucket":{},"ResultLocationFolder":{},"ResultEncryptionMode":{},"ResultKmsKeyArn":{},"AssessmentRunName":{},"IncludeOnly":{"type":"list","member":{}},"Exclude":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"ReplicationTaskAssessmentRun":{"shape":"Se"}}}},"StopReplicationTask":{"input":{"type":"structure","required":["ReplicationTaskArn"],"members":{"ReplicationTaskArn":{}}},"output":{"type":"structure","members":{"ReplicationTask":{"shape":"S2a"}}}},"TestConnection":{"input":{"type":"structure","required":["ReplicationInstanceArn","EndpointArn"],"members":{"ReplicationInstanceArn":{},"EndpointArn":{}}},"output":{"type":"structure","members":{"Connection":{"shape":"S2j"}}}}},"shapes":{"S3":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{}}}},"S8":{"type":"structure","members":{"ResourceIdentifier":{},"PendingMaintenanceActionDetails":{"type":"list","member":{"type":"structure","members":{"Action":{},"AutoAppliedAfterDate":{"type":"timestamp"},"ForcedApplyDate":{"type":"timestamp"},"OptInStatus":{},"CurrentApplyDate":{"type":"timestamp"},"Description":{}}}}}},"Se":{"type":"structure","members":{"ReplicationTaskAssessmentRunArn":{},"ReplicationTaskArn":{},"Status":{},"ReplicationTaskAssessmentRunCreationDate":{"type":"timestamp"},"AssessmentProgress":{"type":"structure","members":{"IndividualAssessmentCount":{"type":"integer"},"IndividualAssessmentCompletedCount":{"type":"integer"}}},"LastFailureMessage":{},"ServiceAccessRoleArn":{},"ResultLocationBucket":{},"ResultLocationFolder":{},"ResultEncryptionMode":{},"ResultKmsKeyArn":{},"AssessmentRunName":{}}},"Sj":{"type":"string","sensitive":true},"Sm":{"type":"structure","required":["ServiceAccessRoleArn"],"members":{"ServiceAccessRoleArn":{}}},"Sn":{"type":"structure","members":{"ServiceAccessRoleArn":{},"ExternalTableDefinition":{},"CsvRowDelimiter":{},"CsvDelimiter":{},"BucketFolder":{},"BucketName":{},"CompressionType":{},"EncryptionMode":{},"ServerSideEncryptionKmsKeyId":{},"DataFormat":{},"EncodingType":{},"DictPageSizeLimit":{"type":"integer"},"RowGroupLength":{"type":"integer"},"DataPageSize":{"type":"integer"},"ParquetVersion":{},"EnableStatistics":{"type":"boolean"},"IncludeOpForFullLoad":{"type":"boolean"},"CdcInsertsOnly":{"type":"boolean"},"TimestampColumnName":{},"ParquetTimestampInMillisecond":{"type":"boolean"},"CdcInsertsAndUpdates":{"type":"boolean"},"DatePartitionEnabled":{"type":"boolean"},"DatePartitionSequence":{},"DatePartitionDelimiter":{},"UseCsvNoSupValue":{"type":"boolean"},"CsvNoSupValue":{},"PreserveTransactions":{"type":"boolean"},"CdcPath":{}}},"Sw":{"type":"structure","members":{"ServiceAccessRoleArn":{},"BucketName":{}}},"Sx":{"type":"structure","members":{"Username":{},"Password":{"shape":"Sj"},"ServerName":{},"Port":{"type":"integer"},"DatabaseName":{},"AuthType":{},"AuthMechanism":{},"NestingLevel":{},"ExtractDocId":{},"DocsToInvestigate":{},"AuthSource":{},"KmsKeyId":{},"SecretsManagerAccessRoleArn":{},"SecretsManagerSecretId":{}}},"S11":{"type":"structure","members":{"StreamArn":{},"MessageFormat":{},"ServiceAccessRoleArn":{},"IncludeTransactionDetails":{"type":"boolean"},"IncludePartitionValue":{"type":"boolean"},"PartitionIncludeSchemaTable":{"type":"boolean"},"IncludeTableAlterOperations":{"type":"boolean"},"IncludeControlDetails":{"type":"boolean"},"IncludeNullAndEmpty":{"type":"boolean"},"NoHexPrefix":{"type":"boolean"}}},"S13":{"type":"structure","members":{"Broker":{},"Topic":{},"MessageFormat":{},"IncludeTransactionDetails":{"type":"boolean"},"IncludePartitionValue":{"type":"boolean"},"PartitionIncludeSchemaTable":{"type":"boolean"},"IncludeTableAlterOperations":{"type":"boolean"},"IncludeControlDetails":{"type":"boolean"},"MessageMaxBytes":{"type":"integer"},"IncludeNullAndEmpty":{"type":"boolean"},"SecurityProtocol":{},"SslClientCertificateArn":{},"SslClientKeyArn":{},"SslClientKeyPassword":{"shape":"Sj"},"SslCaCertificateArn":{},"SaslUsername":{},"SaslPassword":{"shape":"Sj"},"NoHexPrefix":{"type":"boolean"}}},"S15":{"type":"structure","required":["ServiceAccessRoleArn","EndpointUri"],"members":{"ServiceAccessRoleArn":{},"EndpointUri":{},"FullLoadErrorPercentage":{"type":"integer"},"ErrorRetryDuration":{"type":"integer"}}},"S16":{"type":"structure","required":["S3BucketName","S3BucketFolder"],"members":{"ServiceAccessRoleArn":{},"S3BucketName":{},"S3BucketFolder":{},"ErrorRetryDuration":{"type":"integer"},"MaxFileSize":{"type":"integer"},"MaxRetryCount":{"type":"integer"},"IamAuthEnabled":{"type":"boolean"}}},"S17":{"type":"structure","members":{"AcceptAnyDate":{"type":"boolean"},"AfterConnectScript":{},"BucketFolder":{},"BucketName":{},"CaseSensitiveNames":{"type":"boolean"},"CompUpdate":{"type":"boolean"},"ConnectionTimeout":{"type":"integer"},"DatabaseName":{},"DateFormat":{},"EmptyAsNull":{"type":"boolean"},"EncryptionMode":{},"ExplicitIds":{"type":"boolean"},"FileTransferUploadStreams":{"type":"integer"},"LoadTimeout":{"type":"integer"},"MaxFileSize":{"type":"integer"},"Password":{"shape":"Sj"},"Port":{"type":"integer"},"RemoveQuotes":{"type":"boolean"},"ReplaceInvalidChars":{},"ReplaceChars":{},"ServerName":{},"ServiceAccessRoleArn":{},"ServerSideEncryptionKmsKeyId":{},"TimeFormat":{},"TrimBlanks":{"type":"boolean"},"TruncateColumns":{"type":"boolean"},"Username":{},"WriteBufferSize":{"type":"integer"},"SecretsManagerAccessRoleArn":{},"SecretsManagerSecretId":{}}},"S18":{"type":"structure","members":{"AfterConnectScript":{},"CaptureDdls":{"type":"boolean"},"MaxFileSize":{"type":"integer"},"DatabaseName":{},"DdlArtifactsSchema":{},"ExecuteTimeout":{"type":"integer"},"FailTasksOnLobTruncation":{"type":"boolean"},"HeartbeatEnable":{"type":"boolean"},"HeartbeatSchema":{},"HeartbeatFrequency":{"type":"integer"},"Password":{"shape":"Sj"},"Port":{"type":"integer"},"ServerName":{},"Username":{},"SlotName":{},"PluginName":{},"SecretsManagerAccessRoleArn":{},"SecretsManagerSecretId":{}}},"S1a":{"type":"structure","members":{"AfterConnectScript":{},"CleanSourceMetadataOnMismatch":{"type":"boolean"},"DatabaseName":{},"EventsPollInterval":{"type":"integer"},"TargetDbType":{},"MaxFileSize":{"type":"integer"},"ParallelLoadThreads":{"type":"integer"},"Password":{"shape":"Sj"},"Port":{"type":"integer"},"ServerName":{},"ServerTimezone":{},"Username":{},"SecretsManagerAccessRoleArn":{},"SecretsManagerSecretId":{}}},"S1c":{"type":"structure","members":{"AddSupplementalLogging":{"type":"boolean"},"ArchivedLogDestId":{"type":"integer"},"AdditionalArchivedLogDestId":{"type":"integer"},"AllowSelectNestedTables":{"type":"boolean"},"ParallelAsmReadThreads":{"type":"integer"},"ReadAheadBlocks":{"type":"integer"},"AccessAlternateDirectly":{"type":"boolean"},"UseAlternateFolderForOnline":{"type":"boolean"},"OraclePathPrefix":{},"UsePathPrefix":{},"ReplacePathPrefix":{"type":"boolean"},"EnableHomogenousTablespace":{"type":"boolean"},"DirectPathNoLog":{"type":"boolean"},"ArchivedLogsOnly":{"type":"boolean"},"AsmPassword":{"shape":"Sj"},"AsmServer":{},"AsmUser":{},"CharLengthSemantics":{},"DatabaseName":{},"DirectPathParallelLoad":{"type":"boolean"},"FailTasksOnLobTruncation":{"type":"boolean"},"NumberDatatypeScale":{"type":"integer"},"Password":{"shape":"Sj"},"Port":{"type":"integer"},"ReadTableSpaceName":{"type":"boolean"},"RetryInterval":{"type":"integer"},"SecurityDbEncryption":{"shape":"Sj"},"SecurityDbEncryptionName":{},"ServerName":{},"SpatialDataOptionToGeoJsonFunctionName":{},"StandbyDelayTime":{"type":"integer"},"Username":{},"UseBFile":{"type":"boolean"},"UseDirectPathFullLoad":{"type":"boolean"},"UseLogminerReader":{"type":"boolean"},"SecretsManagerAccessRoleArn":{},"SecretsManagerSecretId":{},"SecretsManagerOracleAsmAccessRoleArn":{},"SecretsManagerOracleAsmSecretId":{}}},"S1e":{"type":"structure","members":{"DatabaseName":{},"Password":{"shape":"Sj"},"Port":{"type":"integer"},"ServerName":{},"Username":{},"SecretsManagerAccessRoleArn":{},"SecretsManagerSecretId":{}}},"S1f":{"type":"structure","members":{"Port":{"type":"integer"},"BcpPacketSize":{"type":"integer"},"DatabaseName":{},"ControlTablesFileGroup":{},"Password":{"shape":"Sj"},"QuerySingleAlwaysOnNode":{"type":"boolean"},"ReadBackupOnly":{"type":"boolean"},"SafeguardPolicy":{},"ServerName":{},"Username":{},"UseBcpFullLoad":{"type":"boolean"},"UseThirdPartyBackupDevice":{"type":"boolean"},"SecretsManagerAccessRoleArn":{},"SecretsManagerSecretId":{}}},"S1h":{"type":"structure","members":{"DatabaseName":{},"Password":{"shape":"Sj"},"Port":{"type":"integer"},"ServerName":{},"SetDataCaptureChanges":{"type":"boolean"},"CurrentLsn":{},"MaxKBytesPerRead":{"type":"integer"},"Username":{},"SecretsManagerAccessRoleArn":{},"SecretsManagerSecretId":{}}},"S1i":{"type":"structure","members":{"Username":{},"Password":{"shape":"Sj"},"ServerName":{},"Port":{"type":"integer"},"DatabaseName":{},"NestingLevel":{},"ExtractDocId":{"type":"boolean"},"DocsToInvestigate":{"type":"integer"},"KmsKeyId":{},"SecretsManagerAccessRoleArn":{},"SecretsManagerSecretId":{}}},"S1k":{"type":"structure","members":{"EndpointIdentifier":{},"EndpointType":{},"EngineName":{},"EngineDisplayName":{},"Username":{},"ServerName":{},"Port":{"type":"integer"},"DatabaseName":{},"ExtraConnectionAttributes":{},"Status":{},"KmsKeyId":{},"EndpointArn":{},"CertificateArn":{},"SslMode":{},"ServiceAccessRoleArn":{},"ExternalTableDefinition":{},"ExternalId":{},"DynamoDbSettings":{"shape":"Sm"},"S3Settings":{"shape":"Sn"},"DmsTransferSettings":{"shape":"Sw"},"MongoDbSettings":{"shape":"Sx"},"KinesisSettings":{"shape":"S11"},"KafkaSettings":{"shape":"S13"},"ElasticsearchSettings":{"shape":"S15"},"NeptuneSettings":{"shape":"S16"},"RedshiftSettings":{"shape":"S17"},"PostgreSQLSettings":{"shape":"S18"},"MySQLSettings":{"shape":"S1a"},"OracleSettings":{"shape":"S1c"},"SybaseSettings":{"shape":"S1e"},"MicrosoftSQLServerSettings":{"shape":"S1f"},"IBMDb2Settings":{"shape":"S1h"},"DocDbSettings":{"shape":"S1i"}}},"S1m":{"type":"list","member":{}},"S1n":{"type":"list","member":{}},"S1p":{"type":"structure","members":{"CustomerAwsId":{},"CustSubscriptionId":{},"SnsTopicArn":{},"Status":{},"SubscriptionCreationTime":{},"SourceType":{},"SourceIdsList":{"shape":"S1n"},"EventCategoriesList":{"shape":"S1m"},"Enabled":{"type":"boolean"}}},"S1s":{"type":"list","member":{}},"S1u":{"type":"structure","members":{"ReplicationInstanceIdentifier":{},"ReplicationInstanceClass":{},"ReplicationInstanceStatus":{},"AllocatedStorage":{"type":"integer"},"InstanceCreateTime":{"type":"timestamp"},"VpcSecurityGroups":{"type":"list","member":{"type":"structure","members":{"VpcSecurityGroupId":{},"Status":{}}}},"AvailabilityZone":{},"ReplicationSubnetGroup":{"shape":"S1x"},"PreferredMaintenanceWindow":{},"PendingModifiedValues":{"type":"structure","members":{"ReplicationInstanceClass":{},"AllocatedStorage":{"type":"integer"},"MultiAZ":{"type":"boolean"},"EngineVersion":{}}},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AutoMinorVersionUpgrade":{"type":"boolean"},"KmsKeyId":{},"ReplicationInstanceArn":{},"ReplicationInstancePublicIpAddress":{"deprecated":true},"ReplicationInstancePrivateIpAddress":{"deprecated":true},"ReplicationInstancePublicIpAddresses":{"type":"list","member":{}},"ReplicationInstancePrivateIpAddresses":{"type":"list","member":{}},"PubliclyAccessible":{"type":"boolean"},"SecondaryAvailabilityZone":{},"FreeUntil":{"type":"timestamp"},"DnsNameServers":{}}},"S1x":{"type":"structure","members":{"ReplicationSubnetGroupIdentifier":{},"ReplicationSubnetGroupDescription":{},"VpcId":{},"SubnetGroupStatus":{},"Subnets":{"type":"list","member":{"type":"structure","members":{"SubnetIdentifier":{},"SubnetAvailabilityZone":{"type":"structure","members":{"Name":{}}},"SubnetStatus":{}}}}}},"S25":{"type":"list","member":{}},"S2a":{"type":"structure","members":{"ReplicationTaskIdentifier":{},"SourceEndpointArn":{},"TargetEndpointArn":{},"ReplicationInstanceArn":{},"MigrationType":{},"TableMappings":{},"ReplicationTaskSettings":{},"Status":{},"LastFailureMessage":{},"StopReason":{},"ReplicationTaskCreationDate":{"type":"timestamp"},"ReplicationTaskStartDate":{"type":"timestamp"},"CdcStartPosition":{},"CdcStopPosition":{},"RecoveryCheckpoint":{},"ReplicationTaskArn":{},"ReplicationTaskStats":{"type":"structure","members":{"FullLoadProgressPercent":{"type":"integer"},"ElapsedTimeMillis":{"type":"long"},"TablesLoaded":{"type":"integer"},"TablesLoading":{"type":"integer"},"TablesQueued":{"type":"integer"},"TablesErrored":{"type":"integer"},"FreshStartDate":{"type":"timestamp"},"StartDate":{"type":"timestamp"},"StopDate":{"type":"timestamp"},"FullLoadStartDate":{"type":"timestamp"},"FullLoadFinishDate":{"type":"timestamp"}}},"TaskData":{},"TargetReplicationInstanceArn":{}}},"S2f":{"type":"structure","members":{"CertificateIdentifier":{},"CertificateCreationDate":{"type":"timestamp"},"CertificatePem":{},"CertificateWallet":{"type":"blob"},"CertificateArn":{},"CertificateOwner":{},"ValidFromDate":{"type":"timestamp"},"ValidToDate":{"type":"timestamp"},"SigningAlgorithm":{},"KeyLength":{"type":"integer"}}},"S2j":{"type":"structure","members":{"ReplicationInstanceArn":{},"EndpointArn":{},"Status":{},"LastFailureMessage":{},"EndpointIdentifier":{},"ReplicationInstanceIdentifier":{}}},"S34":{"type":"list","member":{"type":"structure","required":["Name","Values"],"members":{"Name":{},"Values":{"type":"list","member":{}}}}},"S4c":{"type":"structure","members":{"EndpointArn":{},"ReplicationInstanceArn":{},"Status":{},"LastRefreshDate":{"type":"timestamp"},"LastFailureMessage":{}}}}}

/***/ }),
/* 173 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeApplicableIndividualAssessments":{"input_token":"Marker","output_token":"Marker","limit_key":"MaxRecords"},"DescribeCertificates":{"input_token":"Marker","output_token":"Marker","limit_key":"MaxRecords"},"DescribeConnections":{"input_token":"Marker","output_token":"Marker","limit_key":"MaxRecords"},"DescribeEndpointSettings":{"input_token":"Marker","output_token":"Marker","limit_key":"MaxRecords"},"DescribeEndpointTypes":{"input_token":"Marker","output_token":"Marker","limit_key":"MaxRecords"},"DescribeEndpoints":{"input_token":"Marker","output_token":"Marker","limit_key":"MaxRecords"},"DescribeEventSubscriptions":{"input_token":"Marker","output_token":"Marker","limit_key":"MaxRecords"},"DescribeEvents":{"input_token":"Marker","output_token":"Marker","limit_key":"MaxRecords"},"DescribeOrderableReplicationInstances":{"input_token":"Marker","output_token":"Marker","limit_key":"MaxRecords"},"DescribePendingMaintenanceActions":{"input_token":"Marker","output_token":"Marker","limit_key":"MaxRecords"},"DescribeReplicationInstanceTaskLogs":{"input_token":"Marker","output_token":"Marker","limit_key":"MaxRecords"},"DescribeReplicationInstances":{"input_token":"Marker","output_token":"Marker","limit_key":"MaxRecords"},"DescribeReplicationSubnetGroups":{"input_token":"Marker","output_token":"Marker","limit_key":"MaxRecords"},"DescribeReplicationTaskAssessmentResults":{"input_token":"Marker","output_token":"Marker","limit_key":"MaxRecords"},"DescribeReplicationTaskAssessmentRuns":{"input_token":"Marker","output_token":"Marker","limit_key":"MaxRecords"},"DescribeReplicationTaskIndividualAssessments":{"input_token":"Marker","output_token":"Marker","limit_key":"MaxRecords"},"DescribeReplicationTasks":{"input_token":"Marker","output_token":"Marker","limit_key":"MaxRecords"},"DescribeSchemas":{"input_token":"Marker","output_token":"Marker","limit_key":"MaxRecords"},"DescribeTableStatistics":{"input_token":"Marker","output_token":"Marker","limit_key":"MaxRecords"}}}

/***/ }),
/* 174 */
/***/ (function(module, exports) {

	module.exports = {"version":2,"waiters":{"TestConnectionSucceeds":{"acceptors":[{"argument":"Connections[].Status","expected":"successful","matcher":"pathAll","state":"success"},{"argument":"Connections[].Status","expected":"failed","matcher":"pathAny","state":"failure"}],"delay":5,"description":"Wait until testing connection succeeds.","maxAttempts":60,"operation":"DescribeConnections"},"EndpointDeleted":{"acceptors":[{"expected":"ResourceNotFoundFault","matcher":"error","state":"success"},{"argument":"Endpoints[].Status","expected":"active","matcher":"pathAny","state":"failure"},{"argument":"Endpoints[].Status","expected":"creating","matcher":"pathAny","state":"failure"}],"delay":5,"description":"Wait until testing endpoint is deleted.","maxAttempts":60,"operation":"DescribeEndpoints"},"ReplicationInstanceAvailable":{"acceptors":[{"argument":"ReplicationInstances[].ReplicationInstanceStatus","expected":"available","matcher":"pathAll","state":"success"},{"argument":"ReplicationInstances[].ReplicationInstanceStatus","expected":"deleting","matcher":"pathAny","state":"failure"},{"argument":"ReplicationInstances[].ReplicationInstanceStatus","expected":"incompatible-credentials","matcher":"pathAny","state":"failure"},{"argument":"ReplicationInstances[].ReplicationInstanceStatus","expected":"incompatible-network","matcher":"pathAny","state":"failure"},{"argument":"ReplicationInstances[].ReplicationInstanceStatus","expected":"inaccessible-encryption-credentials","matcher":"pathAny","state":"failure"}],"delay":60,"description":"Wait until DMS replication instance is available.","maxAttempts":60,"operation":"DescribeReplicationInstances"},"ReplicationInstanceDeleted":{"acceptors":[{"argument":"ReplicationInstances[].ReplicationInstanceStatus","expected":"available","matcher":"pathAny","state":"failure"},{"expected":"ResourceNotFoundFault","matcher":"error","state":"success"}],"delay":15,"description":"Wait until DMS replication instance is deleted.","maxAttempts":60,"operation":"DescribeReplicationInstances"},"ReplicationTaskReady":{"acceptors":[{"argument":"ReplicationTasks[].Status","expected":"ready","matcher":"pathAll","state":"success"},{"argument":"ReplicationTasks[].Status","expected":"starting","matcher":"pathAny","state":"failure"},{"argument":"ReplicationTasks[].Status","expected":"running","matcher":"pathAny","state":"failure"},{"argument":"ReplicationTasks[].Status","expected":"stopping","matcher":"pathAny","state":"failure"},{"argument":"ReplicationTasks[].Status","expected":"stopped","matcher":"pathAny","state":"failure"},{"argument":"ReplicationTasks[].Status","expected":"failed","matcher":"pathAny","state":"failure"},{"argument":"ReplicationTasks[].Status","expected":"modifying","matcher":"pathAny","state":"failure"},{"argument":"ReplicationTasks[].Status","expected":"testing","matcher":"pathAny","state":"failure"},{"argument":"ReplicationTasks[].Status","expected":"deleting","matcher":"pathAny","state":"failure"}],"delay":15,"description":"Wait until DMS replication task is ready.","maxAttempts":60,"operation":"DescribeReplicationTasks"},"ReplicationTaskStopped":{"acceptors":[{"argument":"ReplicationTasks[].Status","expected":"stopped","matcher":"pathAll","state":"success"},{"argument":"ReplicationTasks[].Status","expected":"ready","matcher":"pathAny","state":"failure"},{"argument":"ReplicationTasks[].Status","expected":"creating","matcher":"pathAny","state":"failure"},{"argument":"ReplicationTasks[].Status","expected":"starting","matcher":"pathAny","state":"failure"},{"argument":"ReplicationTasks[].Status","expected":"failed","matcher":"pathAny","state":"failure"},{"argument":"ReplicationTasks[].Status","expected":"modifying","matcher":"pathAny","state":"failure"},{"argument":"ReplicationTasks[].Status","expected":"testing","matcher":"pathAny","state":"failure"},{"argument":"ReplicationTasks[].Status","expected":"deleting","matcher":"pathAny","state":"failure"}],"delay":15,"description":"Wait until DMS replication task is stopped.","maxAttempts":60,"operation":"DescribeReplicationTasks"},"ReplicationTaskRunning":{"acceptors":[{"argument":"ReplicationTasks[].Status","expected":"running","matcher":"pathAll","state":"success"},{"argument":"ReplicationTasks[].Status","expected":"ready","matcher":"pathAny","state":"failure"},{"argument":"ReplicationTasks[].Status","expected":"creating","matcher":"pathAny","state":"failure"},{"argument":"ReplicationTasks[].Status","expected":"stopping","matcher":"pathAny","state":"failure"},{"argument":"ReplicationTasks[].Status","expected":"stopped","matcher":"pathAny","state":"failure"},{"argument":"ReplicationTasks[].Status","expected":"failed","matcher":"pathAny","state":"failure"},{"argument":"ReplicationTasks[].Status","expected":"modifying","matcher":"pathAny","state":"failure"},{"argument":"ReplicationTasks[].Status","expected":"testing","matcher":"pathAny","state":"failure"},{"argument":"ReplicationTasks[].Status","expected":"deleting","matcher":"pathAny","state":"failure"}],"delay":15,"description":"Wait until DMS replication task is running.","maxAttempts":60,"operation":"DescribeReplicationTasks"},"ReplicationTaskDeleted":{"acceptors":[{"argument":"ReplicationTasks[].Status","expected":"ready","matcher":"pathAny","state":"failure"},{"argument":"ReplicationTasks[].Status","expected":"creating","matcher":"pathAny","state":"failure"},{"argument":"ReplicationTasks[].Status","expected":"stopped","matcher":"pathAny","state":"failure"},{"argument":"ReplicationTasks[].Status","expected":"running","matcher":"pathAny","state":"failure"},{"argument":"ReplicationTasks[].Status","expected":"failed","matcher":"pathAny","state":"failure"},{"expected":"ResourceNotFoundFault","matcher":"error","state":"success"}],"delay":15,"description":"Wait until DMS replication task is deleted.","maxAttempts":60,"operation":"DescribeReplicationTasks"}}}

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['dynamodb'] = {};
	AWS.DynamoDB = Service.defineService('dynamodb', ['2011-12-05', '2012-08-10']);
	__webpack_require__(176);
	Object.defineProperty(apiLoader.services['dynamodb'], '2011-12-05', {
	  get: function get() {
	    var model = __webpack_require__(183);
	    model.paginators = __webpack_require__(184).pagination;
	    model.waiters = __webpack_require__(185).waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	Object.defineProperty(apiLoader.services['dynamodb'], '2012-08-10', {
	  get: function get() {
	    var model = __webpack_require__(186);
	    model.paginators = __webpack_require__(187).pagination;
	    model.waiters = __webpack_require__(188).waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.DynamoDB;


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(4);
	__webpack_require__(177);

	AWS.util.update(AWS.DynamoDB.prototype, {
	  /**
	   * @api private
	   */
	  setupRequestListeners: function setupRequestListeners(request) {
	    if (request.service.config.dynamoDbCrc32) {
	      request.removeListener('extractData', AWS.EventListeners.Json.EXTRACT_DATA);
	      request.addListener('extractData', this.checkCrc32);
	      request.addListener('extractData', AWS.EventListeners.Json.EXTRACT_DATA);
	    }
	  },

	  /**
	   * @api private
	   */
	  checkCrc32: function checkCrc32(resp) {
	    if (!resp.httpResponse.streaming && !resp.request.service.crc32IsValid(resp)) {
	      resp.data = null;
	      resp.error = AWS.util.error(new Error(), {
	        code: 'CRC32CheckFailed',
	        message: 'CRC32 integrity check failed',
	        retryable: true
	      });
	      resp.request.haltHandlersOnError();
	      throw (resp.error);
	    }
	  },

	  /**
	   * @api private
	   */
	  crc32IsValid: function crc32IsValid(resp) {
	    var crc = resp.httpResponse.headers['x-amz-crc32'];
	    if (!crc) return true; // no (valid) CRC32 header
	    return parseInt(crc, 10) === AWS.util.crypto.crc32(resp.httpResponse.body);
	  },

	  /**
	   * @api private
	   */
	  defaultRetryCount: 10,

	  /**
	   * @api private
	   */
	  retryDelays: function retryDelays(retryCount, err) {
	    var retryDelayOptions = AWS.util.copy(this.config.retryDelayOptions);

	    if (typeof retryDelayOptions.base !== 'number') {
	        retryDelayOptions.base = 50; // default for dynamodb
	    }
	    var delay = AWS.util.calculateRetryDelay(retryCount, retryDelayOptions, err);
	    return delay;
	  }
	});


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(4);
	var Translator = __webpack_require__(178);
	var DynamoDBSet = __webpack_require__(181);

	/**
	 * The document client simplifies working with items in Amazon DynamoDB
	 * by abstracting away the notion of attribute values. This abstraction
	 * annotates native JavaScript types supplied as input parameters, as well
	 * as converts annotated response data to native JavaScript types.
	 *
	 * ## Marshalling Input and Unmarshalling Response Data
	 *
	 * The document client affords developers the use of native JavaScript types
	 * instead of `AttributeValue`s to simplify the JavaScript development
	 * experience with Amazon DynamoDB. JavaScript objects passed in as parameters
	 * are marshalled into `AttributeValue` shapes required by Amazon DynamoDB.
	 * Responses from DynamoDB are unmarshalled into plain JavaScript objects
	 * by the `DocumentClient`. The `DocumentClient`, does not accept
	 * `AttributeValue`s in favor of native JavaScript types.
	 *
	 * |                             JavaScript Type                            | DynamoDB AttributeValue |
	 * |:----------------------------------------------------------------------:|-------------------------|
	 * | String                                                                 | S                       |
	 * | Number                                                                 | N                       |
	 * | Boolean                                                                | BOOL                    |
	 * | null                                                                   | NULL                    |
	 * | Array                                                                  | L                       |
	 * | Object                                                                 | M                       |
	 * | Buffer, File, Blob, ArrayBuffer, DataView, and JavaScript typed arrays | B                       |
	 *
	 * ## Support for Sets
	 *
	 * The `DocumentClient` offers a convenient way to create sets from
	 * JavaScript Arrays. The type of set is inferred from the first element
	 * in the array. DynamoDB supports string, number, and binary sets. To
	 * learn more about supported types see the
	 * [Amazon DynamoDB Data Model Documentation](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html)
	 * For more information see {AWS.DynamoDB.DocumentClient.createSet}
	 *
	 */
	AWS.DynamoDB.DocumentClient = AWS.util.inherit({

	  /**
	   * Creates a DynamoDB document client with a set of configuration options.
	   *
	   * @option options params [map] An optional map of parameters to bind to every
	   *   request sent by this service object.
	   * @option options service [AWS.DynamoDB] An optional pre-configured instance
	   *  of the AWS.DynamoDB service object to use for requests. The object may
	   *  bound parameters used by the document client.
	   * @option options convertEmptyValues [Boolean] set to true if you would like
	   *  the document client to convert empty values (0-length strings, binary
	   *  buffers, and sets) to be converted to NULL types when persisting to
	   *  DynamoDB.
	   * @option options wrapNumbers [Boolean] Set to true to return numbers as a
	   *  NumberValue object instead of converting them to native JavaScript numbers.
	   *  This allows for the safe round-trip transport of numbers of arbitrary size.
	   * @see AWS.DynamoDB.constructor
	   *
	   */
	  constructor: function DocumentClient(options) {
	    var self = this;
	    self.options = options || {};
	    self.configure(self.options);
	  },

	  /**
	   * @api private
	   */
	  configure: function configure(options) {
	    var self = this;
	    self.service = options.service;
	    self.bindServiceObject(options);
	    self.attrValue = options.attrValue =
	      self.service.api.operations.putItem.input.members.Item.value.shape;
	  },

	  /**
	   * @api private
	   */
	  bindServiceObject: function bindServiceObject(options) {
	    var self = this;
	    options = options || {};

	    if (!self.service) {
	      self.service = new AWS.DynamoDB(options);
	    } else {
	      var config = AWS.util.copy(self.service.config);
	      self.service = new self.service.constructor.__super__(config);
	      self.service.config.params =
	        AWS.util.merge(self.service.config.params || {}, options.params);
	    }
	  },

	  /**
	   * @api private
	   */
	  makeServiceRequest: function(operation, params, callback) {
	    var self = this;
	    var request = self.service[operation](params);
	    self.setupRequest(request);
	    self.setupResponse(request);
	    if (typeof callback === 'function') {
	      request.send(callback);
	    }
	    return request;
	  },

	  /**
	   * @api private
	   */
	  serviceClientOperationsMap: {
	    batchGet: 'batchGetItem',
	    batchWrite: 'batchWriteItem',
	    delete: 'deleteItem',
	    get: 'getItem',
	    put: 'putItem',
	    query: 'query',
	    scan: 'scan',
	    update: 'updateItem',
	    transactGet: 'transactGetItems',
	    transactWrite: 'transactWriteItems'
	  },

	  /**
	   * Returns the attributes of one or more items from one or more tables
	   * by delegating to `AWS.DynamoDB.batchGetItem()`.
	   *
	   * Supply the same parameters as {AWS.DynamoDB.batchGetItem} with
	   * `AttributeValue`s substituted by native JavaScript types.
	   *
	   * @see AWS.DynamoDB.batchGetItem
	   * @example Get items from multiple tables
	   *  var params = {
	   *    RequestItems: {
	   *      'Table-1': {
	   *        Keys: [
	   *          {
	   *             HashKey: 'haskey',
	   *             NumberRangeKey: 1
	   *          }
	   *        ]
	   *      },
	   *      'Table-2': {
	   *        Keys: [
	   *          { foo: 'bar' },
	   *        ]
	   *      }
	   *    }
	   *  };
	   *
	   *  var documentClient = new AWS.DynamoDB.DocumentClient();
	   *
	   *  documentClient.batchGet(params, function(err, data) {
	   *    if (err) console.log(err);
	   *    else console.log(data);
	   *  });
	   *
	   */
	  batchGet: function(params, callback) {
	    var operation = this.serviceClientOperationsMap['batchGet'];
	    return this.makeServiceRequest(operation, params, callback);
	  },

	  /**
	   * Puts or deletes multiple items in one or more tables by delegating
	   * to `AWS.DynamoDB.batchWriteItem()`.
	   *
	   * Supply the same parameters as {AWS.DynamoDB.batchWriteItem} with
	   * `AttributeValue`s substituted by native JavaScript types.
	   *
	   * @see AWS.DynamoDB.batchWriteItem
	   * @example Write to and delete from a table
	   *  var params = {
	   *    RequestItems: {
	   *      'Table-1': [
	   *        {
	   *          DeleteRequest: {
	   *            Key: { HashKey: 'someKey' }
	   *          }
	   *        },
	   *        {
	   *          PutRequest: {
	   *            Item: {
	   *              HashKey: 'anotherKey',
	   *              NumAttribute: 1,
	   *              BoolAttribute: true,
	   *              ListAttribute: [1, 'two', false],
	   *              MapAttribute: { foo: 'bar' }
	   *            }
	   *          }
	   *        }
	   *      ]
	   *    }
	   *  };
	   *
	   *  var documentClient = new AWS.DynamoDB.DocumentClient();
	   *
	   *  documentClient.batchWrite(params, function(err, data) {
	   *    if (err) console.log(err);
	   *    else console.log(data);
	   *  });
	   *
	   */
	  batchWrite: function(params, callback) {
	    var operation = this.serviceClientOperationsMap['batchWrite'];
	    return this.makeServiceRequest(operation, params, callback);
	  },

	  /**
	   * Deletes a single item in a table by primary key by delegating to
	   * `AWS.DynamoDB.deleteItem()`
	   *
	   * Supply the same parameters as {AWS.DynamoDB.deleteItem} with
	   * `AttributeValue`s substituted by native JavaScript types.
	   *
	   * @see AWS.DynamoDB.deleteItem
	   * @example Delete an item from a table
	   *  var params = {
	   *    TableName : 'Table',
	   *    Key: {
	   *      HashKey: 'hashkey',
	   *      NumberRangeKey: 1
	   *    }
	   *  };
	   *
	   *  var documentClient = new AWS.DynamoDB.DocumentClient();
	   *
	   *  documentClient.delete(params, function(err, data) {
	   *    if (err) console.log(err);
	   *    else console.log(data);
	   *  });
	   *
	   */
	  delete: function(params, callback) {
	    var operation = this.serviceClientOperationsMap['delete'];
	    return this.makeServiceRequest(operation, params, callback);
	  },

	  /**
	   * Returns a set of attributes for the item with the given primary key
	   * by delegating to `AWS.DynamoDB.getItem()`.
	   *
	   * Supply the same parameters as {AWS.DynamoDB.getItem} with
	   * `AttributeValue`s substituted by native JavaScript types.
	   *
	   * @see AWS.DynamoDB.getItem
	   * @example Get an item from a table
	   *  var params = {
	   *    TableName : 'Table',
	   *    Key: {
	   *      HashKey: 'hashkey'
	   *    }
	   *  };
	   *
	   *  var documentClient = new AWS.DynamoDB.DocumentClient();
	   *
	   *  documentClient.get(params, function(err, data) {
	   *    if (err) console.log(err);
	   *    else console.log(data);
	   *  });
	   *
	   */
	  get: function(params, callback) {
	    var operation = this.serviceClientOperationsMap['get'];
	    return this.makeServiceRequest(operation, params, callback);
	  },

	  /**
	   * Creates a new item, or replaces an old item with a new item by
	   * delegating to `AWS.DynamoDB.putItem()`.
	   *
	   * Supply the same parameters as {AWS.DynamoDB.putItem} with
	   * `AttributeValue`s substituted by native JavaScript types.
	   *
	   * @see AWS.DynamoDB.putItem
	   * @example Create a new item in a table
	   *  var params = {
	   *    TableName : 'Table',
	   *    Item: {
	   *       HashKey: 'haskey',
	   *       NumAttribute: 1,
	   *       BoolAttribute: true,
	   *       ListAttribute: [1, 'two', false],
	   *       MapAttribute: { foo: 'bar'},
	   *       NullAttribute: null
	   *    }
	   *  };
	   *
	   *  var documentClient = new AWS.DynamoDB.DocumentClient();
	   *
	   *  documentClient.put(params, function(err, data) {
	   *    if (err) console.log(err);
	   *    else console.log(data);
	   *  });
	   *
	   */
	  put: function(params, callback) {
	    var operation = this.serviceClientOperationsMap['put'];
	    return this.makeServiceRequest(operation, params, callback);
	  },

	  /**
	   * Edits an existing item's attributes, or adds a new item to the table if
	   * it does not already exist by delegating to `AWS.DynamoDB.updateItem()`.
	   *
	   * Supply the same parameters as {AWS.DynamoDB.updateItem} with
	   * `AttributeValue`s substituted by native JavaScript types.
	   *
	   * @see AWS.DynamoDB.updateItem
	   * @example Update an item with expressions
	   *  var params = {
	   *    TableName: 'Table',
	   *    Key: { HashKey : 'hashkey' },
	   *    UpdateExpression: 'set #a = :x + :y',
	   *    ConditionExpression: '#a < :MAX',
	   *    ExpressionAttributeNames: {'#a' : 'Sum'},
	   *    ExpressionAttributeValues: {
	   *      ':x' : 20,
	   *      ':y' : 45,
	   *      ':MAX' : 100,
	   *    }
	   *  };
	   *
	   *  var documentClient = new AWS.DynamoDB.DocumentClient();
	   *
	   *  documentClient.update(params, function(err, data) {
	   *     if (err) console.log(err);
	   *     else console.log(data);
	   *  });
	   *
	   */
	  update: function(params, callback) {
	    var operation = this.serviceClientOperationsMap['update'];
	    return this.makeServiceRequest(operation, params, callback);
	  },

	  /**
	   * Returns one or more items and item attributes by accessing every item
	   * in a table or a secondary index.
	   *
	   * Supply the same parameters as {AWS.DynamoDB.scan} with
	   * `AttributeValue`s substituted by native JavaScript types.
	   *
	   * @see AWS.DynamoDB.scan
	   * @example Scan the table with a filter expression
	   *  var params = {
	   *    TableName : 'Table',
	   *    FilterExpression : 'Year = :this_year',
	   *    ExpressionAttributeValues : {':this_year' : 2015}
	   *  };
	   *
	   *  var documentClient = new AWS.DynamoDB.DocumentClient();
	   *
	   *  documentClient.scan(params, function(err, data) {
	   *     if (err) console.log(err);
	   *     else console.log(data);
	   *  });
	   *
	   */
	  scan: function(params, callback) {
	    var operation = this.serviceClientOperationsMap['scan'];
	    return this.makeServiceRequest(operation, params, callback);
	  },

	   /**
	    * Directly access items from a table by primary key or a secondary index.
	    *
	    * Supply the same parameters as {AWS.DynamoDB.query} with
	    * `AttributeValue`s substituted by native JavaScript types.
	    *
	    * @see AWS.DynamoDB.query
	    * @example Query an index
	    *  var params = {
	    *    TableName: 'Table',
	    *    IndexName: 'Index',
	    *    KeyConditionExpression: 'HashKey = :hkey and RangeKey > :rkey',
	    *    ExpressionAttributeValues: {
	    *      ':hkey': 'key',
	    *      ':rkey': 2015
	    *    }
	    *  };
	    *
	    *  var documentClient = new AWS.DynamoDB.DocumentClient();
	    *
	    *  documentClient.query(params, function(err, data) {
	    *     if (err) console.log(err);
	    *     else console.log(data);
	    *  });
	    *
	    */
	  query: function(params, callback) {
	    var operation = this.serviceClientOperationsMap['query'];
	    return this.makeServiceRequest(operation, params, callback);
	  },

	  /**
	   * Synchronous write operation that groups up to 25 action requests.
	   *
	   * Supply the same parameters as {AWS.DynamoDB.transactWriteItems} with
	   * `AttributeValue`s substituted by native JavaScript types.
	   *
	   * @see AWS.DynamoDB.transactWriteItems
	   * @example Get items from multiple tables
	   *  var params = {
	   *    TransactItems: [{
	   *      Put: {
	   *        TableName : 'Table0',
	   *        Item: {
	   *          HashKey: 'haskey',
	   *          NumAttribute: 1,
	   *          BoolAttribute: true,
	   *          ListAttribute: [1, 'two', false],
	   *          MapAttribute: { foo: 'bar'},
	   *          NullAttribute: null
	   *        }
	   *      }
	   *    }, {
	   *      Update: {
	   *        TableName: 'Table1',
	   *        Key: { HashKey : 'hashkey' },
	   *        UpdateExpression: 'set #a = :x + :y',
	   *        ConditionExpression: '#a < :MAX',
	   *        ExpressionAttributeNames: {'#a' : 'Sum'},
	   *        ExpressionAttributeValues: {
	   *          ':x' : 20,
	   *          ':y' : 45,
	   *          ':MAX' : 100,
	   *        }
	   *      }
	   *    }]
	   *  };
	   *
	   *  documentClient.transactWrite(params, function(err, data) {
	   *    if (err) console.log(err);
	   *    else console.log(data);
	   *  });
	   */
	  transactWrite: function(params, callback) {
	    var operation = this.serviceClientOperationsMap['transactWrite'];
	    return this.makeServiceRequest(operation, params, callback);
	  },

	  /**
	   * Atomically retrieves multiple items from one or more tables (but not from indexes)
	   * in a single account and region.
	   *
	   * Supply the same parameters as {AWS.DynamoDB.transactGetItems} with
	   * `AttributeValue`s substituted by native JavaScript types.
	   *
	   * @see AWS.DynamoDB.transactGetItems
	   * @example Get items from multiple tables
	   *  var params = {
	   *    TransactItems: [{
	   *      Get: {
	   *        TableName : 'Table0',
	   *        Key: {
	   *          HashKey: 'hashkey0'
	   *        }
	   *      }
	   *    }, {
	   *      Get: {
	   *        TableName : 'Table1',
	   *        Key: {
	   *          HashKey: 'hashkey1'
	   *        }
	   *      }
	   *    }]
	   *  };
	   *
	   *  documentClient.transactGet(params, function(err, data) {
	   *    if (err) console.log(err);
	   *    else console.log(data);
	   *  });
	   */
	  transactGet: function(params, callback) {
	    var operation = this.serviceClientOperationsMap['transactGet'];
	    return this.makeServiceRequest(operation, params, callback);
	  },

	  /**
	   * Creates a set of elements inferring the type of set from
	   * the type of the first element. Amazon DynamoDB currently supports
	   * the number sets, string sets, and binary sets. For more information
	   * about DynamoDB data types see the documentation on the
	   * [Amazon DynamoDB Data Model](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModel.DataTypes).
	   *
	   * @param list [Array] Collection to represent your DynamoDB Set
	   * @param options [map]
	   *  * **validate** [Boolean] set to true if you want to validate the type
	   *    of each element in the set. Defaults to `false`.
	   * @example Creating a number set
	   *  var documentClient = new AWS.DynamoDB.DocumentClient();
	   *
	   *  var params = {
	   *    Item: {
	   *      hashkey: 'hashkey'
	   *      numbers: documentClient.createSet([1, 2, 3]);
	   *    }
	   *  };
	   *
	   *  documentClient.put(params, function(err, data) {
	   *    if (err) console.log(err);
	   *    else console.log(data);
	   *  });
	   *
	   */
	  createSet: function(list, options) {
	    options = options || {};
	    return new DynamoDBSet(list, options);
	  },

	  /**
	   * @api private
	   */
	  getTranslator: function() {
	    return new Translator(this.options);
	  },

	  /**
	   * @api private
	   */
	  setupRequest: function setupRequest(request) {
	    var self = this;
	    var translator = self.getTranslator();
	    var operation = request.operation;
	    var inputShape = request.service.api.operations[operation].input;
	    request._events.validate.unshift(function(req) {
	      req.rawParams = AWS.util.copy(req.params);
	      req.params = translator.translateInput(req.rawParams, inputShape);
	    });
	  },

	  /**
	   * @api private
	   */
	  setupResponse: function setupResponse(request) {
	    var self = this;
	    var translator = self.getTranslator();
	    var outputShape = self.service.api.operations[request.operation].output;
	    request.on('extractData', function(response) {
	      response.data = translator.translateOutput(response.data, outputShape);
	    });

	    var response = request.response;
	    response.nextPage = function(cb) {
	      var resp = this;
	      var req = resp.request;
	      var config;
	      var service = req.service;
	      var operation = req.operation;
	      try {
	        config = service.paginationConfig(operation, true);
	      } catch (e) { resp.error = e; }

	      if (!resp.hasNextPage()) {
	        if (cb) cb(resp.error, null);
	        else if (resp.error) throw resp.error;
	        return null;
	      }

	      var params = AWS.util.copy(req.rawParams);
	      if (!resp.nextPageTokens) {
	        return cb ? cb(null, null) : null;
	      } else {
	        var inputTokens = config.inputToken;
	        if (typeof inputTokens === 'string') inputTokens = [inputTokens];
	        for (var i = 0; i < inputTokens.length; i++) {
	          params[inputTokens[i]] = resp.nextPageTokens[i];
	        }
	        return self[operation](params, cb);
	      }
	    };
	  }

	});

	/**
	 * @api private
	 */
	module.exports = AWS.DynamoDB.DocumentClient;


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

	var util = __webpack_require__(4).util;
	var convert = __webpack_require__(179);

	var Translator = function(options) {
	  options = options || {};
	  this.attrValue = options.attrValue;
	  this.convertEmptyValues = Boolean(options.convertEmptyValues);
	  this.wrapNumbers = Boolean(options.wrapNumbers);
	};

	Translator.prototype.translateInput = function(value, shape) {
	  this.mode = 'input';
	  return this.translate(value, shape);
	};

	Translator.prototype.translateOutput = function(value, shape) {
	  this.mode = 'output';
	  return this.translate(value, shape);
	};

	Translator.prototype.translate = function(value, shape) {
	  var self = this;
	  if (!shape || value === undefined) return undefined;

	  if (shape.shape === self.attrValue) {
	    return convert[self.mode](value, {
	      convertEmptyValues: self.convertEmptyValues,
	      wrapNumbers: self.wrapNumbers,
	    });
	  }
	  switch (shape.type) {
	    case 'structure': return self.translateStructure(value, shape);
	    case 'map': return self.translateMap(value, shape);
	    case 'list': return self.translateList(value, shape);
	    default: return self.translateScalar(value, shape);
	  }
	};

	Translator.prototype.translateStructure = function(structure, shape) {
	  var self = this;
	  if (structure == null) return undefined;

	  var struct = {};
	  util.each(structure, function(name, value) {
	    var memberShape = shape.members[name];
	    if (memberShape) {
	      var result = self.translate(value, memberShape);
	      if (result !== undefined) struct[name] = result;
	    }
	  });
	  return struct;
	};

	Translator.prototype.translateList = function(list, shape) {
	  var self = this;
	  if (list == null) return undefined;

	  var out = [];
	  util.arrayEach(list, function(value) {
	    var result = self.translate(value, shape.member);
	    if (result === undefined) out.push(null);
	    else out.push(result);
	  });
	  return out;
	};

	Translator.prototype.translateMap = function(map, shape) {
	  var self = this;
	  if (map == null) return undefined;

	  var out = {};
	  util.each(map, function(key, value) {
	    var result = self.translate(value, shape.value);
	    if (result === undefined) out[key] = null;
	    else out[key] = result;
	  });
	  return out;
	};

	Translator.prototype.translateScalar = function(value, shape) {
	  return shape.toType(value);
	};

	/**
	 * @api private
	 */
	module.exports = Translator;


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(4);
	var util = AWS.util;
	var typeOf = __webpack_require__(180).typeOf;
	var DynamoDBSet = __webpack_require__(181);
	var NumberValue = __webpack_require__(182);

	AWS.DynamoDB.Converter = {
	  /**
	   * Convert a JavaScript value to its equivalent DynamoDB AttributeValue type
	   *
	   * @param data [any] The data to convert to a DynamoDB AttributeValue
	   * @param options [map]
	   * @option options convertEmptyValues [Boolean] Whether to automatically
	   *                                              convert empty strings, blobs,
	   *                                              and sets to `null`
	   * @option options wrapNumbers [Boolean]  Whether to return numbers as a
	   *                                        NumberValue object instead of
	   *                                        converting them to native JavaScript
	   *                                        numbers. This allows for the safe
	   *                                        round-trip transport of numbers of
	   *                                        arbitrary size.
	   * @return [map] An object in the Amazon DynamoDB AttributeValue format
	   *
	   * @see AWS.DynamoDB.Converter.marshall AWS.DynamoDB.Converter.marshall to
	   *    convert entire records (rather than individual attributes)
	   */
	  input: function convertInput(data, options) {
	    options = options || {};
	    var type = typeOf(data);
	    if (type === 'Object') {
	      return formatMap(data, options);
	    } else if (type === 'Array') {
	      return formatList(data, options);
	    } else if (type === 'Set') {
	      return formatSet(data, options);
	    } else if (type === 'String') {
	      if (data.length === 0 && options.convertEmptyValues) {
	        return convertInput(null);
	      }
	      return { S: data };
	    } else if (type === 'Number' || type === 'NumberValue') {
	      return { N: data.toString() };
	    } else if (type === 'Binary') {
	      if (data.length === 0 && options.convertEmptyValues) {
	        return convertInput(null);
	      }
	      return { B: data };
	    } else if (type === 'Boolean') {
	      return { BOOL: data };
	    } else if (type === 'null') {
	      return { NULL: true };
	    } else if (type !== 'undefined' && type !== 'Function') {
	      // this value has a custom constructor
	      return formatMap(data, options);
	    }
	  },

	  /**
	   * Convert a JavaScript object into a DynamoDB record.
	   *
	   * @param data [any] The data to convert to a DynamoDB record
	   * @param options [map]
	   * @option options convertEmptyValues [Boolean] Whether to automatically
	   *                                              convert empty strings, blobs,
	   *                                              and sets to `null`
	   * @option options wrapNumbers [Boolean]  Whether to return numbers as a
	   *                                        NumberValue object instead of
	   *                                        converting them to native JavaScript
	   *                                        numbers. This allows for the safe
	   *                                        round-trip transport of numbers of
	   *                                        arbitrary size.
	   *
	   * @return [map] An object in the DynamoDB record format.
	   *
	   * @example Convert a JavaScript object into a DynamoDB record
	   *  var marshalled = AWS.DynamoDB.Converter.marshall({
	   *    string: 'foo',
	   *    list: ['fizz', 'buzz', 'pop'],
	   *    map: {
	   *      nestedMap: {
	   *        key: 'value',
	   *      }
	   *    },
	   *    number: 123,
	   *    nullValue: null,
	   *    boolValue: true,
	   *    stringSet: new DynamoDBSet(['foo', 'bar', 'baz'])
	   *  });
	   */
	  marshall: function marshallItem(data, options) {
	    return AWS.DynamoDB.Converter.input(data, options).M;
	  },

	  /**
	   * Convert a DynamoDB AttributeValue object to its equivalent JavaScript type.
	   *
	   * @param data [map] An object in the Amazon DynamoDB AttributeValue format
	   * @param options [map]
	   * @option options convertEmptyValues [Boolean] Whether to automatically
	   *                                              convert empty strings, blobs,
	   *                                              and sets to `null`
	   * @option options wrapNumbers [Boolean]  Whether to return numbers as a
	   *                                        NumberValue object instead of
	   *                                        converting them to native JavaScript
	   *                                        numbers. This allows for the safe
	   *                                        round-trip transport of numbers of
	   *                                        arbitrary size.
	   *
	   * @return [Object|Array|String|Number|Boolean|null]
	   *
	   * @see AWS.DynamoDB.Converter.unmarshall AWS.DynamoDB.Converter.unmarshall to
	   *    convert entire records (rather than individual attributes)
	   */
	  output: function convertOutput(data, options) {
	    options = options || {};
	    var list, map, i;
	    for (var type in data) {
	      var values = data[type];
	      if (type === 'M') {
	        map = {};
	        for (var key in values) {
	          map[key] = convertOutput(values[key], options);
	        }
	        return map;
	      } else if (type === 'L') {
	        list = [];
	        for (i = 0; i < values.length; i++) {
	          list.push(convertOutput(values[i], options));
	        }
	        return list;
	      } else if (type === 'SS') {
	        list = [];
	        for (i = 0; i < values.length; i++) {
	          list.push(values[i] + '');
	        }
	        return new DynamoDBSet(list);
	      } else if (type === 'NS') {
	        list = [];
	        for (i = 0; i < values.length; i++) {
	          list.push(convertNumber(values[i], options.wrapNumbers));
	        }
	        return new DynamoDBSet(list);
	      } else if (type === 'BS') {
	        list = [];
	        for (i = 0; i < values.length; i++) {
	          list.push(AWS.util.buffer.toBuffer(values[i]));
	        }
	        return new DynamoDBSet(list);
	      } else if (type === 'S') {
	        return values + '';
	      } else if (type === 'N') {
	        return convertNumber(values, options.wrapNumbers);
	      } else if (type === 'B') {
	        return util.buffer.toBuffer(values);
	      } else if (type === 'BOOL') {
	        return (values === 'true' || values === 'TRUE' || values === true);
	      } else if (type === 'NULL') {
	        return null;
	      }
	    }
	  },

	  /**
	   * Convert a DynamoDB record into a JavaScript object.
	   *
	   * @param data [any] The DynamoDB record
	   * @param options [map]
	   * @option options convertEmptyValues [Boolean] Whether to automatically
	   *                                              convert empty strings, blobs,
	   *                                              and sets to `null`
	   * @option options wrapNumbers [Boolean]  Whether to return numbers as a
	   *                                        NumberValue object instead of
	   *                                        converting them to native JavaScript
	   *                                        numbers. This allows for the safe
	   *                                        round-trip transport of numbers of
	   *                                        arbitrary size.
	   *
	   * @return [map] An object whose properties have been converted from
	   *    DynamoDB's AttributeValue format into their corresponding native
	   *    JavaScript types.
	   *
	   * @example Convert a record received from a DynamoDB stream
	   *  var unmarshalled = AWS.DynamoDB.Converter.unmarshall({
	   *    string: {S: 'foo'},
	   *    list: {L: [{S: 'fizz'}, {S: 'buzz'}, {S: 'pop'}]},
	   *    map: {
	   *      M: {
	   *        nestedMap: {
	   *          M: {
	   *            key: {S: 'value'}
	   *          }
	   *        }
	   *      }
	   *    },
	   *    number: {N: '123'},
	   *    nullValue: {NULL: true},
	   *    boolValue: {BOOL: true}
	   *  });
	   */
	  unmarshall: function unmarshall(data, options) {
	    return AWS.DynamoDB.Converter.output({M: data}, options);
	  }
	};

	/**
	 * @api private
	 * @param data [Array]
	 * @param options [map]
	 */
	function formatList(data, options) {
	  var list = {L: []};
	  for (var i = 0; i < data.length; i++) {
	    list['L'].push(AWS.DynamoDB.Converter.input(data[i], options));
	  }
	  return list;
	}

	/**
	 * @api private
	 * @param value [String]
	 * @param wrapNumbers [Boolean]
	 */
	function convertNumber(value, wrapNumbers) {
	  return wrapNumbers ? new NumberValue(value) : Number(value);
	}

	/**
	 * @api private
	 * @param data [map]
	 * @param options [map]
	 */
	function formatMap(data, options) {
	  var map = {M: {}};
	  for (var key in data) {
	    var formatted = AWS.DynamoDB.Converter.input(data[key], options);
	    if (formatted !== void 0) {
	      map['M'][key] = formatted;
	    }
	  }
	  return map;
	}

	/**
	 * @api private
	 */
	function formatSet(data, options) {
	  options = options || {};
	  var values = data.values;
	  if (options.convertEmptyValues) {
	    values = filterEmptySetValues(data);
	    if (values.length === 0) {
	      return AWS.DynamoDB.Converter.input(null);
	    }
	  }

	  var map = {};
	  switch (data.type) {
	    case 'String': map['SS'] = values; break;
	    case 'Binary': map['BS'] = values; break;
	    case 'Number': map['NS'] = values.map(function (value) {
	      return value.toString();
	    });
	  }
	  return map;
	}

	/**
	 * @api private
	 */
	function filterEmptySetValues(set) {
	    var nonEmptyValues = [];
	    var potentiallyEmptyTypes = {
	        String: true,
	        Binary: true,
	        Number: false
	    };
	    if (potentiallyEmptyTypes[set.type]) {
	        for (var i = 0; i < set.values.length; i++) {
	            if (set.values[i].length === 0) {
	                continue;
	            }
	            nonEmptyValues.push(set.values[i]);
	        }

	        return nonEmptyValues;
	    }

	    return set.values;
	}

	/**
	 * @api private
	 */
	module.exports = AWS.DynamoDB.Converter;


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

	var util = __webpack_require__(4).util;

	function typeOf(data) {
	  if (data === null && typeof data === 'object') {
	    return 'null';
	  } else if (data !== undefined && isBinary(data)) {
	    return 'Binary';
	  } else if (data !== undefined && data.constructor) {
	    return data.wrapperName || util.typeName(data.constructor);
	  } else if (data !== undefined && typeof data === 'object') {
	    // this object is the result of Object.create(null), hence the absence of a
	    // defined constructor
	    return 'Object';
	  } else {
	    return 'undefined';
	  }
	}

	function isBinary(data) {
	  var types = [
	    'Buffer', 'File', 'Blob', 'ArrayBuffer', 'DataView',
	    'Int8Array', 'Uint8Array', 'Uint8ClampedArray',
	    'Int16Array', 'Uint16Array', 'Int32Array', 'Uint32Array',
	    'Float32Array', 'Float64Array'
	  ];
	  if (util.isNode()) {
	    var Stream = util.stream.Stream;
	    if (util.Buffer.isBuffer(data) || data instanceof Stream) {
	      return true;
	    }
	  }

	  for (var i = 0; i < types.length; i++) {
	    if (data !== undefined && data.constructor) {
	      if (util.isType(data, types[i])) return true;
	      if (util.typeName(data.constructor) === types[i]) return true;
	    }
	  }

	  return false;
	}

	/**
	 * @api private
	 */
	module.exports = {
	  typeOf: typeOf,
	  isBinary: isBinary
	};


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

	var util = __webpack_require__(4).util;
	var typeOf = __webpack_require__(180).typeOf;

	/**
	 * @api private
	 */
	var memberTypeToSetType = {
	  'String': 'String',
	  'Number': 'Number',
	  'NumberValue': 'Number',
	  'Binary': 'Binary'
	};

	/**
	 * @api private
	 */
	var DynamoDBSet = util.inherit({

	  constructor: function Set(list, options) {
	    options = options || {};
	    this.wrapperName = 'Set';
	    this.initialize(list, options.validate);
	  },

	  initialize: function(list, validate) {
	    var self = this;
	    self.values = [].concat(list);
	    self.detectType();
	    if (validate) {
	      self.validate();
	    }
	  },

	  detectType: function() {
	    this.type = memberTypeToSetType[typeOf(this.values[0])];
	    if (!this.type) {
	      throw util.error(new Error(), {
	        code: 'InvalidSetType',
	        message: 'Sets can contain string, number, or binary values'
	      });
	    }
	  },

	  validate: function() {
	    var self = this;
	    var length = self.values.length;
	    var values = self.values;
	    for (var i = 0; i < length; i++) {
	      if (memberTypeToSetType[typeOf(values[i])] !== self.type) {
	        throw util.error(new Error(), {
	          code: 'InvalidType',
	          message: self.type + ' Set contains ' + typeOf(values[i]) + ' value'
	        });
	      }
	    }
	  },

	  /**
	   * Render the underlying values only when converting to JSON.
	   */
	  toJSON: function() {
	    var self = this;
	    return self.values;
	  }

	});

	/**
	 * @api private
	 */
	module.exports = DynamoDBSet;


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

	var util = __webpack_require__(4).util;

	/**
	 * An object recognizable as a numeric value that stores the underlying number
	 * as a string.
	 *
	 * Intended to be a deserialization target for the DynamoDB Document Client when
	 * the `wrapNumbers` flag is set. This allows for numeric values that lose
	 * precision when converted to JavaScript's `number` type.
	 */
	var DynamoDBNumberValue = util.inherit({
	  constructor: function NumberValue(value) {
	    this.wrapperName = 'NumberValue';
	    this.value = value.toString();
	  },

	  /**
	   * Render the underlying value as a number when converting to JSON.
	   */
	  toJSON: function () {
	    return this.toNumber();
	  },

	  /**
	   * Convert the underlying value to a JavaScript number.
	   */
	  toNumber: function () {
	    return Number(this.value);
	  },

	  /**
	   * Return a string representing the unaltered value provided to the
	   * constructor.
	   */
	  toString: function () {
	    return this.value;
	  }
	});

	/**
	 * @api private
	 */
	module.exports = DynamoDBNumberValue;


/***/ }),
/* 183 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2011-12-05","endpointPrefix":"dynamodb","jsonVersion":"1.0","protocol":"json","serviceAbbreviation":"DynamoDB","serviceFullName":"Amazon DynamoDB","serviceId":"DynamoDB","signatureVersion":"v4","targetPrefix":"DynamoDB_20111205","uid":"dynamodb-2011-12-05"},"operations":{"BatchGetItem":{"input":{"type":"structure","required":["RequestItems"],"members":{"RequestItems":{"shape":"S2"}}},"output":{"type":"structure","members":{"Responses":{"type":"map","key":{},"value":{"type":"structure","members":{"Items":{"shape":"Sk"},"ConsumedCapacityUnits":{"type":"double"}}}},"UnprocessedKeys":{"shape":"S2"}}}},"BatchWriteItem":{"input":{"type":"structure","required":["RequestItems"],"members":{"RequestItems":{"shape":"So"}}},"output":{"type":"structure","members":{"Responses":{"type":"map","key":{},"value":{"type":"structure","members":{"ConsumedCapacityUnits":{"type":"double"}}}},"UnprocessedItems":{"shape":"So"}}}},"CreateTable":{"input":{"type":"structure","required":["TableName","KeySchema","ProvisionedThroughput"],"members":{"TableName":{},"KeySchema":{"shape":"Sy"},"ProvisionedThroughput":{"shape":"S12"}}},"output":{"type":"structure","members":{"TableDescription":{"shape":"S15"}}}},"DeleteItem":{"input":{"type":"structure","required":["TableName","Key"],"members":{"TableName":{},"Key":{"shape":"S6"},"Expected":{"shape":"S1b"},"ReturnValues":{}}},"output":{"type":"structure","members":{"Attributes":{"shape":"Sl"},"ConsumedCapacityUnits":{"type":"double"}}}},"DeleteTable":{"input":{"type":"structure","required":["TableName"],"members":{"TableName":{}}},"output":{"type":"structure","members":{"TableDescription":{"shape":"S15"}}}},"DescribeTable":{"input":{"type":"structure","required":["TableName"],"members":{"TableName":{}}},"output":{"type":"structure","members":{"Table":{"shape":"S15"}}}},"GetItem":{"input":{"type":"structure","required":["TableName","Key"],"members":{"TableName":{},"Key":{"shape":"S6"},"AttributesToGet":{"shape":"Se"},"ConsistentRead":{"type":"boolean"}}},"output":{"type":"structure","members":{"Item":{"shape":"Sl"},"ConsumedCapacityUnits":{"type":"double"}}}},"ListTables":{"input":{"type":"structure","members":{"ExclusiveStartTableName":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"TableNames":{"type":"list","member":{}},"LastEvaluatedTableName":{}}}},"PutItem":{"input":{"type":"structure","required":["TableName","Item"],"members":{"TableName":{},"Item":{"shape":"Ss"},"Expected":{"shape":"S1b"},"ReturnValues":{}}},"output":{"type":"structure","members":{"Attributes":{"shape":"Sl"},"ConsumedCapacityUnits":{"type":"double"}}}},"Query":{"input":{"type":"structure","required":["TableName","HashKeyValue"],"members":{"TableName":{},"AttributesToGet":{"shape":"Se"},"Limit":{"type":"integer"},"ConsistentRead":{"type":"boolean"},"Count":{"type":"boolean"},"HashKeyValue":{"shape":"S7"},"RangeKeyCondition":{"shape":"S1u"},"ScanIndexForward":{"type":"boolean"},"ExclusiveStartKey":{"shape":"S6"}}},"output":{"type":"structure","members":{"Items":{"shape":"Sk"},"Count":{"type":"integer"},"LastEvaluatedKey":{"shape":"S6"},"ConsumedCapacityUnits":{"type":"double"}}}},"Scan":{"input":{"type":"structure","required":["TableName"],"members":{"TableName":{},"AttributesToGet":{"shape":"Se"},"Limit":{"type":"integer"},"Count":{"type":"boolean"},"ScanFilter":{"type":"map","key":{},"value":{"shape":"S1u"}},"ExclusiveStartKey":{"shape":"S6"}}},"output":{"type":"structure","members":{"Items":{"shape":"Sk"},"Count":{"type":"integer"},"ScannedCount":{"type":"integer"},"LastEvaluatedKey":{"shape":"S6"},"ConsumedCapacityUnits":{"type":"double"}}}},"UpdateItem":{"input":{"type":"structure","required":["TableName","Key","AttributeUpdates"],"members":{"TableName":{},"Key":{"shape":"S6"},"AttributeUpdates":{"type":"map","key":{},"value":{"type":"structure","members":{"Value":{"shape":"S7"},"Action":{}}}},"Expected":{"shape":"S1b"},"ReturnValues":{}}},"output":{"type":"structure","members":{"Attributes":{"shape":"Sl"},"ConsumedCapacityUnits":{"type":"double"}}}},"UpdateTable":{"input":{"type":"structure","required":["TableName","ProvisionedThroughput"],"members":{"TableName":{},"ProvisionedThroughput":{"shape":"S12"}}},"output":{"type":"structure","members":{"TableDescription":{"shape":"S15"}}}}},"shapes":{"S2":{"type":"map","key":{},"value":{"type":"structure","required":["Keys"],"members":{"Keys":{"type":"list","member":{"shape":"S6"}},"AttributesToGet":{"shape":"Se"},"ConsistentRead":{"type":"boolean"}}}},"S6":{"type":"structure","required":["HashKeyElement"],"members":{"HashKeyElement":{"shape":"S7"},"RangeKeyElement":{"shape":"S7"}}},"S7":{"type":"structure","members":{"S":{},"N":{},"B":{"type":"blob"},"SS":{"type":"list","member":{}},"NS":{"type":"list","member":{}},"BS":{"type":"list","member":{"type":"blob"}}}},"Se":{"type":"list","member":{}},"Sk":{"type":"list","member":{"shape":"Sl"}},"Sl":{"type":"map","key":{},"value":{"shape":"S7"}},"So":{"type":"map","key":{},"value":{"type":"list","member":{"type":"structure","members":{"PutRequest":{"type":"structure","required":["Item"],"members":{"Item":{"shape":"Ss"}}},"DeleteRequest":{"type":"structure","required":["Key"],"members":{"Key":{"shape":"S6"}}}}}}},"Ss":{"type":"map","key":{},"value":{"shape":"S7"}},"Sy":{"type":"structure","required":["HashKeyElement"],"members":{"HashKeyElement":{"shape":"Sz"},"RangeKeyElement":{"shape":"Sz"}}},"Sz":{"type":"structure","required":["AttributeName","AttributeType"],"members":{"AttributeName":{},"AttributeType":{}}},"S12":{"type":"structure","required":["ReadCapacityUnits","WriteCapacityUnits"],"members":{"ReadCapacityUnits":{"type":"long"},"WriteCapacityUnits":{"type":"long"}}},"S15":{"type":"structure","members":{"TableName":{},"KeySchema":{"shape":"Sy"},"TableStatus":{},"CreationDateTime":{"type":"timestamp"},"ProvisionedThroughput":{"type":"structure","members":{"LastIncreaseDateTime":{"type":"timestamp"},"LastDecreaseDateTime":{"type":"timestamp"},"NumberOfDecreasesToday":{"type":"long"},"ReadCapacityUnits":{"type":"long"},"WriteCapacityUnits":{"type":"long"}}},"TableSizeBytes":{"type":"long"},"ItemCount":{"type":"long"}}},"S1b":{"type":"map","key":{},"value":{"type":"structure","members":{"Value":{"shape":"S7"},"Exists":{"type":"boolean"}}}},"S1u":{"type":"structure","required":["ComparisonOperator"],"members":{"AttributeValueList":{"type":"list","member":{"shape":"S7"}},"ComparisonOperator":{}}}}}

/***/ }),
/* 184 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"BatchGetItem":{"input_token":"RequestItems","output_token":"UnprocessedKeys"},"ListTables":{"input_token":"ExclusiveStartTableName","limit_key":"Limit","output_token":"LastEvaluatedTableName","result_key":"TableNames"},"Query":{"input_token":"ExclusiveStartKey","limit_key":"Limit","output_token":"LastEvaluatedKey","result_key":"Items"},"Scan":{"input_token":"ExclusiveStartKey","limit_key":"Limit","output_token":"LastEvaluatedKey","result_key":"Items"}}}

/***/ }),
/* 185 */
/***/ (function(module, exports) {

	module.exports = {"version":2,"waiters":{"TableExists":{"delay":20,"operation":"DescribeTable","maxAttempts":25,"acceptors":[{"expected":"ACTIVE","matcher":"path","state":"success","argument":"Table.TableStatus"},{"expected":"ResourceNotFoundException","matcher":"error","state":"retry"}]},"TableNotExists":{"delay":20,"operation":"DescribeTable","maxAttempts":25,"acceptors":[{"expected":"ResourceNotFoundException","matcher":"error","state":"success"}]}}}

/***/ }),
/* 186 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2012-08-10","endpointPrefix":"dynamodb","jsonVersion":"1.0","protocol":"json","serviceAbbreviation":"DynamoDB","serviceFullName":"Amazon DynamoDB","serviceId":"DynamoDB","signatureVersion":"v4","targetPrefix":"DynamoDB_20120810","uid":"dynamodb-2012-08-10"},"operations":{"BatchExecuteStatement":{"input":{"type":"structure","required":["Statements"],"members":{"Statements":{"type":"list","member":{"type":"structure","required":["Statement"],"members":{"Statement":{},"Parameters":{"shape":"S5"},"ConsistentRead":{"type":"boolean"}}}}}},"output":{"type":"structure","members":{"Responses":{"type":"list","member":{"type":"structure","members":{"Error":{"type":"structure","members":{"Code":{},"Message":{}}},"TableName":{},"Item":{"shape":"Sq"}}}}}}},"BatchGetItem":{"input":{"type":"structure","required":["RequestItems"],"members":{"RequestItems":{"shape":"Ss"},"ReturnConsumedCapacity":{}}},"output":{"type":"structure","members":{"Responses":{"type":"map","key":{},"value":{"shape":"S13"}},"UnprocessedKeys":{"shape":"Ss"},"ConsumedCapacity":{"shape":"S14"}}},"endpointdiscovery":{}},"BatchWriteItem":{"input":{"type":"structure","required":["RequestItems"],"members":{"RequestItems":{"shape":"S1b"},"ReturnConsumedCapacity":{},"ReturnItemCollectionMetrics":{}}},"output":{"type":"structure","members":{"UnprocessedItems":{"shape":"S1b"},"ItemCollectionMetrics":{"shape":"S1j"},"ConsumedCapacity":{"shape":"S14"}}},"endpointdiscovery":{}},"CreateBackup":{"input":{"type":"structure","required":["TableName","BackupName"],"members":{"TableName":{},"BackupName":{}}},"output":{"type":"structure","members":{"BackupDetails":{"shape":"S1s"}}},"endpointdiscovery":{}},"CreateGlobalTable":{"input":{"type":"structure","required":["GlobalTableName","ReplicationGroup"],"members":{"GlobalTableName":{},"ReplicationGroup":{"shape":"S20"}}},"output":{"type":"structure","members":{"GlobalTableDescription":{"shape":"S24"}}},"endpointdiscovery":{}},"CreateTable":{"input":{"type":"structure","required":["AttributeDefinitions","TableName","KeySchema"],"members":{"AttributeDefinitions":{"shape":"S2i"},"TableName":{},"KeySchema":{"shape":"S2m"},"LocalSecondaryIndexes":{"shape":"S2p"},"GlobalSecondaryIndexes":{"shape":"S2v"},"BillingMode":{},"ProvisionedThroughput":{"shape":"S2x"},"StreamSpecification":{"shape":"S2z"},"SSESpecification":{"shape":"S32"},"Tags":{"shape":"S35"}}},"output":{"type":"structure","members":{"TableDescription":{"shape":"S3a"}}},"endpointdiscovery":{}},"DeleteBackup":{"input":{"type":"structure","required":["BackupArn"],"members":{"BackupArn":{}}},"output":{"type":"structure","members":{"BackupDescription":{"shape":"S3y"}}},"endpointdiscovery":{}},"DeleteItem":{"input":{"type":"structure","required":["TableName","Key"],"members":{"TableName":{},"Key":{"shape":"Sv"},"Expected":{"shape":"S4b"},"ConditionalOperator":{},"ReturnValues":{},"ReturnConsumedCapacity":{},"ReturnItemCollectionMetrics":{},"ConditionExpression":{},"ExpressionAttributeNames":{"shape":"Sy"},"ExpressionAttributeValues":{"shape":"S4j"}}},"output":{"type":"structure","members":{"Attributes":{"shape":"Sq"},"ConsumedCapacity":{"shape":"S15"},"ItemCollectionMetrics":{"shape":"S1l"}}},"endpointdiscovery":{}},"DeleteTable":{"input":{"type":"structure","required":["TableName"],"members":{"TableName":{}}},"output":{"type":"structure","members":{"TableDescription":{"shape":"S3a"}}},"endpointdiscovery":{}},"DescribeBackup":{"input":{"type":"structure","required":["BackupArn"],"members":{"BackupArn":{}}},"output":{"type":"structure","members":{"BackupDescription":{"shape":"S3y"}}},"endpointdiscovery":{}},"DescribeContinuousBackups":{"input":{"type":"structure","required":["TableName"],"members":{"TableName":{}}},"output":{"type":"structure","members":{"ContinuousBackupsDescription":{"shape":"S4s"}}},"endpointdiscovery":{}},"DescribeContributorInsights":{"input":{"type":"structure","required":["TableName"],"members":{"TableName":{},"IndexName":{}}},"output":{"type":"structure","members":{"TableName":{},"IndexName":{},"ContributorInsightsRuleList":{"type":"list","member":{}},"ContributorInsightsStatus":{},"LastUpdateDateTime":{"type":"timestamp"},"FailureException":{"type":"structure","members":{"ExceptionName":{},"ExceptionDescription":{}}}}}},"DescribeEndpoints":{"input":{"type":"structure","members":{}},"output":{"type":"structure","required":["Endpoints"],"members":{"Endpoints":{"type":"list","member":{"type":"structure","required":["Address","CachePeriodInMinutes"],"members":{"Address":{},"CachePeriodInMinutes":{"type":"long"}}}}}},"endpointoperation":true},"DescribeExport":{"input":{"type":"structure","required":["ExportArn"],"members":{"ExportArn":{}}},"output":{"type":"structure","members":{"ExportDescription":{"shape":"S5c"}}}},"DescribeGlobalTable":{"input":{"type":"structure","required":["GlobalTableName"],"members":{"GlobalTableName":{}}},"output":{"type":"structure","members":{"GlobalTableDescription":{"shape":"S24"}}},"endpointdiscovery":{}},"DescribeGlobalTableSettings":{"input":{"type":"structure","required":["GlobalTableName"],"members":{"GlobalTableName":{}}},"output":{"type":"structure","members":{"GlobalTableName":{},"ReplicaSettings":{"shape":"S5w"}}},"endpointdiscovery":{}},"DescribeKinesisStreamingDestination":{"input":{"type":"structure","required":["TableName"],"members":{"TableName":{}}},"output":{"type":"structure","members":{"TableName":{},"KinesisDataStreamDestinations":{"type":"list","member":{"type":"structure","members":{"StreamArn":{},"DestinationStatus":{},"DestinationStatusDescription":{}}}}}},"endpointdiscovery":{}},"DescribeLimits":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"AccountMaxReadCapacityUnits":{"type":"long"},"AccountMaxWriteCapacityUnits":{"type":"long"},"TableMaxReadCapacityUnits":{"type":"long"},"TableMaxWriteCapacityUnits":{"type":"long"}}},"endpointdiscovery":{}},"DescribeTable":{"input":{"type":"structure","required":["TableName"],"members":{"TableName":{}}},"output":{"type":"structure","members":{"Table":{"shape":"S3a"}}},"endpointdiscovery":{}},"DescribeTableReplicaAutoScaling":{"input":{"type":"structure","required":["TableName"],"members":{"TableName":{}}},"output":{"type":"structure","members":{"TableAutoScalingDescription":{"shape":"S6i"}}}},"DescribeTimeToLive":{"input":{"type":"structure","required":["TableName"],"members":{"TableName":{}}},"output":{"type":"structure","members":{"TimeToLiveDescription":{"shape":"S47"}}},"endpointdiscovery":{}},"DisableKinesisStreamingDestination":{"input":{"shape":"S6p"},"output":{"shape":"S6q"},"endpointdiscovery":{}},"EnableKinesisStreamingDestination":{"input":{"shape":"S6p"},"output":{"shape":"S6q"},"endpointdiscovery":{}},"ExecuteStatement":{"input":{"type":"structure","required":["Statement"],"members":{"Statement":{},"Parameters":{"shape":"S5"},"ConsistentRead":{"type":"boolean"},"NextToken":{}}},"output":{"type":"structure","members":{"Items":{"shape":"S13"},"NextToken":{}}}},"ExecuteTransaction":{"input":{"type":"structure","required":["TransactStatements"],"members":{"TransactStatements":{"type":"list","member":{"type":"structure","required":["Statement"],"members":{"Statement":{},"Parameters":{"shape":"S5"}}}},"ClientRequestToken":{"idempotencyToken":true}}},"output":{"type":"structure","members":{"Responses":{"shape":"S6z"}}}},"ExportTableToPointInTime":{"input":{"type":"structure","required":["TableArn","S3Bucket"],"members":{"TableArn":{},"ExportTime":{"type":"timestamp"},"ClientToken":{"idempotencyToken":true},"S3Bucket":{},"S3BucketOwner":{},"S3Prefix":{},"S3SseAlgorithm":{},"S3SseKmsKeyId":{},"ExportFormat":{}}},"output":{"type":"structure","members":{"ExportDescription":{"shape":"S5c"}}}},"GetItem":{"input":{"type":"structure","required":["TableName","Key"],"members":{"TableName":{},"Key":{"shape":"Sv"},"AttributesToGet":{"shape":"Sw"},"ConsistentRead":{"type":"boolean"},"ReturnConsumedCapacity":{},"ProjectionExpression":{},"ExpressionAttributeNames":{"shape":"Sy"}}},"output":{"type":"structure","members":{"Item":{"shape":"Sq"},"ConsumedCapacity":{"shape":"S15"}}},"endpointdiscovery":{}},"ListBackups":{"input":{"type":"structure","members":{"TableName":{},"Limit":{"type":"integer"},"TimeRangeLowerBound":{"type":"timestamp"},"TimeRangeUpperBound":{"type":"timestamp"},"ExclusiveStartBackupArn":{},"BackupType":{}}},"output":{"type":"structure","members":{"BackupSummaries":{"type":"list","member":{"type":"structure","members":{"TableName":{},"TableId":{},"TableArn":{},"BackupArn":{},"BackupName":{},"BackupCreationDateTime":{"type":"timestamp"},"BackupExpiryDateTime":{"type":"timestamp"},"BackupStatus":{},"BackupType":{},"BackupSizeBytes":{"type":"long"}}}},"LastEvaluatedBackupArn":{}}},"endpointdiscovery":{}},"ListContributorInsights":{"input":{"type":"structure","members":{"TableName":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"ContributorInsightsSummaries":{"type":"list","member":{"type":"structure","members":{"TableName":{},"IndexName":{},"ContributorInsightsStatus":{}}}},"NextToken":{}}}},"ListExports":{"input":{"type":"structure","members":{"TableArn":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"ExportSummaries":{"type":"list","member":{"type":"structure","members":{"ExportArn":{},"ExportStatus":{}}}},"NextToken":{}}}},"ListGlobalTables":{"input":{"type":"structure","members":{"ExclusiveStartGlobalTableName":{},"Limit":{"type":"integer"},"RegionName":{}}},"output":{"type":"structure","members":{"GlobalTables":{"type":"list","member":{"type":"structure","members":{"GlobalTableName":{},"ReplicationGroup":{"shape":"S20"}}}},"LastEvaluatedGlobalTableName":{}}},"endpointdiscovery":{}},"ListTables":{"input":{"type":"structure","members":{"ExclusiveStartTableName":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"TableNames":{"type":"list","member":{}},"LastEvaluatedTableName":{}}},"endpointdiscovery":{}},"ListTagsOfResource":{"input":{"type":"structure","required":["ResourceArn"],"members":{"ResourceArn":{},"NextToken":{}}},"output":{"type":"structure","members":{"Tags":{"shape":"S35"},"NextToken":{}}},"endpointdiscovery":{}},"PutItem":{"input":{"type":"structure","required":["TableName","Item"],"members":{"TableName":{},"Item":{"shape":"S1f"},"Expected":{"shape":"S4b"},"ReturnValues":{},"ReturnConsumedCapacity":{},"ReturnItemCollectionMetrics":{},"ConditionalOperator":{},"ConditionExpression":{},"ExpressionAttributeNames":{"shape":"Sy"},"ExpressionAttributeValues":{"shape":"S4j"}}},"output":{"type":"structure","members":{"Attributes":{"shape":"Sq"},"ConsumedCapacity":{"shape":"S15"},"ItemCollectionMetrics":{"shape":"S1l"}}},"endpointdiscovery":{}},"Query":{"input":{"type":"structure","required":["TableName"],"members":{"TableName":{},"IndexName":{},"Select":{},"AttributesToGet":{"shape":"Sw"},"Limit":{"type":"integer"},"ConsistentRead":{"type":"boolean"},"KeyConditions":{"type":"map","key":{},"value":{"shape":"S86"}},"QueryFilter":{"shape":"S87"},"ConditionalOperator":{},"ScanIndexForward":{"type":"boolean"},"ExclusiveStartKey":{"shape":"Sv"},"ReturnConsumedCapacity":{},"ProjectionExpression":{},"FilterExpression":{},"KeyConditionExpression":{},"ExpressionAttributeNames":{"shape":"Sy"},"ExpressionAttributeValues":{"shape":"S4j"}}},"output":{"type":"structure","members":{"Items":{"shape":"S13"},"Count":{"type":"integer"},"ScannedCount":{"type":"integer"},"LastEvaluatedKey":{"shape":"Sv"},"ConsumedCapacity":{"shape":"S15"}}},"endpointdiscovery":{}},"RestoreTableFromBackup":{"input":{"type":"structure","required":["TargetTableName","BackupArn"],"members":{"TargetTableName":{},"BackupArn":{},"BillingModeOverride":{},"GlobalSecondaryIndexOverride":{"shape":"S2v"},"LocalSecondaryIndexOverride":{"shape":"S2p"},"ProvisionedThroughputOverride":{"shape":"S2x"},"SSESpecificationOverride":{"shape":"S32"}}},"output":{"type":"structure","members":{"TableDescription":{"shape":"S3a"}}},"endpointdiscovery":{}},"RestoreTableToPointInTime":{"input":{"type":"structure","required":["TargetTableName"],"members":{"SourceTableArn":{},"SourceTableName":{},"TargetTableName":{},"UseLatestRestorableTime":{"type":"boolean"},"RestoreDateTime":{"type":"timestamp"},"BillingModeOverride":{},"GlobalSecondaryIndexOverride":{"shape":"S2v"},"LocalSecondaryIndexOverride":{"shape":"S2p"},"ProvisionedThroughputOverride":{"shape":"S2x"},"SSESpecificationOverride":{"shape":"S32"}}},"output":{"type":"structure","members":{"TableDescription":{"shape":"S3a"}}},"endpointdiscovery":{}},"Scan":{"input":{"type":"structure","required":["TableName"],"members":{"TableName":{},"IndexName":{},"AttributesToGet":{"shape":"Sw"},"Limit":{"type":"integer"},"Select":{},"ScanFilter":{"shape":"S87"},"ConditionalOperator":{},"ExclusiveStartKey":{"shape":"Sv"},"ReturnConsumedCapacity":{},"TotalSegments":{"type":"integer"},"Segment":{"type":"integer"},"ProjectionExpression":{},"FilterExpression":{},"ExpressionAttributeNames":{"shape":"Sy"},"ExpressionAttributeValues":{"shape":"S4j"},"ConsistentRead":{"type":"boolean"}}},"output":{"type":"structure","members":{"Items":{"shape":"S13"},"Count":{"type":"integer"},"ScannedCount":{"type":"integer"},"LastEvaluatedKey":{"shape":"Sv"},"ConsumedCapacity":{"shape":"S15"}}},"endpointdiscovery":{}},"TagResource":{"input":{"type":"structure","required":["ResourceArn","Tags"],"members":{"ResourceArn":{},"Tags":{"shape":"S35"}}},"endpointdiscovery":{}},"TransactGetItems":{"input":{"type":"structure","required":["TransactItems"],"members":{"TransactItems":{"type":"list","member":{"type":"structure","required":["Get"],"members":{"Get":{"type":"structure","required":["Key","TableName"],"members":{"Key":{"shape":"Sv"},"TableName":{},"ProjectionExpression":{},"ExpressionAttributeNames":{"shape":"Sy"}}}}}},"ReturnConsumedCapacity":{}}},"output":{"type":"structure","members":{"ConsumedCapacity":{"shape":"S14"},"Responses":{"shape":"S6z"}}},"endpointdiscovery":{}},"TransactWriteItems":{"input":{"type":"structure","required":["TransactItems"],"members":{"TransactItems":{"type":"list","member":{"type":"structure","members":{"ConditionCheck":{"type":"structure","required":["Key","TableName","ConditionExpression"],"members":{"Key":{"shape":"Sv"},"TableName":{},"ConditionExpression":{},"ExpressionAttributeNames":{"shape":"Sy"},"ExpressionAttributeValues":{"shape":"S4j"},"ReturnValuesOnConditionCheckFailure":{}}},"Put":{"type":"structure","required":["Item","TableName"],"members":{"Item":{"shape":"S1f"},"TableName":{},"ConditionExpression":{},"ExpressionAttributeNames":{"shape":"Sy"},"ExpressionAttributeValues":{"shape":"S4j"},"ReturnValuesOnConditionCheckFailure":{}}},"Delete":{"type":"structure","required":["Key","TableName"],"members":{"Key":{"shape":"Sv"},"TableName":{},"ConditionExpression":{},"ExpressionAttributeNames":{"shape":"Sy"},"ExpressionAttributeValues":{"shape":"S4j"},"ReturnValuesOnConditionCheckFailure":{}}},"Update":{"type":"structure","required":["Key","UpdateExpression","TableName"],"members":{"Key":{"shape":"Sv"},"UpdateExpression":{},"TableName":{},"ConditionExpression":{},"ExpressionAttributeNames":{"shape":"Sy"},"ExpressionAttributeValues":{"shape":"S4j"},"ReturnValuesOnConditionCheckFailure":{}}}}}},"ReturnConsumedCapacity":{},"ReturnItemCollectionMetrics":{},"ClientRequestToken":{"idempotencyToken":true}}},"output":{"type":"structure","members":{"ConsumedCapacity":{"shape":"S14"},"ItemCollectionMetrics":{"shape":"S1j"}}},"endpointdiscovery":{}},"UntagResource":{"input":{"type":"structure","required":["ResourceArn","TagKeys"],"members":{"ResourceArn":{},"TagKeys":{"type":"list","member":{}}}},"endpointdiscovery":{}},"UpdateContinuousBackups":{"input":{"type":"structure","required":["TableName","PointInTimeRecoverySpecification"],"members":{"TableName":{},"PointInTimeRecoverySpecification":{"type":"structure","required":["PointInTimeRecoveryEnabled"],"members":{"PointInTimeRecoveryEnabled":{"type":"boolean"}}}}},"output":{"type":"structure","members":{"ContinuousBackupsDescription":{"shape":"S4s"}}},"endpointdiscovery":{}},"UpdateContributorInsights":{"input":{"type":"structure","required":["TableName","ContributorInsightsAction"],"members":{"TableName":{},"IndexName":{},"ContributorInsightsAction":{}}},"output":{"type":"structure","members":{"TableName":{},"IndexName":{},"ContributorInsightsStatus":{}}}},"UpdateGlobalTable":{"input":{"type":"structure","required":["GlobalTableName","ReplicaUpdates"],"members":{"GlobalTableName":{},"ReplicaUpdates":{"type":"list","member":{"type":"structure","members":{"Create":{"type":"structure","required":["RegionName"],"members":{"RegionName":{}}},"Delete":{"type":"structure","required":["RegionName"],"members":{"RegionName":{}}}}}}}},"output":{"type":"structure","members":{"GlobalTableDescription":{"shape":"S24"}}},"endpointdiscovery":{}},"UpdateGlobalTableSettings":{"input":{"type":"structure","required":["GlobalTableName"],"members":{"GlobalTableName":{},"GlobalTableBillingMode":{},"GlobalTableProvisionedWriteCapacityUnits":{"type":"long"},"GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate":{"shape":"S9e"},"GlobalTableGlobalSecondaryIndexSettingsUpdate":{"type":"list","member":{"type":"structure","required":["IndexName"],"members":{"IndexName":{},"ProvisionedWriteCapacityUnits":{"type":"long"},"ProvisionedWriteCapacityAutoScalingSettingsUpdate":{"shape":"S9e"}}}},"ReplicaSettingsUpdate":{"type":"list","member":{"type":"structure","required":["RegionName"],"members":{"RegionName":{},"ReplicaProvisionedReadCapacityUnits":{"type":"long"},"ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate":{"shape":"S9e"},"ReplicaGlobalSecondaryIndexSettingsUpdate":{"type":"list","member":{"type":"structure","required":["IndexName"],"members":{"IndexName":{},"ProvisionedReadCapacityUnits":{"type":"long"},"ProvisionedReadCapacityAutoScalingSettingsUpdate":{"shape":"S9e"}}}}}}}}},"output":{"type":"structure","members":{"GlobalTableName":{},"ReplicaSettings":{"shape":"S5w"}}},"endpointdiscovery":{}},"UpdateItem":{"input":{"type":"structure","required":["TableName","Key"],"members":{"TableName":{},"Key":{"shape":"Sv"},"AttributeUpdates":{"type":"map","key":{},"value":{"type":"structure","members":{"Value":{"shape":"S6"},"Action":{}}}},"Expected":{"shape":"S4b"},"ConditionalOperator":{},"ReturnValues":{},"ReturnConsumedCapacity":{},"ReturnItemCollectionMetrics":{},"UpdateExpression":{},"ConditionExpression":{},"ExpressionAttributeNames":{"shape":"Sy"},"ExpressionAttributeValues":{"shape":"S4j"}}},"output":{"type":"structure","members":{"Attributes":{"shape":"Sq"},"ConsumedCapacity":{"shape":"S15"},"ItemCollectionMetrics":{"shape":"S1l"}}},"endpointdiscovery":{}},"UpdateTable":{"input":{"type":"structure","required":["TableName"],"members":{"AttributeDefinitions":{"shape":"S2i"},"TableName":{},"BillingMode":{},"ProvisionedThroughput":{"shape":"S2x"},"GlobalSecondaryIndexUpdates":{"type":"list","member":{"type":"structure","members":{"Update":{"type":"structure","required":["IndexName","ProvisionedThroughput"],"members":{"IndexName":{},"ProvisionedThroughput":{"shape":"S2x"}}},"Create":{"type":"structure","required":["IndexName","KeySchema","Projection"],"members":{"IndexName":{},"KeySchema":{"shape":"S2m"},"Projection":{"shape":"S2r"},"ProvisionedThroughput":{"shape":"S2x"}}},"Delete":{"type":"structure","required":["IndexName"],"members":{"IndexName":{}}}}}},"StreamSpecification":{"shape":"S2z"},"SSESpecification":{"shape":"S32"},"ReplicaUpdates":{"type":"list","member":{"type":"structure","members":{"Create":{"type":"structure","required":["RegionName"],"members":{"RegionName":{},"KMSMasterKeyId":{},"ProvisionedThroughputOverride":{"shape":"S2b"},"GlobalSecondaryIndexes":{"shape":"Sa3"}}},"Update":{"type":"structure","required":["RegionName"],"members":{"RegionName":{},"KMSMasterKeyId":{},"ProvisionedThroughputOverride":{"shape":"S2b"},"GlobalSecondaryIndexes":{"shape":"Sa3"}}},"Delete":{"type":"structure","required":["RegionName"],"members":{"RegionName":{}}}}}}}},"output":{"type":"structure","members":{"TableDescription":{"shape":"S3a"}}},"endpointdiscovery":{}},"UpdateTableReplicaAutoScaling":{"input":{"type":"structure","required":["TableName"],"members":{"GlobalSecondaryIndexUpdates":{"type":"list","member":{"type":"structure","members":{"IndexName":{},"ProvisionedWriteCapacityAutoScalingUpdate":{"shape":"S9e"}}}},"TableName":{},"ProvisionedWriteCapacityAutoScalingUpdate":{"shape":"S9e"},"ReplicaUpdates":{"type":"list","member":{"type":"structure","required":["RegionName"],"members":{"RegionName":{},"ReplicaGlobalSecondaryIndexUpdates":{"type":"list","member":{"type":"structure","members":{"IndexName":{},"ProvisionedReadCapacityAutoScalingUpdate":{"shape":"S9e"}}}},"ReplicaProvisionedReadCapacityAutoScalingUpdate":{"shape":"S9e"}}}}}},"output":{"type":"structure","members":{"TableAutoScalingDescription":{"shape":"S6i"}}}},"UpdateTimeToLive":{"input":{"type":"structure","required":["TableName","TimeToLiveSpecification"],"members":{"TableName":{},"TimeToLiveSpecification":{"shape":"Sah"}}},"output":{"type":"structure","members":{"TimeToLiveSpecification":{"shape":"Sah"}}},"endpointdiscovery":{}}},"shapes":{"S5":{"type":"list","member":{"shape":"S6"}},"S6":{"type":"structure","members":{"S":{},"N":{},"B":{"type":"blob"},"SS":{"type":"list","member":{}},"NS":{"type":"list","member":{}},"BS":{"type":"list","member":{"type":"blob"}},"M":{"type":"map","key":{},"value":{"shape":"S6"}},"L":{"type":"list","member":{"shape":"S6"}},"NULL":{"type":"boolean"},"BOOL":{"type":"boolean"}}},"Sq":{"type":"map","key":{},"value":{"shape":"S6"}},"Ss":{"type":"map","key":{},"value":{"type":"structure","required":["Keys"],"members":{"Keys":{"type":"list","member":{"shape":"Sv"}},"AttributesToGet":{"shape":"Sw"},"ConsistentRead":{"type":"boolean"},"ProjectionExpression":{},"ExpressionAttributeNames":{"shape":"Sy"}}}},"Sv":{"type":"map","key":{},"value":{"shape":"S6"}},"Sw":{"type":"list","member":{}},"Sy":{"type":"map","key":{},"value":{}},"S13":{"type":"list","member":{"shape":"Sq"}},"S14":{"type":"list","member":{"shape":"S15"}},"S15":{"type":"structure","members":{"TableName":{},"CapacityUnits":{"type":"double"},"ReadCapacityUnits":{"type":"double"},"WriteCapacityUnits":{"type":"double"},"Table":{"shape":"S17"},"LocalSecondaryIndexes":{"shape":"S18"},"GlobalSecondaryIndexes":{"shape":"S18"}}},"S17":{"type":"structure","members":{"ReadCapacityUnits":{"type":"double"},"WriteCapacityUnits":{"type":"double"},"CapacityUnits":{"type":"double"}}},"S18":{"type":"map","key":{},"value":{"shape":"S17"}},"S1b":{"type":"map","key":{},"value":{"type":"list","member":{"type":"structure","members":{"PutRequest":{"type":"structure","required":["Item"],"members":{"Item":{"shape":"S1f"}}},"DeleteRequest":{"type":"structure","required":["Key"],"members":{"Key":{"shape":"Sv"}}}}}}},"S1f":{"type":"map","key":{},"value":{"shape":"S6"}},"S1j":{"type":"map","key":{},"value":{"type":"list","member":{"shape":"S1l"}}},"S1l":{"type":"structure","members":{"ItemCollectionKey":{"type":"map","key":{},"value":{"shape":"S6"}},"SizeEstimateRangeGB":{"type":"list","member":{"type":"double"}}}},"S1s":{"type":"structure","required":["BackupArn","BackupName","BackupStatus","BackupType","BackupCreationDateTime"],"members":{"BackupArn":{},"BackupName":{},"BackupSizeBytes":{"type":"long"},"BackupStatus":{},"BackupType":{},"BackupCreationDateTime":{"type":"timestamp"},"BackupExpiryDateTime":{"type":"timestamp"}}},"S20":{"type":"list","member":{"type":"structure","members":{"RegionName":{}}}},"S24":{"type":"structure","members":{"ReplicationGroup":{"shape":"S25"},"GlobalTableArn":{},"CreationDateTime":{"type":"timestamp"},"GlobalTableStatus":{},"GlobalTableName":{}}},"S25":{"type":"list","member":{"type":"structure","members":{"RegionName":{},"ReplicaStatus":{},"ReplicaStatusDescription":{},"ReplicaStatusPercentProgress":{},"KMSMasterKeyId":{},"ProvisionedThroughputOverride":{"shape":"S2b"},"GlobalSecondaryIndexes":{"type":"list","member":{"type":"structure","members":{"IndexName":{},"ProvisionedThroughputOverride":{"shape":"S2b"}}}},"ReplicaInaccessibleDateTime":{"type":"timestamp"}}}},"S2b":{"type":"structure","members":{"ReadCapacityUnits":{"type":"long"}}},"S2i":{"type":"list","member":{"type":"structure","required":["AttributeName","AttributeType"],"members":{"AttributeName":{},"AttributeType":{}}}},"S2m":{"type":"list","member":{"type":"structure","required":["AttributeName","KeyType"],"members":{"AttributeName":{},"KeyType":{}}}},"S2p":{"type":"list","member":{"type":"structure","required":["IndexName","KeySchema","Projection"],"members":{"IndexName":{},"KeySchema":{"shape":"S2m"},"Projection":{"shape":"S2r"}}}},"S2r":{"type":"structure","members":{"ProjectionType":{},"NonKeyAttributes":{"type":"list","member":{}}}},"S2v":{"type":"list","member":{"type":"structure","required":["IndexName","KeySchema","Projection"],"members":{"IndexName":{},"KeySchema":{"shape":"S2m"},"Projection":{"shape":"S2r"},"ProvisionedThroughput":{"shape":"S2x"}}}},"S2x":{"type":"structure","required":["ReadCapacityUnits","WriteCapacityUnits"],"members":{"ReadCapacityUnits":{"type":"long"},"WriteCapacityUnits":{"type":"long"}}},"S2z":{"type":"structure","required":["StreamEnabled"],"members":{"StreamEnabled":{"type":"boolean"},"StreamViewType":{}}},"S32":{"type":"structure","members":{"Enabled":{"type":"boolean"},"SSEType":{},"KMSMasterKeyId":{}}},"S35":{"type":"list","member":{"type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{}}}},"S3a":{"type":"structure","members":{"AttributeDefinitions":{"shape":"S2i"},"TableName":{},"KeySchema":{"shape":"S2m"},"TableStatus":{},"CreationDateTime":{"type":"timestamp"},"ProvisionedThroughput":{"shape":"S3c"},"TableSizeBytes":{"type":"long"},"ItemCount":{"type":"long"},"TableArn":{},"TableId":{},"BillingModeSummary":{"shape":"S3g"},"LocalSecondaryIndexes":{"type":"list","member":{"type":"structure","members":{"IndexName":{},"KeySchema":{"shape":"S2m"},"Projection":{"shape":"S2r"},"IndexSizeBytes":{"type":"long"},"ItemCount":{"type":"long"},"IndexArn":{}}}},"GlobalSecondaryIndexes":{"type":"list","member":{"type":"structure","members":{"IndexName":{},"KeySchema":{"shape":"S2m"},"Projection":{"shape":"S2r"},"IndexStatus":{},"Backfilling":{"type":"boolean"},"ProvisionedThroughput":{"shape":"S3c"},"IndexSizeBytes":{"type":"long"},"ItemCount":{"type":"long"},"IndexArn":{}}}},"StreamSpecification":{"shape":"S2z"},"LatestStreamLabel":{},"LatestStreamArn":{},"GlobalTableVersion":{},"Replicas":{"shape":"S25"},"RestoreSummary":{"type":"structure","required":["RestoreDateTime","RestoreInProgress"],"members":{"SourceBackupArn":{},"SourceTableArn":{},"RestoreDateTime":{"type":"timestamp"},"RestoreInProgress":{"type":"boolean"}}},"SSEDescription":{"shape":"S3r"},"ArchivalSummary":{"type":"structure","members":{"ArchivalDateTime":{"type":"timestamp"},"ArchivalReason":{},"ArchivalBackupArn":{}}}}},"S3c":{"type":"structure","members":{"LastIncreaseDateTime":{"type":"timestamp"},"LastDecreaseDateTime":{"type":"timestamp"},"NumberOfDecreasesToday":{"type":"long"},"ReadCapacityUnits":{"type":"long"},"WriteCapacityUnits":{"type":"long"}}},"S3g":{"type":"structure","members":{"BillingMode":{},"LastUpdateToPayPerRequestDateTime":{"type":"timestamp"}}},"S3r":{"type":"structure","members":{"Status":{},"SSEType":{},"KMSMasterKeyArn":{},"InaccessibleEncryptionDateTime":{"type":"timestamp"}}},"S3y":{"type":"structure","members":{"BackupDetails":{"shape":"S1s"},"SourceTableDetails":{"type":"structure","required":["TableName","TableId","KeySchema","TableCreationDateTime","ProvisionedThroughput"],"members":{"TableName":{},"TableId":{},"TableArn":{},"TableSizeBytes":{"type":"long"},"KeySchema":{"shape":"S2m"},"TableCreationDateTime":{"type":"timestamp"},"ProvisionedThroughput":{"shape":"S2x"},"ItemCount":{"type":"long"},"BillingMode":{}}},"SourceTableFeatureDetails":{"type":"structure","members":{"LocalSecondaryIndexes":{"type":"list","member":{"type":"structure","members":{"IndexName":{},"KeySchema":{"shape":"S2m"},"Projection":{"shape":"S2r"}}}},"GlobalSecondaryIndexes":{"type":"list","member":{"type":"structure","members":{"IndexName":{},"KeySchema":{"shape":"S2m"},"Projection":{"shape":"S2r"},"ProvisionedThroughput":{"shape":"S2x"}}}},"StreamDescription":{"shape":"S2z"},"TimeToLiveDescription":{"shape":"S47"},"SSEDescription":{"shape":"S3r"}}}}},"S47":{"type":"structure","members":{"TimeToLiveStatus":{},"AttributeName":{}}},"S4b":{"type":"map","key":{},"value":{"type":"structure","members":{"Value":{"shape":"S6"},"Exists":{"type":"boolean"},"ComparisonOperator":{},"AttributeValueList":{"shape":"S4f"}}}},"S4f":{"type":"list","member":{"shape":"S6"}},"S4j":{"type":"map","key":{},"value":{"shape":"S6"}},"S4s":{"type":"structure","required":["ContinuousBackupsStatus"],"members":{"ContinuousBackupsStatus":{},"PointInTimeRecoveryDescription":{"type":"structure","members":{"PointInTimeRecoveryStatus":{},"EarliestRestorableDateTime":{"type":"timestamp"},"LatestRestorableDateTime":{"type":"timestamp"}}}}},"S5c":{"type":"structure","members":{"ExportArn":{},"ExportStatus":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"ExportManifest":{},"TableArn":{},"TableId":{},"ExportTime":{"type":"timestamp"},"ClientToken":{},"S3Bucket":{},"S3BucketOwner":{},"S3Prefix":{},"S3SseAlgorithm":{},"S3SseKmsKeyId":{},"FailureCode":{},"FailureMessage":{},"ExportFormat":{},"BilledSizeBytes":{"type":"long"},"ItemCount":{"type":"long"}}},"S5w":{"type":"list","member":{"type":"structure","required":["RegionName"],"members":{"RegionName":{},"ReplicaStatus":{},"ReplicaBillingModeSummary":{"shape":"S3g"},"ReplicaProvisionedReadCapacityUnits":{"type":"long"},"ReplicaProvisionedReadCapacityAutoScalingSettings":{"shape":"S5y"},"ReplicaProvisionedWriteCapacityUnits":{"type":"long"},"ReplicaProvisionedWriteCapacityAutoScalingSettings":{"shape":"S5y"},"ReplicaGlobalSecondaryIndexSettings":{"type":"list","member":{"type":"structure","required":["IndexName"],"members":{"IndexName":{},"IndexStatus":{},"ProvisionedReadCapacityUnits":{"type":"long"},"ProvisionedReadCapacityAutoScalingSettings":{"shape":"S5y"},"ProvisionedWriteCapacityUnits":{"type":"long"},"ProvisionedWriteCapacityAutoScalingSettings":{"shape":"S5y"}}}}}}},"S5y":{"type":"structure","members":{"MinimumUnits":{"type":"long"},"MaximumUnits":{"type":"long"},"AutoScalingDisabled":{"type":"boolean"},"AutoScalingRoleArn":{},"ScalingPolicies":{"type":"list","member":{"type":"structure","members":{"PolicyName":{},"TargetTrackingScalingPolicyConfiguration":{"type":"structure","required":["TargetValue"],"members":{"DisableScaleIn":{"type":"boolean"},"ScaleInCooldown":{"type":"integer"},"ScaleOutCooldown":{"type":"integer"},"TargetValue":{"type":"double"}}}}}}}},"S6i":{"type":"structure","members":{"TableName":{},"TableStatus":{},"Replicas":{"type":"list","member":{"type":"structure","members":{"RegionName":{},"GlobalSecondaryIndexes":{"type":"list","member":{"type":"structure","members":{"IndexName":{},"IndexStatus":{},"ProvisionedReadCapacityAutoScalingSettings":{"shape":"S5y"},"ProvisionedWriteCapacityAutoScalingSettings":{"shape":"S5y"}}}},"ReplicaProvisionedReadCapacityAutoScalingSettings":{"shape":"S5y"},"ReplicaProvisionedWriteCapacityAutoScalingSettings":{"shape":"S5y"},"ReplicaStatus":{}}}}}},"S6p":{"type":"structure","required":["TableName","StreamArn"],"members":{"TableName":{},"StreamArn":{}}},"S6q":{"type":"structure","members":{"TableName":{},"StreamArn":{},"DestinationStatus":{}}},"S6z":{"type":"list","member":{"type":"structure","members":{"Item":{"shape":"Sq"}}}},"S86":{"type":"structure","required":["ComparisonOperator"],"members":{"AttributeValueList":{"shape":"S4f"},"ComparisonOperator":{}}},"S87":{"type":"map","key":{},"value":{"shape":"S86"}},"S9e":{"type":"structure","members":{"MinimumUnits":{"type":"long"},"MaximumUnits":{"type":"long"},"AutoScalingDisabled":{"type":"boolean"},"AutoScalingRoleArn":{},"ScalingPolicyUpdate":{"type":"structure","required":["TargetTrackingScalingPolicyConfiguration"],"members":{"PolicyName":{},"TargetTrackingScalingPolicyConfiguration":{"type":"structure","required":["TargetValue"],"members":{"DisableScaleIn":{"type":"boolean"},"ScaleInCooldown":{"type":"integer"},"ScaleOutCooldown":{"type":"integer"},"TargetValue":{"type":"double"}}}}}}},"Sa3":{"type":"list","member":{"type":"structure","required":["IndexName"],"members":{"IndexName":{},"ProvisionedThroughputOverride":{"shape":"S2b"}}}},"Sah":{"type":"structure","required":["Enabled","AttributeName"],"members":{"Enabled":{"type":"boolean"},"AttributeName":{}}}}}

/***/ }),
/* 187 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"BatchGetItem":{"input_token":"RequestItems","output_token":"UnprocessedKeys"},"ListContributorInsights":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken"},"ListExports":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken"},"ListTables":{"input_token":"ExclusiveStartTableName","limit_key":"Limit","output_token":"LastEvaluatedTableName","result_key":"TableNames"},"Query":{"input_token":"ExclusiveStartKey","limit_key":"Limit","output_token":"LastEvaluatedKey","result_key":"Items"},"Scan":{"input_token":"ExclusiveStartKey","limit_key":"Limit","output_token":"LastEvaluatedKey","result_key":"Items"}}}

/***/ }),
/* 188 */
/***/ (function(module, exports) {

	module.exports = {"version":2,"waiters":{"TableExists":{"delay":20,"operation":"DescribeTable","maxAttempts":25,"acceptors":[{"expected":"ACTIVE","matcher":"path","state":"success","argument":"Table.TableStatus"},{"expected":"ResourceNotFoundException","matcher":"error","state":"retry"}]},"TableNotExists":{"delay":20,"operation":"DescribeTable","maxAttempts":25,"acceptors":[{"expected":"ResourceNotFoundException","matcher":"error","state":"success"}]}}}

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['dynamodbstreams'] = {};
	AWS.DynamoDBStreams = Service.defineService('dynamodbstreams', ['2012-08-10']);
	Object.defineProperty(apiLoader.services['dynamodbstreams'], '2012-08-10', {
	  get: function get() {
	    var model = __webpack_require__(190);
	    model.paginators = __webpack_require__(191).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.DynamoDBStreams;


/***/ }),
/* 190 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2012-08-10","endpointPrefix":"streams.dynamodb","jsonVersion":"1.0","protocol":"json","serviceFullName":"Amazon DynamoDB Streams","serviceId":"DynamoDB Streams","signatureVersion":"v4","signingName":"dynamodb","targetPrefix":"DynamoDBStreams_20120810","uid":"streams-dynamodb-2012-08-10"},"operations":{"DescribeStream":{"input":{"type":"structure","required":["StreamArn"],"members":{"StreamArn":{},"Limit":{"type":"integer"},"ExclusiveStartShardId":{}}},"output":{"type":"structure","members":{"StreamDescription":{"type":"structure","members":{"StreamArn":{},"StreamLabel":{},"StreamStatus":{},"StreamViewType":{},"CreationRequestDateTime":{"type":"timestamp"},"TableName":{},"KeySchema":{"type":"list","member":{"type":"structure","required":["AttributeName","KeyType"],"members":{"AttributeName":{},"KeyType":{}}}},"Shards":{"type":"list","member":{"type":"structure","members":{"ShardId":{},"SequenceNumberRange":{"type":"structure","members":{"StartingSequenceNumber":{},"EndingSequenceNumber":{}}},"ParentShardId":{}}}},"LastEvaluatedShardId":{}}}}}},"GetRecords":{"input":{"type":"structure","required":["ShardIterator"],"members":{"ShardIterator":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"Records":{"type":"list","member":{"type":"structure","members":{"eventID":{},"eventName":{},"eventVersion":{},"eventSource":{},"awsRegion":{},"dynamodb":{"type":"structure","members":{"ApproximateCreationDateTime":{"type":"timestamp"},"Keys":{"shape":"Sr"},"NewImage":{"shape":"Sr"},"OldImage":{"shape":"Sr"},"SequenceNumber":{},"SizeBytes":{"type":"long"},"StreamViewType":{}}},"userIdentity":{"type":"structure","members":{"PrincipalId":{},"Type":{}}}}}},"NextShardIterator":{}}}},"GetShardIterator":{"input":{"type":"structure","required":["StreamArn","ShardId","ShardIteratorType"],"members":{"StreamArn":{},"ShardId":{},"ShardIteratorType":{},"SequenceNumber":{}}},"output":{"type":"structure","members":{"ShardIterator":{}}}},"ListStreams":{"input":{"type":"structure","members":{"TableName":{},"Limit":{"type":"integer"},"ExclusiveStartStreamArn":{}}},"output":{"type":"structure","members":{"Streams":{"type":"list","member":{"type":"structure","members":{"StreamArn":{},"TableName":{},"StreamLabel":{}}}},"LastEvaluatedStreamArn":{}}}}},"shapes":{"Sr":{"type":"map","key":{},"value":{"shape":"St"}},"St":{"type":"structure","members":{"S":{},"N":{},"B":{"type":"blob"},"SS":{"type":"list","member":{}},"NS":{"type":"list","member":{}},"BS":{"type":"list","member":{"type":"blob"}},"M":{"type":"map","key":{},"value":{"shape":"St"}},"L":{"type":"list","member":{"shape":"St"}},"NULL":{"type":"boolean"},"BOOL":{"type":"boolean"}}}}}

/***/ }),
/* 191 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{}}

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['ec2'] = {};
	AWS.EC2 = Service.defineService('ec2', ['2013-06-15*', '2013-10-15*', '2014-02-01*', '2014-05-01*', '2014-06-15*', '2014-09-01*', '2014-10-01*', '2015-03-01*', '2015-04-15*', '2015-10-01*', '2016-04-01*', '2016-09-15*', '2016-11-15']);
	__webpack_require__(193);
	Object.defineProperty(apiLoader.services['ec2'], '2016-11-15', {
	  get: function get() {
	    var model = __webpack_require__(194);
	    model.paginators = __webpack_require__(195).pagination;
	    model.waiters = __webpack_require__(196).waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.EC2;


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(4);

	AWS.util.update(AWS.EC2.prototype, {
	  /**
	   * @api private
	   */
	  setupRequestListeners: function setupRequestListeners(request) {
	    request.removeListener('extractError', AWS.EventListeners.Query.EXTRACT_ERROR);
	    request.addListener('extractError', this.extractError);

	    if (request.operation === 'copySnapshot') {
	      request.onAsync('validate', this.buildCopySnapshotPresignedUrl);
	    }
	  },

	  /**
	   * @api private
	   */
	  buildCopySnapshotPresignedUrl: function buildCopySnapshotPresignedUrl(req, done) {
	    if (req.params.PresignedUrl || req._subRequest) {
	      return done();
	    }

	    req.params = AWS.util.copy(req.params);
	    req.params.DestinationRegion = req.service.config.region;

	    var config = AWS.util.copy(req.service.config);
	    delete config.endpoint;
	    config.region = req.params.SourceRegion;
	    var svc = new req.service.constructor(config);
	    var newReq = svc[req.operation](req.params);
	    newReq._subRequest = true;
	    newReq.presign(function(err, url) {
	      if (err) done(err);
	      else {
	        req.params.PresignedUrl = url;
	        done();
	      }
	    });
	  },

	  /**
	   * @api private
	   */
	  extractError: function extractError(resp) {
	    // EC2 nests the error code and message deeper than other AWS Query services.
	    var httpResponse = resp.httpResponse;
	    var data = new AWS.XML.Parser().parse(httpResponse.body.toString() || '');
	    if (data.Errors) {
	      resp.error = AWS.util.error(new Error(), {
	        code: data.Errors.Error.Code,
	        message: data.Errors.Error.Message
	      });
	    } else {
	      resp.error = AWS.util.error(new Error(), {
	        code: httpResponse.statusCode,
	        message: null
	      });
	    }
	    resp.error.requestId = data.RequestID || null;
	  }
	});


/***/ }),
/* 194 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-11-15","endpointPrefix":"ec2","protocol":"ec2","serviceAbbreviation":"Amazon EC2","serviceFullName":"Amazon Elastic Compute Cloud","serviceId":"EC2","signatureVersion":"v4","uid":"ec2-2016-11-15","xmlNamespace":"http://ec2.amazonaws.com/doc/2016-11-15"},"operations":{"AcceptReservedInstancesExchangeQuote":{"input":{"type":"structure","required":["ReservedInstanceIds"],"members":{"DryRun":{"type":"boolean"},"ReservedInstanceIds":{"shape":"S3","locationName":"ReservedInstanceId"},"TargetConfigurations":{"shape":"S5","locationName":"TargetConfiguration"}}},"output":{"type":"structure","members":{"ExchangeId":{"locationName":"exchangeId"}}}},"AcceptTransitGatewayMulticastDomainAssociations":{"input":{"type":"structure","members":{"TransitGatewayMulticastDomainId":{},"TransitGatewayAttachmentId":{},"SubnetIds":{"shape":"Se"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Associations":{"shape":"Sg","locationName":"associations"}}}},"AcceptTransitGatewayPeeringAttachment":{"input":{"type":"structure","required":["TransitGatewayAttachmentId"],"members":{"TransitGatewayAttachmentId":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TransitGatewayPeeringAttachment":{"shape":"Sn","locationName":"transitGatewayPeeringAttachment"}}}},"AcceptTransitGatewayVpcAttachment":{"input":{"type":"structure","required":["TransitGatewayAttachmentId"],"members":{"TransitGatewayAttachmentId":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TransitGatewayVpcAttachment":{"shape":"Sw","locationName":"transitGatewayVpcAttachment"}}}},"AcceptVpcEndpointConnections":{"input":{"type":"structure","required":["ServiceId","VpcEndpointIds"],"members":{"DryRun":{"type":"boolean"},"ServiceId":{},"VpcEndpointIds":{"shape":"S13","locationName":"VpcEndpointId"}}},"output":{"type":"structure","members":{"Unsuccessful":{"shape":"S16","locationName":"unsuccessful"}}}},"AcceptVpcPeeringConnection":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VpcPeeringConnectionId":{"locationName":"vpcPeeringConnectionId"}}},"output":{"type":"structure","members":{"VpcPeeringConnection":{"shape":"S1c","locationName":"vpcPeeringConnection"}}}},"AdvertiseByoipCidr":{"input":{"type":"structure","required":["Cidr"],"members":{"Cidr":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"ByoipCidr":{"shape":"S1n","locationName":"byoipCidr"}}}},"AllocateAddress":{"input":{"type":"structure","members":{"Domain":{},"Address":{},"PublicIpv4Pool":{},"NetworkBorderGroup":{},"CustomerOwnedIpv4Pool":{},"DryRun":{"locationName":"dryRun","type":"boolean"},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"}}},"output":{"type":"structure","members":{"PublicIp":{"locationName":"publicIp"},"AllocationId":{"locationName":"allocationId"},"PublicIpv4Pool":{"locationName":"publicIpv4Pool"},"NetworkBorderGroup":{"locationName":"networkBorderGroup"},"Domain":{"locationName":"domain"},"CustomerOwnedIp":{"locationName":"customerOwnedIp"},"CustomerOwnedIpv4Pool":{"locationName":"customerOwnedIpv4Pool"},"CarrierIp":{"locationName":"carrierIp"}}}},"AllocateHosts":{"input":{"type":"structure","required":["AvailabilityZone","Quantity"],"members":{"AutoPlacement":{"locationName":"autoPlacement"},"AvailabilityZone":{"locationName":"availabilityZone"},"ClientToken":{"locationName":"clientToken"},"InstanceType":{"locationName":"instanceType"},"InstanceFamily":{},"Quantity":{"locationName":"quantity","type":"integer"},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"},"HostRecovery":{}}},"output":{"type":"structure","members":{"HostIds":{"shape":"S21","locationName":"hostIdSet"}}}},"ApplySecurityGroupsToClientVpnTargetNetwork":{"input":{"type":"structure","required":["ClientVpnEndpointId","VpcId","SecurityGroupIds"],"members":{"ClientVpnEndpointId":{},"VpcId":{},"SecurityGroupIds":{"shape":"S25","locationName":"SecurityGroupId"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"SecurityGroupIds":{"shape":"S25","locationName":"securityGroupIds"}}}},"AssignIpv6Addresses":{"input":{"type":"structure","required":["NetworkInterfaceId"],"members":{"Ipv6AddressCount":{"locationName":"ipv6AddressCount","type":"integer"},"Ipv6Addresses":{"shape":"S29","locationName":"ipv6Addresses"},"Ipv6PrefixCount":{"type":"integer"},"Ipv6Prefixes":{"shape":"S2a","locationName":"Ipv6Prefix"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"}}},"output":{"type":"structure","members":{"AssignedIpv6Addresses":{"shape":"S29","locationName":"assignedIpv6Addresses"},"AssignedIpv6Prefixes":{"shape":"S2a","locationName":"assignedIpv6PrefixSet"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"}}}},"AssignPrivateIpAddresses":{"input":{"type":"structure","required":["NetworkInterfaceId"],"members":{"AllowReassignment":{"locationName":"allowReassignment","type":"boolean"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"PrivateIpAddresses":{"shape":"S2e","locationName":"privateIpAddress"},"SecondaryPrivateIpAddressCount":{"locationName":"secondaryPrivateIpAddressCount","type":"integer"},"Ipv4Prefixes":{"shape":"S2a","locationName":"Ipv4Prefix"},"Ipv4PrefixCount":{"type":"integer"}}},"output":{"type":"structure","members":{"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"AssignedPrivateIpAddresses":{"locationName":"assignedPrivateIpAddressesSet","type":"list","member":{"locationName":"item","type":"structure","members":{"PrivateIpAddress":{"locationName":"privateIpAddress"}}}},"AssignedIpv4Prefixes":{"shape":"S2i","locationName":"assignedIpv4PrefixSet"}}}},"AssociateAddress":{"input":{"type":"structure","members":{"AllocationId":{},"InstanceId":{},"PublicIp":{},"AllowReassociation":{"locationName":"allowReassociation","type":"boolean"},"DryRun":{"locationName":"dryRun","type":"boolean"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"PrivateIpAddress":{"locationName":"privateIpAddress"}}},"output":{"type":"structure","members":{"AssociationId":{"locationName":"associationId"}}}},"AssociateClientVpnTargetNetwork":{"input":{"type":"structure","required":["ClientVpnEndpointId","SubnetId"],"members":{"ClientVpnEndpointId":{},"SubnetId":{},"ClientToken":{"idempotencyToken":true},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"AssociationId":{"locationName":"associationId"},"Status":{"shape":"S2r","locationName":"status"}}}},"AssociateDhcpOptions":{"input":{"type":"structure","required":["DhcpOptionsId","VpcId"],"members":{"DhcpOptionsId":{},"VpcId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"AssociateEnclaveCertificateIamRole":{"input":{"type":"structure","members":{"CertificateArn":{},"RoleArn":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"CertificateS3BucketName":{"locationName":"certificateS3BucketName"},"CertificateS3ObjectKey":{"locationName":"certificateS3ObjectKey"},"EncryptionKmsKeyId":{"locationName":"encryptionKmsKeyId"}}}},"AssociateIamInstanceProfile":{"input":{"type":"structure","required":["IamInstanceProfile","InstanceId"],"members":{"IamInstanceProfile":{"shape":"S2z"},"InstanceId":{}}},"output":{"type":"structure","members":{"IamInstanceProfileAssociation":{"shape":"S31","locationName":"iamInstanceProfileAssociation"}}}},"AssociateInstanceEventWindow":{"input":{"type":"structure","required":["InstanceEventWindowId","AssociationTarget"],"members":{"DryRun":{"type":"boolean"},"InstanceEventWindowId":{},"AssociationTarget":{"type":"structure","members":{"InstanceIds":{"shape":"S37","locationName":"InstanceId"},"InstanceTags":{"shape":"Ss","locationName":"InstanceTag"},"DedicatedHostIds":{"shape":"S38","locationName":"DedicatedHostId"}}}}},"output":{"type":"structure","members":{"InstanceEventWindow":{"shape":"S3b","locationName":"instanceEventWindow"}}}},"AssociateRouteTable":{"input":{"type":"structure","required":["RouteTableId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"RouteTableId":{"locationName":"routeTableId"},"SubnetId":{"locationName":"subnetId"},"GatewayId":{}}},"output":{"type":"structure","members":{"AssociationId":{"locationName":"associationId"},"AssociationState":{"shape":"S3n","locationName":"associationState"}}}},"AssociateSubnetCidrBlock":{"input":{"type":"structure","required":["Ipv6CidrBlock","SubnetId"],"members":{"Ipv6CidrBlock":{"locationName":"ipv6CidrBlock"},"SubnetId":{"locationName":"subnetId"}}},"output":{"type":"structure","members":{"Ipv6CidrBlockAssociation":{"shape":"S3r","locationName":"ipv6CidrBlockAssociation"},"SubnetId":{"locationName":"subnetId"}}}},"AssociateTransitGatewayMulticastDomain":{"input":{"type":"structure","members":{"TransitGatewayMulticastDomainId":{},"TransitGatewayAttachmentId":{},"SubnetIds":{"shape":"S3w"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Associations":{"shape":"Sg","locationName":"associations"}}}},"AssociateTransitGatewayRouteTable":{"input":{"type":"structure","required":["TransitGatewayRouteTableId","TransitGatewayAttachmentId"],"members":{"TransitGatewayRouteTableId":{},"TransitGatewayAttachmentId":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Association":{"shape":"S41","locationName":"association"}}}},"AssociateTrunkInterface":{"input":{"type":"structure","required":["BranchInterfaceId","TrunkInterfaceId"],"members":{"BranchInterfaceId":{},"TrunkInterfaceId":{},"VlanId":{"type":"integer"},"GreKey":{"type":"integer"},"ClientToken":{"idempotencyToken":true},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"InterfaceAssociation":{"shape":"S45","locationName":"interfaceAssociation"},"ClientToken":{"locationName":"clientToken"}}}},"AssociateVpcCidrBlock":{"input":{"type":"structure","required":["VpcId"],"members":{"AmazonProvidedIpv6CidrBlock":{"locationName":"amazonProvidedIpv6CidrBlock","type":"boolean"},"CidrBlock":{},"VpcId":{"locationName":"vpcId"},"Ipv6CidrBlockNetworkBorderGroup":{},"Ipv6Pool":{},"Ipv6CidrBlock":{}}},"output":{"type":"structure","members":{"Ipv6CidrBlockAssociation":{"shape":"S4b","locationName":"ipv6CidrBlockAssociation"},"CidrBlockAssociation":{"shape":"S4e","locationName":"cidrBlockAssociation"},"VpcId":{"locationName":"vpcId"}}}},"AttachClassicLinkVpc":{"input":{"type":"structure","required":["Groups","InstanceId","VpcId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"Groups":{"shape":"S4g","locationName":"SecurityGroupId"},"InstanceId":{"locationName":"instanceId"},"VpcId":{"locationName":"vpcId"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"AttachInternetGateway":{"input":{"type":"structure","required":["InternetGatewayId","VpcId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"InternetGatewayId":{"locationName":"internetGatewayId"},"VpcId":{"locationName":"vpcId"}}}},"AttachNetworkInterface":{"input":{"type":"structure","required":["DeviceIndex","InstanceId","NetworkInterfaceId"],"members":{"DeviceIndex":{"locationName":"deviceIndex","type":"integer"},"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceId":{"locationName":"instanceId"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"NetworkCardIndex":{"type":"integer"}}},"output":{"type":"structure","members":{"AttachmentId":{"locationName":"attachmentId"},"NetworkCardIndex":{"locationName":"networkCardIndex","type":"integer"}}}},"AttachVolume":{"input":{"type":"structure","required":["Device","InstanceId","VolumeId"],"members":{"Device":{},"InstanceId":{},"VolumeId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"shape":"S4o"}},"AttachVpnGateway":{"input":{"type":"structure","required":["VpcId","VpnGatewayId"],"members":{"VpcId":{},"VpnGatewayId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"VpcAttachment":{"shape":"S4t","locationName":"attachment"}}}},"AuthorizeClientVpnIngress":{"input":{"type":"structure","required":["ClientVpnEndpointId","TargetNetworkCidr"],"members":{"ClientVpnEndpointId":{},"TargetNetworkCidr":{},"AccessGroupId":{},"AuthorizeAllGroups":{"type":"boolean"},"Description":{},"ClientToken":{"idempotencyToken":true},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Status":{"shape":"S4x","locationName":"status"}}}},"AuthorizeSecurityGroupEgress":{"input":{"type":"structure","required":["GroupId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"GroupId":{"locationName":"groupId"},"IpPermissions":{"shape":"S50","locationName":"ipPermissions"},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"},"CidrIp":{"locationName":"cidrIp"},"FromPort":{"locationName":"fromPort","type":"integer"},"IpProtocol":{"locationName":"ipProtocol"},"ToPort":{"locationName":"toPort","type":"integer"},"SourceSecurityGroupName":{"locationName":"sourceSecurityGroupName"},"SourceSecurityGroupOwnerId":{"locationName":"sourceSecurityGroupOwnerId"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"},"SecurityGroupRules":{"shape":"S5b","locationName":"securityGroupRuleSet"}}}},"AuthorizeSecurityGroupIngress":{"input":{"type":"structure","members":{"CidrIp":{},"FromPort":{"type":"integer"},"GroupId":{},"GroupName":{},"IpPermissions":{"shape":"S50"},"IpProtocol":{},"SourceSecurityGroupName":{},"SourceSecurityGroupOwnerId":{},"ToPort":{"type":"integer"},"DryRun":{"locationName":"dryRun","type":"boolean"},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"},"SecurityGroupRules":{"shape":"S5b","locationName":"securityGroupRuleSet"}}}},"BundleInstance":{"input":{"type":"structure","required":["InstanceId","Storage"],"members":{"InstanceId":{},"Storage":{"shape":"S5k"},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"BundleTask":{"shape":"S5o","locationName":"bundleInstanceTask"}}}},"CancelBundleTask":{"input":{"type":"structure","required":["BundleId"],"members":{"BundleId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"BundleTask":{"shape":"S5o","locationName":"bundleInstanceTask"}}}},"CancelCapacityReservation":{"input":{"type":"structure","required":["CapacityReservationId"],"members":{"CapacityReservationId":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"CancelConversionTask":{"input":{"type":"structure","required":["ConversionTaskId"],"members":{"ConversionTaskId":{"locationName":"conversionTaskId"},"DryRun":{"locationName":"dryRun","type":"boolean"},"ReasonMessage":{"locationName":"reasonMessage"}}}},"CancelExportTask":{"input":{"type":"structure","required":["ExportTaskId"],"members":{"ExportTaskId":{"locationName":"exportTaskId"}}}},"CancelImportTask":{"input":{"type":"structure","members":{"CancelReason":{},"DryRun":{"type":"boolean"},"ImportTaskId":{}}},"output":{"type":"structure","members":{"ImportTaskId":{"locationName":"importTaskId"},"PreviousState":{"locationName":"previousState"},"State":{"locationName":"state"}}}},"CancelReservedInstancesListing":{"input":{"type":"structure","required":["ReservedInstancesListingId"],"members":{"ReservedInstancesListingId":{"locationName":"reservedInstancesListingId"}}},"output":{"type":"structure","members":{"ReservedInstancesListings":{"shape":"S67","locationName":"reservedInstancesListingsSet"}}}},"CancelSpotFleetRequests":{"input":{"type":"structure","required":["SpotFleetRequestIds","TerminateInstances"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"SpotFleetRequestIds":{"shape":"S6j","locationName":"spotFleetRequestId"},"TerminateInstances":{"locationName":"terminateInstances","type":"boolean"}}},"output":{"type":"structure","members":{"SuccessfulFleetRequests":{"locationName":"successfulFleetRequestSet","type":"list","member":{"locationName":"item","type":"structure","members":{"CurrentSpotFleetRequestState":{"locationName":"currentSpotFleetRequestState"},"PreviousSpotFleetRequestState":{"locationName":"previousSpotFleetRequestState"},"SpotFleetRequestId":{"locationName":"spotFleetRequestId"}}}},"UnsuccessfulFleetRequests":{"locationName":"unsuccessfulFleetRequestSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Error":{"locationName":"error","type":"structure","members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"}}},"SpotFleetRequestId":{"locationName":"spotFleetRequestId"}}}}}}},"CancelSpotInstanceRequests":{"input":{"type":"structure","required":["SpotInstanceRequestIds"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"SpotInstanceRequestIds":{"shape":"S6u","locationName":"SpotInstanceRequestId"}}},"output":{"type":"structure","members":{"CancelledSpotInstanceRequests":{"locationName":"spotInstanceRequestSet","type":"list","member":{"locationName":"item","type":"structure","members":{"SpotInstanceRequestId":{"locationName":"spotInstanceRequestId"},"State":{"locationName":"state"}}}}}}},"ConfirmProductInstance":{"input":{"type":"structure","required":["InstanceId","ProductCode"],"members":{"InstanceId":{},"ProductCode":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"OwnerId":{"locationName":"ownerId"},"Return":{"locationName":"return","type":"boolean"}}}},"CopyFpgaImage":{"input":{"type":"structure","required":["SourceFpgaImageId","SourceRegion"],"members":{"DryRun":{"type":"boolean"},"SourceFpgaImageId":{},"Description":{},"Name":{},"SourceRegion":{},"ClientToken":{}}},"output":{"type":"structure","members":{"FpgaImageId":{"locationName":"fpgaImageId"}}}},"CopyImage":{"input":{"type":"structure","required":["Name","SourceImageId","SourceRegion"],"members":{"ClientToken":{},"Description":{},"Encrypted":{"locationName":"encrypted","type":"boolean"},"KmsKeyId":{"locationName":"kmsKeyId"},"Name":{},"SourceImageId":{},"SourceRegion":{},"DestinationOutpostArn":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"ImageId":{"locationName":"imageId"}}}},"CopySnapshot":{"input":{"type":"structure","required":["SourceRegion","SourceSnapshotId"],"members":{"Description":{},"DestinationOutpostArn":{},"DestinationRegion":{"locationName":"destinationRegion"},"Encrypted":{"locationName":"encrypted","type":"boolean"},"KmsKeyId":{"locationName":"kmsKeyId"},"PresignedUrl":{"locationName":"presignedUrl"},"SourceRegion":{},"SourceSnapshotId":{},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"SnapshotId":{"locationName":"snapshotId"},"Tags":{"shape":"Ss","locationName":"tagSet"}}}},"CreateCapacityReservation":{"input":{"type":"structure","required":["InstanceType","InstancePlatform","InstanceCount"],"members":{"ClientToken":{},"InstanceType":{},"InstancePlatform":{},"AvailabilityZone":{},"AvailabilityZoneId":{},"Tenancy":{},"InstanceCount":{"type":"integer"},"EbsOptimized":{"type":"boolean"},"EphemeralStorage":{"type":"boolean"},"EndDate":{"type":"timestamp"},"EndDateType":{},"InstanceMatchCriteria":{},"TagSpecifications":{"shape":"S1t"},"DryRun":{"type":"boolean"},"OutpostArn":{}}},"output":{"type":"structure","members":{"CapacityReservation":{"shape":"S7g","locationName":"capacityReservation"}}}},"CreateCarrierGateway":{"input":{"type":"structure","required":["VpcId"],"members":{"VpcId":{},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"},"DryRun":{"type":"boolean"},"ClientToken":{"idempotencyToken":true}}},"output":{"type":"structure","members":{"CarrierGateway":{"shape":"S7l","locationName":"carrierGateway"}}}},"CreateClientVpnEndpoint":{"input":{"type":"structure","required":["ClientCidrBlock","ServerCertificateArn","AuthenticationOptions","ConnectionLogOptions"],"members":{"ClientCidrBlock":{},"ServerCertificateArn":{},"AuthenticationOptions":{"locationName":"Authentication","type":"list","member":{"type":"structure","members":{"Type":{},"ActiveDirectory":{"type":"structure","members":{"DirectoryId":{}}},"MutualAuthentication":{"type":"structure","members":{"ClientRootCertificateChainArn":{}}},"FederatedAuthentication":{"type":"structure","members":{"SAMLProviderArn":{},"SelfServiceSAMLProviderArn":{}}}}}},"ConnectionLogOptions":{"shape":"S7v"},"DnsServers":{"shape":"Se"},"TransportProtocol":{},"VpnPort":{"type":"integer"},"Description":{},"SplitTunnel":{"type":"boolean"},"DryRun":{"type":"boolean"},"ClientToken":{"idempotencyToken":true},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"},"SecurityGroupIds":{"shape":"S25","locationName":"SecurityGroupId"},"VpcId":{},"SelfServicePortal":{},"ClientConnectOptions":{"shape":"S7y"}}},"output":{"type":"structure","members":{"ClientVpnEndpointId":{"locationName":"clientVpnEndpointId"},"Status":{"shape":"S80","locationName":"status"},"DnsName":{"locationName":"dnsName"}}}},"CreateClientVpnRoute":{"input":{"type":"structure","required":["ClientVpnEndpointId","DestinationCidrBlock","TargetVpcSubnetId"],"members":{"ClientVpnEndpointId":{},"DestinationCidrBlock":{},"TargetVpcSubnetId":{},"Description":{},"ClientToken":{"idempotencyToken":true},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Status":{"shape":"S84","locationName":"status"}}}},"CreateCustomerGateway":{"input":{"type":"structure","required":["BgpAsn","Type"],"members":{"BgpAsn":{"type":"integer"},"PublicIp":{"locationName":"IpAddress"},"CertificateArn":{},"Type":{},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"},"DeviceName":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"CustomerGateway":{"shape":"S89","locationName":"customerGateway"}}}},"CreateDefaultSubnet":{"input":{"type":"structure","required":["AvailabilityZone"],"members":{"AvailabilityZone":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Subnet":{"shape":"S8c","locationName":"subnet"}}}},"CreateDefaultVpc":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Vpc":{"shape":"S8i","locationName":"vpc"}}}},"CreateDhcpOptions":{"input":{"type":"structure","required":["DhcpConfigurations"],"members":{"DhcpConfigurations":{"locationName":"dhcpConfiguration","type":"list","member":{"locationName":"item","type":"structure","members":{"Key":{"locationName":"key"},"Values":{"shape":"Se","locationName":"Value"}}}},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"DhcpOptions":{"shape":"S8r","locationName":"dhcpOptions"}}}},"CreateEgressOnlyInternetGateway":{"input":{"type":"structure","required":["VpcId"],"members":{"ClientToken":{},"DryRun":{"type":"boolean"},"VpcId":{},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"}}},"output":{"type":"structure","members":{"ClientToken":{"locationName":"clientToken"},"EgressOnlyInternetGateway":{"shape":"S8y","locationName":"egressOnlyInternetGateway"}}}},"CreateFleet":{"input":{"type":"structure","required":["LaunchTemplateConfigs","TargetCapacitySpecification"],"members":{"DryRun":{"type":"boolean"},"ClientToken":{},"SpotOptions":{"type":"structure","members":{"AllocationStrategy":{},"MaintenanceStrategies":{"type":"structure","members":{"CapacityRebalance":{"type":"structure","members":{"ReplacementStrategy":{}}}}},"InstanceInterruptionBehavior":{},"InstancePoolsToUseCount":{"type":"integer"},"SingleInstanceType":{"type":"boolean"},"SingleAvailabilityZone":{"type":"boolean"},"MinTargetCapacity":{"type":"integer"},"MaxTotalPrice":{}}},"OnDemandOptions":{"type":"structure","members":{"AllocationStrategy":{},"CapacityReservationOptions":{"type":"structure","members":{"UsageStrategy":{}}},"SingleInstanceType":{"type":"boolean"},"SingleAvailabilityZone":{"type":"boolean"},"MinTargetCapacity":{"type":"integer"},"MaxTotalPrice":{}}},"ExcessCapacityTerminationPolicy":{},"LaunchTemplateConfigs":{"shape":"S9e"},"TargetCapacitySpecification":{"shape":"S9n"},"TerminateInstancesWithExpiration":{"type":"boolean"},"Type":{},"ValidFrom":{"type":"timestamp"},"ValidUntil":{"type":"timestamp"},"ReplaceUnhealthyInstances":{"type":"boolean"},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"},"Context":{}}},"output":{"type":"structure","members":{"FleetId":{"locationName":"fleetId"},"Errors":{"locationName":"errorSet","type":"list","member":{"locationName":"item","type":"structure","members":{"LaunchTemplateAndOverrides":{"shape":"S9u","locationName":"launchTemplateAndOverrides"},"Lifecycle":{"locationName":"lifecycle"},"ErrorCode":{"locationName":"errorCode"},"ErrorMessage":{"locationName":"errorMessage"}}}},"Instances":{"locationName":"fleetInstanceSet","type":"list","member":{"locationName":"item","type":"structure","members":{"LaunchTemplateAndOverrides":{"shape":"S9u","locationName":"launchTemplateAndOverrides"},"Lifecycle":{"locationName":"lifecycle"},"InstanceIds":{"shape":"Sa1","locationName":"instanceIds"},"InstanceType":{"locationName":"instanceType"},"Platform":{"locationName":"platform"}}}}}}},"CreateFlowLogs":{"input":{"type":"structure","required":["ResourceIds","ResourceType","TrafficType"],"members":{"DryRun":{"type":"boolean"},"ClientToken":{},"DeliverLogsPermissionArn":{},"LogGroupName":{},"ResourceIds":{"locationName":"ResourceId","type":"list","member":{"locationName":"item"}},"ResourceType":{},"TrafficType":{},"LogDestinationType":{},"LogDestination":{},"LogFormat":{},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"},"MaxAggregationInterval":{"type":"integer"}}},"output":{"type":"structure","members":{"ClientToken":{"locationName":"clientToken"},"FlowLogIds":{"shape":"Se","locationName":"flowLogIdSet"},"Unsuccessful":{"shape":"S16","locationName":"unsuccessful"}}}},"CreateFpgaImage":{"input":{"type":"structure","required":["InputStorageLocation"],"members":{"DryRun":{"type":"boolean"},"InputStorageLocation":{"shape":"Sab"},"LogsStorageLocation":{"shape":"Sab"},"Description":{},"Name":{},"ClientToken":{},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"}}},"output":{"type":"structure","members":{"FpgaImageId":{"locationName":"fpgaImageId"},"FpgaImageGlobalId":{"locationName":"fpgaImageGlobalId"}}}},"CreateImage":{"input":{"type":"structure","required":["InstanceId","Name"],"members":{"BlockDeviceMappings":{"shape":"Sae","locationName":"blockDeviceMapping"},"Description":{"locationName":"description"},"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceId":{"locationName":"instanceId"},"Name":{"locationName":"name"},"NoReboot":{"locationName":"noReboot","type":"boolean"},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"}}},"output":{"type":"structure","members":{"ImageId":{"locationName":"imageId"}}}},"CreateInstanceEventWindow":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"Name":{},"TimeRanges":{"shape":"Sak","locationName":"TimeRange"},"CronExpression":{},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"}}},"output":{"type":"structure","members":{"InstanceEventWindow":{"shape":"S3b","locationName":"instanceEventWindow"}}}},"CreateInstanceExportTask":{"input":{"type":"structure","required":["ExportToS3Task","InstanceId","TargetEnvironment"],"members":{"Description":{"locationName":"description"},"ExportToS3Task":{"locationName":"exportToS3","type":"structure","members":{"ContainerFormat":{"locationName":"containerFormat"},"DiskImageFormat":{"locationName":"diskImageFormat"},"S3Bucket":{"locationName":"s3Bucket"},"S3Prefix":{"locationName":"s3Prefix"}}},"InstanceId":{"locationName":"instanceId"},"TargetEnvironment":{"locationName":"targetEnvironment"},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"}}},"output":{"type":"structure","members":{"ExportTask":{"shape":"Sat","locationName":"exportTask"}}}},"CreateInternetGateway":{"input":{"type":"structure","members":{"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"InternetGateway":{"shape":"Saz","locationName":"internetGateway"}}}},"CreateKeyPair":{"input":{"type":"structure","required":["KeyName"],"members":{"KeyName":{},"DryRun":{"locationName":"dryRun","type":"boolean"},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"}}},"output":{"type":"structure","members":{"KeyFingerprint":{"locationName":"keyFingerprint"},"KeyMaterial":{"locationName":"keyMaterial","type":"string","sensitive":true},"KeyName":{"locationName":"keyName"},"KeyPairId":{"locationName":"keyPairId"},"Tags":{"shape":"Ss","locationName":"tagSet"}}}},"CreateLaunchTemplate":{"input":{"type":"structure","required":["LaunchTemplateName","LaunchTemplateData"],"members":{"DryRun":{"type":"boolean"},"ClientToken":{},"LaunchTemplateName":{},"VersionDescription":{},"LaunchTemplateData":{"shape":"Sb5"},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"}}},"output":{"type":"structure","members":{"LaunchTemplate":{"shape":"Sck","locationName":"launchTemplate"},"Warning":{"shape":"Scl","locationName":"warning"}}}},"CreateLaunchTemplateVersion":{"input":{"type":"structure","required":["LaunchTemplateData"],"members":{"DryRun":{"type":"boolean"},"ClientToken":{},"LaunchTemplateId":{},"LaunchTemplateName":{},"SourceVersion":{},"VersionDescription":{},"LaunchTemplateData":{"shape":"Sb5"}}},"output":{"type":"structure","members":{"LaunchTemplateVersion":{"shape":"Scq","locationName":"launchTemplateVersion"},"Warning":{"shape":"Scl","locationName":"warning"}}}},"CreateLocalGatewayRoute":{"input":{"type":"structure","required":["DestinationCidrBlock","LocalGatewayRouteTableId","LocalGatewayVirtualInterfaceGroupId"],"members":{"DestinationCidrBlock":{},"LocalGatewayRouteTableId":{},"DryRun":{"type":"boolean"},"LocalGatewayVirtualInterfaceGroupId":{}}},"output":{"type":"structure","members":{"Route":{"shape":"Sds","locationName":"route"}}}},"CreateLocalGatewayRouteTableVpcAssociation":{"input":{"type":"structure","required":["LocalGatewayRouteTableId","VpcId"],"members":{"LocalGatewayRouteTableId":{},"VpcId":{},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"LocalGatewayRouteTableVpcAssociation":{"shape":"Sdx","locationName":"localGatewayRouteTableVpcAssociation"}}}},"CreateManagedPrefixList":{"input":{"type":"structure","required":["PrefixListName","MaxEntries","AddressFamily"],"members":{"DryRun":{"type":"boolean"},"PrefixListName":{},"Entries":{"shape":"Se0","locationName":"Entry"},"MaxEntries":{"type":"integer"},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"},"AddressFamily":{},"ClientToken":{"idempotencyToken":true}}},"output":{"type":"structure","members":{"PrefixList":{"shape":"Se3","locationName":"prefixList"}}}},"CreateNatGateway":{"input":{"type":"structure","required":["SubnetId"],"members":{"AllocationId":{},"ClientToken":{"idempotencyToken":true},"DryRun":{"type":"boolean"},"SubnetId":{},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"},"ConnectivityType":{}}},"output":{"type":"structure","members":{"ClientToken":{"locationName":"clientToken"},"NatGateway":{"shape":"Se8","locationName":"natGateway"}}}},"CreateNetworkAcl":{"input":{"type":"structure","required":["VpcId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VpcId":{"locationName":"vpcId"},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"}}},"output":{"type":"structure","members":{"NetworkAcl":{"shape":"Sef","locationName":"networkAcl"}}}},"CreateNetworkAclEntry":{"input":{"type":"structure","required":["Egress","NetworkAclId","Protocol","RuleAction","RuleNumber"],"members":{"CidrBlock":{"locationName":"cidrBlock"},"DryRun":{"locationName":"dryRun","type":"boolean"},"Egress":{"locationName":"egress","type":"boolean"},"IcmpTypeCode":{"shape":"Sek","locationName":"Icmp"},"Ipv6CidrBlock":{"locationName":"ipv6CidrBlock"},"NetworkAclId":{"locationName":"networkAclId"},"PortRange":{"shape":"Sel","locationName":"portRange"},"Protocol":{"locationName":"protocol"},"RuleAction":{"locationName":"ruleAction"},"RuleNumber":{"locationName":"ruleNumber","type":"integer"}}}},"CreateNetworkInsightsPath":{"input":{"type":"structure","required":["Source","Destination","Protocol","ClientToken"],"members":{"SourceIp":{},"DestinationIp":{},"Source":{},"Destination":{},"Protocol":{},"DestinationPort":{"type":"integer"},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"},"DryRun":{"type":"boolean"},"ClientToken":{"idempotencyToken":true}}},"output":{"type":"structure","members":{"NetworkInsightsPath":{"shape":"Seu","locationName":"networkInsightsPath"}}}},"CreateNetworkInterface":{"input":{"type":"structure","required":["SubnetId"],"members":{"Description":{"locationName":"description"},"DryRun":{"locationName":"dryRun","type":"boolean"},"Groups":{"shape":"Sbe","locationName":"SecurityGroupId"},"Ipv6AddressCount":{"locationName":"ipv6AddressCount","type":"integer"},"Ipv6Addresses":{"shape":"Scy","locationName":"ipv6Addresses"},"PrivateIpAddress":{"locationName":"privateIpAddress"},"PrivateIpAddresses":{"shape":"Sbh","locationName":"privateIpAddresses"},"SecondaryPrivateIpAddressCount":{"locationName":"secondaryPrivateIpAddressCount","type":"integer"},"Ipv4Prefixes":{"shape":"Sbj","locationName":"Ipv4Prefix"},"Ipv4PrefixCount":{"type":"integer"},"Ipv6Prefixes":{"shape":"Sbl","locationName":"Ipv6Prefix"},"Ipv6PrefixCount":{"type":"integer"},"InterfaceType":{},"SubnetId":{"locationName":"subnetId"},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"},"ClientToken":{"idempotencyToken":true}}},"output":{"type":"structure","members":{"NetworkInterface":{"shape":"Sez","locationName":"networkInterface"},"ClientToken":{"locationName":"clientToken"}}}},"CreateNetworkInterfacePermission":{"input":{"type":"structure","required":["NetworkInterfaceId","Permission"],"members":{"NetworkInterfaceId":{},"AwsAccountId":{},"AwsService":{},"Permission":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"InterfacePermission":{"shape":"Sff","locationName":"interfacePermission"}}}},"CreatePlacementGroup":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"GroupName":{"locationName":"groupName"},"Strategy":{"locationName":"strategy"},"PartitionCount":{"type":"integer"},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"}}},"output":{"type":"structure","members":{"PlacementGroup":{"shape":"Sfl","locationName":"placementGroup"}}}},"CreateReplaceRootVolumeTask":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{},"SnapshotId":{},"ClientToken":{"idempotencyToken":true},"DryRun":{"type":"boolean"},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"}}},"output":{"type":"structure","members":{"ReplaceRootVolumeTask":{"shape":"Sfp","locationName":"replaceRootVolumeTask"}}}},"CreateReservedInstancesListing":{"input":{"type":"structure","required":["ClientToken","InstanceCount","PriceSchedules","ReservedInstancesId"],"members":{"ClientToken":{"locationName":"clientToken"},"InstanceCount":{"locationName":"instanceCount","type":"integer"},"PriceSchedules":{"locationName":"priceSchedules","type":"list","member":{"locationName":"item","type":"structure","members":{"CurrencyCode":{"locationName":"currencyCode"},"Price":{"locationName":"price","type":"double"},"Term":{"locationName":"term","type":"long"}}}},"ReservedInstancesId":{"locationName":"reservedInstancesId"}}},"output":{"type":"structure","members":{"ReservedInstancesListings":{"shape":"S67","locationName":"reservedInstancesListingsSet"}}}},"CreateRestoreImageTask":{"input":{"type":"structure","required":["Bucket","ObjectKey"],"members":{"Bucket":{},"ObjectKey":{},"Name":{},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"ImageId":{"locationName":"imageId"}}}},"CreateRoute":{"input":{"type":"structure","required":["RouteTableId"],"members":{"DestinationCidrBlock":{"locationName":"destinationCidrBlock"},"DestinationIpv6CidrBlock":{"locationName":"destinationIpv6CidrBlock"},"DestinationPrefixListId":{},"DryRun":{"locationName":"dryRun","type":"boolean"},"VpcEndpointId":{},"EgressOnlyInternetGatewayId":{"locationName":"egressOnlyInternetGatewayId"},"GatewayId":{"locationName":"gatewayId"},"InstanceId":{"locationName":"instanceId"},"NatGatewayId":{"locationName":"natGatewayId"},"TransitGatewayId":{},"LocalGatewayId":{},"CarrierGatewayId":{},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"RouteTableId":{"locationName":"routeTableId"},"VpcPeeringConnectionId":{"locationName":"vpcPeeringConnectionId"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"CreateRouteTable":{"input":{"type":"structure","required":["VpcId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VpcId":{"locationName":"vpcId"},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"}}},"output":{"type":"structure","members":{"RouteTable":{"shape":"Sg5","locationName":"routeTable"}}}},"CreateSecurityGroup":{"input":{"type":"structure","required":["Description","GroupName"],"members":{"Description":{"locationName":"GroupDescription"},"GroupName":{},"VpcId":{},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"GroupId":{"locationName":"groupId"},"Tags":{"shape":"Ss","locationName":"tagSet"}}}},"CreateSnapshot":{"input":{"type":"structure","required":["VolumeId"],"members":{"Description":{},"OutpostArn":{},"VolumeId":{},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"shape":"Sgh"}},"CreateSnapshots":{"input":{"type":"structure","required":["InstanceSpecification"],"members":{"Description":{},"InstanceSpecification":{"type":"structure","members":{"InstanceId":{},"ExcludeBootVolume":{"type":"boolean"}}},"OutpostArn":{},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"},"DryRun":{"type":"boolean"},"CopyTagsFromSource":{}}},"output":{"type":"structure","members":{"Snapshots":{"locationName":"snapshotSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Description":{"locationName":"description"},"Tags":{"shape":"Ss","locationName":"tagSet"},"Encrypted":{"locationName":"encrypted","type":"boolean"},"VolumeId":{"locationName":"volumeId"},"State":{"locationName":"state"},"VolumeSize":{"locationName":"volumeSize","type":"integer"},"StartTime":{"locationName":"startTime","type":"timestamp"},"Progress":{"locationName":"progress"},"OwnerId":{"locationName":"ownerId"},"SnapshotId":{"locationName":"snapshotId"},"OutpostArn":{"locationName":"outpostArn"}}}}}}},"CreateSpotDatafeedSubscription":{"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"locationName":"bucket"},"DryRun":{"locationName":"dryRun","type":"boolean"},"Prefix":{"locationName":"prefix"}}},"output":{"type":"structure","members":{"SpotDatafeedSubscription":{"shape":"Sgr","locationName":"spotDatafeedSubscription"}}}},"CreateStoreImageTask":{"input":{"type":"structure","required":["ImageId","Bucket"],"members":{"ImageId":{},"Bucket":{},"S3ObjectTags":{"locationName":"S3ObjectTag","type":"list","member":{"locationName":"item","type":"structure","members":{"Key":{},"Value":{}}}},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"ObjectKey":{"locationName":"objectKey"}}}},"CreateSubnet":{"input":{"type":"structure","required":["VpcId","CidrBlock"],"members":{"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"},"AvailabilityZone":{},"AvailabilityZoneId":{},"Ipv6CidrBlock":{},"OutpostArn":{},"VpcId":{},"DryRun":{"locationName":"dryRun","type":"boolean"},"CidrBlock":{}}},"output":{"type":"structure","members":{"Subnet":{"shape":"S8c","locationName":"subnet"}}}},"CreateSubnetCidrReservation":{"input":{"type":"structure","required":["SubnetId","Cidr","ReservationType"],"members":{"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"},"SubnetId":{},"Cidr":{},"ReservationType":{},"Description":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"SubnetCidrReservation":{"shape":"Sh3","locationName":"subnetCidrReservation"}}}},"CreateTags":{"input":{"type":"structure","required":["Resources","Tags"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"Resources":{"shape":"Sh6","locationName":"ResourceId"},"Tags":{"shape":"Ss","locationName":"Tag"}}}},"CreateTrafficMirrorFilter":{"input":{"type":"structure","members":{"Description":{},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"},"DryRun":{"type":"boolean"},"ClientToken":{"idempotencyToken":true}}},"output":{"type":"structure","members":{"TrafficMirrorFilter":{"shape":"Sha","locationName":"trafficMirrorFilter"},"ClientToken":{"locationName":"clientToken"}}}},"CreateTrafficMirrorFilterRule":{"input":{"type":"structure","required":["TrafficMirrorFilterId","TrafficDirection","RuleNumber","RuleAction","DestinationCidrBlock","SourceCidrBlock"],"members":{"TrafficMirrorFilterId":{},"TrafficDirection":{},"RuleNumber":{"type":"integer"},"RuleAction":{},"DestinationPortRange":{"shape":"Shk"},"SourcePortRange":{"shape":"Shk"},"Protocol":{"type":"integer"},"DestinationCidrBlock":{},"SourceCidrBlock":{},"Description":{},"DryRun":{"type":"boolean"},"ClientToken":{"idempotencyToken":true}}},"output":{"type":"structure","members":{"TrafficMirrorFilterRule":{"shape":"Shc","locationName":"trafficMirrorFilterRule"},"ClientToken":{"locationName":"clientToken"}}}},"CreateTrafficMirrorSession":{"input":{"type":"structure","required":["NetworkInterfaceId","TrafficMirrorTargetId","TrafficMirrorFilterId","SessionNumber"],"members":{"NetworkInterfaceId":{},"TrafficMirrorTargetId":{},"TrafficMirrorFilterId":{},"PacketLength":{"type":"integer"},"SessionNumber":{"type":"integer"},"VirtualNetworkId":{"type":"integer"},"Description":{},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"},"DryRun":{"type":"boolean"},"ClientToken":{"idempotencyToken":true}}},"output":{"type":"structure","members":{"TrafficMirrorSession":{"shape":"Shp","locationName":"trafficMirrorSession"},"ClientToken":{"locationName":"clientToken"}}}},"CreateTrafficMirrorTarget":{"input":{"type":"structure","members":{"NetworkInterfaceId":{},"NetworkLoadBalancerArn":{},"Description":{},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"},"DryRun":{"type":"boolean"},"ClientToken":{"idempotencyToken":true}}},"output":{"type":"structure","members":{"TrafficMirrorTarget":{"shape":"Shs","locationName":"trafficMirrorTarget"},"ClientToken":{"locationName":"clientToken"}}}},"CreateTransitGateway":{"input":{"type":"structure","members":{"Description":{},"Options":{"type":"structure","members":{"AmazonSideAsn":{"type":"long"},"AutoAcceptSharedAttachments":{},"DefaultRouteTableAssociation":{},"DefaultRouteTablePropagation":{},"VpnEcmpSupport":{},"DnsSupport":{},"MulticastSupport":{},"TransitGatewayCidrBlocks":{"shape":"Si1"}}},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TransitGateway":{"shape":"Si3","locationName":"transitGateway"}}}},"CreateTransitGatewayConnect":{"input":{"type":"structure","required":["TransportTransitGatewayAttachmentId","Options"],"members":{"TransportTransitGatewayAttachmentId":{},"Options":{"type":"structure","required":["Protocol"],"members":{"Protocol":{}}},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TransitGatewayConnect":{"shape":"Sia","locationName":"transitGatewayConnect"}}}},"CreateTransitGatewayConnectPeer":{"input":{"type":"structure","required":["TransitGatewayAttachmentId","PeerAddress","InsideCidrBlocks"],"members":{"TransitGatewayAttachmentId":{},"TransitGatewayAddress":{},"PeerAddress":{},"BgpOptions":{"type":"structure","members":{"PeerAsn":{"type":"long"}}},"InsideCidrBlocks":{"shape":"Sie"},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TransitGatewayConnectPeer":{"shape":"Sig","locationName":"transitGatewayConnectPeer"}}}},"CreateTransitGatewayMulticastDomain":{"input":{"type":"structure","required":["TransitGatewayId"],"members":{"TransitGatewayId":{},"Options":{"type":"structure","members":{"Igmpv2Support":{},"StaticSourcesSupport":{},"AutoAcceptSharedAssociations":{}}},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TransitGatewayMulticastDomain":{"shape":"Sit","locationName":"transitGatewayMulticastDomain"}}}},"CreateTransitGatewayPeeringAttachment":{"input":{"type":"structure","required":["TransitGatewayId","PeerTransitGatewayId","PeerAccountId","PeerRegion"],"members":{"TransitGatewayId":{},"PeerTransitGatewayId":{},"PeerAccountId":{},"PeerRegion":{},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TransitGatewayPeeringAttachment":{"shape":"Sn","locationName":"transitGatewayPeeringAttachment"}}}},"CreateTransitGatewayPrefixListReference":{"input":{"type":"structure","required":["TransitGatewayRouteTableId","PrefixListId"],"members":{"TransitGatewayRouteTableId":{},"PrefixListId":{},"TransitGatewayAttachmentId":{},"Blackhole":{"type":"boolean"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TransitGatewayPrefixListReference":{"shape":"Sj1","locationName":"transitGatewayPrefixListReference"}}}},"CreateTransitGatewayRoute":{"input":{"type":"structure","required":["DestinationCidrBlock","TransitGatewayRouteTableId"],"members":{"DestinationCidrBlock":{},"TransitGatewayRouteTableId":{},"TransitGatewayAttachmentId":{},"Blackhole":{"type":"boolean"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Route":{"shape":"Sj6","locationName":"route"}}}},"CreateTransitGatewayRouteTable":{"input":{"type":"structure","required":["TransitGatewayId"],"members":{"TransitGatewayId":{},"TagSpecifications":{"shape":"S1t"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TransitGatewayRouteTable":{"shape":"Sjd","locationName":"transitGatewayRouteTable"}}}},"CreateTransitGatewayVpcAttachment":{"input":{"type":"structure","required":["TransitGatewayId","VpcId","SubnetIds"],"members":{"TransitGatewayId":{},"VpcId":{},"SubnetIds":{"shape":"S3w"},"Options":{"type":"structure","members":{"DnsSupport":{},"Ipv6Support":{},"ApplianceModeSupport":{}}},"TagSpecifications":{"shape":"S1t"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TransitGatewayVpcAttachment":{"shape":"Sw","locationName":"transitGatewayVpcAttachment"}}}},"CreateVolume":{"input":{"type":"structure","required":["AvailabilityZone"],"members":{"AvailabilityZone":{},"Encrypted":{"locationName":"encrypted","type":"boolean"},"Iops":{"type":"integer"},"KmsKeyId":{},"OutpostArn":{},"Size":{"type":"integer"},"SnapshotId":{},"VolumeType":{},"DryRun":{"locationName":"dryRun","type":"boolean"},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"},"MultiAttachEnabled":{"type":"boolean"},"Throughput":{"type":"integer"},"ClientToken":{"idempotencyToken":true}}},"output":{"shape":"Sjj"}},"CreateVpc":{"input":{"type":"structure","required":["CidrBlock"],"members":{"CidrBlock":{},"AmazonProvidedIpv6CidrBlock":{"locationName":"amazonProvidedIpv6CidrBlock","type":"boolean"},"Ipv6Pool":{},"Ipv6CidrBlock":{},"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceTenancy":{"locationName":"instanceTenancy"},"Ipv6CidrBlockNetworkBorderGroup":{},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"}}},"output":{"type":"structure","members":{"Vpc":{"shape":"S8i","locationName":"vpc"}}}},"CreateVpcEndpoint":{"input":{"type":"structure","required":["VpcId","ServiceName"],"members":{"DryRun":{"type":"boolean"},"VpcEndpointType":{},"VpcId":{},"ServiceName":{},"PolicyDocument":{},"RouteTableIds":{"shape":"Sjq","locationName":"RouteTableId"},"SubnetIds":{"shape":"Sjr","locationName":"SubnetId"},"SecurityGroupIds":{"shape":"Sjs","locationName":"SecurityGroupId"},"ClientToken":{},"PrivateDnsEnabled":{"type":"boolean"},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"}}},"output":{"type":"structure","members":{"VpcEndpoint":{"shape":"Sju","locationName":"vpcEndpoint"},"ClientToken":{"locationName":"clientToken"}}}},"CreateVpcEndpointConnectionNotification":{"input":{"type":"structure","required":["ConnectionNotificationArn","ConnectionEvents"],"members":{"DryRun":{"type":"boolean"},"ServiceId":{},"VpcEndpointId":{},"ConnectionNotificationArn":{},"ConnectionEvents":{"shape":"Se"},"ClientToken":{}}},"output":{"type":"structure","members":{"ConnectionNotification":{"shape":"Sk3","locationName":"connectionNotification"},"ClientToken":{"locationName":"clientToken"}}}},"CreateVpcEndpointServiceConfiguration":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"AcceptanceRequired":{"type":"boolean"},"PrivateDnsName":{},"NetworkLoadBalancerArns":{"shape":"Se","locationName":"NetworkLoadBalancerArn"},"GatewayLoadBalancerArns":{"shape":"Se","locationName":"GatewayLoadBalancerArn"},"ClientToken":{},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"}}},"output":{"type":"structure","members":{"ServiceConfiguration":{"shape":"Sk8","locationName":"serviceConfiguration"},"ClientToken":{"locationName":"clientToken"}}}},"CreateVpcPeeringConnection":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"PeerOwnerId":{"locationName":"peerOwnerId"},"PeerVpcId":{"locationName":"peerVpcId"},"VpcId":{"locationName":"vpcId"},"PeerRegion":{},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"}}},"output":{"type":"structure","members":{"VpcPeeringConnection":{"shape":"S1c","locationName":"vpcPeeringConnection"}}}},"CreateVpnConnection":{"input":{"type":"structure","required":["CustomerGatewayId","Type"],"members":{"CustomerGatewayId":{},"Type":{},"VpnGatewayId":{},"TransitGatewayId":{},"DryRun":{"locationName":"dryRun","type":"boolean"},"Options":{"locationName":"options","type":"structure","members":{"EnableAcceleration":{"type":"boolean"},"StaticRoutesOnly":{"locationName":"staticRoutesOnly","type":"boolean"},"TunnelInsideIpVersion":{},"TunnelOptions":{"type":"list","member":{"type":"structure","members":{"TunnelInsideCidr":{},"TunnelInsideIpv6Cidr":{},"PreSharedKey":{},"Phase1LifetimeSeconds":{"type":"integer"},"Phase2LifetimeSeconds":{"type":"integer"},"RekeyMarginTimeSeconds":{"type":"integer"},"RekeyFuzzPercentage":{"type":"integer"},"ReplayWindowSize":{"type":"integer"},"DPDTimeoutSeconds":{"type":"integer"},"DPDTimeoutAction":{},"Phase1EncryptionAlgorithms":{"shape":"Skn","locationName":"Phase1EncryptionAlgorithm"},"Phase2EncryptionAlgorithms":{"shape":"Skp","locationName":"Phase2EncryptionAlgorithm"},"Phase1IntegrityAlgorithms":{"shape":"Skr","locationName":"Phase1IntegrityAlgorithm"},"Phase2IntegrityAlgorithms":{"shape":"Skt","locationName":"Phase2IntegrityAlgorithm"},"Phase1DHGroupNumbers":{"shape":"Skv","locationName":"Phase1DHGroupNumber"},"Phase2DHGroupNumbers":{"shape":"Skx","locationName":"Phase2DHGroupNumber"},"IKEVersions":{"shape":"Skz","locationName":"IKEVersion"},"StartupAction":{}}}},"LocalIpv4NetworkCidr":{},"RemoteIpv4NetworkCidr":{},"LocalIpv6NetworkCidr":{},"RemoteIpv6NetworkCidr":{}}},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"}}},"output":{"type":"structure","members":{"VpnConnection":{"shape":"Sl2","locationName":"vpnConnection"}}}},"CreateVpnConnectionRoute":{"input":{"type":"structure","required":["DestinationCidrBlock","VpnConnectionId"],"members":{"DestinationCidrBlock":{},"VpnConnectionId":{}}}},"CreateVpnGateway":{"input":{"type":"structure","required":["Type"],"members":{"AvailabilityZone":{},"Type":{},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"},"AmazonSideAsn":{"type":"long"},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"VpnGateway":{"shape":"Slv","locationName":"vpnGateway"}}}},"DeleteCarrierGateway":{"input":{"type":"structure","required":["CarrierGatewayId"],"members":{"CarrierGatewayId":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"CarrierGateway":{"shape":"S7l","locationName":"carrierGateway"}}}},"DeleteClientVpnEndpoint":{"input":{"type":"structure","required":["ClientVpnEndpointId"],"members":{"ClientVpnEndpointId":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Status":{"shape":"S80","locationName":"status"}}}},"DeleteClientVpnRoute":{"input":{"type":"structure","required":["ClientVpnEndpointId","DestinationCidrBlock"],"members":{"ClientVpnEndpointId":{},"TargetVpcSubnetId":{},"DestinationCidrBlock":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Status":{"shape":"S84","locationName":"status"}}}},"DeleteCustomerGateway":{"input":{"type":"structure","required":["CustomerGatewayId"],"members":{"CustomerGatewayId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"DeleteDhcpOptions":{"input":{"type":"structure","required":["DhcpOptionsId"],"members":{"DhcpOptionsId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"DeleteEgressOnlyInternetGateway":{"input":{"type":"structure","required":["EgressOnlyInternetGatewayId"],"members":{"DryRun":{"type":"boolean"},"EgressOnlyInternetGatewayId":{}}},"output":{"type":"structure","members":{"ReturnCode":{"locationName":"returnCode","type":"boolean"}}}},"DeleteFleets":{"input":{"type":"structure","required":["FleetIds","TerminateInstances"],"members":{"DryRun":{"type":"boolean"},"FleetIds":{"shape":"Sm9","locationName":"FleetId"},"TerminateInstances":{"type":"boolean"}}},"output":{"type":"structure","members":{"SuccessfulFleetDeletions":{"locationName":"successfulFleetDeletionSet","type":"list","member":{"locationName":"item","type":"structure","members":{"CurrentFleetState":{"locationName":"currentFleetState"},"PreviousFleetState":{"locationName":"previousFleetState"},"FleetId":{"locationName":"fleetId"}}}},"UnsuccessfulFleetDeletions":{"locationName":"unsuccessfulFleetDeletionSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Error":{"locationName":"error","type":"structure","members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"}}},"FleetId":{"locationName":"fleetId"}}}}}}},"DeleteFlowLogs":{"input":{"type":"structure","required":["FlowLogIds"],"members":{"DryRun":{"type":"boolean"},"FlowLogIds":{"shape":"Smj","locationName":"FlowLogId"}}},"output":{"type":"structure","members":{"Unsuccessful":{"shape":"S16","locationName":"unsuccessful"}}}},"DeleteFpgaImage":{"input":{"type":"structure","required":["FpgaImageId"],"members":{"DryRun":{"type":"boolean"},"FpgaImageId":{}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"DeleteInstanceEventWindow":{"input":{"type":"structure","required":["InstanceEventWindowId"],"members":{"DryRun":{"type":"boolean"},"ForceDelete":{"type":"boolean"},"InstanceEventWindowId":{}}},"output":{"type":"structure","members":{"InstanceEventWindowState":{"locationName":"instanceEventWindowState","type":"structure","members":{"InstanceEventWindowId":{"locationName":"instanceEventWindowId"},"State":{"locationName":"state"}}}}}},"DeleteInternetGateway":{"input":{"type":"structure","required":["InternetGatewayId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"InternetGatewayId":{"locationName":"internetGatewayId"}}}},"DeleteKeyPair":{"input":{"type":"structure","members":{"KeyName":{},"KeyPairId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"DeleteLaunchTemplate":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"LaunchTemplateId":{},"LaunchTemplateName":{}}},"output":{"type":"structure","members":{"LaunchTemplate":{"shape":"Sck","locationName":"launchTemplate"}}}},"DeleteLaunchTemplateVersions":{"input":{"type":"structure","required":["Versions"],"members":{"DryRun":{"type":"boolean"},"LaunchTemplateId":{},"LaunchTemplateName":{},"Versions":{"shape":"Smy","locationName":"LaunchTemplateVersion"}}},"output":{"type":"structure","members":{"SuccessfullyDeletedLaunchTemplateVersions":{"locationName":"successfullyDeletedLaunchTemplateVersionSet","type":"list","member":{"locationName":"item","type":"structure","members":{"LaunchTemplateId":{"locationName":"launchTemplateId"},"LaunchTemplateName":{"locationName":"launchTemplateName"},"VersionNumber":{"locationName":"versionNumber","type":"long"}}}},"UnsuccessfullyDeletedLaunchTemplateVersions":{"locationName":"unsuccessfullyDeletedLaunchTemplateVersionSet","type":"list","member":{"locationName":"item","type":"structure","members":{"LaunchTemplateId":{"locationName":"launchTemplateId"},"LaunchTemplateName":{"locationName":"launchTemplateName"},"VersionNumber":{"locationName":"versionNumber","type":"long"},"ResponseError":{"locationName":"responseError","type":"structure","members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"}}}}}}}}},"DeleteLocalGatewayRoute":{"input":{"type":"structure","required":["DestinationCidrBlock","LocalGatewayRouteTableId"],"members":{"DestinationCidrBlock":{},"LocalGatewayRouteTableId":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Route":{"shape":"Sds","locationName":"route"}}}},"DeleteLocalGatewayRouteTableVpcAssociation":{"input":{"type":"structure","required":["LocalGatewayRouteTableVpcAssociationId"],"members":{"LocalGatewayRouteTableVpcAssociationId":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"LocalGatewayRouteTableVpcAssociation":{"shape":"Sdx","locationName":"localGatewayRouteTableVpcAssociation"}}}},"DeleteManagedPrefixList":{"input":{"type":"structure","required":["PrefixListId"],"members":{"DryRun":{"type":"boolean"},"PrefixListId":{}}},"output":{"type":"structure","members":{"PrefixList":{"shape":"Se3","locationName":"prefixList"}}}},"DeleteNatGateway":{"input":{"type":"structure","required":["NatGatewayId"],"members":{"DryRun":{"type":"boolean"},"NatGatewayId":{}}},"output":{"type":"structure","members":{"NatGatewayId":{"locationName":"natGatewayId"}}}},"DeleteNetworkAcl":{"input":{"type":"structure","required":["NetworkAclId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"NetworkAclId":{"locationName":"networkAclId"}}}},"DeleteNetworkAclEntry":{"input":{"type":"structure","required":["Egress","NetworkAclId","RuleNumber"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"Egress":{"locationName":"egress","type":"boolean"},"NetworkAclId":{"locationName":"networkAclId"},"RuleNumber":{"locationName":"ruleNumber","type":"integer"}}}},"DeleteNetworkInsightsAnalysis":{"input":{"type":"structure","required":["NetworkInsightsAnalysisId"],"members":{"DryRun":{"type":"boolean"},"NetworkInsightsAnalysisId":{}}},"output":{"type":"structure","members":{"NetworkInsightsAnalysisId":{"locationName":"networkInsightsAnalysisId"}}}},"DeleteNetworkInsightsPath":{"input":{"type":"structure","required":["NetworkInsightsPathId"],"members":{"DryRun":{"type":"boolean"},"NetworkInsightsPathId":{}}},"output":{"type":"structure","members":{"NetworkInsightsPathId":{"locationName":"networkInsightsPathId"}}}},"DeleteNetworkInterface":{"input":{"type":"structure","required":["NetworkInterfaceId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"}}}},"DeleteNetworkInterfacePermission":{"input":{"type":"structure","required":["NetworkInterfacePermissionId"],"members":{"NetworkInterfacePermissionId":{},"Force":{"type":"boolean"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"DeletePlacementGroup":{"input":{"type":"structure","required":["GroupName"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"GroupName":{"locationName":"groupName"}}}},"DeleteQueuedReservedInstances":{"input":{"type":"structure","required":["ReservedInstancesIds"],"members":{"DryRun":{"type":"boolean"},"ReservedInstancesIds":{"locationName":"ReservedInstancesId","type":"list","member":{"locationName":"item"}}}},"output":{"type":"structure","members":{"SuccessfulQueuedPurchaseDeletions":{"locationName":"successfulQueuedPurchaseDeletionSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ReservedInstancesId":{"locationName":"reservedInstancesId"}}}},"FailedQueuedPurchaseDeletions":{"locationName":"failedQueuedPurchaseDeletionSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Error":{"locationName":"error","type":"structure","members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"}}},"ReservedInstancesId":{"locationName":"reservedInstancesId"}}}}}}},"DeleteRoute":{"input":{"type":"structure","required":["RouteTableId"],"members":{"DestinationCidrBlock":{"locationName":"destinationCidrBlock"},"DestinationIpv6CidrBlock":{"locationName":"destinationIpv6CidrBlock"},"DestinationPrefixListId":{},"DryRun":{"locationName":"dryRun","type":"boolean"},"RouteTableId":{"locationName":"routeTableId"}}}},"DeleteRouteTable":{"input":{"type":"structure","required":["RouteTableId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"RouteTableId":{"locationName":"routeTableId"}}}},"DeleteSecurityGroup":{"input":{"type":"structure","members":{"GroupId":{},"GroupName":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"DeleteSnapshot":{"input":{"type":"structure","required":["SnapshotId"],"members":{"SnapshotId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"DeleteSpotDatafeedSubscription":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"DeleteSubnet":{"input":{"type":"structure","required":["SubnetId"],"members":{"SubnetId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"DeleteSubnetCidrReservation":{"input":{"type":"structure","required":["SubnetCidrReservationId"],"members":{"SubnetCidrReservationId":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"DeletedSubnetCidrReservation":{"shape":"Sh3","locationName":"deletedSubnetCidrReservation"}}}},"DeleteTags":{"input":{"type":"structure","required":["Resources"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"Resources":{"shape":"Sh6","locationName":"resourceId"},"Tags":{"shape":"Ss","locationName":"tag"}}}},"DeleteTrafficMirrorFilter":{"input":{"type":"structure","required":["TrafficMirrorFilterId"],"members":{"TrafficMirrorFilterId":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TrafficMirrorFilterId":{"locationName":"trafficMirrorFilterId"}}}},"DeleteTrafficMirrorFilterRule":{"input":{"type":"structure","required":["TrafficMirrorFilterRuleId"],"members":{"TrafficMirrorFilterRuleId":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TrafficMirrorFilterRuleId":{"locationName":"trafficMirrorFilterRuleId"}}}},"DeleteTrafficMirrorSession":{"input":{"type":"structure","required":["TrafficMirrorSessionId"],"members":{"TrafficMirrorSessionId":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TrafficMirrorSessionId":{"locationName":"trafficMirrorSessionId"}}}},"DeleteTrafficMirrorTarget":{"input":{"type":"structure","required":["TrafficMirrorTargetId"],"members":{"TrafficMirrorTargetId":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TrafficMirrorTargetId":{"locationName":"trafficMirrorTargetId"}}}},"DeleteTransitGateway":{"input":{"type":"structure","required":["TransitGatewayId"],"members":{"TransitGatewayId":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TransitGateway":{"shape":"Si3","locationName":"transitGateway"}}}},"DeleteTransitGatewayConnect":{"input":{"type":"structure","required":["TransitGatewayAttachmentId"],"members":{"TransitGatewayAttachmentId":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TransitGatewayConnect":{"shape":"Sia","locationName":"transitGatewayConnect"}}}},"DeleteTransitGatewayConnectPeer":{"input":{"type":"structure","required":["TransitGatewayConnectPeerId"],"members":{"TransitGatewayConnectPeerId":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TransitGatewayConnectPeer":{"shape":"Sig","locationName":"transitGatewayConnectPeer"}}}},"DeleteTransitGatewayMulticastDomain":{"input":{"type":"structure","required":["TransitGatewayMulticastDomainId"],"members":{"TransitGatewayMulticastDomainId":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TransitGatewayMulticastDomain":{"shape":"Sit","locationName":"transitGatewayMulticastDomain"}}}},"DeleteTransitGatewayPeeringAttachment":{"input":{"type":"structure","required":["TransitGatewayAttachmentId"],"members":{"TransitGatewayAttachmentId":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TransitGatewayPeeringAttachment":{"shape":"Sn","locationName":"transitGatewayPeeringAttachment"}}}},"DeleteTransitGatewayPrefixListReference":{"input":{"type":"structure","required":["TransitGatewayRouteTableId","PrefixListId"],"members":{"TransitGatewayRouteTableId":{},"PrefixListId":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TransitGatewayPrefixListReference":{"shape":"Sj1","locationName":"transitGatewayPrefixListReference"}}}},"DeleteTransitGatewayRoute":{"input":{"type":"structure","required":["TransitGatewayRouteTableId","DestinationCidrBlock"],"members":{"TransitGatewayRouteTableId":{},"DestinationCidrBlock":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Route":{"shape":"Sj6","locationName":"route"}}}},"DeleteTransitGatewayRouteTable":{"input":{"type":"structure","required":["TransitGatewayRouteTableId"],"members":{"TransitGatewayRouteTableId":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TransitGatewayRouteTable":{"shape":"Sjd","locationName":"transitGatewayRouteTable"}}}},"DeleteTransitGatewayVpcAttachment":{"input":{"type":"structure","required":["TransitGatewayAttachmentId"],"members":{"TransitGatewayAttachmentId":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TransitGatewayVpcAttachment":{"shape":"Sw","locationName":"transitGatewayVpcAttachment"}}}},"DeleteVolume":{"input":{"type":"structure","required":["VolumeId"],"members":{"VolumeId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"DeleteVpc":{"input":{"type":"structure","required":["VpcId"],"members":{"VpcId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"DeleteVpcEndpointConnectionNotifications":{"input":{"type":"structure","required":["ConnectionNotificationIds"],"members":{"DryRun":{"type":"boolean"},"ConnectionNotificationIds":{"locationName":"ConnectionNotificationId","type":"list","member":{"locationName":"item"}}}},"output":{"type":"structure","members":{"Unsuccessful":{"shape":"S16","locationName":"unsuccessful"}}}},"DeleteVpcEndpointServiceConfigurations":{"input":{"type":"structure","required":["ServiceIds"],"members":{"DryRun":{"type":"boolean"},"ServiceIds":{"shape":"Sp7","locationName":"ServiceId"}}},"output":{"type":"structure","members":{"Unsuccessful":{"shape":"S16","locationName":"unsuccessful"}}}},"DeleteVpcEndpoints":{"input":{"type":"structure","required":["VpcEndpointIds"],"members":{"DryRun":{"type":"boolean"},"VpcEndpointIds":{"shape":"S13","locationName":"VpcEndpointId"}}},"output":{"type":"structure","members":{"Unsuccessful":{"shape":"S16","locationName":"unsuccessful"}}}},"DeleteVpcPeeringConnection":{"input":{"type":"structure","required":["VpcPeeringConnectionId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VpcPeeringConnectionId":{"locationName":"vpcPeeringConnectionId"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"DeleteVpnConnection":{"input":{"type":"structure","required":["VpnConnectionId"],"members":{"VpnConnectionId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"DeleteVpnConnectionRoute":{"input":{"type":"structure","required":["DestinationCidrBlock","VpnConnectionId"],"members":{"DestinationCidrBlock":{},"VpnConnectionId":{}}}},"DeleteVpnGateway":{"input":{"type":"structure","required":["VpnGatewayId"],"members":{"VpnGatewayId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"DeprovisionByoipCidr":{"input":{"type":"structure","required":["Cidr"],"members":{"Cidr":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"ByoipCidr":{"shape":"S1n","locationName":"byoipCidr"}}}},"DeregisterImage":{"input":{"type":"structure","required":["ImageId"],"members":{"ImageId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"DeregisterInstanceEventNotificationAttributes":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"InstanceTagAttribute":{"type":"structure","members":{"IncludeAllTagsOfInstance":{"type":"boolean"},"InstanceTagKeys":{"shape":"Spl","locationName":"InstanceTagKey"}}}}},"output":{"type":"structure","members":{"InstanceTagAttribute":{"shape":"Spn","locationName":"instanceTagAttribute"}}}},"DeregisterTransitGatewayMulticastGroupMembers":{"input":{"type":"structure","members":{"TransitGatewayMulticastDomainId":{},"GroupIpAddress":{},"NetworkInterfaceIds":{"shape":"Spp"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"DeregisteredMulticastGroupMembers":{"locationName":"deregisteredMulticastGroupMembers","type":"structure","members":{"TransitGatewayMulticastDomainId":{"locationName":"transitGatewayMulticastDomainId"},"DeregisteredNetworkInterfaceIds":{"shape":"Se","locationName":"deregisteredNetworkInterfaceIds"},"GroupIpAddress":{"locationName":"groupIpAddress"}}}}}},"DeregisterTransitGatewayMulticastGroupSources":{"input":{"type":"structure","members":{"TransitGatewayMulticastDomainId":{},"GroupIpAddress":{},"NetworkInterfaceIds":{"shape":"Spp"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"DeregisteredMulticastGroupSources":{"locationName":"deregisteredMulticastGroupSources","type":"structure","members":{"TransitGatewayMulticastDomainId":{"locationName":"transitGatewayMulticastDomainId"},"DeregisteredNetworkInterfaceIds":{"shape":"Se","locationName":"deregisteredNetworkInterfaceIds"},"GroupIpAddress":{"locationName":"groupIpAddress"}}}}}},"DescribeAccountAttributes":{"input":{"type":"structure","members":{"AttributeNames":{"locationName":"attributeName","type":"list","member":{"locationName":"attributeName"}},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"AccountAttributes":{"locationName":"accountAttributeSet","type":"list","member":{"locationName":"item","type":"structure","members":{"AttributeName":{"locationName":"attributeName"},"AttributeValues":{"locationName":"attributeValueSet","type":"list","member":{"locationName":"item","type":"structure","members":{"AttributeValue":{"locationName":"attributeValue"}}}}}}}}}},"DescribeAddresses":{"input":{"type":"structure","members":{"Filters":{"shape":"Sq4","locationName":"Filter"},"PublicIps":{"locationName":"PublicIp","type":"list","member":{"locationName":"PublicIp"}},"AllocationIds":{"locationName":"AllocationId","type":"list","member":{"locationName":"AllocationId"}},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"Addresses":{"locationName":"addressesSet","type":"list","member":{"locationName":"item","type":"structure","members":{"InstanceId":{"locationName":"instanceId"},"PublicIp":{"locationName":"publicIp"},"AllocationId":{"locationName":"allocationId"},"AssociationId":{"locationName":"associationId"},"Domain":{"locationName":"domain"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"NetworkInterfaceOwnerId":{"locationName":"networkInterfaceOwnerId"},"PrivateIpAddress":{"locationName":"privateIpAddress"},"Tags":{"shape":"Ss","locationName":"tagSet"},"PublicIpv4Pool":{"locationName":"publicIpv4Pool"},"NetworkBorderGroup":{"locationName":"networkBorderGroup"},"CustomerOwnedIp":{"locationName":"customerOwnedIp"},"CustomerOwnedIpv4Pool":{"locationName":"customerOwnedIpv4Pool"},"CarrierIp":{"locationName":"carrierIp"}}}}}}},"DescribeAddressesAttribute":{"input":{"type":"structure","members":{"AllocationIds":{"locationName":"AllocationId","type":"list","member":{"locationName":"item"}},"Attribute":{},"NextToken":{},"MaxResults":{"type":"integer"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Addresses":{"locationName":"addressSet","type":"list","member":{"shape":"Sqi","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeAggregateIdFormat":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"UseLongIdsAggregated":{"locationName":"useLongIdsAggregated","type":"boolean"},"Statuses":{"shape":"Sqm","locationName":"statusSet"}}}},"DescribeAvailabilityZones":{"input":{"type":"structure","members":{"Filters":{"shape":"Sq4","locationName":"Filter"},"ZoneNames":{"locationName":"ZoneName","type":"list","member":{"locationName":"ZoneName"}},"ZoneIds":{"locationName":"ZoneId","type":"list","member":{"locationName":"ZoneId"}},"AllAvailabilityZones":{"type":"boolean"},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"AvailabilityZones":{"locationName":"availabilityZoneInfo","type":"list","member":{"locationName":"item","type":"structure","members":{"State":{"locationName":"zoneState"},"OptInStatus":{"locationName":"optInStatus"},"Messages":{"locationName":"messageSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Message":{"locationName":"message"}}}},"RegionName":{"locationName":"regionName"},"ZoneName":{"locationName":"zoneName"},"ZoneId":{"locationName":"zoneId"},"GroupName":{"locationName":"groupName"},"NetworkBorderGroup":{"locationName":"networkBorderGroup"},"ZoneType":{"locationName":"zoneType"},"ParentZoneName":{"locationName":"parentZoneName"},"ParentZoneId":{"locationName":"parentZoneId"}}}}}}},"DescribeBundleTasks":{"input":{"type":"structure","members":{"BundleIds":{"locationName":"BundleId","type":"list","member":{"locationName":"BundleId"}},"Filters":{"shape":"Sq4","locationName":"Filter"},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"BundleTasks":{"locationName":"bundleInstanceTasksSet","type":"list","member":{"shape":"S5o","locationName":"item"}}}}},"DescribeByoipCidrs":{"input":{"type":"structure","required":["MaxResults"],"members":{"DryRun":{"type":"boolean"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"ByoipCidrs":{"locationName":"byoipCidrSet","type":"list","member":{"shape":"S1n","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeCapacityReservations":{"input":{"type":"structure","members":{"CapacityReservationIds":{"locationName":"CapacityReservationId","type":"list","member":{"locationName":"item"}},"NextToken":{},"MaxResults":{"type":"integer"},"Filters":{"shape":"Sq4","locationName":"Filter"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"NextToken":{"locationName":"nextToken"},"CapacityReservations":{"locationName":"capacityReservationSet","type":"list","member":{"shape":"S7g","locationName":"item"}}}}},"DescribeCarrierGateways":{"input":{"type":"structure","members":{"CarrierGatewayIds":{"locationName":"CarrierGatewayId","type":"list","member":{}},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"CarrierGateways":{"locationName":"carrierGatewaySet","type":"list","member":{"shape":"S7l","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeClassicLinkInstances":{"input":{"type":"structure","members":{"Filters":{"shape":"Sq4","locationName":"Filter"},"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceIds":{"shape":"Srh","locationName":"InstanceId"},"MaxResults":{"locationName":"maxResults","type":"integer"},"NextToken":{"locationName":"nextToken"}}},"output":{"type":"structure","members":{"Instances":{"locationName":"instancesSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Groups":{"shape":"Sf2","locationName":"groupSet"},"InstanceId":{"locationName":"instanceId"},"Tags":{"shape":"Ss","locationName":"tagSet"},"VpcId":{"locationName":"vpcId"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeClientVpnAuthorizationRules":{"input":{"type":"structure","required":["ClientVpnEndpointId"],"members":{"ClientVpnEndpointId":{},"DryRun":{"type":"boolean"},"NextToken":{},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"AuthorizationRules":{"locationName":"authorizationRule","type":"list","member":{"locationName":"item","type":"structure","members":{"ClientVpnEndpointId":{"locationName":"clientVpnEndpointId"},"Description":{"locationName":"description"},"GroupId":{"locationName":"groupId"},"AccessAll":{"locationName":"accessAll","type":"boolean"},"DestinationCidr":{"locationName":"destinationCidr"},"Status":{"shape":"S4x","locationName":"status"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeClientVpnConnections":{"input":{"type":"structure","required":["ClientVpnEndpointId"],"members":{"ClientVpnEndpointId":{},"Filters":{"shape":"Sq4","locationName":"Filter"},"NextToken":{},"MaxResults":{"type":"integer"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Connections":{"locationName":"connections","type":"list","member":{"locationName":"item","type":"structure","members":{"ClientVpnEndpointId":{"locationName":"clientVpnEndpointId"},"Timestamp":{"locationName":"timestamp"},"ConnectionId":{"locationName":"connectionId"},"Username":{"locationName":"username"},"ConnectionEstablishedTime":{"locationName":"connectionEstablishedTime"},"IngressBytes":{"locationName":"ingressBytes"},"EgressBytes":{"locationName":"egressBytes"},"IngressPackets":{"locationName":"ingressPackets"},"EgressPackets":{"locationName":"egressPackets"},"ClientIp":{"locationName":"clientIp"},"CommonName":{"locationName":"commonName"},"Status":{"shape":"Srw","locationName":"status"},"ConnectionEndTime":{"locationName":"connectionEndTime"},"PostureComplianceStatuses":{"shape":"Se","locationName":"postureComplianceStatusSet"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeClientVpnEndpoints":{"input":{"type":"structure","members":{"ClientVpnEndpointIds":{"locationName":"ClientVpnEndpointId","type":"list","member":{"locationName":"item"}},"MaxResults":{"type":"integer"},"NextToken":{},"Filters":{"shape":"Sq4","locationName":"Filter"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"ClientVpnEndpoints":{"locationName":"clientVpnEndpoint","type":"list","member":{"locationName":"item","type":"structure","members":{"ClientVpnEndpointId":{"locationName":"clientVpnEndpointId"},"Description":{"locationName":"description"},"Status":{"shape":"S80","locationName":"status"},"CreationTime":{"locationName":"creationTime"},"DeletionTime":{"locationName":"deletionTime"},"DnsName":{"locationName":"dnsName"},"ClientCidrBlock":{"locationName":"clientCidrBlock"},"DnsServers":{"shape":"Se","locationName":"dnsServer"},"SplitTunnel":{"locationName":"splitTunnel","type":"boolean"},"VpnProtocol":{"locationName":"vpnProtocol"},"TransportProtocol":{"locationName":"transportProtocol"},"VpnPort":{"locationName":"vpnPort","type":"integer"},"AssociatedTargetNetworks":{"deprecated":true,"deprecatedMessage":"This property is deprecated. To view the target networks associated with a Client VPN endpoint, call DescribeClientVpnTargetNetworks and inspect the clientVpnTargetNetworks response element.","locationName":"associatedTargetNetwork","type":"list","member":{"locationName":"item","type":"structure","members":{"NetworkId":{"locationName":"networkId"},"NetworkType":{"locationName":"networkType"}}}},"ServerCertificateArn":{"locationName":"serverCertificateArn"},"AuthenticationOptions":{"locationName":"authenticationOptions","type":"list","member":{"locationName":"item","type":"structure","members":{"Type":{"locationName":"type"},"ActiveDirectory":{"locationName":"activeDirectory","type":"structure","members":{"DirectoryId":{"locationName":"directoryId"}}},"MutualAuthentication":{"locationName":"mutualAuthentication","type":"structure","members":{"ClientRootCertificateChain":{"locationName":"clientRootCertificateChain"}}},"FederatedAuthentication":{"locationName":"federatedAuthentication","type":"structure","members":{"SamlProviderArn":{"locationName":"samlProviderArn"},"SelfServiceSamlProviderArn":{"locationName":"selfServiceSamlProviderArn"}}}}}},"ConnectionLogOptions":{"locationName":"connectionLogOptions","type":"structure","members":{"Enabled":{"type":"boolean"},"CloudwatchLogGroup":{},"CloudwatchLogStream":{}}},"Tags":{"shape":"Ss","locationName":"tagSet"},"SecurityGroupIds":{"shape":"S25","locationName":"securityGroupIdSet"},"VpcId":{"locationName":"vpcId"},"SelfServicePortalUrl":{"locationName":"selfServicePortalUrl"},"ClientConnectOptions":{"locationName":"clientConnectOptions","type":"structure","members":{"Enabled":{"locationName":"enabled","type":"boolean"},"LambdaFunctionArn":{"locationName":"lambdaFunctionArn"},"Status":{"locationName":"status","type":"structure","members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"}}}}}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeClientVpnRoutes":{"input":{"type":"structure","required":["ClientVpnEndpointId"],"members":{"ClientVpnEndpointId":{},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Routes":{"locationName":"routes","type":"list","member":{"locationName":"item","type":"structure","members":{"ClientVpnEndpointId":{"locationName":"clientVpnEndpointId"},"DestinationCidr":{"locationName":"destinationCidr"},"TargetSubnet":{"locationName":"targetSubnet"},"Type":{"locationName":"type"},"Origin":{"locationName":"origin"},"Status":{"shape":"S84","locationName":"status"},"Description":{"locationName":"description"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeClientVpnTargetNetworks":{"input":{"type":"structure","required":["ClientVpnEndpointId"],"members":{"ClientVpnEndpointId":{},"AssociationIds":{"shape":"Se"},"MaxResults":{"type":"integer"},"NextToken":{},"Filters":{"shape":"Sq4","locationName":"Filter"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"ClientVpnTargetNetworks":{"locationName":"clientVpnTargetNetworks","type":"list","member":{"locationName":"item","type":"structure","members":{"AssociationId":{"locationName":"associationId"},"VpcId":{"locationName":"vpcId"},"TargetNetworkId":{"locationName":"targetNetworkId"},"ClientVpnEndpointId":{"locationName":"clientVpnEndpointId"},"Status":{"shape":"S2r","locationName":"status"},"SecurityGroups":{"shape":"Se","locationName":"securityGroups"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeCoipPools":{"input":{"type":"structure","members":{"PoolIds":{"locationName":"PoolId","type":"list","member":{"locationName":"item"}},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"CoipPools":{"locationName":"coipPoolSet","type":"list","member":{"locationName":"item","type":"structure","members":{"PoolId":{"locationName":"poolId"},"PoolCidrs":{"shape":"Se","locationName":"poolCidrSet"},"LocalGatewayRouteTableId":{"locationName":"localGatewayRouteTableId"},"Tags":{"shape":"Ss","locationName":"tagSet"},"PoolArn":{"locationName":"poolArn"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeConversionTasks":{"input":{"type":"structure","members":{"ConversionTaskIds":{"locationName":"conversionTaskId","type":"list","member":{"locationName":"item"}},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"ConversionTasks":{"locationName":"conversionTasks","type":"list","member":{"shape":"St1","locationName":"item"}}}}},"DescribeCustomerGateways":{"input":{"type":"structure","members":{"CustomerGatewayIds":{"locationName":"CustomerGatewayId","type":"list","member":{"locationName":"CustomerGatewayId"}},"Filters":{"shape":"Sq4","locationName":"Filter"},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"CustomerGateways":{"locationName":"customerGatewaySet","type":"list","member":{"shape":"S89","locationName":"item"}}}}},"DescribeDhcpOptions":{"input":{"type":"structure","members":{"DhcpOptionsIds":{"locationName":"DhcpOptionsId","type":"list","member":{"locationName":"DhcpOptionsId"}},"Filters":{"shape":"Sq4","locationName":"Filter"},"DryRun":{"locationName":"dryRun","type":"boolean"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"DhcpOptions":{"locationName":"dhcpOptionsSet","type":"list","member":{"shape":"S8r","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeEgressOnlyInternetGateways":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"EgressOnlyInternetGatewayIds":{"locationName":"EgressOnlyInternetGatewayId","type":"list","member":{"locationName":"item"}},"MaxResults":{"type":"integer"},"NextToken":{},"Filters":{"shape":"Sq4","locationName":"Filter"}}},"output":{"type":"structure","members":{"EgressOnlyInternetGateways":{"locationName":"egressOnlyInternetGatewaySet","type":"list","member":{"shape":"S8y","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeElasticGpus":{"input":{"type":"structure","members":{"ElasticGpuIds":{"locationName":"ElasticGpuId","type":"list","member":{"locationName":"item"}},"DryRun":{"type":"boolean"},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"ElasticGpuSet":{"locationName":"elasticGpuSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ElasticGpuId":{"locationName":"elasticGpuId"},"AvailabilityZone":{"locationName":"availabilityZone"},"ElasticGpuType":{"locationName":"elasticGpuType"},"ElasticGpuHealth":{"locationName":"elasticGpuHealth","type":"structure","members":{"Status":{"locationName":"status"}}},"ElasticGpuState":{"locationName":"elasticGpuState"},"InstanceId":{"locationName":"instanceId"},"Tags":{"shape":"Ss","locationName":"tagSet"}}}},"MaxResults":{"locationName":"maxResults","type":"integer"},"NextToken":{"locationName":"nextToken"}}}},"DescribeExportImageTasks":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"Filters":{"shape":"Sq4","locationName":"Filter"},"ExportImageTaskIds":{"locationName":"ExportImageTaskId","type":"list","member":{"locationName":"ExportImageTaskId"}},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"ExportImageTasks":{"locationName":"exportImageTaskSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Description":{"locationName":"description"},"ExportImageTaskId":{"locationName":"exportImageTaskId"},"ImageId":{"locationName":"imageId"},"Progress":{"locationName":"progress"},"S3ExportLocation":{"shape":"Su4","locationName":"s3ExportLocation"},"Status":{"locationName":"status"},"StatusMessage":{"locationName":"statusMessage"},"Tags":{"shape":"Ss","locationName":"tagSet"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeExportTasks":{"input":{"type":"structure","members":{"ExportTaskIds":{"locationName":"exportTaskId","type":"list","member":{"locationName":"ExportTaskId"}},"Filters":{"shape":"Sq4","locationName":"Filter"}}},"output":{"type":"structure","members":{"ExportTasks":{"locationName":"exportTaskSet","type":"list","member":{"shape":"Sat","locationName":"item"}}}}},"DescribeFastSnapshotRestores":{"input":{"type":"structure","members":{"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"FastSnapshotRestores":{"locationName":"fastSnapshotRestoreSet","type":"list","member":{"locationName":"item","type":"structure","members":{"SnapshotId":{"locationName":"snapshotId"},"AvailabilityZone":{"locationName":"availabilityZone"},"State":{"locationName":"state"},"StateTransitionReason":{"locationName":"stateTransitionReason"},"OwnerId":{"locationName":"ownerId"},"OwnerAlias":{"locationName":"ownerAlias"},"EnablingTime":{"locationName":"enablingTime","type":"timestamp"},"OptimizingTime":{"locationName":"optimizingTime","type":"timestamp"},"EnabledTime":{"locationName":"enabledTime","type":"timestamp"},"DisablingTime":{"locationName":"disablingTime","type":"timestamp"},"DisabledTime":{"locationName":"disabledTime","type":"timestamp"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeFleetHistory":{"input":{"type":"structure","required":["FleetId","StartTime"],"members":{"DryRun":{"type":"boolean"},"EventType":{},"MaxResults":{"type":"integer"},"NextToken":{},"FleetId":{},"StartTime":{"type":"timestamp"}}},"output":{"type":"structure","members":{"HistoryRecords":{"locationName":"historyRecordSet","type":"list","member":{"locationName":"item","type":"structure","members":{"EventInformation":{"shape":"Sul","locationName":"eventInformation"},"EventType":{"locationName":"eventType"},"Timestamp":{"locationName":"timestamp","type":"timestamp"}}}},"LastEvaluatedTime":{"locationName":"lastEvaluatedTime","type":"timestamp"},"NextToken":{"locationName":"nextToken"},"FleetId":{"locationName":"fleetId"},"StartTime":{"locationName":"startTime","type":"timestamp"}}}},"DescribeFleetInstances":{"input":{"type":"structure","required":["FleetId"],"members":{"DryRun":{"type":"boolean"},"MaxResults":{"type":"integer"},"NextToken":{},"FleetId":{},"Filters":{"shape":"Sq4","locationName":"Filter"}}},"output":{"type":"structure","members":{"ActiveInstances":{"shape":"Suo","locationName":"activeInstanceSet"},"NextToken":{"locationName":"nextToken"},"FleetId":{"locationName":"fleetId"}}}},"DescribeFleets":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"MaxResults":{"type":"integer"},"NextToken":{},"FleetIds":{"shape":"Sm9","locationName":"FleetId"},"Filters":{"shape":"Sq4","locationName":"Filter"}}},"output":{"type":"structure","members":{"NextToken":{"locationName":"nextToken"},"Fleets":{"locationName":"fleetSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ActivityStatus":{"locationName":"activityStatus"},"CreateTime":{"locationName":"createTime","type":"timestamp"},"FleetId":{"locationName":"fleetId"},"FleetState":{"locationName":"fleetState"},"ClientToken":{"locationName":"clientToken"},"ExcessCapacityTerminationPolicy":{"locationName":"excessCapacityTerminationPolicy"},"FulfilledCapacity":{"locationName":"fulfilledCapacity","type":"double"},"FulfilledOnDemandCapacity":{"locationName":"fulfilledOnDemandCapacity","type":"double"},"LaunchTemplateConfigs":{"locationName":"launchTemplateConfigs","type":"list","member":{"locationName":"item","type":"structure","members":{"LaunchTemplateSpecification":{"shape":"S9v","locationName":"launchTemplateSpecification"},"Overrides":{"locationName":"overrides","type":"list","member":{"shape":"S9w","locationName":"item"}}}}},"TargetCapacitySpecification":{"locationName":"targetCapacitySpecification","type":"structure","members":{"TotalTargetCapacity":{"locationName":"totalTargetCapacity","type":"integer"},"OnDemandTargetCapacity":{"locationName":"onDemandTargetCapacity","type":"integer"},"SpotTargetCapacity":{"locationName":"spotTargetCapacity","type":"integer"},"DefaultTargetCapacityType":{"locationName":"defaultTargetCapacityType"}}},"TerminateInstancesWithExpiration":{"locationName":"terminateInstancesWithExpiration","type":"boolean"},"Type":{"locationName":"type"},"ValidFrom":{"locationName":"validFrom","type":"timestamp"},"ValidUntil":{"locationName":"validUntil","type":"timestamp"},"ReplaceUnhealthyInstances":{"locationName":"replaceUnhealthyInstances","type":"boolean"},"SpotOptions":{"locationName":"spotOptions","type":"structure","members":{"AllocationStrategy":{"locationName":"allocationStrategy"},"MaintenanceStrategies":{"locationName":"maintenanceStrategies","type":"structure","members":{"CapacityRebalance":{"locationName":"capacityRebalance","type":"structure","members":{"ReplacementStrategy":{"locationName":"replacementStrategy"}}}}},"InstanceInterruptionBehavior":{"locationName":"instanceInterruptionBehavior"},"InstancePoolsToUseCount":{"locationName":"instancePoolsToUseCount","type":"integer"},"SingleInstanceType":{"locationName":"singleInstanceType","type":"boolean"},"SingleAvailabilityZone":{"locationName":"singleAvailabilityZone","type":"boolean"},"MinTargetCapacity":{"locationName":"minTargetCapacity","type":"integer"},"MaxTotalPrice":{"locationName":"maxTotalPrice"}}},"OnDemandOptions":{"locationName":"onDemandOptions","type":"structure","members":{"AllocationStrategy":{"locationName":"allocationStrategy"},"CapacityReservationOptions":{"locationName":"capacityReservationOptions","type":"structure","members":{"UsageStrategy":{"locationName":"usageStrategy"}}},"SingleInstanceType":{"locationName":"singleInstanceType","type":"boolean"},"SingleAvailabilityZone":{"locationName":"singleAvailabilityZone","type":"boolean"},"MinTargetCapacity":{"locationName":"minTargetCapacity","type":"integer"},"MaxTotalPrice":{"locationName":"maxTotalPrice"}}},"Tags":{"shape":"Ss","locationName":"tagSet"},"Errors":{"locationName":"errorSet","type":"list","member":{"locationName":"item","type":"structure","members":{"LaunchTemplateAndOverrides":{"shape":"S9u","locationName":"launchTemplateAndOverrides"},"Lifecycle":{"locationName":"lifecycle"},"ErrorCode":{"locationName":"errorCode"},"ErrorMessage":{"locationName":"errorMessage"}}}},"Instances":{"locationName":"fleetInstanceSet","type":"list","member":{"locationName":"item","type":"structure","members":{"LaunchTemplateAndOverrides":{"shape":"S9u","locationName":"launchTemplateAndOverrides"},"Lifecycle":{"locationName":"lifecycle"},"InstanceIds":{"shape":"Sa1","locationName":"instanceIds"},"InstanceType":{"locationName":"instanceType"},"Platform":{"locationName":"platform"}}}},"Context":{"locationName":"context"}}}}}}},"DescribeFlowLogs":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"Filter":{"shape":"Sq4"},"FlowLogIds":{"shape":"Smj","locationName":"FlowLogId"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"FlowLogs":{"locationName":"flowLogSet","type":"list","member":{"locationName":"item","type":"structure","members":{"CreationTime":{"locationName":"creationTime","type":"timestamp"},"DeliverLogsErrorMessage":{"locationName":"deliverLogsErrorMessage"},"DeliverLogsPermissionArn":{"locationName":"deliverLogsPermissionArn"},"DeliverLogsStatus":{"locationName":"deliverLogsStatus"},"FlowLogId":{"locationName":"flowLogId"},"FlowLogStatus":{"locationName":"flowLogStatus"},"LogGroupName":{"locationName":"logGroupName"},"ResourceId":{"locationName":"resourceId"},"TrafficType":{"locationName":"trafficType"},"LogDestinationType":{"locationName":"logDestinationType"},"LogDestination":{"locationName":"logDestination"},"LogFormat":{"locationName":"logFormat"},"Tags":{"shape":"Ss","locationName":"tagSet"},"MaxAggregationInterval":{"locationName":"maxAggregationInterval","type":"integer"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeFpgaImageAttribute":{"input":{"type":"structure","required":["FpgaImageId","Attribute"],"members":{"DryRun":{"type":"boolean"},"FpgaImageId":{},"Attribute":{}}},"output":{"type":"structure","members":{"FpgaImageAttribute":{"shape":"Svg","locationName":"fpgaImageAttribute"}}}},"DescribeFpgaImages":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"FpgaImageIds":{"locationName":"FpgaImageId","type":"list","member":{"locationName":"item"}},"Owners":{"shape":"Svp","locationName":"Owner"},"Filters":{"shape":"Sq4","locationName":"Filter"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"FpgaImages":{"locationName":"fpgaImageSet","type":"list","member":{"locationName":"item","type":"structure","members":{"FpgaImageId":{"locationName":"fpgaImageId"},"FpgaImageGlobalId":{"locationName":"fpgaImageGlobalId"},"Name":{"locationName":"name"},"Description":{"locationName":"description"},"ShellVersion":{"locationName":"shellVersion"},"PciId":{"locationName":"pciId","type":"structure","members":{"DeviceId":{},"VendorId":{},"SubsystemId":{},"SubsystemVendorId":{}}},"State":{"locationName":"state","type":"structure","members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"}}},"CreateTime":{"locationName":"createTime","type":"timestamp"},"UpdateTime":{"locationName":"updateTime","type":"timestamp"},"OwnerId":{"locationName":"ownerId"},"OwnerAlias":{"locationName":"ownerAlias"},"ProductCodes":{"shape":"Svk","locationName":"productCodes"},"Tags":{"shape":"Ss","locationName":"tags"},"Public":{"locationName":"public","type":"boolean"},"DataRetentionSupport":{"locationName":"dataRetentionSupport","type":"boolean"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeHostReservationOfferings":{"input":{"type":"structure","members":{"Filter":{"shape":"Sq4"},"MaxDuration":{"type":"integer"},"MaxResults":{"type":"integer"},"MinDuration":{"type":"integer"},"NextToken":{},"OfferingId":{}}},"output":{"type":"structure","members":{"NextToken":{"locationName":"nextToken"},"OfferingSet":{"locationName":"offeringSet","type":"list","member":{"locationName":"item","type":"structure","members":{"CurrencyCode":{"locationName":"currencyCode"},"Duration":{"locationName":"duration","type":"integer"},"HourlyPrice":{"locationName":"hourlyPrice"},"InstanceFamily":{"locationName":"instanceFamily"},"OfferingId":{"locationName":"offeringId"},"PaymentOption":{"locationName":"paymentOption"},"UpfrontPrice":{"locationName":"upfrontPrice"}}}}}}},"DescribeHostReservations":{"input":{"type":"structure","members":{"Filter":{"shape":"Sq4"},"HostReservationIdSet":{"type":"list","member":{"locationName":"item"}},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"HostReservationSet":{"locationName":"hostReservationSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Count":{"locationName":"count","type":"integer"},"CurrencyCode":{"locationName":"currencyCode"},"Duration":{"locationName":"duration","type":"integer"},"End":{"locationName":"end","type":"timestamp"},"HostIdSet":{"shape":"Swa","locationName":"hostIdSet"},"HostReservationId":{"locationName":"hostReservationId"},"HourlyPrice":{"locationName":"hourlyPrice"},"InstanceFamily":{"locationName":"instanceFamily"},"OfferingId":{"locationName":"offeringId"},"PaymentOption":{"locationName":"paymentOption"},"Start":{"locationName":"start","type":"timestamp"},"State":{"locationName":"state"},"UpfrontPrice":{"locationName":"upfrontPrice"},"Tags":{"shape":"Ss","locationName":"tagSet"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeHosts":{"input":{"type":"structure","members":{"Filter":{"shape":"Sq4","locationName":"filter"},"HostIds":{"shape":"Swd","locationName":"hostId"},"MaxResults":{"locationName":"maxResults","type":"integer"},"NextToken":{"locationName":"nextToken"}}},"output":{"type":"structure","members":{"Hosts":{"locationName":"hostSet","type":"list","member":{"locationName":"item","type":"structure","members":{"AutoPlacement":{"locationName":"autoPlacement"},"AvailabilityZone":{"locationName":"availabilityZone"},"AvailableCapacity":{"locationName":"availableCapacity","type":"structure","members":{"AvailableInstanceCapacity":{"locationName":"availableInstanceCapacity","type":"list","member":{"locationName":"item","type":"structure","members":{"AvailableCapacity":{"locationName":"availableCapacity","type":"integer"},"InstanceType":{"locationName":"instanceType"},"TotalCapacity":{"locationName":"totalCapacity","type":"integer"}}}},"AvailableVCpus":{"locationName":"availableVCpus","type":"integer"}}},"ClientToken":{"locationName":"clientToken"},"HostId":{"locationName":"hostId"},"HostProperties":{"locationName":"hostProperties","type":"structure","members":{"Cores":{"locationName":"cores","type":"integer"},"InstanceType":{"locationName":"instanceType"},"InstanceFamily":{"locationName":"instanceFamily"},"Sockets":{"locationName":"sockets","type":"integer"},"TotalVCpus":{"locationName":"totalVCpus","type":"integer"}}},"HostReservationId":{"locationName":"hostReservationId"},"Instances":{"locationName":"instances","type":"list","member":{"locationName":"item","type":"structure","members":{"InstanceId":{"locationName":"instanceId"},"InstanceType":{"locationName":"instanceType"},"OwnerId":{"locationName":"ownerId"}}}},"State":{"locationName":"state"},"AllocationTime":{"locationName":"allocationTime","type":"timestamp"},"ReleaseTime":{"locationName":"releaseTime","type":"timestamp"},"Tags":{"shape":"Ss","locationName":"tagSet"},"HostRecovery":{"locationName":"hostRecovery"},"AllowsMultipleInstanceTypes":{"locationName":"allowsMultipleInstanceTypes"},"OwnerId":{"locationName":"ownerId"},"AvailabilityZoneId":{"locationName":"availabilityZoneId"},"MemberOfServiceLinkedResourceGroup":{"locationName":"memberOfServiceLinkedResourceGroup","type":"boolean"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeIamInstanceProfileAssociations":{"input":{"type":"structure","members":{"AssociationIds":{"locationName":"AssociationId","type":"list","member":{"locationName":"AssociationId"}},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"IamInstanceProfileAssociations":{"locationName":"iamInstanceProfileAssociationSet","type":"list","member":{"shape":"S31","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeIdFormat":{"input":{"type":"structure","members":{"Resource":{}}},"output":{"type":"structure","members":{"Statuses":{"shape":"Sqm","locationName":"statusSet"}}}},"DescribeIdentityIdFormat":{"input":{"type":"structure","required":["PrincipalArn"],"members":{"PrincipalArn":{"locationName":"principalArn"},"Resource":{"locationName":"resource"}}},"output":{"type":"structure","members":{"Statuses":{"shape":"Sqm","locationName":"statusSet"}}}},"DescribeImageAttribute":{"input":{"type":"structure","required":["Attribute","ImageId"],"members":{"Attribute":{},"ImageId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"BlockDeviceMappings":{"shape":"Sx2","locationName":"blockDeviceMapping"},"ImageId":{"locationName":"imageId"},"LaunchPermissions":{"shape":"Sx3","locationName":"launchPermission"},"ProductCodes":{"shape":"Svk","locationName":"productCodes"},"Description":{"shape":"S8v","locationName":"description"},"KernelId":{"shape":"S8v","locationName":"kernel"},"RamdiskId":{"shape":"S8v","locationName":"ramdisk"},"SriovNetSupport":{"shape":"S8v","locationName":"sriovNetSupport"},"BootMode":{"shape":"S8v","locationName":"bootMode"}}}},"DescribeImages":{"input":{"type":"structure","members":{"ExecutableUsers":{"locationName":"ExecutableBy","type":"list","member":{"locationName":"ExecutableBy"}},"Filters":{"shape":"Sq4","locationName":"Filter"},"ImageIds":{"locationName":"ImageId","type":"list","member":{"locationName":"ImageId"}},"Owners":{"shape":"Svp","locationName":"Owner"},"IncludeDeprecated":{"type":"boolean"},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"Images":{"locationName":"imagesSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Architecture":{"locationName":"architecture"},"CreationDate":{"locationName":"creationDate"},"ImageId":{"locationName":"imageId"},"ImageLocation":{"locationName":"imageLocation"},"ImageType":{"locationName":"imageType"},"Public":{"locationName":"isPublic","type":"boolean"},"KernelId":{"locationName":"kernelId"},"OwnerId":{"locationName":"imageOwnerId"},"Platform":{"locationName":"platform"},"PlatformDetails":{"locationName":"platformDetails"},"UsageOperation":{"locationName":"usageOperation"},"ProductCodes":{"shape":"Svk","locationName":"productCodes"},"RamdiskId":{"locationName":"ramdiskId"},"State":{"locationName":"imageState"},"BlockDeviceMappings":{"shape":"Sx2","locationName":"blockDeviceMapping"},"Description":{"locationName":"description"},"EnaSupport":{"locationName":"enaSupport","type":"boolean"},"Hypervisor":{"locationName":"hypervisor"},"ImageOwnerAlias":{"locationName":"imageOwnerAlias"},"Name":{"locationName":"name"},"RootDeviceName":{"locationName":"rootDeviceName"},"RootDeviceType":{"locationName":"rootDeviceType"},"SriovNetSupport":{"locationName":"sriovNetSupport"},"StateReason":{"shape":"Sxg","locationName":"stateReason"},"Tags":{"shape":"Ss","locationName":"tagSet"},"VirtualizationType":{"locationName":"virtualizationType"},"BootMode":{"locationName":"bootMode"},"DeprecationTime":{"locationName":"deprecationTime"}}}}}}},"DescribeImportImageTasks":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"Filters":{"shape":"Sq4"},"ImportTaskIds":{"locationName":"ImportTaskId","type":"list","member":{"locationName":"ImportTaskId"}},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"ImportImageTasks":{"locationName":"importImageTaskSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Architecture":{"locationName":"architecture"},"Description":{"locationName":"description"},"Encrypted":{"locationName":"encrypted","type":"boolean"},"Hypervisor":{"locationName":"hypervisor"},"ImageId":{"locationName":"imageId"},"ImportTaskId":{"locationName":"importTaskId"},"KmsKeyId":{"locationName":"kmsKeyId"},"LicenseType":{"locationName":"licenseType"},"Platform":{"locationName":"platform"},"Progress":{"locationName":"progress"},"SnapshotDetails":{"shape":"Sxp","locationName":"snapshotDetailSet"},"Status":{"locationName":"status"},"StatusMessage":{"locationName":"statusMessage"},"Tags":{"shape":"Ss","locationName":"tagSet"},"LicenseSpecifications":{"shape":"Sxs","locationName":"licenseSpecifications"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeImportSnapshotTasks":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"Filters":{"shape":"Sq4"},"ImportTaskIds":{"locationName":"ImportTaskId","type":"list","member":{"locationName":"ImportTaskId"}},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"ImportSnapshotTasks":{"locationName":"importSnapshotTaskSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Description":{"locationName":"description"},"ImportTaskId":{"locationName":"importTaskId"},"SnapshotTaskDetail":{"shape":"Sy0","locationName":"snapshotTaskDetail"},"Tags":{"shape":"Ss","locationName":"tagSet"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeInstanceAttribute":{"input":{"type":"structure","required":["Attribute","InstanceId"],"members":{"Attribute":{"locationName":"attribute"},"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceId":{"locationName":"instanceId"}}},"output":{"type":"structure","members":{"Groups":{"shape":"Sf2","locationName":"groupSet"},"BlockDeviceMappings":{"shape":"Sy4","locationName":"blockDeviceMapping"},"DisableApiTermination":{"shape":"Sy7","locationName":"disableApiTermination"},"EnaSupport":{"shape":"Sy7","locationName":"enaSupport"},"EnclaveOptions":{"shape":"Sy8","locationName":"enclaveOptions"},"EbsOptimized":{"shape":"Sy7","locationName":"ebsOptimized"},"InstanceId":{"locationName":"instanceId"},"InstanceInitiatedShutdownBehavior":{"shape":"S8v","locationName":"instanceInitiatedShutdownBehavior"},"InstanceType":{"shape":"S8v","locationName":"instanceType"},"KernelId":{"shape":"S8v","locationName":"kernel"},"ProductCodes":{"shape":"Svk","locationName":"productCodes"},"RamdiskId":{"shape":"S8v","locationName":"ramdisk"},"RootDeviceName":{"shape":"S8v","locationName":"rootDeviceName"},"SourceDestCheck":{"shape":"Sy7","locationName":"sourceDestCheck"},"SriovNetSupport":{"shape":"S8v","locationName":"sriovNetSupport"},"UserData":{"shape":"S8v","locationName":"userData"}}}},"DescribeInstanceCreditSpecifications":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"Filters":{"shape":"Sq4","locationName":"Filter"},"InstanceIds":{"shape":"Srh","locationName":"InstanceId"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"InstanceCreditSpecifications":{"locationName":"instanceCreditSpecificationSet","type":"list","member":{"locationName":"item","type":"structure","members":{"InstanceId":{"locationName":"instanceId"},"CpuCredits":{"locationName":"cpuCredits"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeInstanceEventNotificationAttributes":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"InstanceTagAttribute":{"shape":"Spn","locationName":"instanceTagAttribute"}}}},"DescribeInstanceEventWindows":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"InstanceEventWindowIds":{"locationName":"InstanceEventWindowId","type":"list","member":{"locationName":"InstanceEventWindowId"}},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"InstanceEventWindows":{"locationName":"instanceEventWindowSet","type":"list","member":{"shape":"S3b","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeInstanceStatus":{"input":{"type":"structure","members":{"Filters":{"shape":"Sq4","locationName":"Filter"},"InstanceIds":{"shape":"Srh","locationName":"InstanceId"},"MaxResults":{"type":"integer"},"NextToken":{},"DryRun":{"locationName":"dryRun","type":"boolean"},"IncludeAllInstances":{"locationName":"includeAllInstances","type":"boolean"}}},"output":{"type":"structure","members":{"InstanceStatuses":{"locationName":"instanceStatusSet","type":"list","member":{"locationName":"item","type":"structure","members":{"AvailabilityZone":{"locationName":"availabilityZone"},"OutpostArn":{"locationName":"outpostArn"},"Events":{"locationName":"eventsSet","type":"list","member":{"shape":"Syq","locationName":"item"}},"InstanceId":{"locationName":"instanceId"},"InstanceState":{"shape":"Syt","locationName":"instanceState"},"InstanceStatus":{"shape":"Syv","locationName":"instanceStatus"},"SystemStatus":{"shape":"Syv","locationName":"systemStatus"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeInstanceTypeOfferings":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"LocationType":{},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"InstanceTypeOfferings":{"locationName":"instanceTypeOfferingSet","type":"list","member":{"locationName":"item","type":"structure","members":{"InstanceType":{"locationName":"instanceType"},"LocationType":{"locationName":"locationType"},"Location":{"locationName":"location"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeInstanceTypes":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"InstanceTypes":{"locationName":"InstanceType","type":"list","member":{}},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"InstanceTypes":{"locationName":"instanceTypeSet","type":"list","member":{"locationName":"item","type":"structure","members":{"InstanceType":{"locationName":"instanceType"},"CurrentGeneration":{"locationName":"currentGeneration","type":"boolean"},"FreeTierEligible":{"locationName":"freeTierEligible","type":"boolean"},"SupportedUsageClasses":{"locationName":"supportedUsageClasses","type":"list","member":{"locationName":"item"}},"SupportedRootDeviceTypes":{"locationName":"supportedRootDeviceTypes","type":"list","member":{"locationName":"item"}},"SupportedVirtualizationTypes":{"locationName":"supportedVirtualizationTypes","type":"list","member":{"locationName":"item"}},"BareMetal":{"locationName":"bareMetal","type":"boolean"},"Hypervisor":{"locationName":"hypervisor"},"ProcessorInfo":{"locationName":"processorInfo","type":"structure","members":{"SupportedArchitectures":{"locationName":"supportedArchitectures","type":"list","member":{"locationName":"item"}},"SustainedClockSpeedInGhz":{"locationName":"sustainedClockSpeedInGhz","type":"double"}}},"VCpuInfo":{"locationName":"vCpuInfo","type":"structure","members":{"DefaultVCpus":{"locationName":"defaultVCpus","type":"integer"},"DefaultCores":{"locationName":"defaultCores","type":"integer"},"DefaultThreadsPerCore":{"locationName":"defaultThreadsPerCore","type":"integer"},"ValidCores":{"locationName":"validCores","type":"list","member":{"locationName":"item","type":"integer"}},"ValidThreadsPerCore":{"locationName":"validThreadsPerCore","type":"list","member":{"locationName":"item","type":"integer"}}}},"MemoryInfo":{"locationName":"memoryInfo","type":"structure","members":{"SizeInMiB":{"locationName":"sizeInMiB","type":"long"}}},"InstanceStorageSupported":{"locationName":"instanceStorageSupported","type":"boolean"},"InstanceStorageInfo":{"locationName":"instanceStorageInfo","type":"structure","members":{"TotalSizeInGB":{"locationName":"totalSizeInGB","type":"long"},"Disks":{"locationName":"disks","type":"list","member":{"locationName":"item","type":"structure","members":{"SizeInGB":{"locationName":"sizeInGB","type":"long"},"Count":{"locationName":"count","type":"integer"},"Type":{"locationName":"type"}}}},"NvmeSupport":{"locationName":"nvmeSupport"}}},"EbsInfo":{"locationName":"ebsInfo","type":"structure","members":{"EbsOptimizedSupport":{"locationName":"ebsOptimizedSupport"},"EncryptionSupport":{"locationName":"encryptionSupport"},"EbsOptimizedInfo":{"locationName":"ebsOptimizedInfo","type":"structure","members":{"BaselineBandwidthInMbps":{"locationName":"baselineBandwidthInMbps","type":"integer"},"BaselineThroughputInMBps":{"locationName":"baselineThroughputInMBps","type":"double"},"BaselineIops":{"locationName":"baselineIops","type":"integer"},"MaximumBandwidthInMbps":{"locationName":"maximumBandwidthInMbps","type":"integer"},"MaximumThroughputInMBps":{"locationName":"maximumThroughputInMBps","type":"double"},"MaximumIops":{"locationName":"maximumIops","type":"integer"}}},"NvmeSupport":{"locationName":"nvmeSupport"}}},"NetworkInfo":{"locationName":"networkInfo","type":"structure","members":{"NetworkPerformance":{"locationName":"networkPerformance"},"MaximumNetworkInterfaces":{"locationName":"maximumNetworkInterfaces","type":"integer"},"MaximumNetworkCards":{"locationName":"maximumNetworkCards","type":"integer"},"DefaultNetworkCardIndex":{"locationName":"defaultNetworkCardIndex","type":"integer"},"NetworkCards":{"locationName":"networkCards","type":"list","member":{"locationName":"item","type":"structure","members":{"NetworkCardIndex":{"locationName":"networkCardIndex","type":"integer"},"NetworkPerformance":{"locationName":"networkPerformance"},"MaximumNetworkInterfaces":{"locationName":"maximumNetworkInterfaces","type":"integer"}}}},"Ipv4AddressesPerInterface":{"locationName":"ipv4AddressesPerInterface","type":"integer"},"Ipv6AddressesPerInterface":{"locationName":"ipv6AddressesPerInterface","type":"integer"},"Ipv6Supported":{"locationName":"ipv6Supported","type":"boolean"},"EnaSupport":{"locationName":"enaSupport"},"EfaSupported":{"locationName":"efaSupported","type":"boolean"},"EfaInfo":{"locationName":"efaInfo","type":"structure","members":{"MaximumEfaInterfaces":{"locationName":"maximumEfaInterfaces","type":"integer"}}}}},"GpuInfo":{"locationName":"gpuInfo","type":"structure","members":{"Gpus":{"locationName":"gpus","type":"list","member":{"locationName":"item","type":"structure","members":{"Name":{"locationName":"name"},"Manufacturer":{"locationName":"manufacturer"},"Count":{"locationName":"count","type":"integer"},"MemoryInfo":{"locationName":"memoryInfo","type":"structure","members":{"SizeInMiB":{"locationName":"sizeInMiB","type":"integer"}}}}}},"TotalGpuMemoryInMiB":{"locationName":"totalGpuMemoryInMiB","type":"integer"}}},"FpgaInfo":{"locationName":"fpgaInfo","type":"structure","members":{"Fpgas":{"locationName":"fpgas","type":"list","member":{"locationName":"item","type":"structure","members":{"Name":{"locationName":"name"},"Manufacturer":{"locationName":"manufacturer"},"Count":{"locationName":"count","type":"integer"},"MemoryInfo":{"locationName":"memoryInfo","type":"structure","members":{"SizeInMiB":{"locationName":"sizeInMiB","type":"integer"}}}}}},"TotalFpgaMemoryInMiB":{"locationName":"totalFpgaMemoryInMiB","type":"integer"}}},"PlacementGroupInfo":{"locationName":"placementGroupInfo","type":"structure","members":{"SupportedStrategies":{"locationName":"supportedStrategies","type":"list","member":{"locationName":"item"}}}},"InferenceAcceleratorInfo":{"locationName":"inferenceAcceleratorInfo","type":"structure","members":{"Accelerators":{"locationName":"item","type":"list","member":{"type":"structure","members":{"Count":{"locationName":"count","type":"integer"},"Name":{"locationName":"name"},"Manufacturer":{"locationName":"manufacturer"}}}}}},"HibernationSupported":{"locationName":"hibernationSupported","type":"boolean"},"BurstablePerformanceSupported":{"locationName":"burstablePerformanceSupported","type":"boolean"},"DedicatedHostsSupported":{"locationName":"dedicatedHostsSupported","type":"boolean"},"AutoRecoverySupported":{"locationName":"autoRecoverySupported","type":"boolean"},"SupportedBootModes":{"locationName":"supportedBootModes","type":"list","member":{"locationName":"item"}}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeInstances":{"input":{"type":"structure","members":{"Filters":{"shape":"Sq4","locationName":"Filter"},"InstanceIds":{"shape":"Srh","locationName":"InstanceId"},"DryRun":{"locationName":"dryRun","type":"boolean"},"MaxResults":{"locationName":"maxResults","type":"integer"},"NextToken":{"locationName":"nextToken"}}},"output":{"type":"structure","members":{"Reservations":{"locationName":"reservationSet","type":"list","member":{"shape":"S11x","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeInternetGateways":{"input":{"type":"structure","members":{"Filters":{"shape":"Sq4","locationName":"Filter"},"DryRun":{"locationName":"dryRun","type":"boolean"},"InternetGatewayIds":{"locationName":"internetGatewayId","type":"list","member":{"locationName":"item"}},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"InternetGateways":{"locationName":"internetGatewaySet","type":"list","member":{"shape":"Saz","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeIpv6Pools":{"input":{"type":"structure","members":{"PoolIds":{"locationName":"PoolId","type":"list","member":{"locationName":"item"}},"NextToken":{},"MaxResults":{"type":"integer"},"DryRun":{"type":"boolean"},"Filters":{"shape":"Sq4","locationName":"Filter"}}},"output":{"type":"structure","members":{"Ipv6Pools":{"locationName":"ipv6PoolSet","type":"list","member":{"locationName":"item","type":"structure","members":{"PoolId":{"locationName":"poolId"},"Description":{"locationName":"description"},"PoolCidrBlocks":{"locationName":"poolCidrBlockSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Cidr":{"locationName":"poolCidrBlock"}}}},"Tags":{"shape":"Ss","locationName":"tagSet"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeKeyPairs":{"input":{"type":"structure","members":{"Filters":{"shape":"Sq4","locationName":"Filter"},"KeyNames":{"locationName":"KeyName","type":"list","member":{"locationName":"KeyName"}},"KeyPairIds":{"locationName":"KeyPairId","type":"list","member":{"locationName":"KeyPairId"}},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"KeyPairs":{"locationName":"keySet","type":"list","member":{"locationName":"item","type":"structure","members":{"KeyPairId":{"locationName":"keyPairId"},"KeyFingerprint":{"locationName":"keyFingerprint"},"KeyName":{"locationName":"keyName"},"Tags":{"shape":"Ss","locationName":"tagSet"}}}}}}},"DescribeLaunchTemplateVersions":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"LaunchTemplateId":{},"LaunchTemplateName":{},"Versions":{"shape":"Smy","locationName":"LaunchTemplateVersion"},"MinVersion":{},"MaxVersion":{},"NextToken":{},"MaxResults":{"type":"integer"},"Filters":{"shape":"Sq4","locationName":"Filter"}}},"output":{"type":"structure","members":{"LaunchTemplateVersions":{"locationName":"launchTemplateVersionSet","type":"list","member":{"shape":"Scq","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeLaunchTemplates":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"LaunchTemplateIds":{"locationName":"LaunchTemplateId","type":"list","member":{"locationName":"item"}},"LaunchTemplateNames":{"locationName":"LaunchTemplateName","type":"list","member":{"locationName":"item"}},"Filters":{"shape":"Sq4","locationName":"Filter"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"LaunchTemplates":{"locationName":"launchTemplates","type":"list","member":{"shape":"Sck","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations":{"input":{"type":"structure","members":{"LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds":{"locationName":"LocalGatewayRouteTableVirtualInterfaceGroupAssociationId","type":"list","member":{"locationName":"item"}},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"LocalGatewayRouteTableVirtualInterfaceGroupAssociations":{"locationName":"localGatewayRouteTableVirtualInterfaceGroupAssociationSet","type":"list","member":{"locationName":"item","type":"structure","members":{"LocalGatewayRouteTableVirtualInterfaceGroupAssociationId":{"locationName":"localGatewayRouteTableVirtualInterfaceGroupAssociationId"},"LocalGatewayVirtualInterfaceGroupId":{"locationName":"localGatewayVirtualInterfaceGroupId"},"LocalGatewayId":{"locationName":"localGatewayId"},"LocalGatewayRouteTableId":{"locationName":"localGatewayRouteTableId"},"LocalGatewayRouteTableArn":{"locationName":"localGatewayRouteTableArn"},"OwnerId":{"locationName":"ownerId"},"State":{"locationName":"state"},"Tags":{"shape":"Ss","locationName":"tagSet"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeLocalGatewayRouteTableVpcAssociations":{"input":{"type":"structure","members":{"LocalGatewayRouteTableVpcAssociationIds":{"locationName":"LocalGatewayRouteTableVpcAssociationId","type":"list","member":{"locationName":"item"}},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"LocalGatewayRouteTableVpcAssociations":{"locationName":"localGatewayRouteTableVpcAssociationSet","type":"list","member":{"shape":"Sdx","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeLocalGatewayRouteTables":{"input":{"type":"structure","members":{"LocalGatewayRouteTableIds":{"locationName":"LocalGatewayRouteTableId","type":"list","member":{"locationName":"item"}},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"LocalGatewayRouteTables":{"locationName":"localGatewayRouteTableSet","type":"list","member":{"locationName":"item","type":"structure","members":{"LocalGatewayRouteTableId":{"locationName":"localGatewayRouteTableId"},"LocalGatewayRouteTableArn":{"locationName":"localGatewayRouteTableArn"},"LocalGatewayId":{"locationName":"localGatewayId"},"OutpostArn":{"locationName":"outpostArn"},"OwnerId":{"locationName":"ownerId"},"State":{"locationName":"state"},"Tags":{"shape":"Ss","locationName":"tagSet"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeLocalGatewayVirtualInterfaceGroups":{"input":{"type":"structure","members":{"LocalGatewayVirtualInterfaceGroupIds":{"locationName":"LocalGatewayVirtualInterfaceGroupId","type":"list","member":{"locationName":"item"}},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"LocalGatewayVirtualInterfaceGroups":{"locationName":"localGatewayVirtualInterfaceGroupSet","type":"list","member":{"locationName":"item","type":"structure","members":{"LocalGatewayVirtualInterfaceGroupId":{"locationName":"localGatewayVirtualInterfaceGroupId"},"LocalGatewayVirtualInterfaceIds":{"shape":"S143","locationName":"localGatewayVirtualInterfaceIdSet"},"LocalGatewayId":{"locationName":"localGatewayId"},"OwnerId":{"locationName":"ownerId"},"Tags":{"shape":"Ss","locationName":"tagSet"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeLocalGatewayVirtualInterfaces":{"input":{"type":"structure","members":{"LocalGatewayVirtualInterfaceIds":{"shape":"S143","locationName":"LocalGatewayVirtualInterfaceId"},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"LocalGatewayVirtualInterfaces":{"locationName":"localGatewayVirtualInterfaceSet","type":"list","member":{"locationName":"item","type":"structure","members":{"LocalGatewayVirtualInterfaceId":{"locationName":"localGatewayVirtualInterfaceId"},"LocalGatewayId":{"locationName":"localGatewayId"},"Vlan":{"locationName":"vlan","type":"integer"},"LocalAddress":{"locationName":"localAddress"},"PeerAddress":{"locationName":"peerAddress"},"LocalBgpAsn":{"locationName":"localBgpAsn","type":"integer"},"PeerBgpAsn":{"locationName":"peerBgpAsn","type":"integer"},"OwnerId":{"locationName":"ownerId"},"Tags":{"shape":"Ss","locationName":"tagSet"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeLocalGateways":{"input":{"type":"structure","members":{"LocalGatewayIds":{"locationName":"LocalGatewayId","type":"list","member":{"locationName":"item"}},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"LocalGateways":{"locationName":"localGatewaySet","type":"list","member":{"locationName":"item","type":"structure","members":{"LocalGatewayId":{"locationName":"localGatewayId"},"OutpostArn":{"locationName":"outpostArn"},"OwnerId":{"locationName":"ownerId"},"State":{"locationName":"state"},"Tags":{"shape":"Ss","locationName":"tagSet"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeManagedPrefixLists":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"PrefixListIds":{"shape":"Se","locationName":"PrefixListId"}}},"output":{"type":"structure","members":{"NextToken":{"locationName":"nextToken"},"PrefixLists":{"locationName":"prefixListSet","type":"list","member":{"shape":"Se3","locationName":"item"}}}}},"DescribeMovingAddresses":{"input":{"type":"structure","members":{"Filters":{"shape":"Sq4","locationName":"filter"},"DryRun":{"locationName":"dryRun","type":"boolean"},"MaxResults":{"locationName":"maxResults","type":"integer"},"NextToken":{"locationName":"nextToken"},"PublicIps":{"shape":"Se","locationName":"publicIp"}}},"output":{"type":"structure","members":{"MovingAddressStatuses":{"locationName":"movingAddressStatusSet","type":"list","member":{"locationName":"item","type":"structure","members":{"MoveStatus":{"locationName":"moveStatus"},"PublicIp":{"locationName":"publicIp"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeNatGateways":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"Filter":{"shape":"Sq4"},"MaxResults":{"type":"integer"},"NatGatewayIds":{"locationName":"NatGatewayId","type":"list","member":{"locationName":"item"}},"NextToken":{}}},"output":{"type":"structure","members":{"NatGateways":{"locationName":"natGatewaySet","type":"list","member":{"shape":"Se8","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeNetworkAcls":{"input":{"type":"structure","members":{"Filters":{"shape":"Sq4","locationName":"Filter"},"DryRun":{"locationName":"dryRun","type":"boolean"},"NetworkAclIds":{"locationName":"NetworkAclId","type":"list","member":{"locationName":"item"}},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"NetworkAcls":{"locationName":"networkAclSet","type":"list","member":{"shape":"Sef","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeNetworkInsightsAnalyses":{"input":{"type":"structure","members":{"NetworkInsightsAnalysisIds":{"locationName":"NetworkInsightsAnalysisId","type":"list","member":{"locationName":"item"}},"NetworkInsightsPathId":{},"AnalysisStartTime":{"type":"timestamp"},"AnalysisEndTime":{"type":"timestamp"},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"DryRun":{"type":"boolean"},"NextToken":{}}},"output":{"type":"structure","members":{"NetworkInsightsAnalyses":{"locationName":"networkInsightsAnalysisSet","type":"list","member":{"shape":"S153","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeNetworkInsightsPaths":{"input":{"type":"structure","members":{"NetworkInsightsPathIds":{"locationName":"NetworkInsightsPathId","type":"list","member":{"locationName":"item"}},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"DryRun":{"type":"boolean"},"NextToken":{}}},"output":{"type":"structure","members":{"NetworkInsightsPaths":{"locationName":"networkInsightsPathSet","type":"list","member":{"shape":"Seu","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeNetworkInterfaceAttribute":{"input":{"type":"structure","required":["NetworkInterfaceId"],"members":{"Attribute":{"locationName":"attribute"},"DryRun":{"locationName":"dryRun","type":"boolean"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"}}},"output":{"type":"structure","members":{"Attachment":{"shape":"Sf1","locationName":"attachment"},"Description":{"shape":"S8v","locationName":"description"},"Groups":{"shape":"Sf2","locationName":"groupSet"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"SourceDestCheck":{"shape":"Sy7","locationName":"sourceDestCheck"}}}},"DescribeNetworkInterfacePermissions":{"input":{"type":"structure","members":{"NetworkInterfacePermissionIds":{"locationName":"NetworkInterfacePermissionId","type":"list","member":{}},"Filters":{"shape":"Sq4","locationName":"Filter"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"NetworkInterfacePermissions":{"locationName":"networkInterfacePermissions","type":"list","member":{"shape":"Sff","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeNetworkInterfaces":{"input":{"type":"structure","members":{"Filters":{"shape":"Sq4","locationName":"filter"},"DryRun":{"locationName":"dryRun","type":"boolean"},"NetworkInterfaceIds":{"locationName":"NetworkInterfaceId","type":"list","member":{"locationName":"item"}},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"NetworkInterfaces":{"locationName":"networkInterfaceSet","type":"list","member":{"shape":"Sez","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribePlacementGroups":{"input":{"type":"structure","members":{"Filters":{"shape":"Sq4","locationName":"Filter"},"DryRun":{"locationName":"dryRun","type":"boolean"},"GroupNames":{"locationName":"groupName","type":"list","member":{}},"GroupIds":{"locationName":"GroupId","type":"list","member":{"locationName":"GroupId"}}}},"output":{"type":"structure","members":{"PlacementGroups":{"locationName":"placementGroupSet","type":"list","member":{"shape":"Sfl","locationName":"item"}}}}},"DescribePrefixLists":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"PrefixListIds":{"locationName":"PrefixListId","type":"list","member":{"locationName":"item"}}}},"output":{"type":"structure","members":{"NextToken":{"locationName":"nextToken"},"PrefixLists":{"locationName":"prefixListSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Cidrs":{"shape":"Se","locationName":"cidrSet"},"PrefixListId":{"locationName":"prefixListId"},"PrefixListName":{"locationName":"prefixListName"}}}}}}},"DescribePrincipalIdFormat":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"Resources":{"locationName":"Resource","type":"list","member":{"locationName":"item"}},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Principals":{"locationName":"principalSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Arn":{"locationName":"arn"},"Statuses":{"shape":"Sqm","locationName":"statusSet"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribePublicIpv4Pools":{"input":{"type":"structure","members":{"PoolIds":{"locationName":"PoolId","type":"list","member":{"locationName":"item"}},"NextToken":{},"MaxResults":{"type":"integer"},"Filters":{"shape":"Sq4","locationName":"Filter"}}},"output":{"type":"structure","members":{"PublicIpv4Pools":{"locationName":"publicIpv4PoolSet","type":"list","member":{"locationName":"item","type":"structure","members":{"PoolId":{"locationName":"poolId"},"Description":{"locationName":"description"},"PoolAddressRanges":{"locationName":"poolAddressRangeSet","type":"list","member":{"locationName":"item","type":"structure","members":{"FirstAddress":{"locationName":"firstAddress"},"LastAddress":{"locationName":"lastAddress"},"AddressCount":{"locationName":"addressCount","type":"integer"},"AvailableAddressCount":{"locationName":"availableAddressCount","type":"integer"}}}},"TotalAddressCount":{"locationName":"totalAddressCount","type":"integer"},"TotalAvailableAddressCount":{"locationName":"totalAvailableAddressCount","type":"integer"},"NetworkBorderGroup":{"locationName":"networkBorderGroup"},"Tags":{"shape":"Ss","locationName":"tagSet"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeRegions":{"input":{"type":"structure","members":{"Filters":{"shape":"Sq4","locationName":"Filter"},"RegionNames":{"locationName":"RegionName","type":"list","member":{"locationName":"RegionName"}},"DryRun":{"locationName":"dryRun","type":"boolean"},"AllRegions":{"type":"boolean"}}},"output":{"type":"structure","members":{"Regions":{"locationName":"regionInfo","type":"list","member":{"locationName":"item","type":"structure","members":{"Endpoint":{"locationName":"regionEndpoint"},"RegionName":{"locationName":"regionName"},"OptInStatus":{"locationName":"optInStatus"}}}}}}},"DescribeReplaceRootVolumeTasks":{"input":{"type":"structure","members":{"ReplaceRootVolumeTaskIds":{"locationName":"ReplaceRootVolumeTaskId","type":"list","member":{"locationName":"ReplaceRootVolumeTaskId"}},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"ReplaceRootVolumeTasks":{"locationName":"replaceRootVolumeTaskSet","type":"list","member":{"shape":"Sfp","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeReservedInstances":{"input":{"type":"structure","members":{"Filters":{"shape":"Sq4","locationName":"Filter"},"OfferingClass":{},"ReservedInstancesIds":{"shape":"S175","locationName":"ReservedInstancesId"},"DryRun":{"locationName":"dryRun","type":"boolean"},"OfferingType":{"locationName":"offeringType"}}},"output":{"type":"structure","members":{"ReservedInstances":{"locationName":"reservedInstancesSet","type":"list","member":{"locationName":"item","type":"structure","members":{"AvailabilityZone":{"locationName":"availabilityZone"},"Duration":{"locationName":"duration","type":"long"},"End":{"locationName":"end","type":"timestamp"},"FixedPrice":{"locationName":"fixedPrice","type":"float"},"InstanceCount":{"locationName":"instanceCount","type":"integer"},"InstanceType":{"locationName":"instanceType"},"ProductDescription":{"locationName":"productDescription"},"ReservedInstancesId":{"locationName":"reservedInstancesId"},"Start":{"locationName":"start","type":"timestamp"},"State":{"locationName":"state"},"UsagePrice":{"locationName":"usagePrice","type":"float"},"CurrencyCode":{"locationName":"currencyCode"},"InstanceTenancy":{"locationName":"instanceTenancy"},"OfferingClass":{"locationName":"offeringClass"},"OfferingType":{"locationName":"offeringType"},"RecurringCharges":{"shape":"S17d","locationName":"recurringCharges"},"Scope":{"locationName":"scope"},"Tags":{"shape":"Ss","locationName":"tagSet"}}}}}}},"DescribeReservedInstancesListings":{"input":{"type":"structure","members":{"Filters":{"shape":"Sq4","locationName":"Filter"},"ReservedInstancesId":{"locationName":"reservedInstancesId"},"ReservedInstancesListingId":{"locationName":"reservedInstancesListingId"}}},"output":{"type":"structure","members":{"ReservedInstancesListings":{"shape":"S67","locationName":"reservedInstancesListingsSet"}}}},"DescribeReservedInstancesModifications":{"input":{"type":"structure","members":{"Filters":{"shape":"Sq4","locationName":"Filter"},"ReservedInstancesModificationIds":{"locationName":"ReservedInstancesModificationId","type":"list","member":{"locationName":"ReservedInstancesModificationId"}},"NextToken":{"locationName":"nextToken"}}},"output":{"type":"structure","members":{"NextToken":{"locationName":"nextToken"},"ReservedInstancesModifications":{"locationName":"reservedInstancesModificationsSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ClientToken":{"locationName":"clientToken"},"CreateDate":{"locationName":"createDate","type":"timestamp"},"EffectiveDate":{"locationName":"effectiveDate","type":"timestamp"},"ModificationResults":{"locationName":"modificationResultSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ReservedInstancesId":{"locationName":"reservedInstancesId"},"TargetConfiguration":{"shape":"S17r","locationName":"targetConfiguration"}}}},"ReservedInstancesIds":{"locationName":"reservedInstancesSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ReservedInstancesId":{"locationName":"reservedInstancesId"}}}},"ReservedInstancesModificationId":{"locationName":"reservedInstancesModificationId"},"Status":{"locationName":"status"},"StatusMessage":{"locationName":"statusMessage"},"UpdateDate":{"locationName":"updateDate","type":"timestamp"}}}}}}},"DescribeReservedInstancesOfferings":{"input":{"type":"structure","members":{"AvailabilityZone":{},"Filters":{"shape":"Sq4","locationName":"Filter"},"IncludeMarketplace":{"type":"boolean"},"InstanceType":{},"MaxDuration":{"type":"long"},"MaxInstanceCount":{"type":"integer"},"MinDuration":{"type":"long"},"OfferingClass":{},"ProductDescription":{},"ReservedInstancesOfferingIds":{"locationName":"ReservedInstancesOfferingId","type":"list","member":{}},"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceTenancy":{"locationName":"instanceTenancy"},"MaxResults":{"locationName":"maxResults","type":"integer"},"NextToken":{"locationName":"nextToken"},"OfferingType":{"locationName":"offeringType"}}},"output":{"type":"structure","members":{"ReservedInstancesOfferings":{"locationName":"reservedInstancesOfferingsSet","type":"list","member":{"locationName":"item","type":"structure","members":{"AvailabilityZone":{"locationName":"availabilityZone"},"Duration":{"locationName":"duration","type":"long"},"FixedPrice":{"locationName":"fixedPrice","type":"float"},"InstanceType":{"locationName":"instanceType"},"ProductDescription":{"locationName":"productDescription"},"ReservedInstancesOfferingId":{"locationName":"reservedInstancesOfferingId"},"UsagePrice":{"locationName":"usagePrice","type":"float"},"CurrencyCode":{"locationName":"currencyCode"},"InstanceTenancy":{"locationName":"instanceTenancy"},"Marketplace":{"locationName":"marketplace","type":"boolean"},"OfferingClass":{"locationName":"offeringClass"},"OfferingType":{"locationName":"offeringType"},"PricingDetails":{"locationName":"pricingDetailsSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Count":{"locationName":"count","type":"integer"},"Price":{"locationName":"price","type":"double"}}}},"RecurringCharges":{"shape":"S17d","locationName":"recurringCharges"},"Scope":{"locationName":"scope"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeRouteTables":{"input":{"type":"structure","members":{"Filters":{"shape":"Sq4","locationName":"Filter"},"DryRun":{"locationName":"dryRun","type":"boolean"},"RouteTableIds":{"locationName":"RouteTableId","type":"list","member":{"locationName":"item"}},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"RouteTables":{"locationName":"routeTableSet","type":"list","member":{"shape":"Sg5","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeScheduledInstanceAvailability":{"input":{"type":"structure","required":["FirstSlotStartTimeRange","Recurrence"],"members":{"DryRun":{"type":"boolean"},"Filters":{"shape":"Sq4","locationName":"Filter"},"FirstSlotStartTimeRange":{"type":"structure","required":["EarliestTime","LatestTime"],"members":{"EarliestTime":{"type":"timestamp"},"LatestTime":{"type":"timestamp"}}},"MaxResults":{"type":"integer"},"MaxSlotDurationInHours":{"type":"integer"},"MinSlotDurationInHours":{"type":"integer"},"NextToken":{},"Recurrence":{"type":"structure","members":{"Frequency":{},"Interval":{"type":"integer"},"OccurrenceDays":{"locationName":"OccurrenceDay","type":"list","member":{"locationName":"OccurenceDay","type":"integer"}},"OccurrenceRelativeToEnd":{"type":"boolean"},"OccurrenceUnit":{}}}}},"output":{"type":"structure","members":{"NextToken":{"locationName":"nextToken"},"ScheduledInstanceAvailabilitySet":{"locationName":"scheduledInstanceAvailabilitySet","type":"list","member":{"locationName":"item","type":"structure","members":{"AvailabilityZone":{"locationName":"availabilityZone"},"AvailableInstanceCount":{"locationName":"availableInstanceCount","type":"integer"},"FirstSlotStartTime":{"locationName":"firstSlotStartTime","type":"timestamp"},"HourlyPrice":{"locationName":"hourlyPrice"},"InstanceType":{"locationName":"instanceType"},"MaxTermDurationInDays":{"locationName":"maxTermDurationInDays","type":"integer"},"MinTermDurationInDays":{"locationName":"minTermDurationInDays","type":"integer"},"NetworkPlatform":{"locationName":"networkPlatform"},"Platform":{"locationName":"platform"},"PurchaseToken":{"locationName":"purchaseToken"},"Recurrence":{"shape":"S18e","locationName":"recurrence"},"SlotDurationInHours":{"locationName":"slotDurationInHours","type":"integer"},"TotalScheduledInstanceHours":{"locationName":"totalScheduledInstanceHours","type":"integer"}}}}}}},"DescribeScheduledInstances":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"ScheduledInstanceIds":{"locationName":"ScheduledInstanceId","type":"list","member":{"locationName":"ScheduledInstanceId"}},"SlotStartTimeRange":{"type":"structure","members":{"EarliestTime":{"type":"timestamp"},"LatestTime":{"type":"timestamp"}}}}},"output":{"type":"structure","members":{"NextToken":{"locationName":"nextToken"},"ScheduledInstanceSet":{"locationName":"scheduledInstanceSet","type":"list","member":{"shape":"S18m","locationName":"item"}}}}},"DescribeSecurityGroupReferences":{"input":{"type":"structure","required":["GroupId"],"members":{"DryRun":{"type":"boolean"},"GroupId":{"type":"list","member":{"locationName":"item"}}}},"output":{"type":"structure","members":{"SecurityGroupReferenceSet":{"locationName":"securityGroupReferenceSet","type":"list","member":{"locationName":"item","type":"structure","members":{"GroupId":{"locationName":"groupId"},"ReferencingVpcId":{"locationName":"referencingVpcId"},"VpcPeeringConnectionId":{"locationName":"vpcPeeringConnectionId"}}}}}}},"DescribeSecurityGroupRules":{"input":{"type":"structure","members":{"Filters":{"shape":"Sq4","locationName":"Filter"},"SecurityGroupRuleIds":{"shape":"S18t","locationName":"SecurityGroupRuleId"},"DryRun":{"type":"boolean"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"SecurityGroupRules":{"shape":"S5b","locationName":"securityGroupRuleSet"},"NextToken":{"locationName":"nextToken"}}}},"DescribeSecurityGroups":{"input":{"type":"structure","members":{"Filters":{"shape":"Sq4","locationName":"Filter"},"GroupIds":{"shape":"S4g","locationName":"GroupId"},"GroupNames":{"shape":"S18x","locationName":"GroupName"},"DryRun":{"locationName":"dryRun","type":"boolean"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"SecurityGroups":{"locationName":"securityGroupInfo","type":"list","member":{"locationName":"item","type":"structure","members":{"Description":{"locationName":"groupDescription"},"GroupName":{"locationName":"groupName"},"IpPermissions":{"shape":"S50","locationName":"ipPermissions"},"OwnerId":{"locationName":"ownerId"},"GroupId":{"locationName":"groupId"},"IpPermissionsEgress":{"shape":"S50","locationName":"ipPermissionsEgress"},"Tags":{"shape":"Ss","locationName":"tagSet"},"VpcId":{"locationName":"vpcId"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeSnapshotAttribute":{"input":{"type":"structure","required":["Attribute","SnapshotId"],"members":{"Attribute":{},"SnapshotId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"CreateVolumePermissions":{"shape":"S195","locationName":"createVolumePermission"},"ProductCodes":{"shape":"Svk","locationName":"productCodes"},"SnapshotId":{"locationName":"snapshotId"}}}},"DescribeSnapshots":{"input":{"type":"structure","members":{"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"OwnerIds":{"shape":"Svp","locationName":"Owner"},"RestorableByUserIds":{"locationName":"RestorableBy","type":"list","member":{}},"SnapshotIds":{"shape":"S199","locationName":"SnapshotId"},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"Snapshots":{"locationName":"snapshotSet","type":"list","member":{"shape":"Sgh","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeSpotDatafeedSubscription":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"SpotDatafeedSubscription":{"shape":"Sgr","locationName":"spotDatafeedSubscription"}}}},"DescribeSpotFleetInstances":{"input":{"type":"structure","required":["SpotFleetRequestId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"MaxResults":{"locationName":"maxResults","type":"integer"},"NextToken":{"locationName":"nextToken"},"SpotFleetRequestId":{"locationName":"spotFleetRequestId"}}},"output":{"type":"structure","members":{"ActiveInstances":{"shape":"Suo","locationName":"activeInstanceSet"},"NextToken":{"locationName":"nextToken"},"SpotFleetRequestId":{"locationName":"spotFleetRequestId"}}}},"DescribeSpotFleetRequestHistory":{"input":{"type":"structure","required":["SpotFleetRequestId","StartTime"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"EventType":{"locationName":"eventType"},"MaxResults":{"locationName":"maxResults","type":"integer"},"NextToken":{"locationName":"nextToken"},"SpotFleetRequestId":{"locationName":"spotFleetRequestId"},"StartTime":{"locationName":"startTime","type":"timestamp"}}},"output":{"type":"structure","members":{"HistoryRecords":{"locationName":"historyRecordSet","type":"list","member":{"locationName":"item","type":"structure","members":{"EventInformation":{"shape":"Sul","locationName":"eventInformation"},"EventType":{"locationName":"eventType"},"Timestamp":{"locationName":"timestamp","type":"timestamp"}}}},"LastEvaluatedTime":{"locationName":"lastEvaluatedTime","type":"timestamp"},"NextToken":{"locationName":"nextToken"},"SpotFleetRequestId":{"locationName":"spotFleetRequestId"},"StartTime":{"locationName":"startTime","type":"timestamp"}}}},"DescribeSpotFleetRequests":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"MaxResults":{"locationName":"maxResults","type":"integer"},"NextToken":{"locationName":"nextToken"},"SpotFleetRequestIds":{"shape":"S6j","locationName":"spotFleetRequestId"}}},"output":{"type":"structure","members":{"NextToken":{"locationName":"nextToken"},"SpotFleetRequestConfigs":{"locationName":"spotFleetRequestConfigSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ActivityStatus":{"locationName":"activityStatus"},"CreateTime":{"locationName":"createTime","type":"timestamp"},"SpotFleetRequestConfig":{"shape":"S19s","locationName":"spotFleetRequestConfig"},"SpotFleetRequestId":{"locationName":"spotFleetRequestId"},"SpotFleetRequestState":{"locationName":"spotFleetRequestState"},"Tags":{"shape":"Ss","locationName":"tagSet"}}}}}}},"DescribeSpotInstanceRequests":{"input":{"type":"structure","members":{"Filters":{"shape":"Sq4","locationName":"Filter"},"DryRun":{"locationName":"dryRun","type":"boolean"},"SpotInstanceRequestIds":{"shape":"S6u","locationName":"SpotInstanceRequestId"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"SpotInstanceRequests":{"shape":"S1ak","locationName":"spotInstanceRequestSet"},"NextToken":{"locationName":"nextToken"}}}},"DescribeSpotPriceHistory":{"input":{"type":"structure","members":{"Filters":{"shape":"Sq4","locationName":"Filter"},"AvailabilityZone":{"locationName":"availabilityZone"},"DryRun":{"locationName":"dryRun","type":"boolean"},"EndTime":{"locationName":"endTime","type":"timestamp"},"InstanceTypes":{"locationName":"InstanceType","type":"list","member":{}},"MaxResults":{"locationName":"maxResults","type":"integer"},"NextToken":{"locationName":"nextToken"},"ProductDescriptions":{"locationName":"ProductDescription","type":"list","member":{}},"StartTime":{"locationName":"startTime","type":"timestamp"}}},"output":{"type":"structure","members":{"NextToken":{"locationName":"nextToken"},"SpotPriceHistory":{"locationName":"spotPriceHistorySet","type":"list","member":{"locationName":"item","type":"structure","members":{"AvailabilityZone":{"locationName":"availabilityZone"},"InstanceType":{"locationName":"instanceType"},"ProductDescription":{"locationName":"productDescription"},"SpotPrice":{"locationName":"spotPrice"},"Timestamp":{"locationName":"timestamp","type":"timestamp"}}}}}}},"DescribeStaleSecurityGroups":{"input":{"type":"structure","required":["VpcId"],"members":{"DryRun":{"type":"boolean"},"MaxResults":{"type":"integer"},"NextToken":{},"VpcId":{}}},"output":{"type":"structure","members":{"NextToken":{"locationName":"nextToken"},"StaleSecurityGroupSet":{"locationName":"staleSecurityGroupSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Description":{"locationName":"description"},"GroupId":{"locationName":"groupId"},"GroupName":{"locationName":"groupName"},"StaleIpPermissions":{"shape":"S1b2","locationName":"staleIpPermissions"},"StaleIpPermissionsEgress":{"shape":"S1b2","locationName":"staleIpPermissionsEgress"},"VpcId":{"locationName":"vpcId"}}}}}}},"DescribeStoreImageTasks":{"input":{"type":"structure","members":{"ImageIds":{"locationName":"ImageId","type":"list","member":{"locationName":"item"}},"DryRun":{"type":"boolean"},"Filters":{"shape":"Sq4","locationName":"Filter"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"StoreImageTaskResults":{"locationName":"storeImageTaskResultSet","type":"list","member":{"locationName":"item","type":"structure","members":{"AmiId":{"locationName":"amiId"},"TaskStartTime":{"locationName":"taskStartTime","type":"timestamp"},"Bucket":{"locationName":"bucket"},"S3objectKey":{"locationName":"s3objectKey"},"ProgressPercentage":{"locationName":"progressPercentage","type":"integer"},"StoreTaskState":{"locationName":"storeTaskState"},"StoreTaskFailureReason":{"locationName":"storeTaskFailureReason"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeSubnets":{"input":{"type":"structure","members":{"Filters":{"shape":"Sq4","locationName":"Filter"},"SubnetIds":{"locationName":"SubnetId","type":"list","member":{"locationName":"SubnetId"}},"DryRun":{"locationName":"dryRun","type":"boolean"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Subnets":{"locationName":"subnetSet","type":"list","member":{"shape":"S8c","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeTags":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"locationName":"maxResults","type":"integer"},"NextToken":{"locationName":"nextToken"}}},"output":{"type":"structure","members":{"NextToken":{"locationName":"nextToken"},"Tags":{"locationName":"tagSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Key":{"locationName":"key"},"ResourceId":{"locationName":"resourceId"},"ResourceType":{"locationName":"resourceType"},"Value":{"locationName":"value"}}}}}}},"DescribeTrafficMirrorFilters":{"input":{"type":"structure","members":{"TrafficMirrorFilterIds":{"locationName":"TrafficMirrorFilterId","type":"list","member":{"locationName":"item"}},"DryRun":{"type":"boolean"},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"TrafficMirrorFilters":{"locationName":"trafficMirrorFilterSet","type":"list","member":{"shape":"Sha","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeTrafficMirrorSessions":{"input":{"type":"structure","members":{"TrafficMirrorSessionIds":{"locationName":"TrafficMirrorSessionId","type":"list","member":{"locationName":"item"}},"DryRun":{"type":"boolean"},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"TrafficMirrorSessions":{"locationName":"trafficMirrorSessionSet","type":"list","member":{"shape":"Shp","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeTrafficMirrorTargets":{"input":{"type":"structure","members":{"TrafficMirrorTargetIds":{"locationName":"TrafficMirrorTargetId","type":"list","member":{"locationName":"item"}},"DryRun":{"type":"boolean"},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"TrafficMirrorTargets":{"locationName":"trafficMirrorTargetSet","type":"list","member":{"shape":"Shs","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeTransitGatewayAttachments":{"input":{"type":"structure","members":{"TransitGatewayAttachmentIds":{"shape":"S1c0"},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TransitGatewayAttachments":{"locationName":"transitGatewayAttachments","type":"list","member":{"locationName":"item","type":"structure","members":{"TransitGatewayAttachmentId":{"locationName":"transitGatewayAttachmentId"},"TransitGatewayId":{"locationName":"transitGatewayId"},"TransitGatewayOwnerId":{"locationName":"transitGatewayOwnerId"},"ResourceOwnerId":{"locationName":"resourceOwnerId"},"ResourceType":{"locationName":"resourceType"},"ResourceId":{"locationName":"resourceId"},"State":{"locationName":"state"},"Association":{"locationName":"association","type":"structure","members":{"TransitGatewayRouteTableId":{"locationName":"transitGatewayRouteTableId"},"State":{"locationName":"state"}}},"CreationTime":{"locationName":"creationTime","type":"timestamp"},"Tags":{"shape":"Ss","locationName":"tagSet"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeTransitGatewayConnectPeers":{"input":{"type":"structure","members":{"TransitGatewayConnectPeerIds":{"type":"list","member":{"locationName":"item"}},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TransitGatewayConnectPeers":{"locationName":"transitGatewayConnectPeerSet","type":"list","member":{"shape":"Sig","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeTransitGatewayConnects":{"input":{"type":"structure","members":{"TransitGatewayAttachmentIds":{"shape":"S1c0"},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TransitGatewayConnects":{"locationName":"transitGatewayConnectSet","type":"list","member":{"shape":"Sia","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeTransitGatewayMulticastDomains":{"input":{"type":"structure","members":{"TransitGatewayMulticastDomainIds":{"type":"list","member":{"locationName":"item"}},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TransitGatewayMulticastDomains":{"locationName":"transitGatewayMulticastDomains","type":"list","member":{"shape":"Sit","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeTransitGatewayPeeringAttachments":{"input":{"type":"structure","members":{"TransitGatewayAttachmentIds":{"shape":"S1c0"},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TransitGatewayPeeringAttachments":{"locationName":"transitGatewayPeeringAttachments","type":"list","member":{"shape":"Sn","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeTransitGatewayRouteTables":{"input":{"type":"structure","members":{"TransitGatewayRouteTableIds":{"type":"list","member":{"locationName":"item"}},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TransitGatewayRouteTables":{"locationName":"transitGatewayRouteTables","type":"list","member":{"shape":"Sjd","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeTransitGatewayVpcAttachments":{"input":{"type":"structure","members":{"TransitGatewayAttachmentIds":{"shape":"S1c0"},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TransitGatewayVpcAttachments":{"locationName":"transitGatewayVpcAttachments","type":"list","member":{"shape":"Sw","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeTransitGateways":{"input":{"type":"structure","members":{"TransitGatewayIds":{"type":"list","member":{"locationName":"item"}},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TransitGateways":{"locationName":"transitGatewaySet","type":"list","member":{"shape":"Si3","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeTrunkInterfaceAssociations":{"input":{"type":"structure","members":{"AssociationIds":{"locationName":"AssociationId","type":"list","member":{"locationName":"item"}},"DryRun":{"type":"boolean"},"Filters":{"shape":"Sq4","locationName":"Filter"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"InterfaceAssociations":{"locationName":"interfaceAssociationSet","type":"list","member":{"shape":"S45","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeVolumeAttribute":{"input":{"type":"structure","required":["Attribute","VolumeId"],"members":{"Attribute":{},"VolumeId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"AutoEnableIO":{"shape":"Sy7","locationName":"autoEnableIO"},"ProductCodes":{"shape":"Svk","locationName":"productCodes"},"VolumeId":{"locationName":"volumeId"}}}},"DescribeVolumeStatus":{"input":{"type":"structure","members":{"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"VolumeIds":{"shape":"S1d4","locationName":"VolumeId"},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"NextToken":{"locationName":"nextToken"},"VolumeStatuses":{"locationName":"volumeStatusSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Actions":{"locationName":"actionsSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Code":{"locationName":"code"},"Description":{"locationName":"description"},"EventId":{"locationName":"eventId"},"EventType":{"locationName":"eventType"}}}},"AvailabilityZone":{"locationName":"availabilityZone"},"OutpostArn":{"locationName":"outpostArn"},"Events":{"locationName":"eventsSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Description":{"locationName":"description"},"EventId":{"locationName":"eventId"},"EventType":{"locationName":"eventType"},"NotAfter":{"locationName":"notAfter","type":"timestamp"},"NotBefore":{"locationName":"notBefore","type":"timestamp"},"InstanceId":{"locationName":"instanceId"}}}},"VolumeId":{"locationName":"volumeId"},"VolumeStatus":{"locationName":"volumeStatus","type":"structure","members":{"Details":{"locationName":"details","type":"list","member":{"locationName":"item","type":"structure","members":{"Name":{"locationName":"name"},"Status":{"locationName":"status"}}}},"Status":{"locationName":"status"}}},"AttachmentStatuses":{"locationName":"attachmentStatuses","type":"list","member":{"locationName":"item","type":"structure","members":{"IoPerformance":{"locationName":"ioPerformance"},"InstanceId":{"locationName":"instanceId"}}}}}}}}}},"DescribeVolumes":{"input":{"type":"structure","members":{"Filters":{"shape":"Sq4","locationName":"Filter"},"VolumeIds":{"shape":"S1d4","locationName":"VolumeId"},"DryRun":{"locationName":"dryRun","type":"boolean"},"MaxResults":{"locationName":"maxResults","type":"integer"},"NextToken":{"locationName":"nextToken"}}},"output":{"type":"structure","members":{"Volumes":{"locationName":"volumeSet","type":"list","member":{"shape":"Sjj","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeVolumesModifications":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"VolumeIds":{"shape":"S1d4","locationName":"VolumeId"},"Filters":{"shape":"Sq4","locationName":"Filter"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"VolumesModifications":{"locationName":"volumeModificationSet","type":"list","member":{"shape":"S1dp","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeVpcAttribute":{"input":{"type":"structure","required":["Attribute","VpcId"],"members":{"Attribute":{},"VpcId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"VpcId":{"locationName":"vpcId"},"EnableDnsHostnames":{"shape":"Sy7","locationName":"enableDnsHostnames"},"EnableDnsSupport":{"shape":"Sy7","locationName":"enableDnsSupport"}}}},"DescribeVpcClassicLink":{"input":{"type":"structure","members":{"Filters":{"shape":"Sq4","locationName":"Filter"},"DryRun":{"locationName":"dryRun","type":"boolean"},"VpcIds":{"shape":"S1dv","locationName":"VpcId"}}},"output":{"type":"structure","members":{"Vpcs":{"locationName":"vpcSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ClassicLinkEnabled":{"locationName":"classicLinkEnabled","type":"boolean"},"Tags":{"shape":"Ss","locationName":"tagSet"},"VpcId":{"locationName":"vpcId"}}}}}}},"DescribeVpcClassicLinkDnsSupport":{"input":{"type":"structure","members":{"MaxResults":{"locationName":"maxResults","type":"integer"},"NextToken":{"locationName":"nextToken"},"VpcIds":{"shape":"S1dv"}}},"output":{"type":"structure","members":{"NextToken":{"locationName":"nextToken"},"Vpcs":{"locationName":"vpcs","type":"list","member":{"locationName":"item","type":"structure","members":{"ClassicLinkDnsSupported":{"locationName":"classicLinkDnsSupported","type":"boolean"},"VpcId":{"locationName":"vpcId"}}}}}}},"DescribeVpcEndpointConnectionNotifications":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"ConnectionNotificationId":{},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"ConnectionNotificationSet":{"locationName":"connectionNotificationSet","type":"list","member":{"shape":"Sk3","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeVpcEndpointConnections":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"VpcEndpointConnections":{"locationName":"vpcEndpointConnectionSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ServiceId":{"locationName":"serviceId"},"VpcEndpointId":{"locationName":"vpcEndpointId"},"VpcEndpointOwner":{"locationName":"vpcEndpointOwner"},"VpcEndpointState":{"locationName":"vpcEndpointState"},"CreationTimestamp":{"locationName":"creationTimestamp","type":"timestamp"},"DnsEntries":{"shape":"Sjy","locationName":"dnsEntrySet"},"NetworkLoadBalancerArns":{"shape":"Se","locationName":"networkLoadBalancerArnSet"},"GatewayLoadBalancerArns":{"shape":"Se","locationName":"gatewayLoadBalancerArnSet"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeVpcEndpointServiceConfigurations":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"ServiceIds":{"shape":"Sp7","locationName":"ServiceId"},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"ServiceConfigurations":{"locationName":"serviceConfigurationSet","type":"list","member":{"shape":"Sk8","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeVpcEndpointServicePermissions":{"input":{"type":"structure","required":["ServiceId"],"members":{"DryRun":{"type":"boolean"},"ServiceId":{},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"AllowedPrincipals":{"locationName":"allowedPrincipals","type":"list","member":{"locationName":"item","type":"structure","members":{"PrincipalType":{"locationName":"principalType"},"Principal":{"locationName":"principal"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeVpcEndpointServices":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"ServiceNames":{"shape":"Se","locationName":"ServiceName"},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"ServiceNames":{"shape":"Se","locationName":"serviceNameSet"},"ServiceDetails":{"locationName":"serviceDetailSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ServiceName":{"locationName":"serviceName"},"ServiceId":{"locationName":"serviceId"},"ServiceType":{"shape":"Sk9","locationName":"serviceType"},"AvailabilityZones":{"shape":"Se","locationName":"availabilityZoneSet"},"Owner":{"locationName":"owner"},"BaseEndpointDnsNames":{"shape":"Se","locationName":"baseEndpointDnsNameSet"},"PrivateDnsName":{"locationName":"privateDnsName"},"PrivateDnsNames":{"locationName":"privateDnsNameSet","type":"list","member":{"locationName":"item","type":"structure","members":{"PrivateDnsName":{"locationName":"privateDnsName"}}}},"VpcEndpointPolicySupported":{"locationName":"vpcEndpointPolicySupported","type":"boolean"},"AcceptanceRequired":{"locationName":"acceptanceRequired","type":"boolean"},"ManagesVpcEndpoints":{"locationName":"managesVpcEndpoints","type":"boolean"},"Tags":{"shape":"Ss","locationName":"tagSet"},"PrivateDnsNameVerificationState":{"locationName":"privateDnsNameVerificationState"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeVpcEndpoints":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"VpcEndpointIds":{"shape":"S13","locationName":"VpcEndpointId"},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"VpcEndpoints":{"locationName":"vpcEndpointSet","type":"list","member":{"shape":"Sju","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeVpcPeeringConnections":{"input":{"type":"structure","members":{"Filters":{"shape":"Sq4","locationName":"Filter"},"DryRun":{"locationName":"dryRun","type":"boolean"},"VpcPeeringConnectionIds":{"locationName":"VpcPeeringConnectionId","type":"list","member":{"locationName":"item"}},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"VpcPeeringConnections":{"locationName":"vpcPeeringConnectionSet","type":"list","member":{"shape":"S1c","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeVpcs":{"input":{"type":"structure","members":{"Filters":{"shape":"Sq4","locationName":"Filter"},"VpcIds":{"locationName":"VpcId","type":"list","member":{"locationName":"VpcId"}},"DryRun":{"locationName":"dryRun","type":"boolean"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Vpcs":{"locationName":"vpcSet","type":"list","member":{"shape":"S8i","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeVpnConnections":{"input":{"type":"structure","members":{"Filters":{"shape":"Sq4","locationName":"Filter"},"VpnConnectionIds":{"locationName":"VpnConnectionId","type":"list","member":{"locationName":"VpnConnectionId"}},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"VpnConnections":{"locationName":"vpnConnectionSet","type":"list","member":{"shape":"Sl2","locationName":"item"}}}}},"DescribeVpnGateways":{"input":{"type":"structure","members":{"Filters":{"shape":"Sq4","locationName":"Filter"},"VpnGatewayIds":{"locationName":"VpnGatewayId","type":"list","member":{"locationName":"VpnGatewayId"}},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"VpnGateways":{"locationName":"vpnGatewaySet","type":"list","member":{"shape":"Slv","locationName":"item"}}}}},"DetachClassicLinkVpc":{"input":{"type":"structure","required":["InstanceId","VpcId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceId":{"locationName":"instanceId"},"VpcId":{"locationName":"vpcId"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"DetachInternetGateway":{"input":{"type":"structure","required":["InternetGatewayId","VpcId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"InternetGatewayId":{"locationName":"internetGatewayId"},"VpcId":{"locationName":"vpcId"}}}},"DetachNetworkInterface":{"input":{"type":"structure","required":["AttachmentId"],"members":{"AttachmentId":{"locationName":"attachmentId"},"DryRun":{"locationName":"dryRun","type":"boolean"},"Force":{"locationName":"force","type":"boolean"}}}},"DetachVolume":{"input":{"type":"structure","required":["VolumeId"],"members":{"Device":{},"Force":{"type":"boolean"},"InstanceId":{},"VolumeId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"shape":"S4o"}},"DetachVpnGateway":{"input":{"type":"structure","required":["VpcId","VpnGatewayId"],"members":{"VpcId":{},"VpnGatewayId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"DisableEbsEncryptionByDefault":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"EbsEncryptionByDefault":{"locationName":"ebsEncryptionByDefault","type":"boolean"}}}},"DisableFastSnapshotRestores":{"input":{"type":"structure","required":["AvailabilityZones","SourceSnapshotIds"],"members":{"AvailabilityZones":{"shape":"S1fl","locationName":"AvailabilityZone"},"SourceSnapshotIds":{"shape":"S199","locationName":"SourceSnapshotId"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Successful":{"locationName":"successful","type":"list","member":{"locationName":"item","type":"structure","members":{"SnapshotId":{"locationName":"snapshotId"},"AvailabilityZone":{"locationName":"availabilityZone"},"State":{"locationName":"state"},"StateTransitionReason":{"locationName":"stateTransitionReason"},"OwnerId":{"locationName":"ownerId"},"OwnerAlias":{"locationName":"ownerAlias"},"EnablingTime":{"locationName":"enablingTime","type":"timestamp"},"OptimizingTime":{"locationName":"optimizingTime","type":"timestamp"},"EnabledTime":{"locationName":"enabledTime","type":"timestamp"},"DisablingTime":{"locationName":"disablingTime","type":"timestamp"},"DisabledTime":{"locationName":"disabledTime","type":"timestamp"}}}},"Unsuccessful":{"locationName":"unsuccessful","type":"list","member":{"locationName":"item","type":"structure","members":{"SnapshotId":{"locationName":"snapshotId"},"FastSnapshotRestoreStateErrors":{"locationName":"fastSnapshotRestoreStateErrorSet","type":"list","member":{"locationName":"item","type":"structure","members":{"AvailabilityZone":{"locationName":"availabilityZone"},"Error":{"locationName":"error","type":"structure","members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"}}}}}}}}}}}},"DisableImageDeprecation":{"input":{"type":"structure","required":["ImageId"],"members":{"ImageId":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"DisableSerialConsoleAccess":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"SerialConsoleAccessEnabled":{"locationName":"serialConsoleAccessEnabled","type":"boolean"}}}},"DisableTransitGatewayRouteTablePropagation":{"input":{"type":"structure","required":["TransitGatewayRouteTableId","TransitGatewayAttachmentId"],"members":{"TransitGatewayRouteTableId":{},"TransitGatewayAttachmentId":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Propagation":{"shape":"S1g0","locationName":"propagation"}}}},"DisableVgwRoutePropagation":{"input":{"type":"structure","required":["GatewayId","RouteTableId"],"members":{"GatewayId":{},"RouteTableId":{},"DryRun":{"type":"boolean"}}}},"DisableVpcClassicLink":{"input":{"type":"structure","required":["VpcId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VpcId":{"locationName":"vpcId"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"DisableVpcClassicLinkDnsSupport":{"input":{"type":"structure","members":{"VpcId":{}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"DisassociateAddress":{"input":{"type":"structure","members":{"AssociationId":{},"PublicIp":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"DisassociateClientVpnTargetNetwork":{"input":{"type":"structure","required":["ClientVpnEndpointId","AssociationId"],"members":{"ClientVpnEndpointId":{},"AssociationId":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"AssociationId":{"locationName":"associationId"},"Status":{"shape":"S2r","locationName":"status"}}}},"DisassociateEnclaveCertificateIamRole":{"input":{"type":"structure","members":{"CertificateArn":{},"RoleArn":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"DisassociateIamInstanceProfile":{"input":{"type":"structure","required":["AssociationId"],"members":{"AssociationId":{}}},"output":{"type":"structure","members":{"IamInstanceProfileAssociation":{"shape":"S31","locationName":"iamInstanceProfileAssociation"}}}},"DisassociateInstanceEventWindow":{"input":{"type":"structure","required":["InstanceEventWindowId","AssociationTarget"],"members":{"DryRun":{"type":"boolean"},"InstanceEventWindowId":{},"AssociationTarget":{"type":"structure","members":{"InstanceIds":{"shape":"S37","locationName":"InstanceId"},"InstanceTags":{"shape":"Ss","locationName":"InstanceTag"},"DedicatedHostIds":{"shape":"S38","locationName":"DedicatedHostId"}}}}},"output":{"type":"structure","members":{"InstanceEventWindow":{"shape":"S3b","locationName":"instanceEventWindow"}}}},"DisassociateRouteTable":{"input":{"type":"structure","required":["AssociationId"],"members":{"AssociationId":{"locationName":"associationId"},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"DisassociateSubnetCidrBlock":{"input":{"type":"structure","required":["AssociationId"],"members":{"AssociationId":{"locationName":"associationId"}}},"output":{"type":"structure","members":{"Ipv6CidrBlockAssociation":{"shape":"S3r","locationName":"ipv6CidrBlockAssociation"},"SubnetId":{"locationName":"subnetId"}}}},"DisassociateTransitGatewayMulticastDomain":{"input":{"type":"structure","members":{"TransitGatewayMulticastDomainId":{},"TransitGatewayAttachmentId":{},"SubnetIds":{"shape":"S3w"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Associations":{"shape":"Sg","locationName":"associations"}}}},"DisassociateTransitGatewayRouteTable":{"input":{"type":"structure","required":["TransitGatewayRouteTableId","TransitGatewayAttachmentId"],"members":{"TransitGatewayRouteTableId":{},"TransitGatewayAttachmentId":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Association":{"shape":"S41","locationName":"association"}}}},"DisassociateTrunkInterface":{"input":{"type":"structure","required":["AssociationId"],"members":{"AssociationId":{},"ClientToken":{"idempotencyToken":true},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"},"ClientToken":{"locationName":"clientToken"}}}},"DisassociateVpcCidrBlock":{"input":{"type":"structure","required":["AssociationId"],"members":{"AssociationId":{"locationName":"associationId"}}},"output":{"type":"structure","members":{"Ipv6CidrBlockAssociation":{"shape":"S4b","locationName":"ipv6CidrBlockAssociation"},"CidrBlockAssociation":{"shape":"S4e","locationName":"cidrBlockAssociation"},"VpcId":{"locationName":"vpcId"}}}},"EnableEbsEncryptionByDefault":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"EbsEncryptionByDefault":{"locationName":"ebsEncryptionByDefault","type":"boolean"}}}},"EnableFastSnapshotRestores":{"input":{"type":"structure","required":["AvailabilityZones","SourceSnapshotIds"],"members":{"AvailabilityZones":{"shape":"S1fl","locationName":"AvailabilityZone"},"SourceSnapshotIds":{"shape":"S199","locationName":"SourceSnapshotId"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Successful":{"locationName":"successful","type":"list","member":{"locationName":"item","type":"structure","members":{"SnapshotId":{"locationName":"snapshotId"},"AvailabilityZone":{"locationName":"availabilityZone"},"State":{"locationName":"state"},"StateTransitionReason":{"locationName":"stateTransitionReason"},"OwnerId":{"locationName":"ownerId"},"OwnerAlias":{"locationName":"ownerAlias"},"EnablingTime":{"locationName":"enablingTime","type":"timestamp"},"OptimizingTime":{"locationName":"optimizingTime","type":"timestamp"},"EnabledTime":{"locationName":"enabledTime","type":"timestamp"},"DisablingTime":{"locationName":"disablingTime","type":"timestamp"},"DisabledTime":{"locationName":"disabledTime","type":"timestamp"}}}},"Unsuccessful":{"locationName":"unsuccessful","type":"list","member":{"locationName":"item","type":"structure","members":{"SnapshotId":{"locationName":"snapshotId"},"FastSnapshotRestoreStateErrors":{"locationName":"fastSnapshotRestoreStateErrorSet","type":"list","member":{"locationName":"item","type":"structure","members":{"AvailabilityZone":{"locationName":"availabilityZone"},"Error":{"locationName":"error","type":"structure","members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"}}}}}}}}}}}},"EnableImageDeprecation":{"input":{"type":"structure","required":["ImageId","DeprecateAt"],"members":{"ImageId":{},"DeprecateAt":{"type":"timestamp"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"EnableSerialConsoleAccess":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"SerialConsoleAccessEnabled":{"locationName":"serialConsoleAccessEnabled","type":"boolean"}}}},"EnableTransitGatewayRouteTablePropagation":{"input":{"type":"structure","required":["TransitGatewayRouteTableId","TransitGatewayAttachmentId"],"members":{"TransitGatewayRouteTableId":{},"TransitGatewayAttachmentId":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Propagation":{"shape":"S1g0","locationName":"propagation"}}}},"EnableVgwRoutePropagation":{"input":{"type":"structure","required":["GatewayId","RouteTableId"],"members":{"GatewayId":{},"RouteTableId":{},"DryRun":{"type":"boolean"}}}},"EnableVolumeIO":{"input":{"type":"structure","required":["VolumeId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VolumeId":{"locationName":"volumeId"}}}},"EnableVpcClassicLink":{"input":{"type":"structure","required":["VpcId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VpcId":{"locationName":"vpcId"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"EnableVpcClassicLinkDnsSupport":{"input":{"type":"structure","members":{"VpcId":{}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"ExportClientVpnClientCertificateRevocationList":{"input":{"type":"structure","required":["ClientVpnEndpointId"],"members":{"ClientVpnEndpointId":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"CertificateRevocationList":{"locationName":"certificateRevocationList"},"Status":{"locationName":"status","type":"structure","members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"}}}}}},"ExportClientVpnClientConfiguration":{"input":{"type":"structure","required":["ClientVpnEndpointId"],"members":{"ClientVpnEndpointId":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"ClientConfiguration":{"locationName":"clientConfiguration"}}}},"ExportImage":{"input":{"type":"structure","required":["DiskImageFormat","ImageId","S3ExportLocation"],"members":{"ClientToken":{"idempotencyToken":true},"Description":{},"DiskImageFormat":{},"DryRun":{"type":"boolean"},"ImageId":{},"S3ExportLocation":{"type":"structure","required":["S3Bucket"],"members":{"S3Bucket":{},"S3Prefix":{}}},"RoleName":{},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"}}},"output":{"type":"structure","members":{"Description":{"locationName":"description"},"DiskImageFormat":{"locationName":"diskImageFormat"},"ExportImageTaskId":{"locationName":"exportImageTaskId"},"ImageId":{"locationName":"imageId"},"RoleName":{"locationName":"roleName"},"Progress":{"locationName":"progress"},"S3ExportLocation":{"shape":"Su4","locationName":"s3ExportLocation"},"Status":{"locationName":"status"},"StatusMessage":{"locationName":"statusMessage"},"Tags":{"shape":"Ss","locationName":"tagSet"}}}},"ExportTransitGatewayRoutes":{"input":{"type":"structure","required":["TransitGatewayRouteTableId","S3Bucket"],"members":{"TransitGatewayRouteTableId":{},"Filters":{"shape":"Sq4","locationName":"Filter"},"S3Bucket":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"S3Location":{"locationName":"s3Location"}}}},"GetAssociatedEnclaveCertificateIamRoles":{"input":{"type":"structure","members":{"CertificateArn":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"AssociatedRoles":{"locationName":"associatedRoleSet","type":"list","member":{"locationName":"item","type":"structure","members":{"AssociatedRoleArn":{"locationName":"associatedRoleArn"},"CertificateS3BucketName":{"locationName":"certificateS3BucketName"},"CertificateS3ObjectKey":{"locationName":"certificateS3ObjectKey"},"EncryptionKmsKeyId":{"locationName":"encryptionKmsKeyId"}}}}}}},"GetAssociatedIpv6PoolCidrs":{"input":{"type":"structure","required":["PoolId"],"members":{"PoolId":{},"NextToken":{},"MaxResults":{"type":"integer"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Ipv6CidrAssociations":{"locationName":"ipv6CidrAssociationSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Ipv6Cidr":{"locationName":"ipv6Cidr"},"AssociatedResource":{"locationName":"associatedResource"}}}},"NextToken":{"locationName":"nextToken"}}}},"GetCapacityReservationUsage":{"input":{"type":"structure","required":["CapacityReservationId"],"members":{"CapacityReservationId":{},"NextToken":{},"MaxResults":{"type":"integer"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"NextToken":{"locationName":"nextToken"},"CapacityReservationId":{"locationName":"capacityReservationId"},"InstanceType":{"locationName":"instanceType"},"TotalInstanceCount":{"locationName":"totalInstanceCount","type":"integer"},"AvailableInstanceCount":{"locationName":"availableInstanceCount","type":"integer"},"State":{"locationName":"state"},"InstanceUsages":{"locationName":"instanceUsageSet","type":"list","member":{"locationName":"item","type":"structure","members":{"AccountId":{"locationName":"accountId"},"UsedInstanceCount":{"locationName":"usedInstanceCount","type":"integer"}}}}}}},"GetCoipPoolUsage":{"input":{"type":"structure","required":["PoolId"],"members":{"PoolId":{},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"CoipPoolId":{"locationName":"coipPoolId"},"CoipAddressUsages":{"locationName":"coipAddressUsageSet","type":"list","member":{"locationName":"item","type":"structure","members":{"AllocationId":{"locationName":"allocationId"},"AwsAccountId":{"locationName":"awsAccountId"},"AwsService":{"locationName":"awsService"},"CoIp":{"locationName":"coIp"}}}},"LocalGatewayRouteTableId":{"locationName":"localGatewayRouteTableId"}}}},"GetConsoleOutput":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{},"DryRun":{"locationName":"dryRun","type":"boolean"},"Latest":{"type":"boolean"}}},"output":{"type":"structure","members":{"InstanceId":{"locationName":"instanceId"},"Output":{"locationName":"output"},"Timestamp":{"locationName":"timestamp","type":"timestamp"}}}},"GetConsoleScreenshot":{"input":{"type":"structure","required":["InstanceId"],"members":{"DryRun":{"type":"boolean"},"InstanceId":{},"WakeUp":{"type":"boolean"}}},"output":{"type":"structure","members":{"ImageData":{"locationName":"imageData"},"InstanceId":{"locationName":"instanceId"}}}},"GetDefaultCreditSpecification":{"input":{"type":"structure","required":["InstanceFamily"],"members":{"DryRun":{"type":"boolean"},"InstanceFamily":{}}},"output":{"type":"structure","members":{"InstanceFamilyCreditSpecification":{"shape":"S1ii","locationName":"instanceFamilyCreditSpecification"}}}},"GetEbsDefaultKmsKeyId":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"KmsKeyId":{"locationName":"kmsKeyId"}}}},"GetEbsEncryptionByDefault":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"EbsEncryptionByDefault":{"locationName":"ebsEncryptionByDefault","type":"boolean"}}}},"GetFlowLogsIntegrationTemplate":{"input":{"type":"structure","required":["FlowLogId","ConfigDeliveryS3DestinationArn","IntegrateServices"],"members":{"DryRun":{"type":"boolean"},"FlowLogId":{},"ConfigDeliveryS3DestinationArn":{},"IntegrateServices":{"locationName":"IntegrateService","type":"structure","members":{"AthenaIntegrations":{"locationName":"AthenaIntegration","type":"list","member":{"locationName":"item","type":"structure","required":["IntegrationResultS3DestinationArn","PartitionLoadFrequency"],"members":{"IntegrationResultS3DestinationArn":{},"PartitionLoadFrequency":{},"PartitionStartDate":{"type":"timestamp"},"PartitionEndDate":{"type":"timestamp"}}}}}}}},"output":{"type":"structure","members":{"Result":{"locationName":"result"}}}},"GetGroupsForCapacityReservation":{"input":{"type":"structure","required":["CapacityReservationId"],"members":{"CapacityReservationId":{},"NextToken":{},"MaxResults":{"type":"integer"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"NextToken":{"locationName":"nextToken"},"CapacityReservationGroups":{"locationName":"capacityReservationGroupSet","type":"list","member":{"locationName":"item","type":"structure","members":{"GroupArn":{"locationName":"groupArn"},"OwnerId":{"locationName":"ownerId"}}}}}}},"GetHostReservationPurchasePreview":{"input":{"type":"structure","required":["HostIdSet","OfferingId"],"members":{"HostIdSet":{"shape":"S1iz"},"OfferingId":{}}},"output":{"type":"structure","members":{"CurrencyCode":{"locationName":"currencyCode"},"Purchase":{"shape":"S1j1","locationName":"purchase"},"TotalHourlyPrice":{"locationName":"totalHourlyPrice"},"TotalUpfrontPrice":{"locationName":"totalUpfrontPrice"}}}},"GetLaunchTemplateData":{"input":{"type":"structure","required":["InstanceId"],"members":{"DryRun":{"type":"boolean"},"InstanceId":{}}},"output":{"type":"structure","members":{"LaunchTemplateData":{"shape":"Scr","locationName":"launchTemplateData"}}}},"GetManagedPrefixListAssociations":{"input":{"type":"structure","required":["PrefixListId"],"members":{"DryRun":{"type":"boolean"},"PrefixListId":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"PrefixListAssociations":{"locationName":"prefixListAssociationSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ResourceId":{"locationName":"resourceId"},"ResourceOwner":{"locationName":"resourceOwner"}}}},"NextToken":{"locationName":"nextToken"}}}},"GetManagedPrefixListEntries":{"input":{"type":"structure","required":["PrefixListId"],"members":{"DryRun":{"type":"boolean"},"PrefixListId":{},"TargetVersion":{"type":"long"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Entries":{"locationName":"entrySet","type":"list","member":{"locationName":"item","type":"structure","members":{"Cidr":{"locationName":"cidr"},"Description":{"locationName":"description"}}}},"NextToken":{"locationName":"nextToken"}}}},"GetPasswordData":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"InstanceId":{"locationName":"instanceId"},"PasswordData":{"locationName":"passwordData"},"Timestamp":{"locationName":"timestamp","type":"timestamp"}}}},"GetReservedInstancesExchangeQuote":{"input":{"type":"structure","required":["ReservedInstanceIds"],"members":{"DryRun":{"type":"boolean"},"ReservedInstanceIds":{"shape":"S3","locationName":"ReservedInstanceId"},"TargetConfigurations":{"shape":"S5","locationName":"TargetConfiguration"}}},"output":{"type":"structure","members":{"CurrencyCode":{"locationName":"currencyCode"},"IsValidExchange":{"locationName":"isValidExchange","type":"boolean"},"OutputReservedInstancesWillExpireAt":{"locationName":"outputReservedInstancesWillExpireAt","type":"timestamp"},"PaymentDue":{"locationName":"paymentDue"},"ReservedInstanceValueRollup":{"shape":"S1ji","locationName":"reservedInstanceValueRollup"},"ReservedInstanceValueSet":{"locationName":"reservedInstanceValueSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ReservationValue":{"shape":"S1ji","locationName":"reservationValue"},"ReservedInstanceId":{"locationName":"reservedInstanceId"}}}},"TargetConfigurationValueRollup":{"shape":"S1ji","locationName":"targetConfigurationValueRollup"},"TargetConfigurationValueSet":{"locationName":"targetConfigurationValueSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ReservationValue":{"shape":"S1ji","locationName":"reservationValue"},"TargetConfiguration":{"locationName":"targetConfiguration","type":"structure","members":{"InstanceCount":{"locationName":"instanceCount","type":"integer"},"OfferingId":{"locationName":"offeringId"}}}}}},"ValidationFailureReason":{"locationName":"validationFailureReason"}}}},"GetSerialConsoleAccessStatus":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"SerialConsoleAccessEnabled":{"locationName":"serialConsoleAccessEnabled","type":"boolean"}}}},"GetSubnetCidrReservations":{"input":{"type":"structure","required":["SubnetId"],"members":{"Filters":{"shape":"Sq4","locationName":"Filter"},"SubnetId":{},"DryRun":{"type":"boolean"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"SubnetIpv4CidrReservations":{"shape":"S1jt","locationName":"subnetIpv4CidrReservationSet"},"SubnetIpv6CidrReservations":{"shape":"S1jt","locationName":"subnetIpv6CidrReservationSet"},"NextToken":{"locationName":"nextToken"}}}},"GetTransitGatewayAttachmentPropagations":{"input":{"type":"structure","required":["TransitGatewayAttachmentId"],"members":{"TransitGatewayAttachmentId":{},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TransitGatewayAttachmentPropagations":{"locationName":"transitGatewayAttachmentPropagations","type":"list","member":{"locationName":"item","type":"structure","members":{"TransitGatewayRouteTableId":{"locationName":"transitGatewayRouteTableId"},"State":{"locationName":"state"}}}},"NextToken":{"locationName":"nextToken"}}}},"GetTransitGatewayMulticastDomainAssociations":{"input":{"type":"structure","members":{"TransitGatewayMulticastDomainId":{},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"MulticastDomainAssociations":{"locationName":"multicastDomainAssociations","type":"list","member":{"locationName":"item","type":"structure","members":{"TransitGatewayAttachmentId":{"locationName":"transitGatewayAttachmentId"},"ResourceId":{"locationName":"resourceId"},"ResourceType":{"locationName":"resourceType"},"ResourceOwnerId":{"locationName":"resourceOwnerId"},"Subnet":{"shape":"Sj","locationName":"subnet"}}}},"NextToken":{"locationName":"nextToken"}}}},"GetTransitGatewayPrefixListReferences":{"input":{"type":"structure","required":["TransitGatewayRouteTableId"],"members":{"TransitGatewayRouteTableId":{},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TransitGatewayPrefixListReferences":{"locationName":"transitGatewayPrefixListReferenceSet","type":"list","member":{"shape":"Sj1","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"GetTransitGatewayRouteTableAssociations":{"input":{"type":"structure","required":["TransitGatewayRouteTableId"],"members":{"TransitGatewayRouteTableId":{},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Associations":{"locationName":"associations","type":"list","member":{"locationName":"item","type":"structure","members":{"TransitGatewayAttachmentId":{"locationName":"transitGatewayAttachmentId"},"ResourceId":{"locationName":"resourceId"},"ResourceType":{"locationName":"resourceType"},"State":{"locationName":"state"}}}},"NextToken":{"locationName":"nextToken"}}}},"GetTransitGatewayRouteTablePropagations":{"input":{"type":"structure","required":["TransitGatewayRouteTableId"],"members":{"TransitGatewayRouteTableId":{},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TransitGatewayRouteTablePropagations":{"locationName":"transitGatewayRouteTablePropagations","type":"list","member":{"locationName":"item","type":"structure","members":{"TransitGatewayAttachmentId":{"locationName":"transitGatewayAttachmentId"},"ResourceId":{"locationName":"resourceId"},"ResourceType":{"locationName":"resourceType"},"State":{"locationName":"state"}}}},"NextToken":{"locationName":"nextToken"}}}},"ImportClientVpnClientCertificateRevocationList":{"input":{"type":"structure","required":["ClientVpnEndpointId","CertificateRevocationList"],"members":{"ClientVpnEndpointId":{},"CertificateRevocationList":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"ImportImage":{"input":{"type":"structure","members":{"Architecture":{},"ClientData":{"shape":"S1kg"},"ClientToken":{},"Description":{},"DiskContainers":{"locationName":"DiskContainer","type":"list","member":{"locationName":"item","type":"structure","members":{"Description":{},"DeviceName":{},"Format":{},"SnapshotId":{},"Url":{},"UserBucket":{"shape":"S1kj"}}}},"DryRun":{"type":"boolean"},"Encrypted":{"type":"boolean"},"Hypervisor":{},"KmsKeyId":{},"LicenseType":{},"Platform":{},"RoleName":{},"LicenseSpecifications":{"type":"list","member":{"locationName":"item","type":"structure","members":{"LicenseConfigurationArn":{}}}},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"}}},"output":{"type":"structure","members":{"Architecture":{"locationName":"architecture"},"Description":{"locationName":"description"},"Encrypted":{"locationName":"encrypted","type":"boolean"},"Hypervisor":{"locationName":"hypervisor"},"ImageId":{"locationName":"imageId"},"ImportTaskId":{"locationName":"importTaskId"},"KmsKeyId":{"locationName":"kmsKeyId"},"LicenseType":{"locationName":"licenseType"},"Platform":{"locationName":"platform"},"Progress":{"locationName":"progress"},"SnapshotDetails":{"shape":"Sxp","locationName":"snapshotDetailSet"},"Status":{"locationName":"status"},"StatusMessage":{"locationName":"statusMessage"},"LicenseSpecifications":{"shape":"Sxs","locationName":"licenseSpecifications"},"Tags":{"shape":"Ss","locationName":"tagSet"}}}},"ImportInstance":{"input":{"type":"structure","required":["Platform"],"members":{"Description":{"locationName":"description"},"DiskImages":{"locationName":"diskImage","type":"list","member":{"type":"structure","members":{"Description":{},"Image":{"shape":"S1kq"},"Volume":{"shape":"S1kr"}}}},"DryRun":{"locationName":"dryRun","type":"boolean"},"LaunchSpecification":{"locationName":"launchSpecification","type":"structure","members":{"AdditionalInfo":{"locationName":"additionalInfo"},"Architecture":{"locationName":"architecture"},"GroupIds":{"shape":"Sbe","locationName":"GroupId"},"GroupNames":{"shape":"Sc1","locationName":"GroupName"},"InstanceInitiatedShutdownBehavior":{"locationName":"instanceInitiatedShutdownBehavior"},"InstanceType":{"locationName":"instanceType"},"Monitoring":{"locationName":"monitoring","type":"boolean"},"Placement":{"shape":"S9m","locationName":"placement"},"PrivateIpAddress":{"locationName":"privateIpAddress"},"SubnetId":{"locationName":"subnetId"},"UserData":{"locationName":"userData","type":"structure","members":{"Data":{"locationName":"data"}},"sensitive":true}}},"Platform":{"locationName":"platform"}}},"output":{"type":"structure","members":{"ConversionTask":{"shape":"St1","locationName":"conversionTask"}}}},"ImportKeyPair":{"input":{"type":"structure","required":["KeyName","PublicKeyMaterial"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"KeyName":{"locationName":"keyName"},"PublicKeyMaterial":{"locationName":"publicKeyMaterial","type":"blob"},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"}}},"output":{"type":"structure","members":{"KeyFingerprint":{"locationName":"keyFingerprint"},"KeyName":{"locationName":"keyName"},"KeyPairId":{"locationName":"keyPairId"},"Tags":{"shape":"Ss","locationName":"tagSet"}}}},"ImportSnapshot":{"input":{"type":"structure","members":{"ClientData":{"shape":"S1kg"},"ClientToken":{},"Description":{},"DiskContainer":{"type":"structure","members":{"Description":{},"Format":{},"Url":{},"UserBucket":{"shape":"S1kj"}}},"DryRun":{"type":"boolean"},"Encrypted":{"type":"boolean"},"KmsKeyId":{},"RoleName":{},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"}}},"output":{"type":"structure","members":{"Description":{"locationName":"description"},"ImportTaskId":{"locationName":"importTaskId"},"SnapshotTaskDetail":{"shape":"Sy0","locationName":"snapshotTaskDetail"},"Tags":{"shape":"Ss","locationName":"tagSet"}}}},"ImportVolume":{"input":{"type":"structure","required":["AvailabilityZone","Image","Volume"],"members":{"AvailabilityZone":{"locationName":"availabilityZone"},"Description":{"locationName":"description"},"DryRun":{"locationName":"dryRun","type":"boolean"},"Image":{"shape":"S1kq","locationName":"image"},"Volume":{"shape":"S1kr","locationName":"volume"}}},"output":{"type":"structure","members":{"ConversionTask":{"shape":"St1","locationName":"conversionTask"}}}},"ModifyAddressAttribute":{"input":{"type":"structure","required":["AllocationId"],"members":{"AllocationId":{},"DomainName":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Address":{"shape":"Sqi","locationName":"address"}}}},"ModifyAvailabilityZoneGroup":{"input":{"type":"structure","required":["GroupName","OptInStatus"],"members":{"GroupName":{},"OptInStatus":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"ModifyCapacityReservation":{"input":{"type":"structure","required":["CapacityReservationId"],"members":{"CapacityReservationId":{},"InstanceCount":{"type":"integer"},"EndDate":{"type":"timestamp"},"EndDateType":{},"Accept":{"type":"boolean"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"ModifyClientVpnEndpoint":{"input":{"type":"structure","required":["ClientVpnEndpointId"],"members":{"ClientVpnEndpointId":{},"ServerCertificateArn":{},"ConnectionLogOptions":{"shape":"S7v"},"DnsServers":{"type":"structure","members":{"CustomDnsServers":{"shape":"Se"},"Enabled":{"type":"boolean"}}},"VpnPort":{"type":"integer"},"Description":{},"SplitTunnel":{"type":"boolean"},"DryRun":{"type":"boolean"},"SecurityGroupIds":{"shape":"S25","locationName":"SecurityGroupId"},"VpcId":{},"SelfServicePortal":{},"ClientConnectOptions":{"shape":"S7y"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"ModifyDefaultCreditSpecification":{"input":{"type":"structure","required":["InstanceFamily","CpuCredits"],"members":{"DryRun":{"type":"boolean"},"InstanceFamily":{},"CpuCredits":{}}},"output":{"type":"structure","members":{"InstanceFamilyCreditSpecification":{"shape":"S1ii","locationName":"instanceFamilyCreditSpecification"}}}},"ModifyEbsDefaultKmsKeyId":{"input":{"type":"structure","required":["KmsKeyId"],"members":{"KmsKeyId":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"KmsKeyId":{"locationName":"kmsKeyId"}}}},"ModifyFleet":{"input":{"type":"structure","required":["FleetId"],"members":{"DryRun":{"type":"boolean"},"ExcessCapacityTerminationPolicy":{},"LaunchTemplateConfigs":{"shape":"S9e","locationName":"LaunchTemplateConfig"},"FleetId":{},"TargetCapacitySpecification":{"shape":"S9n"},"Context":{}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"ModifyFpgaImageAttribute":{"input":{"type":"structure","required":["FpgaImageId"],"members":{"DryRun":{"type":"boolean"},"FpgaImageId":{},"Attribute":{},"OperationType":{},"UserIds":{"shape":"S1lk","locationName":"UserId"},"UserGroups":{"shape":"S1ll","locationName":"UserGroup"},"ProductCodes":{"shape":"S1lm","locationName":"ProductCode"},"LoadPermission":{"type":"structure","members":{"Add":{"shape":"S1lo"},"Remove":{"shape":"S1lo"}}},"Description":{},"Name":{}}},"output":{"type":"structure","members":{"FpgaImageAttribute":{"shape":"Svg","locationName":"fpgaImageAttribute"}}}},"ModifyHosts":{"input":{"type":"structure","required":["HostIds"],"members":{"AutoPlacement":{"locationName":"autoPlacement"},"HostIds":{"shape":"Swd","locationName":"hostId"},"HostRecovery":{},"InstanceType":{},"InstanceFamily":{}}},"output":{"type":"structure","members":{"Successful":{"shape":"S21","locationName":"successful"},"Unsuccessful":{"shape":"S1lt","locationName":"unsuccessful"}}}},"ModifyIdFormat":{"input":{"type":"structure","required":["Resource","UseLongIds"],"members":{"Resource":{},"UseLongIds":{"type":"boolean"}}}},"ModifyIdentityIdFormat":{"input":{"type":"structure","required":["PrincipalArn","Resource","UseLongIds"],"members":{"PrincipalArn":{"locationName":"principalArn"},"Resource":{"locationName":"resource"},"UseLongIds":{"locationName":"useLongIds","type":"boolean"}}}},"ModifyImageAttribute":{"input":{"type":"structure","required":["ImageId"],"members":{"Attribute":{},"Description":{"shape":"S8v"},"ImageId":{},"LaunchPermission":{"type":"structure","members":{"Add":{"shape":"Sx3"},"Remove":{"shape":"Sx3"}}},"OperationType":{},"ProductCodes":{"shape":"S1lm","locationName":"ProductCode"},"UserGroups":{"shape":"S1ll","locationName":"UserGroup"},"UserIds":{"shape":"S1lk","locationName":"UserId"},"Value":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"ModifyInstanceAttribute":{"input":{"type":"structure","required":["InstanceId"],"members":{"SourceDestCheck":{"shape":"Sy7"},"Attribute":{"locationName":"attribute"},"BlockDeviceMappings":{"locationName":"blockDeviceMapping","type":"list","member":{"locationName":"item","type":"structure","members":{"DeviceName":{"locationName":"deviceName"},"Ebs":{"locationName":"ebs","type":"structure","members":{"DeleteOnTermination":{"locationName":"deleteOnTermination","type":"boolean"},"VolumeId":{"locationName":"volumeId"}}},"NoDevice":{"locationName":"noDevice"},"VirtualName":{"locationName":"virtualName"}}}},"DisableApiTermination":{"shape":"Sy7","locationName":"disableApiTermination"},"DryRun":{"locationName":"dryRun","type":"boolean"},"EbsOptimized":{"shape":"Sy7","locationName":"ebsOptimized"},"EnaSupport":{"shape":"Sy7","locationName":"enaSupport"},"Groups":{"shape":"S4g","locationName":"GroupId"},"InstanceId":{"locationName":"instanceId"},"InstanceInitiatedShutdownBehavior":{"shape":"S8v","locationName":"instanceInitiatedShutdownBehavior"},"InstanceType":{"shape":"S8v","locationName":"instanceType"},"Kernel":{"shape":"S8v","locationName":"kernel"},"Ramdisk":{"shape":"S8v","locationName":"ramdisk"},"SriovNetSupport":{"shape":"S8v","locationName":"sriovNetSupport"},"UserData":{"locationName":"userData","type":"structure","members":{"Value":{"locationName":"value","type":"blob"}}},"Value":{"locationName":"value"}}}},"ModifyInstanceCapacityReservationAttributes":{"input":{"type":"structure","required":["InstanceId","CapacityReservationSpecification"],"members":{"InstanceId":{},"CapacityReservationSpecification":{"shape":"S1m4"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"ModifyInstanceCreditSpecification":{"input":{"type":"structure","required":["InstanceCreditSpecifications"],"members":{"DryRun":{"type":"boolean"},"ClientToken":{},"InstanceCreditSpecifications":{"locationName":"InstanceCreditSpecification","type":"list","member":{"locationName":"item","type":"structure","members":{"InstanceId":{},"CpuCredits":{}}}}}},"output":{"type":"structure","members":{"SuccessfulInstanceCreditSpecifications":{"locationName":"successfulInstanceCreditSpecificationSet","type":"list","member":{"locationName":"item","type":"structure","members":{"InstanceId":{"locationName":"instanceId"}}}},"UnsuccessfulInstanceCreditSpecifications":{"locationName":"unsuccessfulInstanceCreditSpecificationSet","type":"list","member":{"locationName":"item","type":"structure","members":{"InstanceId":{"locationName":"instanceId"},"Error":{"locationName":"error","type":"structure","members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"}}}}}}}}},"ModifyInstanceEventStartTime":{"input":{"type":"structure","required":["InstanceId","InstanceEventId","NotBefore"],"members":{"DryRun":{"type":"boolean"},"InstanceId":{},"InstanceEventId":{},"NotBefore":{"type":"timestamp"}}},"output":{"type":"structure","members":{"Event":{"shape":"Syq","locationName":"event"}}}},"ModifyInstanceEventWindow":{"input":{"type":"structure","required":["InstanceEventWindowId"],"members":{"DryRun":{"type":"boolean"},"Name":{},"InstanceEventWindowId":{},"TimeRanges":{"shape":"Sak","locationName":"TimeRange"},"CronExpression":{}}},"output":{"type":"structure","members":{"InstanceEventWindow":{"shape":"S3b","locationName":"instanceEventWindow"}}}},"ModifyInstanceMetadataOptions":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{},"HttpTokens":{},"HttpPutResponseHopLimit":{"type":"integer"},"HttpEndpoint":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"InstanceId":{"locationName":"instanceId"},"InstanceMetadataOptions":{"shape":"S12m","locationName":"instanceMetadataOptions"}}}},"ModifyInstancePlacement":{"input":{"type":"structure","required":["InstanceId"],"members":{"Affinity":{"locationName":"affinity"},"GroupName":{},"HostId":{"locationName":"hostId"},"InstanceId":{"locationName":"instanceId"},"Tenancy":{"locationName":"tenancy"},"PartitionNumber":{"type":"integer"},"HostResourceGroupArn":{}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"ModifyLaunchTemplate":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"ClientToken":{},"LaunchTemplateId":{},"LaunchTemplateName":{},"DefaultVersion":{"locationName":"SetDefaultVersion"}}},"output":{"type":"structure","members":{"LaunchTemplate":{"shape":"Sck","locationName":"launchTemplate"}}}},"ModifyManagedPrefixList":{"input":{"type":"structure","required":["PrefixListId"],"members":{"DryRun":{"type":"boolean"},"PrefixListId":{},"CurrentVersion":{"type":"long"},"PrefixListName":{},"AddEntries":{"shape":"Se0","locationName":"AddEntry"},"RemoveEntries":{"locationName":"RemoveEntry","type":"list","member":{"type":"structure","required":["Cidr"],"members":{"Cidr":{}}}}}},"output":{"type":"structure","members":{"PrefixList":{"shape":"Se3","locationName":"prefixList"}}}},"ModifyNetworkInterfaceAttribute":{"input":{"type":"structure","required":["NetworkInterfaceId"],"members":{"Attachment":{"locationName":"attachment","type":"structure","members":{"AttachmentId":{"locationName":"attachmentId"},"DeleteOnTermination":{"locationName":"deleteOnTermination","type":"boolean"}}},"Description":{"shape":"S8v","locationName":"description"},"DryRun":{"locationName":"dryRun","type":"boolean"},"Groups":{"shape":"Sbe","locationName":"SecurityGroupId"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"SourceDestCheck":{"shape":"Sy7","locationName":"sourceDestCheck"}}}},"ModifyReservedInstances":{"input":{"type":"structure","required":["ReservedInstancesIds","TargetConfigurations"],"members":{"ReservedInstancesIds":{"shape":"S175","locationName":"ReservedInstancesId"},"ClientToken":{"locationName":"clientToken"},"TargetConfigurations":{"locationName":"ReservedInstancesConfigurationSetItemType","type":"list","member":{"shape":"S17r","locationName":"item"}}}},"output":{"type":"structure","members":{"ReservedInstancesModificationId":{"locationName":"reservedInstancesModificationId"}}}},"ModifySecurityGroupRules":{"input":{"type":"structure","required":["GroupId","SecurityGroupRules"],"members":{"GroupId":{},"SecurityGroupRules":{"locationName":"SecurityGroupRule","type":"list","member":{"locationName":"item","type":"structure","members":{"SecurityGroupRuleId":{},"SecurityGroupRule":{"type":"structure","members":{"IpProtocol":{},"FromPort":{"type":"integer"},"ToPort":{"type":"integer"},"CidrIpv4":{},"CidrIpv6":{},"PrefixListId":{},"ReferencedGroupId":{},"Description":{}}}}}},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"ModifySnapshotAttribute":{"input":{"type":"structure","required":["SnapshotId"],"members":{"Attribute":{},"CreateVolumePermission":{"type":"structure","members":{"Add":{"shape":"S195"},"Remove":{"shape":"S195"}}},"GroupNames":{"shape":"S18x","locationName":"UserGroup"},"OperationType":{},"SnapshotId":{},"UserIds":{"shape":"S1lk","locationName":"UserId"},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"ModifySpotFleetRequest":{"input":{"type":"structure","required":["SpotFleetRequestId"],"members":{"ExcessCapacityTerminationPolicy":{"locationName":"excessCapacityTerminationPolicy"},"LaunchTemplateConfigs":{"shape":"S1a7","locationName":"LaunchTemplateConfig"},"SpotFleetRequestId":{"locationName":"spotFleetRequestId"},"TargetCapacity":{"locationName":"targetCapacity","type":"integer"},"OnDemandTargetCapacity":{"type":"integer"},"Context":{}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"ModifySubnetAttribute":{"input":{"type":"structure","required":["SubnetId"],"members":{"AssignIpv6AddressOnCreation":{"shape":"Sy7"},"MapPublicIpOnLaunch":{"shape":"Sy7"},"SubnetId":{"locationName":"subnetId"},"MapCustomerOwnedIpOnLaunch":{"shape":"Sy7"},"CustomerOwnedIpv4Pool":{}}}},"ModifyTrafficMirrorFilterNetworkServices":{"input":{"type":"structure","required":["TrafficMirrorFilterId"],"members":{"TrafficMirrorFilterId":{},"AddNetworkServices":{"shape":"Shg","locationName":"AddNetworkService"},"RemoveNetworkServices":{"shape":"Shg","locationName":"RemoveNetworkService"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TrafficMirrorFilter":{"shape":"Sha","locationName":"trafficMirrorFilter"}}}},"ModifyTrafficMirrorFilterRule":{"input":{"type":"structure","required":["TrafficMirrorFilterRuleId"],"members":{"TrafficMirrorFilterRuleId":{},"TrafficDirection":{},"RuleNumber":{"type":"integer"},"RuleAction":{},"DestinationPortRange":{"shape":"Shk"},"SourcePortRange":{"shape":"Shk"},"Protocol":{"type":"integer"},"DestinationCidrBlock":{},"SourceCidrBlock":{},"Description":{},"RemoveFields":{"locationName":"RemoveField","type":"list","member":{}},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TrafficMirrorFilterRule":{"shape":"Shc","locationName":"trafficMirrorFilterRule"}}}},"ModifyTrafficMirrorSession":{"input":{"type":"structure","required":["TrafficMirrorSessionId"],"members":{"TrafficMirrorSessionId":{},"TrafficMirrorTargetId":{},"TrafficMirrorFilterId":{},"PacketLength":{"type":"integer"},"SessionNumber":{"type":"integer"},"VirtualNetworkId":{"type":"integer"},"Description":{},"RemoveFields":{"locationName":"RemoveField","type":"list","member":{}},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TrafficMirrorSession":{"shape":"Shp","locationName":"trafficMirrorSession"}}}},"ModifyTransitGateway":{"input":{"type":"structure","required":["TransitGatewayId"],"members":{"TransitGatewayId":{},"Description":{},"Options":{"type":"structure","members":{"AddTransitGatewayCidrBlocks":{"shape":"Si1"},"RemoveTransitGatewayCidrBlocks":{"shape":"Si1"},"VpnEcmpSupport":{},"DnsSupport":{},"AutoAcceptSharedAttachments":{},"DefaultRouteTableAssociation":{},"AssociationDefaultRouteTableId":{},"DefaultRouteTablePropagation":{},"PropagationDefaultRouteTableId":{}}},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TransitGateway":{"shape":"Si3","locationName":"transitGateway"}}}},"ModifyTransitGatewayPrefixListReference":{"input":{"type":"structure","required":["TransitGatewayRouteTableId","PrefixListId"],"members":{"TransitGatewayRouteTableId":{},"PrefixListId":{},"TransitGatewayAttachmentId":{},"Blackhole":{"type":"boolean"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TransitGatewayPrefixListReference":{"shape":"Sj1","locationName":"transitGatewayPrefixListReference"}}}},"ModifyTransitGatewayVpcAttachment":{"input":{"type":"structure","required":["TransitGatewayAttachmentId"],"members":{"TransitGatewayAttachmentId":{},"AddSubnetIds":{"shape":"S3w"},"RemoveSubnetIds":{"shape":"S3w"},"Options":{"type":"structure","members":{"DnsSupport":{},"Ipv6Support":{},"ApplianceModeSupport":{}}},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TransitGatewayVpcAttachment":{"shape":"Sw","locationName":"transitGatewayVpcAttachment"}}}},"ModifyVolume":{"input":{"type":"structure","required":["VolumeId"],"members":{"DryRun":{"type":"boolean"},"VolumeId":{},"Size":{"type":"integer"},"VolumeType":{},"Iops":{"type":"integer"},"Throughput":{"type":"integer"},"MultiAttachEnabled":{"type":"boolean"}}},"output":{"type":"structure","members":{"VolumeModification":{"shape":"S1dp","locationName":"volumeModification"}}}},"ModifyVolumeAttribute":{"input":{"type":"structure","required":["VolumeId"],"members":{"AutoEnableIO":{"shape":"Sy7"},"VolumeId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"ModifyVpcAttribute":{"input":{"type":"structure","required":["VpcId"],"members":{"EnableDnsHostnames":{"shape":"Sy7"},"EnableDnsSupport":{"shape":"Sy7"},"VpcId":{"locationName":"vpcId"}}}},"ModifyVpcEndpoint":{"input":{"type":"structure","required":["VpcEndpointId"],"members":{"DryRun":{"type":"boolean"},"VpcEndpointId":{},"ResetPolicy":{"type":"boolean"},"PolicyDocument":{},"AddRouteTableIds":{"shape":"Sjq","locationName":"AddRouteTableId"},"RemoveRouteTableIds":{"shape":"Sjq","locationName":"RemoveRouteTableId"},"AddSubnetIds":{"shape":"Sjr","locationName":"AddSubnetId"},"RemoveSubnetIds":{"shape":"Sjr","locationName":"RemoveSubnetId"},"AddSecurityGroupIds":{"shape":"Sjs","locationName":"AddSecurityGroupId"},"RemoveSecurityGroupIds":{"shape":"Sjs","locationName":"RemoveSecurityGroupId"},"PrivateDnsEnabled":{"type":"boolean"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"ModifyVpcEndpointConnectionNotification":{"input":{"type":"structure","required":["ConnectionNotificationId"],"members":{"DryRun":{"type":"boolean"},"ConnectionNotificationId":{},"ConnectionNotificationArn":{},"ConnectionEvents":{"shape":"Se"}}},"output":{"type":"structure","members":{"ReturnValue":{"locationName":"return","type":"boolean"}}}},"ModifyVpcEndpointServiceConfiguration":{"input":{"type":"structure","required":["ServiceId"],"members":{"DryRun":{"type":"boolean"},"ServiceId":{},"PrivateDnsName":{},"RemovePrivateDnsName":{"type":"boolean"},"AcceptanceRequired":{"type":"boolean"},"AddNetworkLoadBalancerArns":{"shape":"Se","locationName":"AddNetworkLoadBalancerArn"},"RemoveNetworkLoadBalancerArns":{"shape":"Se","locationName":"RemoveNetworkLoadBalancerArn"},"AddGatewayLoadBalancerArns":{"shape":"Se","locationName":"AddGatewayLoadBalancerArn"},"RemoveGatewayLoadBalancerArns":{"shape":"Se","locationName":"RemoveGatewayLoadBalancerArn"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"ModifyVpcEndpointServicePermissions":{"input":{"type":"structure","required":["ServiceId"],"members":{"DryRun":{"type":"boolean"},"ServiceId":{},"AddAllowedPrincipals":{"shape":"Se"},"RemoveAllowedPrincipals":{"shape":"Se"}}},"output":{"type":"structure","members":{"ReturnValue":{"locationName":"return","type":"boolean"}}}},"ModifyVpcPeeringConnectionOptions":{"input":{"type":"structure","required":["VpcPeeringConnectionId"],"members":{"AccepterPeeringConnectionOptions":{"shape":"S1o6"},"DryRun":{"type":"boolean"},"RequesterPeeringConnectionOptions":{"shape":"S1o6"},"VpcPeeringConnectionId":{}}},"output":{"type":"structure","members":{"AccepterPeeringConnectionOptions":{"shape":"S1o8","locationName":"accepterPeeringConnectionOptions"},"RequesterPeeringConnectionOptions":{"shape":"S1o8","locationName":"requesterPeeringConnectionOptions"}}}},"ModifyVpcTenancy":{"input":{"type":"structure","required":["VpcId","InstanceTenancy"],"members":{"VpcId":{},"InstanceTenancy":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"ReturnValue":{"locationName":"return","type":"boolean"}}}},"ModifyVpnConnection":{"input":{"type":"structure","required":["VpnConnectionId"],"members":{"VpnConnectionId":{},"TransitGatewayId":{},"CustomerGatewayId":{},"VpnGatewayId":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"VpnConnection":{"shape":"Sl2","locationName":"vpnConnection"}}}},"ModifyVpnConnectionOptions":{"input":{"type":"structure","required":["VpnConnectionId"],"members":{"VpnConnectionId":{},"LocalIpv4NetworkCidr":{},"RemoteIpv4NetworkCidr":{},"LocalIpv6NetworkCidr":{},"RemoteIpv6NetworkCidr":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"VpnConnection":{"shape":"Sl2","locationName":"vpnConnection"}}}},"ModifyVpnTunnelCertificate":{"input":{"type":"structure","required":["VpnConnectionId","VpnTunnelOutsideIpAddress"],"members":{"VpnConnectionId":{},"VpnTunnelOutsideIpAddress":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"VpnConnection":{"shape":"Sl2","locationName":"vpnConnection"}}}},"ModifyVpnTunnelOptions":{"input":{"type":"structure","required":["VpnConnectionId","VpnTunnelOutsideIpAddress","TunnelOptions"],"members":{"VpnConnectionId":{},"VpnTunnelOutsideIpAddress":{},"TunnelOptions":{"type":"structure","members":{"TunnelInsideCidr":{},"TunnelInsideIpv6Cidr":{},"PreSharedKey":{},"Phase1LifetimeSeconds":{"type":"integer"},"Phase2LifetimeSeconds":{"type":"integer"},"RekeyMarginTimeSeconds":{"type":"integer"},"RekeyFuzzPercentage":{"type":"integer"},"ReplayWindowSize":{"type":"integer"},"DPDTimeoutSeconds":{"type":"integer"},"DPDTimeoutAction":{},"Phase1EncryptionAlgorithms":{"shape":"Skn","locationName":"Phase1EncryptionAlgorithm"},"Phase2EncryptionAlgorithms":{"shape":"Skp","locationName":"Phase2EncryptionAlgorithm"},"Phase1IntegrityAlgorithms":{"shape":"Skr","locationName":"Phase1IntegrityAlgorithm"},"Phase2IntegrityAlgorithms":{"shape":"Skt","locationName":"Phase2IntegrityAlgorithm"},"Phase1DHGroupNumbers":{"shape":"Skv","locationName":"Phase1DHGroupNumber"},"Phase2DHGroupNumbers":{"shape":"Skx","locationName":"Phase2DHGroupNumber"},"IKEVersions":{"shape":"Skz","locationName":"IKEVersion"},"StartupAction":{}}},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"VpnConnection":{"shape":"Sl2","locationName":"vpnConnection"}}}},"MonitorInstances":{"input":{"type":"structure","required":["InstanceIds"],"members":{"InstanceIds":{"shape":"Srh","locationName":"InstanceId"},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"InstanceMonitorings":{"shape":"S1on","locationName":"instancesSet"}}}},"MoveAddressToVpc":{"input":{"type":"structure","required":["PublicIp"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"PublicIp":{"locationName":"publicIp"}}},"output":{"type":"structure","members":{"AllocationId":{"locationName":"allocationId"},"Status":{"locationName":"status"}}}},"ProvisionByoipCidr":{"input":{"type":"structure","required":["Cidr"],"members":{"Cidr":{},"CidrAuthorizationContext":{"type":"structure","required":["Message","Signature"],"members":{"Message":{},"Signature":{}}},"PubliclyAdvertisable":{"type":"boolean"},"Description":{},"DryRun":{"type":"boolean"},"PoolTagSpecifications":{"shape":"S1t","locationName":"PoolTagSpecification"},"MultiRegion":{"type":"boolean"}}},"output":{"type":"structure","members":{"ByoipCidr":{"shape":"S1n","locationName":"byoipCidr"}}}},"PurchaseHostReservation":{"input":{"type":"structure","required":["HostIdSet","OfferingId"],"members":{"ClientToken":{},"CurrencyCode":{},"HostIdSet":{"shape":"S1iz"},"LimitPrice":{},"OfferingId":{},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"}}},"output":{"type":"structure","members":{"ClientToken":{"locationName":"clientToken"},"CurrencyCode":{"locationName":"currencyCode"},"Purchase":{"shape":"S1j1","locationName":"purchase"},"TotalHourlyPrice":{"locationName":"totalHourlyPrice"},"TotalUpfrontPrice":{"locationName":"totalUpfrontPrice"}}}},"PurchaseReservedInstancesOffering":{"input":{"type":"structure","required":["InstanceCount","ReservedInstancesOfferingId"],"members":{"InstanceCount":{"type":"integer"},"ReservedInstancesOfferingId":{},"DryRun":{"locationName":"dryRun","type":"boolean"},"LimitPrice":{"locationName":"limitPrice","type":"structure","members":{"Amount":{"locationName":"amount","type":"double"},"CurrencyCode":{"locationName":"currencyCode"}}},"PurchaseTime":{"type":"timestamp"}}},"output":{"type":"structure","members":{"ReservedInstancesId":{"locationName":"reservedInstancesId"}}}},"PurchaseScheduledInstances":{"input":{"type":"structure","required":["PurchaseRequests"],"members":{"ClientToken":{"idempotencyToken":true},"DryRun":{"type":"boolean"},"PurchaseRequests":{"locationName":"PurchaseRequest","type":"list","member":{"locationName":"PurchaseRequest","type":"structure","required":["InstanceCount","PurchaseToken"],"members":{"InstanceCount":{"type":"integer"},"PurchaseToken":{}}}}}},"output":{"type":"structure","members":{"ScheduledInstanceSet":{"locationName":"scheduledInstanceSet","type":"list","member":{"shape":"S18m","locationName":"item"}}}}},"RebootInstances":{"input":{"type":"structure","required":["InstanceIds"],"members":{"InstanceIds":{"shape":"Srh","locationName":"InstanceId"},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"RegisterImage":{"input":{"type":"structure","required":["Name"],"members":{"ImageLocation":{},"Architecture":{"locationName":"architecture"},"BlockDeviceMappings":{"shape":"Sae","locationName":"BlockDeviceMapping"},"Description":{"locationName":"description"},"DryRun":{"locationName":"dryRun","type":"boolean"},"EnaSupport":{"locationName":"enaSupport","type":"boolean"},"KernelId":{"locationName":"kernelId"},"Name":{"locationName":"name"},"BillingProducts":{"locationName":"BillingProduct","type":"list","member":{"locationName":"item"}},"RamdiskId":{"locationName":"ramdiskId"},"RootDeviceName":{"locationName":"rootDeviceName"},"SriovNetSupport":{"locationName":"sriovNetSupport"},"VirtualizationType":{"locationName":"virtualizationType"},"BootMode":{}}},"output":{"type":"structure","members":{"ImageId":{"locationName":"imageId"}}}},"RegisterInstanceEventNotificationAttributes":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"InstanceTagAttribute":{"type":"structure","members":{"IncludeAllTagsOfInstance":{"type":"boolean"},"InstanceTagKeys":{"shape":"Spl","locationName":"InstanceTagKey"}}}}},"output":{"type":"structure","members":{"InstanceTagAttribute":{"shape":"Spn","locationName":"instanceTagAttribute"}}}},"RegisterTransitGatewayMulticastGroupMembers":{"input":{"type":"structure","members":{"TransitGatewayMulticastDomainId":{},"GroupIpAddress":{},"NetworkInterfaceIds":{"shape":"Spp"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"RegisteredMulticastGroupMembers":{"locationName":"registeredMulticastGroupMembers","type":"structure","members":{"TransitGatewayMulticastDomainId":{"locationName":"transitGatewayMulticastDomainId"},"RegisteredNetworkInterfaceIds":{"shape":"Se","locationName":"registeredNetworkInterfaceIds"},"GroupIpAddress":{"locationName":"groupIpAddress"}}}}}},"RegisterTransitGatewayMulticastGroupSources":{"input":{"type":"structure","members":{"TransitGatewayMulticastDomainId":{},"GroupIpAddress":{},"NetworkInterfaceIds":{"shape":"Spp"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"RegisteredMulticastGroupSources":{"locationName":"registeredMulticastGroupSources","type":"structure","members":{"TransitGatewayMulticastDomainId":{"locationName":"transitGatewayMulticastDomainId"},"RegisteredNetworkInterfaceIds":{"shape":"Se","locationName":"registeredNetworkInterfaceIds"},"GroupIpAddress":{"locationName":"groupIpAddress"}}}}}},"RejectTransitGatewayMulticastDomainAssociations":{"input":{"type":"structure","members":{"TransitGatewayMulticastDomainId":{},"TransitGatewayAttachmentId":{},"SubnetIds":{"shape":"Se"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Associations":{"shape":"Sg","locationName":"associations"}}}},"RejectTransitGatewayPeeringAttachment":{"input":{"type":"structure","required":["TransitGatewayAttachmentId"],"members":{"TransitGatewayAttachmentId":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TransitGatewayPeeringAttachment":{"shape":"Sn","locationName":"transitGatewayPeeringAttachment"}}}},"RejectTransitGatewayVpcAttachment":{"input":{"type":"structure","required":["TransitGatewayAttachmentId"],"members":{"TransitGatewayAttachmentId":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"TransitGatewayVpcAttachment":{"shape":"Sw","locationName":"transitGatewayVpcAttachment"}}}},"RejectVpcEndpointConnections":{"input":{"type":"structure","required":["ServiceId","VpcEndpointIds"],"members":{"DryRun":{"type":"boolean"},"ServiceId":{},"VpcEndpointIds":{"shape":"S13","locationName":"VpcEndpointId"}}},"output":{"type":"structure","members":{"Unsuccessful":{"shape":"S16","locationName":"unsuccessful"}}}},"RejectVpcPeeringConnection":{"input":{"type":"structure","required":["VpcPeeringConnectionId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VpcPeeringConnectionId":{"locationName":"vpcPeeringConnectionId"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"ReleaseAddress":{"input":{"type":"structure","members":{"AllocationId":{},"PublicIp":{},"NetworkBorderGroup":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"ReleaseHosts":{"input":{"type":"structure","required":["HostIds"],"members":{"HostIds":{"shape":"Swd","locationName":"hostId"}}},"output":{"type":"structure","members":{"Successful":{"shape":"S21","locationName":"successful"},"Unsuccessful":{"shape":"S1lt","locationName":"unsuccessful"}}}},"ReplaceIamInstanceProfileAssociation":{"input":{"type":"structure","required":["IamInstanceProfile","AssociationId"],"members":{"IamInstanceProfile":{"shape":"S2z"},"AssociationId":{}}},"output":{"type":"structure","members":{"IamInstanceProfileAssociation":{"shape":"S31","locationName":"iamInstanceProfileAssociation"}}}},"ReplaceNetworkAclAssociation":{"input":{"type":"structure","required":["AssociationId","NetworkAclId"],"members":{"AssociationId":{"locationName":"associationId"},"DryRun":{"locationName":"dryRun","type":"boolean"},"NetworkAclId":{"locationName":"networkAclId"}}},"output":{"type":"structure","members":{"NewAssociationId":{"locationName":"newAssociationId"}}}},"ReplaceNetworkAclEntry":{"input":{"type":"structure","required":["Egress","NetworkAclId","Protocol","RuleAction","RuleNumber"],"members":{"CidrBlock":{"locationName":"cidrBlock"},"DryRun":{"locationName":"dryRun","type":"boolean"},"Egress":{"locationName":"egress","type":"boolean"},"IcmpTypeCode":{"shape":"Sek","locationName":"Icmp"},"Ipv6CidrBlock":{"locationName":"ipv6CidrBlock"},"NetworkAclId":{"locationName":"networkAclId"},"PortRange":{"shape":"Sel","locationName":"portRange"},"Protocol":{"locationName":"protocol"},"RuleAction":{"locationName":"ruleAction"},"RuleNumber":{"locationName":"ruleNumber","type":"integer"}}}},"ReplaceRoute":{"input":{"type":"structure","required":["RouteTableId"],"members":{"DestinationCidrBlock":{"locationName":"destinationCidrBlock"},"DestinationIpv6CidrBlock":{"locationName":"destinationIpv6CidrBlock"},"DestinationPrefixListId":{},"DryRun":{"locationName":"dryRun","type":"boolean"},"VpcEndpointId":{},"EgressOnlyInternetGatewayId":{"locationName":"egressOnlyInternetGatewayId"},"GatewayId":{"locationName":"gatewayId"},"InstanceId":{"locationName":"instanceId"},"LocalTarget":{"type":"boolean"},"NatGatewayId":{"locationName":"natGatewayId"},"TransitGatewayId":{},"LocalGatewayId":{},"CarrierGatewayId":{},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"RouteTableId":{"locationName":"routeTableId"},"VpcPeeringConnectionId":{"locationName":"vpcPeeringConnectionId"}}}},"ReplaceRouteTableAssociation":{"input":{"type":"structure","required":["AssociationId","RouteTableId"],"members":{"AssociationId":{"locationName":"associationId"},"DryRun":{"locationName":"dryRun","type":"boolean"},"RouteTableId":{"locationName":"routeTableId"}}},"output":{"type":"structure","members":{"NewAssociationId":{"locationName":"newAssociationId"},"AssociationState":{"shape":"S3n","locationName":"associationState"}}}},"ReplaceTransitGatewayRoute":{"input":{"type":"structure","required":["DestinationCidrBlock","TransitGatewayRouteTableId"],"members":{"DestinationCidrBlock":{},"TransitGatewayRouteTableId":{},"TransitGatewayAttachmentId":{},"Blackhole":{"type":"boolean"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Route":{"shape":"Sj6","locationName":"route"}}}},"ReportInstanceStatus":{"input":{"type":"structure","required":["Instances","ReasonCodes","Status"],"members":{"Description":{"locationName":"description"},"DryRun":{"locationName":"dryRun","type":"boolean"},"EndTime":{"locationName":"endTime","type":"timestamp"},"Instances":{"shape":"Srh","locationName":"instanceId"},"ReasonCodes":{"locationName":"reasonCode","type":"list","member":{"locationName":"item"}},"StartTime":{"locationName":"startTime","type":"timestamp"},"Status":{"locationName":"status"}}}},"RequestSpotFleet":{"input":{"type":"structure","required":["SpotFleetRequestConfig"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"SpotFleetRequestConfig":{"shape":"S19s","locationName":"spotFleetRequestConfig"}}},"output":{"type":"structure","members":{"SpotFleetRequestId":{"locationName":"spotFleetRequestId"}}}},"RequestSpotInstances":{"input":{"type":"structure","members":{"AvailabilityZoneGroup":{"locationName":"availabilityZoneGroup"},"BlockDurationMinutes":{"locationName":"blockDurationMinutes","type":"integer"},"ClientToken":{"locationName":"clientToken"},"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceCount":{"locationName":"instanceCount","type":"integer"},"LaunchGroup":{"locationName":"launchGroup"},"LaunchSpecification":{"type":"structure","members":{"SecurityGroupIds":{"locationName":"SecurityGroupId","type":"list","member":{"locationName":"item"}},"SecurityGroups":{"locationName":"SecurityGroup","type":"list","member":{"locationName":"item"}},"AddressingType":{"locationName":"addressingType"},"BlockDeviceMappings":{"shape":"Sx2","locationName":"blockDeviceMapping"},"EbsOptimized":{"locationName":"ebsOptimized","type":"boolean"},"IamInstanceProfile":{"shape":"S2z","locationName":"iamInstanceProfile"},"ImageId":{"locationName":"imageId"},"InstanceType":{"locationName":"instanceType"},"KernelId":{"locationName":"kernelId"},"KeyName":{"locationName":"keyName"},"Monitoring":{"shape":"S1an","locationName":"monitoring"},"NetworkInterfaces":{"shape":"S1a2","locationName":"NetworkInterface"},"Placement":{"shape":"S1a4","locationName":"placement"},"RamdiskId":{"locationName":"ramdiskId"},"SubnetId":{"locationName":"subnetId"},"UserData":{"locationName":"userData"}}},"SpotPrice":{"locationName":"spotPrice"},"Type":{"locationName":"type"},"ValidFrom":{"locationName":"validFrom","type":"timestamp"},"ValidUntil":{"locationName":"validUntil","type":"timestamp"},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"},"InstanceInterruptionBehavior":{}}},"output":{"type":"structure","members":{"SpotInstanceRequests":{"shape":"S1ak","locationName":"spotInstanceRequestSet"}}}},"ResetAddressAttribute":{"input":{"type":"structure","required":["AllocationId","Attribute"],"members":{"AllocationId":{},"Attribute":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Address":{"shape":"Sqi","locationName":"address"}}}},"ResetEbsDefaultKmsKeyId":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"KmsKeyId":{"locationName":"kmsKeyId"}}}},"ResetFpgaImageAttribute":{"input":{"type":"structure","required":["FpgaImageId"],"members":{"DryRun":{"type":"boolean"},"FpgaImageId":{},"Attribute":{}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"ResetImageAttribute":{"input":{"type":"structure","required":["Attribute","ImageId"],"members":{"Attribute":{},"ImageId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"ResetInstanceAttribute":{"input":{"type":"structure","required":["Attribute","InstanceId"],"members":{"Attribute":{"locationName":"attribute"},"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceId":{"locationName":"instanceId"}}}},"ResetNetworkInterfaceAttribute":{"input":{"type":"structure","required":["NetworkInterfaceId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"SourceDestCheck":{"locationName":"sourceDestCheck"}}}},"ResetSnapshotAttribute":{"input":{"type":"structure","required":["Attribute","SnapshotId"],"members":{"Attribute":{},"SnapshotId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"RestoreAddressToClassic":{"input":{"type":"structure","required":["PublicIp"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"PublicIp":{"locationName":"publicIp"}}},"output":{"type":"structure","members":{"PublicIp":{"locationName":"publicIp"},"Status":{"locationName":"status"}}}},"RestoreManagedPrefixListVersion":{"input":{"type":"structure","required":["PrefixListId","PreviousVersion","CurrentVersion"],"members":{"DryRun":{"type":"boolean"},"PrefixListId":{},"PreviousVersion":{"type":"long"},"CurrentVersion":{"type":"long"}}},"output":{"type":"structure","members":{"PrefixList":{"shape":"Se3","locationName":"prefixList"}}}},"RevokeClientVpnIngress":{"input":{"type":"structure","required":["ClientVpnEndpointId","TargetNetworkCidr"],"members":{"ClientVpnEndpointId":{},"TargetNetworkCidr":{},"AccessGroupId":{},"RevokeAllGroups":{"type":"boolean"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Status":{"shape":"S4x","locationName":"status"}}}},"RevokeSecurityGroupEgress":{"input":{"type":"structure","required":["GroupId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"GroupId":{"locationName":"groupId"},"IpPermissions":{"shape":"S50","locationName":"ipPermissions"},"SecurityGroupRuleIds":{"shape":"S18t","locationName":"SecurityGroupRuleId"},"CidrIp":{"locationName":"cidrIp"},"FromPort":{"locationName":"fromPort","type":"integer"},"IpProtocol":{"locationName":"ipProtocol"},"ToPort":{"locationName":"toPort","type":"integer"},"SourceSecurityGroupName":{"locationName":"sourceSecurityGroupName"},"SourceSecurityGroupOwnerId":{"locationName":"sourceSecurityGroupOwnerId"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"},"UnknownIpPermissions":{"shape":"S50","locationName":"unknownIpPermissionSet"}}}},"RevokeSecurityGroupIngress":{"input":{"type":"structure","members":{"CidrIp":{},"FromPort":{"type":"integer"},"GroupId":{},"GroupName":{},"IpPermissions":{"shape":"S50"},"IpProtocol":{},"SourceSecurityGroupName":{},"SourceSecurityGroupOwnerId":{},"ToPort":{"type":"integer"},"DryRun":{"locationName":"dryRun","type":"boolean"},"SecurityGroupRuleIds":{"shape":"S18t","locationName":"SecurityGroupRuleId"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"},"UnknownIpPermissions":{"shape":"S50","locationName":"unknownIpPermissionSet"}}}},"RunInstances":{"input":{"type":"structure","required":["MaxCount","MinCount"],"members":{"BlockDeviceMappings":{"shape":"Sae","locationName":"BlockDeviceMapping"},"ImageId":{},"InstanceType":{},"Ipv6AddressCount":{"type":"integer"},"Ipv6Addresses":{"shape":"Scy","locationName":"Ipv6Address"},"KernelId":{},"KeyName":{},"MaxCount":{"type":"integer"},"MinCount":{"type":"integer"},"Monitoring":{"shape":"S1an"},"Placement":{"shape":"S9m"},"RamdiskId":{},"SecurityGroupIds":{"shape":"Sbe","locationName":"SecurityGroupId"},"SecurityGroups":{"shape":"Sc1","locationName":"SecurityGroup"},"SubnetId":{},"UserData":{},"AdditionalInfo":{"locationName":"additionalInfo"},"ClientToken":{"idempotencyToken":true,"locationName":"clientToken"},"DisableApiTermination":{"locationName":"disableApiTermination","type":"boolean"},"DryRun":{"locationName":"dryRun","type":"boolean"},"EbsOptimized":{"locationName":"ebsOptimized","type":"boolean"},"IamInstanceProfile":{"shape":"S2z","locationName":"iamInstanceProfile"},"InstanceInitiatedShutdownBehavior":{"locationName":"instanceInitiatedShutdownBehavior"},"NetworkInterfaces":{"shape":"S1a2","locationName":"networkInterface"},"PrivateIpAddress":{"locationName":"privateIpAddress"},"ElasticGpuSpecification":{"type":"list","member":{"shape":"Sbx","locationName":"item"}},"ElasticInferenceAccelerators":{"locationName":"ElasticInferenceAccelerator","type":"list","member":{"locationName":"item","type":"structure","required":["Type"],"members":{"Type":{},"Count":{"type":"integer"}}}},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"},"LaunchTemplate":{"type":"structure","members":{"LaunchTemplateId":{},"LaunchTemplateName":{},"Version":{}}},"InstanceMarketOptions":{"type":"structure","members":{"MarketType":{},"SpotOptions":{"type":"structure","members":{"MaxPrice":{},"SpotInstanceType":{},"BlockDurationMinutes":{"type":"integer"},"ValidUntil":{"type":"timestamp"},"InstanceInterruptionBehavior":{}}}}},"CreditSpecification":{"shape":"Sc7"},"CpuOptions":{"type":"structure","members":{"CoreCount":{"type":"integer"},"ThreadsPerCore":{"type":"integer"}}},"CapacityReservationSpecification":{"shape":"S1m4"},"HibernationOptions":{"type":"structure","members":{"Configured":{"type":"boolean"}}},"LicenseSpecifications":{"locationName":"LicenseSpecification","type":"list","member":{"locationName":"item","type":"structure","members":{"LicenseConfigurationArn":{}}}},"MetadataOptions":{"type":"structure","members":{"HttpTokens":{},"HttpPutResponseHopLimit":{"type":"integer"},"HttpEndpoint":{}}},"EnclaveOptions":{"type":"structure","members":{"Enabled":{"type":"boolean"}}}}},"output":{"shape":"S11x"}},"RunScheduledInstances":{"input":{"type":"structure","required":["LaunchSpecification","ScheduledInstanceId"],"members":{"ClientToken":{"idempotencyToken":true},"DryRun":{"type":"boolean"},"InstanceCount":{"type":"integer"},"LaunchSpecification":{"type":"structure","required":["ImageId"],"members":{"BlockDeviceMappings":{"locationName":"BlockDeviceMapping","type":"list","member":{"locationName":"BlockDeviceMapping","type":"structure","members":{"DeviceName":{},"Ebs":{"type":"structure","members":{"DeleteOnTermination":{"type":"boolean"},"Encrypted":{"type":"boolean"},"Iops":{"type":"integer"},"SnapshotId":{},"VolumeSize":{"type":"integer"},"VolumeType":{}}},"NoDevice":{},"VirtualName":{}}}},"EbsOptimized":{"type":"boolean"},"IamInstanceProfile":{"type":"structure","members":{"Arn":{},"Name":{}}},"ImageId":{},"InstanceType":{},"KernelId":{},"KeyName":{},"Monitoring":{"type":"structure","members":{"Enabled":{"type":"boolean"}}},"NetworkInterfaces":{"locationName":"NetworkInterface","type":"list","member":{"locationName":"NetworkInterface","type":"structure","members":{"AssociatePublicIpAddress":{"type":"boolean"},"DeleteOnTermination":{"type":"boolean"},"Description":{},"DeviceIndex":{"type":"integer"},"Groups":{"shape":"S1rq","locationName":"Group"},"Ipv6AddressCount":{"type":"integer"},"Ipv6Addresses":{"locationName":"Ipv6Address","type":"list","member":{"locationName":"Ipv6Address","type":"structure","members":{"Ipv6Address":{}}}},"NetworkInterfaceId":{},"PrivateIpAddress":{},"PrivateIpAddressConfigs":{"locationName":"PrivateIpAddressConfig","type":"list","member":{"locationName":"PrivateIpAddressConfigSet","type":"structure","members":{"Primary":{"type":"boolean"},"PrivateIpAddress":{}}}},"SecondaryPrivateIpAddressCount":{"type":"integer"},"SubnetId":{}}}},"Placement":{"type":"structure","members":{"AvailabilityZone":{},"GroupName":{}}},"RamdiskId":{},"SecurityGroupIds":{"shape":"S1rq","locationName":"SecurityGroupId"},"SubnetId":{},"UserData":{}}},"ScheduledInstanceId":{}}},"output":{"type":"structure","members":{"InstanceIdSet":{"locationName":"instanceIdSet","type":"list","member":{"locationName":"item"}}}}},"SearchLocalGatewayRoutes":{"input":{"type":"structure","required":["LocalGatewayRouteTableId","Filters"],"members":{"LocalGatewayRouteTableId":{},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Routes":{"locationName":"routeSet","type":"list","member":{"shape":"Sds","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"SearchTransitGatewayMulticastGroups":{"input":{"type":"structure","members":{"TransitGatewayMulticastDomainId":{},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"MulticastGroups":{"locationName":"multicastGroups","type":"list","member":{"locationName":"item","type":"structure","members":{"GroupIpAddress":{"locationName":"groupIpAddress"},"TransitGatewayAttachmentId":{"locationName":"transitGatewayAttachmentId"},"SubnetId":{"locationName":"subnetId"},"ResourceId":{"locationName":"resourceId"},"ResourceType":{"locationName":"resourceType"},"ResourceOwnerId":{"locationName":"resourceOwnerId"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"GroupMember":{"locationName":"groupMember","type":"boolean"},"GroupSource":{"locationName":"groupSource","type":"boolean"},"MemberType":{"locationName":"memberType"},"SourceType":{"locationName":"sourceType"}}}},"NextToken":{"locationName":"nextToken"}}}},"SearchTransitGatewayRoutes":{"input":{"type":"structure","required":["TransitGatewayRouteTableId","Filters"],"members":{"TransitGatewayRouteTableId":{},"Filters":{"shape":"Sq4","locationName":"Filter"},"MaxResults":{"type":"integer"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Routes":{"locationName":"routeSet","type":"list","member":{"shape":"Sj6","locationName":"item"}},"AdditionalRoutesAvailable":{"locationName":"additionalRoutesAvailable","type":"boolean"}}}},"SendDiagnosticInterrupt":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{},"DryRun":{"type":"boolean"}}}},"StartInstances":{"input":{"type":"structure","required":["InstanceIds"],"members":{"InstanceIds":{"shape":"Srh","locationName":"InstanceId"},"AdditionalInfo":{"locationName":"additionalInfo"},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"StartingInstances":{"shape":"S1se","locationName":"instancesSet"}}}},"StartNetworkInsightsAnalysis":{"input":{"type":"structure","required":["NetworkInsightsPathId","ClientToken"],"members":{"NetworkInsightsPathId":{},"FilterInArns":{"shape":"S154","locationName":"FilterInArn"},"DryRun":{"type":"boolean"},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"},"ClientToken":{"idempotencyToken":true}}},"output":{"type":"structure","members":{"NetworkInsightsAnalysis":{"shape":"S153","locationName":"networkInsightsAnalysis"}}}},"StartVpcEndpointServicePrivateDnsVerification":{"input":{"type":"structure","required":["ServiceId"],"members":{"DryRun":{"type":"boolean"},"ServiceId":{}}},"output":{"type":"structure","members":{"ReturnValue":{"locationName":"return","type":"boolean"}}}},"StopInstances":{"input":{"type":"structure","required":["InstanceIds"],"members":{"InstanceIds":{"shape":"Srh","locationName":"InstanceId"},"Hibernate":{"type":"boolean"},"DryRun":{"locationName":"dryRun","type":"boolean"},"Force":{"locationName":"force","type":"boolean"}}},"output":{"type":"structure","members":{"StoppingInstances":{"shape":"S1se","locationName":"instancesSet"}}}},"TerminateClientVpnConnections":{"input":{"type":"structure","required":["ClientVpnEndpointId"],"members":{"ClientVpnEndpointId":{},"ConnectionId":{},"Username":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"ClientVpnEndpointId":{"locationName":"clientVpnEndpointId"},"Username":{"locationName":"username"},"ConnectionStatuses":{"locationName":"connectionStatuses","type":"list","member":{"locationName":"item","type":"structure","members":{"ConnectionId":{"locationName":"connectionId"},"PreviousStatus":{"shape":"Srw","locationName":"previousStatus"},"CurrentStatus":{"shape":"Srw","locationName":"currentStatus"}}}}}}},"TerminateInstances":{"input":{"type":"structure","required":["InstanceIds"],"members":{"InstanceIds":{"shape":"Srh","locationName":"InstanceId"},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"TerminatingInstances":{"shape":"S1se","locationName":"instancesSet"}}}},"UnassignIpv6Addresses":{"input":{"type":"structure","required":["NetworkInterfaceId"],"members":{"Ipv6Addresses":{"shape":"S29","locationName":"ipv6Addresses"},"Ipv6Prefixes":{"shape":"S2a","locationName":"Ipv6Prefix"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"}}},"output":{"type":"structure","members":{"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"UnassignedIpv6Addresses":{"shape":"S29","locationName":"unassignedIpv6Addresses"},"UnassignedIpv6Prefixes":{"shape":"S2a","locationName":"unassignedIpv6PrefixSet"}}}},"UnassignPrivateIpAddresses":{"input":{"type":"structure","required":["NetworkInterfaceId"],"members":{"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"PrivateIpAddresses":{"shape":"S2e","locationName":"privateIpAddress"},"Ipv4Prefixes":{"shape":"S2a","locationName":"Ipv4Prefix"}}}},"UnmonitorInstances":{"input":{"type":"structure","required":["InstanceIds"],"members":{"InstanceIds":{"shape":"Srh","locationName":"InstanceId"},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"InstanceMonitorings":{"shape":"S1on","locationName":"instancesSet"}}}},"UpdateSecurityGroupRuleDescriptionsEgress":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"GroupId":{},"GroupName":{},"IpPermissions":{"shape":"S50"},"SecurityGroupRuleDescriptions":{"shape":"S1sy","locationName":"SecurityGroupRuleDescription"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"UpdateSecurityGroupRuleDescriptionsIngress":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"GroupId":{},"GroupName":{},"IpPermissions":{"shape":"S50"},"SecurityGroupRuleDescriptions":{"shape":"S1sy","locationName":"SecurityGroupRuleDescription"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"WithdrawByoipCidr":{"input":{"type":"structure","required":["Cidr"],"members":{"Cidr":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"ByoipCidr":{"shape":"S1n","locationName":"byoipCidr"}}}}},"shapes":{"S3":{"type":"list","member":{"locationName":"ReservedInstanceId"}},"S5":{"type":"list","member":{"locationName":"TargetConfigurationRequest","type":"structure","required":["OfferingId"],"members":{"InstanceCount":{"type":"integer"},"OfferingId":{}}}},"Se":{"type":"list","member":{"locationName":"item"}},"Sg":{"type":"structure","members":{"TransitGatewayMulticastDomainId":{"locationName":"transitGatewayMulticastDomainId"},"TransitGatewayAttachmentId":{"locationName":"transitGatewayAttachmentId"},"ResourceId":{"locationName":"resourceId"},"ResourceType":{"locationName":"resourceType"},"ResourceOwnerId":{"locationName":"resourceOwnerId"},"Subnets":{"locationName":"subnets","type":"list","member":{"shape":"Sj","locationName":"item"}}}},"Sj":{"type":"structure","members":{"SubnetId":{"locationName":"subnetId"},"State":{"locationName":"state"}}},"Sn":{"type":"structure","members":{"TransitGatewayAttachmentId":{"locationName":"transitGatewayAttachmentId"},"RequesterTgwInfo":{"shape":"So","locationName":"requesterTgwInfo"},"AccepterTgwInfo":{"shape":"So","locationName":"accepterTgwInfo"},"Status":{"locationName":"status","type":"structure","members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"}}},"State":{"locationName":"state"},"CreationTime":{"locationName":"creationTime","type":"timestamp"},"Tags":{"shape":"Ss","locationName":"tagSet"}}},"So":{"type":"structure","members":{"TransitGatewayId":{"locationName":"transitGatewayId"},"OwnerId":{"locationName":"ownerId"},"Region":{"locationName":"region"}}},"Ss":{"type":"list","member":{"locationName":"item","type":"structure","members":{"Key":{"locationName":"key"},"Value":{"locationName":"value"}}}},"Sw":{"type":"structure","members":{"TransitGatewayAttachmentId":{"locationName":"transitGatewayAttachmentId"},"TransitGatewayId":{"locationName":"transitGatewayId"},"VpcId":{"locationName":"vpcId"},"VpcOwnerId":{"locationName":"vpcOwnerId"},"State":{"locationName":"state"},"SubnetIds":{"shape":"Se","locationName":"subnetIds"},"CreationTime":{"locationName":"creationTime","type":"timestamp"},"Options":{"locationName":"options","type":"structure","members":{"DnsSupport":{"locationName":"dnsSupport"},"Ipv6Support":{"locationName":"ipv6Support"},"ApplianceModeSupport":{"locationName":"applianceModeSupport"}}},"Tags":{"shape":"Ss","locationName":"tagSet"}}},"S13":{"type":"list","member":{"locationName":"item"}},"S16":{"type":"list","member":{"shape":"S17","locationName":"item"}},"S17":{"type":"structure","members":{"Error":{"locationName":"error","type":"structure","members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"}}},"ResourceId":{"locationName":"resourceId"}}},"S1c":{"type":"structure","members":{"AccepterVpcInfo":{"shape":"S1d","locationName":"accepterVpcInfo"},"ExpirationTime":{"locationName":"expirationTime","type":"timestamp"},"RequesterVpcInfo":{"shape":"S1d","locationName":"requesterVpcInfo"},"Status":{"locationName":"status","type":"structure","members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"}}},"Tags":{"shape":"Ss","locationName":"tagSet"},"VpcPeeringConnectionId":{"locationName":"vpcPeeringConnectionId"}}},"S1d":{"type":"structure","members":{"CidrBlock":{"locationName":"cidrBlock"},"Ipv6CidrBlockSet":{"locationName":"ipv6CidrBlockSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Ipv6CidrBlock":{"locationName":"ipv6CidrBlock"}}}},"CidrBlockSet":{"locationName":"cidrBlockSet","type":"list","member":{"locationName":"item","type":"structure","members":{"CidrBlock":{"locationName":"cidrBlock"}}}},"OwnerId":{"locationName":"ownerId"},"PeeringOptions":{"locationName":"peeringOptions","type":"structure","members":{"AllowDnsResolutionFromRemoteVpc":{"locationName":"allowDnsResolutionFromRemoteVpc","type":"boolean"},"AllowEgressFromLocalClassicLinkToRemoteVpc":{"locationName":"allowEgressFromLocalClassicLinkToRemoteVpc","type":"boolean"},"AllowEgressFromLocalVpcToRemoteClassicLink":{"locationName":"allowEgressFromLocalVpcToRemoteClassicLink","type":"boolean"}}},"VpcId":{"locationName":"vpcId"},"Region":{"locationName":"region"}}},"S1n":{"type":"structure","members":{"Cidr":{"locationName":"cidr"},"Description":{"locationName":"description"},"StatusMessage":{"locationName":"statusMessage"},"State":{"locationName":"state"}}},"S1t":{"type":"list","member":{"locationName":"item","type":"structure","members":{"ResourceType":{"locationName":"resourceType"},"Tags":{"shape":"Ss","locationName":"Tag"}}}},"S21":{"type":"list","member":{"locationName":"item"}},"S25":{"type":"list","member":{"locationName":"item"}},"S29":{"type":"list","member":{"locationName":"item"}},"S2a":{"type":"list","member":{"locationName":"item"}},"S2e":{"type":"list","member":{"locationName":"PrivateIpAddress"}},"S2i":{"type":"list","member":{"locationName":"item","type":"structure","members":{"Ipv4Prefix":{"locationName":"ipv4Prefix"}}}},"S2r":{"type":"structure","members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"}}},"S2z":{"type":"structure","members":{"Arn":{"locationName":"arn"},"Name":{"locationName":"name"}}},"S31":{"type":"structure","members":{"AssociationId":{"locationName":"associationId"},"InstanceId":{"locationName":"instanceId"},"IamInstanceProfile":{"shape":"S32","locationName":"iamInstanceProfile"},"State":{"locationName":"state"},"Timestamp":{"locationName":"timestamp","type":"timestamp"}}},"S32":{"type":"structure","members":{"Arn":{"locationName":"arn"},"Id":{"locationName":"id"}}},"S37":{"type":"list","member":{"locationName":"item"}},"S38":{"type":"list","member":{"locationName":"item"}},"S3b":{"type":"structure","members":{"InstanceEventWindowId":{"locationName":"instanceEventWindowId"},"TimeRanges":{"locationName":"timeRangeSet","type":"list","member":{"locationName":"item","type":"structure","members":{"StartWeekDay":{"locationName":"startWeekDay"},"StartHour":{"locationName":"startHour","type":"integer"},"EndWeekDay":{"locationName":"endWeekDay"},"EndHour":{"locationName":"endHour","type":"integer"}}}},"Name":{"locationName":"name"},"CronExpression":{"locationName":"cronExpression"},"AssociationTarget":{"locationName":"associationTarget","type":"structure","members":{"InstanceIds":{"shape":"S37","locationName":"instanceIdSet"},"Tags":{"shape":"Ss","locationName":"tagSet"},"DedicatedHostIds":{"shape":"S38","locationName":"dedicatedHostIdSet"}}},"State":{"locationName":"state"},"Tags":{"shape":"Ss","locationName":"tagSet"}}},"S3n":{"type":"structure","members":{"State":{"locationName":"state"},"StatusMessage":{"locationName":"statusMessage"}}},"S3r":{"type":"structure","members":{"AssociationId":{"locationName":"associationId"},"Ipv6CidrBlock":{"locationName":"ipv6CidrBlock"},"Ipv6CidrBlockState":{"locationName":"ipv6CidrBlockState","type":"structure","members":{"State":{"locationName":"state"},"StatusMessage":{"locationName":"statusMessage"}}}}},"S3w":{"type":"list","member":{"locationName":"item"}},"S41":{"type":"structure","members":{"TransitGatewayRouteTableId":{"locationName":"transitGatewayRouteTableId"},"TransitGatewayAttachmentId":{"locationName":"transitGatewayAttachmentId"},"ResourceId":{"locationName":"resourceId"},"ResourceType":{"locationName":"resourceType"},"State":{"locationName":"state"}}},"S45":{"type":"structure","members":{"AssociationId":{"locationName":"associationId"},"BranchInterfaceId":{"locationName":"branchInterfaceId"},"TrunkInterfaceId":{"locationName":"trunkInterfaceId"},"InterfaceProtocol":{"locationName":"interfaceProtocol"},"VlanId":{"locationName":"vlanId","type":"integer"},"GreKey":{"locationName":"greKey","type":"integer"},"Tags":{"shape":"Ss","locationName":"tagSet"}}},"S4b":{"type":"structure","members":{"AssociationId":{"locationName":"associationId"},"Ipv6CidrBlock":{"locationName":"ipv6CidrBlock"},"Ipv6CidrBlockState":{"shape":"S4c","locationName":"ipv6CidrBlockState"},"NetworkBorderGroup":{"locationName":"networkBorderGroup"},"Ipv6Pool":{"locationName":"ipv6Pool"}}},"S4c":{"type":"structure","members":{"State":{"locationName":"state"},"StatusMessage":{"locationName":"statusMessage"}}},"S4e":{"type":"structure","members":{"AssociationId":{"locationName":"associationId"},"CidrBlock":{"locationName":"cidrBlock"},"CidrBlockState":{"shape":"S4c","locationName":"cidrBlockState"}}},"S4g":{"type":"list","member":{"locationName":"groupId"}},"S4o":{"type":"structure","members":{"AttachTime":{"locationName":"attachTime","type":"timestamp"},"Device":{"locationName":"device"},"InstanceId":{"locationName":"instanceId"},"State":{"locationName":"status"},"VolumeId":{"locationName":"volumeId"},"DeleteOnTermination":{"locationName":"deleteOnTermination","type":"boolean"}}},"S4t":{"type":"structure","members":{"State":{"locationName":"state"},"VpcId":{"locationName":"vpcId"}}},"S4x":{"type":"structure","members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"}}},"S50":{"type":"list","member":{"locationName":"item","type":"structure","members":{"FromPort":{"locationName":"fromPort","type":"integer"},"IpProtocol":{"locationName":"ipProtocol"},"IpRanges":{"locationName":"ipRanges","type":"list","member":{"locationName":"item","type":"structure","members":{"CidrIp":{"locationName":"cidrIp"},"Description":{"locationName":"description"}}}},"Ipv6Ranges":{"locationName":"ipv6Ranges","type":"list","member":{"locationName":"item","type":"structure","members":{"CidrIpv6":{"locationName":"cidrIpv6"},"Description":{"locationName":"description"}}}},"PrefixListIds":{"locationName":"prefixListIds","type":"list","member":{"locationName":"item","type":"structure","members":{"Description":{"locationName":"description"},"PrefixListId":{"locationName":"prefixListId"}}}},"ToPort":{"locationName":"toPort","type":"integer"},"UserIdGroupPairs":{"locationName":"groups","type":"list","member":{"shape":"S59","locationName":"item"}}}}},"S59":{"type":"structure","members":{"Description":{"locationName":"description"},"GroupId":{"locationName":"groupId"},"GroupName":{"locationName":"groupName"},"PeeringStatus":{"locationName":"peeringStatus"},"UserId":{"locationName":"userId"},"VpcId":{"locationName":"vpcId"},"VpcPeeringConnectionId":{"locationName":"vpcPeeringConnectionId"}}},"S5b":{"type":"list","member":{"locationName":"item","type":"structure","members":{"SecurityGroupRuleId":{"locationName":"securityGroupRuleId"},"GroupId":{"locationName":"groupId"},"GroupOwnerId":{"locationName":"groupOwnerId"},"IsEgress":{"locationName":"isEgress","type":"boolean"},"IpProtocol":{"locationName":"ipProtocol"},"FromPort":{"locationName":"fromPort","type":"integer"},"ToPort":{"locationName":"toPort","type":"integer"},"CidrIpv4":{"locationName":"cidrIpv4"},"CidrIpv6":{"locationName":"cidrIpv6"},"PrefixListId":{"locationName":"prefixListId"},"ReferencedGroupInfo":{"locationName":"referencedGroupInfo","type":"structure","members":{"GroupId":{"locationName":"groupId"},"PeeringStatus":{"locationName":"peeringStatus"},"UserId":{"locationName":"userId"},"VpcId":{"locationName":"vpcId"},"VpcPeeringConnectionId":{"locationName":"vpcPeeringConnectionId"}}},"Description":{"locationName":"description"},"Tags":{"shape":"Ss","locationName":"tagSet"}}}},"S5k":{"type":"structure","members":{"S3":{"type":"structure","members":{"AWSAccessKeyId":{},"Bucket":{"locationName":"bucket"},"Prefix":{"locationName":"prefix"},"UploadPolicy":{"locationName":"uploadPolicy","type":"blob"},"UploadPolicySignature":{"locationName":"uploadPolicySignature"}}}}},"S5o":{"type":"structure","members":{"BundleId":{"locationName":"bundleId"},"BundleTaskError":{"locationName":"error","type":"structure","members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"}}},"InstanceId":{"locationName":"instanceId"},"Progress":{"locationName":"progress"},"StartTime":{"locationName":"startTime","type":"timestamp"},"State":{"locationName":"state"},"Storage":{"shape":"S5k","locationName":"storage"},"UpdateTime":{"locationName":"updateTime","type":"timestamp"}}},"S67":{"type":"list","member":{"locationName":"item","type":"structure","members":{"ClientToken":{"locationName":"clientToken"},"CreateDate":{"locationName":"createDate","type":"timestamp"},"InstanceCounts":{"locationName":"instanceCounts","type":"list","member":{"locationName":"item","type":"structure","members":{"InstanceCount":{"locationName":"instanceCount","type":"integer"},"State":{"locationName":"state"}}}},"PriceSchedules":{"locationName":"priceSchedules","type":"list","member":{"locationName":"item","type":"structure","members":{"Active":{"locationName":"active","type":"boolean"},"CurrencyCode":{"locationName":"currencyCode"},"Price":{"locationName":"price","type":"double"},"Term":{"locationName":"term","type":"long"}}}},"ReservedInstancesId":{"locationName":"reservedInstancesId"},"ReservedInstancesListingId":{"locationName":"reservedInstancesListingId"},"Status":{"locationName":"status"},"StatusMessage":{"locationName":"statusMessage"},"Tags":{"shape":"Ss","locationName":"tagSet"},"UpdateDate":{"locationName":"updateDate","type":"timestamp"}}}},"S6j":{"type":"list","member":{"locationName":"item"}},"S6u":{"type":"list","member":{"locationName":"SpotInstanceRequestId"}},"S7g":{"type":"structure","members":{"CapacityReservationId":{"locationName":"capacityReservationId"},"OwnerId":{"locationName":"ownerId"},"CapacityReservationArn":{"locationName":"capacityReservationArn"},"AvailabilityZoneId":{"locationName":"availabilityZoneId"},"InstanceType":{"locationName":"instanceType"},"InstancePlatform":{"locationName":"instancePlatform"},"AvailabilityZone":{"locationName":"availabilityZone"},"Tenancy":{"locationName":"tenancy"},"TotalInstanceCount":{"locationName":"totalInstanceCount","type":"integer"},"AvailableInstanceCount":{"locationName":"availableInstanceCount","type":"integer"},"EbsOptimized":{"locationName":"ebsOptimized","type":"boolean"},"EphemeralStorage":{"locationName":"ephemeralStorage","type":"boolean"},"State":{"locationName":"state"},"StartDate":{"locationName":"startDate","type":"timestamp"},"EndDate":{"locationName":"endDate","type":"timestamp"},"EndDateType":{"locationName":"endDateType"},"InstanceMatchCriteria":{"locationName":"instanceMatchCriteria"},"CreateDate":{"locationName":"createDate","type":"timestamp"},"Tags":{"shape":"Ss","locationName":"tagSet"},"OutpostArn":{"locationName":"outpostArn"}}},"S7l":{"type":"structure","members":{"CarrierGatewayId":{"locationName":"carrierGatewayId"},"VpcId":{"locationName":"vpcId"},"State":{"locationName":"state"},"OwnerId":{"locationName":"ownerId"},"Tags":{"shape":"Ss","locationName":"tagSet"}}},"S7v":{"type":"structure","members":{"Enabled":{"type":"boolean"},"CloudwatchLogGroup":{},"CloudwatchLogStream":{}}},"S7y":{"type":"structure","members":{"Enabled":{"type":"boolean"},"LambdaFunctionArn":{}}},"S80":{"type":"structure","members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"}}},"S84":{"type":"structure","members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"}}},"S89":{"type":"structure","members":{"BgpAsn":{"locationName":"bgpAsn"},"CustomerGatewayId":{"locationName":"customerGatewayId"},"IpAddress":{"locationName":"ipAddress"},"CertificateArn":{"locationName":"certificateArn"},"State":{"locationName":"state"},"Type":{"locationName":"type"},"DeviceName":{"locationName":"deviceName"},"Tags":{"shape":"Ss","locationName":"tagSet"}}},"S8c":{"type":"structure","members":{"AvailabilityZone":{"locationName":"availabilityZone"},"AvailabilityZoneId":{"locationName":"availabilityZoneId"},"AvailableIpAddressCount":{"locationName":"availableIpAddressCount","type":"integer"},"CidrBlock":{"locationName":"cidrBlock"},"DefaultForAz":{"locationName":"defaultForAz","type":"boolean"},"MapPublicIpOnLaunch":{"locationName":"mapPublicIpOnLaunch","type":"boolean"},"MapCustomerOwnedIpOnLaunch":{"locationName":"mapCustomerOwnedIpOnLaunch","type":"boolean"},"CustomerOwnedIpv4Pool":{"locationName":"customerOwnedIpv4Pool"},"State":{"locationName":"state"},"SubnetId":{"locationName":"subnetId"},"VpcId":{"locationName":"vpcId"},"OwnerId":{"locationName":"ownerId"},"AssignIpv6AddressOnCreation":{"locationName":"assignIpv6AddressOnCreation","type":"boolean"},"Ipv6CidrBlockAssociationSet":{"locationName":"ipv6CidrBlockAssociationSet","type":"list","member":{"shape":"S3r","locationName":"item"}},"Tags":{"shape":"Ss","locationName":"tagSet"},"SubnetArn":{"locationName":"subnetArn"},"OutpostArn":{"locationName":"outpostArn"}}},"S8i":{"type":"structure","members":{"CidrBlock":{"locationName":"cidrBlock"},"DhcpOptionsId":{"locationName":"dhcpOptionsId"},"State":{"locationName":"state"},"VpcId":{"locationName":"vpcId"},"OwnerId":{"locationName":"ownerId"},"InstanceTenancy":{"locationName":"instanceTenancy"},"Ipv6CidrBlockAssociationSet":{"locationName":"ipv6CidrBlockAssociationSet","type":"list","member":{"shape":"S4b","locationName":"item"}},"CidrBlockAssociationSet":{"locationName":"cidrBlockAssociationSet","type":"list","member":{"shape":"S4e","locationName":"item"}},"IsDefault":{"locationName":"isDefault","type":"boolean"},"Tags":{"shape":"Ss","locationName":"tagSet"}}},"S8r":{"type":"structure","members":{"DhcpConfigurations":{"locationName":"dhcpConfigurationSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Key":{"locationName":"key"},"Values":{"locationName":"valueSet","type":"list","member":{"shape":"S8v","locationName":"item"}}}}},"DhcpOptionsId":{"locationName":"dhcpOptionsId"},"OwnerId":{"locationName":"ownerId"},"Tags":{"shape":"Ss","locationName":"tagSet"}}},"S8v":{"type":"structure","members":{"Value":{"locationName":"value"}}},"S8y":{"type":"structure","members":{"Attachments":{"shape":"S8z","locationName":"attachmentSet"},"EgressOnlyInternetGatewayId":{"locationName":"egressOnlyInternetGatewayId"},"Tags":{"shape":"Ss","locationName":"tagSet"}}},"S8z":{"type":"list","member":{"locationName":"item","type":"structure","members":{"State":{"locationName":"state"},"VpcId":{"locationName":"vpcId"}}}},"S9e":{"type":"list","member":{"locationName":"item","type":"structure","members":{"LaunchTemplateSpecification":{"type":"structure","members":{"LaunchTemplateId":{},"LaunchTemplateName":{},"Version":{}}},"Overrides":{"type":"list","member":{"locationName":"item","type":"structure","members":{"InstanceType":{},"MaxPrice":{},"SubnetId":{},"AvailabilityZone":{},"WeightedCapacity":{"type":"double"},"Priority":{"type":"double"},"Placement":{"shape":"S9m"}}}}}}},"S9m":{"type":"structure","members":{"AvailabilityZone":{"locationName":"availabilityZone"},"Affinity":{"locationName":"affinity"},"GroupName":{"locationName":"groupName"},"PartitionNumber":{"locationName":"partitionNumber","type":"integer"},"HostId":{"locationName":"hostId"},"Tenancy":{"locationName":"tenancy"},"SpreadDomain":{"locationName":"spreadDomain"},"HostResourceGroupArn":{"locationName":"hostResourceGroupArn"}}},"S9n":{"type":"structure","required":["TotalTargetCapacity"],"members":{"TotalTargetCapacity":{"type":"integer"},"OnDemandTargetCapacity":{"type":"integer"},"SpotTargetCapacity":{"type":"integer"},"DefaultTargetCapacityType":{}}},"S9u":{"type":"structure","members":{"LaunchTemplateSpecification":{"shape":"S9v","locationName":"launchTemplateSpecification"},"Overrides":{"shape":"S9w","locationName":"overrides"}}},"S9v":{"type":"structure","members":{"LaunchTemplateId":{"locationName":"launchTemplateId"},"LaunchTemplateName":{"locationName":"launchTemplateName"},"Version":{"locationName":"version"}}},"S9w":{"type":"structure","members":{"InstanceType":{"locationName":"instanceType"},"MaxPrice":{"locationName":"maxPrice"},"SubnetId":{"locationName":"subnetId"},"AvailabilityZone":{"locationName":"availabilityZone"},"WeightedCapacity":{"locationName":"weightedCapacity","type":"double"},"Priority":{"locationName":"priority","type":"double"},"Placement":{"locationName":"placement","type":"structure","members":{"GroupName":{"locationName":"groupName"}}}}},"Sa1":{"type":"list","member":{"locationName":"item"}},"Sab":{"type":"structure","members":{"Bucket":{},"Key":{}}},"Sae":{"type":"list","member":{"shape":"Saf","locationName":"BlockDeviceMapping"}},"Saf":{"type":"structure","members":{"DeviceName":{"locationName":"deviceName"},"VirtualName":{"locationName":"virtualName"},"Ebs":{"locationName":"ebs","type":"structure","members":{"DeleteOnTermination":{"locationName":"deleteOnTermination","type":"boolean"},"Iops":{"locationName":"iops","type":"integer"},"SnapshotId":{"locationName":"snapshotId"},"VolumeSize":{"locationName":"volumeSize","type":"integer"},"VolumeType":{"locationName":"volumeType"},"KmsKeyId":{},"Throughput":{"locationName":"throughput","type":"integer"},"OutpostArn":{"locationName":"outpostArn"},"Encrypted":{"locationName":"encrypted","type":"boolean"}}},"NoDevice":{"locationName":"noDevice"}}},"Sak":{"type":"list","member":{"type":"structure","members":{"StartWeekDay":{},"StartHour":{"type":"integer"},"EndWeekDay":{},"EndHour":{"type":"integer"}}}},"Sat":{"type":"structure","members":{"Description":{"locationName":"description"},"ExportTaskId":{"locationName":"exportTaskId"},"ExportToS3Task":{"locationName":"exportToS3","type":"structure","members":{"ContainerFormat":{"locationName":"containerFormat"},"DiskImageFormat":{"locationName":"diskImageFormat"},"S3Bucket":{"locationName":"s3Bucket"},"S3Key":{"locationName":"s3Key"}}},"InstanceExportDetails":{"locationName":"instanceExport","type":"structure","members":{"InstanceId":{"locationName":"instanceId"},"TargetEnvironment":{"locationName":"targetEnvironment"}}},"State":{"locationName":"state"},"StatusMessage":{"locationName":"statusMessage"},"Tags":{"shape":"Ss","locationName":"tagSet"}}},"Saz":{"type":"structure","members":{"Attachments":{"shape":"S8z","locationName":"attachmentSet"},"InternetGatewayId":{"locationName":"internetGatewayId"},"OwnerId":{"locationName":"ownerId"},"Tags":{"shape":"Ss","locationName":"tagSet"}}},"Sb5":{"type":"structure","members":{"KernelId":{},"EbsOptimized":{"type":"boolean"},"IamInstanceProfile":{"type":"structure","members":{"Arn":{},"Name":{}}},"BlockDeviceMappings":{"locationName":"BlockDeviceMapping","type":"list","member":{"locationName":"BlockDeviceMapping","type":"structure","members":{"DeviceName":{},"VirtualName":{},"Ebs":{"type":"structure","members":{"Encrypted":{"type":"boolean"},"DeleteOnTermination":{"type":"boolean"},"Iops":{"type":"integer"},"KmsKeyId":{},"SnapshotId":{},"VolumeSize":{"type":"integer"},"VolumeType":{},"Throughput":{"type":"integer"}}},"NoDevice":{}}}},"NetworkInterfaces":{"locationName":"NetworkInterface","type":"list","member":{"locationName":"InstanceNetworkInterfaceSpecification","type":"structure","members":{"AssociateCarrierIpAddress":{"type":"boolean"},"AssociatePublicIpAddress":{"type":"boolean"},"DeleteOnTermination":{"type":"boolean"},"Description":{},"DeviceIndex":{"type":"integer"},"Groups":{"shape":"Sbe","locationName":"SecurityGroupId"},"InterfaceType":{},"Ipv6AddressCount":{"type":"integer"},"Ipv6Addresses":{"type":"list","member":{"locationName":"InstanceIpv6Address","type":"structure","members":{"Ipv6Address":{}}}},"NetworkInterfaceId":{},"PrivateIpAddress":{},"PrivateIpAddresses":{"shape":"Sbh"},"SecondaryPrivateIpAddressCount":{"type":"integer"},"SubnetId":{},"NetworkCardIndex":{"type":"integer"},"Ipv4Prefixes":{"shape":"Sbj","locationName":"Ipv4Prefix"},"Ipv4PrefixCount":{"type":"integer"},"Ipv6Prefixes":{"shape":"Sbl","locationName":"Ipv6Prefix"},"Ipv6PrefixCount":{"type":"integer"}}}},"ImageId":{},"InstanceType":{},"KeyName":{},"Monitoring":{"type":"structure","members":{"Enabled":{"type":"boolean"}}},"Placement":{"type":"structure","members":{"AvailabilityZone":{},"Affinity":{},"GroupName":{},"HostId":{},"Tenancy":{},"SpreadDomain":{},"HostResourceGroupArn":{},"PartitionNumber":{"type":"integer"}}},"RamDiskId":{},"DisableApiTermination":{"type":"boolean"},"InstanceInitiatedShutdownBehavior":{},"UserData":{},"TagSpecifications":{"locationName":"TagSpecification","type":"list","member":{"locationName":"LaunchTemplateTagSpecificationRequest","type":"structure","members":{"ResourceType":{},"Tags":{"shape":"Ss","locationName":"Tag"}}}},"ElasticGpuSpecifications":{"locationName":"ElasticGpuSpecification","type":"list","member":{"shape":"Sbx","locationName":"ElasticGpuSpecification"}},"ElasticInferenceAccelerators":{"locationName":"ElasticInferenceAccelerator","type":"list","member":{"locationName":"item","type":"structure","required":["Type"],"members":{"Type":{},"Count":{"type":"integer"}}}},"SecurityGroupIds":{"shape":"Sbe","locationName":"SecurityGroupId"},"SecurityGroups":{"shape":"Sc1","locationName":"SecurityGroup"},"InstanceMarketOptions":{"type":"structure","members":{"MarketType":{},"SpotOptions":{"type":"structure","members":{"MaxPrice":{},"SpotInstanceType":{},"BlockDurationMinutes":{"type":"integer"},"ValidUntil":{"type":"timestamp"},"InstanceInterruptionBehavior":{}}}}},"CreditSpecification":{"shape":"Sc7"},"CpuOptions":{"type":"structure","members":{"CoreCount":{"type":"integer"},"ThreadsPerCore":{"type":"integer"}}},"CapacityReservationSpecification":{"type":"structure","members":{"CapacityReservationPreference":{},"CapacityReservationTarget":{"shape":"Scb"}}},"LicenseSpecifications":{"locationName":"LicenseSpecification","type":"list","member":{"locationName":"item","type":"structure","members":{"LicenseConfigurationArn":{}}}},"HibernationOptions":{"type":"structure","members":{"Configured":{"type":"boolean"}}},"MetadataOptions":{"type":"structure","members":{"HttpTokens":{},"HttpPutResponseHopLimit":{"type":"integer"},"HttpEndpoint":{}}},"EnclaveOptions":{"type":"structure","members":{"Enabled":{"type":"boolean"}}}}},"Sbe":{"type":"list","member":{"locationName":"SecurityGroupId"}},"Sbh":{"type":"list","member":{"locationName":"item","type":"structure","members":{"Primary":{"locationName":"primary","type":"boolean"},"PrivateIpAddress":{"locationName":"privateIpAddress"}}}},"Sbj":{"type":"list","member":{"locationName":"item","type":"structure","members":{"Ipv4Prefix":{}}}},"Sbl":{"type":"list","member":{"locationName":"item","type":"structure","members":{"Ipv6Prefix":{}}}},"Sbx":{"type":"structure","required":["Type"],"members":{"Type":{}}},"Sc1":{"type":"list","member":{"locationName":"SecurityGroup"}},"Sc7":{"type":"structure","required":["CpuCredits"],"members":{"CpuCredits":{}}},"Scb":{"type":"structure","members":{"CapacityReservationId":{},"CapacityReservationResourceGroupArn":{}}},"Sck":{"type":"structure","members":{"LaunchTemplateId":{"locationName":"launchTemplateId"},"LaunchTemplateName":{"locationName":"launchTemplateName"},"CreateTime":{"locationName":"createTime","type":"timestamp"},"CreatedBy":{"locationName":"createdBy"},"DefaultVersionNumber":{"locationName":"defaultVersionNumber","type":"long"},"LatestVersionNumber":{"locationName":"latestVersionNumber","type":"long"},"Tags":{"shape":"Ss","locationName":"tagSet"}}},"Scl":{"type":"structure","members":{"Errors":{"locationName":"errorSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"}}}}}},"Scq":{"type":"structure","members":{"LaunchTemplateId":{"locationName":"launchTemplateId"},"LaunchTemplateName":{"locationName":"launchTemplateName"},"VersionNumber":{"locationName":"versionNumber","type":"long"},"VersionDescription":{"locationName":"versionDescription"},"CreateTime":{"locationName":"createTime","type":"timestamp"},"CreatedBy":{"locationName":"createdBy"},"DefaultVersion":{"locationName":"defaultVersion","type":"boolean"},"LaunchTemplateData":{"shape":"Scr","locationName":"launchTemplateData"}}},"Scr":{"type":"structure","members":{"KernelId":{"locationName":"kernelId"},"EbsOptimized":{"locationName":"ebsOptimized","type":"boolean"},"IamInstanceProfile":{"locationName":"iamInstanceProfile","type":"structure","members":{"Arn":{"locationName":"arn"},"Name":{"locationName":"name"}}},"BlockDeviceMappings":{"locationName":"blockDeviceMappingSet","type":"list","member":{"locationName":"item","type":"structure","members":{"DeviceName":{"locationName":"deviceName"},"VirtualName":{"locationName":"virtualName"},"Ebs":{"locationName":"ebs","type":"structure","members":{"Encrypted":{"locationName":"encrypted","type":"boolean"},"DeleteOnTermination":{"locationName":"deleteOnTermination","type":"boolean"},"Iops":{"locationName":"iops","type":"integer"},"KmsKeyId":{"locationName":"kmsKeyId"},"SnapshotId":{"locationName":"snapshotId"},"VolumeSize":{"locationName":"volumeSize","type":"integer"},"VolumeType":{"locationName":"volumeType"},"Throughput":{"locationName":"throughput","type":"integer"}}},"NoDevice":{"locationName":"noDevice"}}}},"NetworkInterfaces":{"locationName":"networkInterfaceSet","type":"list","member":{"locationName":"item","type":"structure","members":{"AssociateCarrierIpAddress":{"locationName":"associateCarrierIpAddress","type":"boolean"},"AssociatePublicIpAddress":{"locationName":"associatePublicIpAddress","type":"boolean"},"DeleteOnTermination":{"locationName":"deleteOnTermination","type":"boolean"},"Description":{"locationName":"description"},"DeviceIndex":{"locationName":"deviceIndex","type":"integer"},"Groups":{"shape":"S4g","locationName":"groupSet"},"InterfaceType":{"locationName":"interfaceType"},"Ipv6AddressCount":{"locationName":"ipv6AddressCount","type":"integer"},"Ipv6Addresses":{"shape":"Scy","locationName":"ipv6AddressesSet"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"PrivateIpAddress":{"locationName":"privateIpAddress"},"PrivateIpAddresses":{"shape":"Sbh","locationName":"privateIpAddressesSet"},"SecondaryPrivateIpAddressCount":{"locationName":"secondaryPrivateIpAddressCount","type":"integer"},"SubnetId":{"locationName":"subnetId"},"NetworkCardIndex":{"locationName":"networkCardIndex","type":"integer"},"Ipv4Prefixes":{"locationName":"ipv4PrefixSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Ipv4Prefix":{"locationName":"ipv4Prefix"}}}},"Ipv4PrefixCount":{"locationName":"ipv4PrefixCount","type":"integer"},"Ipv6Prefixes":{"locationName":"ipv6PrefixSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Ipv6Prefix":{"locationName":"ipv6Prefix"}}}},"Ipv6PrefixCount":{"locationName":"ipv6PrefixCount","type":"integer"}}}},"ImageId":{"locationName":"imageId"},"InstanceType":{"locationName":"instanceType"},"KeyName":{"locationName":"keyName"},"Monitoring":{"locationName":"monitoring","type":"structure","members":{"Enabled":{"locationName":"enabled","type":"boolean"}}},"Placement":{"locationName":"placement","type":"structure","members":{"AvailabilityZone":{"locationName":"availabilityZone"},"Affinity":{"locationName":"affinity"},"GroupName":{"locationName":"groupName"},"HostId":{"locationName":"hostId"},"Tenancy":{"locationName":"tenancy"},"SpreadDomain":{"locationName":"spreadDomain"},"HostResourceGroupArn":{"locationName":"hostResourceGroupArn"},"PartitionNumber":{"locationName":"partitionNumber","type":"integer"}}},"RamDiskId":{"locationName":"ramDiskId"},"DisableApiTermination":{"locationName":"disableApiTermination","type":"boolean"},"InstanceInitiatedShutdownBehavior":{"locationName":"instanceInitiatedShutdownBehavior"},"UserData":{"locationName":"userData"},"TagSpecifications":{"locationName":"tagSpecificationSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ResourceType":{"locationName":"resourceType"},"Tags":{"shape":"Ss","locationName":"tagSet"}}}},"ElasticGpuSpecifications":{"locationName":"elasticGpuSpecificationSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Type":{"locationName":"type"}}}},"ElasticInferenceAccelerators":{"locationName":"elasticInferenceAcceleratorSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Type":{"locationName":"type"},"Count":{"locationName":"count","type":"integer"}}}},"SecurityGroupIds":{"shape":"Se","locationName":"securityGroupIdSet"},"SecurityGroups":{"shape":"Se","locationName":"securityGroupSet"},"InstanceMarketOptions":{"locationName":"instanceMarketOptions","type":"structure","members":{"MarketType":{"locationName":"marketType"},"SpotOptions":{"locationName":"spotOptions","type":"structure","members":{"MaxPrice":{"locationName":"maxPrice"},"SpotInstanceType":{"locationName":"spotInstanceType"},"BlockDurationMinutes":{"locationName":"blockDurationMinutes","type":"integer"},"ValidUntil":{"locationName":"validUntil","type":"timestamp"},"InstanceInterruptionBehavior":{"locationName":"instanceInterruptionBehavior"}}}}},"CreditSpecification":{"locationName":"creditSpecification","type":"structure","members":{"CpuCredits":{"locationName":"cpuCredits"}}},"CpuOptions":{"locationName":"cpuOptions","type":"structure","members":{"CoreCount":{"locationName":"coreCount","type":"integer"},"ThreadsPerCore":{"locationName":"threadsPerCore","type":"integer"}}},"CapacityReservationSpecification":{"locationName":"capacityReservationSpecification","type":"structure","members":{"CapacityReservationPreference":{"locationName":"capacityReservationPreference"},"CapacityReservationTarget":{"shape":"Sdh","locationName":"capacityReservationTarget"}}},"LicenseSpecifications":{"locationName":"licenseSet","type":"list","member":{"locationName":"item","type":"structure","members":{"LicenseConfigurationArn":{"locationName":"licenseConfigurationArn"}}}},"HibernationOptions":{"locationName":"hibernationOptions","type":"structure","members":{"Configured":{"locationName":"configured","type":"boolean"}}},"MetadataOptions":{"locationName":"metadataOptions","type":"structure","members":{"State":{"locationName":"state"},"HttpTokens":{"locationName":"httpTokens"},"HttpPutResponseHopLimit":{"locationName":"httpPutResponseHopLimit","type":"integer"},"HttpEndpoint":{"locationName":"httpEndpoint"}}},"EnclaveOptions":{"locationName":"enclaveOptions","type":"structure","members":{"Enabled":{"locationName":"enabled","type":"boolean"}}}}},"Scy":{"type":"list","member":{"locationName":"item","type":"structure","members":{"Ipv6Address":{"locationName":"ipv6Address"}}}},"Sdh":{"type":"structure","members":{"CapacityReservationId":{"locationName":"capacityReservationId"},"CapacityReservationResourceGroupArn":{"locationName":"capacityReservationResourceGroupArn"}}},"Sds":{"type":"structure","members":{"DestinationCidrBlock":{"locationName":"destinationCidrBlock"},"LocalGatewayVirtualInterfaceGroupId":{"locationName":"localGatewayVirtualInterfaceGroupId"},"Type":{"locationName":"type"},"State":{"locationName":"state"},"LocalGatewayRouteTableId":{"locationName":"localGatewayRouteTableId"},"LocalGatewayRouteTableArn":{"locationName":"localGatewayRouteTableArn"},"OwnerId":{"locationName":"ownerId"}}},"Sdx":{"type":"structure","members":{"LocalGatewayRouteTableVpcAssociationId":{"locationName":"localGatewayRouteTableVpcAssociationId"},"LocalGatewayRouteTableId":{"locationName":"localGatewayRouteTableId"},"LocalGatewayRouteTableArn":{"locationName":"localGatewayRouteTableArn"},"LocalGatewayId":{"locationName":"localGatewayId"},"VpcId":{"locationName":"vpcId"},"OwnerId":{"locationName":"ownerId"},"State":{"locationName":"state"},"Tags":{"shape":"Ss","locationName":"tagSet"}}},"Se0":{"type":"list","member":{"type":"structure","required":["Cidr"],"members":{"Cidr":{},"Description":{}}}},"Se3":{"type":"structure","members":{"PrefixListId":{"locationName":"prefixListId"},"AddressFamily":{"locationName":"addressFamily"},"State":{"locationName":"state"},"StateMessage":{"locationName":"stateMessage"},"PrefixListArn":{"locationName":"prefixListArn"},"PrefixListName":{"locationName":"prefixListName"},"MaxEntries":{"locationName":"maxEntries","type":"integer"},"Version":{"locationName":"version","type":"long"},"Tags":{"shape":"Ss","locationName":"tagSet"},"OwnerId":{"locationName":"ownerId"}}},"Se8":{"type":"structure","members":{"CreateTime":{"locationName":"createTime","type":"timestamp"},"DeleteTime":{"locationName":"deleteTime","type":"timestamp"},"FailureCode":{"locationName":"failureCode"},"FailureMessage":{"locationName":"failureMessage"},"NatGatewayAddresses":{"locationName":"natGatewayAddressSet","type":"list","member":{"locationName":"item","type":"structure","members":{"AllocationId":{"locationName":"allocationId"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"PrivateIp":{"locationName":"privateIp"},"PublicIp":{"locationName":"publicIp"}}}},"NatGatewayId":{"locationName":"natGatewayId"},"ProvisionedBandwidth":{"locationName":"provisionedBandwidth","type":"structure","members":{"ProvisionTime":{"locationName":"provisionTime","type":"timestamp"},"Provisioned":{"locationName":"provisioned"},"RequestTime":{"locationName":"requestTime","type":"timestamp"},"Requested":{"locationName":"requested"},"Status":{"locationName":"status"}}},"State":{"locationName":"state"},"SubnetId":{"locationName":"subnetId"},"VpcId":{"locationName":"vpcId"},"Tags":{"shape":"Ss","locationName":"tagSet"},"ConnectivityType":{"locationName":"connectivityType"}}},"Sef":{"type":"structure","members":{"Associations":{"locationName":"associationSet","type":"list","member":{"locationName":"item","type":"structure","members":{"NetworkAclAssociationId":{"locationName":"networkAclAssociationId"},"NetworkAclId":{"locationName":"networkAclId"},"SubnetId":{"locationName":"subnetId"}}}},"Entries":{"locationName":"entrySet","type":"list","member":{"locationName":"item","type":"structure","members":{"CidrBlock":{"locationName":"cidrBlock"},"Egress":{"locationName":"egress","type":"boolean"},"IcmpTypeCode":{"shape":"Sek","locationName":"icmpTypeCode"},"Ipv6CidrBlock":{"locationName":"ipv6CidrBlock"},"PortRange":{"shape":"Sel","locationName":"portRange"},"Protocol":{"locationName":"protocol"},"RuleAction":{"locationName":"ruleAction"},"RuleNumber":{"locationName":"ruleNumber","type":"integer"}}}},"IsDefault":{"locationName":"default","type":"boolean"},"NetworkAclId":{"locationName":"networkAclId"},"Tags":{"shape":"Ss","locationName":"tagSet"},"VpcId":{"locationName":"vpcId"},"OwnerId":{"locationName":"ownerId"}}},"Sek":{"type":"structure","members":{"Code":{"locationName":"code","type":"integer"},"Type":{"locationName":"type","type":"integer"}}},"Sel":{"type":"structure","members":{"From":{"locationName":"from","type":"integer"},"To":{"locationName":"to","type":"integer"}}},"Seu":{"type":"structure","members":{"NetworkInsightsPathId":{"locationName":"networkInsightsPathId"},"NetworkInsightsPathArn":{"locationName":"networkInsightsPathArn"},"CreatedDate":{"locationName":"createdDate","type":"timestamp"},"Source":{"locationName":"source"},"Destination":{"locationName":"destination"},"SourceIp":{"locationName":"sourceIp"},"DestinationIp":{"locationName":"destinationIp"},"Protocol":{"locationName":"protocol"},"DestinationPort":{"locationName":"destinationPort","type":"integer"},"Tags":{"shape":"Ss","locationName":"tagSet"}}},"Sez":{"type":"structure","members":{"Association":{"shape":"Sf0","locationName":"association"},"Attachment":{"shape":"Sf1","locationName":"attachment"},"AvailabilityZone":{"locationName":"availabilityZone"},"Description":{"locationName":"description"},"Groups":{"shape":"Sf2","locationName":"groupSet"},"InterfaceType":{"locationName":"interfaceType"},"Ipv6Addresses":{"locationName":"ipv6AddressesSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Ipv6Address":{"locationName":"ipv6Address"}}}},"MacAddress":{"locationName":"macAddress"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"OutpostArn":{"locationName":"outpostArn"},"OwnerId":{"locationName":"ownerId"},"PrivateDnsName":{"locationName":"privateDnsName"},"PrivateIpAddress":{"locationName":"privateIpAddress"},"PrivateIpAddresses":{"locationName":"privateIpAddressesSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Association":{"shape":"Sf0","locationName":"association"},"Primary":{"locationName":"primary","type":"boolean"},"PrivateDnsName":{"locationName":"privateDnsName"},"PrivateIpAddress":{"locationName":"privateIpAddress"}}}},"Ipv4Prefixes":{"shape":"S2i","locationName":"ipv4PrefixSet"},"Ipv6Prefixes":{"locationName":"ipv6PrefixSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Ipv6Prefix":{"locationName":"ipv6Prefix"}}}},"RequesterId":{"locationName":"requesterId"},"RequesterManaged":{"locationName":"requesterManaged","type":"boolean"},"SourceDestCheck":{"locationName":"sourceDestCheck","type":"boolean"},"Status":{"locationName":"status"},"SubnetId":{"locationName":"subnetId"},"TagSet":{"shape":"Ss","locationName":"tagSet"},"VpcId":{"locationName":"vpcId"}}},"Sf0":{"type":"structure","members":{"AllocationId":{"locationName":"allocationId"},"AssociationId":{"locationName":"associationId"},"IpOwnerId":{"locationName":"ipOwnerId"},"PublicDnsName":{"locationName":"publicDnsName"},"PublicIp":{"locationName":"publicIp"},"CustomerOwnedIp":{"locationName":"customerOwnedIp"},"CarrierIp":{"locationName":"carrierIp"}}},"Sf1":{"type":"structure","members":{"AttachTime":{"locationName":"attachTime","type":"timestamp"},"AttachmentId":{"locationName":"attachmentId"},"DeleteOnTermination":{"locationName":"deleteOnTermination","type":"boolean"},"DeviceIndex":{"locationName":"deviceIndex","type":"integer"},"NetworkCardIndex":{"locationName":"networkCardIndex","type":"integer"},"InstanceId":{"locationName":"instanceId"},"InstanceOwnerId":{"locationName":"instanceOwnerId"},"Status":{"locationName":"status"}}},"Sf2":{"type":"list","member":{"locationName":"item","type":"structure","members":{"GroupName":{"locationName":"groupName"},"GroupId":{"locationName":"groupId"}}}},"Sff":{"type":"structure","members":{"NetworkInterfacePermissionId":{"locationName":"networkInterfacePermissionId"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"AwsAccountId":{"locationName":"awsAccountId"},"AwsService":{"locationName":"awsService"},"Permission":{"locationName":"permission"},"PermissionState":{"locationName":"permissionState","type":"structure","members":{"State":{"locationName":"state"},"StatusMessage":{"locationName":"statusMessage"}}}}},"Sfl":{"type":"structure","members":{"GroupName":{"locationName":"groupName"},"State":{"locationName":"state"},"Strategy":{"locationName":"strategy"},"PartitionCount":{"locationName":"partitionCount","type":"integer"},"GroupId":{"locationName":"groupId"},"Tags":{"shape":"Ss","locationName":"tagSet"}}},"Sfp":{"type":"structure","members":{"ReplaceRootVolumeTaskId":{"locationName":"replaceRootVolumeTaskId"},"InstanceId":{"locationName":"instanceId"},"TaskState":{"locationName":"taskState"},"StartTime":{"locationName":"startTime"},"CompleteTime":{"locationName":"completeTime"},"Tags":{"shape":"Ss","locationName":"tagSet"}}},"Sg5":{"type":"structure","members":{"Associations":{"locationName":"associationSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Main":{"locationName":"main","type":"boolean"},"RouteTableAssociationId":{"locationName":"routeTableAssociationId"},"RouteTableId":{"locationName":"routeTableId"},"SubnetId":{"locationName":"subnetId"},"GatewayId":{"locationName":"gatewayId"},"AssociationState":{"shape":"S3n","locationName":"associationState"}}}},"PropagatingVgws":{"locationName":"propagatingVgwSet","type":"list","member":{"locationName":"item","type":"structure","members":{"GatewayId":{"locationName":"gatewayId"}}}},"RouteTableId":{"locationName":"routeTableId"},"Routes":{"locationName":"routeSet","type":"list","member":{"locationName":"item","type":"structure","members":{"DestinationCidrBlock":{"locationName":"destinationCidrBlock"},"DestinationIpv6CidrBlock":{"locationName":"destinationIpv6CidrBlock"},"DestinationPrefixListId":{"locationName":"destinationPrefixListId"},"EgressOnlyInternetGatewayId":{"locationName":"egressOnlyInternetGatewayId"},"GatewayId":{"locationName":"gatewayId"},"InstanceId":{"locationName":"instanceId"},"InstanceOwnerId":{"locationName":"instanceOwnerId"},"NatGatewayId":{"locationName":"natGatewayId"},"TransitGatewayId":{"locationName":"transitGatewayId"},"LocalGatewayId":{"locationName":"localGatewayId"},"CarrierGatewayId":{"locationName":"carrierGatewayId"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"Origin":{"locationName":"origin"},"State":{"locationName":"state"},"VpcPeeringConnectionId":{"locationName":"vpcPeeringConnectionId"}}}},"Tags":{"shape":"Ss","locationName":"tagSet"},"VpcId":{"locationName":"vpcId"},"OwnerId":{"locationName":"ownerId"}}},"Sgh":{"type":"structure","members":{"DataEncryptionKeyId":{"locationName":"dataEncryptionKeyId"},"Description":{"locationName":"description"},"Encrypted":{"locationName":"encrypted","type":"boolean"},"KmsKeyId":{"locationName":"kmsKeyId"},"OwnerId":{"locationName":"ownerId"},"Progress":{"locationName":"progress"},"SnapshotId":{"locationName":"snapshotId"},"StartTime":{"locationName":"startTime","type":"timestamp"},"State":{"locationName":"status"},"StateMessage":{"locationName":"statusMessage"},"VolumeId":{"locationName":"volumeId"},"VolumeSize":{"locationName":"volumeSize","type":"integer"},"OwnerAlias":{"locationName":"ownerAlias"},"OutpostArn":{"locationName":"outpostArn"},"Tags":{"shape":"Ss","locationName":"tagSet"}}},"Sgr":{"type":"structure","members":{"Bucket":{"locationName":"bucket"},"Fault":{"shape":"Sgs","locationName":"fault"},"OwnerId":{"locationName":"ownerId"},"Prefix":{"locationName":"prefix"},"State":{"locationName":"state"}}},"Sgs":{"type":"structure","members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"}}},"Sh3":{"type":"structure","members":{"SubnetCidrReservationId":{"locationName":"subnetCidrReservationId"},"SubnetId":{"locationName":"subnetId"},"Cidr":{"locationName":"cidr"},"ReservationType":{"locationName":"reservationType"},"OwnerId":{"locationName":"ownerId"},"Description":{"locationName":"description"},"Tags":{"shape":"Ss","locationName":"tagSet"}}},"Sh6":{"type":"list","member":{}},"Sha":{"type":"structure","members":{"TrafficMirrorFilterId":{"locationName":"trafficMirrorFilterId"},"IngressFilterRules":{"shape":"Shb","locationName":"ingressFilterRuleSet"},"EgressFilterRules":{"shape":"Shb","locationName":"egressFilterRuleSet"},"NetworkServices":{"shape":"Shg","locationName":"networkServiceSet"},"Description":{"locationName":"description"},"Tags":{"shape":"Ss","locationName":"tagSet"}}},"Shb":{"type":"list","member":{"shape":"Shc","locationName":"item"}},"Shc":{"type":"structure","members":{"TrafficMirrorFilterRuleId":{"locationName":"trafficMirrorFilterRuleId"},"TrafficMirrorFilterId":{"locationName":"trafficMirrorFilterId"},"TrafficDirection":{"locationName":"trafficDirection"},"RuleNumber":{"locationName":"ruleNumber","type":"integer"},"RuleAction":{"locationName":"ruleAction"},"Protocol":{"locationName":"protocol","type":"integer"},"DestinationPortRange":{"shape":"Shf","locationName":"destinationPortRange"},"SourcePortRange":{"shape":"Shf","locationName":"sourcePortRange"},"DestinationCidrBlock":{"locationName":"destinationCidrBlock"},"SourceCidrBlock":{"locationName":"sourceCidrBlock"},"Description":{"locationName":"description"}}},"Shf":{"type":"structure","members":{"FromPort":{"locationName":"fromPort","type":"integer"},"ToPort":{"locationName":"toPort","type":"integer"}}},"Shg":{"type":"list","member":{"locationName":"item"}},"Shk":{"type":"structure","members":{"FromPort":{"type":"integer"},"ToPort":{"type":"integer"}}},"Shp":{"type":"structure","members":{"TrafficMirrorSessionId":{"locationName":"trafficMirrorSessionId"},"TrafficMirrorTargetId":{"locationName":"trafficMirrorTargetId"},"TrafficMirrorFilterId":{"locationName":"trafficMirrorFilterId"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"OwnerId":{"locationName":"ownerId"},"PacketLength":{"locationName":"packetLength","type":"integer"},"SessionNumber":{"locationName":"sessionNumber","type":"integer"},"VirtualNetworkId":{"locationName":"virtualNetworkId","type":"integer"},"Description":{"locationName":"description"},"Tags":{"shape":"Ss","locationName":"tagSet"}}},"Shs":{"type":"structure","members":{"TrafficMirrorTargetId":{"locationName":"trafficMirrorTargetId"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"NetworkLoadBalancerArn":{"locationName":"networkLoadBalancerArn"},"Type":{"locationName":"type"},"Description":{"locationName":"description"},"OwnerId":{"locationName":"ownerId"},"Tags":{"shape":"Ss","locationName":"tagSet"}}},"Si1":{"type":"list","member":{"locationName":"item"}},"Si3":{"type":"structure","members":{"TransitGatewayId":{"locationName":"transitGatewayId"},"TransitGatewayArn":{"locationName":"transitGatewayArn"},"State":{"locationName":"state"},"OwnerId":{"locationName":"ownerId"},"Description":{"locationName":"description"},"CreationTime":{"locationName":"creationTime","type":"timestamp"},"Options":{"locationName":"options","type":"structure","members":{"AmazonSideAsn":{"locationName":"amazonSideAsn","type":"long"},"TransitGatewayCidrBlocks":{"shape":"Se","locationName":"transitGatewayCidrBlocks"},"AutoAcceptSharedAttachments":{"locationName":"autoAcceptSharedAttachments"},"DefaultRouteTableAssociation":{"locationName":"defaultRouteTableAssociation"},"AssociationDefaultRouteTableId":{"locationName":"associationDefaultRouteTableId"},"DefaultRouteTablePropagation":{"locationName":"defaultRouteTablePropagation"},"PropagationDefaultRouteTableId":{"locationName":"propagationDefaultRouteTableId"},"VpnEcmpSupport":{"locationName":"vpnEcmpSupport"},"DnsSupport":{"locationName":"dnsSupport"},"MulticastSupport":{"locationName":"multicastSupport"}}},"Tags":{"shape":"Ss","locationName":"tagSet"}}},"Sia":{"type":"structure","members":{"TransitGatewayAttachmentId":{"locationName":"transitGatewayAttachmentId"},"TransportTransitGatewayAttachmentId":{"locationName":"transportTransitGatewayAttachmentId"},"TransitGatewayId":{"locationName":"transitGatewayId"},"State":{"locationName":"state"},"CreationTime":{"locationName":"creationTime","type":"timestamp"},"Options":{"locationName":"options","type":"structure","members":{"Protocol":{"locationName":"protocol"}}},"Tags":{"shape":"Ss","locationName":"tagSet"}}},"Sie":{"type":"list","member":{"locationName":"item"}},"Sig":{"type":"structure","members":{"TransitGatewayAttachmentId":{"locationName":"transitGatewayAttachmentId"},"TransitGatewayConnectPeerId":{"locationName":"transitGatewayConnectPeerId"},"State":{"locationName":"state"},"CreationTime":{"locationName":"creationTime","type":"timestamp"},"ConnectPeerConfiguration":{"locationName":"connectPeerConfiguration","type":"structure","members":{"TransitGatewayAddress":{"locationName":"transitGatewayAddress"},"PeerAddress":{"locationName":"peerAddress"},"InsideCidrBlocks":{"shape":"Sie","locationName":"insideCidrBlocks"},"Protocol":{"locationName":"protocol"},"BgpConfigurations":{"locationName":"bgpConfigurations","type":"list","member":{"locationName":"item","type":"structure","members":{"TransitGatewayAsn":{"locationName":"transitGatewayAsn","type":"long"},"PeerAsn":{"locationName":"peerAsn","type":"long"},"TransitGatewayAddress":{"locationName":"transitGatewayAddress"},"PeerAddress":{"locationName":"peerAddress"},"BgpStatus":{"locationName":"bgpStatus"}}}}}},"Tags":{"shape":"Ss","locationName":"tagSet"}}},"Sit":{"type":"structure","members":{"TransitGatewayMulticastDomainId":{"locationName":"transitGatewayMulticastDomainId"},"TransitGatewayId":{"locationName":"transitGatewayId"},"TransitGatewayMulticastDomainArn":{"locationName":"transitGatewayMulticastDomainArn"},"OwnerId":{"locationName":"ownerId"},"Options":{"locationName":"options","type":"structure","members":{"Igmpv2Support":{"locationName":"igmpv2Support"},"StaticSourcesSupport":{"locationName":"staticSourcesSupport"},"AutoAcceptSharedAssociations":{"locationName":"autoAcceptSharedAssociations"}}},"State":{"locationName":"state"},"CreationTime":{"locationName":"creationTime","type":"timestamp"},"Tags":{"shape":"Ss","locationName":"tagSet"}}},"Sj1":{"type":"structure","members":{"TransitGatewayRouteTableId":{"locationName":"transitGatewayRouteTableId"},"PrefixListId":{"locationName":"prefixListId"},"PrefixListOwnerId":{"locationName":"prefixListOwnerId"},"State":{"locationName":"state"},"Blackhole":{"locationName":"blackhole","type":"boolean"},"TransitGatewayAttachment":{"locationName":"transitGatewayAttachment","type":"structure","members":{"TransitGatewayAttachmentId":{"locationName":"transitGatewayAttachmentId"},"ResourceType":{"locationName":"resourceType"},"ResourceId":{"locationName":"resourceId"}}}}},"Sj6":{"type":"structure","members":{"DestinationCidrBlock":{"locationName":"destinationCidrBlock"},"PrefixListId":{"locationName":"prefixListId"},"TransitGatewayAttachments":{"locationName":"transitGatewayAttachments","type":"list","member":{"locationName":"item","type":"structure","members":{"ResourceId":{"locationName":"resourceId"},"TransitGatewayAttachmentId":{"locationName":"transitGatewayAttachmentId"},"ResourceType":{"locationName":"resourceType"}}}},"Type":{"locationName":"type"},"State":{"locationName":"state"}}},"Sjd":{"type":"structure","members":{"TransitGatewayRouteTableId":{"locationName":"transitGatewayRouteTableId"},"TransitGatewayId":{"locationName":"transitGatewayId"},"State":{"locationName":"state"},"DefaultAssociationRouteTable":{"locationName":"defaultAssociationRouteTable","type":"boolean"},"DefaultPropagationRouteTable":{"locationName":"defaultPropagationRouteTable","type":"boolean"},"CreationTime":{"locationName":"creationTime","type":"timestamp"},"Tags":{"shape":"Ss","locationName":"tagSet"}}},"Sjj":{"type":"structure","members":{"Attachments":{"locationName":"attachmentSet","type":"list","member":{"shape":"S4o","locationName":"item"}},"AvailabilityZone":{"locationName":"availabilityZone"},"CreateTime":{"locationName":"createTime","type":"timestamp"},"Encrypted":{"locationName":"encrypted","type":"boolean"},"KmsKeyId":{"locationName":"kmsKeyId"},"OutpostArn":{"locationName":"outpostArn"},"Size":{"locationName":"size","type":"integer"},"SnapshotId":{"locationName":"snapshotId"},"State":{"locationName":"status"},"VolumeId":{"locationName":"volumeId"},"Iops":{"locationName":"iops","type":"integer"},"Tags":{"shape":"Ss","locationName":"tagSet"},"VolumeType":{"locationName":"volumeType"},"FastRestored":{"locationName":"fastRestored","type":"boolean"},"MultiAttachEnabled":{"locationName":"multiAttachEnabled","type":"boolean"},"Throughput":{"locationName":"throughput","type":"integer"}}},"Sjq":{"type":"list","member":{"locationName":"item"}},"Sjr":{"type":"list","member":{"locationName":"item"}},"Sjs":{"type":"list","member":{"locationName":"item"}},"Sju":{"type":"structure","members":{"VpcEndpointId":{"locationName":"vpcEndpointId"},"VpcEndpointType":{"locationName":"vpcEndpointType"},"VpcId":{"locationName":"vpcId"},"ServiceName":{"locationName":"serviceName"},"State":{"locationName":"state"},"PolicyDocument":{"locationName":"policyDocument"},"RouteTableIds":{"shape":"Se","locationName":"routeTableIdSet"},"SubnetIds":{"shape":"Se","locationName":"subnetIdSet"},"Groups":{"locationName":"groupSet","type":"list","member":{"locationName":"item","type":"structure","members":{"GroupId":{"locationName":"groupId"},"GroupName":{"locationName":"groupName"}}}},"PrivateDnsEnabled":{"locationName":"privateDnsEnabled","type":"boolean"},"RequesterManaged":{"locationName":"requesterManaged","type":"boolean"},"NetworkInterfaceIds":{"shape":"Se","locationName":"networkInterfaceIdSet"},"DnsEntries":{"shape":"Sjy","locationName":"dnsEntrySet"},"CreationTimestamp":{"locationName":"creationTimestamp","type":"timestamp"},"Tags":{"shape":"Ss","locationName":"tagSet"},"OwnerId":{"locationName":"ownerId"},"LastError":{"locationName":"lastError","type":"structure","members":{"Message":{"locationName":"message"},"Code":{"locationName":"code"}}}}},"Sjy":{"type":"list","member":{"locationName":"item","type":"structure","members":{"DnsName":{"locationName":"dnsName"},"HostedZoneId":{"locationName":"hostedZoneId"}}}},"Sk3":{"type":"structure","members":{"ConnectionNotificationId":{"locationName":"connectionNotificationId"},"ServiceId":{"locationName":"serviceId"},"VpcEndpointId":{"locationName":"vpcEndpointId"},"ConnectionNotificationType":{"locationName":"connectionNotificationType"},"ConnectionNotificationArn":{"locationName":"connectionNotificationArn"},"ConnectionEvents":{"shape":"Se","locationName":"connectionEvents"},"ConnectionNotificationState":{"locationName":"connectionNotificationState"}}},"Sk8":{"type":"structure","members":{"ServiceType":{"shape":"Sk9","locationName":"serviceType"},"ServiceId":{"locationName":"serviceId"},"ServiceName":{"locationName":"serviceName"},"ServiceState":{"locationName":"serviceState"},"AvailabilityZones":{"shape":"Se","locationName":"availabilityZoneSet"},"AcceptanceRequired":{"locationName":"acceptanceRequired","type":"boolean"},"ManagesVpcEndpoints":{"locationName":"managesVpcEndpoints","type":"boolean"},"NetworkLoadBalancerArns":{"shape":"Se","locationName":"networkLoadBalancerArnSet"},"GatewayLoadBalancerArns":{"shape":"Se","locationName":"gatewayLoadBalancerArnSet"},"BaseEndpointDnsNames":{"shape":"Se","locationName":"baseEndpointDnsNameSet"},"PrivateDnsName":{"locationName":"privateDnsName"},"PrivateDnsNameConfiguration":{"locationName":"privateDnsNameConfiguration","type":"structure","members":{"State":{"locationName":"state"},"Type":{"locationName":"type"},"Value":{"locationName":"value"},"Name":{"locationName":"name"}}},"Tags":{"shape":"Ss","locationName":"tagSet"}}},"Sk9":{"type":"list","member":{"locationName":"item","type":"structure","members":{"ServiceType":{"locationName":"serviceType"}}}},"Skn":{"type":"list","member":{"locationName":"item","type":"structure","members":{"Value":{}}}},"Skp":{"type":"list","member":{"locationName":"item","type":"structure","members":{"Value":{}}}},"Skr":{"type":"list","member":{"locationName":"item","type":"structure","members":{"Value":{}}}},"Skt":{"type":"list","member":{"locationName":"item","type":"structure","members":{"Value":{}}}},"Skv":{"type":"list","member":{"locationName":"item","type":"structure","members":{"Value":{"type":"integer"}}}},"Skx":{"type":"list","member":{"locationName":"item","type":"structure","members":{"Value":{"type":"integer"}}}},"Skz":{"type":"list","member":{"locationName":"item","type":"structure","members":{"Value":{}}}},"Sl2":{"type":"structure","members":{"CustomerGatewayConfiguration":{"locationName":"customerGatewayConfiguration"},"CustomerGatewayId":{"locationName":"customerGatewayId"},"Category":{"locationName":"category"},"State":{"locationName":"state"},"Type":{"locationName":"type"},"VpnConnectionId":{"locationName":"vpnConnectionId"},"VpnGatewayId":{"locationName":"vpnGatewayId"},"TransitGatewayId":{"locationName":"transitGatewayId"},"Options":{"locationName":"options","type":"structure","members":{"EnableAcceleration":{"locationName":"enableAcceleration","type":"boolean"},"StaticRoutesOnly":{"locationName":"staticRoutesOnly","type":"boolean"},"LocalIpv4NetworkCidr":{"locationName":"localIpv4NetworkCidr"},"RemoteIpv4NetworkCidr":{"locationName":"remoteIpv4NetworkCidr"},"LocalIpv6NetworkCidr":{"locationName":"localIpv6NetworkCidr"},"RemoteIpv6NetworkCidr":{"locationName":"remoteIpv6NetworkCidr"},"TunnelInsideIpVersion":{"locationName":"tunnelInsideIpVersion"},"TunnelOptions":{"locationName":"tunnelOptionSet","type":"list","member":{"locationName":"item","type":"structure","members":{"OutsideIpAddress":{"locationName":"outsideIpAddress"},"TunnelInsideCidr":{"locationName":"tunnelInsideCidr"},"TunnelInsideIpv6Cidr":{"locationName":"tunnelInsideIpv6Cidr"},"PreSharedKey":{"locationName":"preSharedKey"},"Phase1LifetimeSeconds":{"locationName":"phase1LifetimeSeconds","type":"integer"},"Phase2LifetimeSeconds":{"locationName":"phase2LifetimeSeconds","type":"integer"},"RekeyMarginTimeSeconds":{"locationName":"rekeyMarginTimeSeconds","type":"integer"},"RekeyFuzzPercentage":{"locationName":"rekeyFuzzPercentage","type":"integer"},"ReplayWindowSize":{"locationName":"replayWindowSize","type":"integer"},"DpdTimeoutSeconds":{"locationName":"dpdTimeoutSeconds","type":"integer"},"DpdTimeoutAction":{"locationName":"dpdTimeoutAction"},"Phase1EncryptionAlgorithms":{"locationName":"phase1EncryptionAlgorithmSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Value":{"locationName":"value"}}}},"Phase2EncryptionAlgorithms":{"locationName":"phase2EncryptionAlgorithmSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Value":{"locationName":"value"}}}},"Phase1IntegrityAlgorithms":{"locationName":"phase1IntegrityAlgorithmSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Value":{"locationName":"value"}}}},"Phase2IntegrityAlgorithms":{"locationName":"phase2IntegrityAlgorithmSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Value":{"locationName":"value"}}}},"Phase1DHGroupNumbers":{"locationName":"phase1DHGroupNumberSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Value":{"locationName":"value","type":"integer"}}}},"Phase2DHGroupNumbers":{"locationName":"phase2DHGroupNumberSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Value":{"locationName":"value","type":"integer"}}}},"IkeVersions":{"locationName":"ikeVersionSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Value":{"locationName":"value"}}}},"StartupAction":{"locationName":"startupAction"}}}}}},"Routes":{"locationName":"routes","type":"list","member":{"locationName":"item","type":"structure","members":{"DestinationCidrBlock":{"locationName":"destinationCidrBlock"},"Source":{"locationName":"source"},"State":{"locationName":"state"}}}},"Tags":{"shape":"Ss","locationName":"tagSet"},"VgwTelemetry":{"locationName":"vgwTelemetry","type":"list","member":{"locationName":"item","type":"structure","members":{"AcceptedRouteCount":{"locationName":"acceptedRouteCount","type":"integer"},"LastStatusChange":{"locationName":"lastStatusChange","type":"timestamp"},"OutsideIpAddress":{"locationName":"outsideIpAddress"},"Status":{"locationName":"status"},"StatusMessage":{"locationName":"statusMessage"},"CertificateArn":{"locationName":"certificateArn"}}}}}},"Slv":{"type":"structure","members":{"AvailabilityZone":{"locationName":"availabilityZone"},"State":{"locationName":"state"},"Type":{"locationName":"type"},"VpcAttachments":{"locationName":"attachments","type":"list","member":{"shape":"S4t","locationName":"item"}},"VpnGatewayId":{"locationName":"vpnGatewayId"},"AmazonSideAsn":{"locationName":"amazonSideAsn","type":"long"},"Tags":{"shape":"Ss","locationName":"tagSet"}}},"Sm9":{"type":"list","member":{}},"Smj":{"type":"list","member":{"locationName":"item"}},"Smy":{"type":"list","member":{"locationName":"item"}},"Sp7":{"type":"list","member":{"locationName":"item"}},"Spl":{"type":"list","member":{"locationName":"item"}},"Spn":{"type":"structure","members":{"InstanceTagKeys":{"shape":"Spl","locationName":"instanceTagKeySet"},"IncludeAllTagsOfInstance":{"locationName":"includeAllTagsOfInstance","type":"boolean"}}},"Spp":{"type":"list","member":{"locationName":"item"}},"Sq4":{"type":"list","member":{"locationName":"Filter","type":"structure","members":{"Name":{},"Values":{"shape":"Se","locationName":"Value"}}}},"Sqi":{"type":"structure","members":{"PublicIp":{"locationName":"publicIp"},"AllocationId":{"locationName":"allocationId"},"PtrRecord":{"locationName":"ptrRecord"},"PtrRecordUpdate":{"locationName":"ptrRecordUpdate","type":"structure","members":{"Value":{"locationName":"value"},"Status":{"locationName":"status"},"Reason":{"locationName":"reason"}}}}},"Sqm":{"type":"list","member":{"locationName":"item","type":"structure","members":{"Deadline":{"locationName":"deadline","type":"timestamp"},"Resource":{"locationName":"resource"},"UseLongIds":{"locationName":"useLongIds","type":"boolean"}}}},"Srh":{"type":"list","member":{"locationName":"InstanceId"}},"Srw":{"type":"structure","members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"}}},"St1":{"type":"structure","members":{"ConversionTaskId":{"locationName":"conversionTaskId"},"ExpirationTime":{"locationName":"expirationTime"},"ImportInstance":{"locationName":"importInstance","type":"structure","members":{"Description":{"locationName":"description"},"InstanceId":{"locationName":"instanceId"},"Platform":{"locationName":"platform"},"Volumes":{"locationName":"volumes","type":"list","member":{"locationName":"item","type":"structure","members":{"AvailabilityZone":{"locationName":"availabilityZone"},"BytesConverted":{"locationName":"bytesConverted","type":"long"},"Description":{"locationName":"description"},"Image":{"shape":"St5","locationName":"image"},"Status":{"locationName":"status"},"StatusMessage":{"locationName":"statusMessage"},"Volume":{"shape":"St6","locationName":"volume"}}}}}},"ImportVolume":{"locationName":"importVolume","type":"structure","members":{"AvailabilityZone":{"locationName":"availabilityZone"},"BytesConverted":{"locationName":"bytesConverted","type":"long"},"Description":{"locationName":"description"},"Image":{"shape":"St5","locationName":"image"},"Volume":{"shape":"St6","locationName":"volume"}}},"State":{"locationName":"state"},"StatusMessage":{"locationName":"statusMessage"},"Tags":{"shape":"Ss","locationName":"tagSet"}}},"St5":{"type":"structure","members":{"Checksum":{"locationName":"checksum"},"Format":{"locationName":"format"},"ImportManifestUrl":{"locationName":"importManifestUrl"},"Size":{"locationName":"size","type":"long"}}},"St6":{"type":"structure","members":{"Id":{"locationName":"id"},"Size":{"locationName":"size","type":"long"}}},"Su4":{"type":"structure","members":{"S3Bucket":{"locationName":"s3Bucket"},"S3Prefix":{"locationName":"s3Prefix"}}},"Sul":{"type":"structure","members":{"EventDescription":{"locationName":"eventDescription"},"EventSubType":{"locationName":"eventSubType"},"InstanceId":{"locationName":"instanceId"}}},"Suo":{"type":"list","member":{"locationName":"item","type":"structure","members":{"InstanceId":{"locationName":"instanceId"},"InstanceType":{"locationName":"instanceType"},"SpotInstanceRequestId":{"locationName":"spotInstanceRequestId"},"InstanceHealth":{"locationName":"instanceHealth"}}}},"Svg":{"type":"structure","members":{"FpgaImageId":{"locationName":"fpgaImageId"},"Name":{"locationName":"name"},"Description":{"locationName":"description"},"LoadPermissions":{"locationName":"loadPermissions","type":"list","member":{"locationName":"item","type":"structure","members":{"UserId":{"locationName":"userId"},"Group":{"locationName":"group"}}}},"ProductCodes":{"shape":"Svk","locationName":"productCodes"}}},"Svk":{"type":"list","member":{"locationName":"item","type":"structure","members":{"ProductCodeId":{"locationName":"productCode"},"ProductCodeType":{"locationName":"type"}}}},"Svp":{"type":"list","member":{"locationName":"Owner"}},"Swa":{"type":"list","member":{"locationName":"item"}},"Swd":{"type":"list","member":{"locationName":"item"}},"Sx2":{"type":"list","member":{"shape":"Saf","locationName":"item"}},"Sx3":{"type":"list","member":{"locationName":"item","type":"structure","members":{"Group":{"locationName":"group"},"UserId":{"locationName":"userId"}}}},"Sxg":{"type":"structure","members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"}}},"Sxp":{"type":"list","member":{"locationName":"item","type":"structure","members":{"Description":{"locationName":"description"},"DeviceName":{"locationName":"deviceName"},"DiskImageSize":{"locationName":"diskImageSize","type":"double"},"Format":{"locationName":"format"},"Progress":{"locationName":"progress"},"SnapshotId":{"locationName":"snapshotId"},"Status":{"locationName":"status"},"StatusMessage":{"locationName":"statusMessage"},"Url":{"locationName":"url"},"UserBucket":{"shape":"Sxr","locationName":"userBucket"}}}},"Sxr":{"type":"structure","members":{"S3Bucket":{"locationName":"s3Bucket"},"S3Key":{"locationName":"s3Key"}}},"Sxs":{"type":"list","member":{"locationName":"item","type":"structure","members":{"LicenseConfigurationArn":{"locationName":"licenseConfigurationArn"}}}},"Sy0":{"type":"structure","members":{"Description":{"locationName":"description"},"DiskImageSize":{"locationName":"diskImageSize","type":"double"},"Encrypted":{"locationName":"encrypted","type":"boolean"},"Format":{"locationName":"format"},"KmsKeyId":{"locationName":"kmsKeyId"},"Progress":{"locationName":"progress"},"SnapshotId":{"locationName":"snapshotId"},"Status":{"locationName":"status"},"StatusMessage":{"locationName":"statusMessage"},"Url":{"locationName":"url"},"UserBucket":{"shape":"Sxr","locationName":"userBucket"}}},"Sy4":{"type":"list","member":{"locationName":"item","type":"structure","members":{"DeviceName":{"locationName":"deviceName"},"Ebs":{"locationName":"ebs","type":"structure","members":{"AttachTime":{"locationName":"attachTime","type":"timestamp"},"DeleteOnTermination":{"locationName":"deleteOnTermination","type":"boolean"},"Status":{"locationName":"status"},"VolumeId":{"locationName":"volumeId"}}}}}},"Sy7":{"type":"structure","members":{"Value":{"locationName":"value","type":"boolean"}}},"Sy8":{"type":"structure","members":{"Enabled":{"locationName":"enabled","type":"boolean"}}},"Syq":{"type":"structure","members":{"InstanceEventId":{"locationName":"instanceEventId"},"Code":{"locationName":"code"},"Description":{"locationName":"description"},"NotAfter":{"locationName":"notAfter","type":"timestamp"},"NotBefore":{"locationName":"notBefore","type":"timestamp"},"NotBeforeDeadline":{"locationName":"notBeforeDeadline","type":"timestamp"}}},"Syt":{"type":"structure","members":{"Code":{"locationName":"code","type":"integer"},"Name":{"locationName":"name"}}},"Syv":{"type":"structure","members":{"Details":{"locationName":"details","type":"list","member":{"locationName":"item","type":"structure","members":{"ImpairedSince":{"locationName":"impairedSince","type":"timestamp"},"Name":{"locationName":"name"},"Status":{"locationName":"status"}}}},"Status":{"locationName":"status"}}},"S11x":{"type":"structure","members":{"Groups":{"shape":"Sf2","locationName":"groupSet"},"Instances":{"locationName":"instancesSet","type":"list","member":{"locationName":"item","type":"structure","members":{"AmiLaunchIndex":{"locationName":"amiLaunchIndex","type":"integer"},"ImageId":{"locationName":"imageId"},"InstanceId":{"locationName":"instanceId"},"InstanceType":{"locationName":"instanceType"},"KernelId":{"locationName":"kernelId"},"KeyName":{"locationName":"keyName"},"LaunchTime":{"locationName":"launchTime","type":"timestamp"},"Monitoring":{"shape":"S120","locationName":"monitoring"},"Placement":{"shape":"S9m","locationName":"placement"},"Platform":{"locationName":"platform"},"PrivateDnsName":{"locationName":"privateDnsName"},"PrivateIpAddress":{"locationName":"privateIpAddress"},"ProductCodes":{"shape":"Svk","locationName":"productCodes"},"PublicDnsName":{"locationName":"dnsName"},"PublicIpAddress":{"locationName":"ipAddress"},"RamdiskId":{"locationName":"ramdiskId"},"State":{"shape":"Syt","locationName":"instanceState"},"StateTransitionReason":{"locationName":"reason"},"SubnetId":{"locationName":"subnetId"},"VpcId":{"locationName":"vpcId"},"Architecture":{"locationName":"architecture"},"BlockDeviceMappings":{"shape":"Sy4","locationName":"blockDeviceMapping"},"ClientToken":{"locationName":"clientToken"},"EbsOptimized":{"locationName":"ebsOptimized","type":"boolean"},"EnaSupport":{"locationName":"enaSupport","type":"boolean"},"Hypervisor":{"locationName":"hypervisor"},"IamInstanceProfile":{"shape":"S32","locationName":"iamInstanceProfile"},"InstanceLifecycle":{"locationName":"instanceLifecycle"},"ElasticGpuAssociations":{"locationName":"elasticGpuAssociationSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ElasticGpuId":{"locationName":"elasticGpuId"},"ElasticGpuAssociationId":{"locationName":"elasticGpuAssociationId"},"ElasticGpuAssociationState":{"locationName":"elasticGpuAssociationState"},"ElasticGpuAssociationTime":{"locationName":"elasticGpuAssociationTime"}}}},"ElasticInferenceAcceleratorAssociations":{"locationName":"elasticInferenceAcceleratorAssociationSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ElasticInferenceAcceleratorArn":{"locationName":"elasticInferenceAcceleratorArn"},"ElasticInferenceAcceleratorAssociationId":{"locationName":"elasticInferenceAcceleratorAssociationId"},"ElasticInferenceAcceleratorAssociationState":{"locationName":"elasticInferenceAcceleratorAssociationState"},"ElasticInferenceAcceleratorAssociationTime":{"locationName":"elasticInferenceAcceleratorAssociationTime","type":"timestamp"}}}},"NetworkInterfaces":{"locationName":"networkInterfaceSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Association":{"shape":"S129","locationName":"association"},"Attachment":{"locationName":"attachment","type":"structure","members":{"AttachTime":{"locationName":"attachTime","type":"timestamp"},"AttachmentId":{"locationName":"attachmentId"},"DeleteOnTermination":{"locationName":"deleteOnTermination","type":"boolean"},"DeviceIndex":{"locationName":"deviceIndex","type":"integer"},"Status":{"locationName":"status"},"NetworkCardIndex":{"locationName":"networkCardIndex","type":"integer"}}},"Description":{"locationName":"description"},"Groups":{"shape":"Sf2","locationName":"groupSet"},"Ipv6Addresses":{"shape":"Scy","locationName":"ipv6AddressesSet"},"MacAddress":{"locationName":"macAddress"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"OwnerId":{"locationName":"ownerId"},"PrivateDnsName":{"locationName":"privateDnsName"},"PrivateIpAddress":{"locationName":"privateIpAddress"},"PrivateIpAddresses":{"locationName":"privateIpAddressesSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Association":{"shape":"S129","locationName":"association"},"Primary":{"locationName":"primary","type":"boolean"},"PrivateDnsName":{"locationName":"privateDnsName"},"PrivateIpAddress":{"locationName":"privateIpAddress"}}}},"SourceDestCheck":{"locationName":"sourceDestCheck","type":"boolean"},"Status":{"locationName":"status"},"SubnetId":{"locationName":"subnetId"},"VpcId":{"locationName":"vpcId"},"InterfaceType":{"locationName":"interfaceType"},"Ipv4Prefixes":{"locationName":"ipv4PrefixSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Ipv4Prefix":{"locationName":"ipv4Prefix"}}}},"Ipv6Prefixes":{"locationName":"ipv6PrefixSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Ipv6Prefix":{"locationName":"ipv6Prefix"}}}}}}},"OutpostArn":{"locationName":"outpostArn"},"RootDeviceName":{"locationName":"rootDeviceName"},"RootDeviceType":{"locationName":"rootDeviceType"},"SecurityGroups":{"shape":"Sf2","locationName":"groupSet"},"SourceDestCheck":{"locationName":"sourceDestCheck","type":"boolean"},"SpotInstanceRequestId":{"locationName":"spotInstanceRequestId"},"SriovNetSupport":{"locationName":"sriovNetSupport"},"StateReason":{"shape":"Sxg","locationName":"stateReason"},"Tags":{"shape":"Ss","locationName":"tagSet"},"VirtualizationType":{"locationName":"virtualizationType"},"CpuOptions":{"locationName":"cpuOptions","type":"structure","members":{"CoreCount":{"locationName":"coreCount","type":"integer"},"ThreadsPerCore":{"locationName":"threadsPerCore","type":"integer"}}},"CapacityReservationId":{"locationName":"capacityReservationId"},"CapacityReservationSpecification":{"locationName":"capacityReservationSpecification","type":"structure","members":{"CapacityReservationPreference":{"locationName":"capacityReservationPreference"},"CapacityReservationTarget":{"shape":"Sdh","locationName":"capacityReservationTarget"}}},"HibernationOptions":{"locationName":"hibernationOptions","type":"structure","members":{"Configured":{"locationName":"configured","type":"boolean"}}},"Licenses":{"locationName":"licenseSet","type":"list","member":{"locationName":"item","type":"structure","members":{"LicenseConfigurationArn":{"locationName":"licenseConfigurationArn"}}}},"MetadataOptions":{"shape":"S12m","locationName":"metadataOptions"},"EnclaveOptions":{"shape":"Sy8","locationName":"enclaveOptions"},"BootMode":{"locationName":"bootMode"}}}},"OwnerId":{"locationName":"ownerId"},"RequesterId":{"locationName":"requesterId"},"ReservationId":{"locationName":"reservationId"}}},"S120":{"type":"structure","members":{"State":{"locationName":"state"}}},"S129":{"type":"structure","members":{"CarrierIp":{"locationName":"carrierIp"},"IpOwnerId":{"locationName":"ipOwnerId"},"PublicDnsName":{"locationName":"publicDnsName"},"PublicIp":{"locationName":"publicIp"}}},"S12m":{"type":"structure","members":{"State":{"locationName":"state"},"HttpTokens":{"locationName":"httpTokens"},"HttpPutResponseHopLimit":{"locationName":"httpPutResponseHopLimit","type":"integer"},"HttpEndpoint":{"locationName":"httpEndpoint"}}},"S143":{"type":"list","member":{"locationName":"item"}},"S153":{"type":"structure","members":{"NetworkInsightsAnalysisId":{"locationName":"networkInsightsAnalysisId"},"NetworkInsightsAnalysisArn":{"locationName":"networkInsightsAnalysisArn"},"NetworkInsightsPathId":{"locationName":"networkInsightsPathId"},"FilterInArns":{"shape":"S154","locationName":"filterInArnSet"},"StartDate":{"locationName":"startDate","type":"timestamp"},"Status":{"locationName":"status"},"StatusMessage":{"locationName":"statusMessage"},"NetworkPathFound":{"locationName":"networkPathFound","type":"boolean"},"ForwardPathComponents":{"shape":"S156","locationName":"forwardPathComponentSet"},"ReturnPathComponents":{"shape":"S156","locationName":"returnPathComponentSet"},"Explanations":{"locationName":"explanationSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Acl":{"shape":"S159","locationName":"acl"},"AclRule":{"shape":"S158","locationName":"aclRule"},"Address":{"locationName":"address"},"Addresses":{"shape":"S15b","locationName":"addressSet"},"AttachedTo":{"shape":"S159","locationName":"attachedTo"},"AvailabilityZones":{"shape":"Se","locationName":"availabilityZoneSet"},"Cidrs":{"shape":"Se","locationName":"cidrSet"},"Component":{"shape":"S159","locationName":"component"},"CustomerGateway":{"shape":"S159","locationName":"customerGateway"},"Destination":{"shape":"S159","locationName":"destination"},"DestinationVpc":{"shape":"S159","locationName":"destinationVpc"},"Direction":{"locationName":"direction"},"ExplanationCode":{"locationName":"explanationCode"},"IngressRouteTable":{"shape":"S159","locationName":"ingressRouteTable"},"InternetGateway":{"shape":"S159","locationName":"internetGateway"},"LoadBalancerArn":{"locationName":"loadBalancerArn"},"ClassicLoadBalancerListener":{"locationName":"classicLoadBalancerListener","type":"structure","members":{"LoadBalancerPort":{"locationName":"loadBalancerPort","type":"integer"},"InstancePort":{"locationName":"instancePort","type":"integer"}}},"LoadBalancerListenerPort":{"locationName":"loadBalancerListenerPort","type":"integer"},"LoadBalancerTarget":{"locationName":"loadBalancerTarget","type":"structure","members":{"Address":{"locationName":"address"},"AvailabilityZone":{"locationName":"availabilityZone"},"Instance":{"shape":"S159","locationName":"instance"},"Port":{"locationName":"port","type":"integer"}}},"LoadBalancerTargetGroup":{"shape":"S159","locationName":"loadBalancerTargetGroup"},"LoadBalancerTargetGroups":{"shape":"S15j","locationName":"loadBalancerTargetGroupSet"},"LoadBalancerTargetPort":{"locationName":"loadBalancerTargetPort","type":"integer"},"ElasticLoadBalancerListener":{"shape":"S159","locationName":"elasticLoadBalancerListener"},"MissingComponent":{"locationName":"missingComponent"},"NatGateway":{"shape":"S159","locationName":"natGateway"},"NetworkInterface":{"shape":"S159","locationName":"networkInterface"},"PacketField":{"locationName":"packetField"},"VpcPeeringConnection":{"shape":"S159","locationName":"vpcPeeringConnection"},"Port":{"locationName":"port","type":"integer"},"PortRanges":{"shape":"S15c","locationName":"portRangeSet"},"PrefixList":{"shape":"S159","locationName":"prefixList"},"Protocols":{"locationName":"protocolSet","type":"list","member":{"locationName":"item"}},"RouteTableRoute":{"shape":"S15d","locationName":"routeTableRoute"},"RouteTable":{"shape":"S159","locationName":"routeTable"},"SecurityGroup":{"shape":"S159","locationName":"securityGroup"},"SecurityGroupRule":{"shape":"S15e","locationName":"securityGroupRule"},"SecurityGroups":{"shape":"S15j","locationName":"securityGroupSet"},"SourceVpc":{"shape":"S159","locationName":"sourceVpc"},"State":{"locationName":"state"},"Subnet":{"shape":"S159","locationName":"subnet"},"SubnetRouteTable":{"shape":"S159","locationName":"subnetRouteTable"},"Vpc":{"shape":"S159","locationName":"vpc"},"VpcEndpoint":{"shape":"S159","locationName":"vpcEndpoint"},"VpnConnection":{"shape":"S159","locationName":"vpnConnection"},"VpnGateway":{"shape":"S159","locationName":"vpnGateway"}}}},"AlternatePathHints":{"locationName":"alternatePathHintSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ComponentId":{"locationName":"componentId"},"ComponentArn":{"locationName":"componentArn"}}}},"Tags":{"shape":"Ss","locationName":"tagSet"}}},"S154":{"type":"list","member":{"locationName":"item"}},"S156":{"type":"list","member":{"locationName":"item","type":"structure","members":{"SequenceNumber":{"locationName":"sequenceNumber","type":"integer"},"AclRule":{"shape":"S158","locationName":"aclRule"},"Component":{"shape":"S159","locationName":"component"},"DestinationVpc":{"shape":"S159","locationName":"destinationVpc"},"OutboundHeader":{"shape":"S15a","locationName":"outboundHeader"},"InboundHeader":{"shape":"S15a","locationName":"inboundHeader"},"RouteTableRoute":{"shape":"S15d","locationName":"routeTableRoute"},"SecurityGroupRule":{"shape":"S15e","locationName":"securityGroupRule"},"SourceVpc":{"shape":"S159","locationName":"sourceVpc"},"Subnet":{"shape":"S159","locationName":"subnet"},"Vpc":{"shape":"S159","locationName":"vpc"}}}},"S158":{"type":"structure","members":{"Cidr":{"locationName":"cidr"},"Egress":{"locationName":"egress","type":"boolean"},"PortRange":{"shape":"Sel","locationName":"portRange"},"Protocol":{"locationName":"protocol"},"RuleAction":{"locationName":"ruleAction"},"RuleNumber":{"locationName":"ruleNumber","type":"integer"}}},"S159":{"type":"structure","members":{"Id":{"locationName":"id"},"Arn":{"locationName":"arn"}}},"S15a":{"type":"structure","members":{"DestinationAddresses":{"shape":"S15b","locationName":"destinationAddressSet"},"DestinationPortRanges":{"shape":"S15c","locationName":"destinationPortRangeSet"},"Protocol":{"locationName":"protocol"},"SourceAddresses":{"shape":"S15b","locationName":"sourceAddressSet"},"SourcePortRanges":{"shape":"S15c","locationName":"sourcePortRangeSet"}}},"S15b":{"type":"list","member":{"locationName":"item"}},"S15c":{"type":"list","member":{"shape":"Sel","locationName":"item"}},"S15d":{"type":"structure","members":{"DestinationCidr":{"locationName":"destinationCidr"},"DestinationPrefixListId":{"locationName":"destinationPrefixListId"},"EgressOnlyInternetGatewayId":{"locationName":"egressOnlyInternetGatewayId"},"GatewayId":{"locationName":"gatewayId"},"InstanceId":{"locationName":"instanceId"},"NatGatewayId":{"locationName":"natGatewayId"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"Origin":{"locationName":"origin"},"TransitGatewayId":{"locationName":"transitGatewayId"},"VpcPeeringConnectionId":{"locationName":"vpcPeeringConnectionId"}}},"S15e":{"type":"structure","members":{"Cidr":{"locationName":"cidr"},"Direction":{"locationName":"direction"},"SecurityGroupId":{"locationName":"securityGroupId"},"PortRange":{"shape":"Sel","locationName":"portRange"},"PrefixListId":{"locationName":"prefixListId"},"Protocol":{"locationName":"protocol"}}},"S15j":{"type":"list","member":{"shape":"S159","locationName":"item"}},"S175":{"type":"list","member":{"locationName":"ReservedInstancesId"}},"S17d":{"type":"list","member":{"locationName":"item","type":"structure","members":{"Amount":{"locationName":"amount","type":"double"},"Frequency":{"locationName":"frequency"}}}},"S17r":{"type":"structure","members":{"AvailabilityZone":{"locationName":"availabilityZone"},"InstanceCount":{"locationName":"instanceCount","type":"integer"},"InstanceType":{"locationName":"instanceType"},"Platform":{"locationName":"platform"},"Scope":{"locationName":"scope"}}},"S18e":{"type":"structure","members":{"Frequency":{"locationName":"frequency"},"Interval":{"locationName":"interval","type":"integer"},"OccurrenceDaySet":{"locationName":"occurrenceDaySet","type":"list","member":{"locationName":"item","type":"integer"}},"OccurrenceRelativeToEnd":{"locationName":"occurrenceRelativeToEnd","type":"boolean"},"OccurrenceUnit":{"locationName":"occurrenceUnit"}}},"S18m":{"type":"structure","members":{"AvailabilityZone":{"locationName":"availabilityZone"},"CreateDate":{"locationName":"createDate","type":"timestamp"},"HourlyPrice":{"locationName":"hourlyPrice"},"InstanceCount":{"locationName":"instanceCount","type":"integer"},"InstanceType":{"locationName":"instanceType"},"NetworkPlatform":{"locationName":"networkPlatform"},"NextSlotStartTime":{"locationName":"nextSlotStartTime","type":"timestamp"},"Platform":{"locationName":"platform"},"PreviousSlotEndTime":{"locationName":"previousSlotEndTime","type":"timestamp"},"Recurrence":{"shape":"S18e","locationName":"recurrence"},"ScheduledInstanceId":{"locationName":"scheduledInstanceId"},"SlotDurationInHours":{"locationName":"slotDurationInHours","type":"integer"},"TermEndDate":{"locationName":"termEndDate","type":"timestamp"},"TermStartDate":{"locationName":"termStartDate","type":"timestamp"},"TotalScheduledInstanceHours":{"locationName":"totalScheduledInstanceHours","type":"integer"}}},"S18t":{"type":"list","member":{"locationName":"item"}},"S18x":{"type":"list","member":{"locationName":"GroupName"}},"S195":{"type":"list","member":{"locationName":"item","type":"structure","members":{"Group":{"locationName":"group"},"UserId":{"locationName":"userId"}}}},"S199":{"type":"list","member":{"locationName":"SnapshotId"}},"S19s":{"type":"structure","required":["IamFleetRole","TargetCapacity"],"members":{"AllocationStrategy":{"locationName":"allocationStrategy"},"OnDemandAllocationStrategy":{"locationName":"onDemandAllocationStrategy"},"SpotMaintenanceStrategies":{"locationName":"spotMaintenanceStrategies","type":"structure","members":{"CapacityRebalance":{"locationName":"capacityRebalance","type":"structure","members":{"ReplacementStrategy":{"locationName":"replacementStrategy"}}}}},"ClientToken":{"locationName":"clientToken"},"ExcessCapacityTerminationPolicy":{"locationName":"excessCapacityTerminationPolicy"},"FulfilledCapacity":{"locationName":"fulfilledCapacity","type":"double"},"OnDemandFulfilledCapacity":{"locationName":"onDemandFulfilledCapacity","type":"double"},"IamFleetRole":{"locationName":"iamFleetRole"},"LaunchSpecifications":{"locationName":"launchSpecifications","type":"list","member":{"locationName":"item","type":"structure","members":{"SecurityGroups":{"shape":"Sf2","locationName":"groupSet"},"AddressingType":{"locationName":"addressingType"},"BlockDeviceMappings":{"shape":"Sx2","locationName":"blockDeviceMapping"},"EbsOptimized":{"locationName":"ebsOptimized","type":"boolean"},"IamInstanceProfile":{"shape":"S2z","locationName":"iamInstanceProfile"},"ImageId":{"locationName":"imageId"},"InstanceType":{"locationName":"instanceType"},"KernelId":{"locationName":"kernelId"},"KeyName":{"locationName":"keyName"},"Monitoring":{"locationName":"monitoring","type":"structure","members":{"Enabled":{"locationName":"enabled","type":"boolean"}}},"NetworkInterfaces":{"shape":"S1a2","locationName":"networkInterfaceSet"},"Placement":{"shape":"S1a4","locationName":"placement"},"RamdiskId":{"locationName":"ramdiskId"},"SpotPrice":{"locationName":"spotPrice"},"SubnetId":{"locationName":"subnetId"},"UserData":{"locationName":"userData"},"WeightedCapacity":{"locationName":"weightedCapacity","type":"double"},"TagSpecifications":{"locationName":"tagSpecificationSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ResourceType":{"locationName":"resourceType"},"Tags":{"shape":"Ss","locationName":"tag"}}}}}}},"LaunchTemplateConfigs":{"shape":"S1a7","locationName":"launchTemplateConfigs"},"SpotPrice":{"locationName":"spotPrice"},"TargetCapacity":{"locationName":"targetCapacity","type":"integer"},"OnDemandTargetCapacity":{"locationName":"onDemandTargetCapacity","type":"integer"},"OnDemandMaxTotalPrice":{"locationName":"onDemandMaxTotalPrice"},"SpotMaxTotalPrice":{"locationName":"spotMaxTotalPrice"},"TerminateInstancesWithExpiration":{"locationName":"terminateInstancesWithExpiration","type":"boolean"},"Type":{"locationName":"type"},"ValidFrom":{"locationName":"validFrom","type":"timestamp"},"ValidUntil":{"locationName":"validUntil","type":"timestamp"},"ReplaceUnhealthyInstances":{"locationName":"replaceUnhealthyInstances","type":"boolean"},"InstanceInterruptionBehavior":{"locationName":"instanceInterruptionBehavior"},"LoadBalancersConfig":{"locationName":"loadBalancersConfig","type":"structure","members":{"ClassicLoadBalancersConfig":{"locationName":"classicLoadBalancersConfig","type":"structure","members":{"ClassicLoadBalancers":{"locationName":"classicLoadBalancers","type":"list","member":{"locationName":"item","type":"structure","members":{"Name":{"locationName":"name"}}}}}},"TargetGroupsConfig":{"locationName":"targetGroupsConfig","type":"structure","members":{"TargetGroups":{"locationName":"targetGroups","type":"list","member":{"locationName":"item","type":"structure","members":{"Arn":{"locationName":"arn"}}}}}}}},"InstancePoolsToUseCount":{"locationName":"instancePoolsToUseCount","type":"integer"},"Context":{"locationName":"context"},"TagSpecifications":{"shape":"S1t","locationName":"TagSpecification"}}},"S1a2":{"type":"list","member":{"locationName":"item","type":"structure","members":{"AssociatePublicIpAddress":{"locationName":"associatePublicIpAddress","type":"boolean"},"DeleteOnTermination":{"locationName":"deleteOnTermination","type":"boolean"},"Description":{"locationName":"description"},"DeviceIndex":{"locationName":"deviceIndex","type":"integer"},"Groups":{"shape":"Sbe","locationName":"SecurityGroupId"},"Ipv6AddressCount":{"locationName":"ipv6AddressCount","type":"integer"},"Ipv6Addresses":{"shape":"Scy","locationName":"ipv6AddressesSet","queryName":"Ipv6Addresses"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"PrivateIpAddress":{"locationName":"privateIpAddress"},"PrivateIpAddresses":{"shape":"Sbh","locationName":"privateIpAddressesSet","queryName":"PrivateIpAddresses"},"SecondaryPrivateIpAddressCount":{"locationName":"secondaryPrivateIpAddressCount","type":"integer"},"SubnetId":{"locationName":"subnetId"},"AssociateCarrierIpAddress":{"type":"boolean"},"InterfaceType":{},"NetworkCardIndex":{"type":"integer"},"Ipv4Prefixes":{"shape":"Sbj","locationName":"Ipv4Prefix"},"Ipv4PrefixCount":{"type":"integer"},"Ipv6Prefixes":{"shape":"Sbl","locationName":"Ipv6Prefix"},"Ipv6PrefixCount":{"type":"integer"}}}},"S1a4":{"type":"structure","members":{"AvailabilityZone":{"locationName":"availabilityZone"},"GroupName":{"locationName":"groupName"},"Tenancy":{"locationName":"tenancy"}}},"S1a7":{"type":"list","member":{"locationName":"item","type":"structure","members":{"LaunchTemplateSpecification":{"shape":"S9v","locationName":"launchTemplateSpecification"},"Overrides":{"locationName":"overrides","type":"list","member":{"locationName":"item","type":"structure","members":{"InstanceType":{"locationName":"instanceType"},"SpotPrice":{"locationName":"spotPrice"},"SubnetId":{"locationName":"subnetId"},"AvailabilityZone":{"locationName":"availabilityZone"},"WeightedCapacity":{"locationName":"weightedCapacity","type":"double"},"Priority":{"locationName":"priority","type":"double"}}}}}}},"S1ak":{"type":"list","member":{"locationName":"item","type":"structure","members":{"ActualBlockHourlyPrice":{"locationName":"actualBlockHourlyPrice"},"AvailabilityZoneGroup":{"locationName":"availabilityZoneGroup"},"BlockDurationMinutes":{"locationName":"blockDurationMinutes","type":"integer"},"CreateTime":{"locationName":"createTime","type":"timestamp"},"Fault":{"shape":"Sgs","locationName":"fault"},"InstanceId":{"locationName":"instanceId"},"LaunchGroup":{"locationName":"launchGroup"},"LaunchSpecification":{"locationName":"launchSpecification","type":"structure","members":{"UserData":{"locationName":"userData"},"SecurityGroups":{"shape":"Sf2","locationName":"groupSet"},"AddressingType":{"locationName":"addressingType"},"BlockDeviceMappings":{"shape":"Sx2","locationName":"blockDeviceMapping"},"EbsOptimized":{"locationName":"ebsOptimized","type":"boolean"},"IamInstanceProfile":{"shape":"S2z","locationName":"iamInstanceProfile"},"ImageId":{"locationName":"imageId"},"InstanceType":{"locationName":"instanceType"},"KernelId":{"locationName":"kernelId"},"KeyName":{"locationName":"keyName"},"NetworkInterfaces":{"shape":"S1a2","locationName":"networkInterfaceSet"},"Placement":{"shape":"S1a4","locationName":"placement"},"RamdiskId":{"locationName":"ramdiskId"},"SubnetId":{"locationName":"subnetId"},"Monitoring":{"shape":"S1an","locationName":"monitoring"}}},"LaunchedAvailabilityZone":{"locationName":"launchedAvailabilityZone"},"ProductDescription":{"locationName":"productDescription"},"SpotInstanceRequestId":{"locationName":"spotInstanceRequestId"},"SpotPrice":{"locationName":"spotPrice"},"State":{"locationName":"state"},"Status":{"locationName":"status","type":"structure","members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"},"UpdateTime":{"locationName":"updateTime","type":"timestamp"}}},"Tags":{"shape":"Ss","locationName":"tagSet"},"Type":{"locationName":"type"},"ValidFrom":{"locationName":"validFrom","type":"timestamp"},"ValidUntil":{"locationName":"validUntil","type":"timestamp"},"InstanceInterruptionBehavior":{"locationName":"instanceInterruptionBehavior"}}}},"S1an":{"type":"structure","required":["Enabled"],"members":{"Enabled":{"locationName":"enabled","type":"boolean"}}},"S1b2":{"type":"list","member":{"locationName":"item","type":"structure","members":{"FromPort":{"locationName":"fromPort","type":"integer"},"IpProtocol":{"locationName":"ipProtocol"},"IpRanges":{"locationName":"ipRanges","type":"list","member":{"locationName":"item"}},"PrefixListIds":{"locationName":"prefixListIds","type":"list","member":{"locationName":"item"}},"ToPort":{"locationName":"toPort","type":"integer"},"UserIdGroupPairs":{"locationName":"groups","type":"list","member":{"shape":"S59","locationName":"item"}}}}},"S1c0":{"type":"list","member":{}},"S1d4":{"type":"list","member":{"locationName":"VolumeId"}},"S1dp":{"type":"structure","members":{"VolumeId":{"locationName":"volumeId"},"ModificationState":{"locationName":"modificationState"},"StatusMessage":{"locationName":"statusMessage"},"TargetSize":{"locationName":"targetSize","type":"integer"},"TargetIops":{"locationName":"targetIops","type":"integer"},"TargetVolumeType":{"locationName":"targetVolumeType"},"TargetThroughput":{"locationName":"targetThroughput","type":"integer"},"TargetMultiAttachEnabled":{"locationName":"targetMultiAttachEnabled","type":"boolean"},"OriginalSize":{"locationName":"originalSize","type":"integer"},"OriginalIops":{"locationName":"originalIops","type":"integer"},"OriginalVolumeType":{"locationName":"originalVolumeType"},"OriginalThroughput":{"locationName":"originalThroughput","type":"integer"},"OriginalMultiAttachEnabled":{"locationName":"originalMultiAttachEnabled","type":"boolean"},"Progress":{"locationName":"progress","type":"long"},"StartTime":{"locationName":"startTime","type":"timestamp"},"EndTime":{"locationName":"endTime","type":"timestamp"}}},"S1dv":{"type":"list","member":{"locationName":"VpcId"}},"S1fl":{"type":"list","member":{"locationName":"AvailabilityZone"}},"S1g0":{"type":"structure","members":{"TransitGatewayAttachmentId":{"locationName":"transitGatewayAttachmentId"},"ResourceId":{"locationName":"resourceId"},"ResourceType":{"locationName":"resourceType"},"TransitGatewayRouteTableId":{"locationName":"transitGatewayRouteTableId"},"State":{"locationName":"state"}}},"S1ii":{"type":"structure","members":{"InstanceFamily":{"locationName":"instanceFamily"},"CpuCredits":{"locationName":"cpuCredits"}}},"S1iz":{"type":"list","member":{"locationName":"item"}},"S1j1":{"type":"list","member":{"locationName":"item","type":"structure","members":{"CurrencyCode":{"locationName":"currencyCode"},"Duration":{"locationName":"duration","type":"integer"},"HostIdSet":{"shape":"Swa","locationName":"hostIdSet"},"HostReservationId":{"locationName":"hostReservationId"},"HourlyPrice":{"locationName":"hourlyPrice"},"InstanceFamily":{"locationName":"instanceFamily"},"PaymentOption":{"locationName":"paymentOption"},"UpfrontPrice":{"locationName":"upfrontPrice"}}}},"S1ji":{"type":"structure","members":{"HourlyPrice":{"locationName":"hourlyPrice"},"RemainingTotalValue":{"locationName":"remainingTotalValue"},"RemainingUpfrontValue":{"locationName":"remainingUpfrontValue"}}},"S1jt":{"type":"list","member":{"shape":"Sh3","locationName":"item"}},"S1kg":{"type":"structure","members":{"Comment":{},"UploadEnd":{"type":"timestamp"},"UploadSize":{"type":"double"},"UploadStart":{"type":"timestamp"}}},"S1kj":{"type":"structure","members":{"S3Bucket":{},"S3Key":{}}},"S1kq":{"type":"structure","required":["Bytes","Format","ImportManifestUrl"],"members":{"Bytes":{"locationName":"bytes","type":"long"},"Format":{"locationName":"format"},"ImportManifestUrl":{"locationName":"importManifestUrl"}}},"S1kr":{"type":"structure","required":["Size"],"members":{"Size":{"locationName":"size","type":"long"}}},"S1lk":{"type":"list","member":{"locationName":"UserId"}},"S1ll":{"type":"list","member":{"locationName":"UserGroup"}},"S1lm":{"type":"list","member":{"locationName":"ProductCode"}},"S1lo":{"type":"list","member":{"locationName":"item","type":"structure","members":{"Group":{},"UserId":{}}}},"S1lt":{"type":"list","member":{"shape":"S17","locationName":"item"}},"S1m4":{"type":"structure","members":{"CapacityReservationPreference":{},"CapacityReservationTarget":{"shape":"Scb"}}},"S1o6":{"type":"structure","members":{"AllowDnsResolutionFromRemoteVpc":{"type":"boolean"},"AllowEgressFromLocalClassicLinkToRemoteVpc":{"type":"boolean"},"AllowEgressFromLocalVpcToRemoteClassicLink":{"type":"boolean"}}},"S1o8":{"type":"structure","members":{"AllowDnsResolutionFromRemoteVpc":{"locationName":"allowDnsResolutionFromRemoteVpc","type":"boolean"},"AllowEgressFromLocalClassicLinkToRemoteVpc":{"locationName":"allowEgressFromLocalClassicLinkToRemoteVpc","type":"boolean"},"AllowEgressFromLocalVpcToRemoteClassicLink":{"locationName":"allowEgressFromLocalVpcToRemoteClassicLink","type":"boolean"}}},"S1on":{"type":"list","member":{"locationName":"item","type":"structure","members":{"InstanceId":{"locationName":"instanceId"},"Monitoring":{"shape":"S120","locationName":"monitoring"}}}},"S1rq":{"type":"list","member":{"locationName":"SecurityGroupId"}},"S1se":{"type":"list","member":{"locationName":"item","type":"structure","members":{"CurrentState":{"shape":"Syt","locationName":"currentState"},"InstanceId":{"locationName":"instanceId"},"PreviousState":{"shape":"Syt","locationName":"previousState"}}}},"S1sy":{"type":"list","member":{"locationName":"item","type":"structure","members":{"SecurityGroupRuleId":{},"Description":{}}}}}}

/***/ }),
/* 195 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeAccountAttributes":{"result_key":"AccountAttributes"},"DescribeAddresses":{"result_key":"Addresses"},"DescribeAddressesAttribute":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Addresses"},"DescribeAvailabilityZones":{"result_key":"AvailabilityZones"},"DescribeBundleTasks":{"result_key":"BundleTasks"},"DescribeByoipCidrs":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"ByoipCidrs"},"DescribeCapacityReservations":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"CapacityReservations"},"DescribeCarrierGateways":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"CarrierGateways"},"DescribeClassicLinkInstances":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Instances"},"DescribeClientVpnAuthorizationRules":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"AuthorizationRules"},"DescribeClientVpnConnections":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Connections"},"DescribeClientVpnEndpoints":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"ClientVpnEndpoints"},"DescribeClientVpnRoutes":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Routes"},"DescribeClientVpnTargetNetworks":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"ClientVpnTargetNetworks"},"DescribeCoipPools":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"CoipPools"},"DescribeConversionTasks":{"result_key":"ConversionTasks"},"DescribeCustomerGateways":{"result_key":"CustomerGateways"},"DescribeDhcpOptions":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"DhcpOptions"},"DescribeEgressOnlyInternetGateways":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"EgressOnlyInternetGateways"},"DescribeExportImageTasks":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"ExportImageTasks"},"DescribeExportTasks":{"result_key":"ExportTasks"},"DescribeFastSnapshotRestores":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"FastSnapshotRestores"},"DescribeFleets":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Fleets"},"DescribeFlowLogs":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"FlowLogs"},"DescribeFpgaImages":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"FpgaImages"},"DescribeHostReservationOfferings":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"OfferingSet"},"DescribeHostReservations":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"HostReservationSet"},"DescribeHosts":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Hosts"},"DescribeIamInstanceProfileAssociations":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"IamInstanceProfileAssociations"},"DescribeImages":{"result_key":"Images"},"DescribeImportImageTasks":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"ImportImageTasks"},"DescribeImportSnapshotTasks":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"ImportSnapshotTasks"},"DescribeInstanceCreditSpecifications":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"InstanceCreditSpecifications"},"DescribeInstanceEventWindows":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"InstanceEventWindows"},"DescribeInstanceStatus":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"InstanceStatuses"},"DescribeInstanceTypeOfferings":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"InstanceTypeOfferings"},"DescribeInstanceTypes":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"InstanceTypes"},"DescribeInstances":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Reservations"},"DescribeInternetGateways":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"InternetGateways"},"DescribeIpv6Pools":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Ipv6Pools"},"DescribeKeyPairs":{"result_key":"KeyPairs"},"DescribeLaunchTemplateVersions":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"LaunchTemplateVersions"},"DescribeLaunchTemplates":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"LaunchTemplates"},"DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"LocalGatewayRouteTableVirtualInterfaceGroupAssociations"},"DescribeLocalGatewayRouteTableVpcAssociations":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"LocalGatewayRouteTableVpcAssociations"},"DescribeLocalGatewayRouteTables":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"LocalGatewayRouteTables"},"DescribeLocalGatewayVirtualInterfaceGroups":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"LocalGatewayVirtualInterfaceGroups"},"DescribeLocalGatewayVirtualInterfaces":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"LocalGatewayVirtualInterfaces"},"DescribeLocalGateways":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"LocalGateways"},"DescribeManagedPrefixLists":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"PrefixLists"},"DescribeMovingAddresses":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"MovingAddressStatuses"},"DescribeNatGateways":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"NatGateways"},"DescribeNetworkAcls":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"NetworkAcls"},"DescribeNetworkInsightsAnalyses":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"NetworkInsightsAnalyses"},"DescribeNetworkInsightsPaths":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"NetworkInsightsPaths"},"DescribeNetworkInterfacePermissions":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"NetworkInterfacePermissions"},"DescribeNetworkInterfaces":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"NetworkInterfaces"},"DescribePlacementGroups":{"result_key":"PlacementGroups"},"DescribePrefixLists":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"PrefixLists"},"DescribePrincipalIdFormat":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Principals"},"DescribePublicIpv4Pools":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"PublicIpv4Pools"},"DescribeRegions":{"result_key":"Regions"},"DescribeReplaceRootVolumeTasks":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"ReplaceRootVolumeTasks"},"DescribeReservedInstances":{"result_key":"ReservedInstances"},"DescribeReservedInstancesListings":{"result_key":"ReservedInstancesListings"},"DescribeReservedInstancesModifications":{"input_token":"NextToken","output_token":"NextToken","result_key":"ReservedInstancesModifications"},"DescribeReservedInstancesOfferings":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"ReservedInstancesOfferings"},"DescribeRouteTables":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"RouteTables"},"DescribeScheduledInstanceAvailability":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"ScheduledInstanceAvailabilitySet"},"DescribeScheduledInstances":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"ScheduledInstanceSet"},"DescribeSecurityGroupRules":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"SecurityGroupRules"},"DescribeSecurityGroups":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"SecurityGroups"},"DescribeSnapshots":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Snapshots"},"DescribeSpotFleetRequests":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"SpotFleetRequestConfigs"},"DescribeSpotInstanceRequests":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"SpotInstanceRequests"},"DescribeSpotPriceHistory":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"SpotPriceHistory"},"DescribeStaleSecurityGroups":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"StaleSecurityGroupSet"},"DescribeStoreImageTasks":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"StoreImageTaskResults"},"DescribeSubnets":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Subnets"},"DescribeTags":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Tags"},"DescribeTrafficMirrorFilters":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"TrafficMirrorFilters"},"DescribeTrafficMirrorSessions":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"TrafficMirrorSessions"},"DescribeTrafficMirrorTargets":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"TrafficMirrorTargets"},"DescribeTransitGatewayAttachments":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"TransitGatewayAttachments"},"DescribeTransitGatewayConnectPeers":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"TransitGatewayConnectPeers"},"DescribeTransitGatewayConnects":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"TransitGatewayConnects"},"DescribeTransitGatewayMulticastDomains":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"TransitGatewayMulticastDomains"},"DescribeTransitGatewayPeeringAttachments":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"TransitGatewayPeeringAttachments"},"DescribeTransitGatewayRouteTables":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"TransitGatewayRouteTables"},"DescribeTransitGatewayVpcAttachments":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"TransitGatewayVpcAttachments"},"DescribeTransitGateways":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"TransitGateways"},"DescribeVolumeStatus":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"VolumeStatuses"},"DescribeVolumes":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Volumes"},"DescribeVolumesModifications":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"VolumesModifications"},"DescribeVpcClassicLinkDnsSupport":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Vpcs"},"DescribeVpcEndpointConnectionNotifications":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"ConnectionNotificationSet"},"DescribeVpcEndpointConnections":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"VpcEndpointConnections"},"DescribeVpcEndpointServiceConfigurations":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"ServiceConfigurations"},"DescribeVpcEndpointServicePermissions":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"AllowedPrincipals"},"DescribeVpcEndpoints":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"VpcEndpoints"},"DescribeVpcPeeringConnections":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"VpcPeeringConnections"},"DescribeVpcs":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Vpcs"},"DescribeVpnConnections":{"result_key":"VpnConnections"},"DescribeVpnGateways":{"result_key":"VpnGateways"},"GetAssociatedIpv6PoolCidrs":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Ipv6CidrAssociations"},"GetGroupsForCapacityReservation":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"CapacityReservationGroups"},"GetManagedPrefixListAssociations":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"PrefixListAssociations"},"GetManagedPrefixListEntries":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Entries"},"GetTransitGatewayAttachmentPropagations":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"TransitGatewayAttachmentPropagations"},"GetTransitGatewayMulticastDomainAssociations":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"MulticastDomainAssociations"},"GetTransitGatewayPrefixListReferences":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"TransitGatewayPrefixListReferences"},"GetTransitGatewayRouteTableAssociations":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Associations"},"GetTransitGatewayRouteTablePropagations":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"TransitGatewayRouteTablePropagations"},"SearchLocalGatewayRoutes":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Routes"},"SearchTransitGatewayMulticastGroups":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"MulticastGroups"}}}

/***/ }),
/* 196 */
/***/ (function(module, exports) {

	module.exports = {"version":2,"waiters":{"InstanceExists":{"delay":5,"maxAttempts":40,"operation":"DescribeInstances","acceptors":[{"matcher":"path","expected":true,"argument":"length(Reservations[]) > `0`","state":"success"},{"matcher":"error","expected":"InvalidInstanceID.NotFound","state":"retry"}]},"BundleTaskComplete":{"delay":15,"operation":"DescribeBundleTasks","maxAttempts":40,"acceptors":[{"expected":"complete","matcher":"pathAll","state":"success","argument":"BundleTasks[].State"},{"expected":"failed","matcher":"pathAny","state":"failure","argument":"BundleTasks[].State"}]},"ConversionTaskCancelled":{"delay":15,"operation":"DescribeConversionTasks","maxAttempts":40,"acceptors":[{"expected":"cancelled","matcher":"pathAll","state":"success","argument":"ConversionTasks[].State"}]},"ConversionTaskCompleted":{"delay":15,"operation":"DescribeConversionTasks","maxAttempts":40,"acceptors":[{"expected":"completed","matcher":"pathAll","state":"success","argument":"ConversionTasks[].State"},{"expected":"cancelled","matcher":"pathAny","state":"failure","argument":"ConversionTasks[].State"},{"expected":"cancelling","matcher":"pathAny","state":"failure","argument":"ConversionTasks[].State"}]},"ConversionTaskDeleted":{"delay":15,"operation":"DescribeConversionTasks","maxAttempts":40,"acceptors":[{"expected":"deleted","matcher":"pathAll","state":"success","argument":"ConversionTasks[].State"}]},"CustomerGatewayAvailable":{"delay":15,"operation":"DescribeCustomerGateways","maxAttempts":40,"acceptors":[{"expected":"available","matcher":"pathAll","state":"success","argument":"CustomerGateways[].State"},{"expected":"deleted","matcher":"pathAny","state":"failure","argument":"CustomerGateways[].State"},{"expected":"deleting","matcher":"pathAny","state":"failure","argument":"CustomerGateways[].State"}]},"ExportTaskCancelled":{"delay":15,"operation":"DescribeExportTasks","maxAttempts":40,"acceptors":[{"expected":"cancelled","matcher":"pathAll","state":"success","argument":"ExportTasks[].State"}]},"ExportTaskCompleted":{"delay":15,"operation":"DescribeExportTasks","maxAttempts":40,"acceptors":[{"expected":"completed","matcher":"pathAll","state":"success","argument":"ExportTasks[].State"}]},"ImageExists":{"operation":"DescribeImages","maxAttempts":40,"delay":15,"acceptors":[{"matcher":"path","expected":true,"argument":"length(Images[]) > `0`","state":"success"},{"matcher":"error","expected":"InvalidAMIID.NotFound","state":"retry"}]},"ImageAvailable":{"operation":"DescribeImages","maxAttempts":40,"delay":15,"acceptors":[{"state":"success","matcher":"pathAll","argument":"Images[].State","expected":"available"},{"state":"failure","matcher":"pathAny","argument":"Images[].State","expected":"failed"}]},"InstanceRunning":{"delay":15,"operation":"DescribeInstances","maxAttempts":40,"acceptors":[{"expected":"running","matcher":"pathAll","state":"success","argument":"Reservations[].Instances[].State.Name"},{"expected":"shutting-down","matcher":"pathAny","state":"failure","argument":"Reservations[].Instances[].State.Name"},{"expected":"terminated","matcher":"pathAny","state":"failure","argument":"Reservations[].Instances[].State.Name"},{"expected":"stopping","matcher":"pathAny","state":"failure","argument":"Reservations[].Instances[].State.Name"},{"matcher":"error","expected":"InvalidInstanceID.NotFound","state":"retry"}]},"InstanceStatusOk":{"operation":"DescribeInstanceStatus","maxAttempts":40,"delay":15,"acceptors":[{"state":"success","matcher":"pathAll","argument":"InstanceStatuses[].InstanceStatus.Status","expected":"ok"},{"matcher":"error","expected":"InvalidInstanceID.NotFound","state":"retry"}]},"InstanceStopped":{"delay":15,"operation":"DescribeInstances","maxAttempts":40,"acceptors":[{"expected":"stopped","matcher":"pathAll","state":"success","argument":"Reservations[].Instances[].State.Name"},{"expected":"pending","matcher":"pathAny","state":"failure","argument":"Reservations[].Instances[].State.Name"},{"expected":"terminated","matcher":"pathAny","state":"failure","argument":"Reservations[].Instances[].State.Name"}]},"InstanceTerminated":{"delay":15,"operation":"DescribeInstances","maxAttempts":40,"acceptors":[{"expected":"terminated","matcher":"pathAll","state":"success","argument":"Reservations[].Instances[].State.Name"},{"expected":"pending","matcher":"pathAny","state":"failure","argument":"Reservations[].Instances[].State.Name"},{"expected":"stopping","matcher":"pathAny","state":"failure","argument":"Reservations[].Instances[].State.Name"}]},"KeyPairExists":{"operation":"DescribeKeyPairs","delay":5,"maxAttempts":6,"acceptors":[{"expected":true,"matcher":"path","state":"success","argument":"length(KeyPairs[].KeyName) > `0`"},{"expected":"InvalidKeyPair.NotFound","matcher":"error","state":"retry"}]},"NatGatewayAvailable":{"operation":"DescribeNatGateways","delay":15,"maxAttempts":40,"acceptors":[{"state":"success","matcher":"pathAll","argument":"NatGateways[].State","expected":"available"},{"state":"failure","matcher":"pathAny","argument":"NatGateways[].State","expected":"failed"},{"state":"failure","matcher":"pathAny","argument":"NatGateways[].State","expected":"deleting"},{"state":"failure","matcher":"pathAny","argument":"NatGateways[].State","expected":"deleted"},{"state":"retry","matcher":"error","expected":"NatGatewayNotFound"}]},"NetworkInterfaceAvailable":{"operation":"DescribeNetworkInterfaces","delay":20,"maxAttempts":10,"acceptors":[{"expected":"available","matcher":"pathAll","state":"success","argument":"NetworkInterfaces[].Status"},{"expected":"InvalidNetworkInterfaceID.NotFound","matcher":"error","state":"failure"}]},"PasswordDataAvailable":{"operation":"GetPasswordData","maxAttempts":40,"delay":15,"acceptors":[{"state":"success","matcher":"path","argument":"length(PasswordData) > `0`","expected":true}]},"SnapshotCompleted":{"delay":15,"operation":"DescribeSnapshots","maxAttempts":40,"acceptors":[{"expected":"completed","matcher":"pathAll","state":"success","argument":"Snapshots[].State"}]},"SecurityGroupExists":{"operation":"DescribeSecurityGroups","delay":5,"maxAttempts":6,"acceptors":[{"expected":true,"matcher":"path","state":"success","argument":"length(SecurityGroups[].GroupId) > `0`"},{"expected":"InvalidGroup.NotFound","matcher":"error","state":"retry"}]},"SpotInstanceRequestFulfilled":{"operation":"DescribeSpotInstanceRequests","maxAttempts":40,"delay":15,"acceptors":[{"state":"success","matcher":"pathAll","argument":"SpotInstanceRequests[].Status.Code","expected":"fulfilled"},{"state":"success","matcher":"pathAll","argument":"SpotInstanceRequests[].Status.Code","expected":"request-canceled-and-instance-running"},{"state":"failure","matcher":"pathAny","argument":"SpotInstanceRequests[].Status.Code","expected":"schedule-expired"},{"state":"failure","matcher":"pathAny","argument":"SpotInstanceRequests[].Status.Code","expected":"canceled-before-fulfillment"},{"state":"failure","matcher":"pathAny","argument":"SpotInstanceRequests[].Status.Code","expected":"bad-parameters"},{"state":"failure","matcher":"pathAny","argument":"SpotInstanceRequests[].Status.Code","expected":"system-error"},{"state":"retry","matcher":"error","expected":"InvalidSpotInstanceRequestID.NotFound"}]},"SubnetAvailable":{"delay":15,"operation":"DescribeSubnets","maxAttempts":40,"acceptors":[{"expected":"available","matcher":"pathAll","state":"success","argument":"Subnets[].State"}]},"SystemStatusOk":{"operation":"DescribeInstanceStatus","maxAttempts":40,"delay":15,"acceptors":[{"state":"success","matcher":"pathAll","argument":"InstanceStatuses[].SystemStatus.Status","expected":"ok"}]},"VolumeAvailable":{"delay":15,"operation":"DescribeVolumes","maxAttempts":40,"acceptors":[{"expected":"available","matcher":"pathAll","state":"success","argument":"Volumes[].State"},{"expected":"deleted","matcher":"pathAny","state":"failure","argument":"Volumes[].State"}]},"VolumeDeleted":{"delay":15,"operation":"DescribeVolumes","maxAttempts":40,"acceptors":[{"expected":"deleted","matcher":"pathAll","state":"success","argument":"Volumes[].State"},{"matcher":"error","expected":"InvalidVolume.NotFound","state":"success"}]},"VolumeInUse":{"delay":15,"operation":"DescribeVolumes","maxAttempts":40,"acceptors":[{"expected":"in-use","matcher":"pathAll","state":"success","argument":"Volumes[].State"},{"expected":"deleted","matcher":"pathAny","state":"failure","argument":"Volumes[].State"}]},"VpcAvailable":{"delay":15,"operation":"DescribeVpcs","maxAttempts":40,"acceptors":[{"expected":"available","matcher":"pathAll","state":"success","argument":"Vpcs[].State"}]},"VpcExists":{"operation":"DescribeVpcs","delay":1,"maxAttempts":5,"acceptors":[{"matcher":"status","expected":200,"state":"success"},{"matcher":"error","expected":"InvalidVpcID.NotFound","state":"retry"}]},"VpnConnectionAvailable":{"delay":15,"operation":"DescribeVpnConnections","maxAttempts":40,"acceptors":[{"expected":"available","matcher":"pathAll","state":"success","argument":"VpnConnections[].State"},{"expected":"deleting","matcher":"pathAny","state":"failure","argument":"VpnConnections[].State"},{"expected":"deleted","matcher":"pathAny","state":"failure","argument":"VpnConnections[].State"}]},"VpnConnectionDeleted":{"delay":15,"operation":"DescribeVpnConnections","maxAttempts":40,"acceptors":[{"expected":"deleted","matcher":"pathAll","state":"success","argument":"VpnConnections[].State"},{"expected":"pending","matcher":"pathAny","state":"failure","argument":"VpnConnections[].State"}]},"VpcPeeringConnectionExists":{"delay":15,"operation":"DescribeVpcPeeringConnections","maxAttempts":40,"acceptors":[{"matcher":"status","expected":200,"state":"success"},{"matcher":"error","expected":"InvalidVpcPeeringConnectionID.NotFound","state":"retry"}]},"VpcPeeringConnectionDeleted":{"delay":15,"operation":"DescribeVpcPeeringConnections","maxAttempts":40,"acceptors":[{"expected":"deleted","matcher":"pathAll","state":"success","argument":"VpcPeeringConnections[].Status.Code"},{"matcher":"error","expected":"InvalidVpcPeeringConnectionID.NotFound","state":"success"}]}}}

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['ecr'] = {};
	AWS.ECR = Service.defineService('ecr', ['2015-09-21']);
	Object.defineProperty(apiLoader.services['ecr'], '2015-09-21', {
	  get: function get() {
	    var model = __webpack_require__(198);
	    model.paginators = __webpack_require__(199).pagination;
	    model.waiters = __webpack_require__(200).waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.ECR;


/***/ }),
/* 198 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-09-21","endpointPrefix":"api.ecr","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"Amazon ECR","serviceFullName":"Amazon EC2 Container Registry","serviceId":"ECR","signatureVersion":"v4","signingName":"ecr","targetPrefix":"AmazonEC2ContainerRegistry_V20150921","uid":"ecr-2015-09-21"},"operations":{"BatchCheckLayerAvailability":{"input":{"type":"structure","required":["repositoryName","layerDigests"],"members":{"registryId":{},"repositoryName":{},"layerDigests":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"layers":{"type":"list","member":{"type":"structure","members":{"layerDigest":{},"layerAvailability":{},"layerSize":{"type":"long"},"mediaType":{}}}},"failures":{"type":"list","member":{"type":"structure","members":{"layerDigest":{},"failureCode":{},"failureReason":{}}}}}}},"BatchDeleteImage":{"input":{"type":"structure","required":["repositoryName","imageIds"],"members":{"registryId":{},"repositoryName":{},"imageIds":{"shape":"Si"}}},"output":{"type":"structure","members":{"imageIds":{"shape":"Si"},"failures":{"shape":"Sn"}}}},"BatchGetImage":{"input":{"type":"structure","required":["repositoryName","imageIds"],"members":{"registryId":{},"repositoryName":{},"imageIds":{"shape":"Si"},"acceptedMediaTypes":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"images":{"type":"list","member":{"shape":"Sv"}},"failures":{"shape":"Sn"}}}},"CompleteLayerUpload":{"input":{"type":"structure","required":["repositoryName","uploadId","layerDigests"],"members":{"registryId":{},"repositoryName":{},"uploadId":{},"layerDigests":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"registryId":{},"repositoryName":{},"uploadId":{},"layerDigest":{}}}},"CreateRepository":{"input":{"type":"structure","required":["repositoryName"],"members":{"repositoryName":{},"tags":{"shape":"S12"},"imageTagMutability":{},"imageScanningConfiguration":{"shape":"S17"},"encryptionConfiguration":{"shape":"S19"}}},"output":{"type":"structure","members":{"repository":{"shape":"S1d"}}}},"DeleteLifecyclePolicy":{"input":{"type":"structure","required":["repositoryName"],"members":{"registryId":{},"repositoryName":{}}},"output":{"type":"structure","members":{"registryId":{},"repositoryName":{},"lifecyclePolicyText":{},"lastEvaluatedAt":{"type":"timestamp"}}}},"DeleteRegistryPolicy":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"registryId":{},"policyText":{}}}},"DeleteRepository":{"input":{"type":"structure","required":["repositoryName"],"members":{"registryId":{},"repositoryName":{},"force":{"type":"boolean"}}},"output":{"type":"structure","members":{"repository":{"shape":"S1d"}}}},"DeleteRepositoryPolicy":{"input":{"type":"structure","required":["repositoryName"],"members":{"registryId":{},"repositoryName":{}}},"output":{"type":"structure","members":{"registryId":{},"repositoryName":{},"policyText":{}}}},"DescribeImageScanFindings":{"input":{"type":"structure","required":["repositoryName","imageId"],"members":{"registryId":{},"repositoryName":{},"imageId":{"shape":"Sj"},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"registryId":{},"repositoryName":{},"imageId":{"shape":"Sj"},"imageScanStatus":{"shape":"S1y"},"imageScanFindings":{"type":"structure","members":{"imageScanCompletedAt":{"type":"timestamp"},"vulnerabilitySourceUpdatedAt":{"type":"timestamp"},"findings":{"type":"list","member":{"type":"structure","members":{"name":{},"description":{},"uri":{},"severity":{},"attributes":{"type":"list","member":{"type":"structure","required":["key"],"members":{"key":{},"value":{}}}}}}},"findingSeverityCounts":{"shape":"S2d"}}},"nextToken":{}}}},"DescribeImages":{"input":{"type":"structure","required":["repositoryName"],"members":{"registryId":{},"repositoryName":{},"imageIds":{"shape":"Si"},"nextToken":{},"maxResults":{"type":"integer"},"filter":{"type":"structure","members":{"tagStatus":{}}}}},"output":{"type":"structure","members":{"imageDetails":{"type":"list","member":{"type":"structure","members":{"registryId":{},"repositoryName":{},"imageDigest":{},"imageTags":{"shape":"S2l"},"imageSizeInBytes":{"type":"long"},"imagePushedAt":{"type":"timestamp"},"imageScanStatus":{"shape":"S1y"},"imageScanFindingsSummary":{"type":"structure","members":{"imageScanCompletedAt":{"type":"timestamp"},"vulnerabilitySourceUpdatedAt":{"type":"timestamp"},"findingSeverityCounts":{"shape":"S2d"}}},"imageManifestMediaType":{},"artifactMediaType":{}}}},"nextToken":{}}}},"DescribeRegistry":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"registryId":{},"replicationConfiguration":{"shape":"S2r"}}}},"DescribeRepositories":{"input":{"type":"structure","members":{"registryId":{},"repositoryNames":{"type":"list","member":{}},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"repositories":{"type":"list","member":{"shape":"S1d"}},"nextToken":{}}}},"GetAuthorizationToken":{"input":{"type":"structure","members":{"registryIds":{"deprecated":true,"deprecatedMessage":"This field is deprecated. The returned authorization token can be used to access any Amazon ECR registry that the IAM principal has access to, specifying a registry ID doesn't change the permissions scope of the authorization token.","type":"list","member":{}}}},"output":{"type":"structure","members":{"authorizationData":{"type":"list","member":{"type":"structure","members":{"authorizationToken":{},"expiresAt":{"type":"timestamp"},"proxyEndpoint":{}}}}}}},"GetDownloadUrlForLayer":{"input":{"type":"structure","required":["repositoryName","layerDigest"],"members":{"registryId":{},"repositoryName":{},"layerDigest":{}}},"output":{"type":"structure","members":{"downloadUrl":{},"layerDigest":{}}}},"GetLifecyclePolicy":{"input":{"type":"structure","required":["repositoryName"],"members":{"registryId":{},"repositoryName":{}}},"output":{"type":"structure","members":{"registryId":{},"repositoryName":{},"lifecyclePolicyText":{},"lastEvaluatedAt":{"type":"timestamp"}}}},"GetLifecyclePolicyPreview":{"input":{"type":"structure","required":["repositoryName"],"members":{"registryId":{},"repositoryName":{},"imageIds":{"shape":"Si"},"nextToken":{},"maxResults":{"type":"integer"},"filter":{"type":"structure","members":{"tagStatus":{}}}}},"output":{"type":"structure","members":{"registryId":{},"repositoryName":{},"lifecyclePolicyText":{},"status":{},"nextToken":{},"previewResults":{"type":"list","member":{"type":"structure","members":{"imageTags":{"shape":"S2l"},"imageDigest":{},"imagePushedAt":{"type":"timestamp"},"action":{"type":"structure","members":{"type":{}}},"appliedRulePriority":{"type":"integer"}}}},"summary":{"type":"structure","members":{"expiringImageTotalCount":{"type":"integer"}}}}}},"GetRegistryPolicy":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"registryId":{},"policyText":{}}}},"GetRepositoryPolicy":{"input":{"type":"structure","required":["repositoryName"],"members":{"registryId":{},"repositoryName":{}}},"output":{"type":"structure","members":{"registryId":{},"repositoryName":{},"policyText":{}}}},"InitiateLayerUpload":{"input":{"type":"structure","required":["repositoryName"],"members":{"registryId":{},"repositoryName":{}}},"output":{"type":"structure","members":{"uploadId":{},"partSize":{"type":"long"}}}},"ListImages":{"input":{"type":"structure","required":["repositoryName"],"members":{"registryId":{},"repositoryName":{},"nextToken":{},"maxResults":{"type":"integer"},"filter":{"type":"structure","members":{"tagStatus":{}}}}},"output":{"type":"structure","members":{"imageIds":{"shape":"Si"},"nextToken":{}}}},"ListTagsForResource":{"input":{"type":"structure","required":["resourceArn"],"members":{"resourceArn":{}}},"output":{"type":"structure","members":{"tags":{"shape":"S12"}}}},"PutImage":{"input":{"type":"structure","required":["repositoryName","imageManifest"],"members":{"registryId":{},"repositoryName":{},"imageManifest":{},"imageManifestMediaType":{},"imageTag":{},"imageDigest":{}}},"output":{"type":"structure","members":{"image":{"shape":"Sv"}}}},"PutImageScanningConfiguration":{"input":{"type":"structure","required":["repositoryName","imageScanningConfiguration"],"members":{"registryId":{},"repositoryName":{},"imageScanningConfiguration":{"shape":"S17"}}},"output":{"type":"structure","members":{"registryId":{},"repositoryName":{},"imageScanningConfiguration":{"shape":"S17"}}}},"PutImageTagMutability":{"input":{"type":"structure","required":["repositoryName","imageTagMutability"],"members":{"registryId":{},"repositoryName":{},"imageTagMutability":{}}},"output":{"type":"structure","members":{"registryId":{},"repositoryName":{},"imageTagMutability":{}}}},"PutLifecyclePolicy":{"input":{"type":"structure","required":["repositoryName","lifecyclePolicyText"],"members":{"registryId":{},"repositoryName":{},"lifecyclePolicyText":{}}},"output":{"type":"structure","members":{"registryId":{},"repositoryName":{},"lifecyclePolicyText":{}}}},"PutRegistryPolicy":{"input":{"type":"structure","required":["policyText"],"members":{"policyText":{}}},"output":{"type":"structure","members":{"registryId":{},"policyText":{}}}},"PutReplicationConfiguration":{"input":{"type":"structure","required":["replicationConfiguration"],"members":{"replicationConfiguration":{"shape":"S2r"}}},"output":{"type":"structure","members":{"replicationConfiguration":{"shape":"S2r"}}}},"SetRepositoryPolicy":{"input":{"type":"structure","required":["repositoryName","policyText"],"members":{"registryId":{},"repositoryName":{},"policyText":{},"force":{"type":"boolean"}}},"output":{"type":"structure","members":{"registryId":{},"repositoryName":{},"policyText":{}}}},"StartImageScan":{"input":{"type":"structure","required":["repositoryName","imageId"],"members":{"registryId":{},"repositoryName":{},"imageId":{"shape":"Sj"}}},"output":{"type":"structure","members":{"registryId":{},"repositoryName":{},"imageId":{"shape":"Sj"},"imageScanStatus":{"shape":"S1y"}}}},"StartLifecyclePolicyPreview":{"input":{"type":"structure","required":["repositoryName"],"members":{"registryId":{},"repositoryName":{},"lifecyclePolicyText":{}}},"output":{"type":"structure","members":{"registryId":{},"repositoryName":{},"lifecyclePolicyText":{},"status":{}}}},"TagResource":{"input":{"type":"structure","required":["resourceArn","tags"],"members":{"resourceArn":{},"tags":{"shape":"S12"}}},"output":{"type":"structure","members":{}}},"UntagResource":{"input":{"type":"structure","required":["resourceArn","tagKeys"],"members":{"resourceArn":{},"tagKeys":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"UploadLayerPart":{"input":{"type":"structure","required":["repositoryName","uploadId","partFirstByte","partLastByte","layerPartBlob"],"members":{"registryId":{},"repositoryName":{},"uploadId":{},"partFirstByte":{"type":"long"},"partLastByte":{"type":"long"},"layerPartBlob":{"type":"blob"}}},"output":{"type":"structure","members":{"registryId":{},"repositoryName":{},"uploadId":{},"lastByteReceived":{"type":"long"}}}}},"shapes":{"Si":{"type":"list","member":{"shape":"Sj"}},"Sj":{"type":"structure","members":{"imageDigest":{},"imageTag":{}}},"Sn":{"type":"list","member":{"type":"structure","members":{"imageId":{"shape":"Sj"},"failureCode":{},"failureReason":{}}}},"Sv":{"type":"structure","members":{"registryId":{},"repositoryName":{},"imageId":{"shape":"Sj"},"imageManifest":{},"imageManifestMediaType":{}}},"S12":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{}}}},"S17":{"type":"structure","members":{"scanOnPush":{"type":"boolean"}}},"S19":{"type":"structure","required":["encryptionType"],"members":{"encryptionType":{},"kmsKey":{}}},"S1d":{"type":"structure","members":{"repositoryArn":{},"registryId":{},"repositoryName":{},"repositoryUri":{},"createdAt":{"type":"timestamp"},"imageTagMutability":{},"imageScanningConfiguration":{"shape":"S17"},"encryptionConfiguration":{"shape":"S19"}}},"S1y":{"type":"structure","members":{"status":{},"description":{}}},"S2d":{"type":"map","key":{},"value":{"type":"integer"}},"S2l":{"type":"list","member":{}},"S2r":{"type":"structure","required":["rules"],"members":{"rules":{"type":"list","member":{"type":"structure","required":["destinations"],"members":{"destinations":{"type":"list","member":{"type":"structure","required":["region","registryId"],"members":{"region":{},"registryId":{}}}}}}}}}}}

/***/ }),
/* 199 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeImageScanFindings":{"input_token":"nextToken","limit_key":"maxResults","non_aggregate_keys":["registryId","repositoryName","imageId","imageScanStatus","imageScanFindings"],"output_token":"nextToken","result_key":"imageScanFindings.findings"},"DescribeImages":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"imageDetails"},"DescribeRepositories":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"repositories"},"GetLifecyclePolicyPreview":{"input_token":"nextToken","limit_key":"maxResults","non_aggregate_keys":["registryId","repositoryName","lifecyclePolicyText","status","summary"],"output_token":"nextToken","result_key":"previewResults"},"ListImages":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"imageIds"}}}

/***/ }),
/* 200 */
/***/ (function(module, exports) {

	module.exports = {"version":2,"waiters":{"ImageScanComplete":{"description":"Wait until an image scan is complete and findings can be accessed","operation":"DescribeImageScanFindings","delay":5,"maxAttempts":60,"acceptors":[{"state":"success","matcher":"path","argument":"imageScanStatus.status","expected":"COMPLETE"},{"state":"failure","matcher":"path","argument":"imageScanStatus.status","expected":"FAILED"}]},"LifecyclePolicyPreviewComplete":{"description":"Wait until a lifecycle policy preview request is complete and results can be accessed","operation":"GetLifecyclePolicyPreview","delay":5,"maxAttempts":20,"acceptors":[{"state":"success","matcher":"path","argument":"status","expected":"COMPLETE"},{"state":"failure","matcher":"path","argument":"status","expected":"FAILED"}]}}}

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['ecs'] = {};
	AWS.ECS = Service.defineService('ecs', ['2014-11-13']);
	Object.defineProperty(apiLoader.services['ecs'], '2014-11-13', {
	  get: function get() {
	    var model = __webpack_require__(202);
	    model.paginators = __webpack_require__(203).pagination;
	    model.waiters = __webpack_require__(204).waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.ECS;


/***/ }),
/* 202 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2014-11-13","endpointPrefix":"ecs","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"Amazon ECS","serviceFullName":"Amazon EC2 Container Service","serviceId":"ECS","signatureVersion":"v4","targetPrefix":"AmazonEC2ContainerServiceV20141113","uid":"ecs-2014-11-13"},"operations":{"CreateCapacityProvider":{"input":{"type":"structure","required":["name","autoScalingGroupProvider"],"members":{"name":{},"autoScalingGroupProvider":{"shape":"S3"},"tags":{"shape":"Sa"}}},"output":{"type":"structure","members":{"capacityProvider":{"shape":"Sf"}}}},"CreateCluster":{"input":{"type":"structure","members":{"clusterName":{},"tags":{"shape":"Sa"},"settings":{"shape":"Sj"},"configuration":{"shape":"Sm"},"capacityProviders":{"shape":"Sr"},"defaultCapacityProviderStrategy":{"shape":"Ss"}}},"output":{"type":"structure","members":{"cluster":{"shape":"Sx"}}}},"CreateService":{"input":{"type":"structure","required":["serviceName"],"members":{"cluster":{},"serviceName":{},"taskDefinition":{},"loadBalancers":{"shape":"S15"},"serviceRegistries":{"shape":"S18"},"desiredCount":{"type":"integer"},"clientToken":{},"launchType":{},"capacityProviderStrategy":{"shape":"Ss"},"platformVersion":{},"role":{},"deploymentConfiguration":{"shape":"S1b"},"placementConstraints":{"shape":"S1d"},"placementStrategy":{"shape":"S1g"},"networkConfiguration":{"shape":"S1j"},"healthCheckGracePeriodSeconds":{"type":"integer"},"schedulingStrategy":{},"deploymentController":{"shape":"S1n"},"tags":{"shape":"Sa"},"enableECSManagedTags":{"type":"boolean"},"propagateTags":{},"enableExecuteCommand":{"type":"boolean"}}},"output":{"type":"structure","members":{"service":{"shape":"S1r"}}}},"CreateTaskSet":{"input":{"type":"structure","required":["service","cluster","taskDefinition"],"members":{"service":{},"cluster":{},"externalId":{},"taskDefinition":{},"networkConfiguration":{"shape":"S1j"},"loadBalancers":{"shape":"S15"},"serviceRegistries":{"shape":"S18"},"launchType":{},"capacityProviderStrategy":{"shape":"Ss"},"platformVersion":{},"scale":{"shape":"S1v"},"clientToken":{},"tags":{"shape":"Sa"}}},"output":{"type":"structure","members":{"taskSet":{"shape":"S1t"}}}},"DeleteAccountSetting":{"input":{"type":"structure","required":["name"],"members":{"name":{},"principalArn":{}}},"output":{"type":"structure","members":{"setting":{"shape":"S29"}}}},"DeleteAttributes":{"input":{"type":"structure","required":["attributes"],"members":{"cluster":{},"attributes":{"shape":"S2b"}}},"output":{"type":"structure","members":{"attributes":{"shape":"S2b"}}}},"DeleteCapacityProvider":{"input":{"type":"structure","required":["capacityProvider"],"members":{"capacityProvider":{}}},"output":{"type":"structure","members":{"capacityProvider":{"shape":"Sf"}}}},"DeleteCluster":{"input":{"type":"structure","required":["cluster"],"members":{"cluster":{}}},"output":{"type":"structure","members":{"cluster":{"shape":"Sx"}}}},"DeleteService":{"input":{"type":"structure","required":["service"],"members":{"cluster":{},"service":{},"force":{"type":"boolean"}}},"output":{"type":"structure","members":{"service":{"shape":"S1r"}}}},"DeleteTaskSet":{"input":{"type":"structure","required":["cluster","service","taskSet"],"members":{"cluster":{},"service":{},"taskSet":{},"force":{"type":"boolean"}}},"output":{"type":"structure","members":{"taskSet":{"shape":"S1t"}}}},"DeregisterContainerInstance":{"input":{"type":"structure","required":["containerInstance"],"members":{"cluster":{},"containerInstance":{},"force":{"type":"boolean"}}},"output":{"type":"structure","members":{"containerInstance":{"shape":"S2q"}}}},"DeregisterTaskDefinition":{"input":{"type":"structure","required":["taskDefinition"],"members":{"taskDefinition":{}}},"output":{"type":"structure","members":{"taskDefinition":{"shape":"S2y"}}}},"DescribeCapacityProviders":{"input":{"type":"structure","members":{"capacityProviders":{"shape":"Sr"},"include":{"type":"list","member":{}},"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"capacityProviders":{"type":"list","member":{"shape":"Sf"}},"failures":{"shape":"S55"},"nextToken":{}}}},"DescribeClusters":{"input":{"type":"structure","members":{"clusters":{"shape":"Sr"},"include":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"clusters":{"type":"list","member":{"shape":"Sx"}},"failures":{"shape":"S55"}}}},"DescribeContainerInstances":{"input":{"type":"structure","required":["containerInstances"],"members":{"cluster":{},"containerInstances":{"shape":"Sr"},"include":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"containerInstances":{"shape":"S5g"},"failures":{"shape":"S55"}}}},"DescribeServices":{"input":{"type":"structure","required":["services"],"members":{"cluster":{},"services":{"shape":"Sr"},"include":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"services":{"type":"list","member":{"shape":"S1r"}},"failures":{"shape":"S55"}}}},"DescribeTaskDefinition":{"input":{"type":"structure","required":["taskDefinition"],"members":{"taskDefinition":{},"include":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"taskDefinition":{"shape":"S2y"},"tags":{"shape":"Sa"}}}},"DescribeTaskSets":{"input":{"type":"structure","required":["cluster","service"],"members":{"cluster":{},"service":{},"taskSets":{"shape":"Sr"},"include":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"taskSets":{"shape":"S1s"},"failures":{"shape":"S55"}}}},"DescribeTasks":{"input":{"type":"structure","required":["tasks"],"members":{"cluster":{},"tasks":{"shape":"Sr"},"include":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"tasks":{"shape":"S5y"},"failures":{"shape":"S55"}}}},"DiscoverPollEndpoint":{"input":{"type":"structure","members":{"containerInstance":{},"cluster":{}}},"output":{"type":"structure","members":{"endpoint":{},"telemetryEndpoint":{}}}},"ExecuteCommand":{"input":{"type":"structure","required":["command","interactive","task"],"members":{"cluster":{},"container":{},"command":{},"interactive":{"type":"boolean"},"task":{}}},"output":{"type":"structure","members":{"clusterArn":{},"containerArn":{},"containerName":{},"interactive":{"type":"boolean"},"session":{"type":"structure","members":{"sessionId":{},"streamUrl":{},"tokenValue":{"type":"string","sensitive":true}}},"taskArn":{}}}},"ListAccountSettings":{"input":{"type":"structure","members":{"name":{},"value":{},"principalArn":{},"effectiveSettings":{"type":"boolean"},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"settings":{"type":"list","member":{"shape":"S29"}},"nextToken":{}}}},"ListAttributes":{"input":{"type":"structure","required":["targetType"],"members":{"cluster":{},"targetType":{},"attributeName":{},"attributeValue":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"attributes":{"shape":"S2b"},"nextToken":{}}}},"ListClusters":{"input":{"type":"structure","members":{"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"clusterArns":{"shape":"Sr"},"nextToken":{}}}},"ListContainerInstances":{"input":{"type":"structure","members":{"cluster":{},"filter":{},"nextToken":{},"maxResults":{"type":"integer"},"status":{}}},"output":{"type":"structure","members":{"containerInstanceArns":{"shape":"Sr"},"nextToken":{}}}},"ListServices":{"input":{"type":"structure","members":{"cluster":{},"nextToken":{},"maxResults":{"type":"integer"},"launchType":{},"schedulingStrategy":{}}},"output":{"type":"structure","members":{"serviceArns":{"shape":"Sr"},"nextToken":{}}}},"ListTagsForResource":{"input":{"type":"structure","required":["resourceArn"],"members":{"resourceArn":{}}},"output":{"type":"structure","members":{"tags":{"shape":"Sa"}}}},"ListTaskDefinitionFamilies":{"input":{"type":"structure","members":{"familyPrefix":{},"status":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"families":{"shape":"Sr"},"nextToken":{}}}},"ListTaskDefinitions":{"input":{"type":"structure","members":{"familyPrefix":{},"status":{},"sort":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"taskDefinitionArns":{"shape":"Sr"},"nextToken":{}}}},"ListTasks":{"input":{"type":"structure","members":{"cluster":{},"containerInstance":{},"family":{},"nextToken":{},"maxResults":{"type":"integer"},"startedBy":{},"serviceName":{},"desiredStatus":{},"launchType":{}}},"output":{"type":"structure","members":{"taskArns":{"shape":"Sr"},"nextToken":{}}}},"PutAccountSetting":{"input":{"type":"structure","required":["name","value"],"members":{"name":{},"value":{},"principalArn":{}}},"output":{"type":"structure","members":{"setting":{"shape":"S29"}}}},"PutAccountSettingDefault":{"input":{"type":"structure","required":["name","value"],"members":{"name":{},"value":{}}},"output":{"type":"structure","members":{"setting":{"shape":"S29"}}}},"PutAttributes":{"input":{"type":"structure","required":["attributes"],"members":{"cluster":{},"attributes":{"shape":"S2b"}}},"output":{"type":"structure","members":{"attributes":{"shape":"S2b"}}}},"PutClusterCapacityProviders":{"input":{"type":"structure","required":["cluster","capacityProviders","defaultCapacityProviderStrategy"],"members":{"cluster":{},"capacityProviders":{"shape":"Sr"},"defaultCapacityProviderStrategy":{"shape":"Ss"}}},"output":{"type":"structure","members":{"cluster":{"shape":"Sx"}}}},"RegisterContainerInstance":{"input":{"type":"structure","members":{"cluster":{},"instanceIdentityDocument":{},"instanceIdentityDocumentSignature":{},"totalResources":{"shape":"S2t"},"versionInfo":{"shape":"S2s"},"containerInstanceArn":{},"attributes":{"shape":"S2b"},"platformDevices":{"type":"list","member":{"type":"structure","required":["id","type"],"members":{"id":{},"type":{}}}},"tags":{"shape":"Sa"}}},"output":{"type":"structure","members":{"containerInstance":{"shape":"S2q"}}}},"RegisterTaskDefinition":{"input":{"type":"structure","required":["family","containerDefinitions"],"members":{"family":{},"taskRoleArn":{},"executionRoleArn":{},"networkMode":{},"containerDefinitions":{"shape":"S2z"},"volumes":{"shape":"S49"},"placementConstraints":{"shape":"S4n"},"requiresCompatibilities":{"shape":"S4q"},"cpu":{},"memory":{},"tags":{"shape":"Sa"},"pidMode":{},"ipcMode":{},"proxyConfiguration":{"shape":"S4w"},"inferenceAccelerators":{"shape":"S4s"},"ephemeralStorage":{"shape":"S4z"}}},"output":{"type":"structure","members":{"taskDefinition":{"shape":"S2y"},"tags":{"shape":"Sa"}}}},"RunTask":{"input":{"type":"structure","required":["taskDefinition"],"members":{"capacityProviderStrategy":{"shape":"Ss"},"cluster":{},"count":{"type":"integer"},"enableECSManagedTags":{"type":"boolean"},"enableExecuteCommand":{"type":"boolean"},"group":{},"launchType":{},"networkConfiguration":{"shape":"S1j"},"overrides":{"shape":"S6c"},"placementConstraints":{"shape":"S1d"},"placementStrategy":{"shape":"S1g"},"platformVersion":{},"propagateTags":{},"referenceId":{},"startedBy":{},"tags":{"shape":"Sa"},"taskDefinition":{}}},"output":{"type":"structure","members":{"tasks":{"shape":"S5y"},"failures":{"shape":"S55"}}}},"StartTask":{"input":{"type":"structure","required":["containerInstances","taskDefinition"],"members":{"cluster":{},"containerInstances":{"shape":"Sr"},"enableECSManagedTags":{"type":"boolean"},"enableExecuteCommand":{"type":"boolean"},"group":{},"networkConfiguration":{"shape":"S1j"},"overrides":{"shape":"S6c"},"propagateTags":{},"referenceId":{},"startedBy":{},"tags":{"shape":"Sa"},"taskDefinition":{}}},"output":{"type":"structure","members":{"tasks":{"shape":"S5y"},"failures":{"shape":"S55"}}}},"StopTask":{"input":{"type":"structure","required":["task"],"members":{"cluster":{},"task":{},"reason":{}}},"output":{"type":"structure","members":{"task":{"shape":"S5z"}}}},"SubmitAttachmentStateChanges":{"input":{"type":"structure","required":["attachments"],"members":{"cluster":{},"attachments":{"shape":"S7x"}}},"output":{"type":"structure","members":{"acknowledgment":{}}}},"SubmitContainerStateChange":{"input":{"type":"structure","members":{"cluster":{},"task":{},"containerName":{},"runtimeId":{},"status":{},"exitCode":{"type":"integer"},"reason":{},"networkBindings":{"shape":"S63"}}},"output":{"type":"structure","members":{"acknowledgment":{}}}},"SubmitTaskStateChange":{"input":{"type":"structure","members":{"cluster":{},"task":{},"status":{},"reason":{},"containers":{"type":"list","member":{"type":"structure","members":{"containerName":{},"imageDigest":{},"runtimeId":{},"exitCode":{"type":"integer"},"networkBindings":{"shape":"S63"},"reason":{},"status":{}}}},"attachments":{"shape":"S7x"},"managedAgents":{"type":"list","member":{"type":"structure","required":["containerName","managedAgentName","status"],"members":{"containerName":{},"managedAgentName":{},"status":{},"reason":{}}}},"pullStartedAt":{"type":"timestamp"},"pullStoppedAt":{"type":"timestamp"},"executionStoppedAt":{"type":"timestamp"}}},"output":{"type":"structure","members":{"acknowledgment":{}}}},"TagResource":{"input":{"type":"structure","required":["resourceArn","tags"],"members":{"resourceArn":{},"tags":{"shape":"Sa"}}},"output":{"type":"structure","members":{}}},"UntagResource":{"input":{"type":"structure","required":["resourceArn","tagKeys"],"members":{"resourceArn":{},"tagKeys":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"UpdateCapacityProvider":{"input":{"type":"structure","required":["name","autoScalingGroupProvider"],"members":{"name":{},"autoScalingGroupProvider":{"type":"structure","members":{"managedScaling":{"shape":"S4"},"managedTerminationProtection":{}}}}},"output":{"type":"structure","members":{"capacityProvider":{"shape":"Sf"}}}},"UpdateCluster":{"input":{"type":"structure","required":["cluster"],"members":{"cluster":{},"settings":{"shape":"Sj"},"configuration":{"shape":"Sm"}}},"output":{"type":"structure","members":{"cluster":{"shape":"Sx"}}}},"UpdateClusterSettings":{"input":{"type":"structure","required":["cluster","settings"],"members":{"cluster":{},"settings":{"shape":"Sj"}}},"output":{"type":"structure","members":{"cluster":{"shape":"Sx"}}}},"UpdateContainerAgent":{"input":{"type":"structure","required":["containerInstance"],"members":{"cluster":{},"containerInstance":{}}},"output":{"type":"structure","members":{"containerInstance":{"shape":"S2q"}}}},"UpdateContainerInstancesState":{"input":{"type":"structure","required":["containerInstances","status"],"members":{"cluster":{},"containerInstances":{"shape":"Sr"},"status":{}}},"output":{"type":"structure","members":{"containerInstances":{"shape":"S5g"},"failures":{"shape":"S55"}}}},"UpdateService":{"input":{"type":"structure","required":["service"],"members":{"cluster":{},"service":{},"desiredCount":{"type":"integer"},"taskDefinition":{},"capacityProviderStrategy":{"shape":"Ss"},"deploymentConfiguration":{"shape":"S1b"},"networkConfiguration":{"shape":"S1j"},"placementConstraints":{"shape":"S1d"},"placementStrategy":{"shape":"S1g"},"platformVersion":{},"forceNewDeployment":{"type":"boolean"},"healthCheckGracePeriodSeconds":{"type":"integer"},"enableExecuteCommand":{"type":"boolean"}}},"output":{"type":"structure","members":{"service":{"shape":"S1r"}}}},"UpdateServicePrimaryTaskSet":{"input":{"type":"structure","required":["cluster","service","primaryTaskSet"],"members":{"cluster":{},"service":{},"primaryTaskSet":{}}},"output":{"type":"structure","members":{"taskSet":{"shape":"S1t"}}}},"UpdateTaskSet":{"input":{"type":"structure","required":["cluster","service","taskSet","scale"],"members":{"cluster":{},"service":{},"taskSet":{},"scale":{"shape":"S1v"}}},"output":{"type":"structure","members":{"taskSet":{"shape":"S1t"}}}}},"shapes":{"S3":{"type":"structure","required":["autoScalingGroupArn"],"members":{"autoScalingGroupArn":{},"managedScaling":{"shape":"S4"},"managedTerminationProtection":{}}},"S4":{"type":"structure","members":{"status":{},"targetCapacity":{"type":"integer"},"minimumScalingStepSize":{"type":"integer"},"maximumScalingStepSize":{"type":"integer"},"instanceWarmupPeriod":{"type":"integer"}}},"Sa":{"type":"list","member":{"type":"structure","members":{"key":{},"value":{}}}},"Sf":{"type":"structure","members":{"capacityProviderArn":{},"name":{},"status":{},"autoScalingGroupProvider":{"shape":"S3"},"updateStatus":{},"updateStatusReason":{},"tags":{"shape":"Sa"}}},"Sj":{"type":"list","member":{"type":"structure","members":{"name":{},"value":{}}}},"Sm":{"type":"structure","members":{"executeCommandConfiguration":{"type":"structure","members":{"kmsKeyId":{},"logging":{},"logConfiguration":{"type":"structure","members":{"cloudWatchLogGroupName":{},"cloudWatchEncryptionEnabled":{"type":"boolean"},"s3BucketName":{},"s3EncryptionEnabled":{"type":"boolean"},"s3KeyPrefix":{}}}}}}},"Sr":{"type":"list","member":{}},"Ss":{"type":"list","member":{"type":"structure","required":["capacityProvider"],"members":{"capacityProvider":{},"weight":{"type":"integer"},"base":{"type":"integer"}}}},"Sx":{"type":"structure","members":{"clusterArn":{},"clusterName":{},"configuration":{"shape":"Sm"},"status":{},"registeredContainerInstancesCount":{"type":"integer"},"runningTasksCount":{"type":"integer"},"pendingTasksCount":{"type":"integer"},"activeServicesCount":{"type":"integer"},"statistics":{"type":"list","member":{"shape":"S10"}},"tags":{"shape":"Sa"},"settings":{"shape":"Sj"},"capacityProviders":{"shape":"Sr"},"defaultCapacityProviderStrategy":{"shape":"Ss"},"attachments":{"shape":"S11"},"attachmentsStatus":{}}},"S10":{"type":"structure","members":{"name":{},"value":{}}},"S11":{"type":"list","member":{"type":"structure","members":{"id":{},"type":{},"status":{},"details":{"type":"list","member":{"shape":"S10"}}}}},"S15":{"type":"list","member":{"type":"structure","members":{"targetGroupArn":{},"loadBalancerName":{},"containerName":{},"containerPort":{"type":"integer"}}}},"S18":{"type":"list","member":{"type":"structure","members":{"registryArn":{},"port":{"type":"integer"},"containerName":{},"containerPort":{"type":"integer"}}}},"S1b":{"type":"structure","members":{"deploymentCircuitBreaker":{"type":"structure","required":["enable","rollback"],"members":{"enable":{"type":"boolean"},"rollback":{"type":"boolean"}}},"maximumPercent":{"type":"integer"},"minimumHealthyPercent":{"type":"integer"}}},"S1d":{"type":"list","member":{"type":"structure","members":{"type":{},"expression":{}}}},"S1g":{"type":"list","member":{"type":"structure","members":{"type":{},"field":{}}}},"S1j":{"type":"structure","members":{"awsvpcConfiguration":{"type":"structure","required":["subnets"],"members":{"subnets":{"shape":"Sr"},"securityGroups":{"shape":"Sr"},"assignPublicIp":{}}}}},"S1n":{"type":"structure","required":["type"],"members":{"type":{}}},"S1r":{"type":"structure","members":{"serviceArn":{},"serviceName":{},"clusterArn":{},"loadBalancers":{"shape":"S15"},"serviceRegistries":{"shape":"S18"},"status":{},"desiredCount":{"type":"integer"},"runningCount":{"type":"integer"},"pendingCount":{"type":"integer"},"launchType":{},"capacityProviderStrategy":{"shape":"Ss"},"platformVersion":{},"taskDefinition":{},"deploymentConfiguration":{"shape":"S1b"},"taskSets":{"shape":"S1s"},"deployments":{"type":"list","member":{"type":"structure","members":{"id":{},"status":{},"taskDefinition":{},"desiredCount":{"type":"integer"},"pendingCount":{"type":"integer"},"runningCount":{"type":"integer"},"failedTasks":{"type":"integer"},"createdAt":{"type":"timestamp"},"updatedAt":{"type":"timestamp"},"capacityProviderStrategy":{"shape":"Ss"},"launchType":{},"platformVersion":{},"networkConfiguration":{"shape":"S1j"},"rolloutState":{},"rolloutStateReason":{}}}},"roleArn":{},"events":{"type":"list","member":{"type":"structure","members":{"id":{},"createdAt":{"type":"timestamp"},"message":{}}}},"createdAt":{"type":"timestamp"},"placementConstraints":{"shape":"S1d"},"placementStrategy":{"shape":"S1g"},"networkConfiguration":{"shape":"S1j"},"healthCheckGracePeriodSeconds":{"type":"integer"},"schedulingStrategy":{},"deploymentController":{"shape":"S1n"},"tags":{"shape":"Sa"},"createdBy":{},"enableECSManagedTags":{"type":"boolean"},"propagateTags":{},"enableExecuteCommand":{"type":"boolean"}}},"S1s":{"type":"list","member":{"shape":"S1t"}},"S1t":{"type":"structure","members":{"id":{},"taskSetArn":{},"serviceArn":{},"clusterArn":{},"startedBy":{},"externalId":{},"status":{},"taskDefinition":{},"computedDesiredCount":{"type":"integer"},"pendingCount":{"type":"integer"},"runningCount":{"type":"integer"},"createdAt":{"type":"timestamp"},"updatedAt":{"type":"timestamp"},"launchType":{},"capacityProviderStrategy":{"shape":"Ss"},"platformVersion":{},"networkConfiguration":{"shape":"S1j"},"loadBalancers":{"shape":"S15"},"serviceRegistries":{"shape":"S18"},"scale":{"shape":"S1v"},"stabilityStatus":{},"stabilityStatusAt":{"type":"timestamp"},"tags":{"shape":"Sa"}}},"S1v":{"type":"structure","members":{"value":{"type":"double"},"unit":{}}},"S29":{"type":"structure","members":{"name":{},"value":{},"principalArn":{}}},"S2b":{"type":"list","member":{"shape":"S2c"}},"S2c":{"type":"structure","required":["name"],"members":{"name":{},"value":{},"targetType":{},"targetId":{}}},"S2q":{"type":"structure","members":{"containerInstanceArn":{},"ec2InstanceId":{},"capacityProviderName":{},"version":{"type":"long"},"versionInfo":{"shape":"S2s"},"remainingResources":{"shape":"S2t"},"registeredResources":{"shape":"S2t"},"status":{},"statusReason":{},"agentConnected":{"type":"boolean"},"runningTasksCount":{"type":"integer"},"pendingTasksCount":{"type":"integer"},"agentUpdateStatus":{},"attributes":{"shape":"S2b"},"registeredAt":{"type":"timestamp"},"attachments":{"shape":"S11"},"tags":{"shape":"Sa"}}},"S2s":{"type":"structure","members":{"agentVersion":{},"agentHash":{},"dockerVersion":{}}},"S2t":{"type":"list","member":{"type":"structure","members":{"name":{},"type":{},"doubleValue":{"type":"double"},"longValue":{"type":"long"},"integerValue":{"type":"integer"},"stringSetValue":{"shape":"Sr"}}}},"S2y":{"type":"structure","members":{"taskDefinitionArn":{},"containerDefinitions":{"shape":"S2z"},"family":{},"taskRoleArn":{},"executionRoleArn":{},"networkMode":{},"revision":{"type":"integer"},"volumes":{"shape":"S49"},"status":{},"requiresAttributes":{"type":"list","member":{"shape":"S2c"}},"placementConstraints":{"shape":"S4n"},"compatibilities":{"shape":"S4q"},"requiresCompatibilities":{"shape":"S4q"},"cpu":{},"memory":{},"inferenceAccelerators":{"shape":"S4s"},"pidMode":{},"ipcMode":{},"proxyConfiguration":{"shape":"S4w"},"registeredAt":{"type":"timestamp"},"deregisteredAt":{"type":"timestamp"},"registeredBy":{},"ephemeralStorage":{"shape":"S4z"}}},"S2z":{"type":"list","member":{"type":"structure","members":{"name":{},"image":{},"repositoryCredentials":{"type":"structure","required":["credentialsParameter"],"members":{"credentialsParameter":{}}},"cpu":{"type":"integer"},"memory":{"type":"integer"},"memoryReservation":{"type":"integer"},"links":{"shape":"Sr"},"portMappings":{"type":"list","member":{"type":"structure","members":{"containerPort":{"type":"integer"},"hostPort":{"type":"integer"},"protocol":{}}}},"essential":{"type":"boolean"},"entryPoint":{"shape":"Sr"},"command":{"shape":"Sr"},"environment":{"shape":"S35"},"environmentFiles":{"shape":"S36"},"mountPoints":{"type":"list","member":{"type":"structure","members":{"sourceVolume":{},"containerPath":{},"readOnly":{"type":"boolean"}}}},"volumesFrom":{"type":"list","member":{"type":"structure","members":{"sourceContainer":{},"readOnly":{"type":"boolean"}}}},"linuxParameters":{"type":"structure","members":{"capabilities":{"type":"structure","members":{"add":{"shape":"Sr"},"drop":{"shape":"Sr"}}},"devices":{"type":"list","member":{"type":"structure","required":["hostPath"],"members":{"hostPath":{},"containerPath":{},"permissions":{"type":"list","member":{}}}}},"initProcessEnabled":{"type":"boolean"},"sharedMemorySize":{"type":"integer"},"tmpfs":{"type":"list","member":{"type":"structure","required":["containerPath","size"],"members":{"containerPath":{},"size":{"type":"integer"},"mountOptions":{"shape":"Sr"}}}},"maxSwap":{"type":"integer"},"swappiness":{"type":"integer"}}},"secrets":{"shape":"S3l"},"dependsOn":{"type":"list","member":{"type":"structure","required":["containerName","condition"],"members":{"containerName":{},"condition":{}}}},"startTimeout":{"type":"integer"},"stopTimeout":{"type":"integer"},"hostname":{},"user":{},"workingDirectory":{},"disableNetworking":{"type":"boolean"},"privileged":{"type":"boolean"},"readonlyRootFilesystem":{"type":"boolean"},"dnsServers":{"shape":"Sr"},"dnsSearchDomains":{"shape":"Sr"},"extraHosts":{"type":"list","member":{"type":"structure","required":["hostname","ipAddress"],"members":{"hostname":{},"ipAddress":{}}}},"dockerSecurityOptions":{"shape":"Sr"},"interactive":{"type":"boolean"},"pseudoTerminal":{"type":"boolean"},"dockerLabels":{"type":"map","key":{},"value":{}},"ulimits":{"type":"list","member":{"type":"structure","required":["name","softLimit","hardLimit"],"members":{"name":{},"softLimit":{"type":"integer"},"hardLimit":{"type":"integer"}}}},"logConfiguration":{"type":"structure","required":["logDriver"],"members":{"logDriver":{},"options":{"type":"map","key":{},"value":{}},"secretOptions":{"shape":"S3l"}}},"healthCheck":{"type":"structure","required":["command"],"members":{"command":{"shape":"Sr"},"interval":{"type":"integer"},"timeout":{"type":"integer"},"retries":{"type":"integer"},"startPeriod":{"type":"integer"}}},"systemControls":{"type":"list","member":{"type":"structure","members":{"namespace":{},"value":{}}}},"resourceRequirements":{"shape":"S42"},"firelensConfiguration":{"type":"structure","required":["type"],"members":{"type":{},"options":{"type":"map","key":{},"value":{}}}}}}},"S35":{"type":"list","member":{"shape":"S10"}},"S36":{"type":"list","member":{"type":"structure","required":["value","type"],"members":{"value":{},"type":{}}}},"S3l":{"type":"list","member":{"type":"structure","required":["name","valueFrom"],"members":{"name":{},"valueFrom":{}}}},"S42":{"type":"list","member":{"type":"structure","required":["value","type"],"members":{"value":{},"type":{}}}},"S49":{"type":"list","member":{"type":"structure","members":{"name":{},"host":{"type":"structure","members":{"sourcePath":{}}},"dockerVolumeConfiguration":{"type":"structure","members":{"scope":{},"autoprovision":{"type":"boolean"},"driver":{},"driverOpts":{"shape":"S4e"},"labels":{"shape":"S4e"}}},"efsVolumeConfiguration":{"type":"structure","required":["fileSystemId"],"members":{"fileSystemId":{},"rootDirectory":{},"transitEncryption":{},"transitEncryptionPort":{"type":"integer"},"authorizationConfig":{"type":"structure","members":{"accessPointId":{},"iam":{}}}}},"fsxWindowsFileServerVolumeConfiguration":{"type":"structure","required":["fileSystemId","rootDirectory","authorizationConfig"],"members":{"fileSystemId":{},"rootDirectory":{},"authorizationConfig":{"type":"structure","required":["credentialsParameter","domain"],"members":{"credentialsParameter":{},"domain":{}}}}}}}},"S4e":{"type":"map","key":{},"value":{}},"S4n":{"type":"list","member":{"type":"structure","members":{"type":{},"expression":{}}}},"S4q":{"type":"list","member":{}},"S4s":{"type":"list","member":{"type":"structure","required":["deviceName","deviceType"],"members":{"deviceName":{},"deviceType":{}}}},"S4w":{"type":"structure","required":["containerName"],"members":{"type":{},"containerName":{},"properties":{"type":"list","member":{"shape":"S10"}}}},"S4z":{"type":"structure","required":["sizeInGiB"],"members":{"sizeInGiB":{"type":"integer"}}},"S55":{"type":"list","member":{"type":"structure","members":{"arn":{},"reason":{},"detail":{}}}},"S5g":{"type":"list","member":{"shape":"S2q"}},"S5y":{"type":"list","member":{"shape":"S5z"}},"S5z":{"type":"structure","members":{"attachments":{"shape":"S11"},"attributes":{"shape":"S2b"},"availabilityZone":{},"capacityProviderName":{},"clusterArn":{},"connectivity":{},"connectivityAt":{"type":"timestamp"},"containerInstanceArn":{},"containers":{"type":"list","member":{"type":"structure","members":{"containerArn":{},"taskArn":{},"name":{},"image":{},"imageDigest":{},"runtimeId":{},"lastStatus":{},"exitCode":{"type":"integer"},"reason":{},"networkBindings":{"shape":"S63"},"networkInterfaces":{"type":"list","member":{"type":"structure","members":{"attachmentId":{},"privateIpv4Address":{},"ipv6Address":{}}}},"healthStatus":{},"managedAgents":{"type":"list","member":{"type":"structure","members":{"lastStartedAt":{"type":"timestamp"},"name":{},"reason":{},"lastStatus":{}}}},"cpu":{},"memory":{},"memoryReservation":{},"gpuIds":{"type":"list","member":{}}}}},"cpu":{},"createdAt":{"type":"timestamp"},"desiredStatus":{},"enableExecuteCommand":{"type":"boolean"},"executionStoppedAt":{"type":"timestamp"},"group":{},"healthStatus":{},"inferenceAccelerators":{"shape":"S4s"},"lastStatus":{},"launchType":{},"memory":{},"overrides":{"shape":"S6c"},"platformVersion":{},"pullStartedAt":{"type":"timestamp"},"pullStoppedAt":{"type":"timestamp"},"startedAt":{"type":"timestamp"},"startedBy":{},"stopCode":{},"stoppedAt":{"type":"timestamp"},"stoppedReason":{},"stoppingAt":{"type":"timestamp"},"tags":{"shape":"Sa"},"taskArn":{},"taskDefinitionArn":{},"version":{"type":"long"},"ephemeralStorage":{"shape":"S4z"}}},"S63":{"type":"list","member":{"type":"structure","members":{"bindIP":{},"containerPort":{"type":"integer"},"hostPort":{"type":"integer"},"protocol":{}}}},"S6c":{"type":"structure","members":{"containerOverrides":{"type":"list","member":{"type":"structure","members":{"name":{},"command":{"shape":"Sr"},"environment":{"shape":"S35"},"environmentFiles":{"shape":"S36"},"cpu":{"type":"integer"},"memory":{"type":"integer"},"memoryReservation":{"type":"integer"},"resourceRequirements":{"shape":"S42"}}}},"cpu":{},"inferenceAcceleratorOverrides":{"type":"list","member":{"type":"structure","members":{"deviceName":{},"deviceType":{}}}},"executionRoleArn":{},"memory":{},"taskRoleArn":{},"ephemeralStorage":{"shape":"S4z"}}},"S7x":{"type":"list","member":{"type":"structure","required":["attachmentArn","status"],"members":{"attachmentArn":{},"status":{}}}}}}

/***/ }),
/* 203 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"ListAccountSettings":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"settings"},"ListAttributes":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"attributes"},"ListClusters":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"clusterArns"},"ListContainerInstances":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"containerInstanceArns"},"ListServices":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"serviceArns"},"ListTaskDefinitionFamilies":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"families"},"ListTaskDefinitions":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"taskDefinitionArns"},"ListTasks":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"taskArns"}}}

/***/ }),
/* 204 */
/***/ (function(module, exports) {

	module.exports = {"version":2,"waiters":{"TasksRunning":{"delay":6,"operation":"DescribeTasks","maxAttempts":100,"acceptors":[{"expected":"STOPPED","matcher":"pathAny","state":"failure","argument":"tasks[].lastStatus"},{"expected":"MISSING","matcher":"pathAny","state":"failure","argument":"failures[].reason"},{"expected":"RUNNING","matcher":"pathAll","state":"success","argument":"tasks[].lastStatus"}]},"TasksStopped":{"delay":6,"operation":"DescribeTasks","maxAttempts":100,"acceptors":[{"expected":"STOPPED","matcher":"pathAll","state":"success","argument":"tasks[].lastStatus"}]},"ServicesStable":{"delay":15,"operation":"DescribeServices","maxAttempts":40,"acceptors":[{"expected":"MISSING","matcher":"pathAny","state":"failure","argument":"failures[].reason"},{"expected":"DRAINING","matcher":"pathAny","state":"failure","argument":"services[].status"},{"expected":"INACTIVE","matcher":"pathAny","state":"failure","argument":"services[].status"},{"expected":true,"matcher":"path","state":"success","argument":"length(services[?!(length(deployments) == `1` && runningCount == desiredCount)]) == `0`"}]},"ServicesInactive":{"delay":15,"operation":"DescribeServices","maxAttempts":40,"acceptors":[{"expected":"MISSING","matcher":"pathAny","state":"failure","argument":"failures[].reason"},{"expected":"INACTIVE","matcher":"pathAny","state":"success","argument":"services[].status"}]}}}

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['efs'] = {};
	AWS.EFS = Service.defineService('efs', ['2015-02-01']);
	Object.defineProperty(apiLoader.services['efs'], '2015-02-01', {
	  get: function get() {
	    var model = __webpack_require__(206);
	    model.paginators = __webpack_require__(207).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.EFS;


/***/ }),
/* 206 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-02-01","endpointPrefix":"elasticfilesystem","protocol":"rest-json","serviceAbbreviation":"EFS","serviceFullName":"Amazon Elastic File System","serviceId":"EFS","signatureVersion":"v4","uid":"elasticfilesystem-2015-02-01"},"operations":{"CreateAccessPoint":{"http":{"requestUri":"/2015-02-01/access-points","responseCode":200},"input":{"type":"structure","required":["ClientToken","FileSystemId"],"members":{"ClientToken":{"idempotencyToken":true},"Tags":{"shape":"S3"},"FileSystemId":{},"PosixUser":{"shape":"S8"},"RootDirectory":{"shape":"Sc"}}},"output":{"shape":"Si"}},"CreateFileSystem":{"http":{"requestUri":"/2015-02-01/file-systems","responseCode":201},"input":{"type":"structure","required":["CreationToken"],"members":{"CreationToken":{"idempotencyToken":true},"PerformanceMode":{},"Encrypted":{"type":"boolean"},"KmsKeyId":{},"ThroughputMode":{},"ProvisionedThroughputInMibps":{"type":"double"},"AvailabilityZoneName":{},"Backup":{"type":"boolean"},"Tags":{"shape":"S3"}}},"output":{"shape":"Sx"}},"CreateMountTarget":{"http":{"requestUri":"/2015-02-01/mount-targets","responseCode":200},"input":{"type":"structure","required":["FileSystemId","SubnetId"],"members":{"FileSystemId":{},"SubnetId":{},"IpAddress":{},"SecurityGroups":{"shape":"S18"}}},"output":{"shape":"S1a"}},"CreateTags":{"http":{"requestUri":"/2015-02-01/create-tags/{FileSystemId}","responseCode":204},"input":{"type":"structure","required":["FileSystemId","Tags"],"members":{"FileSystemId":{"location":"uri","locationName":"FileSystemId"},"Tags":{"shape":"S3"}}},"deprecated":true,"deprecatedMessage":"Use TagResource."},"DeleteAccessPoint":{"http":{"method":"DELETE","requestUri":"/2015-02-01/access-points/{AccessPointId}","responseCode":204},"input":{"type":"structure","required":["AccessPointId"],"members":{"AccessPointId":{"location":"uri","locationName":"AccessPointId"}}}},"DeleteFileSystem":{"http":{"method":"DELETE","requestUri":"/2015-02-01/file-systems/{FileSystemId}","responseCode":204},"input":{"type":"structure","required":["FileSystemId"],"members":{"FileSystemId":{"location":"uri","locationName":"FileSystemId"}}}},"DeleteFileSystemPolicy":{"http":{"method":"DELETE","requestUri":"/2015-02-01/file-systems/{FileSystemId}/policy","responseCode":200},"input":{"type":"structure","required":["FileSystemId"],"members":{"FileSystemId":{"location":"uri","locationName":"FileSystemId"}}}},"DeleteMountTarget":{"http":{"method":"DELETE","requestUri":"/2015-02-01/mount-targets/{MountTargetId}","responseCode":204},"input":{"type":"structure","required":["MountTargetId"],"members":{"MountTargetId":{"location":"uri","locationName":"MountTargetId"}}}},"DeleteTags":{"http":{"requestUri":"/2015-02-01/delete-tags/{FileSystemId}","responseCode":204},"input":{"type":"structure","required":["FileSystemId","TagKeys"],"members":{"FileSystemId":{"location":"uri","locationName":"FileSystemId"},"TagKeys":{"shape":"S1k"}}},"deprecated":true,"deprecatedMessage":"Use UntagResource."},"DescribeAccessPoints":{"http":{"method":"GET","requestUri":"/2015-02-01/access-points","responseCode":200},"input":{"type":"structure","members":{"MaxResults":{"location":"querystring","locationName":"MaxResults","type":"integer"},"NextToken":{"location":"querystring","locationName":"NextToken"},"AccessPointId":{"location":"querystring","locationName":"AccessPointId"},"FileSystemId":{"location":"querystring","locationName":"FileSystemId"}}},"output":{"type":"structure","members":{"AccessPoints":{"type":"list","member":{"shape":"Si"}},"NextToken":{}}}},"DescribeAccountPreferences":{"http":{"method":"GET","requestUri":"/2015-02-01/account-preferences","responseCode":200},"input":{"type":"structure","members":{"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"ResourceIdPreference":{"shape":"S1s"},"NextToken":{}}}},"DescribeBackupPolicy":{"http":{"method":"GET","requestUri":"/2015-02-01/file-systems/{FileSystemId}/backup-policy","responseCode":200},"input":{"type":"structure","required":["FileSystemId"],"members":{"FileSystemId":{"location":"uri","locationName":"FileSystemId"}}},"output":{"shape":"S1x"}},"DescribeFileSystemPolicy":{"http":{"method":"GET","requestUri":"/2015-02-01/file-systems/{FileSystemId}/policy","responseCode":200},"input":{"type":"structure","required":["FileSystemId"],"members":{"FileSystemId":{"location":"uri","locationName":"FileSystemId"}}},"output":{"shape":"S21"}},"DescribeFileSystems":{"http":{"method":"GET","requestUri":"/2015-02-01/file-systems","responseCode":200},"input":{"type":"structure","members":{"MaxItems":{"location":"querystring","locationName":"MaxItems","type":"integer"},"Marker":{"location":"querystring","locationName":"Marker"},"CreationToken":{"location":"querystring","locationName":"CreationToken"},"FileSystemId":{"location":"querystring","locationName":"FileSystemId"}}},"output":{"type":"structure","members":{"Marker":{},"FileSystems":{"type":"list","member":{"shape":"Sx"}},"NextMarker":{}}}},"DescribeLifecycleConfiguration":{"http":{"method":"GET","requestUri":"/2015-02-01/file-systems/{FileSystemId}/lifecycle-configuration","responseCode":200},"input":{"type":"structure","required":["FileSystemId"],"members":{"FileSystemId":{"location":"uri","locationName":"FileSystemId"}}},"output":{"shape":"S29"}},"DescribeMountTargetSecurityGroups":{"http":{"method":"GET","requestUri":"/2015-02-01/mount-targets/{MountTargetId}/security-groups","responseCode":200},"input":{"type":"structure","required":["MountTargetId"],"members":{"MountTargetId":{"location":"uri","locationName":"MountTargetId"}}},"output":{"type":"structure","required":["SecurityGroups"],"members":{"SecurityGroups":{"shape":"S18"}}}},"DescribeMountTargets":{"http":{"method":"GET","requestUri":"/2015-02-01/mount-targets","responseCode":200},"input":{"type":"structure","members":{"MaxItems":{"location":"querystring","locationName":"MaxItems","type":"integer"},"Marker":{"location":"querystring","locationName":"Marker"},"FileSystemId":{"location":"querystring","locationName":"FileSystemId"},"MountTargetId":{"location":"querystring","locationName":"MountTargetId"},"AccessPointId":{"location":"querystring","locationName":"AccessPointId"}}},"output":{"type":"structure","members":{"Marker":{},"MountTargets":{"type":"list","member":{"shape":"S1a"}},"NextMarker":{}}}},"DescribeTags":{"http":{"method":"GET","requestUri":"/2015-02-01/tags/{FileSystemId}/","responseCode":200},"input":{"type":"structure","required":["FileSystemId"],"members":{"MaxItems":{"location":"querystring","locationName":"MaxItems","type":"integer"},"Marker":{"location":"querystring","locationName":"Marker"},"FileSystemId":{"location":"uri","locationName":"FileSystemId"}}},"output":{"type":"structure","required":["Tags"],"members":{"Marker":{},"Tags":{"shape":"S3"},"NextMarker":{}}},"deprecated":true,"deprecatedMessage":"Use ListTagsForResource."},"ListTagsForResource":{"http":{"method":"GET","requestUri":"/2015-02-01/resource-tags/{ResourceId}","responseCode":200},"input":{"type":"structure","required":["ResourceId"],"members":{"ResourceId":{"location":"uri","locationName":"ResourceId"},"MaxResults":{"location":"querystring","locationName":"MaxResults","type":"integer"},"NextToken":{"location":"querystring","locationName":"NextToken"}}},"output":{"type":"structure","members":{"Tags":{"shape":"S3"},"NextToken":{}}}},"ModifyMountTargetSecurityGroups":{"http":{"method":"PUT","requestUri":"/2015-02-01/mount-targets/{MountTargetId}/security-groups","responseCode":204},"input":{"type":"structure","required":["MountTargetId"],"members":{"MountTargetId":{"location":"uri","locationName":"MountTargetId"},"SecurityGroups":{"shape":"S18"}}}},"PutAccountPreferences":{"http":{"method":"PUT","requestUri":"/2015-02-01/account-preferences","responseCode":200},"input":{"type":"structure","required":["ResourceIdType"],"members":{"ResourceIdType":{}}},"output":{"type":"structure","members":{"ResourceIdPreference":{"shape":"S1s"}}}},"PutBackupPolicy":{"http":{"method":"PUT","requestUri":"/2015-02-01/file-systems/{FileSystemId}/backup-policy","responseCode":200},"input":{"type":"structure","required":["FileSystemId","BackupPolicy"],"members":{"FileSystemId":{"location":"uri","locationName":"FileSystemId"},"BackupPolicy":{"shape":"S1y"}}},"output":{"shape":"S1x"}},"PutFileSystemPolicy":{"http":{"method":"PUT","requestUri":"/2015-02-01/file-systems/{FileSystemId}/policy","responseCode":200},"input":{"type":"structure","required":["FileSystemId","Policy"],"members":{"FileSystemId":{"location":"uri","locationName":"FileSystemId"},"Policy":{},"BypassPolicyLockoutSafetyCheck":{"type":"boolean"}}},"output":{"shape":"S21"}},"PutLifecycleConfiguration":{"http":{"method":"PUT","requestUri":"/2015-02-01/file-systems/{FileSystemId}/lifecycle-configuration","responseCode":200},"input":{"type":"structure","required":["FileSystemId","LifecyclePolicies"],"members":{"FileSystemId":{"location":"uri","locationName":"FileSystemId"},"LifecyclePolicies":{"shape":"S2a"}}},"output":{"shape":"S29"}},"TagResource":{"http":{"requestUri":"/2015-02-01/resource-tags/{ResourceId}","responseCode":200},"input":{"type":"structure","required":["ResourceId","Tags"],"members":{"ResourceId":{"location":"uri","locationName":"ResourceId"},"Tags":{"shape":"S3"}}}},"UntagResource":{"http":{"method":"DELETE","requestUri":"/2015-02-01/resource-tags/{ResourceId}","responseCode":200},"input":{"type":"structure","required":["ResourceId","TagKeys"],"members":{"ResourceId":{"location":"uri","locationName":"ResourceId"},"TagKeys":{"shape":"S1k","location":"querystring","locationName":"tagKeys"}}}},"UpdateFileSystem":{"http":{"method":"PUT","requestUri":"/2015-02-01/file-systems/{FileSystemId}","responseCode":202},"input":{"type":"structure","required":["FileSystemId"],"members":{"FileSystemId":{"location":"uri","locationName":"FileSystemId"},"ThroughputMode":{},"ProvisionedThroughputInMibps":{"type":"double"}}},"output":{"shape":"Sx"}}},"shapes":{"S3":{"type":"list","member":{"type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{}}}},"S8":{"type":"structure","required":["Uid","Gid"],"members":{"Uid":{"type":"long"},"Gid":{"type":"long"},"SecondaryGids":{"type":"list","member":{"type":"long"}}}},"Sc":{"type":"structure","members":{"Path":{},"CreationInfo":{"type":"structure","required":["OwnerUid","OwnerGid","Permissions"],"members":{"OwnerUid":{"type":"long"},"OwnerGid":{"type":"long"},"Permissions":{}}}}},"Si":{"type":"structure","members":{"ClientToken":{},"Name":{},"Tags":{"shape":"S3"},"AccessPointId":{},"AccessPointArn":{},"FileSystemId":{},"PosixUser":{"shape":"S8"},"RootDirectory":{"shape":"Sc"},"OwnerId":{},"LifeCycleState":{}}},"Sx":{"type":"structure","required":["OwnerId","CreationToken","FileSystemId","CreationTime","LifeCycleState","NumberOfMountTargets","SizeInBytes","PerformanceMode","Tags"],"members":{"OwnerId":{},"CreationToken":{},"FileSystemId":{},"FileSystemArn":{},"CreationTime":{"type":"timestamp"},"LifeCycleState":{},"Name":{},"NumberOfMountTargets":{"type":"integer"},"SizeInBytes":{"type":"structure","required":["Value"],"members":{"Value":{"type":"long"},"Timestamp":{"type":"timestamp"},"ValueInIA":{"type":"long"},"ValueInStandard":{"type":"long"}}},"PerformanceMode":{},"Encrypted":{"type":"boolean"},"KmsKeyId":{},"ThroughputMode":{},"ProvisionedThroughputInMibps":{"type":"double"},"AvailabilityZoneName":{},"AvailabilityZoneId":{},"Tags":{"shape":"S3"}}},"S18":{"type":"list","member":{}},"S1a":{"type":"structure","required":["MountTargetId","FileSystemId","SubnetId","LifeCycleState"],"members":{"OwnerId":{},"MountTargetId":{},"FileSystemId":{},"SubnetId":{},"LifeCycleState":{},"IpAddress":{},"NetworkInterfaceId":{},"AvailabilityZoneId":{},"AvailabilityZoneName":{},"VpcId":{}}},"S1k":{"type":"list","member":{}},"S1s":{"type":"structure","members":{"ResourceIdType":{},"Resources":{"type":"list","member":{}}}},"S1x":{"type":"structure","members":{"BackupPolicy":{"shape":"S1y"}}},"S1y":{"type":"structure","required":["Status"],"members":{"Status":{}}},"S21":{"type":"structure","members":{"FileSystemId":{},"Policy":{}}},"S29":{"type":"structure","members":{"LifecyclePolicies":{"shape":"S2a"}}},"S2a":{"type":"list","member":{"type":"structure","members":{"TransitionToIA":{}}}}}}

/***/ }),
/* 207 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeAccessPoints":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"DescribeFileSystems":{"input_token":"Marker","output_token":"NextMarker","limit_key":"MaxItems"},"DescribeTags":{"input_token":"Marker","output_token":"NextMarker","limit_key":"MaxItems"},"ListTagsForResource":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"}}}

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['elasticache'] = {};
	AWS.ElastiCache = Service.defineService('elasticache', ['2012-11-15*', '2014-03-24*', '2014-07-15*', '2014-09-30*', '2015-02-02']);
	Object.defineProperty(apiLoader.services['elasticache'], '2015-02-02', {
	  get: function get() {
	    var model = __webpack_require__(209);
	    model.paginators = __webpack_require__(210).pagination;
	    model.waiters = __webpack_require__(211).waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.ElastiCache;


/***/ }),
/* 209 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-02-02","endpointPrefix":"elasticache","protocol":"query","serviceFullName":"Amazon ElastiCache","serviceId":"ElastiCache","signatureVersion":"v4","uid":"elasticache-2015-02-02","xmlNamespace":"http://elasticache.amazonaws.com/doc/2015-02-02/"},"operations":{"AddTagsToResource":{"input":{"type":"structure","required":["ResourceName","Tags"],"members":{"ResourceName":{},"Tags":{"shape":"S3"}}},"output":{"shape":"S5","resultWrapper":"AddTagsToResourceResult"}},"AuthorizeCacheSecurityGroupIngress":{"input":{"type":"structure","required":["CacheSecurityGroupName","EC2SecurityGroupName","EC2SecurityGroupOwnerId"],"members":{"CacheSecurityGroupName":{},"EC2SecurityGroupName":{},"EC2SecurityGroupOwnerId":{}}},"output":{"resultWrapper":"AuthorizeCacheSecurityGroupIngressResult","type":"structure","members":{"CacheSecurityGroup":{"shape":"S8"}}}},"BatchApplyUpdateAction":{"input":{"type":"structure","required":["ServiceUpdateName"],"members":{"ReplicationGroupIds":{"shape":"Sc"},"CacheClusterIds":{"shape":"Sd"},"ServiceUpdateName":{}}},"output":{"shape":"Se","resultWrapper":"BatchApplyUpdateActionResult"}},"BatchStopUpdateAction":{"input":{"type":"structure","required":["ServiceUpdateName"],"members":{"ReplicationGroupIds":{"shape":"Sc"},"CacheClusterIds":{"shape":"Sd"},"ServiceUpdateName":{}}},"output":{"shape":"Se","resultWrapper":"BatchStopUpdateActionResult"}},"CompleteMigration":{"input":{"type":"structure","required":["ReplicationGroupId"],"members":{"ReplicationGroupId":{},"Force":{"type":"boolean"}}},"output":{"resultWrapper":"CompleteMigrationResult","type":"structure","members":{"ReplicationGroup":{"shape":"So"}}}},"CopySnapshot":{"input":{"type":"structure","required":["SourceSnapshotName","TargetSnapshotName"],"members":{"SourceSnapshotName":{},"TargetSnapshotName":{},"TargetBucket":{},"KmsKeyId":{},"Tags":{"shape":"S3"}}},"output":{"resultWrapper":"CopySnapshotResult","type":"structure","members":{"Snapshot":{"shape":"S1p"}}}},"CreateCacheCluster":{"input":{"type":"structure","required":["CacheClusterId"],"members":{"CacheClusterId":{},"ReplicationGroupId":{},"AZMode":{},"PreferredAvailabilityZone":{},"PreferredAvailabilityZones":{"shape":"S1y"},"NumCacheNodes":{"type":"integer"},"CacheNodeType":{},"Engine":{},"EngineVersion":{},"CacheParameterGroupName":{},"CacheSubnetGroupName":{},"CacheSecurityGroupNames":{"shape":"S1z"},"SecurityGroupIds":{"shape":"S20"},"Tags":{"shape":"S3"},"SnapshotArns":{"shape":"S21"},"SnapshotName":{},"PreferredMaintenanceWindow":{},"Port":{"type":"integer"},"NotificationTopicArn":{},"AutoMinorVersionUpgrade":{"type":"boolean"},"SnapshotRetentionLimit":{"type":"integer"},"SnapshotWindow":{},"AuthToken":{},"OutpostMode":{},"PreferredOutpostArn":{},"PreferredOutpostArns":{"shape":"S23"},"LogDeliveryConfigurations":{"shape":"S24"}}},"output":{"resultWrapper":"CreateCacheClusterResult","type":"structure","members":{"CacheCluster":{"shape":"S27"}}}},"CreateCacheParameterGroup":{"input":{"type":"structure","required":["CacheParameterGroupName","CacheParameterGroupFamily","Description"],"members":{"CacheParameterGroupName":{},"CacheParameterGroupFamily":{},"Description":{},"Tags":{"shape":"S3"}}},"output":{"resultWrapper":"CreateCacheParameterGroupResult","type":"structure","members":{"CacheParameterGroup":{"shape":"S2k"}}}},"CreateCacheSecurityGroup":{"input":{"type":"structure","required":["CacheSecurityGroupName","Description"],"members":{"CacheSecurityGroupName":{},"Description":{},"Tags":{"shape":"S3"}}},"output":{"resultWrapper":"CreateCacheSecurityGroupResult","type":"structure","members":{"CacheSecurityGroup":{"shape":"S8"}}}},"CreateCacheSubnetGroup":{"input":{"type":"structure","required":["CacheSubnetGroupName","CacheSubnetGroupDescription","SubnetIds"],"members":{"CacheSubnetGroupName":{},"CacheSubnetGroupDescription":{},"SubnetIds":{"shape":"S2o"},"Tags":{"shape":"S3"}}},"output":{"resultWrapper":"CreateCacheSubnetGroupResult","type":"structure","members":{"CacheSubnetGroup":{"shape":"S2q"}}}},"CreateGlobalReplicationGroup":{"input":{"type":"structure","required":["GlobalReplicationGroupIdSuffix","PrimaryReplicationGroupId"],"members":{"GlobalReplicationGroupIdSuffix":{},"GlobalReplicationGroupDescription":{},"PrimaryReplicationGroupId":{}}},"output":{"resultWrapper":"CreateGlobalReplicationGroupResult","type":"structure","members":{"GlobalReplicationGroup":{"shape":"S2x"}}}},"CreateReplicationGroup":{"input":{"type":"structure","required":["ReplicationGroupId","ReplicationGroupDescription"],"members":{"ReplicationGroupId":{},"ReplicationGroupDescription":{},"GlobalReplicationGroupId":{},"PrimaryClusterId":{},"AutomaticFailoverEnabled":{"type":"boolean"},"MultiAZEnabled":{"type":"boolean"},"NumCacheClusters":{"type":"integer"},"PreferredCacheClusterAZs":{"shape":"S1u"},"NumNodeGroups":{"type":"integer"},"ReplicasPerNodeGroup":{"type":"integer"},"NodeGroupConfiguration":{"type":"list","member":{"shape":"S1s","locationName":"NodeGroupConfiguration"}},"CacheNodeType":{},"Engine":{},"EngineVersion":{},"CacheParameterGroupName":{},"CacheSubnetGroupName":{},"CacheSecurityGroupNames":{"shape":"S1z"},"SecurityGroupIds":{"shape":"S20"},"Tags":{"shape":"S3"},"SnapshotArns":{"shape":"S21"},"SnapshotName":{},"PreferredMaintenanceWindow":{},"Port":{"type":"integer"},"NotificationTopicArn":{},"AutoMinorVersionUpgrade":{"type":"boolean"},"SnapshotRetentionLimit":{"type":"integer"},"SnapshotWindow":{},"AuthToken":{},"TransitEncryptionEnabled":{"type":"boolean"},"AtRestEncryptionEnabled":{"type":"boolean"},"KmsKeyId":{},"UserGroupIds":{"type":"list","member":{}},"LogDeliveryConfigurations":{"shape":"S24"}}},"output":{"resultWrapper":"CreateReplicationGroupResult","type":"structure","members":{"ReplicationGroup":{"shape":"So"}}}},"CreateSnapshot":{"input":{"type":"structure","required":["SnapshotName"],"members":{"ReplicationGroupId":{},"CacheClusterId":{},"SnapshotName":{},"KmsKeyId":{},"Tags":{"shape":"S3"}}},"output":{"resultWrapper":"CreateSnapshotResult","type":"structure","members":{"Snapshot":{"shape":"S1p"}}}},"CreateUser":{"input":{"type":"structure","required":["UserId","UserName","Engine","AccessString"],"members":{"UserId":{},"UserName":{},"Engine":{},"Passwords":{"shape":"S3c"},"AccessString":{},"NoPasswordRequired":{"type":"boolean"},"Tags":{"shape":"S3"}}},"output":{"shape":"S3e","resultWrapper":"CreateUserResult"}},"CreateUserGroup":{"input":{"type":"structure","required":["UserGroupId","Engine"],"members":{"UserGroupId":{},"Engine":{},"UserIds":{"shape":"S3i"},"Tags":{"shape":"S3"}}},"output":{"shape":"S3j","resultWrapper":"CreateUserGroupResult"}},"DecreaseNodeGroupsInGlobalReplicationGroup":{"input":{"type":"structure","required":["GlobalReplicationGroupId","NodeGroupCount","ApplyImmediately"],"members":{"GlobalReplicationGroupId":{},"NodeGroupCount":{"type":"integer"},"GlobalNodeGroupsToRemove":{"shape":"S3o"},"GlobalNodeGroupsToRetain":{"shape":"S3o"},"ApplyImmediately":{"type":"boolean"}}},"output":{"resultWrapper":"DecreaseNodeGroupsInGlobalReplicationGroupResult","type":"structure","members":{"GlobalReplicationGroup":{"shape":"S2x"}}}},"DecreaseReplicaCount":{"input":{"type":"structure","required":["ReplicationGroupId","ApplyImmediately"],"members":{"ReplicationGroupId":{},"NewReplicaCount":{"type":"integer"},"ReplicaConfiguration":{"shape":"S3r"},"ReplicasToRemove":{"type":"list","member":{}},"ApplyImmediately":{"type":"boolean"}}},"output":{"resultWrapper":"DecreaseReplicaCountResult","type":"structure","members":{"ReplicationGroup":{"shape":"So"}}}},"DeleteCacheCluster":{"input":{"type":"structure","required":["CacheClusterId"],"members":{"CacheClusterId":{},"FinalSnapshotIdentifier":{}}},"output":{"resultWrapper":"DeleteCacheClusterResult","type":"structure","members":{"CacheCluster":{"shape":"S27"}}}},"DeleteCacheParameterGroup":{"input":{"type":"structure","required":["CacheParameterGroupName"],"members":{"CacheParameterGroupName":{}}}},"DeleteCacheSecurityGroup":{"input":{"type":"structure","required":["CacheSecurityGroupName"],"members":{"CacheSecurityGroupName":{}}}},"DeleteCacheSubnetGroup":{"input":{"type":"structure","required":["CacheSubnetGroupName"],"members":{"CacheSubnetGroupName":{}}}},"DeleteGlobalReplicationGroup":{"input":{"type":"structure","required":["GlobalReplicationGroupId","RetainPrimaryReplicationGroup"],"members":{"GlobalReplicationGroupId":{},"RetainPrimaryReplicationGroup":{"type":"boolean"}}},"output":{"resultWrapper":"DeleteGlobalReplicationGroupResult","type":"structure","members":{"GlobalReplicationGroup":{"shape":"S2x"}}}},"DeleteReplicationGroup":{"input":{"type":"structure","required":["ReplicationGroupId"],"members":{"ReplicationGroupId":{},"RetainPrimaryCluster":{"type":"boolean"},"FinalSnapshotIdentifier":{}}},"output":{"resultWrapper":"DeleteReplicationGroupResult","type":"structure","members":{"ReplicationGroup":{"shape":"So"}}}},"DeleteSnapshot":{"input":{"type":"structure","required":["SnapshotName"],"members":{"SnapshotName":{}}},"output":{"resultWrapper":"DeleteSnapshotResult","type":"structure","members":{"Snapshot":{"shape":"S1p"}}}},"DeleteUser":{"input":{"type":"structure","required":["UserId"],"members":{"UserId":{}}},"output":{"shape":"S3e","resultWrapper":"DeleteUserResult"}},"DeleteUserGroup":{"input":{"type":"structure","required":["UserGroupId"],"members":{"UserGroupId":{}}},"output":{"shape":"S3j","resultWrapper":"DeleteUserGroupResult"}},"DescribeCacheClusters":{"input":{"type":"structure","members":{"CacheClusterId":{},"MaxRecords":{"type":"integer"},"Marker":{},"ShowCacheNodeInfo":{"type":"boolean"},"ShowCacheClustersNotInReplicationGroups":{"type":"boolean"}}},"output":{"resultWrapper":"DescribeCacheClustersResult","type":"structure","members":{"Marker":{},"CacheClusters":{"type":"list","member":{"shape":"S27","locationName":"CacheCluster"}}}}},"DescribeCacheEngineVersions":{"input":{"type":"structure","members":{"Engine":{},"EngineVersion":{},"CacheParameterGroupFamily":{},"MaxRecords":{"type":"integer"},"Marker":{},"DefaultOnly":{"type":"boolean"}}},"output":{"resultWrapper":"DescribeCacheEngineVersionsResult","type":"structure","members":{"Marker":{},"CacheEngineVersions":{"type":"list","member":{"locationName":"CacheEngineVersion","type":"structure","members":{"Engine":{},"EngineVersion":{},"CacheParameterGroupFamily":{},"CacheEngineDescription":{},"CacheEngineVersionDescription":{}}}}}}},"DescribeCacheParameterGroups":{"input":{"type":"structure","members":{"CacheParameterGroupName":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeCacheParameterGroupsResult","type":"structure","members":{"Marker":{},"CacheParameterGroups":{"type":"list","member":{"shape":"S2k","locationName":"CacheParameterGroup"}}}}},"DescribeCacheParameters":{"input":{"type":"structure","required":["CacheParameterGroupName"],"members":{"CacheParameterGroupName":{},"Source":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeCacheParametersResult","type":"structure","members":{"Marker":{},"Parameters":{"shape":"S4k"},"CacheNodeTypeSpecificParameters":{"shape":"S4n"}}}},"DescribeCacheSecurityGroups":{"input":{"type":"structure","members":{"CacheSecurityGroupName":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeCacheSecurityGroupsResult","type":"structure","members":{"Marker":{},"CacheSecurityGroups":{"type":"list","member":{"shape":"S8","locationName":"CacheSecurityGroup"}}}}},"DescribeCacheSubnetGroups":{"input":{"type":"structure","members":{"CacheSubnetGroupName":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeCacheSubnetGroupsResult","type":"structure","members":{"Marker":{},"CacheSubnetGroups":{"type":"list","member":{"shape":"S2q","locationName":"CacheSubnetGroup"}}}}},"DescribeEngineDefaultParameters":{"input":{"type":"structure","required":["CacheParameterGroupFamily"],"members":{"CacheParameterGroupFamily":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEngineDefaultParametersResult","type":"structure","members":{"EngineDefaults":{"type":"structure","members":{"CacheParameterGroupFamily":{},"Marker":{},"Parameters":{"shape":"S4k"},"CacheNodeTypeSpecificParameters":{"shape":"S4n"}},"wrapper":true}}}},"DescribeEvents":{"input":{"type":"structure","members":{"SourceIdentifier":{},"SourceType":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Duration":{"type":"integer"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEventsResult","type":"structure","members":{"Marker":{},"Events":{"type":"list","member":{"locationName":"Event","type":"structure","members":{"SourceIdentifier":{},"SourceType":{},"Message":{},"Date":{"type":"timestamp"}}}}}}},"DescribeGlobalReplicationGroups":{"input":{"type":"structure","members":{"GlobalReplicationGroupId":{},"MaxRecords":{"type":"integer"},"Marker":{},"ShowMemberInfo":{"type":"boolean"}}},"output":{"resultWrapper":"DescribeGlobalReplicationGroupsResult","type":"structure","members":{"Marker":{},"GlobalReplicationGroups":{"type":"list","member":{"shape":"S2x","locationName":"GlobalReplicationGroup"}}}}},"DescribeReplicationGroups":{"input":{"type":"structure","members":{"ReplicationGroupId":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeReplicationGroupsResult","type":"structure","members":{"Marker":{},"ReplicationGroups":{"type":"list","member":{"shape":"So","locationName":"ReplicationGroup"}}}}},"DescribeReservedCacheNodes":{"input":{"type":"structure","members":{"ReservedCacheNodeId":{},"ReservedCacheNodesOfferingId":{},"CacheNodeType":{},"Duration":{},"ProductDescription":{},"OfferingType":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeReservedCacheNodesResult","type":"structure","members":{"Marker":{},"ReservedCacheNodes":{"type":"list","member":{"shape":"S5e","locationName":"ReservedCacheNode"}}}}},"DescribeReservedCacheNodesOfferings":{"input":{"type":"structure","members":{"ReservedCacheNodesOfferingId":{},"CacheNodeType":{},"Duration":{},"ProductDescription":{},"OfferingType":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeReservedCacheNodesOfferingsResult","type":"structure","members":{"Marker":{},"ReservedCacheNodesOfferings":{"type":"list","member":{"locationName":"ReservedCacheNodesOffering","type":"structure","members":{"ReservedCacheNodesOfferingId":{},"CacheNodeType":{},"Duration":{"type":"integer"},"FixedPrice":{"type":"double"},"UsagePrice":{"type":"double"},"ProductDescription":{},"OfferingType":{},"RecurringCharges":{"shape":"S5f"}},"wrapper":true}}}}},"DescribeServiceUpdates":{"input":{"type":"structure","members":{"ServiceUpdateName":{},"ServiceUpdateStatus":{"shape":"S5m"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeServiceUpdatesResult","type":"structure","members":{"Marker":{},"ServiceUpdates":{"type":"list","member":{"locationName":"ServiceUpdate","type":"structure","members":{"ServiceUpdateName":{},"ServiceUpdateReleaseDate":{"type":"timestamp"},"ServiceUpdateEndDate":{"type":"timestamp"},"ServiceUpdateSeverity":{},"ServiceUpdateRecommendedApplyByDate":{"type":"timestamp"},"ServiceUpdateStatus":{},"ServiceUpdateDescription":{},"ServiceUpdateType":{},"Engine":{},"EngineVersion":{},"AutoUpdateAfterRecommendedApplyByDate":{"type":"boolean"},"EstimatedUpdateTime":{}}}}}}},"DescribeSnapshots":{"input":{"type":"structure","members":{"ReplicationGroupId":{},"CacheClusterId":{},"SnapshotName":{},"SnapshotSource":{},"Marker":{},"MaxRecords":{"type":"integer"},"ShowNodeGroupConfig":{"type":"boolean"}}},"output":{"resultWrapper":"DescribeSnapshotsResult","type":"structure","members":{"Marker":{},"Snapshots":{"type":"list","member":{"shape":"S1p","locationName":"Snapshot"}}}}},"DescribeUpdateActions":{"input":{"type":"structure","members":{"ServiceUpdateName":{},"ReplicationGroupIds":{"shape":"Sc"},"CacheClusterIds":{"shape":"Sd"},"Engine":{},"ServiceUpdateStatus":{"shape":"S5m"},"ServiceUpdateTimeRange":{"type":"structure","members":{"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"}}},"UpdateActionStatus":{"type":"list","member":{}},"ShowNodeLevelUpdateStatus":{"type":"boolean"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeUpdateActionsResult","type":"structure","members":{"Marker":{},"UpdateActions":{"type":"list","member":{"locationName":"UpdateAction","type":"structure","members":{"ReplicationGroupId":{},"CacheClusterId":{},"ServiceUpdateName":{},"ServiceUpdateReleaseDate":{"type":"timestamp"},"ServiceUpdateSeverity":{},"ServiceUpdateStatus":{},"ServiceUpdateRecommendedApplyByDate":{"type":"timestamp"},"ServiceUpdateType":{},"UpdateActionAvailableDate":{"type":"timestamp"},"UpdateActionStatus":{},"NodesUpdated":{},"UpdateActionStatusModifiedDate":{"type":"timestamp"},"SlaMet":{},"NodeGroupUpdateStatus":{"type":"list","member":{"locationName":"NodeGroupUpdateStatus","type":"structure","members":{"NodeGroupId":{},"NodeGroupMemberUpdateStatus":{"type":"list","member":{"locationName":"NodeGroupMemberUpdateStatus","type":"structure","members":{"CacheClusterId":{},"CacheNodeId":{},"NodeUpdateStatus":{},"NodeDeletionDate":{"type":"timestamp"},"NodeUpdateStartDate":{"type":"timestamp"},"NodeUpdateEndDate":{"type":"timestamp"},"NodeUpdateInitiatedBy":{},"NodeUpdateInitiatedDate":{"type":"timestamp"},"NodeUpdateStatusModifiedDate":{"type":"timestamp"}}}}}}},"CacheNodeUpdateStatus":{"type":"list","member":{"locationName":"CacheNodeUpdateStatus","type":"structure","members":{"CacheNodeId":{},"NodeUpdateStatus":{},"NodeDeletionDate":{"type":"timestamp"},"NodeUpdateStartDate":{"type":"timestamp"},"NodeUpdateEndDate":{"type":"timestamp"},"NodeUpdateInitiatedBy":{},"NodeUpdateInitiatedDate":{"type":"timestamp"},"NodeUpdateStatusModifiedDate":{"type":"timestamp"}}}},"EstimatedUpdateTime":{},"Engine":{}}}}}}},"DescribeUserGroups":{"input":{"type":"structure","members":{"UserGroupId":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeUserGroupsResult","type":"structure","members":{"UserGroups":{"type":"list","member":{"shape":"S3j"}},"Marker":{}}}},"DescribeUsers":{"input":{"type":"structure","members":{"Engine":{},"UserId":{},"Filters":{"type":"list","member":{"type":"structure","required":["Name","Values"],"members":{"Name":{},"Values":{"type":"list","member":{}}}}},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeUsersResult","type":"structure","members":{"Users":{"type":"list","member":{"shape":"S3e"}},"Marker":{}}}},"DisassociateGlobalReplicationGroup":{"input":{"type":"structure","required":["GlobalReplicationGroupId","ReplicationGroupId","ReplicationGroupRegion"],"members":{"GlobalReplicationGroupId":{},"ReplicationGroupId":{},"ReplicationGroupRegion":{}}},"output":{"resultWrapper":"DisassociateGlobalReplicationGroupResult","type":"structure","members":{"GlobalReplicationGroup":{"shape":"S2x"}}}},"FailoverGlobalReplicationGroup":{"input":{"type":"structure","required":["GlobalReplicationGroupId","PrimaryRegion","PrimaryReplicationGroupId"],"members":{"GlobalReplicationGroupId":{},"PrimaryRegion":{},"PrimaryReplicationGroupId":{}}},"output":{"resultWrapper":"FailoverGlobalReplicationGroupResult","type":"structure","members":{"GlobalReplicationGroup":{"shape":"S2x"}}}},"IncreaseNodeGroupsInGlobalReplicationGroup":{"input":{"type":"structure","required":["GlobalReplicationGroupId","NodeGroupCount","ApplyImmediately"],"members":{"GlobalReplicationGroupId":{},"NodeGroupCount":{"type":"integer"},"RegionalConfigurations":{"type":"list","member":{"locationName":"RegionalConfiguration","type":"structure","required":["ReplicationGroupId","ReplicationGroupRegion","ReshardingConfiguration"],"members":{"ReplicationGroupId":{},"ReplicationGroupRegion":{},"ReshardingConfiguration":{"shape":"S6t"}}}},"ApplyImmediately":{"type":"boolean"}}},"output":{"resultWrapper":"IncreaseNodeGroupsInGlobalReplicationGroupResult","type":"structure","members":{"GlobalReplicationGroup":{"shape":"S2x"}}}},"IncreaseReplicaCount":{"input":{"type":"structure","required":["ReplicationGroupId","ApplyImmediately"],"members":{"ReplicationGroupId":{},"NewReplicaCount":{"type":"integer"},"ReplicaConfiguration":{"shape":"S3r"},"ApplyImmediately":{"type":"boolean"}}},"output":{"resultWrapper":"IncreaseReplicaCountResult","type":"structure","members":{"ReplicationGroup":{"shape":"So"}}}},"ListAllowedNodeTypeModifications":{"input":{"type":"structure","members":{"CacheClusterId":{},"ReplicationGroupId":{}}},"output":{"resultWrapper":"ListAllowedNodeTypeModificationsResult","type":"structure","members":{"ScaleUpModifications":{"shape":"S70"},"ScaleDownModifications":{"shape":"S70"}}}},"ListTagsForResource":{"input":{"type":"structure","required":["ResourceName"],"members":{"ResourceName":{}}},"output":{"shape":"S5","resultWrapper":"ListTagsForResourceResult"}},"ModifyCacheCluster":{"input":{"type":"structure","required":["CacheClusterId"],"members":{"CacheClusterId":{},"NumCacheNodes":{"type":"integer"},"CacheNodeIdsToRemove":{"shape":"S29"},"AZMode":{},"NewAvailabilityZones":{"shape":"S1y"},"CacheSecurityGroupNames":{"shape":"S1z"},"SecurityGroupIds":{"shape":"S20"},"PreferredMaintenanceWindow":{},"NotificationTopicArn":{},"CacheParameterGroupName":{},"NotificationTopicStatus":{},"ApplyImmediately":{"type":"boolean"},"EngineVersion":{},"AutoMinorVersionUpgrade":{"type":"boolean"},"SnapshotRetentionLimit":{"type":"integer"},"SnapshotWindow":{},"CacheNodeType":{},"AuthToken":{},"AuthTokenUpdateStrategy":{},"LogDeliveryConfigurations":{"shape":"S24"}}},"output":{"resultWrapper":"ModifyCacheClusterResult","type":"structure","members":{"CacheCluster":{"shape":"S27"}}}},"ModifyCacheParameterGroup":{"input":{"type":"structure","required":["CacheParameterGroupName","ParameterNameValues"],"members":{"CacheParameterGroupName":{},"ParameterNameValues":{"shape":"S76"}}},"output":{"shape":"S78","resultWrapper":"ModifyCacheParameterGroupResult"}},"ModifyCacheSubnetGroup":{"input":{"type":"structure","required":["CacheSubnetGroupName"],"members":{"CacheSubnetGroupName":{},"CacheSubnetGroupDescription":{},"SubnetIds":{"shape":"S2o"}}},"output":{"resultWrapper":"ModifyCacheSubnetGroupResult","type":"structure","members":{"CacheSubnetGroup":{"shape":"S2q"}}}},"ModifyGlobalReplicationGroup":{"input":{"type":"structure","required":["GlobalReplicationGroupId","ApplyImmediately"],"members":{"GlobalReplicationGroupId":{},"ApplyImmediately":{"type":"boolean"},"CacheNodeType":{},"EngineVersion":{},"CacheParameterGroupName":{},"GlobalReplicationGroupDescription":{},"AutomaticFailoverEnabled":{"type":"boolean"}}},"output":{"resultWrapper":"ModifyGlobalReplicationGroupResult","type":"structure","members":{"GlobalReplicationGroup":{"shape":"S2x"}}}},"ModifyReplicationGroup":{"input":{"type":"structure","required":["ReplicationGroupId"],"members":{"ReplicationGroupId":{},"ReplicationGroupDescription":{},"PrimaryClusterId":{},"SnapshottingClusterId":{},"AutomaticFailoverEnabled":{"type":"boolean"},"MultiAZEnabled":{"type":"boolean"},"NodeGroupId":{"deprecated":true},"CacheSecurityGroupNames":{"shape":"S1z"},"SecurityGroupIds":{"shape":"S20"},"PreferredMaintenanceWindow":{},"NotificationTopicArn":{},"CacheParameterGroupName":{},"NotificationTopicStatus":{},"ApplyImmediately":{"type":"boolean"},"EngineVersion":{},"AutoMinorVersionUpgrade":{"type":"boolean"},"SnapshotRetentionLimit":{"type":"integer"},"SnapshotWindow":{},"CacheNodeType":{},"AuthToken":{},"AuthTokenUpdateStrategy":{},"UserGroupIdsToAdd":{"shape":"Sx"},"UserGroupIdsToRemove":{"shape":"Sx"},"RemoveUserGroups":{"type":"boolean"},"LogDeliveryConfigurations":{"shape":"S24"}}},"output":{"resultWrapper":"ModifyReplicationGroupResult","type":"structure","members":{"ReplicationGroup":{"shape":"So"}}}},"ModifyReplicationGroupShardConfiguration":{"input":{"type":"structure","required":["ReplicationGroupId","NodeGroupCount","ApplyImmediately"],"members":{"ReplicationGroupId":{},"NodeGroupCount":{"type":"integer"},"ApplyImmediately":{"type":"boolean"},"ReshardingConfiguration":{"shape":"S6t"},"NodeGroupsToRemove":{"type":"list","member":{"locationName":"NodeGroupToRemove"}},"NodeGroupsToRetain":{"type":"list","member":{"locationName":"NodeGroupToRetain"}}}},"output":{"resultWrapper":"ModifyReplicationGroupShardConfigurationResult","type":"structure","members":{"ReplicationGroup":{"shape":"So"}}}},"ModifyUser":{"input":{"type":"structure","required":["UserId"],"members":{"UserId":{},"AccessString":{},"AppendAccessString":{},"Passwords":{"shape":"S3c"},"NoPasswordRequired":{"type":"boolean"}}},"output":{"shape":"S3e","resultWrapper":"ModifyUserResult"}},"ModifyUserGroup":{"input":{"type":"structure","required":["UserGroupId"],"members":{"UserGroupId":{},"UserIdsToAdd":{"shape":"S3i"},"UserIdsToRemove":{"shape":"S3i"}}},"output":{"shape":"S3j","resultWrapper":"ModifyUserGroupResult"}},"PurchaseReservedCacheNodesOffering":{"input":{"type":"structure","required":["ReservedCacheNodesOfferingId"],"members":{"ReservedCacheNodesOfferingId":{},"ReservedCacheNodeId":{},"CacheNodeCount":{"type":"integer"},"Tags":{"shape":"S3"}}},"output":{"resultWrapper":"PurchaseReservedCacheNodesOfferingResult","type":"structure","members":{"ReservedCacheNode":{"shape":"S5e"}}}},"RebalanceSlotsInGlobalReplicationGroup":{"input":{"type":"structure","required":["GlobalReplicationGroupId","ApplyImmediately"],"members":{"GlobalReplicationGroupId":{},"ApplyImmediately":{"type":"boolean"}}},"output":{"resultWrapper":"RebalanceSlotsInGlobalReplicationGroupResult","type":"structure","members":{"GlobalReplicationGroup":{"shape":"S2x"}}}},"RebootCacheCluster":{"input":{"type":"structure","required":["CacheClusterId","CacheNodeIdsToReboot"],"members":{"CacheClusterId":{},"CacheNodeIdsToReboot":{"shape":"S29"}}},"output":{"resultWrapper":"RebootCacheClusterResult","type":"structure","members":{"CacheCluster":{"shape":"S27"}}}},"RemoveTagsFromResource":{"input":{"type":"structure","required":["ResourceName","TagKeys"],"members":{"ResourceName":{},"TagKeys":{"type":"list","member":{}}}},"output":{"shape":"S5","resultWrapper":"RemoveTagsFromResourceResult"}},"ResetCacheParameterGroup":{"input":{"type":"structure","required":["CacheParameterGroupName"],"members":{"CacheParameterGroupName":{},"ResetAllParameters":{"type":"boolean"},"ParameterNameValues":{"shape":"S76"}}},"output":{"shape":"S78","resultWrapper":"ResetCacheParameterGroupResult"}},"RevokeCacheSecurityGroupIngress":{"input":{"type":"structure","required":["CacheSecurityGroupName","EC2SecurityGroupName","EC2SecurityGroupOwnerId"],"members":{"CacheSecurityGroupName":{},"EC2SecurityGroupName":{},"EC2SecurityGroupOwnerId":{}}},"output":{"resultWrapper":"RevokeCacheSecurityGroupIngressResult","type":"structure","members":{"CacheSecurityGroup":{"shape":"S8"}}}},"StartMigration":{"input":{"type":"structure","required":["ReplicationGroupId","CustomerNodeEndpointList"],"members":{"ReplicationGroupId":{},"CustomerNodeEndpointList":{"type":"list","member":{"type":"structure","members":{"Address":{},"Port":{"type":"integer"}}}}}},"output":{"resultWrapper":"StartMigrationResult","type":"structure","members":{"ReplicationGroup":{"shape":"So"}}}},"TestFailover":{"input":{"type":"structure","required":["ReplicationGroupId","NodeGroupId"],"members":{"ReplicationGroupId":{},"NodeGroupId":{}}},"output":{"resultWrapper":"TestFailoverResult","type":"structure","members":{"ReplicationGroup":{"shape":"So"}}}}},"shapes":{"S3":{"type":"list","member":{"locationName":"Tag","type":"structure","members":{"Key":{},"Value":{}}}},"S5":{"type":"structure","members":{"TagList":{"shape":"S3"}}},"S8":{"type":"structure","members":{"OwnerId":{},"CacheSecurityGroupName":{},"Description":{},"EC2SecurityGroups":{"type":"list","member":{"locationName":"EC2SecurityGroup","type":"structure","members":{"Status":{},"EC2SecurityGroupName":{},"EC2SecurityGroupOwnerId":{}}}},"ARN":{}},"wrapper":true},"Sc":{"type":"list","member":{}},"Sd":{"type":"list","member":{}},"Se":{"type":"structure","members":{"ProcessedUpdateActions":{"type":"list","member":{"locationName":"ProcessedUpdateAction","type":"structure","members":{"ReplicationGroupId":{},"CacheClusterId":{},"ServiceUpdateName":{},"UpdateActionStatus":{}}}},"UnprocessedUpdateActions":{"type":"list","member":{"locationName":"UnprocessedUpdateAction","type":"structure","members":{"ReplicationGroupId":{},"CacheClusterId":{},"ServiceUpdateName":{},"ErrorType":{},"ErrorMessage":{}}}}}},"So":{"type":"structure","members":{"ReplicationGroupId":{},"Description":{},"GlobalReplicationGroupInfo":{"type":"structure","members":{"GlobalReplicationGroupId":{},"GlobalReplicationGroupMemberRole":{}}},"Status":{},"PendingModifiedValues":{"type":"structure","members":{"PrimaryClusterId":{},"AutomaticFailoverStatus":{},"Resharding":{"type":"structure","members":{"SlotMigration":{"type":"structure","members":{"ProgressPercentage":{"type":"double"}}}}},"AuthTokenStatus":{},"UserGroups":{"type":"structure","members":{"UserGroupIdsToAdd":{"shape":"Sx"},"UserGroupIdsToRemove":{"shape":"Sx"}}},"LogDeliveryConfigurations":{"shape":"Sz"}}},"MemberClusters":{"type":"list","member":{"locationName":"ClusterId"}},"NodeGroups":{"type":"list","member":{"locationName":"NodeGroup","type":"structure","members":{"NodeGroupId":{},"Status":{},"PrimaryEndpoint":{"shape":"S1a"},"ReaderEndpoint":{"shape":"S1a"},"Slots":{},"NodeGroupMembers":{"type":"list","member":{"locationName":"NodeGroupMember","type":"structure","members":{"CacheClusterId":{},"CacheNodeId":{},"ReadEndpoint":{"shape":"S1a"},"PreferredAvailabilityZone":{},"PreferredOutpostArn":{},"CurrentRole":{}}}}}}},"SnapshottingClusterId":{},"AutomaticFailover":{},"MultiAZ":{},"ConfigurationEndpoint":{"shape":"S1a"},"SnapshotRetentionLimit":{"type":"integer"},"SnapshotWindow":{},"ClusterEnabled":{"type":"boolean"},"CacheNodeType":{},"AuthTokenEnabled":{"type":"boolean"},"AuthTokenLastModifiedDate":{"type":"timestamp"},"TransitEncryptionEnabled":{"type":"boolean"},"AtRestEncryptionEnabled":{"type":"boolean"},"MemberClustersOutpostArns":{"type":"list","member":{"locationName":"ReplicationGroupOutpostArn"}},"KmsKeyId":{},"ARN":{},"UserGroupIds":{"shape":"Sx"},"LogDeliveryConfigurations":{"shape":"S1k"}},"wrapper":true},"Sx":{"type":"list","member":{}},"Sz":{"type":"list","member":{"type":"structure","members":{"LogType":{},"DestinationType":{},"DestinationDetails":{"shape":"S13"},"LogFormat":{}}},"locationName":"PendingLogDeliveryConfiguration"},"S13":{"type":"structure","members":{"CloudWatchLogsDetails":{"type":"structure","members":{"LogGroup":{}}},"KinesisFirehoseDetails":{"type":"structure","members":{"DeliveryStream":{}}}}},"S1a":{"type":"structure","members":{"Address":{},"Port":{"type":"integer"}}},"S1k":{"type":"list","member":{"locationName":"LogDeliveryConfiguration","type":"structure","members":{"LogType":{},"DestinationType":{},"DestinationDetails":{"shape":"S13"},"LogFormat":{},"Status":{},"Message":{}}}},"S1p":{"type":"structure","members":{"SnapshotName":{},"ReplicationGroupId":{},"ReplicationGroupDescription":{},"CacheClusterId":{},"SnapshotStatus":{},"SnapshotSource":{},"CacheNodeType":{},"Engine":{},"EngineVersion":{},"NumCacheNodes":{"type":"integer"},"PreferredAvailabilityZone":{},"PreferredOutpostArn":{},"CacheClusterCreateTime":{"type":"timestamp"},"PreferredMaintenanceWindow":{},"TopicArn":{},"Port":{"type":"integer"},"CacheParameterGroupName":{},"CacheSubnetGroupName":{},"VpcId":{},"AutoMinorVersionUpgrade":{"type":"boolean"},"SnapshotRetentionLimit":{"type":"integer"},"SnapshotWindow":{},"NumNodeGroups":{"type":"integer"},"AutomaticFailover":{},"NodeSnapshots":{"type":"list","member":{"locationName":"NodeSnapshot","type":"structure","members":{"CacheClusterId":{},"NodeGroupId":{},"CacheNodeId":{},"NodeGroupConfiguration":{"shape":"S1s"},"CacheSize":{},"CacheNodeCreateTime":{"type":"timestamp"},"SnapshotCreateTime":{"type":"timestamp"}},"wrapper":true}},"KmsKeyId":{},"ARN":{}},"wrapper":true},"S1s":{"type":"structure","members":{"NodeGroupId":{},"Slots":{},"ReplicaCount":{"type":"integer"},"PrimaryAvailabilityZone":{},"ReplicaAvailabilityZones":{"shape":"S1u"},"PrimaryOutpostArn":{},"ReplicaOutpostArns":{"type":"list","member":{"locationName":"OutpostArn"}}}},"S1u":{"type":"list","member":{"locationName":"AvailabilityZone"}},"S1y":{"type":"list","member":{"locationName":"PreferredAvailabilityZone"}},"S1z":{"type":"list","member":{"locationName":"CacheSecurityGroupName"}},"S20":{"type":"list","member":{"locationName":"SecurityGroupId"}},"S21":{"type":"list","member":{"locationName":"SnapshotArn"}},"S23":{"type":"list","member":{"locationName":"PreferredOutpostArn"}},"S24":{"type":"list","member":{"locationName":"LogDeliveryConfigurationRequest","type":"structure","members":{"LogType":{},"DestinationType":{},"DestinationDetails":{"shape":"S13"},"LogFormat":{},"Enabled":{"type":"boolean"}}}},"S27":{"type":"structure","members":{"CacheClusterId":{},"ConfigurationEndpoint":{"shape":"S1a"},"ClientDownloadLandingPage":{},"CacheNodeType":{},"Engine":{},"EngineVersion":{},"CacheClusterStatus":{},"NumCacheNodes":{"type":"integer"},"PreferredAvailabilityZone":{},"PreferredOutpostArn":{},"CacheClusterCreateTime":{"type":"timestamp"},"PreferredMaintenanceWindow":{},"PendingModifiedValues":{"type":"structure","members":{"NumCacheNodes":{"type":"integer"},"CacheNodeIdsToRemove":{"shape":"S29"},"EngineVersion":{},"CacheNodeType":{},"AuthTokenStatus":{},"LogDeliveryConfigurations":{"shape":"Sz"}}},"NotificationConfiguration":{"type":"structure","members":{"TopicArn":{},"TopicStatus":{}}},"CacheSecurityGroups":{"type":"list","member":{"locationName":"CacheSecurityGroup","type":"structure","members":{"CacheSecurityGroupName":{},"Status":{}}}},"CacheParameterGroup":{"type":"structure","members":{"CacheParameterGroupName":{},"ParameterApplyStatus":{},"CacheNodeIdsToReboot":{"shape":"S29"}}},"CacheSubnetGroupName":{},"CacheNodes":{"type":"list","member":{"locationName":"CacheNode","type":"structure","members":{"CacheNodeId":{},"CacheNodeStatus":{},"CacheNodeCreateTime":{"type":"timestamp"},"Endpoint":{"shape":"S1a"},"ParameterGroupStatus":{},"SourceCacheNodeId":{},"CustomerAvailabilityZone":{},"CustomerOutpostArn":{}}}},"AutoMinorVersionUpgrade":{"type":"boolean"},"SecurityGroups":{"type":"list","member":{"type":"structure","members":{"SecurityGroupId":{},"Status":{}}}},"ReplicationGroupId":{},"SnapshotRetentionLimit":{"type":"integer"},"SnapshotWindow":{},"AuthTokenEnabled":{"type":"boolean"},"AuthTokenLastModifiedDate":{"type":"timestamp"},"TransitEncryptionEnabled":{"type":"boolean"},"AtRestEncryptionEnabled":{"type":"boolean"},"ARN":{},"ReplicationGroupLogDeliveryEnabled":{"type":"boolean"},"LogDeliveryConfigurations":{"shape":"S1k"}},"wrapper":true},"S29":{"type":"list","member":{"locationName":"CacheNodeId"}},"S2k":{"type":"structure","members":{"CacheParameterGroupName":{},"CacheParameterGroupFamily":{},"Description":{},"IsGlobal":{"type":"boolean"},"ARN":{}},"wrapper":true},"S2o":{"type":"list","member":{"locationName":"SubnetIdentifier"}},"S2q":{"type":"structure","members":{"CacheSubnetGroupName":{},"CacheSubnetGroupDescription":{},"VpcId":{},"Subnets":{"type":"list","member":{"locationName":"Subnet","type":"structure","members":{"SubnetIdentifier":{},"SubnetAvailabilityZone":{"type":"structure","members":{"Name":{}},"wrapper":true},"SubnetOutpost":{"type":"structure","members":{"SubnetOutpostArn":{}}}}}},"ARN":{}},"wrapper":true},"S2x":{"type":"structure","members":{"GlobalReplicationGroupId":{},"GlobalReplicationGroupDescription":{},"Status":{},"CacheNodeType":{},"Engine":{},"EngineVersion":{},"Members":{"type":"list","member":{"locationName":"GlobalReplicationGroupMember","type":"structure","members":{"ReplicationGroupId":{},"ReplicationGroupRegion":{},"Role":{},"AutomaticFailover":{},"Status":{}},"wrapper":true}},"ClusterEnabled":{"type":"boolean"},"GlobalNodeGroups":{"type":"list","member":{"locationName":"GlobalNodeGroup","type":"structure","members":{"GlobalNodeGroupId":{},"Slots":{}}}},"AuthTokenEnabled":{"type":"boolean"},"TransitEncryptionEnabled":{"type":"boolean"},"AtRestEncryptionEnabled":{"type":"boolean"},"ARN":{}},"wrapper":true},"S3c":{"type":"list","member":{}},"S3e":{"type":"structure","members":{"UserId":{},"UserName":{},"Status":{},"Engine":{},"AccessString":{},"UserGroupIds":{"shape":"Sx"},"Authentication":{"type":"structure","members":{"Type":{},"PasswordCount":{"type":"integer"}}},"ARN":{}}},"S3i":{"type":"list","member":{}},"S3j":{"type":"structure","members":{"UserGroupId":{},"Status":{},"Engine":{},"UserIds":{"shape":"S3k"},"PendingChanges":{"type":"structure","members":{"UserIdsToRemove":{"shape":"S3k"},"UserIdsToAdd":{"shape":"S3k"}}},"ReplicationGroups":{"type":"list","member":{}},"ARN":{}}},"S3k":{"type":"list","member":{}},"S3o":{"type":"list","member":{"locationName":"GlobalNodeGroupId"}},"S3r":{"type":"list","member":{"locationName":"ConfigureShard","type":"structure","required":["NodeGroupId","NewReplicaCount"],"members":{"NodeGroupId":{},"NewReplicaCount":{"type":"integer"},"PreferredAvailabilityZones":{"shape":"S1y"},"PreferredOutpostArns":{"shape":"S23"}}}},"S4k":{"type":"list","member":{"locationName":"Parameter","type":"structure","members":{"ParameterName":{},"ParameterValue":{},"Description":{},"Source":{},"DataType":{},"AllowedValues":{},"IsModifiable":{"type":"boolean"},"MinimumEngineVersion":{},"ChangeType":{}}}},"S4n":{"type":"list","member":{"locationName":"CacheNodeTypeSpecificParameter","type":"structure","members":{"ParameterName":{},"Description":{},"Source":{},"DataType":{},"AllowedValues":{},"IsModifiable":{"type":"boolean"},"MinimumEngineVersion":{},"CacheNodeTypeSpecificValues":{"type":"list","member":{"locationName":"CacheNodeTypeSpecificValue","type":"structure","members":{"CacheNodeType":{},"Value":{}}}},"ChangeType":{}}}},"S5e":{"type":"structure","members":{"ReservedCacheNodeId":{},"ReservedCacheNodesOfferingId":{},"CacheNodeType":{},"StartTime":{"type":"timestamp"},"Duration":{"type":"integer"},"FixedPrice":{"type":"double"},"UsagePrice":{"type":"double"},"CacheNodeCount":{"type":"integer"},"ProductDescription":{},"OfferingType":{},"State":{},"RecurringCharges":{"shape":"S5f"},"ReservationARN":{}},"wrapper":true},"S5f":{"type":"list","member":{"locationName":"RecurringCharge","type":"structure","members":{"RecurringChargeAmount":{"type":"double"},"RecurringChargeFrequency":{}},"wrapper":true}},"S5m":{"type":"list","member":{}},"S6t":{"type":"list","member":{"locationName":"ReshardingConfiguration","type":"structure","members":{"NodeGroupId":{},"PreferredAvailabilityZones":{"shape":"S1u"}}}},"S70":{"type":"list","member":{}},"S76":{"type":"list","member":{"locationName":"ParameterNameValue","type":"structure","members":{"ParameterName":{},"ParameterValue":{}}}},"S78":{"type":"structure","members":{"CacheParameterGroupName":{}}}}}

/***/ }),
/* 210 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeCacheClusters":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"CacheClusters"},"DescribeCacheEngineVersions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"CacheEngineVersions"},"DescribeCacheParameterGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"CacheParameterGroups"},"DescribeCacheParameters":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"Parameters"},"DescribeCacheSecurityGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"CacheSecurityGroups"},"DescribeCacheSubnetGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"CacheSubnetGroups"},"DescribeEngineDefaultParameters":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"EngineDefaults.Marker","result_key":"EngineDefaults.Parameters"},"DescribeEvents":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"Events"},"DescribeGlobalReplicationGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"GlobalReplicationGroups"},"DescribeReplicationGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"ReplicationGroups"},"DescribeReservedCacheNodes":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"ReservedCacheNodes"},"DescribeReservedCacheNodesOfferings":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"ReservedCacheNodesOfferings"},"DescribeServiceUpdates":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"ServiceUpdates"},"DescribeSnapshots":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"Snapshots"},"DescribeUpdateActions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"UpdateActions"},"DescribeUserGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"UserGroups"},"DescribeUsers":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"Users"}}}

/***/ }),
/* 211 */
/***/ (function(module, exports) {

	module.exports = {"version":2,"waiters":{"CacheClusterAvailable":{"acceptors":[{"argument":"CacheClusters[].CacheClusterStatus","expected":"available","matcher":"pathAll","state":"success"},{"argument":"CacheClusters[].CacheClusterStatus","expected":"deleted","matcher":"pathAny","state":"failure"},{"argument":"CacheClusters[].CacheClusterStatus","expected":"deleting","matcher":"pathAny","state":"failure"},{"argument":"CacheClusters[].CacheClusterStatus","expected":"incompatible-network","matcher":"pathAny","state":"failure"},{"argument":"CacheClusters[].CacheClusterStatus","expected":"restore-failed","matcher":"pathAny","state":"failure"}],"delay":15,"description":"Wait until ElastiCache cluster is available.","maxAttempts":40,"operation":"DescribeCacheClusters"},"CacheClusterDeleted":{"acceptors":[{"argument":"CacheClusters[].CacheClusterStatus","expected":"deleted","matcher":"pathAll","state":"success"},{"expected":"CacheClusterNotFound","matcher":"error","state":"success"},{"argument":"CacheClusters[].CacheClusterStatus","expected":"available","matcher":"pathAny","state":"failure"},{"argument":"CacheClusters[].CacheClusterStatus","expected":"creating","matcher":"pathAny","state":"failure"},{"argument":"CacheClusters[].CacheClusterStatus","expected":"incompatible-network","matcher":"pathAny","state":"failure"},{"argument":"CacheClusters[].CacheClusterStatus","expected":"modifying","matcher":"pathAny","state":"failure"},{"argument":"CacheClusters[].CacheClusterStatus","expected":"restore-failed","matcher":"pathAny","state":"failure"},{"argument":"CacheClusters[].CacheClusterStatus","expected":"snapshotting","matcher":"pathAny","state":"failure"}],"delay":15,"description":"Wait until ElastiCache cluster is deleted.","maxAttempts":40,"operation":"DescribeCacheClusters"},"ReplicationGroupAvailable":{"acceptors":[{"argument":"ReplicationGroups[].Status","expected":"available","matcher":"pathAll","state":"success"},{"argument":"ReplicationGroups[].Status","expected":"deleted","matcher":"pathAny","state":"failure"}],"delay":15,"description":"Wait until ElastiCache replication group is available.","maxAttempts":40,"operation":"DescribeReplicationGroups"},"ReplicationGroupDeleted":{"acceptors":[{"argument":"ReplicationGroups[].Status","expected":"deleted","matcher":"pathAll","state":"success"},{"argument":"ReplicationGroups[].Status","expected":"available","matcher":"pathAny","state":"failure"},{"expected":"ReplicationGroupNotFoundFault","matcher":"error","state":"success"}],"delay":15,"description":"Wait until ElastiCache replication group is deleted.","maxAttempts":40,"operation":"DescribeReplicationGroups"}}}

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['elasticbeanstalk'] = {};
	AWS.ElasticBeanstalk = Service.defineService('elasticbeanstalk', ['2010-12-01']);
	Object.defineProperty(apiLoader.services['elasticbeanstalk'], '2010-12-01', {
	  get: function get() {
	    var model = __webpack_require__(213);
	    model.paginators = __webpack_require__(214).pagination;
	    model.waiters = __webpack_require__(215).waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.ElasticBeanstalk;


/***/ }),
/* 213 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2010-12-01","endpointPrefix":"elasticbeanstalk","protocol":"query","serviceAbbreviation":"Elastic Beanstalk","serviceFullName":"AWS Elastic Beanstalk","serviceId":"Elastic Beanstalk","signatureVersion":"v4","uid":"elasticbeanstalk-2010-12-01","xmlNamespace":"http://elasticbeanstalk.amazonaws.com/docs/2010-12-01/"},"operations":{"AbortEnvironmentUpdate":{"input":{"type":"structure","members":{"EnvironmentId":{},"EnvironmentName":{}}}},"ApplyEnvironmentManagedAction":{"input":{"type":"structure","required":["ActionId"],"members":{"EnvironmentName":{},"EnvironmentId":{},"ActionId":{}}},"output":{"resultWrapper":"ApplyEnvironmentManagedActionResult","type":"structure","members":{"ActionId":{},"ActionDescription":{},"ActionType":{},"Status":{}}}},"AssociateEnvironmentOperationsRole":{"input":{"type":"structure","required":["EnvironmentName","OperationsRole"],"members":{"EnvironmentName":{},"OperationsRole":{}}}},"CheckDNSAvailability":{"input":{"type":"structure","required":["CNAMEPrefix"],"members":{"CNAMEPrefix":{}}},"output":{"resultWrapper":"CheckDNSAvailabilityResult","type":"structure","members":{"Available":{"type":"boolean"},"FullyQualifiedCNAME":{}}}},"ComposeEnvironments":{"input":{"type":"structure","members":{"ApplicationName":{},"GroupName":{},"VersionLabels":{"type":"list","member":{}}}},"output":{"shape":"Sk","resultWrapper":"ComposeEnvironmentsResult"}},"CreateApplication":{"input":{"type":"structure","required":["ApplicationName"],"members":{"ApplicationName":{},"Description":{},"ResourceLifecycleConfig":{"shape":"S19"},"Tags":{"shape":"S1f"}}},"output":{"shape":"S1j","resultWrapper":"CreateApplicationResult"}},"CreateApplicationVersion":{"input":{"type":"structure","required":["ApplicationName","VersionLabel"],"members":{"ApplicationName":{},"VersionLabel":{},"Description":{},"SourceBuildInformation":{"shape":"S1p"},"SourceBundle":{"shape":"S1t"},"BuildConfiguration":{"type":"structure","required":["CodeBuildServiceRole","Image"],"members":{"ArtifactName":{},"CodeBuildServiceRole":{},"ComputeType":{},"Image":{},"TimeoutInMinutes":{"type":"integer"}}},"AutoCreateApplication":{"type":"boolean"},"Process":{"type":"boolean"},"Tags":{"shape":"S1f"}}},"output":{"shape":"S21","resultWrapper":"CreateApplicationVersionResult"}},"CreateConfigurationTemplate":{"input":{"type":"structure","required":["ApplicationName","TemplateName"],"members":{"ApplicationName":{},"TemplateName":{},"SolutionStackName":{},"PlatformArn":{},"SourceConfiguration":{"type":"structure","members":{"ApplicationName":{},"TemplateName":{}}},"EnvironmentId":{},"Description":{},"OptionSettings":{"shape":"S27"},"Tags":{"shape":"S1f"}}},"output":{"shape":"S2d","resultWrapper":"CreateConfigurationTemplateResult"}},"CreateEnvironment":{"input":{"type":"structure","required":["ApplicationName"],"members":{"ApplicationName":{},"EnvironmentName":{},"GroupName":{},"Description":{},"CNAMEPrefix":{},"Tier":{"shape":"S13"},"Tags":{"shape":"S1f"},"VersionLabel":{},"TemplateName":{},"SolutionStackName":{},"PlatformArn":{},"OptionSettings":{"shape":"S27"},"OptionsToRemove":{"shape":"S2g"},"OperationsRole":{}}},"output":{"shape":"Sm","resultWrapper":"CreateEnvironmentResult"}},"CreatePlatformVersion":{"input":{"type":"structure","required":["PlatformName","PlatformVersion","PlatformDefinitionBundle"],"members":{"PlatformName":{},"PlatformVersion":{},"PlatformDefinitionBundle":{"shape":"S1t"},"EnvironmentName":{},"OptionSettings":{"shape":"S27"},"Tags":{"shape":"S1f"}}},"output":{"resultWrapper":"CreatePlatformVersionResult","type":"structure","members":{"PlatformSummary":{"shape":"S2m"},"Builder":{"type":"structure","members":{"ARN":{}}}}}},"CreateStorageLocation":{"output":{"resultWrapper":"CreateStorageLocationResult","type":"structure","members":{"S3Bucket":{}}}},"DeleteApplication":{"input":{"type":"structure","required":["ApplicationName"],"members":{"ApplicationName":{},"TerminateEnvByForce":{"type":"boolean"}}}},"DeleteApplicationVersion":{"input":{"type":"structure","required":["ApplicationName","VersionLabel"],"members":{"ApplicationName":{},"VersionLabel":{},"DeleteSourceBundle":{"type":"boolean"}}}},"DeleteConfigurationTemplate":{"input":{"type":"structure","required":["ApplicationName","TemplateName"],"members":{"ApplicationName":{},"TemplateName":{}}}},"DeleteEnvironmentConfiguration":{"input":{"type":"structure","required":["ApplicationName","EnvironmentName"],"members":{"ApplicationName":{},"EnvironmentName":{}}}},"DeletePlatformVersion":{"input":{"type":"structure","members":{"PlatformArn":{}}},"output":{"resultWrapper":"DeletePlatformVersionResult","type":"structure","members":{"PlatformSummary":{"shape":"S2m"}}}},"DescribeAccountAttributes":{"output":{"resultWrapper":"DescribeAccountAttributesResult","type":"structure","members":{"ResourceQuotas":{"type":"structure","members":{"ApplicationQuota":{"shape":"S3c"},"ApplicationVersionQuota":{"shape":"S3c"},"EnvironmentQuota":{"shape":"S3c"},"ConfigurationTemplateQuota":{"shape":"S3c"},"CustomPlatformQuota":{"shape":"S3c"}}}}}},"DescribeApplicationVersions":{"input":{"type":"structure","members":{"ApplicationName":{},"VersionLabels":{"shape":"S1m"},"MaxRecords":{"type":"integer"},"NextToken":{}}},"output":{"resultWrapper":"DescribeApplicationVersionsResult","type":"structure","members":{"ApplicationVersions":{"type":"list","member":{"shape":"S22"}},"NextToken":{}}}},"DescribeApplications":{"input":{"type":"structure","members":{"ApplicationNames":{"type":"list","member":{}}}},"output":{"resultWrapper":"DescribeApplicationsResult","type":"structure","members":{"Applications":{"type":"list","member":{"shape":"S1k"}}}}},"DescribeConfigurationOptions":{"input":{"type":"structure","members":{"ApplicationName":{},"TemplateName":{},"EnvironmentName":{},"SolutionStackName":{},"PlatformArn":{},"Options":{"shape":"S2g"}}},"output":{"resultWrapper":"DescribeConfigurationOptionsResult","type":"structure","members":{"SolutionStackName":{},"PlatformArn":{},"Options":{"type":"list","member":{"type":"structure","members":{"Namespace":{},"Name":{},"DefaultValue":{},"ChangeSeverity":{},"UserDefined":{"type":"boolean"},"ValueType":{},"ValueOptions":{"type":"list","member":{}},"MinValue":{"type":"integer"},"MaxValue":{"type":"integer"},"MaxLength":{"type":"integer"},"Regex":{"type":"structure","members":{"Pattern":{},"Label":{}}}}}}}}},"DescribeConfigurationSettings":{"input":{"type":"structure","required":["ApplicationName"],"members":{"ApplicationName":{},"TemplateName":{},"EnvironmentName":{}}},"output":{"resultWrapper":"DescribeConfigurationSettingsResult","type":"structure","members":{"ConfigurationSettings":{"type":"list","member":{"shape":"S2d"}}}}},"DescribeEnvironmentHealth":{"input":{"type":"structure","members":{"EnvironmentName":{},"EnvironmentId":{},"AttributeNames":{"type":"list","member":{}}}},"output":{"resultWrapper":"DescribeEnvironmentHealthResult","type":"structure","members":{"EnvironmentName":{},"HealthStatus":{},"Status":{},"Color":{},"Causes":{"shape":"S48"},"ApplicationMetrics":{"shape":"S4a"},"InstancesHealth":{"type":"structure","members":{"NoData":{"type":"integer"},"Unknown":{"type":"integer"},"Pending":{"type":"integer"},"Ok":{"type":"integer"},"Info":{"type":"integer"},"Warning":{"type":"integer"},"Degraded":{"type":"integer"},"Severe":{"type":"integer"}}},"RefreshedAt":{"type":"timestamp"}}}},"DescribeEnvironmentManagedActionHistory":{"input":{"type":"structure","members":{"EnvironmentId":{},"EnvironmentName":{},"NextToken":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"DescribeEnvironmentManagedActionHistoryResult","type":"structure","members":{"ManagedActionHistoryItems":{"type":"list","member":{"type":"structure","members":{"ActionId":{},"ActionType":{},"ActionDescription":{},"FailureType":{},"Status":{},"FailureDescription":{},"ExecutedTime":{"type":"timestamp"},"FinishedTime":{"type":"timestamp"}}}},"NextToken":{}}}},"DescribeEnvironmentManagedActions":{"input":{"type":"structure","members":{"EnvironmentName":{},"EnvironmentId":{},"Status":{}}},"output":{"resultWrapper":"DescribeEnvironmentManagedActionsResult","type":"structure","members":{"ManagedActions":{"type":"list","member":{"type":"structure","members":{"ActionId":{},"ActionDescription":{},"ActionType":{},"Status":{},"WindowStartTime":{"type":"timestamp"}}}}}}},"DescribeEnvironmentResources":{"input":{"type":"structure","members":{"EnvironmentId":{},"EnvironmentName":{}}},"output":{"resultWrapper":"DescribeEnvironmentResourcesResult","type":"structure","members":{"EnvironmentResources":{"type":"structure","members":{"EnvironmentName":{},"AutoScalingGroups":{"type":"list","member":{"type":"structure","members":{"Name":{}}}},"Instances":{"type":"list","member":{"type":"structure","members":{"Id":{}}}},"LaunchConfigurations":{"type":"list","member":{"type":"structure","members":{"Name":{}}}},"LaunchTemplates":{"type":"list","member":{"type":"structure","members":{"Id":{}}}},"LoadBalancers":{"type":"list","member":{"type":"structure","members":{"Name":{}}}},"Triggers":{"type":"list","member":{"type":"structure","members":{"Name":{}}}},"Queues":{"type":"list","member":{"type":"structure","members":{"Name":{},"URL":{}}}}}}}}},"DescribeEnvironments":{"input":{"type":"structure","members":{"ApplicationName":{},"VersionLabel":{},"EnvironmentIds":{"type":"list","member":{}},"EnvironmentNames":{"type":"list","member":{}},"IncludeDeleted":{"type":"boolean"},"IncludedDeletedBackTo":{"type":"timestamp"},"MaxRecords":{"type":"integer"},"NextToken":{}}},"output":{"shape":"Sk","resultWrapper":"DescribeEnvironmentsResult"}},"DescribeEvents":{"input":{"type":"structure","members":{"ApplicationName":{},"VersionLabel":{},"TemplateName":{},"EnvironmentId":{},"EnvironmentName":{},"PlatformArn":{},"RequestId":{},"Severity":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"MaxRecords":{"type":"integer"},"NextToken":{}}},"output":{"resultWrapper":"DescribeEventsResult","type":"structure","members":{"Events":{"type":"list","member":{"type":"structure","members":{"EventDate":{"type":"timestamp"},"Message":{},"ApplicationName":{},"VersionLabel":{},"TemplateName":{},"EnvironmentName":{},"PlatformArn":{},"RequestId":{},"Severity":{}}}},"NextToken":{}}}},"DescribeInstancesHealth":{"input":{"type":"structure","members":{"EnvironmentName":{},"EnvironmentId":{},"AttributeNames":{"type":"list","member":{}},"NextToken":{}}},"output":{"resultWrapper":"DescribeInstancesHealthResult","type":"structure","members":{"InstanceHealthList":{"type":"list","member":{"type":"structure","members":{"InstanceId":{},"HealthStatus":{},"Color":{},"Causes":{"shape":"S48"},"LaunchedAt":{"type":"timestamp"},"ApplicationMetrics":{"shape":"S4a"},"System":{"type":"structure","members":{"CPUUtilization":{"type":"structure","members":{"User":{"type":"double"},"Nice":{"type":"double"},"System":{"type":"double"},"Idle":{"type":"double"},"IOWait":{"type":"double"},"IRQ":{"type":"double"},"SoftIRQ":{"type":"double"},"Privileged":{"type":"double"}}},"LoadAverage":{"type":"list","member":{"type":"double"}}}},"Deployment":{"type":"structure","members":{"VersionLabel":{},"DeploymentId":{"type":"long"},"Status":{},"DeploymentTime":{"type":"timestamp"}}},"AvailabilityZone":{},"InstanceType":{}}}},"RefreshedAt":{"type":"timestamp"},"NextToken":{}}}},"DescribePlatformVersion":{"input":{"type":"structure","members":{"PlatformArn":{}}},"output":{"resultWrapper":"DescribePlatformVersionResult","type":"structure","members":{"PlatformDescription":{"type":"structure","members":{"PlatformArn":{},"PlatformOwner":{},"PlatformName":{},"PlatformVersion":{},"SolutionStackName":{},"PlatformStatus":{},"DateCreated":{"type":"timestamp"},"DateUpdated":{"type":"timestamp"},"PlatformCategory":{},"Description":{},"Maintainer":{},"OperatingSystemName":{},"OperatingSystemVersion":{},"ProgrammingLanguages":{"type":"list","member":{"type":"structure","members":{"Name":{},"Version":{}}}},"Frameworks":{"type":"list","member":{"type":"structure","members":{"Name":{},"Version":{}}}},"CustomAmiList":{"type":"list","member":{"type":"structure","members":{"VirtualizationType":{},"ImageId":{}}}},"SupportedTierList":{"shape":"S2s"},"SupportedAddonList":{"shape":"S2u"},"PlatformLifecycleState":{},"PlatformBranchName":{},"PlatformBranchLifecycleState":{}}}}}},"DisassociateEnvironmentOperationsRole":{"input":{"type":"structure","required":["EnvironmentName"],"members":{"EnvironmentName":{}}}},"ListAvailableSolutionStacks":{"output":{"resultWrapper":"ListAvailableSolutionStacksResult","type":"structure","members":{"SolutionStacks":{"type":"list","member":{}},"SolutionStackDetails":{"type":"list","member":{"type":"structure","members":{"SolutionStackName":{},"PermittedFileTypes":{"type":"list","member":{}}}}}}}},"ListPlatformBranches":{"input":{"type":"structure","members":{"Filters":{"type":"list","member":{"type":"structure","members":{"Attribute":{},"Operator":{},"Values":{"type":"list","member":{}}}}},"MaxRecords":{"type":"integer"},"NextToken":{}}},"output":{"resultWrapper":"ListPlatformBranchesResult","type":"structure","members":{"PlatformBranchSummaryList":{"type":"list","member":{"type":"structure","members":{"PlatformName":{},"BranchName":{},"LifecycleState":{},"BranchOrder":{"type":"integer"},"SupportedTierList":{"shape":"S2s"}}}},"NextToken":{}}}},"ListPlatformVersions":{"input":{"type":"structure","members":{"Filters":{"type":"list","member":{"type":"structure","members":{"Type":{},"Operator":{},"Values":{"type":"list","member":{}}}}},"MaxRecords":{"type":"integer"},"NextToken":{}}},"output":{"resultWrapper":"ListPlatformVersionsResult","type":"structure","members":{"PlatformSummaryList":{"type":"list","member":{"shape":"S2m"}},"NextToken":{}}}},"ListTagsForResource":{"input":{"type":"structure","required":["ResourceArn"],"members":{"ResourceArn":{}}},"output":{"resultWrapper":"ListTagsForResourceResult","type":"structure","members":{"ResourceArn":{},"ResourceTags":{"shape":"S7g"}}}},"RebuildEnvironment":{"input":{"type":"structure","members":{"EnvironmentId":{},"EnvironmentName":{}}}},"RequestEnvironmentInfo":{"input":{"type":"structure","required":["InfoType"],"members":{"EnvironmentId":{},"EnvironmentName":{},"InfoType":{}}}},"RestartAppServer":{"input":{"type":"structure","members":{"EnvironmentId":{},"EnvironmentName":{}}}},"RetrieveEnvironmentInfo":{"input":{"type":"structure","required":["InfoType"],"members":{"EnvironmentId":{},"EnvironmentName":{},"InfoType":{}}},"output":{"resultWrapper":"RetrieveEnvironmentInfoResult","type":"structure","members":{"EnvironmentInfo":{"type":"list","member":{"type":"structure","members":{"InfoType":{},"Ec2InstanceId":{},"SampleTimestamp":{"type":"timestamp"},"Message":{}}}}}}},"SwapEnvironmentCNAMEs":{"input":{"type":"structure","members":{"SourceEnvironmentId":{},"SourceEnvironmentName":{},"DestinationEnvironmentId":{},"DestinationEnvironmentName":{}}}},"TerminateEnvironment":{"input":{"type":"structure","members":{"EnvironmentId":{},"EnvironmentName":{},"TerminateResources":{"type":"boolean"},"ForceTerminate":{"type":"boolean"}}},"output":{"shape":"Sm","resultWrapper":"TerminateEnvironmentResult"}},"UpdateApplication":{"input":{"type":"structure","required":["ApplicationName"],"members":{"ApplicationName":{},"Description":{}}},"output":{"shape":"S1j","resultWrapper":"UpdateApplicationResult"}},"UpdateApplicationResourceLifecycle":{"input":{"type":"structure","required":["ApplicationName","ResourceLifecycleConfig"],"members":{"ApplicationName":{},"ResourceLifecycleConfig":{"shape":"S19"}}},"output":{"resultWrapper":"UpdateApplicationResourceLifecycleResult","type":"structure","members":{"ApplicationName":{},"ResourceLifecycleConfig":{"shape":"S19"}}}},"UpdateApplicationVersion":{"input":{"type":"structure","required":["ApplicationName","VersionLabel"],"members":{"ApplicationName":{},"VersionLabel":{},"Description":{}}},"output":{"shape":"S21","resultWrapper":"UpdateApplicationVersionResult"}},"UpdateConfigurationTemplate":{"input":{"type":"structure","required":["ApplicationName","TemplateName"],"members":{"ApplicationName":{},"TemplateName":{},"Description":{},"OptionSettings":{"shape":"S27"},"OptionsToRemove":{"shape":"S2g"}}},"output":{"shape":"S2d","resultWrapper":"UpdateConfigurationTemplateResult"}},"UpdateEnvironment":{"input":{"type":"structure","members":{"ApplicationName":{},"EnvironmentId":{},"EnvironmentName":{},"GroupName":{},"Description":{},"Tier":{"shape":"S13"},"VersionLabel":{},"TemplateName":{},"SolutionStackName":{},"PlatformArn":{},"OptionSettings":{"shape":"S27"},"OptionsToRemove":{"shape":"S2g"}}},"output":{"shape":"Sm","resultWrapper":"UpdateEnvironmentResult"}},"UpdateTagsForResource":{"input":{"type":"structure","required":["ResourceArn"],"members":{"ResourceArn":{},"TagsToAdd":{"shape":"S7g"},"TagsToRemove":{"type":"list","member":{}}}}},"ValidateConfigurationSettings":{"input":{"type":"structure","required":["ApplicationName","OptionSettings"],"members":{"ApplicationName":{},"TemplateName":{},"EnvironmentName":{},"OptionSettings":{"shape":"S27"}}},"output":{"resultWrapper":"ValidateConfigurationSettingsResult","type":"structure","members":{"Messages":{"type":"list","member":{"type":"structure","members":{"Message":{},"Severity":{},"Namespace":{},"OptionName":{}}}}}}}},"shapes":{"Sk":{"type":"structure","members":{"Environments":{"type":"list","member":{"shape":"Sm"}},"NextToken":{}}},"Sm":{"type":"structure","members":{"EnvironmentName":{},"EnvironmentId":{},"ApplicationName":{},"VersionLabel":{},"SolutionStackName":{},"PlatformArn":{},"TemplateName":{},"Description":{},"EndpointURL":{},"CNAME":{},"DateCreated":{"type":"timestamp"},"DateUpdated":{"type":"timestamp"},"Status":{},"AbortableOperationInProgress":{"type":"boolean"},"Health":{},"HealthStatus":{},"Resources":{"type":"structure","members":{"LoadBalancer":{"type":"structure","members":{"LoadBalancerName":{},"Domain":{},"Listeners":{"type":"list","member":{"type":"structure","members":{"Protocol":{},"Port":{"type":"integer"}}}}}}}},"Tier":{"shape":"S13"},"EnvironmentLinks":{"type":"list","member":{"type":"structure","members":{"LinkName":{},"EnvironmentName":{}}}},"EnvironmentArn":{},"OperationsRole":{}}},"S13":{"type":"structure","members":{"Name":{},"Type":{},"Version":{}}},"S19":{"type":"structure","members":{"ServiceRole":{},"VersionLifecycleConfig":{"type":"structure","members":{"MaxCountRule":{"type":"structure","required":["Enabled"],"members":{"Enabled":{"type":"boolean"},"MaxCount":{"type":"integer"},"DeleteSourceFromS3":{"type":"boolean"}}},"MaxAgeRule":{"type":"structure","required":["Enabled"],"members":{"Enabled":{"type":"boolean"},"MaxAgeInDays":{"type":"integer"},"DeleteSourceFromS3":{"type":"boolean"}}}}}}},"S1f":{"type":"list","member":{"shape":"S1g"}},"S1g":{"type":"structure","members":{"Key":{},"Value":{}}},"S1j":{"type":"structure","members":{"Application":{"shape":"S1k"}}},"S1k":{"type":"structure","members":{"ApplicationArn":{},"ApplicationName":{},"Description":{},"DateCreated":{"type":"timestamp"},"DateUpdated":{"type":"timestamp"},"Versions":{"shape":"S1m"},"ConfigurationTemplates":{"type":"list","member":{}},"ResourceLifecycleConfig":{"shape":"S19"}}},"S1m":{"type":"list","member":{}},"S1p":{"type":"structure","required":["SourceType","SourceRepository","SourceLocation"],"members":{"SourceType":{},"SourceRepository":{},"SourceLocation":{}}},"S1t":{"type":"structure","members":{"S3Bucket":{},"S3Key":{}}},"S21":{"type":"structure","members":{"ApplicationVersion":{"shape":"S22"}}},"S22":{"type":"structure","members":{"ApplicationVersionArn":{},"ApplicationName":{},"Description":{},"VersionLabel":{},"SourceBuildInformation":{"shape":"S1p"},"BuildArn":{},"SourceBundle":{"shape":"S1t"},"DateCreated":{"type":"timestamp"},"DateUpdated":{"type":"timestamp"},"Status":{}}},"S27":{"type":"list","member":{"type":"structure","members":{"ResourceName":{},"Namespace":{},"OptionName":{},"Value":{}}}},"S2d":{"type":"structure","members":{"SolutionStackName":{},"PlatformArn":{},"ApplicationName":{},"TemplateName":{},"Description":{},"EnvironmentName":{},"DeploymentStatus":{},"DateCreated":{"type":"timestamp"},"DateUpdated":{"type":"timestamp"},"OptionSettings":{"shape":"S27"}}},"S2g":{"type":"list","member":{"type":"structure","members":{"ResourceName":{},"Namespace":{},"OptionName":{}}}},"S2m":{"type":"structure","members":{"PlatformArn":{},"PlatformOwner":{},"PlatformStatus":{},"PlatformCategory":{},"OperatingSystemName":{},"OperatingSystemVersion":{},"SupportedTierList":{"shape":"S2s"},"SupportedAddonList":{"shape":"S2u"},"PlatformLifecycleState":{},"PlatformVersion":{},"PlatformBranchName":{},"PlatformBranchLifecycleState":{}}},"S2s":{"type":"list","member":{}},"S2u":{"type":"list","member":{}},"S3c":{"type":"structure","members":{"Maximum":{"type":"integer"}}},"S48":{"type":"list","member":{}},"S4a":{"type":"structure","members":{"Duration":{"type":"integer"},"RequestCount":{"type":"integer"},"StatusCodes":{"type":"structure","members":{"Status2xx":{"type":"integer"},"Status3xx":{"type":"integer"},"Status4xx":{"type":"integer"},"Status5xx":{"type":"integer"}}},"Latency":{"type":"structure","members":{"P999":{"type":"double"},"P99":{"type":"double"},"P95":{"type":"double"},"P90":{"type":"double"},"P85":{"type":"double"},"P75":{"type":"double"},"P50":{"type":"double"},"P10":{"type":"double"}}}}},"S7g":{"type":"list","member":{"shape":"S1g"}}}}

/***/ }),
/* 214 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeApplicationVersions":{"result_key":"ApplicationVersions"},"DescribeApplications":{"result_key":"Applications"},"DescribeConfigurationOptions":{"result_key":"Options"},"DescribeEnvironmentManagedActionHistory":{"input_token":"NextToken","limit_key":"MaxItems","output_token":"NextToken","result_key":"ManagedActionHistoryItems"},"DescribeEnvironments":{"result_key":"Environments"},"DescribeEvents":{"input_token":"NextToken","limit_key":"MaxRecords","output_token":"NextToken","result_key":"Events"},"ListAvailableSolutionStacks":{"result_key":"SolutionStacks"},"ListPlatformBranches":{"input_token":"NextToken","limit_key":"MaxRecords","output_token":"NextToken"},"ListPlatformVersions":{"input_token":"NextToken","limit_key":"MaxRecords","output_token":"NextToken","result_key":"PlatformSummaryList"}}}

/***/ }),
/* 215 */
/***/ (function(module, exports) {

	module.exports = {"version":2,"waiters":{"EnvironmentExists":{"delay":20,"maxAttempts":20,"operation":"DescribeEnvironments","acceptors":[{"state":"success","matcher":"pathAll","argument":"Environments[].Status","expected":"Ready"},{"state":"retry","matcher":"pathAll","argument":"Environments[].Status","expected":"Launching"}]},"EnvironmentUpdated":{"delay":20,"maxAttempts":20,"operation":"DescribeEnvironments","acceptors":[{"state":"success","matcher":"pathAll","argument":"Environments[].Status","expected":"Ready"},{"state":"retry","matcher":"pathAll","argument":"Environments[].Status","expected":"Updating"}]},"EnvironmentTerminated":{"delay":20,"maxAttempts":20,"operation":"DescribeEnvironments","acceptors":[{"state":"success","matcher":"pathAll","argument":"Environments[].Status","expected":"Terminated"},{"state":"retry","matcher":"pathAll","argument":"Environments[].Status","expected":"Terminating"}]}}}

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['elb'] = {};
	AWS.ELB = Service.defineService('elb', ['2012-06-01']);
	Object.defineProperty(apiLoader.services['elb'], '2012-06-01', {
	  get: function get() {
	    var model = __webpack_require__(217);
	    model.paginators = __webpack_require__(218).pagination;
	    model.waiters = __webpack_require__(219).waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.ELB;


/***/ }),
/* 217 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2012-06-01","endpointPrefix":"elasticloadbalancing","protocol":"query","serviceFullName":"Elastic Load Balancing","serviceId":"Elastic Load Balancing","signatureVersion":"v4","uid":"elasticloadbalancing-2012-06-01","xmlNamespace":"http://elasticloadbalancing.amazonaws.com/doc/2012-06-01/"},"operations":{"AddTags":{"input":{"type":"structure","required":["LoadBalancerNames","Tags"],"members":{"LoadBalancerNames":{"shape":"S2"},"Tags":{"shape":"S4"}}},"output":{"resultWrapper":"AddTagsResult","type":"structure","members":{}}},"ApplySecurityGroupsToLoadBalancer":{"input":{"type":"structure","required":["LoadBalancerName","SecurityGroups"],"members":{"LoadBalancerName":{},"SecurityGroups":{"shape":"Sa"}}},"output":{"resultWrapper":"ApplySecurityGroupsToLoadBalancerResult","type":"structure","members":{"SecurityGroups":{"shape":"Sa"}}}},"AttachLoadBalancerToSubnets":{"input":{"type":"structure","required":["LoadBalancerName","Subnets"],"members":{"LoadBalancerName":{},"Subnets":{"shape":"Se"}}},"output":{"resultWrapper":"AttachLoadBalancerToSubnetsResult","type":"structure","members":{"Subnets":{"shape":"Se"}}}},"ConfigureHealthCheck":{"input":{"type":"structure","required":["LoadBalancerName","HealthCheck"],"members":{"LoadBalancerName":{},"HealthCheck":{"shape":"Si"}}},"output":{"resultWrapper":"ConfigureHealthCheckResult","type":"structure","members":{"HealthCheck":{"shape":"Si"}}}},"CreateAppCookieStickinessPolicy":{"input":{"type":"structure","required":["LoadBalancerName","PolicyName","CookieName"],"members":{"LoadBalancerName":{},"PolicyName":{},"CookieName":{}}},"output":{"resultWrapper":"CreateAppCookieStickinessPolicyResult","type":"structure","members":{}}},"CreateLBCookieStickinessPolicy":{"input":{"type":"structure","required":["LoadBalancerName","PolicyName"],"members":{"LoadBalancerName":{},"PolicyName":{},"CookieExpirationPeriod":{"type":"long"}}},"output":{"resultWrapper":"CreateLBCookieStickinessPolicyResult","type":"structure","members":{}}},"CreateLoadBalancer":{"input":{"type":"structure","required":["LoadBalancerName","Listeners"],"members":{"LoadBalancerName":{},"Listeners":{"shape":"Sx"},"AvailabilityZones":{"shape":"S13"},"Subnets":{"shape":"Se"},"SecurityGroups":{"shape":"Sa"},"Scheme":{},"Tags":{"shape":"S4"}}},"output":{"resultWrapper":"CreateLoadBalancerResult","type":"structure","members":{"DNSName":{}}}},"CreateLoadBalancerListeners":{"input":{"type":"structure","required":["LoadBalancerName","Listeners"],"members":{"LoadBalancerName":{},"Listeners":{"shape":"Sx"}}},"output":{"resultWrapper":"CreateLoadBalancerListenersResult","type":"structure","members":{}}},"CreateLoadBalancerPolicy":{"input":{"type":"structure","required":["LoadBalancerName","PolicyName","PolicyTypeName"],"members":{"LoadBalancerName":{},"PolicyName":{},"PolicyTypeName":{},"PolicyAttributes":{"type":"list","member":{"type":"structure","members":{"AttributeName":{},"AttributeValue":{}}}}}},"output":{"resultWrapper":"CreateLoadBalancerPolicyResult","type":"structure","members":{}}},"DeleteLoadBalancer":{"input":{"type":"structure","required":["LoadBalancerName"],"members":{"LoadBalancerName":{}}},"output":{"resultWrapper":"DeleteLoadBalancerResult","type":"structure","members":{}}},"DeleteLoadBalancerListeners":{"input":{"type":"structure","required":["LoadBalancerName","LoadBalancerPorts"],"members":{"LoadBalancerName":{},"LoadBalancerPorts":{"type":"list","member":{"type":"integer"}}}},"output":{"resultWrapper":"DeleteLoadBalancerListenersResult","type":"structure","members":{}}},"DeleteLoadBalancerPolicy":{"input":{"type":"structure","required":["LoadBalancerName","PolicyName"],"members":{"LoadBalancerName":{},"PolicyName":{}}},"output":{"resultWrapper":"DeleteLoadBalancerPolicyResult","type":"structure","members":{}}},"DeregisterInstancesFromLoadBalancer":{"input":{"type":"structure","required":["LoadBalancerName","Instances"],"members":{"LoadBalancerName":{},"Instances":{"shape":"S1p"}}},"output":{"resultWrapper":"DeregisterInstancesFromLoadBalancerResult","type":"structure","members":{"Instances":{"shape":"S1p"}}}},"DescribeAccountLimits":{"input":{"type":"structure","members":{"Marker":{},"PageSize":{"type":"integer"}}},"output":{"resultWrapper":"DescribeAccountLimitsResult","type":"structure","members":{"Limits":{"type":"list","member":{"type":"structure","members":{"Name":{},"Max":{}}}},"NextMarker":{}}}},"DescribeInstanceHealth":{"input":{"type":"structure","required":["LoadBalancerName"],"members":{"LoadBalancerName":{},"Instances":{"shape":"S1p"}}},"output":{"resultWrapper":"DescribeInstanceHealthResult","type":"structure","members":{"InstanceStates":{"type":"list","member":{"type":"structure","members":{"InstanceId":{},"State":{},"ReasonCode":{},"Description":{}}}}}}},"DescribeLoadBalancerAttributes":{"input":{"type":"structure","required":["LoadBalancerName"],"members":{"LoadBalancerName":{}}},"output":{"resultWrapper":"DescribeLoadBalancerAttributesResult","type":"structure","members":{"LoadBalancerAttributes":{"shape":"S2a"}}}},"DescribeLoadBalancerPolicies":{"input":{"type":"structure","members":{"LoadBalancerName":{},"PolicyNames":{"shape":"S2s"}}},"output":{"resultWrapper":"DescribeLoadBalancerPoliciesResult","type":"structure","members":{"PolicyDescriptions":{"type":"list","member":{"type":"structure","members":{"PolicyName":{},"PolicyTypeName":{},"PolicyAttributeDescriptions":{"type":"list","member":{"type":"structure","members":{"AttributeName":{},"AttributeValue":{}}}}}}}}}},"DescribeLoadBalancerPolicyTypes":{"input":{"type":"structure","members":{"PolicyTypeNames":{"type":"list","member":{}}}},"output":{"resultWrapper":"DescribeLoadBalancerPolicyTypesResult","type":"structure","members":{"PolicyTypeDescriptions":{"type":"list","member":{"type":"structure","members":{"PolicyTypeName":{},"Description":{},"PolicyAttributeTypeDescriptions":{"type":"list","member":{"type":"structure","members":{"AttributeName":{},"AttributeType":{},"Description":{},"DefaultValue":{},"Cardinality":{}}}}}}}}}},"DescribeLoadBalancers":{"input":{"type":"structure","members":{"LoadBalancerNames":{"shape":"S2"},"Marker":{},"PageSize":{"type":"integer"}}},"output":{"resultWrapper":"DescribeLoadBalancersResult","type":"structure","members":{"LoadBalancerDescriptions":{"type":"list","member":{"type":"structure","members":{"LoadBalancerName":{},"DNSName":{},"CanonicalHostedZoneName":{},"CanonicalHostedZoneNameID":{},"ListenerDescriptions":{"type":"list","member":{"type":"structure","members":{"Listener":{"shape":"Sy"},"PolicyNames":{"shape":"S2s"}}}},"Policies":{"type":"structure","members":{"AppCookieStickinessPolicies":{"type":"list","member":{"type":"structure","members":{"PolicyName":{},"CookieName":{}}}},"LBCookieStickinessPolicies":{"type":"list","member":{"type":"structure","members":{"PolicyName":{},"CookieExpirationPeriod":{"type":"long"}}}},"OtherPolicies":{"shape":"S2s"}}},"BackendServerDescriptions":{"type":"list","member":{"type":"structure","members":{"InstancePort":{"type":"integer"},"PolicyNames":{"shape":"S2s"}}}},"AvailabilityZones":{"shape":"S13"},"Subnets":{"shape":"Se"},"VPCId":{},"Instances":{"shape":"S1p"},"HealthCheck":{"shape":"Si"},"SourceSecurityGroup":{"type":"structure","members":{"OwnerAlias":{},"GroupName":{}}},"SecurityGroups":{"shape":"Sa"},"CreatedTime":{"type":"timestamp"},"Scheme":{}}}},"NextMarker":{}}}},"DescribeTags":{"input":{"type":"structure","required":["LoadBalancerNames"],"members":{"LoadBalancerNames":{"type":"list","member":{}}}},"output":{"resultWrapper":"DescribeTagsResult","type":"structure","members":{"TagDescriptions":{"type":"list","member":{"type":"structure","members":{"LoadBalancerName":{},"Tags":{"shape":"S4"}}}}}}},"DetachLoadBalancerFromSubnets":{"input":{"type":"structure","required":["LoadBalancerName","Subnets"],"members":{"LoadBalancerName":{},"Subnets":{"shape":"Se"}}},"output":{"resultWrapper":"DetachLoadBalancerFromSubnetsResult","type":"structure","members":{"Subnets":{"shape":"Se"}}}},"DisableAvailabilityZonesForLoadBalancer":{"input":{"type":"structure","required":["LoadBalancerName","AvailabilityZones"],"members":{"LoadBalancerName":{},"AvailabilityZones":{"shape":"S13"}}},"output":{"resultWrapper":"DisableAvailabilityZonesForLoadBalancerResult","type":"structure","members":{"AvailabilityZones":{"shape":"S13"}}}},"EnableAvailabilityZonesForLoadBalancer":{"input":{"type":"structure","required":["LoadBalancerName","AvailabilityZones"],"members":{"LoadBalancerName":{},"AvailabilityZones":{"shape":"S13"}}},"output":{"resultWrapper":"EnableAvailabilityZonesForLoadBalancerResult","type":"structure","members":{"AvailabilityZones":{"shape":"S13"}}}},"ModifyLoadBalancerAttributes":{"input":{"type":"structure","required":["LoadBalancerName","LoadBalancerAttributes"],"members":{"LoadBalancerName":{},"LoadBalancerAttributes":{"shape":"S2a"}}},"output":{"resultWrapper":"ModifyLoadBalancerAttributesResult","type":"structure","members":{"LoadBalancerName":{},"LoadBalancerAttributes":{"shape":"S2a"}}}},"RegisterInstancesWithLoadBalancer":{"input":{"type":"structure","required":["LoadBalancerName","Instances"],"members":{"LoadBalancerName":{},"Instances":{"shape":"S1p"}}},"output":{"resultWrapper":"RegisterInstancesWithLoadBalancerResult","type":"structure","members":{"Instances":{"shape":"S1p"}}}},"RemoveTags":{"input":{"type":"structure","required":["LoadBalancerNames","Tags"],"members":{"LoadBalancerNames":{"shape":"S2"},"Tags":{"type":"list","member":{"type":"structure","members":{"Key":{}}}}}},"output":{"resultWrapper":"RemoveTagsResult","type":"structure","members":{}}},"SetLoadBalancerListenerSSLCertificate":{"input":{"type":"structure","required":["LoadBalancerName","LoadBalancerPort","SSLCertificateId"],"members":{"LoadBalancerName":{},"LoadBalancerPort":{"type":"integer"},"SSLCertificateId":{}}},"output":{"resultWrapper":"SetLoadBalancerListenerSSLCertificateResult","type":"structure","members":{}}},"SetLoadBalancerPoliciesForBackendServer":{"input":{"type":"structure","required":["LoadBalancerName","InstancePort","PolicyNames"],"members":{"LoadBalancerName":{},"InstancePort":{"type":"integer"},"PolicyNames":{"shape":"S2s"}}},"output":{"resultWrapper":"SetLoadBalancerPoliciesForBackendServerResult","type":"structure","members":{}}},"SetLoadBalancerPoliciesOfListener":{"input":{"type":"structure","required":["LoadBalancerName","LoadBalancerPort","PolicyNames"],"members":{"LoadBalancerName":{},"LoadBalancerPort":{"type":"integer"},"PolicyNames":{"shape":"S2s"}}},"output":{"resultWrapper":"SetLoadBalancerPoliciesOfListenerResult","type":"structure","members":{}}}},"shapes":{"S2":{"type":"list","member":{}},"S4":{"type":"list","member":{"type":"structure","required":["Key"],"members":{"Key":{},"Value":{}}}},"Sa":{"type":"list","member":{}},"Se":{"type":"list","member":{}},"Si":{"type":"structure","required":["Target","Interval","Timeout","UnhealthyThreshold","HealthyThreshold"],"members":{"Target":{},"Interval":{"type":"integer"},"Timeout":{"type":"integer"},"UnhealthyThreshold":{"type":"integer"},"HealthyThreshold":{"type":"integer"}}},"Sx":{"type":"list","member":{"shape":"Sy"}},"Sy":{"type":"structure","required":["Protocol","LoadBalancerPort","InstancePort"],"members":{"Protocol":{},"LoadBalancerPort":{"type":"integer"},"InstanceProtocol":{},"InstancePort":{"type":"integer"},"SSLCertificateId":{}}},"S13":{"type":"list","member":{}},"S1p":{"type":"list","member":{"type":"structure","members":{"InstanceId":{}}}},"S2a":{"type":"structure","members":{"CrossZoneLoadBalancing":{"type":"structure","required":["Enabled"],"members":{"Enabled":{"type":"boolean"}}},"AccessLog":{"type":"structure","required":["Enabled"],"members":{"Enabled":{"type":"boolean"},"S3BucketName":{},"EmitInterval":{"type":"integer"},"S3BucketPrefix":{}}},"ConnectionDraining":{"type":"structure","required":["Enabled"],"members":{"Enabled":{"type":"boolean"},"Timeout":{"type":"integer"}}},"ConnectionSettings":{"type":"structure","required":["IdleTimeout"],"members":{"IdleTimeout":{"type":"integer"}}},"AdditionalAttributes":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{}}}}}},"S2s":{"type":"list","member":{}}}}

/***/ }),
/* 218 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeInstanceHealth":{"result_key":"InstanceStates"},"DescribeLoadBalancerPolicies":{"result_key":"PolicyDescriptions"},"DescribeLoadBalancerPolicyTypes":{"result_key":"PolicyTypeDescriptions"},"DescribeLoadBalancers":{"input_token":"Marker","output_token":"NextMarker","result_key":"LoadBalancerDescriptions"}}}

/***/ }),
/* 219 */
/***/ (function(module, exports) {

	module.exports = {"version":2,"waiters":{"InstanceDeregistered":{"delay":15,"operation":"DescribeInstanceHealth","maxAttempts":40,"acceptors":[{"expected":"OutOfService","matcher":"pathAll","state":"success","argument":"InstanceStates[].State"},{"matcher":"error","expected":"InvalidInstance","state":"success"}]},"AnyInstanceInService":{"acceptors":[{"argument":"InstanceStates[].State","expected":"InService","matcher":"pathAny","state":"success"}],"delay":15,"maxAttempts":40,"operation":"DescribeInstanceHealth"},"InstanceInService":{"acceptors":[{"argument":"InstanceStates[].State","expected":"InService","matcher":"pathAll","state":"success"},{"matcher":"error","expected":"InvalidInstance","state":"retry"}],"delay":15,"maxAttempts":40,"operation":"DescribeInstanceHealth"}}}

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['elbv2'] = {};
	AWS.ELBv2 = Service.defineService('elbv2', ['2015-12-01']);
	Object.defineProperty(apiLoader.services['elbv2'], '2015-12-01', {
	  get: function get() {
	    var model = __webpack_require__(221);
	    model.paginators = __webpack_require__(222).pagination;
	    model.waiters = __webpack_require__(223).waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.ELBv2;


/***/ }),
/* 221 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-12-01","endpointPrefix":"elasticloadbalancing","protocol":"query","serviceAbbreviation":"Elastic Load Balancing v2","serviceFullName":"Elastic Load Balancing","serviceId":"Elastic Load Balancing v2","signatureVersion":"v4","uid":"elasticloadbalancingv2-2015-12-01","xmlNamespace":"http://elasticloadbalancing.amazonaws.com/doc/2015-12-01/"},"operations":{"AddListenerCertificates":{"input":{"type":"structure","required":["ListenerArn","Certificates"],"members":{"ListenerArn":{},"Certificates":{"shape":"S3"}}},"output":{"resultWrapper":"AddListenerCertificatesResult","type":"structure","members":{"Certificates":{"shape":"S3"}}}},"AddTags":{"input":{"type":"structure","required":["ResourceArns","Tags"],"members":{"ResourceArns":{"shape":"S9"},"Tags":{"shape":"Sb"}}},"output":{"resultWrapper":"AddTagsResult","type":"structure","members":{}}},"CreateListener":{"input":{"type":"structure","required":["LoadBalancerArn","DefaultActions"],"members":{"LoadBalancerArn":{},"Protocol":{},"Port":{"type":"integer"},"SslPolicy":{},"Certificates":{"shape":"S3"},"DefaultActions":{"shape":"Sl"},"AlpnPolicy":{"shape":"S1y"},"Tags":{"shape":"Sb"}}},"output":{"resultWrapper":"CreateListenerResult","type":"structure","members":{"Listeners":{"shape":"S21"}}}},"CreateLoadBalancer":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"Subnets":{"shape":"S25"},"SubnetMappings":{"shape":"S27"},"SecurityGroups":{"shape":"S2c"},"Scheme":{},"Tags":{"shape":"Sb"},"Type":{},"IpAddressType":{},"CustomerOwnedIpv4Pool":{}}},"output":{"resultWrapper":"CreateLoadBalancerResult","type":"structure","members":{"LoadBalancers":{"shape":"S2j"}}}},"CreateRule":{"input":{"type":"structure","required":["ListenerArn","Conditions","Priority","Actions"],"members":{"ListenerArn":{},"Conditions":{"shape":"S30"},"Priority":{"type":"integer"},"Actions":{"shape":"Sl"},"Tags":{"shape":"Sb"}}},"output":{"resultWrapper":"CreateRuleResult","type":"structure","members":{"Rules":{"shape":"S3g"}}}},"CreateTargetGroup":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"Protocol":{},"ProtocolVersion":{},"Port":{"type":"integer"},"VpcId":{},"HealthCheckProtocol":{},"HealthCheckPort":{},"HealthCheckEnabled":{"type":"boolean"},"HealthCheckPath":{},"HealthCheckIntervalSeconds":{"type":"integer"},"HealthCheckTimeoutSeconds":{"type":"integer"},"HealthyThresholdCount":{"type":"integer"},"UnhealthyThresholdCount":{"type":"integer"},"Matcher":{"shape":"S3u"},"TargetType":{},"Tags":{"shape":"Sb"}}},"output":{"resultWrapper":"CreateTargetGroupResult","type":"structure","members":{"TargetGroups":{"shape":"S3z"}}}},"DeleteListener":{"input":{"type":"structure","required":["ListenerArn"],"members":{"ListenerArn":{}}},"output":{"resultWrapper":"DeleteListenerResult","type":"structure","members":{}}},"DeleteLoadBalancer":{"input":{"type":"structure","required":["LoadBalancerArn"],"members":{"LoadBalancerArn":{}}},"output":{"resultWrapper":"DeleteLoadBalancerResult","type":"structure","members":{}}},"DeleteRule":{"input":{"type":"structure","required":["RuleArn"],"members":{"RuleArn":{}}},"output":{"resultWrapper":"DeleteRuleResult","type":"structure","members":{}}},"DeleteTargetGroup":{"input":{"type":"structure","required":["TargetGroupArn"],"members":{"TargetGroupArn":{}}},"output":{"resultWrapper":"DeleteTargetGroupResult","type":"structure","members":{}}},"DeregisterTargets":{"input":{"type":"structure","required":["TargetGroupArn","Targets"],"members":{"TargetGroupArn":{},"Targets":{"shape":"S4b"}}},"output":{"resultWrapper":"DeregisterTargetsResult","type":"structure","members":{}}},"DescribeAccountLimits":{"input":{"type":"structure","members":{"Marker":{},"PageSize":{"type":"integer"}}},"output":{"resultWrapper":"DescribeAccountLimitsResult","type":"structure","members":{"Limits":{"type":"list","member":{"type":"structure","members":{"Name":{},"Max":{}}}},"NextMarker":{}}}},"DescribeListenerCertificates":{"input":{"type":"structure","required":["ListenerArn"],"members":{"ListenerArn":{},"Marker":{},"PageSize":{"type":"integer"}}},"output":{"resultWrapper":"DescribeListenerCertificatesResult","type":"structure","members":{"Certificates":{"shape":"S3"},"NextMarker":{}}}},"DescribeListeners":{"input":{"type":"structure","members":{"LoadBalancerArn":{},"ListenerArns":{"type":"list","member":{}},"Marker":{},"PageSize":{"type":"integer"}}},"output":{"resultWrapper":"DescribeListenersResult","type":"structure","members":{"Listeners":{"shape":"S21"},"NextMarker":{}}}},"DescribeLoadBalancerAttributes":{"input":{"type":"structure","required":["LoadBalancerArn"],"members":{"LoadBalancerArn":{}}},"output":{"resultWrapper":"DescribeLoadBalancerAttributesResult","type":"structure","members":{"Attributes":{"shape":"S4u"}}}},"DescribeLoadBalancers":{"input":{"type":"structure","members":{"LoadBalancerArns":{"shape":"S41"},"Names":{"type":"list","member":{}},"Marker":{},"PageSize":{"type":"integer"}}},"output":{"resultWrapper":"DescribeLoadBalancersResult","type":"structure","members":{"LoadBalancers":{"shape":"S2j"},"NextMarker":{}}}},"DescribeRules":{"input":{"type":"structure","members":{"ListenerArn":{},"RuleArns":{"type":"list","member":{}},"Marker":{},"PageSize":{"type":"integer"}}},"output":{"resultWrapper":"DescribeRulesResult","type":"structure","members":{"Rules":{"shape":"S3g"},"NextMarker":{}}}},"DescribeSSLPolicies":{"input":{"type":"structure","members":{"Names":{"type":"list","member":{}},"Marker":{},"PageSize":{"type":"integer"}}},"output":{"resultWrapper":"DescribeSSLPoliciesResult","type":"structure","members":{"SslPolicies":{"type":"list","member":{"type":"structure","members":{"SslProtocols":{"type":"list","member":{}},"Ciphers":{"type":"list","member":{"type":"structure","members":{"Name":{},"Priority":{"type":"integer"}}}},"Name":{}}}},"NextMarker":{}}}},"DescribeTags":{"input":{"type":"structure","required":["ResourceArns"],"members":{"ResourceArns":{"shape":"S9"}}},"output":{"resultWrapper":"DescribeTagsResult","type":"structure","members":{"TagDescriptions":{"type":"list","member":{"type":"structure","members":{"ResourceArn":{},"Tags":{"shape":"Sb"}}}}}}},"DescribeTargetGroupAttributes":{"input":{"type":"structure","required":["TargetGroupArn"],"members":{"TargetGroupArn":{}}},"output":{"resultWrapper":"DescribeTargetGroupAttributesResult","type":"structure","members":{"Attributes":{"shape":"S5l"}}}},"DescribeTargetGroups":{"input":{"type":"structure","members":{"LoadBalancerArn":{},"TargetGroupArns":{"type":"list","member":{}},"Names":{"type":"list","member":{}},"Marker":{},"PageSize":{"type":"integer"}}},"output":{"resultWrapper":"DescribeTargetGroupsResult","type":"structure","members":{"TargetGroups":{"shape":"S3z"},"NextMarker":{}}}},"DescribeTargetHealth":{"input":{"type":"structure","required":["TargetGroupArn"],"members":{"TargetGroupArn":{},"Targets":{"shape":"S4b"}}},"output":{"resultWrapper":"DescribeTargetHealthResult","type":"structure","members":{"TargetHealthDescriptions":{"type":"list","member":{"type":"structure","members":{"Target":{"shape":"S4c"},"HealthCheckPort":{},"TargetHealth":{"type":"structure","members":{"State":{},"Reason":{},"Description":{}}}}}}}}},"ModifyListener":{"input":{"type":"structure","required":["ListenerArn"],"members":{"ListenerArn":{},"Port":{"type":"integer"},"Protocol":{},"SslPolicy":{},"Certificates":{"shape":"S3"},"DefaultActions":{"shape":"Sl"},"AlpnPolicy":{"shape":"S1y"}}},"output":{"resultWrapper":"ModifyListenerResult","type":"structure","members":{"Listeners":{"shape":"S21"}}}},"ModifyLoadBalancerAttributes":{"input":{"type":"structure","required":["LoadBalancerArn","Attributes"],"members":{"LoadBalancerArn":{},"Attributes":{"shape":"S4u"}}},"output":{"resultWrapper":"ModifyLoadBalancerAttributesResult","type":"structure","members":{"Attributes":{"shape":"S4u"}}}},"ModifyRule":{"input":{"type":"structure","required":["RuleArn"],"members":{"RuleArn":{},"Conditions":{"shape":"S30"},"Actions":{"shape":"Sl"}}},"output":{"resultWrapper":"ModifyRuleResult","type":"structure","members":{"Rules":{"shape":"S3g"}}}},"ModifyTargetGroup":{"input":{"type":"structure","required":["TargetGroupArn"],"members":{"TargetGroupArn":{},"HealthCheckProtocol":{},"HealthCheckPort":{},"HealthCheckPath":{},"HealthCheckEnabled":{"type":"boolean"},"HealthCheckIntervalSeconds":{"type":"integer"},"HealthCheckTimeoutSeconds":{"type":"integer"},"HealthyThresholdCount":{"type":"integer"},"UnhealthyThresholdCount":{"type":"integer"},"Matcher":{"shape":"S3u"}}},"output":{"resultWrapper":"ModifyTargetGroupResult","type":"structure","members":{"TargetGroups":{"shape":"S3z"}}}},"ModifyTargetGroupAttributes":{"input":{"type":"structure","required":["TargetGroupArn","Attributes"],"members":{"TargetGroupArn":{},"Attributes":{"shape":"S5l"}}},"output":{"resultWrapper":"ModifyTargetGroupAttributesResult","type":"structure","members":{"Attributes":{"shape":"S5l"}}}},"RegisterTargets":{"input":{"type":"structure","required":["TargetGroupArn","Targets"],"members":{"TargetGroupArn":{},"Targets":{"shape":"S4b"}}},"output":{"resultWrapper":"RegisterTargetsResult","type":"structure","members":{}}},"RemoveListenerCertificates":{"input":{"type":"structure","required":["ListenerArn","Certificates"],"members":{"ListenerArn":{},"Certificates":{"shape":"S3"}}},"output":{"resultWrapper":"RemoveListenerCertificatesResult","type":"structure","members":{}}},"RemoveTags":{"input":{"type":"structure","required":["ResourceArns","TagKeys"],"members":{"ResourceArns":{"shape":"S9"},"TagKeys":{"type":"list","member":{}}}},"output":{"resultWrapper":"RemoveTagsResult","type":"structure","members":{}}},"SetIpAddressType":{"input":{"type":"structure","required":["LoadBalancerArn","IpAddressType"],"members":{"LoadBalancerArn":{},"IpAddressType":{}}},"output":{"resultWrapper":"SetIpAddressTypeResult","type":"structure","members":{"IpAddressType":{}}}},"SetRulePriorities":{"input":{"type":"structure","required":["RulePriorities"],"members":{"RulePriorities":{"type":"list","member":{"type":"structure","members":{"RuleArn":{},"Priority":{"type":"integer"}}}}}},"output":{"resultWrapper":"SetRulePrioritiesResult","type":"structure","members":{"Rules":{"shape":"S3g"}}}},"SetSecurityGroups":{"input":{"type":"structure","required":["LoadBalancerArn","SecurityGroups"],"members":{"LoadBalancerArn":{},"SecurityGroups":{"shape":"S2c"}}},"output":{"resultWrapper":"SetSecurityGroupsResult","type":"structure","members":{"SecurityGroupIds":{"shape":"S2c"}}}},"SetSubnets":{"input":{"type":"structure","required":["LoadBalancerArn"],"members":{"LoadBalancerArn":{},"Subnets":{"shape":"S25"},"SubnetMappings":{"shape":"S27"},"IpAddressType":{}}},"output":{"resultWrapper":"SetSubnetsResult","type":"structure","members":{"AvailabilityZones":{"shape":"S2s"},"IpAddressType":{}}}}},"shapes":{"S3":{"type":"list","member":{"type":"structure","members":{"CertificateArn":{},"IsDefault":{"type":"boolean"}}}},"S9":{"type":"list","member":{}},"Sb":{"type":"list","member":{"type":"structure","required":["Key"],"members":{"Key":{},"Value":{}}}},"Sl":{"type":"list","member":{"type":"structure","required":["Type"],"members":{"Type":{},"TargetGroupArn":{},"AuthenticateOidcConfig":{"type":"structure","required":["Issuer","AuthorizationEndpoint","TokenEndpoint","UserInfoEndpoint","ClientId"],"members":{"Issuer":{},"AuthorizationEndpoint":{},"TokenEndpoint":{},"UserInfoEndpoint":{},"ClientId":{},"ClientSecret":{},"SessionCookieName":{},"Scope":{},"SessionTimeout":{"type":"long"},"AuthenticationRequestExtraParams":{"type":"map","key":{},"value":{}},"OnUnauthenticatedRequest":{},"UseExistingClientSecret":{"type":"boolean"}}},"AuthenticateCognitoConfig":{"type":"structure","required":["UserPoolArn","UserPoolClientId","UserPoolDomain"],"members":{"UserPoolArn":{},"UserPoolClientId":{},"UserPoolDomain":{},"SessionCookieName":{},"Scope":{},"SessionTimeout":{"type":"long"},"AuthenticationRequestExtraParams":{"type":"map","key":{},"value":{}},"OnUnauthenticatedRequest":{}}},"Order":{"type":"integer"},"RedirectConfig":{"type":"structure","required":["StatusCode"],"members":{"Protocol":{},"Port":{},"Host":{},"Path":{},"Query":{},"StatusCode":{}}},"FixedResponseConfig":{"type":"structure","required":["StatusCode"],"members":{"MessageBody":{},"StatusCode":{},"ContentType":{}}},"ForwardConfig":{"type":"structure","members":{"TargetGroups":{"type":"list","member":{"type":"structure","members":{"TargetGroupArn":{},"Weight":{"type":"integer"}}}},"TargetGroupStickinessConfig":{"type":"structure","members":{"Enabled":{"type":"boolean"},"DurationSeconds":{"type":"integer"}}}}}}}},"S1y":{"type":"list","member":{}},"S21":{"type":"list","member":{"type":"structure","members":{"ListenerArn":{},"LoadBalancerArn":{},"Port":{"type":"integer"},"Protocol":{},"Certificates":{"shape":"S3"},"SslPolicy":{},"DefaultActions":{"shape":"Sl"},"AlpnPolicy":{"shape":"S1y"}}}},"S25":{"type":"list","member":{}},"S27":{"type":"list","member":{"type":"structure","members":{"SubnetId":{},"AllocationId":{},"PrivateIPv4Address":{},"IPv6Address":{}}}},"S2c":{"type":"list","member":{}},"S2j":{"type":"list","member":{"type":"structure","members":{"LoadBalancerArn":{},"DNSName":{},"CanonicalHostedZoneId":{},"CreatedTime":{"type":"timestamp"},"LoadBalancerName":{},"Scheme":{},"VpcId":{},"State":{"type":"structure","members":{"Code":{},"Reason":{}}},"Type":{},"AvailabilityZones":{"shape":"S2s"},"SecurityGroups":{"shape":"S2c"},"IpAddressType":{},"CustomerOwnedIpv4Pool":{}}}},"S2s":{"type":"list","member":{"type":"structure","members":{"ZoneName":{},"SubnetId":{},"OutpostId":{},"LoadBalancerAddresses":{"type":"list","member":{"type":"structure","members":{"IpAddress":{},"AllocationId":{},"PrivateIPv4Address":{},"IPv6Address":{}}}}}}},"S30":{"type":"list","member":{"type":"structure","members":{"Field":{},"Values":{"shape":"S33"},"HostHeaderConfig":{"type":"structure","members":{"Values":{"shape":"S33"}}},"PathPatternConfig":{"type":"structure","members":{"Values":{"shape":"S33"}}},"HttpHeaderConfig":{"type":"structure","members":{"HttpHeaderName":{},"Values":{"shape":"S33"}}},"QueryStringConfig":{"type":"structure","members":{"Values":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{}}}}}},"HttpRequestMethodConfig":{"type":"structure","members":{"Values":{"shape":"S33"}}},"SourceIpConfig":{"type":"structure","members":{"Values":{"shape":"S33"}}}}}},"S33":{"type":"list","member":{}},"S3g":{"type":"list","member":{"type":"structure","members":{"RuleArn":{},"Priority":{},"Conditions":{"shape":"S30"},"Actions":{"shape":"Sl"},"IsDefault":{"type":"boolean"}}}},"S3u":{"type":"structure","members":{"HttpCode":{},"GrpcCode":{}}},"S3z":{"type":"list","member":{"type":"structure","members":{"TargetGroupArn":{},"TargetGroupName":{},"Protocol":{},"Port":{"type":"integer"},"VpcId":{},"HealthCheckProtocol":{},"HealthCheckPort":{},"HealthCheckEnabled":{"type":"boolean"},"HealthCheckIntervalSeconds":{"type":"integer"},"HealthCheckTimeoutSeconds":{"type":"integer"},"HealthyThresholdCount":{"type":"integer"},"UnhealthyThresholdCount":{"type":"integer"},"HealthCheckPath":{},"Matcher":{"shape":"S3u"},"LoadBalancerArns":{"shape":"S41"},"TargetType":{},"ProtocolVersion":{}}}},"S41":{"type":"list","member":{}},"S4b":{"type":"list","member":{"shape":"S4c"}},"S4c":{"type":"structure","required":["Id"],"members":{"Id":{},"Port":{"type":"integer"},"AvailabilityZone":{}}},"S4u":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{}}}},"S5l":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{}}}}}}

/***/ }),
/* 222 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeListeners":{"input_token":"Marker","output_token":"NextMarker","result_key":"Listeners"},"DescribeLoadBalancers":{"input_token":"Marker","output_token":"NextMarker","result_key":"LoadBalancers"},"DescribeTargetGroups":{"input_token":"Marker","output_token":"NextMarker","result_key":"TargetGroups"}}}

/***/ }),
/* 223 */
/***/ (function(module, exports) {

	module.exports = {"version":2,"waiters":{"LoadBalancerExists":{"delay":15,"operation":"DescribeLoadBalancers","maxAttempts":40,"acceptors":[{"matcher":"status","expected":200,"state":"success"},{"matcher":"error","expected":"LoadBalancerNotFound","state":"retry"}]},"LoadBalancerAvailable":{"delay":15,"operation":"DescribeLoadBalancers","maxAttempts":40,"acceptors":[{"state":"success","matcher":"pathAll","argument":"LoadBalancers[].State.Code","expected":"active"},{"state":"retry","matcher":"pathAny","argument":"LoadBalancers[].State.Code","expected":"provisioning"},{"state":"retry","matcher":"error","expected":"LoadBalancerNotFound"}]},"LoadBalancersDeleted":{"delay":15,"operation":"DescribeLoadBalancers","maxAttempts":40,"acceptors":[{"state":"retry","matcher":"pathAll","argument":"LoadBalancers[].State.Code","expected":"active"},{"matcher":"error","expected":"LoadBalancerNotFound","state":"success"}]},"TargetInService":{"delay":15,"maxAttempts":40,"operation":"DescribeTargetHealth","acceptors":[{"argument":"TargetHealthDescriptions[].TargetHealth.State","expected":"healthy","matcher":"pathAll","state":"success"},{"matcher":"error","expected":"InvalidInstance","state":"retry"}]},"TargetDeregistered":{"delay":15,"maxAttempts":40,"operation":"DescribeTargetHealth","acceptors":[{"matcher":"error","expected":"InvalidTarget","state":"success"},{"argument":"TargetHealthDescriptions[].TargetHealth.State","expected":"unused","matcher":"pathAll","state":"success"}]}}}

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['emr'] = {};
	AWS.EMR = Service.defineService('emr', ['2009-03-31']);
	Object.defineProperty(apiLoader.services['emr'], '2009-03-31', {
	  get: function get() {
	    var model = __webpack_require__(225);
	    model.paginators = __webpack_require__(226).pagination;
	    model.waiters = __webpack_require__(227).waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.EMR;


/***/ }),
/* 225 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2009-03-31","endpointPrefix":"elasticmapreduce","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"Amazon EMR","serviceFullName":"Amazon Elastic MapReduce","serviceId":"EMR","signatureVersion":"v4","targetPrefix":"ElasticMapReduce","uid":"elasticmapreduce-2009-03-31"},"operations":{"AddInstanceFleet":{"input":{"type":"structure","required":["ClusterId","InstanceFleet"],"members":{"ClusterId":{},"InstanceFleet":{"shape":"S3"}}},"output":{"type":"structure","members":{"ClusterId":{},"InstanceFleetId":{},"ClusterArn":{}}}},"AddInstanceGroups":{"input":{"type":"structure","required":["InstanceGroups","JobFlowId"],"members":{"InstanceGroups":{"shape":"Sx"},"JobFlowId":{}}},"output":{"type":"structure","members":{"JobFlowId":{},"InstanceGroupIds":{"type":"list","member":{}},"ClusterArn":{}}}},"AddJobFlowSteps":{"input":{"type":"structure","required":["JobFlowId","Steps"],"members":{"JobFlowId":{},"Steps":{"shape":"S1i"}}},"output":{"type":"structure","members":{"StepIds":{"shape":"S1r"}}}},"AddTags":{"input":{"type":"structure","required":["ResourceId","Tags"],"members":{"ResourceId":{},"Tags":{"shape":"S1u"}}},"output":{"type":"structure","members":{}}},"CancelSteps":{"input":{"type":"structure","required":["ClusterId","StepIds"],"members":{"ClusterId":{},"StepIds":{"shape":"S1r"},"StepCancellationOption":{}}},"output":{"type":"structure","members":{"CancelStepsInfoList":{"type":"list","member":{"type":"structure","members":{"StepId":{},"Status":{},"Reason":{}}}}}}},"CreateSecurityConfiguration":{"input":{"type":"structure","required":["Name","SecurityConfiguration"],"members":{"Name":{},"SecurityConfiguration":{}}},"output":{"type":"structure","required":["Name","CreationDateTime"],"members":{"Name":{},"CreationDateTime":{"type":"timestamp"}}}},"CreateStudio":{"input":{"type":"structure","required":["Name","AuthMode","VpcId","SubnetIds","ServiceRole","UserRole","WorkspaceSecurityGroupId","EngineSecurityGroupId","DefaultS3Location"],"members":{"Name":{},"Description":{},"AuthMode":{},"VpcId":{},"SubnetIds":{"shape":"S29"},"ServiceRole":{},"UserRole":{},"WorkspaceSecurityGroupId":{},"EngineSecurityGroupId":{},"DefaultS3Location":{},"Tags":{"shape":"S1u"}}},"output":{"type":"structure","members":{"StudioId":{},"Url":{}}}},"CreateStudioSessionMapping":{"input":{"type":"structure","required":["StudioId","IdentityType","SessionPolicyArn"],"members":{"StudioId":{},"IdentityId":{},"IdentityName":{},"IdentityType":{},"SessionPolicyArn":{}}}},"DeleteSecurityConfiguration":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{}}},"DeleteStudio":{"input":{"type":"structure","required":["StudioId"],"members":{"StudioId":{}}}},"DeleteStudioSessionMapping":{"input":{"type":"structure","required":["StudioId","IdentityType"],"members":{"StudioId":{},"IdentityId":{},"IdentityName":{},"IdentityType":{}}}},"DescribeCluster":{"input":{"type":"structure","required":["ClusterId"],"members":{"ClusterId":{}}},"output":{"type":"structure","members":{"Cluster":{"type":"structure","members":{"Id":{},"Name":{},"Status":{"shape":"S2l"},"Ec2InstanceAttributes":{"type":"structure","members":{"Ec2KeyName":{},"Ec2SubnetId":{},"RequestedEc2SubnetIds":{"shape":"S2r"},"Ec2AvailabilityZone":{},"RequestedEc2AvailabilityZones":{"shape":"S2r"},"IamInstanceProfile":{},"EmrManagedMasterSecurityGroup":{},"EmrManagedSlaveSecurityGroup":{},"ServiceAccessSecurityGroup":{},"AdditionalMasterSecurityGroups":{"shape":"S2s"},"AdditionalSlaveSecurityGroups":{"shape":"S2s"}}},"InstanceCollectionType":{},"LogUri":{},"LogEncryptionKmsKeyId":{},"RequestedAmiVersion":{},"RunningAmiVersion":{},"ReleaseLabel":{},"AutoTerminate":{"type":"boolean"},"TerminationProtected":{"type":"boolean"},"VisibleToAllUsers":{"type":"boolean"},"Applications":{"shape":"S2v"},"Tags":{"shape":"S1u"},"ServiceRole":{},"NormalizedInstanceHours":{"type":"integer"},"MasterPublicDnsName":{},"Configurations":{"shape":"Sh"},"SecurityConfiguration":{},"AutoScalingRole":{},"ScaleDownBehavior":{},"CustomAmiId":{},"EbsRootVolumeSize":{"type":"integer"},"RepoUpgradeOnBoot":{},"KerberosAttributes":{"shape":"S2z"},"ClusterArn":{},"OutpostArn":{},"StepConcurrencyLevel":{"type":"integer"},"PlacementGroups":{"shape":"S31"}}}}}},"DescribeJobFlows":{"input":{"type":"structure","members":{"CreatedAfter":{"type":"timestamp"},"CreatedBefore":{"type":"timestamp"},"JobFlowIds":{"shape":"S1p"},"JobFlowStates":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"JobFlows":{"type":"list","member":{"type":"structure","required":["JobFlowId","Name","ExecutionStatusDetail","Instances"],"members":{"JobFlowId":{},"Name":{},"LogUri":{},"LogEncryptionKmsKeyId":{},"AmiVersion":{},"ExecutionStatusDetail":{"type":"structure","required":["State","CreationDateTime"],"members":{"State":{},"CreationDateTime":{"type":"timestamp"},"StartDateTime":{"type":"timestamp"},"ReadyDateTime":{"type":"timestamp"},"EndDateTime":{"type":"timestamp"},"LastStateChangeReason":{}}},"Instances":{"type":"structure","required":["MasterInstanceType","SlaveInstanceType","InstanceCount"],"members":{"MasterInstanceType":{},"MasterPublicDnsName":{},"MasterInstanceId":{},"SlaveInstanceType":{},"InstanceCount":{"type":"integer"},"InstanceGroups":{"type":"list","member":{"type":"structure","required":["Market","InstanceRole","InstanceType","InstanceRequestCount","InstanceRunningCount","State","CreationDateTime"],"members":{"InstanceGroupId":{},"Name":{},"Market":{},"InstanceRole":{},"BidPrice":{},"InstanceType":{},"InstanceRequestCount":{"type":"integer"},"InstanceRunningCount":{"type":"integer"},"State":{},"LastStateChangeReason":{},"CreationDateTime":{"type":"timestamp"},"StartDateTime":{"type":"timestamp"},"ReadyDateTime":{"type":"timestamp"},"EndDateTime":{"type":"timestamp"}}}},"NormalizedInstanceHours":{"type":"integer"},"Ec2KeyName":{},"Ec2SubnetId":{},"Placement":{"shape":"S3f"},"KeepJobFlowAliveWhenNoSteps":{"type":"boolean"},"TerminationProtected":{"type":"boolean"},"HadoopVersion":{}}},"Steps":{"type":"list","member":{"type":"structure","required":["StepConfig","ExecutionStatusDetail"],"members":{"StepConfig":{"shape":"S1j"},"ExecutionStatusDetail":{"type":"structure","required":["State","CreationDateTime"],"members":{"State":{},"CreationDateTime":{"type":"timestamp"},"StartDateTime":{"type":"timestamp"},"EndDateTime":{"type":"timestamp"},"LastStateChangeReason":{}}}}}},"BootstrapActions":{"type":"list","member":{"type":"structure","members":{"BootstrapActionConfig":{"shape":"S3m"}}}},"SupportedProducts":{"shape":"S3o"},"VisibleToAllUsers":{"type":"boolean"},"JobFlowRole":{},"ServiceRole":{},"AutoScalingRole":{},"ScaleDownBehavior":{}}}}}},"deprecated":true},"DescribeNotebookExecution":{"input":{"type":"structure","required":["NotebookExecutionId"],"members":{"NotebookExecutionId":{}}},"output":{"type":"structure","members":{"NotebookExecution":{"type":"structure","members":{"NotebookExecutionId":{},"EditorId":{},"ExecutionEngine":{"shape":"S3s"},"NotebookExecutionName":{},"NotebookParams":{},"Status":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Arn":{},"OutputNotebookURI":{},"LastStateChangeReason":{},"NotebookInstanceSecurityGroupId":{},"Tags":{"shape":"S1u"}}}}}},"DescribeReleaseLabel":{"input":{"type":"structure","members":{"ReleaseLabel":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"ReleaseLabel":{},"Applications":{"type":"list","member":{"type":"structure","members":{"Name":{},"Version":{}}}},"NextToken":{}}}},"DescribeSecurityConfiguration":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{"Name":{},"SecurityConfiguration":{},"CreationDateTime":{"type":"timestamp"}}}},"DescribeStep":{"input":{"type":"structure","required":["ClusterId","StepId"],"members":{"ClusterId":{},"StepId":{}}},"output":{"type":"structure","members":{"Step":{"type":"structure","members":{"Id":{},"Name":{},"Config":{"shape":"S45"},"ActionOnFailure":{},"Status":{"shape":"S46"}}}}}},"DescribeStudio":{"input":{"type":"structure","required":["StudioId"],"members":{"StudioId":{}}},"output":{"type":"structure","members":{"Studio":{"type":"structure","members":{"StudioId":{},"StudioArn":{},"Name":{},"Description":{},"AuthMode":{},"VpcId":{},"SubnetIds":{"shape":"S29"},"ServiceRole":{},"UserRole":{},"WorkspaceSecurityGroupId":{},"EngineSecurityGroupId":{},"Url":{},"CreationTime":{"type":"timestamp"},"DefaultS3Location":{},"Tags":{"shape":"S1u"}}}}}},"GetBlockPublicAccessConfiguration":{"input":{"type":"structure","members":{}},"output":{"type":"structure","required":["BlockPublicAccessConfiguration","BlockPublicAccessConfigurationMetadata"],"members":{"BlockPublicAccessConfiguration":{"shape":"S4h"},"BlockPublicAccessConfigurationMetadata":{"type":"structure","required":["CreationDateTime","CreatedByArn"],"members":{"CreationDateTime":{"type":"timestamp"},"CreatedByArn":{}}}}}},"GetManagedScalingPolicy":{"input":{"type":"structure","required":["ClusterId"],"members":{"ClusterId":{}}},"output":{"type":"structure","members":{"ManagedScalingPolicy":{"shape":"S4o"}}}},"GetStudioSessionMapping":{"input":{"type":"structure","required":["StudioId","IdentityType"],"members":{"StudioId":{},"IdentityId":{},"IdentityName":{},"IdentityType":{}}},"output":{"type":"structure","members":{"SessionMapping":{"type":"structure","members":{"StudioId":{},"IdentityId":{},"IdentityName":{},"IdentityType":{},"SessionPolicyArn":{},"CreationTime":{"type":"timestamp"},"LastModifiedTime":{"type":"timestamp"}}}}}},"ListBootstrapActions":{"input":{"type":"structure","required":["ClusterId"],"members":{"ClusterId":{},"Marker":{}}},"output":{"type":"structure","members":{"BootstrapActions":{"type":"list","member":{"type":"structure","members":{"Name":{},"ScriptPath":{},"Args":{"shape":"S2s"}}}},"Marker":{}}}},"ListClusters":{"input":{"type":"structure","members":{"CreatedAfter":{"type":"timestamp"},"CreatedBefore":{"type":"timestamp"},"ClusterStates":{"type":"list","member":{}},"Marker":{}}},"output":{"type":"structure","members":{"Clusters":{"type":"list","member":{"type":"structure","members":{"Id":{},"Name":{},"Status":{"shape":"S2l"},"NormalizedInstanceHours":{"type":"integer"},"ClusterArn":{},"OutpostArn":{}}}},"Marker":{}}}},"ListInstanceFleets":{"input":{"type":"structure","required":["ClusterId"],"members":{"ClusterId":{},"Marker":{}}},"output":{"type":"structure","members":{"InstanceFleets":{"type":"list","member":{"type":"structure","members":{"Id":{},"Name":{},"Status":{"type":"structure","members":{"State":{},"StateChangeReason":{"type":"structure","members":{"Code":{},"Message":{}}},"Timeline":{"type":"structure","members":{"CreationDateTime":{"type":"timestamp"},"ReadyDateTime":{"type":"timestamp"},"EndDateTime":{"type":"timestamp"}}}}},"InstanceFleetType":{},"TargetOnDemandCapacity":{"type":"integer"},"TargetSpotCapacity":{"type":"integer"},"ProvisionedOnDemandCapacity":{"type":"integer"},"ProvisionedSpotCapacity":{"type":"integer"},"InstanceTypeSpecifications":{"type":"list","member":{"type":"structure","members":{"InstanceType":{},"WeightedCapacity":{"type":"integer"},"BidPrice":{},"BidPriceAsPercentageOfOnDemandPrice":{"type":"double"},"Configurations":{"shape":"Sh"},"EbsBlockDevices":{"shape":"S5f"},"EbsOptimized":{"type":"boolean"}}}},"LaunchSpecifications":{"shape":"Sk"}}}},"Marker":{}}}},"ListInstanceGroups":{"input":{"type":"structure","required":["ClusterId"],"members":{"ClusterId":{},"Marker":{}}},"output":{"type":"structure","members":{"InstanceGroups":{"type":"list","member":{"type":"structure","members":{"Id":{},"Name":{},"Market":{},"InstanceGroupType":{},"BidPrice":{},"InstanceType":{},"RequestedInstanceCount":{"type":"integer"},"RunningInstanceCount":{"type":"integer"},"Status":{"type":"structure","members":{"State":{},"StateChangeReason":{"type":"structure","members":{"Code":{},"Message":{}}},"Timeline":{"type":"structure","members":{"CreationDateTime":{"type":"timestamp"},"ReadyDateTime":{"type":"timestamp"},"EndDateTime":{"type":"timestamp"}}}}},"Configurations":{"shape":"Sh"},"ConfigurationsVersion":{"type":"long"},"LastSuccessfullyAppliedConfigurations":{"shape":"Sh"},"LastSuccessfullyAppliedConfigurationsVersion":{"type":"long"},"EbsBlockDevices":{"shape":"S5f"},"EbsOptimized":{"type":"boolean"},"ShrinkPolicy":{"shape":"S5s"},"AutoScalingPolicy":{"shape":"S5w"}}}},"Marker":{}}}},"ListInstances":{"input":{"type":"structure","required":["ClusterId"],"members":{"ClusterId":{},"InstanceGroupId":{},"InstanceGroupTypes":{"type":"list","member":{}},"InstanceFleetId":{},"InstanceFleetType":{},"InstanceStates":{"type":"list","member":{}},"Marker":{}}},"output":{"type":"structure","members":{"Instances":{"type":"list","member":{"type":"structure","members":{"Id":{},"Ec2InstanceId":{},"PublicDnsName":{},"PublicIpAddress":{},"PrivateDnsName":{},"PrivateIpAddress":{},"Status":{"type":"structure","members":{"State":{},"StateChangeReason":{"type":"structure","members":{"Code":{},"Message":{}}},"Timeline":{"type":"structure","members":{"CreationDateTime":{"type":"timestamp"},"ReadyDateTime":{"type":"timestamp"},"EndDateTime":{"type":"timestamp"}}}}},"InstanceGroupId":{},"InstanceFleetId":{},"Market":{},"InstanceType":{},"EbsVolumes":{"type":"list","member":{"type":"structure","members":{"Device":{},"VolumeId":{}}}}}}},"Marker":{}}}},"ListNotebookExecutions":{"input":{"type":"structure","members":{"EditorId":{},"Status":{},"From":{"type":"timestamp"},"To":{"type":"timestamp"},"Marker":{}}},"output":{"type":"structure","members":{"NotebookExecutions":{"type":"list","member":{"type":"structure","members":{"NotebookExecutionId":{},"EditorId":{},"NotebookExecutionName":{},"Status":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"}}}},"Marker":{}}}},"ListReleaseLabels":{"input":{"type":"structure","members":{"Filters":{"type":"structure","members":{"Prefix":{},"Application":{}}},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"ReleaseLabels":{"shape":"S2s"},"NextToken":{}}}},"ListSecurityConfigurations":{"input":{"type":"structure","members":{"Marker":{}}},"output":{"type":"structure","members":{"SecurityConfigurations":{"type":"list","member":{"type":"structure","members":{"Name":{},"CreationDateTime":{"type":"timestamp"}}}},"Marker":{}}}},"ListSteps":{"input":{"type":"structure","required":["ClusterId"],"members":{"ClusterId":{},"StepStates":{"type":"list","member":{}},"StepIds":{"shape":"S1p"},"Marker":{}}},"output":{"type":"structure","members":{"Steps":{"type":"list","member":{"type":"structure","members":{"Id":{},"Name":{},"Config":{"shape":"S45"},"ActionOnFailure":{},"Status":{"shape":"S46"}}}},"Marker":{}}}},"ListStudioSessionMappings":{"input":{"type":"structure","members":{"StudioId":{},"IdentityType":{},"Marker":{}}},"output":{"type":"structure","members":{"SessionMappings":{"type":"list","member":{"type":"structure","members":{"StudioId":{},"IdentityId":{},"IdentityName":{},"IdentityType":{},"SessionPolicyArn":{},"CreationTime":{"type":"timestamp"}}}},"Marker":{}}}},"ListStudios":{"input":{"type":"structure","members":{"Marker":{}}},"output":{"type":"structure","members":{"Studios":{"type":"list","member":{"type":"structure","members":{"StudioId":{},"Name":{},"VpcId":{},"Description":{},"Url":{},"CreationTime":{"type":"timestamp"}}}},"Marker":{}}}},"ModifyCluster":{"input":{"type":"structure","required":["ClusterId"],"members":{"ClusterId":{},"StepConcurrencyLevel":{"type":"integer"}}},"output":{"type":"structure","members":{"StepConcurrencyLevel":{"type":"integer"}}}},"ModifyInstanceFleet":{"input":{"type":"structure","required":["ClusterId","InstanceFleet"],"members":{"ClusterId":{},"InstanceFleet":{"type":"structure","required":["InstanceFleetId"],"members":{"InstanceFleetId":{},"TargetOnDemandCapacity":{"type":"integer"},"TargetSpotCapacity":{"type":"integer"}}}}}},"ModifyInstanceGroups":{"input":{"type":"structure","members":{"ClusterId":{},"InstanceGroups":{"type":"list","member":{"type":"structure","required":["InstanceGroupId"],"members":{"InstanceGroupId":{},"InstanceCount":{"type":"integer"},"EC2InstanceIdsToTerminate":{"type":"list","member":{}},"ShrinkPolicy":{"shape":"S5s"},"Configurations":{"shape":"Sh"}}}}}}},"PutAutoScalingPolicy":{"input":{"type":"structure","required":["ClusterId","InstanceGroupId","AutoScalingPolicy"],"members":{"ClusterId":{},"InstanceGroupId":{},"AutoScalingPolicy":{"shape":"S11"}}},"output":{"type":"structure","members":{"ClusterId":{},"InstanceGroupId":{},"AutoScalingPolicy":{"shape":"S5w"},"ClusterArn":{}}}},"PutBlockPublicAccessConfiguration":{"input":{"type":"structure","required":["BlockPublicAccessConfiguration"],"members":{"BlockPublicAccessConfiguration":{"shape":"S4h"}}},"output":{"type":"structure","members":{}}},"PutManagedScalingPolicy":{"input":{"type":"structure","required":["ClusterId","ManagedScalingPolicy"],"members":{"ClusterId":{},"ManagedScalingPolicy":{"shape":"S4o"}}},"output":{"type":"structure","members":{}}},"RemoveAutoScalingPolicy":{"input":{"type":"structure","required":["ClusterId","InstanceGroupId"],"members":{"ClusterId":{},"InstanceGroupId":{}}},"output":{"type":"structure","members":{}}},"RemoveManagedScalingPolicy":{"input":{"type":"structure","required":["ClusterId"],"members":{"ClusterId":{}}},"output":{"type":"structure","members":{}}},"RemoveTags":{"input":{"type":"structure","required":["ResourceId","TagKeys"],"members":{"ResourceId":{},"TagKeys":{"shape":"S2s"}}},"output":{"type":"structure","members":{}}},"RunJobFlow":{"input":{"type":"structure","required":["Name","Instances"],"members":{"Name":{},"LogUri":{},"LogEncryptionKmsKeyId":{},"AdditionalInfo":{},"AmiVersion":{},"ReleaseLabel":{},"Instances":{"type":"structure","members":{"MasterInstanceType":{},"SlaveInstanceType":{},"InstanceCount":{"type":"integer"},"InstanceGroups":{"shape":"Sx"},"InstanceFleets":{"type":"list","member":{"shape":"S3"}},"Ec2KeyName":{},"Placement":{"shape":"S3f"},"KeepJobFlowAliveWhenNoSteps":{"type":"boolean"},"TerminationProtected":{"type":"boolean"},"HadoopVersion":{},"Ec2SubnetId":{},"Ec2SubnetIds":{"shape":"S2r"},"EmrManagedMasterSecurityGroup":{},"EmrManagedSlaveSecurityGroup":{},"ServiceAccessSecurityGroup":{},"AdditionalMasterSecurityGroups":{"shape":"S7p"},"AdditionalSlaveSecurityGroups":{"shape":"S7p"}}},"Steps":{"shape":"S1i"},"BootstrapActions":{"type":"list","member":{"shape":"S3m"}},"SupportedProducts":{"shape":"S3o"},"NewSupportedProducts":{"type":"list","member":{"type":"structure","members":{"Name":{},"Args":{"shape":"S1p"}}}},"Applications":{"shape":"S2v"},"Configurations":{"shape":"Sh"},"VisibleToAllUsers":{"type":"boolean"},"JobFlowRole":{},"ServiceRole":{},"Tags":{"shape":"S1u"},"SecurityConfiguration":{},"AutoScalingRole":{},"ScaleDownBehavior":{},"CustomAmiId":{},"EbsRootVolumeSize":{"type":"integer"},"RepoUpgradeOnBoot":{},"KerberosAttributes":{"shape":"S2z"},"StepConcurrencyLevel":{"type":"integer"},"ManagedScalingPolicy":{"shape":"S4o"},"PlacementGroupConfigs":{"shape":"S31"}}},"output":{"type":"structure","members":{"JobFlowId":{},"ClusterArn":{}}}},"SetTerminationProtection":{"input":{"type":"structure","required":["JobFlowIds","TerminationProtected"],"members":{"JobFlowIds":{"shape":"S1p"},"TerminationProtected":{"type":"boolean"}}}},"SetVisibleToAllUsers":{"input":{"type":"structure","required":["JobFlowIds","VisibleToAllUsers"],"members":{"JobFlowIds":{"shape":"S1p"},"VisibleToAllUsers":{"type":"boolean"}}}},"StartNotebookExecution":{"input":{"type":"structure","required":["EditorId","RelativePath","ExecutionEngine","ServiceRole"],"members":{"EditorId":{},"RelativePath":{},"NotebookExecutionName":{},"NotebookParams":{},"ExecutionEngine":{"shape":"S3s"},"ServiceRole":{},"NotebookInstanceSecurityGroupId":{},"Tags":{"shape":"S1u"}}},"output":{"type":"structure","members":{"NotebookExecutionId":{}}}},"StopNotebookExecution":{"input":{"type":"structure","required":["NotebookExecutionId"],"members":{"NotebookExecutionId":{}}}},"TerminateJobFlows":{"input":{"type":"structure","required":["JobFlowIds"],"members":{"JobFlowIds":{"shape":"S1p"}}}},"UpdateStudio":{"input":{"type":"structure","required":["StudioId"],"members":{"StudioId":{},"Name":{},"Description":{},"SubnetIds":{"shape":"S29"},"DefaultS3Location":{}}}},"UpdateStudioSessionMapping":{"input":{"type":"structure","required":["StudioId","IdentityType","SessionPolicyArn"],"members":{"StudioId":{},"IdentityId":{},"IdentityName":{},"IdentityType":{},"SessionPolicyArn":{}}}}},"shapes":{"S3":{"type":"structure","required":["InstanceFleetType"],"members":{"Name":{},"InstanceFleetType":{},"TargetOnDemandCapacity":{"type":"integer"},"TargetSpotCapacity":{"type":"integer"},"InstanceTypeConfigs":{"type":"list","member":{"type":"structure","required":["InstanceType"],"members":{"InstanceType":{},"WeightedCapacity":{"type":"integer"},"BidPrice":{},"BidPriceAsPercentageOfOnDemandPrice":{"type":"double"},"EbsConfiguration":{"shape":"Sa"},"Configurations":{"shape":"Sh"}}}},"LaunchSpecifications":{"shape":"Sk"}}},"Sa":{"type":"structure","members":{"EbsBlockDeviceConfigs":{"type":"list","member":{"type":"structure","required":["VolumeSpecification"],"members":{"VolumeSpecification":{"shape":"Sd"},"VolumesPerInstance":{"type":"integer"}}}},"EbsOptimized":{"type":"boolean"}}},"Sd":{"type":"structure","required":["VolumeType","SizeInGB"],"members":{"VolumeType":{},"Iops":{"type":"integer"},"SizeInGB":{"type":"integer"}}},"Sh":{"type":"list","member":{"type":"structure","members":{"Classification":{},"Configurations":{"shape":"Sh"},"Properties":{"shape":"Sj"}}}},"Sj":{"type":"map","key":{},"value":{}},"Sk":{"type":"structure","members":{"SpotSpecification":{"type":"structure","required":["TimeoutDurationMinutes","TimeoutAction"],"members":{"TimeoutDurationMinutes":{"type":"integer"},"TimeoutAction":{},"BlockDurationMinutes":{"type":"integer"},"AllocationStrategy":{}}},"OnDemandSpecification":{"type":"structure","required":["AllocationStrategy"],"members":{"AllocationStrategy":{},"CapacityReservationOptions":{"type":"structure","members":{"UsageStrategy":{},"CapacityReservationPreference":{},"CapacityReservationResourceGroupArn":{}}}}}}},"Sx":{"type":"list","member":{"type":"structure","required":["InstanceRole","InstanceType","InstanceCount"],"members":{"Name":{},"Market":{},"InstanceRole":{},"BidPrice":{},"InstanceType":{},"InstanceCount":{"type":"integer"},"Configurations":{"shape":"Sh"},"EbsConfiguration":{"shape":"Sa"},"AutoScalingPolicy":{"shape":"S11"}}}},"S11":{"type":"structure","required":["Constraints","Rules"],"members":{"Constraints":{"shape":"S12"},"Rules":{"shape":"S13"}}},"S12":{"type":"structure","required":["MinCapacity","MaxCapacity"],"members":{"MinCapacity":{"type":"integer"},"MaxCapacity":{"type":"integer"}}},"S13":{"type":"list","member":{"type":"structure","required":["Name","Action","Trigger"],"members":{"Name":{},"Description":{},"Action":{"type":"structure","required":["SimpleScalingPolicyConfiguration"],"members":{"Market":{},"SimpleScalingPolicyConfiguration":{"type":"structure","required":["ScalingAdjustment"],"members":{"AdjustmentType":{},"ScalingAdjustment":{"type":"integer"},"CoolDown":{"type":"integer"}}}}},"Trigger":{"type":"structure","required":["CloudWatchAlarmDefinition"],"members":{"CloudWatchAlarmDefinition":{"type":"structure","required":["ComparisonOperator","MetricName","Period","Threshold"],"members":{"ComparisonOperator":{},"EvaluationPeriods":{"type":"integer"},"MetricName":{},"Namespace":{},"Period":{"type":"integer"},"Statistic":{},"Threshold":{"type":"double"},"Unit":{},"Dimensions":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{}}}}}}}}}}},"S1i":{"type":"list","member":{"shape":"S1j"}},"S1j":{"type":"structure","required":["Name","HadoopJarStep"],"members":{"Name":{},"ActionOnFailure":{},"HadoopJarStep":{"type":"structure","required":["Jar"],"members":{"Properties":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{}}}},"Jar":{},"MainClass":{},"Args":{"shape":"S1p"}}}}},"S1p":{"type":"list","member":{}},"S1r":{"type":"list","member":{}},"S1u":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{}}}},"S29":{"type":"list","member":{}},"S2l":{"type":"structure","members":{"State":{},"StateChangeReason":{"type":"structure","members":{"Code":{},"Message":{}}},"Timeline":{"type":"structure","members":{"CreationDateTime":{"type":"timestamp"},"ReadyDateTime":{"type":"timestamp"},"EndDateTime":{"type":"timestamp"}}}}},"S2r":{"type":"list","member":{}},"S2s":{"type":"list","member":{}},"S2v":{"type":"list","member":{"type":"structure","members":{"Name":{},"Version":{},"Args":{"shape":"S2s"},"AdditionalInfo":{"shape":"Sj"}}}},"S2z":{"type":"structure","required":["Realm","KdcAdminPassword"],"members":{"Realm":{},"KdcAdminPassword":{},"CrossRealmTrustPrincipalPassword":{},"ADDomainJoinUser":{},"ADDomainJoinPassword":{}}},"S31":{"type":"list","member":{"type":"structure","required":["InstanceRole"],"members":{"InstanceRole":{},"PlacementStrategy":{}}}},"S3f":{"type":"structure","members":{"AvailabilityZone":{},"AvailabilityZones":{"shape":"S2r"}}},"S3m":{"type":"structure","required":["Name","ScriptBootstrapAction"],"members":{"Name":{},"ScriptBootstrapAction":{"type":"structure","required":["Path"],"members":{"Path":{},"Args":{"shape":"S1p"}}}}},"S3o":{"type":"list","member":{}},"S3s":{"type":"structure","required":["Id"],"members":{"Id":{},"Type":{},"MasterInstanceSecurityGroupId":{}}},"S45":{"type":"structure","members":{"Jar":{},"Properties":{"shape":"Sj"},"MainClass":{},"Args":{"shape":"S2s"}}},"S46":{"type":"structure","members":{"State":{},"StateChangeReason":{"type":"structure","members":{"Code":{},"Message":{}}},"FailureDetails":{"type":"structure","members":{"Reason":{},"Message":{},"LogFile":{}}},"Timeline":{"type":"structure","members":{"CreationDateTime":{"type":"timestamp"},"StartDateTime":{"type":"timestamp"},"EndDateTime":{"type":"timestamp"}}}}},"S4h":{"type":"structure","required":["BlockPublicSecurityGroupRules"],"members":{"BlockPublicSecurityGroupRules":{"type":"boolean"},"PermittedPublicSecurityGroupRuleRanges":{"type":"list","member":{"type":"structure","required":["MinRange"],"members":{"MinRange":{"type":"integer"},"MaxRange":{"type":"integer"}}}}}},"S4o":{"type":"structure","members":{"ComputeLimits":{"type":"structure","required":["UnitType","MinimumCapacityUnits","MaximumCapacityUnits"],"members":{"UnitType":{},"MinimumCapacityUnits":{"type":"integer"},"MaximumCapacityUnits":{"type":"integer"},"MaximumOnDemandCapacityUnits":{"type":"integer"},"MaximumCoreCapacityUnits":{"type":"integer"}}}}},"S5f":{"type":"list","member":{"type":"structure","members":{"VolumeSpecification":{"shape":"Sd"},"Device":{}}}},"S5s":{"type":"structure","members":{"DecommissionTimeout":{"type":"integer"},"InstanceResizePolicy":{"type":"structure","members":{"InstancesToTerminate":{"shape":"S5u"},"InstancesToProtect":{"shape":"S5u"},"InstanceTerminationTimeout":{"type":"integer"}}}}},"S5u":{"type":"list","member":{}},"S5w":{"type":"structure","members":{"Status":{"type":"structure","members":{"State":{},"StateChangeReason":{"type":"structure","members":{"Code":{},"Message":{}}}}},"Constraints":{"shape":"S12"},"Rules":{"shape":"S13"}}},"S7p":{"type":"list","member":{}}}}

/***/ }),
/* 226 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeJobFlows":{"result_key":"JobFlows"},"ListBootstrapActions":{"input_token":"Marker","output_token":"Marker","result_key":"BootstrapActions"},"ListClusters":{"input_token":"Marker","output_token":"Marker","result_key":"Clusters"},"ListInstanceFleets":{"input_token":"Marker","output_token":"Marker","result_key":"InstanceFleets"},"ListInstanceGroups":{"input_token":"Marker","output_token":"Marker","result_key":"InstanceGroups"},"ListInstances":{"input_token":"Marker","output_token":"Marker","result_key":"Instances"},"ListNotebookExecutions":{"input_token":"Marker","output_token":"Marker","result_key":"NotebookExecutions"},"ListReleaseLabels":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken"},"ListSecurityConfigurations":{"input_token":"Marker","output_token":"Marker","result_key":"SecurityConfigurations"},"ListSteps":{"input_token":"Marker","output_token":"Marker","result_key":"Steps"},"ListStudioSessionMappings":{"input_token":"Marker","output_token":"Marker","result_key":"SessionMappings"},"ListStudios":{"input_token":"Marker","output_token":"Marker","result_key":"Studios"}}}

/***/ }),
/* 227 */
/***/ (function(module, exports) {

	module.exports = {"version":2,"waiters":{"ClusterRunning":{"delay":30,"operation":"DescribeCluster","maxAttempts":60,"acceptors":[{"state":"success","matcher":"path","argument":"Cluster.Status.State","expected":"RUNNING"},{"state":"success","matcher":"path","argument":"Cluster.Status.State","expected":"WAITING"},{"state":"failure","matcher":"path","argument":"Cluster.Status.State","expected":"TERMINATING"},{"state":"failure","matcher":"path","argument":"Cluster.Status.State","expected":"TERMINATED"},{"state":"failure","matcher":"path","argument":"Cluster.Status.State","expected":"TERMINATED_WITH_ERRORS"}]},"StepComplete":{"delay":30,"operation":"DescribeStep","maxAttempts":60,"acceptors":[{"state":"success","matcher":"path","argument":"Step.Status.State","expected":"COMPLETED"},{"state":"failure","matcher":"path","argument":"Step.Status.State","expected":"FAILED"},{"state":"failure","matcher":"path","argument":"Step.Status.State","expected":"CANCELLED"}]},"ClusterTerminated":{"delay":30,"operation":"DescribeCluster","maxAttempts":60,"acceptors":[{"state":"success","matcher":"path","argument":"Cluster.Status.State","expected":"TERMINATED"},{"state":"failure","matcher":"path","argument":"Cluster.Status.State","expected":"TERMINATED_WITH_ERRORS"}]}}}

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['es'] = {};
	AWS.ES = Service.defineService('es', ['2015-01-01']);
	Object.defineProperty(apiLoader.services['es'], '2015-01-01', {
	  get: function get() {
	    var model = __webpack_require__(229);
	    model.paginators = __webpack_require__(230).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.ES;


/***/ }),
/* 229 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-01-01","endpointPrefix":"es","protocol":"rest-json","serviceFullName":"Amazon Elasticsearch Service","serviceId":"Elasticsearch Service","signatureVersion":"v4","uid":"es-2015-01-01"},"operations":{"AcceptInboundCrossClusterSearchConnection":{"http":{"method":"PUT","requestUri":"/2015-01-01/es/ccs/inboundConnection/{ConnectionId}/accept"},"input":{"type":"structure","required":["CrossClusterSearchConnectionId"],"members":{"CrossClusterSearchConnectionId":{"location":"uri","locationName":"ConnectionId"}}},"output":{"type":"structure","members":{"CrossClusterSearchConnection":{"shape":"S4"}}}},"AddTags":{"http":{"requestUri":"/2015-01-01/tags"},"input":{"type":"structure","required":["ARN","TagList"],"members":{"ARN":{},"TagList":{"shape":"Se"}}}},"AssociatePackage":{"http":{"requestUri":"/2015-01-01/packages/associate/{PackageID}/{DomainName}"},"input":{"type":"structure","required":["PackageID","DomainName"],"members":{"PackageID":{"location":"uri","locationName":"PackageID"},"DomainName":{"location":"uri","locationName":"DomainName"}}},"output":{"type":"structure","members":{"DomainPackageDetails":{"shape":"Sl"}}}},"CancelElasticsearchServiceSoftwareUpdate":{"http":{"requestUri":"/2015-01-01/es/serviceSoftwareUpdate/cancel"},"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"type":"structure","members":{"ServiceSoftwareOptions":{"shape":"Sx"}}}},"CreateElasticsearchDomain":{"http":{"requestUri":"/2015-01-01/es/domain"},"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{},"ElasticsearchVersion":{},"ElasticsearchClusterConfig":{"shape":"S14"},"EBSOptions":{"shape":"S1a"},"AccessPolicies":{},"SnapshotOptions":{"shape":"S1d"},"VPCOptions":{"shape":"S1e"},"CognitoOptions":{"shape":"S1g"},"EncryptionAtRestOptions":{"shape":"S1k"},"NodeToNodeEncryptionOptions":{"shape":"S1m"},"AdvancedOptions":{"shape":"S1n"},"LogPublishingOptions":{"shape":"S1o"},"DomainEndpointOptions":{"shape":"S1s"},"AdvancedSecurityOptions":{"shape":"S1v"},"AutoTuneOptions":{"type":"structure","members":{"DesiredState":{},"MaintenanceSchedules":{"shape":"S26"}}},"TagList":{"shape":"Se"}}},"output":{"type":"structure","members":{"DomainStatus":{"shape":"S2d"}}}},"CreateOutboundCrossClusterSearchConnection":{"http":{"requestUri":"/2015-01-01/es/ccs/outboundConnection"},"input":{"type":"structure","required":["SourceDomainInfo","DestinationDomainInfo","ConnectionAlias"],"members":{"SourceDomainInfo":{"shape":"S5"},"DestinationDomainInfo":{"shape":"S5"},"ConnectionAlias":{}}},"output":{"type":"structure","members":{"SourceDomainInfo":{"shape":"S5"},"DestinationDomainInfo":{"shape":"S5"},"ConnectionAlias":{},"ConnectionStatus":{"shape":"S2p"},"CrossClusterSearchConnectionId":{}}}},"CreatePackage":{"http":{"requestUri":"/2015-01-01/packages"},"input":{"type":"structure","required":["PackageName","PackageType","PackageSource"],"members":{"PackageName":{},"PackageType":{},"PackageDescription":{},"PackageSource":{"shape":"S2t"}}},"output":{"type":"structure","members":{"PackageDetails":{"shape":"S2x"}}}},"DeleteElasticsearchDomain":{"http":{"method":"DELETE","requestUri":"/2015-01-01/es/domain/{DomainName}"},"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{"location":"uri","locationName":"DomainName"}}},"output":{"type":"structure","members":{"DomainStatus":{"shape":"S2d"}}}},"DeleteElasticsearchServiceRole":{"http":{"method":"DELETE","requestUri":"/2015-01-01/es/role"}},"DeleteInboundCrossClusterSearchConnection":{"http":{"method":"DELETE","requestUri":"/2015-01-01/es/ccs/inboundConnection/{ConnectionId}"},"input":{"type":"structure","required":["CrossClusterSearchConnectionId"],"members":{"CrossClusterSearchConnectionId":{"location":"uri","locationName":"ConnectionId"}}},"output":{"type":"structure","members":{"CrossClusterSearchConnection":{"shape":"S4"}}}},"DeleteOutboundCrossClusterSearchConnection":{"http":{"method":"DELETE","requestUri":"/2015-01-01/es/ccs/outboundConnection/{ConnectionId}"},"input":{"type":"structure","required":["CrossClusterSearchConnectionId"],"members":{"CrossClusterSearchConnectionId":{"location":"uri","locationName":"ConnectionId"}}},"output":{"type":"structure","members":{"CrossClusterSearchConnection":{"shape":"S36"}}}},"DeletePackage":{"http":{"method":"DELETE","requestUri":"/2015-01-01/packages/{PackageID}"},"input":{"type":"structure","required":["PackageID"],"members":{"PackageID":{"location":"uri","locationName":"PackageID"}}},"output":{"type":"structure","members":{"PackageDetails":{"shape":"S2x"}}}},"DescribeDomainAutoTunes":{"http":{"method":"GET","requestUri":"/2015-01-01/es/domain/{DomainName}/autoTunes"},"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{"location":"uri","locationName":"DomainName"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"AutoTunes":{"type":"list","member":{"type":"structure","members":{"AutoTuneType":{},"AutoTuneDetails":{"type":"structure","members":{"ScheduledAutoTuneDetails":{"type":"structure","members":{"Date":{"type":"timestamp"},"ActionType":{},"Action":{},"Severity":{}}}}}}}},"NextToken":{}}}},"DescribeElasticsearchDomain":{"http":{"method":"GET","requestUri":"/2015-01-01/es/domain/{DomainName}"},"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{"location":"uri","locationName":"DomainName"}}},"output":{"type":"structure","required":["DomainStatus"],"members":{"DomainStatus":{"shape":"S2d"}}}},"DescribeElasticsearchDomainConfig":{"http":{"method":"GET","requestUri":"/2015-01-01/es/domain/{DomainName}/config"},"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{"location":"uri","locationName":"DomainName"}}},"output":{"type":"structure","required":["DomainConfig"],"members":{"DomainConfig":{"shape":"S3q"}}}},"DescribeElasticsearchDomains":{"http":{"requestUri":"/2015-01-01/es/domain-info"},"input":{"type":"structure","required":["DomainNames"],"members":{"DomainNames":{"type":"list","member":{}}}},"output":{"type":"structure","required":["DomainStatusList"],"members":{"DomainStatusList":{"type":"list","member":{"shape":"S2d"}}}}},"DescribeElasticsearchInstanceTypeLimits":{"http":{"method":"GET","requestUri":"/2015-01-01/es/instanceTypeLimits/{ElasticsearchVersion}/{InstanceType}"},"input":{"type":"structure","required":["InstanceType","ElasticsearchVersion"],"members":{"DomainName":{"location":"querystring","locationName":"domainName"},"InstanceType":{"location":"uri","locationName":"InstanceType"},"ElasticsearchVersion":{"location":"uri","locationName":"ElasticsearchVersion"}}},"output":{"type":"structure","members":{"LimitsByRole":{"type":"map","key":{},"value":{"type":"structure","members":{"StorageTypes":{"type":"list","member":{"type":"structure","members":{"StorageTypeName":{},"StorageSubTypeName":{},"StorageTypeLimits":{"type":"list","member":{"type":"structure","members":{"LimitName":{},"LimitValues":{"shape":"S4s"}}}}}}},"InstanceLimits":{"type":"structure","members":{"InstanceCountLimits":{"type":"structure","members":{"MinimumInstanceCount":{"type":"integer"},"MaximumInstanceCount":{"type":"integer"}}}}},"AdditionalLimits":{"type":"list","member":{"type":"structure","members":{"LimitName":{},"LimitValues":{"shape":"S4s"}}}}}}}}}},"DescribeInboundCrossClusterSearchConnections":{"http":{"requestUri":"/2015-01-01/es/ccs/inboundConnection/search"},"input":{"type":"structure","members":{"Filters":{"shape":"S51"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"CrossClusterSearchConnections":{"type":"list","member":{"shape":"S4"}},"NextToken":{}}}},"DescribeOutboundCrossClusterSearchConnections":{"http":{"requestUri":"/2015-01-01/es/ccs/outboundConnection/search"},"input":{"type":"structure","members":{"Filters":{"shape":"S51"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"CrossClusterSearchConnections":{"type":"list","member":{"shape":"S36"}},"NextToken":{}}}},"DescribePackages":{"http":{"requestUri":"/2015-01-01/packages/describe"},"input":{"type":"structure","members":{"Filters":{"type":"list","member":{"type":"structure","members":{"Name":{},"Value":{"type":"list","member":{}}}}},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"PackageDetailsList":{"type":"list","member":{"shape":"S2x"}},"NextToken":{}}}},"DescribeReservedElasticsearchInstanceOfferings":{"http":{"method":"GET","requestUri":"/2015-01-01/es/reservedInstanceOfferings"},"input":{"type":"structure","members":{"ReservedElasticsearchInstanceOfferingId":{"location":"querystring","locationName":"offeringId"},"MaxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"NextToken":{"location":"querystring","locationName":"nextToken"}}},"output":{"type":"structure","members":{"NextToken":{},"ReservedElasticsearchInstanceOfferings":{"type":"list","member":{"type":"structure","members":{"ReservedElasticsearchInstanceOfferingId":{},"ElasticsearchInstanceType":{},"Duration":{"type":"integer"},"FixedPrice":{"type":"double"},"UsagePrice":{"type":"double"},"CurrencyCode":{},"PaymentOption":{},"RecurringCharges":{"shape":"S5q"}}}}}}},"DescribeReservedElasticsearchInstances":{"http":{"method":"GET","requestUri":"/2015-01-01/es/reservedInstances"},"input":{"type":"structure","members":{"ReservedElasticsearchInstanceId":{"location":"querystring","locationName":"reservationId"},"MaxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"NextToken":{"location":"querystring","locationName":"nextToken"}}},"output":{"type":"structure","members":{"NextToken":{},"ReservedElasticsearchInstances":{"type":"list","member":{"type":"structure","members":{"ReservationName":{},"ReservedElasticsearchInstanceId":{},"ReservedElasticsearchInstanceOfferingId":{},"ElasticsearchInstanceType":{},"StartTime":{"type":"timestamp"},"Duration":{"type":"integer"},"FixedPrice":{"type":"double"},"UsagePrice":{"type":"double"},"CurrencyCode":{},"ElasticsearchInstanceCount":{"type":"integer"},"State":{},"PaymentOption":{},"RecurringCharges":{"shape":"S5q"}}}}}}},"DissociatePackage":{"http":{"requestUri":"/2015-01-01/packages/dissociate/{PackageID}/{DomainName}"},"input":{"type":"structure","required":["PackageID","DomainName"],"members":{"PackageID":{"location":"uri","locationName":"PackageID"},"DomainName":{"location":"uri","locationName":"DomainName"}}},"output":{"type":"structure","members":{"DomainPackageDetails":{"shape":"Sl"}}}},"GetCompatibleElasticsearchVersions":{"http":{"method":"GET","requestUri":"/2015-01-01/es/compatibleVersions"},"input":{"type":"structure","members":{"DomainName":{"location":"querystring","locationName":"domainName"}}},"output":{"type":"structure","members":{"CompatibleElasticsearchVersions":{"type":"list","member":{"type":"structure","members":{"SourceVersion":{},"TargetVersions":{"shape":"S63"}}}}}}},"GetPackageVersionHistory":{"http":{"method":"GET","requestUri":"/2015-01-01/packages/{PackageID}/history"},"input":{"type":"structure","required":["PackageID"],"members":{"PackageID":{"location":"uri","locationName":"PackageID"},"MaxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"NextToken":{"location":"querystring","locationName":"nextToken"}}},"output":{"type":"structure","members":{"PackageID":{},"PackageVersionHistoryList":{"type":"list","member":{"type":"structure","members":{"PackageVersion":{},"CommitMessage":{},"CreatedAt":{"type":"timestamp"}}}},"NextToken":{}}}},"GetUpgradeHistory":{"http":{"method":"GET","requestUri":"/2015-01-01/es/upgradeDomain/{DomainName}/history"},"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{"location":"uri","locationName":"DomainName"},"MaxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"NextToken":{"location":"querystring","locationName":"nextToken"}}},"output":{"type":"structure","members":{"UpgradeHistories":{"type":"list","member":{"type":"structure","members":{"UpgradeName":{},"StartTimestamp":{"type":"timestamp"},"UpgradeStatus":{},"StepsList":{"type":"list","member":{"type":"structure","members":{"UpgradeStep":{},"UpgradeStepStatus":{},"Issues":{"type":"list","member":{}},"ProgressPercent":{"type":"double"}}}}}}},"NextToken":{}}}},"GetUpgradeStatus":{"http":{"method":"GET","requestUri":"/2015-01-01/es/upgradeDomain/{DomainName}/status"},"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{"location":"uri","locationName":"DomainName"}}},"output":{"type":"structure","members":{"UpgradeStep":{},"StepStatus":{},"UpgradeName":{}}}},"ListDomainNames":{"http":{"method":"GET","requestUri":"/2015-01-01/domain"},"output":{"type":"structure","members":{"DomainNames":{"type":"list","member":{"type":"structure","members":{"DomainName":{}}}}}}},"ListDomainsForPackage":{"http":{"method":"GET","requestUri":"/2015-01-01/packages/{PackageID}/domains"},"input":{"type":"structure","required":["PackageID"],"members":{"PackageID":{"location":"uri","locationName":"PackageID"},"MaxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"NextToken":{"location":"querystring","locationName":"nextToken"}}},"output":{"type":"structure","members":{"DomainPackageDetailsList":{"shape":"S6s"},"NextToken":{}}}},"ListElasticsearchInstanceTypes":{"http":{"method":"GET","requestUri":"/2015-01-01/es/instanceTypes/{ElasticsearchVersion}"},"input":{"type":"structure","required":["ElasticsearchVersion"],"members":{"ElasticsearchVersion":{"location":"uri","locationName":"ElasticsearchVersion"},"DomainName":{"location":"querystring","locationName":"domainName"},"MaxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"NextToken":{"location":"querystring","locationName":"nextToken"}}},"output":{"type":"structure","members":{"ElasticsearchInstanceTypes":{"type":"list","member":{}},"NextToken":{}}}},"ListElasticsearchVersions":{"http":{"method":"GET","requestUri":"/2015-01-01/es/versions"},"input":{"type":"structure","members":{"MaxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"NextToken":{"location":"querystring","locationName":"nextToken"}}},"output":{"type":"structure","members":{"ElasticsearchVersions":{"shape":"S63"},"NextToken":{}}}},"ListPackagesForDomain":{"http":{"method":"GET","requestUri":"/2015-01-01/domain/{DomainName}/packages"},"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{"location":"uri","locationName":"DomainName"},"MaxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"NextToken":{"location":"querystring","locationName":"nextToken"}}},"output":{"type":"structure","members":{"DomainPackageDetailsList":{"shape":"S6s"},"NextToken":{}}}},"ListTags":{"http":{"method":"GET","requestUri":"/2015-01-01/tags/"},"input":{"type":"structure","required":["ARN"],"members":{"ARN":{"location":"querystring","locationName":"arn"}}},"output":{"type":"structure","members":{"TagList":{"shape":"Se"}}}},"PurchaseReservedElasticsearchInstanceOffering":{"http":{"requestUri":"/2015-01-01/es/purchaseReservedInstanceOffering"},"input":{"type":"structure","required":["ReservedElasticsearchInstanceOfferingId","ReservationName"],"members":{"ReservedElasticsearchInstanceOfferingId":{},"ReservationName":{},"InstanceCount":{"type":"integer"}}},"output":{"type":"structure","members":{"ReservedElasticsearchInstanceId":{},"ReservationName":{}}}},"RejectInboundCrossClusterSearchConnection":{"http":{"method":"PUT","requestUri":"/2015-01-01/es/ccs/inboundConnection/{ConnectionId}/reject"},"input":{"type":"structure","required":["CrossClusterSearchConnectionId"],"members":{"CrossClusterSearchConnectionId":{"location":"uri","locationName":"ConnectionId"}}},"output":{"type":"structure","members":{"CrossClusterSearchConnection":{"shape":"S4"}}}},"RemoveTags":{"http":{"requestUri":"/2015-01-01/tags-removal"},"input":{"type":"structure","required":["ARN","TagKeys"],"members":{"ARN":{},"TagKeys":{"shape":"S1f"}}}},"StartElasticsearchServiceSoftwareUpdate":{"http":{"requestUri":"/2015-01-01/es/serviceSoftwareUpdate/start"},"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"type":"structure","members":{"ServiceSoftwareOptions":{"shape":"Sx"}}}},"UpdateElasticsearchDomainConfig":{"http":{"requestUri":"/2015-01-01/es/domain/{DomainName}/config"},"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{"location":"uri","locationName":"DomainName"},"ElasticsearchClusterConfig":{"shape":"S14"},"EBSOptions":{"shape":"S1a"},"SnapshotOptions":{"shape":"S1d"},"VPCOptions":{"shape":"S1e"},"CognitoOptions":{"shape":"S1g"},"AdvancedOptions":{"shape":"S1n"},"AccessPolicies":{},"LogPublishingOptions":{"shape":"S1o"},"DomainEndpointOptions":{"shape":"S1s"},"AdvancedSecurityOptions":{"shape":"S1v"},"NodeToNodeEncryptionOptions":{"shape":"S1m"},"EncryptionAtRestOptions":{"shape":"S1k"},"AutoTuneOptions":{"shape":"S49"}}},"output":{"type":"structure","required":["DomainConfig"],"members":{"DomainConfig":{"shape":"S3q"}}}},"UpdatePackage":{"http":{"requestUri":"/2015-01-01/packages/update"},"input":{"type":"structure","required":["PackageID","PackageSource"],"members":{"PackageID":{},"PackageSource":{"shape":"S2t"},"PackageDescription":{},"CommitMessage":{}}},"output":{"type":"structure","members":{"PackageDetails":{"shape":"S2x"}}}},"UpgradeElasticsearchDomain":{"http":{"requestUri":"/2015-01-01/es/upgradeDomain"},"input":{"type":"structure","required":["DomainName","TargetVersion"],"members":{"DomainName":{},"TargetVersion":{},"PerformCheckOnly":{"type":"boolean"}}},"output":{"type":"structure","members":{"DomainName":{},"TargetVersion":{},"PerformCheckOnly":{"type":"boolean"}}}}},"shapes":{"S4":{"type":"structure","members":{"SourceDomainInfo":{"shape":"S5"},"DestinationDomainInfo":{"shape":"S5"},"CrossClusterSearchConnectionId":{},"ConnectionStatus":{"type":"structure","members":{"StatusCode":{},"Message":{}}}}},"S5":{"type":"structure","required":["DomainName"],"members":{"OwnerId":{},"DomainName":{},"Region":{}}},"Se":{"type":"list","member":{"type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{}}}},"Sl":{"type":"structure","members":{"PackageID":{},"PackageName":{},"PackageType":{},"LastUpdated":{"type":"timestamp"},"DomainName":{},"DomainPackageStatus":{},"PackageVersion":{},"ReferencePath":{},"ErrorDetails":{"shape":"Ss"}}},"Ss":{"type":"structure","members":{"ErrorType":{},"ErrorMessage":{}}},"Sx":{"type":"structure","members":{"CurrentVersion":{},"NewVersion":{},"UpdateAvailable":{"type":"boolean"},"Cancellable":{"type":"boolean"},"UpdateStatus":{},"Description":{},"AutomatedUpdateDate":{"type":"timestamp"},"OptionalDeployment":{"type":"boolean"}}},"S14":{"type":"structure","members":{"InstanceType":{},"InstanceCount":{"type":"integer"},"DedicatedMasterEnabled":{"type":"boolean"},"ZoneAwarenessEnabled":{"type":"boolean"},"ZoneAwarenessConfig":{"type":"structure","members":{"AvailabilityZoneCount":{"type":"integer"}}},"DedicatedMasterType":{},"DedicatedMasterCount":{"type":"integer"},"WarmEnabled":{"type":"boolean"},"WarmType":{},"WarmCount":{"type":"integer"},"ColdStorageOptions":{"type":"structure","required":["Enabled"],"members":{"Enabled":{"type":"boolean"}}}}},"S1a":{"type":"structure","members":{"EBSEnabled":{"type":"boolean"},"VolumeType":{},"VolumeSize":{"type":"integer"},"Iops":{"type":"integer"}}},"S1d":{"type":"structure","members":{"AutomatedSnapshotStartHour":{"type":"integer"}}},"S1e":{"type":"structure","members":{"SubnetIds":{"shape":"S1f"},"SecurityGroupIds":{"shape":"S1f"}}},"S1f":{"type":"list","member":{}},"S1g":{"type":"structure","members":{"Enabled":{"type":"boolean"},"UserPoolId":{},"IdentityPoolId":{},"RoleArn":{}}},"S1k":{"type":"structure","members":{"Enabled":{"type":"boolean"},"KmsKeyId":{}}},"S1m":{"type":"structure","members":{"Enabled":{"type":"boolean"}}},"S1n":{"type":"map","key":{},"value":{}},"S1o":{"type":"map","key":{},"value":{"type":"structure","members":{"CloudWatchLogsLogGroupArn":{},"Enabled":{"type":"boolean"}}}},"S1s":{"type":"structure","members":{"EnforceHTTPS":{"type":"boolean"},"TLSSecurityPolicy":{},"CustomEndpointEnabled":{"type":"boolean"},"CustomEndpoint":{},"CustomEndpointCertificateArn":{}}},"S1v":{"type":"structure","members":{"Enabled":{"type":"boolean"},"InternalUserDatabaseEnabled":{"type":"boolean"},"MasterUserOptions":{"type":"structure","members":{"MasterUserARN":{},"MasterUserName":{"shape":"S1x"},"MasterUserPassword":{"type":"string","sensitive":true}}},"SAMLOptions":{"type":"structure","members":{"Enabled":{"type":"boolean"},"Idp":{"shape":"S20"},"MasterUserName":{"shape":"S1x"},"MasterBackendRole":{},"SubjectKey":{},"RolesKey":{},"SessionTimeoutMinutes":{"type":"integer"}}}}},"S1x":{"type":"string","sensitive":true},"S20":{"type":"structure","required":["MetadataContent","EntityId"],"members":{"MetadataContent":{},"EntityId":{}}},"S26":{"type":"list","member":{"type":"structure","members":{"StartAt":{"type":"timestamp"},"Duration":{"type":"structure","members":{"Value":{"type":"long"},"Unit":{}}},"CronExpressionForRecurrence":{}}}},"S2d":{"type":"structure","required":["DomainId","DomainName","ARN","ElasticsearchClusterConfig"],"members":{"DomainId":{},"DomainName":{},"ARN":{},"Created":{"type":"boolean"},"Deleted":{"type":"boolean"},"Endpoint":{},"Endpoints":{"type":"map","key":{},"value":{}},"Processing":{"type":"boolean"},"UpgradeProcessing":{"type":"boolean"},"ElasticsearchVersion":{},"ElasticsearchClusterConfig":{"shape":"S14"},"EBSOptions":{"shape":"S1a"},"AccessPolicies":{},"SnapshotOptions":{"shape":"S1d"},"VPCOptions":{"shape":"S2h"},"CognitoOptions":{"shape":"S1g"},"EncryptionAtRestOptions":{"shape":"S1k"},"NodeToNodeEncryptionOptions":{"shape":"S1m"},"AdvancedOptions":{"shape":"S1n"},"LogPublishingOptions":{"shape":"S1o"},"ServiceSoftwareOptions":{"shape":"Sx"},"DomainEndpointOptions":{"shape":"S1s"},"AdvancedSecurityOptions":{"shape":"S2i"},"AutoTuneOptions":{"type":"structure","members":{"State":{},"ErrorMessage":{}}}}},"S2h":{"type":"structure","members":{"VPCId":{},"SubnetIds":{"shape":"S1f"},"AvailabilityZones":{"shape":"S1f"},"SecurityGroupIds":{"shape":"S1f"}}},"S2i":{"type":"structure","members":{"Enabled":{"type":"boolean"},"InternalUserDatabaseEnabled":{"type":"boolean"},"SAMLOptions":{"type":"structure","members":{"Enabled":{"type":"boolean"},"Idp":{"shape":"S20"},"SubjectKey":{},"RolesKey":{},"SessionTimeoutMinutes":{"type":"integer"}}}}},"S2p":{"type":"structure","members":{"StatusCode":{},"Message":{}}},"S2t":{"type":"structure","members":{"S3BucketName":{},"S3Key":{}}},"S2x":{"type":"structure","members":{"PackageID":{},"PackageName":{},"PackageType":{},"PackageDescription":{},"PackageStatus":{},"CreatedAt":{"type":"timestamp"},"LastUpdatedAt":{"type":"timestamp"},"AvailablePackageVersion":{},"ErrorDetails":{"shape":"Ss"}}},"S36":{"type":"structure","members":{"SourceDomainInfo":{"shape":"S5"},"DestinationDomainInfo":{"shape":"S5"},"CrossClusterSearchConnectionId":{},"ConnectionAlias":{},"ConnectionStatus":{"shape":"S2p"}}},"S3q":{"type":"structure","members":{"ElasticsearchVersion":{"type":"structure","required":["Options","Status"],"members":{"Options":{},"Status":{"shape":"S3s"}}},"ElasticsearchClusterConfig":{"type":"structure","required":["Options","Status"],"members":{"Options":{"shape":"S14"},"Status":{"shape":"S3s"}}},"EBSOptions":{"type":"structure","required":["Options","Status"],"members":{"Options":{"shape":"S1a"},"Status":{"shape":"S3s"}}},"AccessPolicies":{"type":"structure","required":["Options","Status"],"members":{"Options":{},"Status":{"shape":"S3s"}}},"SnapshotOptions":{"type":"structure","required":["Options","Status"],"members":{"Options":{"shape":"S1d"},"Status":{"shape":"S3s"}}},"VPCOptions":{"type":"structure","required":["Options","Status"],"members":{"Options":{"shape":"S2h"},"Status":{"shape":"S3s"}}},"CognitoOptions":{"type":"structure","required":["Options","Status"],"members":{"Options":{"shape":"S1g"},"Status":{"shape":"S3s"}}},"EncryptionAtRestOptions":{"type":"structure","required":["Options","Status"],"members":{"Options":{"shape":"S1k"},"Status":{"shape":"S3s"}}},"NodeToNodeEncryptionOptions":{"type":"structure","required":["Options","Status"],"members":{"Options":{"shape":"S1m"},"Status":{"shape":"S3s"}}},"AdvancedOptions":{"type":"structure","required":["Options","Status"],"members":{"Options":{"shape":"S1n"},"Status":{"shape":"S3s"}}},"LogPublishingOptions":{"type":"structure","members":{"Options":{"shape":"S1o"},"Status":{"shape":"S3s"}}},"DomainEndpointOptions":{"type":"structure","required":["Options","Status"],"members":{"Options":{"shape":"S1s"},"Status":{"shape":"S3s"}}},"AdvancedSecurityOptions":{"type":"structure","required":["Options","Status"],"members":{"Options":{"shape":"S2i"},"Status":{"shape":"S3s"}}},"AutoTuneOptions":{"type":"structure","members":{"Options":{"shape":"S49"},"Status":{"type":"structure","required":["CreationDate","UpdateDate","State"],"members":{"CreationDate":{"type":"timestamp"},"UpdateDate":{"type":"timestamp"},"UpdateVersion":{"type":"integer"},"State":{},"ErrorMessage":{},"PendingDeletion":{"type":"boolean"}}}}}}},"S3s":{"type":"structure","required":["CreationDate","UpdateDate","State"],"members":{"CreationDate":{"type":"timestamp"},"UpdateDate":{"type":"timestamp"},"UpdateVersion":{"type":"integer"},"State":{},"PendingDeletion":{"type":"boolean"}}},"S49":{"type":"structure","members":{"DesiredState":{},"RollbackOnDisable":{},"MaintenanceSchedules":{"shape":"S26"}}},"S4s":{"type":"list","member":{}},"S51":{"type":"list","member":{"type":"structure","members":{"Name":{},"Values":{"type":"list","member":{}}}}},"S5q":{"type":"list","member":{"type":"structure","members":{"RecurringChargeAmount":{"type":"double"},"RecurringChargeFrequency":{}}}},"S63":{"type":"list","member":{}},"S6s":{"type":"list","member":{"shape":"Sl"}}}}

/***/ }),
/* 230 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeDomainAutoTunes":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"DescribeInboundCrossClusterSearchConnections":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"DescribeOutboundCrossClusterSearchConnections":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"DescribePackages":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"DescribeReservedElasticsearchInstanceOfferings":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"DescribeReservedElasticsearchInstances":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"GetPackageVersionHistory":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"GetUpgradeHistory":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListDomainsForPackage":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListElasticsearchInstanceTypes":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListElasticsearchVersions":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListPackagesForDomain":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"}}}

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['elastictranscoder'] = {};
	AWS.ElasticTranscoder = Service.defineService('elastictranscoder', ['2012-09-25']);
	Object.defineProperty(apiLoader.services['elastictranscoder'], '2012-09-25', {
	  get: function get() {
	    var model = __webpack_require__(232);
	    model.paginators = __webpack_require__(233).pagination;
	    model.waiters = __webpack_require__(234).waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.ElasticTranscoder;


/***/ }),
/* 232 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2012-09-25","endpointPrefix":"elastictranscoder","protocol":"rest-json","serviceFullName":"Amazon Elastic Transcoder","serviceId":"Elastic Transcoder","signatureVersion":"v4","uid":"elastictranscoder-2012-09-25"},"operations":{"CancelJob":{"http":{"method":"DELETE","requestUri":"/2012-09-25/jobs/{Id}","responseCode":202},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{}}},"CreateJob":{"http":{"requestUri":"/2012-09-25/jobs","responseCode":201},"input":{"type":"structure","required":["PipelineId"],"members":{"PipelineId":{},"Input":{"shape":"S5"},"Inputs":{"shape":"St"},"Output":{"shape":"Su"},"Outputs":{"type":"list","member":{"shape":"Su"}},"OutputKeyPrefix":{},"Playlists":{"type":"list","member":{"type":"structure","members":{"Name":{},"Format":{},"OutputKeys":{"shape":"S1l"},"HlsContentProtection":{"shape":"S1m"},"PlayReadyDrm":{"shape":"S1q"}}}},"UserMetadata":{"shape":"S1v"}}},"output":{"type":"structure","members":{"Job":{"shape":"S1y"}}}},"CreatePipeline":{"http":{"requestUri":"/2012-09-25/pipelines","responseCode":201},"input":{"type":"structure","required":["Name","InputBucket","Role"],"members":{"Name":{},"InputBucket":{},"OutputBucket":{},"Role":{},"AwsKmsKeyArn":{},"Notifications":{"shape":"S2a"},"ContentConfig":{"shape":"S2c"},"ThumbnailConfig":{"shape":"S2c"}}},"output":{"type":"structure","members":{"Pipeline":{"shape":"S2l"},"Warnings":{"shape":"S2n"}}}},"CreatePreset":{"http":{"requestUri":"/2012-09-25/presets","responseCode":201},"input":{"type":"structure","required":["Name","Container"],"members":{"Name":{},"Description":{},"Container":{},"Video":{"shape":"S2r"},"Audio":{"shape":"S37"},"Thumbnails":{"shape":"S3i"}}},"output":{"type":"structure","members":{"Preset":{"shape":"S3m"},"Warning":{}}}},"DeletePipeline":{"http":{"method":"DELETE","requestUri":"/2012-09-25/pipelines/{Id}","responseCode":202},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{}}},"DeletePreset":{"http":{"method":"DELETE","requestUri":"/2012-09-25/presets/{Id}","responseCode":202},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{}}},"ListJobsByPipeline":{"http":{"method":"GET","requestUri":"/2012-09-25/jobsByPipeline/{PipelineId}"},"input":{"type":"structure","required":["PipelineId"],"members":{"PipelineId":{"location":"uri","locationName":"PipelineId"},"Ascending":{"location":"querystring","locationName":"Ascending"},"PageToken":{"location":"querystring","locationName":"PageToken"}}},"output":{"type":"structure","members":{"Jobs":{"shape":"S3v"},"NextPageToken":{}}}},"ListJobsByStatus":{"http":{"method":"GET","requestUri":"/2012-09-25/jobsByStatus/{Status}"},"input":{"type":"structure","required":["Status"],"members":{"Status":{"location":"uri","locationName":"Status"},"Ascending":{"location":"querystring","locationName":"Ascending"},"PageToken":{"location":"querystring","locationName":"PageToken"}}},"output":{"type":"structure","members":{"Jobs":{"shape":"S3v"},"NextPageToken":{}}}},"ListPipelines":{"http":{"method":"GET","requestUri":"/2012-09-25/pipelines"},"input":{"type":"structure","members":{"Ascending":{"location":"querystring","locationName":"Ascending"},"PageToken":{"location":"querystring","locationName":"PageToken"}}},"output":{"type":"structure","members":{"Pipelines":{"type":"list","member":{"shape":"S2l"}},"NextPageToken":{}}}},"ListPresets":{"http":{"method":"GET","requestUri":"/2012-09-25/presets"},"input":{"type":"structure","members":{"Ascending":{"location":"querystring","locationName":"Ascending"},"PageToken":{"location":"querystring","locationName":"PageToken"}}},"output":{"type":"structure","members":{"Presets":{"type":"list","member":{"shape":"S3m"}},"NextPageToken":{}}}},"ReadJob":{"http":{"method":"GET","requestUri":"/2012-09-25/jobs/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"Job":{"shape":"S1y"}}}},"ReadPipeline":{"http":{"method":"GET","requestUri":"/2012-09-25/pipelines/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"Pipeline":{"shape":"S2l"},"Warnings":{"shape":"S2n"}}}},"ReadPreset":{"http":{"method":"GET","requestUri":"/2012-09-25/presets/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"Preset":{"shape":"S3m"}}}},"TestRole":{"http":{"requestUri":"/2012-09-25/roleTests","responseCode":200},"input":{"type":"structure","required":["Role","InputBucket","OutputBucket","Topics"],"members":{"Role":{},"InputBucket":{},"OutputBucket":{},"Topics":{"type":"list","member":{}}},"deprecated":true},"output":{"type":"structure","members":{"Success":{},"Messages":{"type":"list","member":{}}},"deprecated":true},"deprecated":true},"UpdatePipeline":{"http":{"method":"PUT","requestUri":"/2012-09-25/pipelines/{Id}","responseCode":200},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"Name":{},"InputBucket":{},"Role":{},"AwsKmsKeyArn":{},"Notifications":{"shape":"S2a"},"ContentConfig":{"shape":"S2c"},"ThumbnailConfig":{"shape":"S2c"}}},"output":{"type":"structure","members":{"Pipeline":{"shape":"S2l"},"Warnings":{"shape":"S2n"}}}},"UpdatePipelineNotifications":{"http":{"requestUri":"/2012-09-25/pipelines/{Id}/notifications"},"input":{"type":"structure","required":["Id","Notifications"],"members":{"Id":{"location":"uri","locationName":"Id"},"Notifications":{"shape":"S2a"}}},"output":{"type":"structure","members":{"Pipeline":{"shape":"S2l"}}}},"UpdatePipelineStatus":{"http":{"requestUri":"/2012-09-25/pipelines/{Id}/status"},"input":{"type":"structure","required":["Id","Status"],"members":{"Id":{"location":"uri","locationName":"Id"},"Status":{}}},"output":{"type":"structure","members":{"Pipeline":{"shape":"S2l"}}}}},"shapes":{"S5":{"type":"structure","members":{"Key":{},"FrameRate":{},"Resolution":{},"AspectRatio":{},"Interlaced":{},"Container":{},"Encryption":{"shape":"Sc"},"TimeSpan":{"shape":"Sg"},"InputCaptions":{"type":"structure","members":{"MergePolicy":{},"CaptionSources":{"shape":"Sk"}}},"DetectedProperties":{"type":"structure","members":{"Width":{"type":"integer"},"Height":{"type":"integer"},"FrameRate":{},"FileSize":{"type":"long"},"DurationMillis":{"type":"long"}}}}},"Sc":{"type":"structure","members":{"Mode":{},"Key":{},"KeyMd5":{},"InitializationVector":{}}},"Sg":{"type":"structure","members":{"StartTime":{},"Duration":{}}},"Sk":{"type":"list","member":{"type":"structure","members":{"Key":{},"Language":{},"TimeOffset":{},"Label":{},"Encryption":{"shape":"Sc"}}}},"St":{"type":"list","member":{"shape":"S5"}},"Su":{"type":"structure","members":{"Key":{},"ThumbnailPattern":{},"ThumbnailEncryption":{"shape":"Sc"},"Rotate":{},"PresetId":{},"SegmentDuration":{},"Watermarks":{"shape":"Sx"},"AlbumArt":{"shape":"S11"},"Composition":{"shape":"S19","deprecated":true},"Captions":{"shape":"S1b"},"Encryption":{"shape":"Sc"}}},"Sx":{"type":"list","member":{"type":"structure","members":{"PresetWatermarkId":{},"InputKey":{},"Encryption":{"shape":"Sc"}}}},"S11":{"type":"structure","members":{"MergePolicy":{},"Artwork":{"type":"list","member":{"type":"structure","members":{"InputKey":{},"MaxWidth":{},"MaxHeight":{},"SizingPolicy":{},"PaddingPolicy":{},"AlbumArtFormat":{},"Encryption":{"shape":"Sc"}}}}}},"S19":{"type":"list","member":{"type":"structure","members":{"TimeSpan":{"shape":"Sg"}},"deprecated":true},"deprecated":true},"S1b":{"type":"structure","members":{"MergePolicy":{"deprecated":true},"CaptionSources":{"shape":"Sk","deprecated":true},"CaptionFormats":{"type":"list","member":{"type":"structure","members":{"Format":{},"Pattern":{},"Encryption":{"shape":"Sc"}}}}}},"S1l":{"type":"list","member":{}},"S1m":{"type":"structure","members":{"Method":{},"Key":{},"KeyMd5":{},"InitializationVector":{},"LicenseAcquisitionUrl":{},"KeyStoragePolicy":{}}},"S1q":{"type":"structure","members":{"Format":{},"Key":{},"KeyMd5":{},"KeyId":{},"InitializationVector":{},"LicenseAcquisitionUrl":{}}},"S1v":{"type":"map","key":{},"value":{}},"S1y":{"type":"structure","members":{"Id":{},"Arn":{},"PipelineId":{},"Input":{"shape":"S5"},"Inputs":{"shape":"St"},"Output":{"shape":"S1z"},"Outputs":{"type":"list","member":{"shape":"S1z"}},"OutputKeyPrefix":{},"Playlists":{"type":"list","member":{"type":"structure","members":{"Name":{},"Format":{},"OutputKeys":{"shape":"S1l"},"HlsContentProtection":{"shape":"S1m"},"PlayReadyDrm":{"shape":"S1q"},"Status":{},"StatusDetail":{}}}},"Status":{},"UserMetadata":{"shape":"S1v"},"Timing":{"type":"structure","members":{"SubmitTimeMillis":{"type":"long"},"StartTimeMillis":{"type":"long"},"FinishTimeMillis":{"type":"long"}}}}},"S1z":{"type":"structure","members":{"Id":{},"Key":{},"ThumbnailPattern":{},"ThumbnailEncryption":{"shape":"Sc"},"Rotate":{},"PresetId":{},"SegmentDuration":{},"Status":{},"StatusDetail":{},"Duration":{"type":"long"},"Width":{"type":"integer"},"Height":{"type":"integer"},"FrameRate":{},"FileSize":{"type":"long"},"DurationMillis":{"type":"long"},"Watermarks":{"shape":"Sx"},"AlbumArt":{"shape":"S11"},"Composition":{"shape":"S19","deprecated":true},"Captions":{"shape":"S1b"},"Encryption":{"shape":"Sc"},"AppliedColorSpaceConversion":{}}},"S2a":{"type":"structure","members":{"Progressing":{},"Completed":{},"Warning":{},"Error":{}}},"S2c":{"type":"structure","members":{"Bucket":{},"StorageClass":{},"Permissions":{"type":"list","member":{"type":"structure","members":{"GranteeType":{},"Grantee":{},"Access":{"type":"list","member":{}}}}}}},"S2l":{"type":"structure","members":{"Id":{},"Arn":{},"Name":{},"Status":{},"InputBucket":{},"OutputBucket":{},"Role":{},"AwsKmsKeyArn":{},"Notifications":{"shape":"S2a"},"ContentConfig":{"shape":"S2c"},"ThumbnailConfig":{"shape":"S2c"}}},"S2n":{"type":"list","member":{"type":"structure","members":{"Code":{},"Message":{}}}},"S2r":{"type":"structure","members":{"Codec":{},"CodecOptions":{"type":"map","key":{},"value":{}},"KeyframesMaxDist":{},"FixedGOP":{},"BitRate":{},"FrameRate":{},"MaxFrameRate":{},"Resolution":{},"AspectRatio":{},"MaxWidth":{},"MaxHeight":{},"DisplayAspectRatio":{},"SizingPolicy":{},"PaddingPolicy":{},"Watermarks":{"type":"list","member":{"type":"structure","members":{"Id":{},"MaxWidth":{},"MaxHeight":{},"SizingPolicy":{},"HorizontalAlign":{},"HorizontalOffset":{},"VerticalAlign":{},"VerticalOffset":{},"Opacity":{},"Target":{}}}}}},"S37":{"type":"structure","members":{"Codec":{},"SampleRate":{},"BitRate":{},"Channels":{},"AudioPackingMode":{},"CodecOptions":{"type":"structure","members":{"Profile":{},"BitDepth":{},"BitOrder":{},"Signed":{}}}}},"S3i":{"type":"structure","members":{"Format":{},"Interval":{},"Resolution":{},"AspectRatio":{},"MaxWidth":{},"MaxHeight":{},"SizingPolicy":{},"PaddingPolicy":{}}},"S3m":{"type":"structure","members":{"Id":{},"Arn":{},"Name":{},"Description":{},"Container":{},"Audio":{"shape":"S37"},"Video":{"shape":"S2r"},"Thumbnails":{"shape":"S3i"},"Type":{}}},"S3v":{"type":"list","member":{"shape":"S1y"}}}}

/***/ }),
/* 233 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"ListJobsByPipeline":{"input_token":"PageToken","output_token":"NextPageToken","result_key":"Jobs"},"ListJobsByStatus":{"input_token":"PageToken","output_token":"NextPageToken","result_key":"Jobs"},"ListPipelines":{"input_token":"PageToken","output_token":"NextPageToken","result_key":"Pipelines"},"ListPresets":{"input_token":"PageToken","output_token":"NextPageToken","result_key":"Presets"}}}

/***/ }),
/* 234 */
/***/ (function(module, exports) {

	module.exports = {"version":2,"waiters":{"JobComplete":{"delay":30,"operation":"ReadJob","maxAttempts":120,"acceptors":[{"expected":"Complete","matcher":"path","state":"success","argument":"Job.Status"},{"expected":"Canceled","matcher":"path","state":"failure","argument":"Job.Status"},{"expected":"Error","matcher":"path","state":"failure","argument":"Job.Status"}]}}}

/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['firehose'] = {};
	AWS.Firehose = Service.defineService('firehose', ['2015-08-04']);
	Object.defineProperty(apiLoader.services['firehose'], '2015-08-04', {
	  get: function get() {
	    var model = __webpack_require__(236);
	    model.paginators = __webpack_require__(237).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.Firehose;


/***/ }),
/* 236 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-08-04","endpointPrefix":"firehose","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"Firehose","serviceFullName":"Amazon Kinesis Firehose","serviceId":"Firehose","signatureVersion":"v4","targetPrefix":"Firehose_20150804","uid":"firehose-2015-08-04"},"operations":{"CreateDeliveryStream":{"input":{"type":"structure","required":["DeliveryStreamName"],"members":{"DeliveryStreamName":{},"DeliveryStreamType":{},"KinesisStreamSourceConfiguration":{"type":"structure","required":["KinesisStreamARN","RoleARN"],"members":{"KinesisStreamARN":{},"RoleARN":{}}},"DeliveryStreamEncryptionConfigurationInput":{"shape":"S7"},"S3DestinationConfiguration":{"shape":"Sa","deprecated":true},"ExtendedS3DestinationConfiguration":{"type":"structure","required":["RoleARN","BucketARN"],"members":{"RoleARN":{},"BucketARN":{},"Prefix":{},"ErrorOutputPrefix":{},"BufferingHints":{"shape":"Se"},"CompressionFormat":{},"EncryptionConfiguration":{"shape":"Si"},"CloudWatchLoggingOptions":{"shape":"Sl"},"ProcessingConfiguration":{"shape":"Sq"},"S3BackupMode":{},"S3BackupConfiguration":{"shape":"Sa"},"DataFormatConversionConfiguration":{"shape":"Sz"}}},"RedshiftDestinationConfiguration":{"type":"structure","required":["RoleARN","ClusterJDBCURL","CopyCommand","Username","Password","S3Configuration"],"members":{"RoleARN":{},"ClusterJDBCURL":{},"CopyCommand":{"shape":"S1q"},"Username":{"shape":"S1u"},"Password":{"shape":"S1v"},"RetryOptions":{"shape":"S1w"},"S3Configuration":{"shape":"Sa"},"ProcessingConfiguration":{"shape":"Sq"},"S3BackupMode":{},"S3BackupConfiguration":{"shape":"Sa"},"CloudWatchLoggingOptions":{"shape":"Sl"}}},"ElasticsearchDestinationConfiguration":{"type":"structure","required":["RoleARN","IndexName","S3Configuration"],"members":{"RoleARN":{},"DomainARN":{},"ClusterEndpoint":{},"IndexName":{},"TypeName":{},"IndexRotationPeriod":{},"BufferingHints":{"shape":"S25"},"RetryOptions":{"shape":"S28"},"S3BackupMode":{},"S3Configuration":{"shape":"Sa"},"ProcessingConfiguration":{"shape":"Sq"},"CloudWatchLoggingOptions":{"shape":"Sl"},"VpcConfiguration":{"type":"structure","required":["SubnetIds","RoleARN","SecurityGroupIds"],"members":{"SubnetIds":{"shape":"S2c"},"RoleARN":{},"SecurityGroupIds":{"shape":"S2d"}}}}},"SplunkDestinationConfiguration":{"type":"structure","required":["HECEndpoint","HECEndpointType","HECToken","S3Configuration"],"members":{"HECEndpoint":{},"HECEndpointType":{},"HECToken":{},"HECAcknowledgmentTimeoutInSeconds":{"type":"integer"},"RetryOptions":{"shape":"S2j"},"S3BackupMode":{},"S3Configuration":{"shape":"Sa"},"ProcessingConfiguration":{"shape":"Sq"},"CloudWatchLoggingOptions":{"shape":"Sl"}}},"HttpEndpointDestinationConfiguration":{"type":"structure","required":["EndpointConfiguration","S3Configuration"],"members":{"EndpointConfiguration":{"shape":"S2n"},"BufferingHints":{"shape":"S2r"},"CloudWatchLoggingOptions":{"shape":"Sl"},"RequestConfiguration":{"shape":"S2u"},"ProcessingConfiguration":{"shape":"Sq"},"RoleARN":{},"RetryOptions":{"shape":"S30"},"S3BackupMode":{},"S3Configuration":{"shape":"Sa"}}},"Tags":{"shape":"S33"}}},"output":{"type":"structure","members":{"DeliveryStreamARN":{}}}},"DeleteDeliveryStream":{"input":{"type":"structure","required":["DeliveryStreamName"],"members":{"DeliveryStreamName":{},"AllowForceDelete":{"type":"boolean"}}},"output":{"type":"structure","members":{}}},"DescribeDeliveryStream":{"input":{"type":"structure","required":["DeliveryStreamName"],"members":{"DeliveryStreamName":{},"Limit":{"type":"integer"},"ExclusiveStartDestinationId":{}}},"output":{"type":"structure","required":["DeliveryStreamDescription"],"members":{"DeliveryStreamDescription":{"type":"structure","required":["DeliveryStreamName","DeliveryStreamARN","DeliveryStreamStatus","DeliveryStreamType","VersionId","Destinations","HasMoreDestinations"],"members":{"DeliveryStreamName":{},"DeliveryStreamARN":{},"DeliveryStreamStatus":{},"FailureDescription":{"shape":"S3h"},"DeliveryStreamEncryptionConfiguration":{"type":"structure","members":{"KeyARN":{},"KeyType":{},"Status":{},"FailureDescription":{"shape":"S3h"}}},"DeliveryStreamType":{},"VersionId":{},"CreateTimestamp":{"type":"timestamp"},"LastUpdateTimestamp":{"type":"timestamp"},"Source":{"type":"structure","members":{"KinesisStreamSourceDescription":{"type":"structure","members":{"KinesisStreamARN":{},"RoleARN":{},"DeliveryStartTimestamp":{"type":"timestamp"}}}}},"Destinations":{"type":"list","member":{"type":"structure","required":["DestinationId"],"members":{"DestinationId":{},"S3DestinationDescription":{"shape":"S3s"},"ExtendedS3DestinationDescription":{"type":"structure","required":["RoleARN","BucketARN","BufferingHints","CompressionFormat","EncryptionConfiguration"],"members":{"RoleARN":{},"BucketARN":{},"Prefix":{},"ErrorOutputPrefix":{},"BufferingHints":{"shape":"Se"},"CompressionFormat":{},"EncryptionConfiguration":{"shape":"Si"},"CloudWatchLoggingOptions":{"shape":"Sl"},"ProcessingConfiguration":{"shape":"Sq"},"S3BackupMode":{},"S3BackupDescription":{"shape":"S3s"},"DataFormatConversionConfiguration":{"shape":"Sz"}}},"RedshiftDestinationDescription":{"type":"structure","required":["RoleARN","ClusterJDBCURL","CopyCommand","Username","S3DestinationDescription"],"members":{"RoleARN":{},"ClusterJDBCURL":{},"CopyCommand":{"shape":"S1q"},"Username":{"shape":"S1u"},"RetryOptions":{"shape":"S1w"},"S3DestinationDescription":{"shape":"S3s"},"ProcessingConfiguration":{"shape":"Sq"},"S3BackupMode":{},"S3BackupDescription":{"shape":"S3s"},"CloudWatchLoggingOptions":{"shape":"Sl"}}},"ElasticsearchDestinationDescription":{"type":"structure","members":{"RoleARN":{},"DomainARN":{},"ClusterEndpoint":{},"IndexName":{},"TypeName":{},"IndexRotationPeriod":{},"BufferingHints":{"shape":"S25"},"RetryOptions":{"shape":"S28"},"S3BackupMode":{},"S3DestinationDescription":{"shape":"S3s"},"ProcessingConfiguration":{"shape":"Sq"},"CloudWatchLoggingOptions":{"shape":"Sl"},"VpcConfigurationDescription":{"type":"structure","required":["SubnetIds","RoleARN","SecurityGroupIds","VpcId"],"members":{"SubnetIds":{"shape":"S2c"},"RoleARN":{},"SecurityGroupIds":{"shape":"S2d"},"VpcId":{}}}}},"SplunkDestinationDescription":{"type":"structure","members":{"HECEndpoint":{},"HECEndpointType":{},"HECToken":{},"HECAcknowledgmentTimeoutInSeconds":{"type":"integer"},"RetryOptions":{"shape":"S2j"},"S3BackupMode":{},"S3DestinationDescription":{"shape":"S3s"},"ProcessingConfiguration":{"shape":"Sq"},"CloudWatchLoggingOptions":{"shape":"Sl"}}},"HttpEndpointDestinationDescription":{"type":"structure","members":{"EndpointConfiguration":{"type":"structure","members":{"Url":{"shape":"S2o"},"Name":{}}},"BufferingHints":{"shape":"S2r"},"CloudWatchLoggingOptions":{"shape":"Sl"},"RequestConfiguration":{"shape":"S2u"},"ProcessingConfiguration":{"shape":"Sq"},"RoleARN":{},"RetryOptions":{"shape":"S30"},"S3BackupMode":{},"S3DestinationDescription":{"shape":"S3s"}}}}}},"HasMoreDestinations":{"type":"boolean"}}}}}},"ListDeliveryStreams":{"input":{"type":"structure","members":{"Limit":{"type":"integer"},"DeliveryStreamType":{},"ExclusiveStartDeliveryStreamName":{}}},"output":{"type":"structure","required":["DeliveryStreamNames","HasMoreDeliveryStreams"],"members":{"DeliveryStreamNames":{"type":"list","member":{}},"HasMoreDeliveryStreams":{"type":"boolean"}}}},"ListTagsForDeliveryStream":{"input":{"type":"structure","required":["DeliveryStreamName"],"members":{"DeliveryStreamName":{},"ExclusiveStartTagKey":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","required":["Tags","HasMoreTags"],"members":{"Tags":{"type":"list","member":{"shape":"S34"}},"HasMoreTags":{"type":"boolean"}}}},"PutRecord":{"input":{"type":"structure","required":["DeliveryStreamName","Record"],"members":{"DeliveryStreamName":{},"Record":{"shape":"S49"}}},"output":{"type":"structure","required":["RecordId"],"members":{"RecordId":{},"Encrypted":{"type":"boolean"}}}},"PutRecordBatch":{"input":{"type":"structure","required":["DeliveryStreamName","Records"],"members":{"DeliveryStreamName":{},"Records":{"type":"list","member":{"shape":"S49"}}}},"output":{"type":"structure","required":["FailedPutCount","RequestResponses"],"members":{"FailedPutCount":{"type":"integer"},"Encrypted":{"type":"boolean"},"RequestResponses":{"type":"list","member":{"type":"structure","members":{"RecordId":{},"ErrorCode":{},"ErrorMessage":{}}}}}}},"StartDeliveryStreamEncryption":{"input":{"type":"structure","required":["DeliveryStreamName"],"members":{"DeliveryStreamName":{},"DeliveryStreamEncryptionConfigurationInput":{"shape":"S7"}}},"output":{"type":"structure","members":{}}},"StopDeliveryStreamEncryption":{"input":{"type":"structure","required":["DeliveryStreamName"],"members":{"DeliveryStreamName":{}}},"output":{"type":"structure","members":{}}},"TagDeliveryStream":{"input":{"type":"structure","required":["DeliveryStreamName","Tags"],"members":{"DeliveryStreamName":{},"Tags":{"shape":"S33"}}},"output":{"type":"structure","members":{}}},"UntagDeliveryStream":{"input":{"type":"structure","required":["DeliveryStreamName","TagKeys"],"members":{"DeliveryStreamName":{},"TagKeys":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"UpdateDestination":{"input":{"type":"structure","required":["DeliveryStreamName","CurrentDeliveryStreamVersionId","DestinationId"],"members":{"DeliveryStreamName":{},"CurrentDeliveryStreamVersionId":{},"DestinationId":{},"S3DestinationUpdate":{"shape":"S4u","deprecated":true},"ExtendedS3DestinationUpdate":{"type":"structure","members":{"RoleARN":{},"BucketARN":{},"Prefix":{},"ErrorOutputPrefix":{},"BufferingHints":{"shape":"Se"},"CompressionFormat":{},"EncryptionConfiguration":{"shape":"Si"},"CloudWatchLoggingOptions":{"shape":"Sl"},"ProcessingConfiguration":{"shape":"Sq"},"S3BackupMode":{},"S3BackupUpdate":{"shape":"S4u"},"DataFormatConversionConfiguration":{"shape":"Sz"}}},"RedshiftDestinationUpdate":{"type":"structure","members":{"RoleARN":{},"ClusterJDBCURL":{},"CopyCommand":{"shape":"S1q"},"Username":{"shape":"S1u"},"Password":{"shape":"S1v"},"RetryOptions":{"shape":"S1w"},"S3Update":{"shape":"S4u"},"ProcessingConfiguration":{"shape":"Sq"},"S3BackupMode":{},"S3BackupUpdate":{"shape":"S4u"},"CloudWatchLoggingOptions":{"shape":"Sl"}}},"ElasticsearchDestinationUpdate":{"type":"structure","members":{"RoleARN":{},"DomainARN":{},"ClusterEndpoint":{},"IndexName":{},"TypeName":{},"IndexRotationPeriod":{},"BufferingHints":{"shape":"S25"},"RetryOptions":{"shape":"S28"},"S3Update":{"shape":"S4u"},"ProcessingConfiguration":{"shape":"Sq"},"CloudWatchLoggingOptions":{"shape":"Sl"}}},"SplunkDestinationUpdate":{"type":"structure","members":{"HECEndpoint":{},"HECEndpointType":{},"HECToken":{},"HECAcknowledgmentTimeoutInSeconds":{"type":"integer"},"RetryOptions":{"shape":"S2j"},"S3BackupMode":{},"S3Update":{"shape":"S4u"},"ProcessingConfiguration":{"shape":"Sq"},"CloudWatchLoggingOptions":{"shape":"Sl"}}},"HttpEndpointDestinationUpdate":{"type":"structure","members":{"EndpointConfiguration":{"shape":"S2n"},"BufferingHints":{"shape":"S2r"},"CloudWatchLoggingOptions":{"shape":"Sl"},"RequestConfiguration":{"shape":"S2u"},"ProcessingConfiguration":{"shape":"Sq"},"RoleARN":{},"RetryOptions":{"shape":"S30"},"S3BackupMode":{},"S3Update":{"shape":"S4u"}}}}},"output":{"type":"structure","members":{}}}},"shapes":{"S7":{"type":"structure","required":["KeyType"],"members":{"KeyARN":{},"KeyType":{}}},"Sa":{"type":"structure","required":["RoleARN","BucketARN"],"members":{"RoleARN":{},"BucketARN":{},"Prefix":{},"ErrorOutputPrefix":{},"BufferingHints":{"shape":"Se"},"CompressionFormat":{},"EncryptionConfiguration":{"shape":"Si"},"CloudWatchLoggingOptions":{"shape":"Sl"}}},"Se":{"type":"structure","members":{"SizeInMBs":{"type":"integer"},"IntervalInSeconds":{"type":"integer"}}},"Si":{"type":"structure","members":{"NoEncryptionConfig":{},"KMSEncryptionConfig":{"type":"structure","required":["AWSKMSKeyARN"],"members":{"AWSKMSKeyARN":{}}}}},"Sl":{"type":"structure","members":{"Enabled":{"type":"boolean"},"LogGroupName":{},"LogStreamName":{}}},"Sq":{"type":"structure","members":{"Enabled":{"type":"boolean"},"Processors":{"type":"list","member":{"type":"structure","required":["Type"],"members":{"Type":{},"Parameters":{"type":"list","member":{"type":"structure","required":["ParameterName","ParameterValue"],"members":{"ParameterName":{},"ParameterValue":{}}}}}}}}},"Sz":{"type":"structure","members":{"SchemaConfiguration":{"type":"structure","members":{"RoleARN":{},"CatalogId":{},"DatabaseName":{},"TableName":{},"Region":{},"VersionId":{}}},"InputFormatConfiguration":{"type":"structure","members":{"Deserializer":{"type":"structure","members":{"OpenXJsonSerDe":{"type":"structure","members":{"ConvertDotsInJsonKeysToUnderscores":{"type":"boolean"},"CaseInsensitive":{"type":"boolean"},"ColumnToJsonKeyMappings":{"type":"map","key":{},"value":{}}}},"HiveJsonSerDe":{"type":"structure","members":{"TimestampFormats":{"type":"list","member":{}}}}}}}},"OutputFormatConfiguration":{"type":"structure","members":{"Serializer":{"type":"structure","members":{"ParquetSerDe":{"type":"structure","members":{"BlockSizeBytes":{"type":"integer"},"PageSizeBytes":{"type":"integer"},"Compression":{},"EnableDictionaryCompression":{"type":"boolean"},"MaxPaddingBytes":{"type":"integer"},"WriterVersion":{}}},"OrcSerDe":{"type":"structure","members":{"StripeSizeBytes":{"type":"integer"},"BlockSizeBytes":{"type":"integer"},"RowIndexStride":{"type":"integer"},"EnablePadding":{"type":"boolean"},"PaddingTolerance":{"type":"double"},"Compression":{},"BloomFilterColumns":{"type":"list","member":{}},"BloomFilterFalsePositiveProbability":{"type":"double"},"DictionaryKeyThreshold":{"type":"double"},"FormatVersion":{}}}}}}},"Enabled":{"type":"boolean"}}},"S1q":{"type":"structure","required":["DataTableName"],"members":{"DataTableName":{},"DataTableColumns":{},"CopyOptions":{}}},"S1u":{"type":"string","sensitive":true},"S1v":{"type":"string","sensitive":true},"S1w":{"type":"structure","members":{"DurationInSeconds":{"type":"integer"}}},"S25":{"type":"structure","members":{"IntervalInSeconds":{"type":"integer"},"SizeInMBs":{"type":"integer"}}},"S28":{"type":"structure","members":{"DurationInSeconds":{"type":"integer"}}},"S2c":{"type":"list","member":{}},"S2d":{"type":"list","member":{}},"S2j":{"type":"structure","members":{"DurationInSeconds":{"type":"integer"}}},"S2n":{"type":"structure","required":["Url"],"members":{"Url":{"shape":"S2o"},"Name":{},"AccessKey":{"type":"string","sensitive":true}}},"S2o":{"type":"string","sensitive":true},"S2r":{"type":"structure","members":{"SizeInMBs":{"type":"integer"},"IntervalInSeconds":{"type":"integer"}}},"S2u":{"type":"structure","members":{"ContentEncoding":{},"CommonAttributes":{"type":"list","member":{"type":"structure","required":["AttributeName","AttributeValue"],"members":{"AttributeName":{"type":"string","sensitive":true},"AttributeValue":{"type":"string","sensitive":true}}}}}},"S30":{"type":"structure","members":{"DurationInSeconds":{"type":"integer"}}},"S33":{"type":"list","member":{"shape":"S34"}},"S34":{"type":"structure","required":["Key"],"members":{"Key":{},"Value":{}}},"S3h":{"type":"structure","required":["Type","Details"],"members":{"Type":{},"Details":{}}},"S3s":{"type":"structure","required":["RoleARN","BucketARN","BufferingHints","CompressionFormat","EncryptionConfiguration"],"members":{"RoleARN":{},"BucketARN":{},"Prefix":{},"ErrorOutputPrefix":{},"BufferingHints":{"shape":"Se"},"CompressionFormat":{},"EncryptionConfiguration":{"shape":"Si"},"CloudWatchLoggingOptions":{"shape":"Sl"}}},"S49":{"type":"structure","required":["Data"],"members":{"Data":{"type":"blob"}}},"S4u":{"type":"structure","members":{"RoleARN":{},"BucketARN":{},"Prefix":{},"ErrorOutputPrefix":{},"BufferingHints":{"shape":"Se"},"CompressionFormat":{},"EncryptionConfiguration":{"shape":"Si"},"CloudWatchLoggingOptions":{"shape":"Sl"}}}}}

/***/ }),
/* 237 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{}}

/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['gamelift'] = {};
	AWS.GameLift = Service.defineService('gamelift', ['2015-10-01']);
	Object.defineProperty(apiLoader.services['gamelift'], '2015-10-01', {
	  get: function get() {
	    var model = __webpack_require__(239);
	    model.paginators = __webpack_require__(240).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.GameLift;


/***/ }),
/* 239 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-10-01","endpointPrefix":"gamelift","jsonVersion":"1.1","protocol":"json","serviceFullName":"Amazon GameLift","serviceId":"GameLift","signatureVersion":"v4","targetPrefix":"GameLift","uid":"gamelift-2015-10-01"},"operations":{"AcceptMatch":{"input":{"type":"structure","required":["TicketId","PlayerIds","AcceptanceType"],"members":{"TicketId":{},"PlayerIds":{"shape":"S3"},"AcceptanceType":{}}},"output":{"type":"structure","members":{}}},"ClaimGameServer":{"input":{"type":"structure","required":["GameServerGroupName"],"members":{"GameServerGroupName":{},"GameServerId":{},"GameServerData":{}}},"output":{"type":"structure","members":{"GameServer":{"shape":"Sc"}}}},"CreateAlias":{"input":{"type":"structure","required":["Name","RoutingStrategy"],"members":{"Name":{},"Description":{},"RoutingStrategy":{"shape":"Sm"},"Tags":{"shape":"Sq"}}},"output":{"type":"structure","members":{"Alias":{"shape":"Sv"}}}},"CreateBuild":{"input":{"type":"structure","members":{"Name":{},"Version":{},"StorageLocation":{"shape":"Sz"},"OperatingSystem":{},"Tags":{"shape":"Sq"}}},"output":{"type":"structure","members":{"Build":{"shape":"S13"},"UploadCredentials":{"shape":"S18"},"StorageLocation":{"shape":"Sz"}}}},"CreateFleet":{"input":{"type":"structure","required":["Name","EC2InstanceType"],"members":{"Name":{},"Description":{},"BuildId":{},"ScriptId":{},"ServerLaunchPath":{},"ServerLaunchParameters":{},"LogPaths":{"shape":"S3"},"EC2InstanceType":{},"EC2InboundPermissions":{"shape":"S1d"},"NewGameSessionProtectionPolicy":{},"RuntimeConfiguration":{"shape":"S1j"},"ResourceCreationLimitPolicy":{"shape":"S1p"},"MetricGroups":{"shape":"S1r"},"PeerVpcAwsAccountId":{},"PeerVpcId":{},"FleetType":{},"InstanceRoleArn":{},"CertificateConfiguration":{"shape":"S1u"},"Locations":{"shape":"S1w"},"Tags":{"shape":"Sq"}}},"output":{"type":"structure","members":{"FleetAttributes":{"shape":"S20"},"LocationStates":{"shape":"S27"}}}},"CreateFleetLocations":{"input":{"type":"structure","required":["FleetId","Locations"],"members":{"FleetId":{},"Locations":{"shape":"S1w"}}},"output":{"type":"structure","members":{"FleetId":{},"FleetArn":{},"LocationStates":{"shape":"S27"}}}},"CreateGameServerGroup":{"input":{"type":"structure","required":["GameServerGroupName","RoleArn","MinSize","MaxSize","LaunchTemplate","InstanceDefinitions"],"members":{"GameServerGroupName":{},"RoleArn":{},"MinSize":{"type":"integer"},"MaxSize":{"type":"integer"},"LaunchTemplate":{"type":"structure","members":{"LaunchTemplateId":{},"LaunchTemplateName":{},"Version":{}}},"InstanceDefinitions":{"shape":"S2i"},"AutoScalingPolicy":{"type":"structure","required":["TargetTrackingConfiguration"],"members":{"EstimatedInstanceWarmup":{"type":"integer"},"TargetTrackingConfiguration":{"type":"structure","required":["TargetValue"],"members":{"TargetValue":{"type":"double"}}}}},"BalancingStrategy":{},"GameServerProtectionPolicy":{},"VpcSubnets":{"type":"list","member":{}},"Tags":{"shape":"Sq"}}},"output":{"type":"structure","members":{"GameServerGroup":{"shape":"S2u"}}}},"CreateGameSession":{"input":{"type":"structure","required":["MaximumPlayerSessionCount"],"members":{"FleetId":{},"AliasId":{},"MaximumPlayerSessionCount":{"type":"integer"},"Name":{},"GameProperties":{"shape":"S31"},"CreatorId":{},"GameSessionId":{},"IdempotencyToken":{},"GameSessionData":{},"Location":{}}},"output":{"type":"structure","members":{"GameSession":{"shape":"S38"}}}},"CreateGameSessionQueue":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"TimeoutInSeconds":{"type":"integer"},"PlayerLatencyPolicies":{"shape":"S3h"},"Destinations":{"shape":"S3j"},"FilterConfiguration":{"shape":"S3m"},"PriorityConfiguration":{"shape":"S3o"},"CustomEventData":{},"NotificationTarget":{},"Tags":{"shape":"Sq"}}},"output":{"type":"structure","members":{"GameSessionQueue":{"shape":"S3u"}}}},"CreateMatchmakingConfiguration":{"input":{"type":"structure","required":["Name","RequestTimeoutSeconds","AcceptanceRequired","RuleSetName"],"members":{"Name":{},"Description":{},"GameSessionQueueArns":{"shape":"S3x"},"RequestTimeoutSeconds":{"type":"integer"},"AcceptanceTimeoutSeconds":{"type":"integer"},"AcceptanceRequired":{"type":"boolean"},"RuleSetName":{},"NotificationTarget":{},"AdditionalPlayerCount":{"type":"integer"},"CustomEventData":{},"GameProperties":{"shape":"S31"},"GameSessionData":{},"BackfillMode":{},"FlexMatchMode":{},"Tags":{"shape":"Sq"}}},"output":{"type":"structure","members":{"Configuration":{"shape":"S48"}}}},"CreateMatchmakingRuleSet":{"input":{"type":"structure","required":["Name","RuleSetBody"],"members":{"Name":{},"RuleSetBody":{},"Tags":{"shape":"Sq"}}},"output":{"type":"structure","required":["RuleSet"],"members":{"RuleSet":{"shape":"S4e"}}}},"CreatePlayerSession":{"input":{"type":"structure","required":["GameSessionId","PlayerId"],"members":{"GameSessionId":{},"PlayerId":{},"PlayerData":{}}},"output":{"type":"structure","members":{"PlayerSession":{"shape":"S4i"}}}},"CreatePlayerSessions":{"input":{"type":"structure","required":["GameSessionId","PlayerIds"],"members":{"GameSessionId":{},"PlayerIds":{"type":"list","member":{}},"PlayerDataMap":{"type":"map","key":{},"value":{}}}},"output":{"type":"structure","members":{"PlayerSessions":{"shape":"S4p"}}}},"CreateScript":{"input":{"type":"structure","members":{"Name":{},"Version":{},"StorageLocation":{"shape":"Sz"},"ZipFile":{"type":"blob"},"Tags":{"shape":"Sq"}}},"output":{"type":"structure","members":{"Script":{"shape":"S4t"}}}},"CreateVpcPeeringAuthorization":{"input":{"type":"structure","required":["GameLiftAwsAccountId","PeerVpcId"],"members":{"GameLiftAwsAccountId":{},"PeerVpcId":{}}},"output":{"type":"structure","members":{"VpcPeeringAuthorization":{"shape":"S4w"}}}},"CreateVpcPeeringConnection":{"input":{"type":"structure","required":["FleetId","PeerVpcAwsAccountId","PeerVpcId"],"members":{"FleetId":{},"PeerVpcAwsAccountId":{},"PeerVpcId":{}}},"output":{"type":"structure","members":{}}},"DeleteAlias":{"input":{"type":"structure","required":["AliasId"],"members":{"AliasId":{}}}},"DeleteBuild":{"input":{"type":"structure","required":["BuildId"],"members":{"BuildId":{}}}},"DeleteFleet":{"input":{"type":"structure","required":["FleetId"],"members":{"FleetId":{}}}},"DeleteFleetLocations":{"input":{"type":"structure","required":["FleetId","Locations"],"members":{"FleetId":{},"Locations":{"shape":"S3n"}}},"output":{"type":"structure","members":{"FleetId":{},"FleetArn":{},"LocationStates":{"shape":"S27"}}}},"DeleteGameServerGroup":{"input":{"type":"structure","required":["GameServerGroupName"],"members":{"GameServerGroupName":{},"DeleteOption":{}}},"output":{"type":"structure","members":{"GameServerGroup":{"shape":"S2u"}}}},"DeleteGameSessionQueue":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{}}},"DeleteMatchmakingConfiguration":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{}}},"DeleteMatchmakingRuleSet":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{}}},"DeleteScalingPolicy":{"input":{"type":"structure","required":["Name","FleetId"],"members":{"Name":{},"FleetId":{}}}},"DeleteScript":{"input":{"type":"structure","required":["ScriptId"],"members":{"ScriptId":{}}}},"DeleteVpcPeeringAuthorization":{"input":{"type":"structure","required":["GameLiftAwsAccountId","PeerVpcId"],"members":{"GameLiftAwsAccountId":{},"PeerVpcId":{}}},"output":{"type":"structure","members":{}}},"DeleteVpcPeeringConnection":{"input":{"type":"structure","required":["FleetId","VpcPeeringConnectionId"],"members":{"FleetId":{},"VpcPeeringConnectionId":{}}},"output":{"type":"structure","members":{}}},"DeregisterGameServer":{"input":{"type":"structure","required":["GameServerGroupName","GameServerId"],"members":{"GameServerGroupName":{},"GameServerId":{}}}},"DescribeAlias":{"input":{"type":"structure","required":["AliasId"],"members":{"AliasId":{}}},"output":{"type":"structure","members":{"Alias":{"shape":"Sv"}}}},"DescribeBuild":{"input":{"type":"structure","required":["BuildId"],"members":{"BuildId":{}}},"output":{"type":"structure","members":{"Build":{"shape":"S13"}}}},"DescribeEC2InstanceLimits":{"input":{"type":"structure","members":{"EC2InstanceType":{},"Location":{}}},"output":{"type":"structure","members":{"EC2InstanceLimits":{"type":"list","member":{"type":"structure","members":{"EC2InstanceType":{},"CurrentInstances":{"type":"integer"},"InstanceLimit":{"type":"integer"},"Location":{}}}}}}},"DescribeFleetAttributes":{"input":{"type":"structure","members":{"FleetIds":{"shape":"S5v"},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"FleetAttributes":{"type":"list","member":{"shape":"S20"}},"NextToken":{}}}},"DescribeFleetCapacity":{"input":{"type":"structure","members":{"FleetIds":{"shape":"S5v"},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"FleetCapacity":{"type":"list","member":{"shape":"S61"}},"NextToken":{}}}},"DescribeFleetEvents":{"input":{"type":"structure","required":["FleetId"],"members":{"FleetId":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Events":{"type":"list","member":{"type":"structure","members":{"EventId":{},"ResourceId":{},"EventCode":{},"Message":{},"EventTime":{"type":"timestamp"},"PreSignedLogUrl":{}}}},"NextToken":{}}}},"DescribeFleetLocationAttributes":{"input":{"type":"structure","required":["FleetId"],"members":{"FleetId":{},"Locations":{"shape":"S3n"},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"FleetId":{},"FleetArn":{},"LocationAttributes":{"type":"list","member":{"type":"structure","members":{"LocationState":{"shape":"S28"},"StoppedActions":{"shape":"S25"},"UpdateStatus":{}}}},"NextToken":{}}}},"DescribeFleetLocationCapacity":{"input":{"type":"structure","required":["FleetId","Location"],"members":{"FleetId":{},"Location":{}}},"output":{"type":"structure","members":{"FleetCapacity":{"shape":"S61"}}}},"DescribeFleetLocationUtilization":{"input":{"type":"structure","required":["FleetId","Location"],"members":{"FleetId":{},"Location":{}}},"output":{"type":"structure","members":{"FleetUtilization":{"shape":"S6h"}}}},"DescribeFleetPortSettings":{"input":{"type":"structure","required":["FleetId"],"members":{"FleetId":{},"Location":{}}},"output":{"type":"structure","members":{"FleetId":{},"FleetArn":{},"InboundPermissions":{"shape":"S1d"},"UpdateStatus":{},"Location":{}}}},"DescribeFleetUtilization":{"input":{"type":"structure","members":{"FleetIds":{"shape":"S5v"},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"FleetUtilization":{"type":"list","member":{"shape":"S6h"}},"NextToken":{}}}},"DescribeGameServer":{"input":{"type":"structure","required":["GameServerGroupName","GameServerId"],"members":{"GameServerGroupName":{},"GameServerId":{}}},"output":{"type":"structure","members":{"GameServer":{"shape":"Sc"}}}},"DescribeGameServerGroup":{"input":{"type":"structure","required":["GameServerGroupName"],"members":{"GameServerGroupName":{}}},"output":{"type":"structure","members":{"GameServerGroup":{"shape":"S2u"}}}},"DescribeGameServerInstances":{"input":{"type":"structure","required":["GameServerGroupName"],"members":{"GameServerGroupName":{},"InstanceIds":{"type":"list","member":{}},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"GameServerInstances":{"type":"list","member":{"type":"structure","members":{"GameServerGroupName":{},"GameServerGroupArn":{},"InstanceId":{},"InstanceStatus":{}}}},"NextToken":{}}}},"DescribeGameSessionDetails":{"input":{"type":"structure","members":{"FleetId":{},"GameSessionId":{},"AliasId":{},"Location":{},"StatusFilter":{},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"GameSessionDetails":{"type":"list","member":{"type":"structure","members":{"GameSession":{"shape":"S38"},"ProtectionPolicy":{}}}},"NextToken":{}}}},"DescribeGameSessionPlacement":{"input":{"type":"structure","required":["PlacementId"],"members":{"PlacementId":{}}},"output":{"type":"structure","members":{"GameSessionPlacement":{"shape":"S73"}}}},"DescribeGameSessionQueues":{"input":{"type":"structure","members":{"Names":{"type":"list","member":{}},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"GameSessionQueues":{"type":"list","member":{"shape":"S3u"}},"NextToken":{}}}},"DescribeGameSessions":{"input":{"type":"structure","members":{"FleetId":{},"GameSessionId":{},"AliasId":{},"Location":{},"StatusFilter":{},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"GameSessions":{"shape":"S7g"},"NextToken":{}}}},"DescribeInstances":{"input":{"type":"structure","required":["FleetId"],"members":{"FleetId":{},"InstanceId":{},"Limit":{"type":"integer"},"NextToken":{},"Location":{}}},"output":{"type":"structure","members":{"Instances":{"type":"list","member":{"type":"structure","members":{"FleetId":{},"FleetArn":{},"InstanceId":{},"IpAddress":{},"DnsName":{},"OperatingSystem":{},"Type":{},"Status":{},"CreationTime":{"type":"timestamp"},"Location":{}}}},"NextToken":{}}}},"DescribeMatchmaking":{"input":{"type":"structure","required":["TicketIds"],"members":{"TicketIds":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"TicketList":{"type":"list","member":{"shape":"S7r"}}}}},"DescribeMatchmakingConfigurations":{"input":{"type":"structure","members":{"Names":{"type":"list","member":{}},"RuleSetName":{},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Configurations":{"type":"list","member":{"shape":"S48"}},"NextToken":{}}}},"DescribeMatchmakingRuleSets":{"input":{"type":"structure","members":{"Names":{"type":"list","member":{}},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","required":["RuleSets"],"members":{"RuleSets":{"type":"list","member":{"shape":"S4e"}},"NextToken":{}}}},"DescribePlayerSessions":{"input":{"type":"structure","members":{"GameSessionId":{},"PlayerId":{},"PlayerSessionId":{},"PlayerSessionStatusFilter":{},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"PlayerSessions":{"shape":"S4p"},"NextToken":{}}}},"DescribeRuntimeConfiguration":{"input":{"type":"structure","required":["FleetId"],"members":{"FleetId":{}}},"output":{"type":"structure","members":{"RuntimeConfiguration":{"shape":"S1j"}}}},"DescribeScalingPolicies":{"input":{"type":"structure","required":["FleetId"],"members":{"FleetId":{},"StatusFilter":{},"Limit":{"type":"integer"},"NextToken":{},"Location":{}}},"output":{"type":"structure","members":{"ScalingPolicies":{"type":"list","member":{"type":"structure","members":{"FleetId":{},"FleetArn":{},"Name":{},"Status":{},"ScalingAdjustment":{"type":"integer"},"ScalingAdjustmentType":{},"ComparisonOperator":{},"Threshold":{"type":"double"},"EvaluationPeriods":{"type":"integer"},"MetricName":{},"PolicyType":{},"TargetConfiguration":{"shape":"S8s"},"UpdateStatus":{},"Location":{}}}},"NextToken":{}}}},"DescribeScript":{"input":{"type":"structure","required":["ScriptId"],"members":{"ScriptId":{}}},"output":{"type":"structure","members":{"Script":{"shape":"S4t"}}}},"DescribeVpcPeeringAuthorizations":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"VpcPeeringAuthorizations":{"type":"list","member":{"shape":"S4w"}}}}},"DescribeVpcPeeringConnections":{"input":{"type":"structure","members":{"FleetId":{}}},"output":{"type":"structure","members":{"VpcPeeringConnections":{"type":"list","member":{"type":"structure","members":{"FleetId":{},"FleetArn":{},"IpV4CidrBlock":{},"VpcPeeringConnectionId":{},"Status":{"type":"structure","members":{"Code":{},"Message":{}}},"PeerVpcId":{},"GameLiftVpcId":{}}}}}}},"GetGameSessionLogUrl":{"input":{"type":"structure","required":["GameSessionId"],"members":{"GameSessionId":{}}},"output":{"type":"structure","members":{"PreSignedUrl":{}}}},"GetInstanceAccess":{"input":{"type":"structure","required":["FleetId","InstanceId"],"members":{"FleetId":{},"InstanceId":{}}},"output":{"type":"structure","members":{"InstanceAccess":{"type":"structure","members":{"FleetId":{},"InstanceId":{},"IpAddress":{},"OperatingSystem":{},"Credentials":{"type":"structure","members":{"UserName":{},"Secret":{}},"sensitive":true}}}}}},"ListAliases":{"input":{"type":"structure","members":{"RoutingStrategyType":{},"Name":{},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Aliases":{"type":"list","member":{"shape":"Sv"}},"NextToken":{}}}},"ListBuilds":{"input":{"type":"structure","members":{"Status":{},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Builds":{"type":"list","member":{"shape":"S13"}},"NextToken":{}}}},"ListFleets":{"input":{"type":"structure","members":{"BuildId":{},"ScriptId":{},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"FleetIds":{"type":"list","member":{}},"NextToken":{}}}},"ListGameServerGroups":{"input":{"type":"structure","members":{"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"GameServerGroups":{"type":"list","member":{"shape":"S2u"}},"NextToken":{}}}},"ListGameServers":{"input":{"type":"structure","required":["GameServerGroupName"],"members":{"GameServerGroupName":{},"SortOrder":{},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"GameServers":{"type":"list","member":{"shape":"Sc"}},"NextToken":{}}}},"ListScripts":{"input":{"type":"structure","members":{"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Scripts":{"type":"list","member":{"shape":"S4t"}},"NextToken":{}}}},"ListTagsForResource":{"input":{"type":"structure","required":["ResourceARN"],"members":{"ResourceARN":{}}},"output":{"type":"structure","members":{"Tags":{"shape":"Sq"}}}},"PutScalingPolicy":{"input":{"type":"structure","required":["Name","FleetId","MetricName"],"members":{"Name":{},"FleetId":{},"ScalingAdjustment":{"type":"integer"},"ScalingAdjustmentType":{},"Threshold":{"type":"double"},"ComparisonOperator":{},"EvaluationPeriods":{"type":"integer"},"MetricName":{},"PolicyType":{},"TargetConfiguration":{"shape":"S8s"}}},"output":{"type":"structure","members":{"Name":{}}}},"RegisterGameServer":{"input":{"type":"structure","required":["GameServerGroupName","GameServerId","InstanceId"],"members":{"GameServerGroupName":{},"GameServerId":{},"InstanceId":{},"ConnectionInfo":{},"GameServerData":{}}},"output":{"type":"structure","members":{"GameServer":{"shape":"Sc"}}}},"RequestUploadCredentials":{"input":{"type":"structure","required":["BuildId"],"members":{"BuildId":{}}},"output":{"type":"structure","members":{"UploadCredentials":{"shape":"S18"},"StorageLocation":{"shape":"Sz"}}}},"ResolveAlias":{"input":{"type":"structure","required":["AliasId"],"members":{"AliasId":{}}},"output":{"type":"structure","members":{"FleetId":{},"FleetArn":{}}}},"ResumeGameServerGroup":{"input":{"type":"structure","required":["GameServerGroupName","ResumeActions"],"members":{"GameServerGroupName":{},"ResumeActions":{"shape":"S2x"}}},"output":{"type":"structure","members":{"GameServerGroup":{"shape":"S2u"}}}},"SearchGameSessions":{"input":{"type":"structure","members":{"FleetId":{},"AliasId":{},"Location":{},"FilterExpression":{},"SortExpression":{},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"GameSessions":{"shape":"S7g"},"NextToken":{}}}},"StartFleetActions":{"input":{"type":"structure","required":["FleetId","Actions"],"members":{"FleetId":{},"Actions":{"shape":"S25"},"Location":{}}},"output":{"type":"structure","members":{"FleetId":{},"FleetArn":{}}}},"StartGameSessionPlacement":{"input":{"type":"structure","required":["PlacementId","GameSessionQueueName","MaximumPlayerSessionCount"],"members":{"PlacementId":{},"GameSessionQueueName":{},"GameProperties":{"shape":"S31"},"MaximumPlayerSessionCount":{"type":"integer"},"GameSessionName":{},"PlayerLatencies":{"shape":"S75"},"DesiredPlayerSessions":{"type":"list","member":{"type":"structure","members":{"PlayerId":{},"PlayerData":{}}}},"GameSessionData":{}}},"output":{"type":"structure","members":{"GameSessionPlacement":{"shape":"S73"}}}},"StartMatchBackfill":{"input":{"type":"structure","required":["ConfigurationName","Players"],"members":{"TicketId":{},"ConfigurationName":{},"GameSessionArn":{},"Players":{"shape":"S7u"}}},"output":{"type":"structure","members":{"MatchmakingTicket":{"shape":"S7r"}}}},"StartMatchmaking":{"input":{"type":"structure","required":["ConfigurationName","Players"],"members":{"TicketId":{},"ConfigurationName":{},"Players":{"shape":"S7u"}}},"output":{"type":"structure","members":{"MatchmakingTicket":{"shape":"S7r"}}}},"StopFleetActions":{"input":{"type":"structure","required":["FleetId","Actions"],"members":{"FleetId":{},"Actions":{"shape":"S25"},"Location":{}}},"output":{"type":"structure","members":{"FleetId":{},"FleetArn":{}}}},"StopGameSessionPlacement":{"input":{"type":"structure","required":["PlacementId"],"members":{"PlacementId":{}}},"output":{"type":"structure","members":{"GameSessionPlacement":{"shape":"S73"}}}},"StopMatchmaking":{"input":{"type":"structure","required":["TicketId"],"members":{"TicketId":{}}},"output":{"type":"structure","members":{}}},"SuspendGameServerGroup":{"input":{"type":"structure","required":["GameServerGroupName","SuspendActions"],"members":{"GameServerGroupName":{},"SuspendActions":{"shape":"S2x"}}},"output":{"type":"structure","members":{"GameServerGroup":{"shape":"S2u"}}}},"TagResource":{"input":{"type":"structure","required":["ResourceARN","Tags"],"members":{"ResourceARN":{},"Tags":{"shape":"Sq"}}},"output":{"type":"structure","members":{}}},"UntagResource":{"input":{"type":"structure","required":["ResourceARN","TagKeys"],"members":{"ResourceARN":{},"TagKeys":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"UpdateAlias":{"input":{"type":"structure","required":["AliasId"],"members":{"AliasId":{},"Name":{},"Description":{},"RoutingStrategy":{"shape":"Sm"}}},"output":{"type":"structure","members":{"Alias":{"shape":"Sv"}}}},"UpdateBuild":{"input":{"type":"structure","required":["BuildId"],"members":{"BuildId":{},"Name":{},"Version":{}}},"output":{"type":"structure","members":{"Build":{"shape":"S13"}}}},"UpdateFleetAttributes":{"input":{"type":"structure","required":["FleetId"],"members":{"FleetId":{},"Name":{},"Description":{},"NewGameSessionProtectionPolicy":{},"ResourceCreationLimitPolicy":{"shape":"S1p"},"MetricGroups":{"shape":"S1r"}}},"output":{"type":"structure","members":{"FleetId":{}}}},"UpdateFleetCapacity":{"input":{"type":"structure","required":["FleetId"],"members":{"FleetId":{},"DesiredInstances":{"type":"integer"},"MinSize":{"type":"integer"},"MaxSize":{"type":"integer"},"Location":{}}},"output":{"type":"structure","members":{"FleetId":{},"FleetArn":{},"Location":{}}}},"UpdateFleetPortSettings":{"input":{"type":"structure","required":["FleetId"],"members":{"FleetId":{},"InboundPermissionAuthorizations":{"shape":"S1d"},"InboundPermissionRevocations":{"shape":"S1d"}}},"output":{"type":"structure","members":{"FleetId":{}}}},"UpdateGameServer":{"input":{"type":"structure","required":["GameServerGroupName","GameServerId"],"members":{"GameServerGroupName":{},"GameServerId":{},"GameServerData":{},"UtilizationStatus":{},"HealthCheck":{}}},"output":{"type":"structure","members":{"GameServer":{"shape":"Sc"}}}},"UpdateGameServerGroup":{"input":{"type":"structure","required":["GameServerGroupName"],"members":{"GameServerGroupName":{},"RoleArn":{},"InstanceDefinitions":{"shape":"S2i"},"GameServerProtectionPolicy":{},"BalancingStrategy":{}}},"output":{"type":"structure","members":{"GameServerGroup":{"shape":"S2u"}}}},"UpdateGameSession":{"input":{"type":"structure","required":["GameSessionId"],"members":{"GameSessionId":{},"MaximumPlayerSessionCount":{"type":"integer"},"Name":{},"PlayerSessionCreationPolicy":{},"ProtectionPolicy":{}}},"output":{"type":"structure","members":{"GameSession":{"shape":"S38"}}}},"UpdateGameSessionQueue":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"TimeoutInSeconds":{"type":"integer"},"PlayerLatencyPolicies":{"shape":"S3h"},"Destinations":{"shape":"S3j"},"FilterConfiguration":{"shape":"S3m"},"PriorityConfiguration":{"shape":"S3o"},"CustomEventData":{},"NotificationTarget":{}}},"output":{"type":"structure","members":{"GameSessionQueue":{"shape":"S3u"}}}},"UpdateMatchmakingConfiguration":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"Description":{},"GameSessionQueueArns":{"shape":"S3x"},"RequestTimeoutSeconds":{"type":"integer"},"AcceptanceTimeoutSeconds":{"type":"integer"},"AcceptanceRequired":{"type":"boolean"},"RuleSetName":{},"NotificationTarget":{},"AdditionalPlayerCount":{"type":"integer"},"CustomEventData":{},"GameProperties":{"shape":"S31"},"GameSessionData":{},"BackfillMode":{},"FlexMatchMode":{}}},"output":{"type":"structure","members":{"Configuration":{"shape":"S48"}}}},"UpdateRuntimeConfiguration":{"input":{"type":"structure","required":["FleetId","RuntimeConfiguration"],"members":{"FleetId":{},"RuntimeConfiguration":{"shape":"S1j"}}},"output":{"type":"structure","members":{"RuntimeConfiguration":{"shape":"S1j"}}}},"UpdateScript":{"input":{"type":"structure","required":["ScriptId"],"members":{"ScriptId":{},"Name":{},"Version":{},"StorageLocation":{"shape":"Sz"},"ZipFile":{"type":"blob"}}},"output":{"type":"structure","members":{"Script":{"shape":"S4t"}}}},"ValidateMatchmakingRuleSet":{"input":{"type":"structure","required":["RuleSetBody"],"members":{"RuleSetBody":{}}},"output":{"type":"structure","members":{"Valid":{"type":"boolean"}}}}},"shapes":{"S3":{"type":"list","member":{}},"Sc":{"type":"structure","members":{"GameServerGroupName":{},"GameServerGroupArn":{},"GameServerId":{},"InstanceId":{},"ConnectionInfo":{},"GameServerData":{},"ClaimStatus":{},"UtilizationStatus":{},"RegistrationTime":{"type":"timestamp"},"LastClaimTime":{"type":"timestamp"},"LastHealthCheckTime":{"type":"timestamp"}}},"Sm":{"type":"structure","members":{"Type":{},"FleetId":{},"Message":{}}},"Sq":{"type":"list","member":{"type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{}}}},"Sv":{"type":"structure","members":{"AliasId":{},"Name":{},"AliasArn":{},"Description":{},"RoutingStrategy":{"shape":"Sm"},"CreationTime":{"type":"timestamp"},"LastUpdatedTime":{"type":"timestamp"}}},"Sz":{"type":"structure","members":{"Bucket":{},"Key":{},"RoleArn":{},"ObjectVersion":{}}},"S13":{"type":"structure","members":{"BuildId":{},"BuildArn":{},"Name":{},"Version":{},"Status":{},"SizeOnDisk":{"type":"long"},"OperatingSystem":{},"CreationTime":{"type":"timestamp"}}},"S18":{"type":"structure","members":{"AccessKeyId":{},"SecretAccessKey":{},"SessionToken":{}},"sensitive":true},"S1d":{"type":"list","member":{"type":"structure","required":["FromPort","ToPort","IpRange","Protocol"],"members":{"FromPort":{"type":"integer"},"ToPort":{"type":"integer"},"IpRange":{},"Protocol":{}}}},"S1j":{"type":"structure","members":{"ServerProcesses":{"type":"list","member":{"type":"structure","required":["LaunchPath","ConcurrentExecutions"],"members":{"LaunchPath":{},"Parameters":{},"ConcurrentExecutions":{"type":"integer"}}}},"MaxConcurrentGameSessionActivations":{"type":"integer"},"GameSessionActivationTimeoutSeconds":{"type":"integer"}}},"S1p":{"type":"structure","members":{"NewGameSessionsPerCreator":{"type":"integer"},"PolicyPeriodInMinutes":{"type":"integer"}}},"S1r":{"type":"list","member":{}},"S1u":{"type":"structure","required":["CertificateType"],"members":{"CertificateType":{}}},"S1w":{"type":"list","member":{"type":"structure","members":{"Location":{}}}},"S20":{"type":"structure","members":{"FleetId":{},"FleetArn":{},"FleetType":{},"InstanceType":{},"Description":{},"Name":{},"CreationTime":{"type":"timestamp"},"TerminationTime":{"type":"timestamp"},"Status":{},"BuildId":{},"BuildArn":{},"ScriptId":{},"ScriptArn":{},"ServerLaunchPath":{},"ServerLaunchParameters":{},"LogPaths":{"shape":"S3"},"NewGameSessionProtectionPolicy":{},"OperatingSystem":{},"ResourceCreationLimitPolicy":{"shape":"S1p"},"MetricGroups":{"shape":"S1r"},"StoppedActions":{"shape":"S25"},"InstanceRoleArn":{},"CertificateConfiguration":{"shape":"S1u"}}},"S25":{"type":"list","member":{}},"S27":{"type":"list","member":{"shape":"S28"}},"S28":{"type":"structure","members":{"Location":{},"Status":{}}},"S2i":{"type":"list","member":{"type":"structure","required":["InstanceType"],"members":{"InstanceType":{},"WeightedCapacity":{}}}},"S2u":{"type":"structure","members":{"GameServerGroupName":{},"GameServerGroupArn":{},"RoleArn":{},"InstanceDefinitions":{"shape":"S2i"},"BalancingStrategy":{},"GameServerProtectionPolicy":{},"AutoScalingGroupArn":{},"Status":{},"StatusReason":{},"SuspendedActions":{"shape":"S2x"},"CreationTime":{"type":"timestamp"},"LastUpdatedTime":{"type":"timestamp"}}},"S2x":{"type":"list","member":{}},"S31":{"type":"list","member":{"type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{}}}},"S38":{"type":"structure","members":{"GameSessionId":{},"Name":{},"FleetId":{},"FleetArn":{},"CreationTime":{"type":"timestamp"},"TerminationTime":{"type":"timestamp"},"CurrentPlayerSessionCount":{"type":"integer"},"MaximumPlayerSessionCount":{"type":"integer"},"Status":{},"StatusReason":{},"GameProperties":{"shape":"S31"},"IpAddress":{},"DnsName":{},"Port":{"type":"integer"},"PlayerSessionCreationPolicy":{},"CreatorId":{},"GameSessionData":{},"MatchmakerData":{},"Location":{}}},"S3h":{"type":"list","member":{"type":"structure","members":{"MaximumIndividualPlayerLatencyMilliseconds":{"type":"integer"},"PolicyDurationSeconds":{"type":"integer"}}}},"S3j":{"type":"list","member":{"type":"structure","members":{"DestinationArn":{}}}},"S3m":{"type":"structure","members":{"AllowedLocations":{"shape":"S3n"}}},"S3n":{"type":"list","member":{}},"S3o":{"type":"structure","members":{"PriorityOrder":{"type":"list","member":{}},"LocationOrder":{"shape":"S3n"}}},"S3u":{"type":"structure","members":{"Name":{},"GameSessionQueueArn":{},"TimeoutInSeconds":{"type":"integer"},"PlayerLatencyPolicies":{"shape":"S3h"},"Destinations":{"shape":"S3j"},"FilterConfiguration":{"shape":"S3m"},"PriorityConfiguration":{"shape":"S3o"},"CustomEventData":{},"NotificationTarget":{}}},"S3x":{"type":"list","member":{}},"S48":{"type":"structure","members":{"Name":{},"ConfigurationArn":{},"Description":{},"GameSessionQueueArns":{"shape":"S3x"},"RequestTimeoutSeconds":{"type":"integer"},"AcceptanceTimeoutSeconds":{"type":"integer"},"AcceptanceRequired":{"type":"boolean"},"RuleSetName":{},"RuleSetArn":{},"NotificationTarget":{},"AdditionalPlayerCount":{"type":"integer"},"CustomEventData":{},"CreationTime":{"type":"timestamp"},"GameProperties":{"shape":"S31"},"GameSessionData":{},"BackfillMode":{},"FlexMatchMode":{}}},"S4e":{"type":"structure","required":["RuleSetBody"],"members":{"RuleSetName":{},"RuleSetArn":{},"RuleSetBody":{},"CreationTime":{"type":"timestamp"}}},"S4i":{"type":"structure","members":{"PlayerSessionId":{},"PlayerId":{},"GameSessionId":{},"FleetId":{},"FleetArn":{},"CreationTime":{"type":"timestamp"},"TerminationTime":{"type":"timestamp"},"Status":{},"IpAddress":{},"DnsName":{},"Port":{"type":"integer"},"PlayerData":{}}},"S4p":{"type":"list","member":{"shape":"S4i"}},"S4t":{"type":"structure","members":{"ScriptId":{},"ScriptArn":{},"Name":{},"Version":{},"SizeOnDisk":{"type":"long"},"CreationTime":{"type":"timestamp"},"StorageLocation":{"shape":"Sz"}}},"S4w":{"type":"structure","members":{"GameLiftAwsAccountId":{},"PeerVpcAwsAccountId":{},"PeerVpcId":{},"CreationTime":{"type":"timestamp"},"ExpirationTime":{"type":"timestamp"}}},"S5v":{"type":"list","member":{}},"S61":{"type":"structure","members":{"FleetId":{},"FleetArn":{},"InstanceType":{},"InstanceCounts":{"type":"structure","members":{"DESIRED":{"type":"integer"},"MINIMUM":{"type":"integer"},"MAXIMUM":{"type":"integer"},"PENDING":{"type":"integer"},"ACTIVE":{"type":"integer"},"IDLE":{"type":"integer"},"TERMINATING":{"type":"integer"}}},"Location":{}}},"S6h":{"type":"structure","members":{"FleetId":{},"FleetArn":{},"ActiveServerProcessCount":{"type":"integer"},"ActiveGameSessionCount":{"type":"integer"},"CurrentPlayerSessionCount":{"type":"integer"},"MaximumPlayerSessionCount":{"type":"integer"},"Location":{}}},"S73":{"type":"structure","members":{"PlacementId":{},"GameSessionQueueName":{},"Status":{},"GameProperties":{"shape":"S31"},"MaximumPlayerSessionCount":{"type":"integer"},"GameSessionName":{},"GameSessionId":{},"GameSessionArn":{},"GameSessionRegion":{},"PlayerLatencies":{"shape":"S75"},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"IpAddress":{},"DnsName":{},"Port":{"type":"integer"},"PlacedPlayerSessions":{"type":"list","member":{"type":"structure","members":{"PlayerId":{},"PlayerSessionId":{}}}},"GameSessionData":{},"MatchmakerData":{}}},"S75":{"type":"list","member":{"type":"structure","members":{"PlayerId":{},"RegionIdentifier":{},"LatencyInMilliseconds":{"type":"float"}}}},"S7g":{"type":"list","member":{"shape":"S38"}},"S7r":{"type":"structure","members":{"TicketId":{},"ConfigurationName":{},"ConfigurationArn":{},"Status":{},"StatusReason":{},"StatusMessage":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Players":{"shape":"S7u"},"GameSessionConnectionInfo":{"type":"structure","members":{"GameSessionArn":{},"IpAddress":{},"DnsName":{},"Port":{"type":"integer"},"MatchedPlayerSessions":{"type":"list","member":{"type":"structure","members":{"PlayerId":{},"PlayerSessionId":{}}}}}},"EstimatedWaitTime":{"type":"integer"}}},"S7u":{"type":"list","member":{"type":"structure","members":{"PlayerId":{},"PlayerAttributes":{"type":"map","key":{},"value":{"type":"structure","members":{"S":{},"N":{"type":"double"},"SL":{"shape":"S3"},"SDM":{"type":"map","key":{},"value":{"type":"double"}}}}},"Team":{},"LatencyInMs":{"type":"map","key":{},"value":{"type":"integer"}}}}},"S8s":{"type":"structure","required":["TargetValue"],"members":{"TargetValue":{"type":"double"}}}}}

/***/ }),
/* 240 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeFleetAttributes":{"input_token":"NextToken","output_token":"NextToken","limit_key":"Limit","result_key":"FleetAttributes"},"DescribeFleetCapacity":{"input_token":"NextToken","output_token":"NextToken","limit_key":"Limit","result_key":"FleetCapacity"},"DescribeFleetEvents":{"input_token":"NextToken","output_token":"NextToken","limit_key":"Limit","result_key":"Events"},"DescribeFleetLocationAttributes":{"input_token":"NextToken","output_token":"NextToken","limit_key":"Limit"},"DescribeFleetUtilization":{"input_token":"NextToken","output_token":"NextToken","limit_key":"Limit","result_key":"FleetUtilization"},"DescribeGameServerInstances":{"input_token":"NextToken","output_token":"NextToken","limit_key":"Limit","result_key":"GameServerInstances"},"DescribeGameSessionDetails":{"input_token":"NextToken","output_token":"NextToken","limit_key":"Limit","result_key":"GameSessionDetails"},"DescribeGameSessionQueues":{"input_token":"NextToken","output_token":"NextToken","limit_key":"Limit","result_key":"GameSessionQueues"},"DescribeGameSessions":{"input_token":"NextToken","output_token":"NextToken","limit_key":"Limit","result_key":"GameSessions"},"DescribeInstances":{"input_token":"NextToken","output_token":"NextToken","limit_key":"Limit","result_key":"Instances"},"DescribeMatchmakingConfigurations":{"input_token":"NextToken","output_token":"NextToken","limit_key":"Limit","result_key":"Configurations"},"DescribeMatchmakingRuleSets":{"input_token":"NextToken","output_token":"NextToken","limit_key":"Limit","result_key":"RuleSets"},"DescribePlayerSessions":{"input_token":"NextToken","output_token":"NextToken","limit_key":"Limit","result_key":"PlayerSessions"},"DescribeScalingPolicies":{"input_token":"NextToken","output_token":"NextToken","limit_key":"Limit","result_key":"ScalingPolicies"},"ListAliases":{"input_token":"NextToken","output_token":"NextToken","limit_key":"Limit","result_key":"Aliases"},"ListBuilds":{"input_token":"NextToken","output_token":"NextToken","limit_key":"Limit","result_key":"Builds"},"ListFleets":{"input_token":"NextToken","output_token":"NextToken","limit_key":"Limit","result_key":"FleetIds"},"ListGameServerGroups":{"input_token":"NextToken","output_token":"NextToken","limit_key":"Limit","result_key":"GameServerGroups"},"ListGameServers":{"input_token":"NextToken","output_token":"NextToken","limit_key":"Limit","result_key":"GameServers"},"ListScripts":{"input_token":"NextToken","output_token":"NextToken","limit_key":"Limit","result_key":"Scripts"},"SearchGameSessions":{"input_token":"NextToken","output_token":"NextToken","limit_key":"Limit","result_key":"GameSessions"}}}

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['glacier'] = {};
	AWS.Glacier = Service.defineService('glacier', ['2012-06-01']);
	__webpack_require__(242);
	Object.defineProperty(apiLoader.services['glacier'], '2012-06-01', {
	  get: function get() {
	    var model = __webpack_require__(243);
	    model.paginators = __webpack_require__(244).pagination;
	    model.waiters = __webpack_require__(245).waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.Glacier;


/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(4);

	AWS.util.update(AWS.Glacier.prototype, {
	  /**
	   * @api private
	   */
	  setupRequestListeners: function setupRequestListeners(request) {
	    if (Array.isArray(request._events.validate)) {
	      request._events.validate.unshift(this.validateAccountId);
	    } else {
	      request.on('validate', this.validateAccountId);
	    }
	    request.removeListener('afterBuild',
	      AWS.EventListeners.Core.COMPUTE_SHA256);
	    request.on('build', this.addGlacierApiVersion);
	    request.on('build', this.addTreeHashHeaders);
	  },

	  /**
	   * @api private
	   */
	  validateAccountId: function validateAccountId(request) {
	    if (request.params.accountId !== undefined) return;
	    request.params = AWS.util.copy(request.params);
	    request.params.accountId = '-';
	  },

	  /**
	   * @api private
	   */
	  addGlacierApiVersion: function addGlacierApiVersion(request) {
	    var version = request.service.api.apiVersion;
	    request.httpRequest.headers['x-amz-glacier-version'] = version;
	  },

	  /**
	   * @api private
	   */
	  addTreeHashHeaders: function addTreeHashHeaders(request) {
	    if (request.params.body === undefined) return;

	    var hashes = request.service.computeChecksums(request.params.body);
	    request.httpRequest.headers['X-Amz-Content-Sha256'] = hashes.linearHash;

	    if (!request.httpRequest.headers['x-amz-sha256-tree-hash']) {
	      request.httpRequest.headers['x-amz-sha256-tree-hash'] = hashes.treeHash;
	    }
	  },

	  /**
	   * @!group Computing Checksums
	   */

	  /**
	   * Computes the SHA-256 linear and tree hash checksums for a given
	   * block of Buffer data. Pass the tree hash of the computed checksums
	   * as the checksum input to the {completeMultipartUpload} when performing
	   * a multi-part upload.
	   *
	   * @example Calculate checksum of 5.5MB data chunk
	   *   var glacier = new AWS.Glacier();
	   *   var data = Buffer.alloc(5.5 * 1024 * 1024);
	   *   data.fill('0'); // fill with zeros
	   *   var results = glacier.computeChecksums(data);
	   *   // Result: { linearHash: '68aff0c5a9...', treeHash: '154e26c78f...' }
	   * @param data [Buffer, String] data to calculate the checksum for
	   * @return [map<linearHash:String,treeHash:String>] a map containing
	   *   the linearHash and treeHash properties representing hex based digests
	   *   of the respective checksums.
	   * @see completeMultipartUpload
	   */
	  computeChecksums: function computeChecksums(data) {
	    if (!AWS.util.Buffer.isBuffer(data)) data = AWS.util.buffer.toBuffer(data);

	    var mb = 1024 * 1024;
	    var hashes = [];
	    var hash = AWS.util.crypto.createHash('sha256');

	    // build leaf nodes in 1mb chunks
	    for (var i = 0; i < data.length; i += mb) {
	      var chunk = data.slice(i, Math.min(i + mb, data.length));
	      hash.update(chunk);
	      hashes.push(AWS.util.crypto.sha256(chunk));
	    }

	    return {
	      linearHash: hash.digest('hex'),
	      treeHash: this.buildHashTree(hashes)
	    };
	  },

	  /**
	   * @api private
	   */
	  buildHashTree: function buildHashTree(hashes) {
	    // merge leaf nodes
	    while (hashes.length > 1) {
	      var tmpHashes = [];
	      for (var i = 0; i < hashes.length; i += 2) {
	        if (hashes[i + 1]) {
	          var tmpHash = AWS.util.buffer.alloc(64);
	          tmpHash.write(hashes[i], 0, 32, 'binary');
	          tmpHash.write(hashes[i + 1], 32, 32, 'binary');
	          tmpHashes.push(AWS.util.crypto.sha256(tmpHash));
	        } else {
	          tmpHashes.push(hashes[i]);
	        }
	      }
	      hashes = tmpHashes;
	    }

	    return AWS.util.crypto.toHex(hashes[0]);
	  }
	});


/***/ }),
/* 243 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2012-06-01","checksumFormat":"sha256","endpointPrefix":"glacier","protocol":"rest-json","serviceFullName":"Amazon Glacier","serviceId":"Glacier","signatureVersion":"v4","uid":"glacier-2012-06-01"},"operations":{"AbortMultipartUpload":{"http":{"method":"DELETE","requestUri":"/{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}","responseCode":204},"input":{"type":"structure","required":["accountId","vaultName","uploadId"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"},"uploadId":{"location":"uri","locationName":"uploadId"}}}},"AbortVaultLock":{"http":{"method":"DELETE","requestUri":"/{accountId}/vaults/{vaultName}/lock-policy","responseCode":204},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"}}}},"AddTagsToVault":{"http":{"requestUri":"/{accountId}/vaults/{vaultName}/tags?operation=add","responseCode":204},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"},"Tags":{"shape":"S5"}}}},"CompleteMultipartUpload":{"http":{"requestUri":"/{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}","responseCode":201},"input":{"type":"structure","required":["accountId","vaultName","uploadId"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"},"uploadId":{"location":"uri","locationName":"uploadId"},"archiveSize":{"location":"header","locationName":"x-amz-archive-size"},"checksum":{"location":"header","locationName":"x-amz-sha256-tree-hash"}}},"output":{"shape":"S9"}},"CompleteVaultLock":{"http":{"requestUri":"/{accountId}/vaults/{vaultName}/lock-policy/{lockId}","responseCode":204},"input":{"type":"structure","required":["accountId","vaultName","lockId"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"},"lockId":{"location":"uri","locationName":"lockId"}}}},"CreateVault":{"http":{"method":"PUT","requestUri":"/{accountId}/vaults/{vaultName}","responseCode":201},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"}}},"output":{"type":"structure","members":{"location":{"location":"header","locationName":"Location"}}}},"DeleteArchive":{"http":{"method":"DELETE","requestUri":"/{accountId}/vaults/{vaultName}/archives/{archiveId}","responseCode":204},"input":{"type":"structure","required":["accountId","vaultName","archiveId"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"},"archiveId":{"location":"uri","locationName":"archiveId"}}}},"DeleteVault":{"http":{"method":"DELETE","requestUri":"/{accountId}/vaults/{vaultName}","responseCode":204},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"}}}},"DeleteVaultAccessPolicy":{"http":{"method":"DELETE","requestUri":"/{accountId}/vaults/{vaultName}/access-policy","responseCode":204},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"}}}},"DeleteVaultNotifications":{"http":{"method":"DELETE","requestUri":"/{accountId}/vaults/{vaultName}/notification-configuration","responseCode":204},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"}}}},"DescribeJob":{"http":{"method":"GET","requestUri":"/{accountId}/vaults/{vaultName}/jobs/{jobId}"},"input":{"type":"structure","required":["accountId","vaultName","jobId"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"},"jobId":{"location":"uri","locationName":"jobId"}}},"output":{"shape":"Si"}},"DescribeVault":{"http":{"method":"GET","requestUri":"/{accountId}/vaults/{vaultName}"},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"}}},"output":{"shape":"S1a"}},"GetDataRetrievalPolicy":{"http":{"method":"GET","requestUri":"/{accountId}/policies/data-retrieval"},"input":{"type":"structure","required":["accountId"],"members":{"accountId":{"location":"uri","locationName":"accountId"}}},"output":{"type":"structure","members":{"Policy":{"shape":"S1e"}}}},"GetJobOutput":{"http":{"method":"GET","requestUri":"/{accountId}/vaults/{vaultName}/jobs/{jobId}/output"},"input":{"type":"structure","required":["accountId","vaultName","jobId"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"},"jobId":{"location":"uri","locationName":"jobId"},"range":{"location":"header","locationName":"Range"}}},"output":{"type":"structure","members":{"body":{"shape":"S1k"},"checksum":{"location":"header","locationName":"x-amz-sha256-tree-hash"},"status":{"location":"statusCode","type":"integer"},"contentRange":{"location":"header","locationName":"Content-Range"},"acceptRanges":{"location":"header","locationName":"Accept-Ranges"},"contentType":{"location":"header","locationName":"Content-Type"},"archiveDescription":{"location":"header","locationName":"x-amz-archive-description"}},"payload":"body"}},"GetVaultAccessPolicy":{"http":{"method":"GET","requestUri":"/{accountId}/vaults/{vaultName}/access-policy"},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"}}},"output":{"type":"structure","members":{"policy":{"shape":"S1o"}},"payload":"policy"}},"GetVaultLock":{"http":{"method":"GET","requestUri":"/{accountId}/vaults/{vaultName}/lock-policy"},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"}}},"output":{"type":"structure","members":{"Policy":{},"State":{},"ExpirationDate":{},"CreationDate":{}}}},"GetVaultNotifications":{"http":{"method":"GET","requestUri":"/{accountId}/vaults/{vaultName}/notification-configuration"},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"}}},"output":{"type":"structure","members":{"vaultNotificationConfig":{"shape":"S1t"}},"payload":"vaultNotificationConfig"}},"InitiateJob":{"http":{"requestUri":"/{accountId}/vaults/{vaultName}/jobs","responseCode":202},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"},"jobParameters":{"type":"structure","members":{"Format":{},"Type":{},"ArchiveId":{},"Description":{},"SNSTopic":{},"RetrievalByteRange":{},"Tier":{},"InventoryRetrievalParameters":{"type":"structure","members":{"StartDate":{},"EndDate":{},"Limit":{},"Marker":{}}},"SelectParameters":{"shape":"Sp"},"OutputLocation":{"shape":"Sx"}}}},"payload":"jobParameters"},"output":{"type":"structure","members":{"location":{"location":"header","locationName":"Location"},"jobId":{"location":"header","locationName":"x-amz-job-id"},"jobOutputPath":{"location":"header","locationName":"x-amz-job-output-path"}}}},"InitiateMultipartUpload":{"http":{"requestUri":"/{accountId}/vaults/{vaultName}/multipart-uploads","responseCode":201},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"},"archiveDescription":{"location":"header","locationName":"x-amz-archive-description"},"partSize":{"location":"header","locationName":"x-amz-part-size"}}},"output":{"type":"structure","members":{"location":{"location":"header","locationName":"Location"},"uploadId":{"location":"header","locationName":"x-amz-multipart-upload-id"}}}},"InitiateVaultLock":{"http":{"requestUri":"/{accountId}/vaults/{vaultName}/lock-policy","responseCode":201},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"},"policy":{"type":"structure","members":{"Policy":{}}}},"payload":"policy"},"output":{"type":"structure","members":{"lockId":{"location":"header","locationName":"x-amz-lock-id"}}}},"ListJobs":{"http":{"method":"GET","requestUri":"/{accountId}/vaults/{vaultName}/jobs"},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"},"limit":{"location":"querystring","locationName":"limit"},"marker":{"location":"querystring","locationName":"marker"},"statuscode":{"location":"querystring","locationName":"statuscode"},"completed":{"location":"querystring","locationName":"completed"}}},"output":{"type":"structure","members":{"JobList":{"type":"list","member":{"shape":"Si"}},"Marker":{}}}},"ListMultipartUploads":{"http":{"method":"GET","requestUri":"/{accountId}/vaults/{vaultName}/multipart-uploads"},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"},"marker":{"location":"querystring","locationName":"marker"},"limit":{"location":"querystring","locationName":"limit"}}},"output":{"type":"structure","members":{"UploadsList":{"type":"list","member":{"type":"structure","members":{"MultipartUploadId":{},"VaultARN":{},"ArchiveDescription":{},"PartSizeInBytes":{"type":"long"},"CreationDate":{}}}},"Marker":{}}}},"ListParts":{"http":{"method":"GET","requestUri":"/{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}"},"input":{"type":"structure","required":["accountId","vaultName","uploadId"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"},"uploadId":{"location":"uri","locationName":"uploadId"},"marker":{"location":"querystring","locationName":"marker"},"limit":{"location":"querystring","locationName":"limit"}}},"output":{"type":"structure","members":{"MultipartUploadId":{},"VaultARN":{},"ArchiveDescription":{},"PartSizeInBytes":{"type":"long"},"CreationDate":{},"Parts":{"type":"list","member":{"type":"structure","members":{"RangeInBytes":{},"SHA256TreeHash":{}}}},"Marker":{}}}},"ListProvisionedCapacity":{"http":{"method":"GET","requestUri":"/{accountId}/provisioned-capacity"},"input":{"type":"structure","required":["accountId"],"members":{"accountId":{"location":"uri","locationName":"accountId"}}},"output":{"type":"structure","members":{"ProvisionedCapacityList":{"type":"list","member":{"type":"structure","members":{"CapacityId":{},"StartDate":{},"ExpirationDate":{}}}}}}},"ListTagsForVault":{"http":{"method":"GET","requestUri":"/{accountId}/vaults/{vaultName}/tags"},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"}}},"output":{"type":"structure","members":{"Tags":{"shape":"S5"}}}},"ListVaults":{"http":{"method":"GET","requestUri":"/{accountId}/vaults"},"input":{"type":"structure","required":["accountId"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"marker":{"location":"querystring","locationName":"marker"},"limit":{"location":"querystring","locationName":"limit"}}},"output":{"type":"structure","members":{"VaultList":{"type":"list","member":{"shape":"S1a"}},"Marker":{}}}},"PurchaseProvisionedCapacity":{"http":{"requestUri":"/{accountId}/provisioned-capacity","responseCode":201},"input":{"type":"structure","required":["accountId"],"members":{"accountId":{"location":"uri","locationName":"accountId"}}},"output":{"type":"structure","members":{"capacityId":{"location":"header","locationName":"x-amz-capacity-id"}}}},"RemoveTagsFromVault":{"http":{"requestUri":"/{accountId}/vaults/{vaultName}/tags?operation=remove","responseCode":204},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"},"TagKeys":{"type":"list","member":{}}}}},"SetDataRetrievalPolicy":{"http":{"method":"PUT","requestUri":"/{accountId}/policies/data-retrieval","responseCode":204},"input":{"type":"structure","required":["accountId"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"Policy":{"shape":"S1e"}}}},"SetVaultAccessPolicy":{"http":{"method":"PUT","requestUri":"/{accountId}/vaults/{vaultName}/access-policy","responseCode":204},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"},"policy":{"shape":"S1o"}},"payload":"policy"}},"SetVaultNotifications":{"http":{"method":"PUT","requestUri":"/{accountId}/vaults/{vaultName}/notification-configuration","responseCode":204},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"},"vaultNotificationConfig":{"shape":"S1t"}},"payload":"vaultNotificationConfig"}},"UploadArchive":{"http":{"requestUri":"/{accountId}/vaults/{vaultName}/archives","responseCode":201},"input":{"type":"structure","required":["vaultName","accountId"],"members":{"vaultName":{"location":"uri","locationName":"vaultName"},"accountId":{"location":"uri","locationName":"accountId"},"archiveDescription":{"location":"header","locationName":"x-amz-archive-description"},"checksum":{"location":"header","locationName":"x-amz-sha256-tree-hash"},"body":{"shape":"S1k"}},"payload":"body"},"output":{"shape":"S9"}},"UploadMultipartPart":{"http":{"method":"PUT","requestUri":"/{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}","responseCode":204},"input":{"type":"structure","required":["accountId","vaultName","uploadId"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"},"uploadId":{"location":"uri","locationName":"uploadId"},"checksum":{"location":"header","locationName":"x-amz-sha256-tree-hash"},"range":{"location":"header","locationName":"Content-Range"},"body":{"shape":"S1k"}},"payload":"body"},"output":{"type":"structure","members":{"checksum":{"location":"header","locationName":"x-amz-sha256-tree-hash"}}}}},"shapes":{"S5":{"type":"map","key":{},"value":{}},"S9":{"type":"structure","members":{"location":{"location":"header","locationName":"Location"},"checksum":{"location":"header","locationName":"x-amz-sha256-tree-hash"},"archiveId":{"location":"header","locationName":"x-amz-archive-id"}}},"Si":{"type":"structure","members":{"JobId":{},"JobDescription":{},"Action":{},"ArchiveId":{},"VaultARN":{},"CreationDate":{},"Completed":{"type":"boolean"},"StatusCode":{},"StatusMessage":{},"ArchiveSizeInBytes":{"type":"long"},"InventorySizeInBytes":{"type":"long"},"SNSTopic":{},"CompletionDate":{},"SHA256TreeHash":{},"ArchiveSHA256TreeHash":{},"RetrievalByteRange":{},"Tier":{},"InventoryRetrievalParameters":{"type":"structure","members":{"Format":{},"StartDate":{},"EndDate":{},"Limit":{},"Marker":{}}},"JobOutputPath":{},"SelectParameters":{"shape":"Sp"},"OutputLocation":{"shape":"Sx"}}},"Sp":{"type":"structure","members":{"InputSerialization":{"type":"structure","members":{"csv":{"type":"structure","members":{"FileHeaderInfo":{},"Comments":{},"QuoteEscapeCharacter":{},"RecordDelimiter":{},"FieldDelimiter":{},"QuoteCharacter":{}}}}},"ExpressionType":{},"Expression":{},"OutputSerialization":{"type":"structure","members":{"csv":{"type":"structure","members":{"QuoteFields":{},"QuoteEscapeCharacter":{},"RecordDelimiter":{},"FieldDelimiter":{},"QuoteCharacter":{}}}}}}},"Sx":{"type":"structure","members":{"S3":{"type":"structure","members":{"BucketName":{},"Prefix":{},"Encryption":{"type":"structure","members":{"EncryptionType":{},"KMSKeyId":{},"KMSContext":{}}},"CannedACL":{},"AccessControlList":{"type":"list","member":{"type":"structure","members":{"Grantee":{"type":"structure","required":["Type"],"members":{"Type":{},"DisplayName":{},"URI":{},"ID":{},"EmailAddress":{}}},"Permission":{}}}},"Tagging":{"shape":"S17"},"UserMetadata":{"shape":"S17"},"StorageClass":{}}}}},"S17":{"type":"map","key":{},"value":{}},"S1a":{"type":"structure","members":{"VaultARN":{},"VaultName":{},"CreationDate":{},"LastInventoryDate":{},"NumberOfArchives":{"type":"long"},"SizeInBytes":{"type":"long"}}},"S1e":{"type":"structure","members":{"Rules":{"type":"list","member":{"type":"structure","members":{"Strategy":{},"BytesPerHour":{"type":"long"}}}}}},"S1k":{"type":"blob","streaming":true},"S1o":{"type":"structure","members":{"Policy":{}}},"S1t":{"type":"structure","members":{"SNSTopic":{},"Events":{"type":"list","member":{}}}}}}

/***/ }),
/* 244 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"ListJobs":{"input_token":"marker","limit_key":"limit","output_token":"Marker","result_key":"JobList"},"ListMultipartUploads":{"input_token":"marker","limit_key":"limit","output_token":"Marker","result_key":"UploadsList"},"ListParts":{"input_token":"marker","limit_key":"limit","output_token":"Marker","result_key":"Parts"},"ListVaults":{"input_token":"marker","limit_key":"limit","output_token":"Marker","result_key":"VaultList"}}}

/***/ }),
/* 245 */
/***/ (function(module, exports) {

	module.exports = {"version":2,"waiters":{"VaultExists":{"operation":"DescribeVault","delay":3,"maxAttempts":15,"acceptors":[{"state":"success","matcher":"status","expected":200},{"state":"retry","matcher":"error","expected":"ResourceNotFoundException"}]},"VaultNotExists":{"operation":"DescribeVault","delay":3,"maxAttempts":15,"acceptors":[{"state":"retry","matcher":"status","expected":200},{"state":"success","matcher":"error","expected":"ResourceNotFoundException"}]}}}

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['health'] = {};
	AWS.Health = Service.defineService('health', ['2016-08-04']);
	Object.defineProperty(apiLoader.services['health'], '2016-08-04', {
	  get: function get() {
	    var model = __webpack_require__(247);
	    model.paginators = __webpack_require__(248).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.Health;


/***/ }),
/* 247 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-08-04","endpointPrefix":"health","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"AWSHealth","serviceFullName":"AWS Health APIs and Notifications","serviceId":"Health","signatureVersion":"v4","targetPrefix":"AWSHealth_20160804","uid":"health-2016-08-04"},"operations":{"DescribeAffectedAccountsForOrganization":{"input":{"type":"structure","required":["eventArn"],"members":{"eventArn":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"affectedAccounts":{"type":"list","member":{}},"eventScopeCode":{},"nextToken":{}}},"idempotent":true},"DescribeAffectedEntities":{"input":{"type":"structure","required":["filter"],"members":{"filter":{"type":"structure","required":["eventArns"],"members":{"eventArns":{"shape":"Sb"},"entityArns":{"shape":"Sc"},"entityValues":{"shape":"Se"},"lastUpdatedTimes":{"shape":"Sg"},"tags":{"shape":"Sj"},"statusCodes":{"type":"list","member":{}}}},"locale":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"entities":{"shape":"Sr"},"nextToken":{}}},"idempotent":true},"DescribeAffectedEntitiesForOrganization":{"input":{"type":"structure","required":["organizationEntityFilters"],"members":{"organizationEntityFilters":{"type":"list","member":{"shape":"Sw"}},"locale":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"entities":{"shape":"Sr"},"failedSet":{"type":"list","member":{"type":"structure","members":{"awsAccountId":{},"eventArn":{},"errorName":{},"errorMessage":{}}}},"nextToken":{}}},"idempotent":true},"DescribeEntityAggregates":{"input":{"type":"structure","members":{"eventArns":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"entityAggregates":{"type":"list","member":{"type":"structure","members":{"eventArn":{},"count":{"type":"integer"}}}}}},"idempotent":true},"DescribeEventAggregates":{"input":{"type":"structure","required":["aggregateField"],"members":{"filter":{"shape":"S19"},"aggregateField":{},"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"eventAggregates":{"type":"list","member":{"type":"structure","members":{"aggregateValue":{},"count":{"type":"integer"}}}},"nextToken":{}}},"idempotent":true},"DescribeEventDetails":{"input":{"type":"structure","required":["eventArns"],"members":{"eventArns":{"shape":"Sb"},"locale":{}}},"output":{"type":"structure","members":{"successfulSet":{"type":"list","member":{"type":"structure","members":{"event":{"shape":"S1v"},"eventDescription":{"shape":"S1x"},"eventMetadata":{"shape":"S1z"}}}},"failedSet":{"type":"list","member":{"type":"structure","members":{"eventArn":{},"errorName":{},"errorMessage":{}}}}}},"idempotent":true},"DescribeEventDetailsForOrganization":{"input":{"type":"structure","required":["organizationEventDetailFilters"],"members":{"organizationEventDetailFilters":{"type":"list","member":{"shape":"Sw"}},"locale":{}}},"output":{"type":"structure","members":{"successfulSet":{"type":"list","member":{"type":"structure","members":{"awsAccountId":{},"event":{"shape":"S1v"},"eventDescription":{"shape":"S1x"},"eventMetadata":{"shape":"S1z"}}}},"failedSet":{"type":"list","member":{"type":"structure","members":{"awsAccountId":{},"eventArn":{},"errorName":{},"errorMessage":{}}}}}},"idempotent":true},"DescribeEventTypes":{"input":{"type":"structure","members":{"filter":{"type":"structure","members":{"eventTypeCodes":{"type":"list","member":{}},"services":{"shape":"S1c"},"eventTypeCategories":{"type":"list","member":{}}}},"locale":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"eventTypes":{"type":"list","member":{"type":"structure","members":{"service":{},"code":{},"category":{}}}},"nextToken":{}}},"idempotent":true},"DescribeEvents":{"input":{"type":"structure","members":{"filter":{"shape":"S19"},"nextToken":{},"maxResults":{"type":"integer"},"locale":{}}},"output":{"type":"structure","members":{"events":{"type":"list","member":{"shape":"S1v"}},"nextToken":{}}},"idempotent":true},"DescribeEventsForOrganization":{"input":{"type":"structure","members":{"filter":{"type":"structure","members":{"eventTypeCodes":{"shape":"S1a"},"awsAccountIds":{"type":"list","member":{}},"services":{"shape":"S1c"},"regions":{"shape":"S1e"},"startTime":{"shape":"Sh"},"endTime":{"shape":"Sh"},"lastUpdatedTime":{"shape":"Sh"},"entityArns":{"shape":"Sc"},"entityValues":{"shape":"Se"},"eventTypeCategories":{"shape":"S1i"},"eventStatusCodes":{"shape":"S1k"}}},"nextToken":{},"maxResults":{"type":"integer"},"locale":{}}},"output":{"type":"structure","members":{"events":{"type":"list","member":{"type":"structure","members":{"arn":{},"service":{},"eventTypeCode":{},"eventTypeCategory":{},"eventScopeCode":{},"region":{},"startTime":{"type":"timestamp"},"endTime":{"type":"timestamp"},"lastUpdatedTime":{"type":"timestamp"},"statusCode":{}}}},"nextToken":{}}},"idempotent":true},"DescribeHealthServiceStatusForOrganization":{"output":{"type":"structure","members":{"healthServiceAccessStatusForOrganization":{}}},"idempotent":true},"DisableHealthServiceAccessForOrganization":{"idempotent":true},"EnableHealthServiceAccessForOrganization":{"idempotent":true}},"shapes":{"Sb":{"type":"list","member":{}},"Sc":{"type":"list","member":{}},"Se":{"type":"list","member":{}},"Sg":{"type":"list","member":{"shape":"Sh"}},"Sh":{"type":"structure","members":{"from":{"type":"timestamp"},"to":{"type":"timestamp"}}},"Sj":{"type":"list","member":{"shape":"Sk"}},"Sk":{"type":"map","key":{},"value":{}},"Sr":{"type":"list","member":{"type":"structure","members":{"entityArn":{},"eventArn":{},"entityValue":{},"entityUrl":{},"awsAccountId":{},"lastUpdatedTime":{"type":"timestamp"},"statusCode":{},"tags":{"shape":"Sk"}}}},"Sw":{"type":"structure","required":["eventArn"],"members":{"eventArn":{},"awsAccountId":{}}},"S19":{"type":"structure","members":{"eventArns":{"shape":"Sb"},"eventTypeCodes":{"shape":"S1a"},"services":{"shape":"S1c"},"regions":{"shape":"S1e"},"availabilityZones":{"type":"list","member":{}},"startTimes":{"shape":"Sg"},"endTimes":{"shape":"Sg"},"lastUpdatedTimes":{"shape":"Sg"},"entityArns":{"shape":"Sc"},"entityValues":{"shape":"Se"},"eventTypeCategories":{"shape":"S1i"},"tags":{"shape":"Sj"},"eventStatusCodes":{"shape":"S1k"}}},"S1a":{"type":"list","member":{}},"S1c":{"type":"list","member":{}},"S1e":{"type":"list","member":{}},"S1i":{"type":"list","member":{}},"S1k":{"type":"list","member":{}},"S1v":{"type":"structure","members":{"arn":{},"service":{},"eventTypeCode":{},"eventTypeCategory":{},"region":{},"availabilityZone":{},"startTime":{"type":"timestamp"},"endTime":{"type":"timestamp"},"lastUpdatedTime":{"type":"timestamp"},"statusCode":{},"eventScopeCode":{}}},"S1x":{"type":"structure","members":{"latestDescription":{}}},"S1z":{"type":"map","key":{},"value":{}}}}

/***/ }),
/* 248 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeAffectedAccountsForOrganization":{"input_token":"nextToken","limit_key":"maxResults","non_aggregate_keys":["eventScopeCode"],"output_token":"nextToken","result_key":"affectedAccounts"},"DescribeAffectedEntities":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"entities"},"DescribeAffectedEntitiesForOrganization":{"input_token":"nextToken","limit_key":"maxResults","non_aggregate_keys":["failedSet"],"output_token":"nextToken","result_key":"entities"},"DescribeEntityAggregates":{"result_key":"entityAggregates"},"DescribeEventAggregates":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"eventAggregates"},"DescribeEventTypes":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"eventTypes"},"DescribeEvents":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"events"},"DescribeEventsForOrganization":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"events"}}}

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['iam'] = {};
	AWS.IAM = Service.defineService('iam', ['2010-05-08']);
	Object.defineProperty(apiLoader.services['iam'], '2010-05-08', {
	  get: function get() {
	    var model = __webpack_require__(250);
	    model.paginators = __webpack_require__(251).pagination;
	    model.waiters = __webpack_require__(252).waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.IAM;


/***/ }),
/* 250 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2010-05-08","endpointPrefix":"iam","globalEndpoint":"iam.amazonaws.com","protocol":"query","serviceAbbreviation":"IAM","serviceFullName":"AWS Identity and Access Management","serviceId":"IAM","signatureVersion":"v4","uid":"iam-2010-05-08","xmlNamespace":"https://iam.amazonaws.com/doc/2010-05-08/"},"operations":{"AddClientIDToOpenIDConnectProvider":{"input":{"type":"structure","required":["OpenIDConnectProviderArn","ClientID"],"members":{"OpenIDConnectProviderArn":{},"ClientID":{}}}},"AddRoleToInstanceProfile":{"input":{"type":"structure","required":["InstanceProfileName","RoleName"],"members":{"InstanceProfileName":{},"RoleName":{}}}},"AddUserToGroup":{"input":{"type":"structure","required":["GroupName","UserName"],"members":{"GroupName":{},"UserName":{}}}},"AttachGroupPolicy":{"input":{"type":"structure","required":["GroupName","PolicyArn"],"members":{"GroupName":{},"PolicyArn":{}}}},"AttachRolePolicy":{"input":{"type":"structure","required":["RoleName","PolicyArn"],"members":{"RoleName":{},"PolicyArn":{}}}},"AttachUserPolicy":{"input":{"type":"structure","required":["UserName","PolicyArn"],"members":{"UserName":{},"PolicyArn":{}}}},"ChangePassword":{"input":{"type":"structure","required":["OldPassword","NewPassword"],"members":{"OldPassword":{"shape":"Sf"},"NewPassword":{"shape":"Sf"}}}},"CreateAccessKey":{"input":{"type":"structure","members":{"UserName":{}}},"output":{"resultWrapper":"CreateAccessKeyResult","type":"structure","required":["AccessKey"],"members":{"AccessKey":{"type":"structure","required":["UserName","AccessKeyId","Status","SecretAccessKey"],"members":{"UserName":{},"AccessKeyId":{},"Status":{},"SecretAccessKey":{"type":"string","sensitive":true},"CreateDate":{"type":"timestamp"}}}}}},"CreateAccountAlias":{"input":{"type":"structure","required":["AccountAlias"],"members":{"AccountAlias":{}}}},"CreateGroup":{"input":{"type":"structure","required":["GroupName"],"members":{"Path":{},"GroupName":{}}},"output":{"resultWrapper":"CreateGroupResult","type":"structure","required":["Group"],"members":{"Group":{"shape":"Ss"}}}},"CreateInstanceProfile":{"input":{"type":"structure","required":["InstanceProfileName"],"members":{"InstanceProfileName":{},"Path":{},"Tags":{"shape":"Sv"}}},"output":{"resultWrapper":"CreateInstanceProfileResult","type":"structure","required":["InstanceProfile"],"members":{"InstanceProfile":{"shape":"S10"}}}},"CreateLoginProfile":{"input":{"type":"structure","required":["UserName","Password"],"members":{"UserName":{},"Password":{"shape":"Sf"},"PasswordResetRequired":{"type":"boolean"}}},"output":{"resultWrapper":"CreateLoginProfileResult","type":"structure","required":["LoginProfile"],"members":{"LoginProfile":{"shape":"S1d"}}}},"CreateOpenIDConnectProvider":{"input":{"type":"structure","required":["Url","ThumbprintList"],"members":{"Url":{},"ClientIDList":{"shape":"S1g"},"ThumbprintList":{"shape":"S1h"},"Tags":{"shape":"Sv"}}},"output":{"resultWrapper":"CreateOpenIDConnectProviderResult","type":"structure","members":{"OpenIDConnectProviderArn":{},"Tags":{"shape":"Sv"}}}},"CreatePolicy":{"input":{"type":"structure","required":["PolicyName","PolicyDocument"],"members":{"PolicyName":{},"Path":{},"PolicyDocument":{},"Description":{},"Tags":{"shape":"Sv"}}},"output":{"resultWrapper":"CreatePolicyResult","type":"structure","members":{"Policy":{"shape":"S1p"}}}},"CreatePolicyVersion":{"input":{"type":"structure","required":["PolicyArn","PolicyDocument"],"members":{"PolicyArn":{},"PolicyDocument":{},"SetAsDefault":{"type":"boolean"}}},"output":{"resultWrapper":"CreatePolicyVersionResult","type":"structure","members":{"PolicyVersion":{"shape":"S1u"}}}},"CreateRole":{"input":{"type":"structure","required":["RoleName","AssumeRolePolicyDocument"],"members":{"Path":{},"RoleName":{},"AssumeRolePolicyDocument":{},"Description":{},"MaxSessionDuration":{"type":"integer"},"PermissionsBoundary":{},"Tags":{"shape":"Sv"}}},"output":{"resultWrapper":"CreateRoleResult","type":"structure","required":["Role"],"members":{"Role":{"shape":"S12"}}}},"CreateSAMLProvider":{"input":{"type":"structure","required":["SAMLMetadataDocument","Name"],"members":{"SAMLMetadataDocument":{},"Name":{},"Tags":{"shape":"Sv"}}},"output":{"resultWrapper":"CreateSAMLProviderResult","type":"structure","members":{"SAMLProviderArn":{},"Tags":{"shape":"Sv"}}}},"CreateServiceLinkedRole":{"input":{"type":"structure","required":["AWSServiceName"],"members":{"AWSServiceName":{},"Description":{},"CustomSuffix":{}}},"output":{"resultWrapper":"CreateServiceLinkedRoleResult","type":"structure","members":{"Role":{"shape":"S12"}}}},"CreateServiceSpecificCredential":{"input":{"type":"structure","required":["UserName","ServiceName"],"members":{"UserName":{},"ServiceName":{}}},"output":{"resultWrapper":"CreateServiceSpecificCredentialResult","type":"structure","members":{"ServiceSpecificCredential":{"shape":"S27"}}}},"CreateUser":{"input":{"type":"structure","required":["UserName"],"members":{"Path":{},"UserName":{},"PermissionsBoundary":{},"Tags":{"shape":"Sv"}}},"output":{"resultWrapper":"CreateUserResult","type":"structure","members":{"User":{"shape":"S2d"}}}},"CreateVirtualMFADevice":{"input":{"type":"structure","required":["VirtualMFADeviceName"],"members":{"Path":{},"VirtualMFADeviceName":{},"Tags":{"shape":"Sv"}}},"output":{"resultWrapper":"CreateVirtualMFADeviceResult","type":"structure","required":["VirtualMFADevice"],"members":{"VirtualMFADevice":{"shape":"S2h"}}}},"DeactivateMFADevice":{"input":{"type":"structure","required":["UserName","SerialNumber"],"members":{"UserName":{},"SerialNumber":{}}}},"DeleteAccessKey":{"input":{"type":"structure","required":["AccessKeyId"],"members":{"UserName":{},"AccessKeyId":{}}}},"DeleteAccountAlias":{"input":{"type":"structure","required":["AccountAlias"],"members":{"AccountAlias":{}}}},"DeleteAccountPasswordPolicy":{},"DeleteGroup":{"input":{"type":"structure","required":["GroupName"],"members":{"GroupName":{}}}},"DeleteGroupPolicy":{"input":{"type":"structure","required":["GroupName","PolicyName"],"members":{"GroupName":{},"PolicyName":{}}}},"DeleteInstanceProfile":{"input":{"type":"structure","required":["InstanceProfileName"],"members":{"InstanceProfileName":{}}}},"DeleteLoginProfile":{"input":{"type":"structure","required":["UserName"],"members":{"UserName":{}}}},"DeleteOpenIDConnectProvider":{"input":{"type":"structure","required":["OpenIDConnectProviderArn"],"members":{"OpenIDConnectProviderArn":{}}}},"DeletePolicy":{"input":{"type":"structure","required":["PolicyArn"],"members":{"PolicyArn":{}}}},"DeletePolicyVersion":{"input":{"type":"structure","required":["PolicyArn","VersionId"],"members":{"PolicyArn":{},"VersionId":{}}}},"DeleteRole":{"input":{"type":"structure","required":["RoleName"],"members":{"RoleName":{}}}},"DeleteRolePermissionsBoundary":{"input":{"type":"structure","required":["RoleName"],"members":{"RoleName":{}}}},"DeleteRolePolicy":{"input":{"type":"structure","required":["RoleName","PolicyName"],"members":{"RoleName":{},"PolicyName":{}}}},"DeleteSAMLProvider":{"input":{"type":"structure","required":["SAMLProviderArn"],"members":{"SAMLProviderArn":{}}}},"DeleteSSHPublicKey":{"input":{"type":"structure","required":["UserName","SSHPublicKeyId"],"members":{"UserName":{},"SSHPublicKeyId":{}}}},"DeleteServerCertificate":{"input":{"type":"structure","required":["ServerCertificateName"],"members":{"ServerCertificateName":{}}}},"DeleteServiceLinkedRole":{"input":{"type":"structure","required":["RoleName"],"members":{"RoleName":{}}},"output":{"resultWrapper":"DeleteServiceLinkedRoleResult","type":"structure","required":["DeletionTaskId"],"members":{"DeletionTaskId":{}}}},"DeleteServiceSpecificCredential":{"input":{"type":"structure","required":["ServiceSpecificCredentialId"],"members":{"UserName":{},"ServiceSpecificCredentialId":{}}}},"DeleteSigningCertificate":{"input":{"type":"structure","required":["CertificateId"],"members":{"UserName":{},"CertificateId":{}}}},"DeleteUser":{"input":{"type":"structure","required":["UserName"],"members":{"UserName":{}}}},"DeleteUserPermissionsBoundary":{"input":{"type":"structure","required":["UserName"],"members":{"UserName":{}}}},"DeleteUserPolicy":{"input":{"type":"structure","required":["UserName","PolicyName"],"members":{"UserName":{},"PolicyName":{}}}},"DeleteVirtualMFADevice":{"input":{"type":"structure","required":["SerialNumber"],"members":{"SerialNumber":{}}}},"DetachGroupPolicy":{"input":{"type":"structure","required":["GroupName","PolicyArn"],"members":{"GroupName":{},"PolicyArn":{}}}},"DetachRolePolicy":{"input":{"type":"structure","required":["RoleName","PolicyArn"],"members":{"RoleName":{},"PolicyArn":{}}}},"DetachUserPolicy":{"input":{"type":"structure","required":["UserName","PolicyArn"],"members":{"UserName":{},"PolicyArn":{}}}},"EnableMFADevice":{"input":{"type":"structure","required":["UserName","SerialNumber","AuthenticationCode1","AuthenticationCode2"],"members":{"UserName":{},"SerialNumber":{},"AuthenticationCode1":{},"AuthenticationCode2":{}}}},"GenerateCredentialReport":{"output":{"resultWrapper":"GenerateCredentialReportResult","type":"structure","members":{"State":{},"Description":{}}}},"GenerateOrganizationsAccessReport":{"input":{"type":"structure","required":["EntityPath"],"members":{"EntityPath":{},"OrganizationsPolicyId":{}}},"output":{"resultWrapper":"GenerateOrganizationsAccessReportResult","type":"structure","members":{"JobId":{}}}},"GenerateServiceLastAccessedDetails":{"input":{"type":"structure","required":["Arn"],"members":{"Arn":{},"Granularity":{}}},"output":{"resultWrapper":"GenerateServiceLastAccessedDetailsResult","type":"structure","members":{"JobId":{}}}},"GetAccessKeyLastUsed":{"input":{"type":"structure","required":["AccessKeyId"],"members":{"AccessKeyId":{}}},"output":{"resultWrapper":"GetAccessKeyLastUsedResult","type":"structure","members":{"UserName":{},"AccessKeyLastUsed":{"type":"structure","required":["LastUsedDate","ServiceName","Region"],"members":{"LastUsedDate":{"type":"timestamp"},"ServiceName":{},"Region":{}}}}}},"GetAccountAuthorizationDetails":{"input":{"type":"structure","members":{"Filter":{"type":"list","member":{}},"MaxItems":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"GetAccountAuthorizationDetailsResult","type":"structure","members":{"UserDetailList":{"type":"list","member":{"type":"structure","members":{"Path":{},"UserName":{},"UserId":{},"Arn":{},"CreateDate":{"type":"timestamp"},"UserPolicyList":{"shape":"S43"},"GroupList":{"type":"list","member":{}},"AttachedManagedPolicies":{"shape":"S46"},"PermissionsBoundary":{"shape":"S16"},"Tags":{"shape":"Sv"}}}},"GroupDetailList":{"type":"list","member":{"type":"structure","members":{"Path":{},"GroupName":{},"GroupId":{},"Arn":{},"CreateDate":{"type":"timestamp"},"GroupPolicyList":{"shape":"S43"},"AttachedManagedPolicies":{"shape":"S46"}}}},"RoleDetailList":{"type":"list","member":{"type":"structure","members":{"Path":{},"RoleName":{},"RoleId":{},"Arn":{},"CreateDate":{"type":"timestamp"},"AssumeRolePolicyDocument":{},"InstanceProfileList":{"shape":"S4c"},"RolePolicyList":{"shape":"S43"},"AttachedManagedPolicies":{"shape":"S46"},"PermissionsBoundary":{"shape":"S16"},"Tags":{"shape":"Sv"},"RoleLastUsed":{"shape":"S18"}}}},"Policies":{"type":"list","member":{"type":"structure","members":{"PolicyName":{},"PolicyId":{},"Arn":{},"Path":{},"DefaultVersionId":{},"AttachmentCount":{"type":"integer"},"PermissionsBoundaryUsageCount":{"type":"integer"},"IsAttachable":{"type":"boolean"},"Description":{},"CreateDate":{"type":"timestamp"},"UpdateDate":{"type":"timestamp"},"PolicyVersionList":{"shape":"S4f"}}}},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"GetAccountPasswordPolicy":{"output":{"resultWrapper":"GetAccountPasswordPolicyResult","type":"structure","required":["PasswordPolicy"],"members":{"PasswordPolicy":{"type":"structure","members":{"MinimumPasswordLength":{"type":"integer"},"RequireSymbols":{"type":"boolean"},"RequireNumbers":{"type":"boolean"},"RequireUppercaseCharacters":{"type":"boolean"},"RequireLowercaseCharacters":{"type":"boolean"},"AllowUsersToChangePassword":{"type":"boolean"},"ExpirePasswords":{"type":"boolean"},"MaxPasswordAge":{"type":"integer"},"PasswordReusePrevention":{"type":"integer"},"HardExpiry":{"type":"boolean"}}}}}},"GetAccountSummary":{"output":{"resultWrapper":"GetAccountSummaryResult","type":"structure","members":{"SummaryMap":{"type":"map","key":{},"value":{"type":"integer"}}}}},"GetContextKeysForCustomPolicy":{"input":{"type":"structure","required":["PolicyInputList"],"members":{"PolicyInputList":{"shape":"S4s"}}},"output":{"shape":"S4t","resultWrapper":"GetContextKeysForCustomPolicyResult"}},"GetContextKeysForPrincipalPolicy":{"input":{"type":"structure","required":["PolicySourceArn"],"members":{"PolicySourceArn":{},"PolicyInputList":{"shape":"S4s"}}},"output":{"shape":"S4t","resultWrapper":"GetContextKeysForPrincipalPolicyResult"}},"GetCredentialReport":{"output":{"resultWrapper":"GetCredentialReportResult","type":"structure","members":{"Content":{"type":"blob"},"ReportFormat":{},"GeneratedTime":{"type":"timestamp"}}}},"GetGroup":{"input":{"type":"structure","required":["GroupName"],"members":{"GroupName":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"GetGroupResult","type":"structure","required":["Group","Users"],"members":{"Group":{"shape":"Ss"},"Users":{"shape":"S52"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"GetGroupPolicy":{"input":{"type":"structure","required":["GroupName","PolicyName"],"members":{"GroupName":{},"PolicyName":{}}},"output":{"resultWrapper":"GetGroupPolicyResult","type":"structure","required":["GroupName","PolicyName","PolicyDocument"],"members":{"GroupName":{},"PolicyName":{},"PolicyDocument":{}}}},"GetInstanceProfile":{"input":{"type":"structure","required":["InstanceProfileName"],"members":{"InstanceProfileName":{}}},"output":{"resultWrapper":"GetInstanceProfileResult","type":"structure","required":["InstanceProfile"],"members":{"InstanceProfile":{"shape":"S10"}}}},"GetLoginProfile":{"input":{"type":"structure","required":["UserName"],"members":{"UserName":{}}},"output":{"resultWrapper":"GetLoginProfileResult","type":"structure","required":["LoginProfile"],"members":{"LoginProfile":{"shape":"S1d"}}}},"GetOpenIDConnectProvider":{"input":{"type":"structure","required":["OpenIDConnectProviderArn"],"members":{"OpenIDConnectProviderArn":{}}},"output":{"resultWrapper":"GetOpenIDConnectProviderResult","type":"structure","members":{"Url":{},"ClientIDList":{"shape":"S1g"},"ThumbprintList":{"shape":"S1h"},"CreateDate":{"type":"timestamp"},"Tags":{"shape":"Sv"}}}},"GetOrganizationsAccessReport":{"input":{"type":"structure","required":["JobId"],"members":{"JobId":{},"MaxItems":{"type":"integer"},"Marker":{},"SortKey":{}}},"output":{"resultWrapper":"GetOrganizationsAccessReportResult","type":"structure","required":["JobStatus","JobCreationDate"],"members":{"JobStatus":{},"JobCreationDate":{"type":"timestamp"},"JobCompletionDate":{"type":"timestamp"},"NumberOfServicesAccessible":{"type":"integer"},"NumberOfServicesNotAccessed":{"type":"integer"},"AccessDetails":{"type":"list","member":{"type":"structure","required":["ServiceName","ServiceNamespace"],"members":{"ServiceName":{},"ServiceNamespace":{},"Region":{},"EntityPath":{},"LastAuthenticatedTime":{"type":"timestamp"},"TotalAuthenticatedEntities":{"type":"integer"}}}},"IsTruncated":{"type":"boolean"},"Marker":{},"ErrorDetails":{"shape":"S5k"}}}},"GetPolicy":{"input":{"type":"structure","required":["PolicyArn"],"members":{"PolicyArn":{}}},"output":{"resultWrapper":"GetPolicyResult","type":"structure","members":{"Policy":{"shape":"S1p"}}}},"GetPolicyVersion":{"input":{"type":"structure","required":["PolicyArn","VersionId"],"members":{"PolicyArn":{},"VersionId":{}}},"output":{"resultWrapper":"GetPolicyVersionResult","type":"structure","members":{"PolicyVersion":{"shape":"S1u"}}}},"GetRole":{"input":{"type":"structure","required":["RoleName"],"members":{"RoleName":{}}},"output":{"resultWrapper":"GetRoleResult","type":"structure","required":["Role"],"members":{"Role":{"shape":"S12"}}}},"GetRolePolicy":{"input":{"type":"structure","required":["RoleName","PolicyName"],"members":{"RoleName":{},"PolicyName":{}}},"output":{"resultWrapper":"GetRolePolicyResult","type":"structure","required":["RoleName","PolicyName","PolicyDocument"],"members":{"RoleName":{},"PolicyName":{},"PolicyDocument":{}}}},"GetSAMLProvider":{"input":{"type":"structure","required":["SAMLProviderArn"],"members":{"SAMLProviderArn":{}}},"output":{"resultWrapper":"GetSAMLProviderResult","type":"structure","members":{"SAMLMetadataDocument":{},"CreateDate":{"type":"timestamp"},"ValidUntil":{"type":"timestamp"},"Tags":{"shape":"Sv"}}}},"GetSSHPublicKey":{"input":{"type":"structure","required":["UserName","SSHPublicKeyId","Encoding"],"members":{"UserName":{},"SSHPublicKeyId":{},"Encoding":{}}},"output":{"resultWrapper":"GetSSHPublicKeyResult","type":"structure","members":{"SSHPublicKey":{"shape":"S5y"}}}},"GetServerCertificate":{"input":{"type":"structure","required":["ServerCertificateName"],"members":{"ServerCertificateName":{}}},"output":{"resultWrapper":"GetServerCertificateResult","type":"structure","required":["ServerCertificate"],"members":{"ServerCertificate":{"type":"structure","required":["ServerCertificateMetadata","CertificateBody"],"members":{"ServerCertificateMetadata":{"shape":"S64"},"CertificateBody":{},"CertificateChain":{},"Tags":{"shape":"Sv"}}}}}},"GetServiceLastAccessedDetails":{"input":{"type":"structure","required":["JobId"],"members":{"JobId":{},"MaxItems":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"GetServiceLastAccessedDetailsResult","type":"structure","required":["JobStatus","JobCreationDate","ServicesLastAccessed","JobCompletionDate"],"members":{"JobStatus":{},"JobType":{},"JobCreationDate":{"type":"timestamp"},"ServicesLastAccessed":{"type":"list","member":{"type":"structure","required":["ServiceName","ServiceNamespace"],"members":{"ServiceName":{},"LastAuthenticated":{"type":"timestamp"},"ServiceNamespace":{},"LastAuthenticatedEntity":{},"LastAuthenticatedRegion":{},"TotalAuthenticatedEntities":{"type":"integer"},"TrackedActionsLastAccessed":{"type":"list","member":{"type":"structure","members":{"ActionName":{},"LastAccessedEntity":{},"LastAccessedTime":{"type":"timestamp"},"LastAccessedRegion":{}}}}}}},"JobCompletionDate":{"type":"timestamp"},"IsTruncated":{"type":"boolean"},"Marker":{},"Error":{"shape":"S5k"}}}},"GetServiceLastAccessedDetailsWithEntities":{"input":{"type":"structure","required":["JobId","ServiceNamespace"],"members":{"JobId":{},"ServiceNamespace":{},"MaxItems":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"GetServiceLastAccessedDetailsWithEntitiesResult","type":"structure","required":["JobStatus","JobCreationDate","JobCompletionDate","EntityDetailsList"],"members":{"JobStatus":{},"JobCreationDate":{"type":"timestamp"},"JobCompletionDate":{"type":"timestamp"},"EntityDetailsList":{"type":"list","member":{"type":"structure","required":["EntityInfo"],"members":{"EntityInfo":{"type":"structure","required":["Arn","Name","Type","Id"],"members":{"Arn":{},"Name":{},"Type":{},"Id":{},"Path":{}}},"LastAuthenticated":{"type":"timestamp"}}}},"IsTruncated":{"type":"boolean"},"Marker":{},"Error":{"shape":"S5k"}}}},"GetServiceLinkedRoleDeletionStatus":{"input":{"type":"structure","required":["DeletionTaskId"],"members":{"DeletionTaskId":{}}},"output":{"resultWrapper":"GetServiceLinkedRoleDeletionStatusResult","type":"structure","required":["Status"],"members":{"Status":{},"Reason":{"type":"structure","members":{"Reason":{},"RoleUsageList":{"type":"list","member":{"type":"structure","members":{"Region":{},"Resources":{"type":"list","member":{}}}}}}}}}},"GetUser":{"input":{"type":"structure","members":{"UserName":{}}},"output":{"resultWrapper":"GetUserResult","type":"structure","required":["User"],"members":{"User":{"shape":"S2d"}}}},"GetUserPolicy":{"input":{"type":"structure","required":["UserName","PolicyName"],"members":{"UserName":{},"PolicyName":{}}},"output":{"resultWrapper":"GetUserPolicyResult","type":"structure","required":["UserName","PolicyName","PolicyDocument"],"members":{"UserName":{},"PolicyName":{},"PolicyDocument":{}}}},"ListAccessKeys":{"input":{"type":"structure","members":{"UserName":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListAccessKeysResult","type":"structure","required":["AccessKeyMetadata"],"members":{"AccessKeyMetadata":{"type":"list","member":{"type":"structure","members":{"UserName":{},"AccessKeyId":{},"Status":{},"CreateDate":{"type":"timestamp"}}}},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListAccountAliases":{"input":{"type":"structure","members":{"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListAccountAliasesResult","type":"structure","required":["AccountAliases"],"members":{"AccountAliases":{"type":"list","member":{}},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListAttachedGroupPolicies":{"input":{"type":"structure","required":["GroupName"],"members":{"GroupName":{},"PathPrefix":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListAttachedGroupPoliciesResult","type":"structure","members":{"AttachedPolicies":{"shape":"S46"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListAttachedRolePolicies":{"input":{"type":"structure","required":["RoleName"],"members":{"RoleName":{},"PathPrefix":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListAttachedRolePoliciesResult","type":"structure","members":{"AttachedPolicies":{"shape":"S46"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListAttachedUserPolicies":{"input":{"type":"structure","required":["UserName"],"members":{"UserName":{},"PathPrefix":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListAttachedUserPoliciesResult","type":"structure","members":{"AttachedPolicies":{"shape":"S46"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListEntitiesForPolicy":{"input":{"type":"structure","required":["PolicyArn"],"members":{"PolicyArn":{},"EntityFilter":{},"PathPrefix":{},"PolicyUsageFilter":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListEntitiesForPolicyResult","type":"structure","members":{"PolicyGroups":{"type":"list","member":{"type":"structure","members":{"GroupName":{},"GroupId":{}}}},"PolicyUsers":{"type":"list","member":{"type":"structure","members":{"UserName":{},"UserId":{}}}},"PolicyRoles":{"type":"list","member":{"type":"structure","members":{"RoleName":{},"RoleId":{}}}},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListGroupPolicies":{"input":{"type":"structure","required":["GroupName"],"members":{"GroupName":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListGroupPoliciesResult","type":"structure","required":["PolicyNames"],"members":{"PolicyNames":{"shape":"S7k"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListGroups":{"input":{"type":"structure","members":{"PathPrefix":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListGroupsResult","type":"structure","required":["Groups"],"members":{"Groups":{"shape":"S7o"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListGroupsForUser":{"input":{"type":"structure","required":["UserName"],"members":{"UserName":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListGroupsForUserResult","type":"structure","required":["Groups"],"members":{"Groups":{"shape":"S7o"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListInstanceProfileTags":{"input":{"type":"structure","required":["InstanceProfileName"],"members":{"InstanceProfileName":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListInstanceProfileTagsResult","type":"structure","required":["Tags"],"members":{"Tags":{"shape":"Sv"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListInstanceProfiles":{"input":{"type":"structure","members":{"PathPrefix":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListInstanceProfilesResult","type":"structure","required":["InstanceProfiles"],"members":{"InstanceProfiles":{"shape":"S4c"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListInstanceProfilesForRole":{"input":{"type":"structure","required":["RoleName"],"members":{"RoleName":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListInstanceProfilesForRoleResult","type":"structure","required":["InstanceProfiles"],"members":{"InstanceProfiles":{"shape":"S4c"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListMFADeviceTags":{"input":{"type":"structure","required":["SerialNumber"],"members":{"SerialNumber":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListMFADeviceTagsResult","type":"structure","required":["Tags"],"members":{"Tags":{"shape":"Sv"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListMFADevices":{"input":{"type":"structure","members":{"UserName":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListMFADevicesResult","type":"structure","required":["MFADevices"],"members":{"MFADevices":{"type":"list","member":{"type":"structure","required":["UserName","SerialNumber","EnableDate"],"members":{"UserName":{},"SerialNumber":{},"EnableDate":{"type":"timestamp"}}}},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListOpenIDConnectProviderTags":{"input":{"type":"structure","required":["OpenIDConnectProviderArn"],"members":{"OpenIDConnectProviderArn":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListOpenIDConnectProviderTagsResult","type":"structure","required":["Tags"],"members":{"Tags":{"shape":"Sv"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListOpenIDConnectProviders":{"input":{"type":"structure","members":{}},"output":{"resultWrapper":"ListOpenIDConnectProvidersResult","type":"structure","members":{"OpenIDConnectProviderList":{"type":"list","member":{"type":"structure","members":{"Arn":{}}}}}}},"ListPolicies":{"input":{"type":"structure","members":{"Scope":{},"OnlyAttached":{"type":"boolean"},"PathPrefix":{},"PolicyUsageFilter":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListPoliciesResult","type":"structure","members":{"Policies":{"type":"list","member":{"shape":"S1p"}},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListPoliciesGrantingServiceAccess":{"input":{"type":"structure","required":["Arn","ServiceNamespaces"],"members":{"Marker":{},"Arn":{},"ServiceNamespaces":{"type":"list","member":{}}}},"output":{"resultWrapper":"ListPoliciesGrantingServiceAccessResult","type":"structure","required":["PoliciesGrantingServiceAccess"],"members":{"PoliciesGrantingServiceAccess":{"type":"list","member":{"type":"structure","members":{"ServiceNamespace":{},"Policies":{"type":"list","member":{"type":"structure","required":["PolicyName","PolicyType"],"members":{"PolicyName":{},"PolicyType":{},"PolicyArn":{},"EntityType":{},"EntityName":{}}}}}}},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListPolicyTags":{"input":{"type":"structure","required":["PolicyArn"],"members":{"PolicyArn":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListPolicyTagsResult","type":"structure","required":["Tags"],"members":{"Tags":{"shape":"Sv"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListPolicyVersions":{"input":{"type":"structure","required":["PolicyArn"],"members":{"PolicyArn":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListPolicyVersionsResult","type":"structure","members":{"Versions":{"shape":"S4f"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListRolePolicies":{"input":{"type":"structure","required":["RoleName"],"members":{"RoleName":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListRolePoliciesResult","type":"structure","required":["PolicyNames"],"members":{"PolicyNames":{"shape":"S7k"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListRoleTags":{"input":{"type":"structure","required":["RoleName"],"members":{"RoleName":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListRoleTagsResult","type":"structure","required":["Tags"],"members":{"Tags":{"shape":"Sv"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListRoles":{"input":{"type":"structure","members":{"PathPrefix":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListRolesResult","type":"structure","required":["Roles"],"members":{"Roles":{"shape":"S11"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListSAMLProviderTags":{"input":{"type":"structure","required":["SAMLProviderArn"],"members":{"SAMLProviderArn":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListSAMLProviderTagsResult","type":"structure","required":["Tags"],"members":{"Tags":{"shape":"Sv"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListSAMLProviders":{"input":{"type":"structure","members":{}},"output":{"resultWrapper":"ListSAMLProvidersResult","type":"structure","members":{"SAMLProviderList":{"type":"list","member":{"type":"structure","members":{"Arn":{},"ValidUntil":{"type":"timestamp"},"CreateDate":{"type":"timestamp"}}}}}}},"ListSSHPublicKeys":{"input":{"type":"structure","members":{"UserName":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListSSHPublicKeysResult","type":"structure","members":{"SSHPublicKeys":{"type":"list","member":{"type":"structure","required":["UserName","SSHPublicKeyId","Status","UploadDate"],"members":{"UserName":{},"SSHPublicKeyId":{},"Status":{},"UploadDate":{"type":"timestamp"}}}},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListServerCertificateTags":{"input":{"type":"structure","required":["ServerCertificateName"],"members":{"ServerCertificateName":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListServerCertificateTagsResult","type":"structure","required":["Tags"],"members":{"Tags":{"shape":"Sv"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListServerCertificates":{"input":{"type":"structure","members":{"PathPrefix":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListServerCertificatesResult","type":"structure","required":["ServerCertificateMetadataList"],"members":{"ServerCertificateMetadataList":{"type":"list","member":{"shape":"S64"}},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListServiceSpecificCredentials":{"input":{"type":"structure","members":{"UserName":{},"ServiceName":{}}},"output":{"resultWrapper":"ListServiceSpecificCredentialsResult","type":"structure","members":{"ServiceSpecificCredentials":{"type":"list","member":{"type":"structure","required":["UserName","Status","ServiceUserName","CreateDate","ServiceSpecificCredentialId","ServiceName"],"members":{"UserName":{},"Status":{},"ServiceUserName":{},"CreateDate":{"type":"timestamp"},"ServiceSpecificCredentialId":{},"ServiceName":{}}}}}}},"ListSigningCertificates":{"input":{"type":"structure","members":{"UserName":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListSigningCertificatesResult","type":"structure","required":["Certificates"],"members":{"Certificates":{"type":"list","member":{"shape":"S9i"}},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListUserPolicies":{"input":{"type":"structure","required":["UserName"],"members":{"UserName":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListUserPoliciesResult","type":"structure","required":["PolicyNames"],"members":{"PolicyNames":{"shape":"S7k"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListUserTags":{"input":{"type":"structure","required":["UserName"],"members":{"UserName":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListUserTagsResult","type":"structure","required":["Tags"],"members":{"Tags":{"shape":"Sv"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListUsers":{"input":{"type":"structure","members":{"PathPrefix":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListUsersResult","type":"structure","required":["Users"],"members":{"Users":{"shape":"S52"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListVirtualMFADevices":{"input":{"type":"structure","members":{"AssignmentStatus":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListVirtualMFADevicesResult","type":"structure","required":["VirtualMFADevices"],"members":{"VirtualMFADevices":{"type":"list","member":{"shape":"S2h"}},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"PutGroupPolicy":{"input":{"type":"structure","required":["GroupName","PolicyName","PolicyDocument"],"members":{"GroupName":{},"PolicyName":{},"PolicyDocument":{}}}},"PutRolePermissionsBoundary":{"input":{"type":"structure","required":["RoleName","PermissionsBoundary"],"members":{"RoleName":{},"PermissionsBoundary":{}}}},"PutRolePolicy":{"input":{"type":"structure","required":["RoleName","PolicyName","PolicyDocument"],"members":{"RoleName":{},"PolicyName":{},"PolicyDocument":{}}}},"PutUserPermissionsBoundary":{"input":{"type":"structure","required":["UserName","PermissionsBoundary"],"members":{"UserName":{},"PermissionsBoundary":{}}}},"PutUserPolicy":{"input":{"type":"structure","required":["UserName","PolicyName","PolicyDocument"],"members":{"UserName":{},"PolicyName":{},"PolicyDocument":{}}}},"RemoveClientIDFromOpenIDConnectProvider":{"input":{"type":"structure","required":["OpenIDConnectProviderArn","ClientID"],"members":{"OpenIDConnectProviderArn":{},"ClientID":{}}}},"RemoveRoleFromInstanceProfile":{"input":{"type":"structure","required":["InstanceProfileName","RoleName"],"members":{"InstanceProfileName":{},"RoleName":{}}}},"RemoveUserFromGroup":{"input":{"type":"structure","required":["GroupName","UserName"],"members":{"GroupName":{},"UserName":{}}}},"ResetServiceSpecificCredential":{"input":{"type":"structure","required":["ServiceSpecificCredentialId"],"members":{"UserName":{},"ServiceSpecificCredentialId":{}}},"output":{"resultWrapper":"ResetServiceSpecificCredentialResult","type":"structure","members":{"ServiceSpecificCredential":{"shape":"S27"}}}},"ResyncMFADevice":{"input":{"type":"structure","required":["UserName","SerialNumber","AuthenticationCode1","AuthenticationCode2"],"members":{"UserName":{},"SerialNumber":{},"AuthenticationCode1":{},"AuthenticationCode2":{}}}},"SetDefaultPolicyVersion":{"input":{"type":"structure","required":["PolicyArn","VersionId"],"members":{"PolicyArn":{},"VersionId":{}}}},"SetSecurityTokenServicePreferences":{"input":{"type":"structure","required":["GlobalEndpointTokenVersion"],"members":{"GlobalEndpointTokenVersion":{}}}},"SimulateCustomPolicy":{"input":{"type":"structure","required":["PolicyInputList","ActionNames"],"members":{"PolicyInputList":{"shape":"S4s"},"PermissionsBoundaryPolicyInputList":{"shape":"S4s"},"ActionNames":{"shape":"Sa8"},"ResourceArns":{"shape":"Saa"},"ResourcePolicy":{},"ResourceOwner":{},"CallerArn":{},"ContextEntries":{"shape":"Sac"},"ResourceHandlingOption":{},"MaxItems":{"type":"integer"},"Marker":{}}},"output":{"shape":"Sai","resultWrapper":"SimulateCustomPolicyResult"}},"SimulatePrincipalPolicy":{"input":{"type":"structure","required":["PolicySourceArn","ActionNames"],"members":{"PolicySourceArn":{},"PolicyInputList":{"shape":"S4s"},"PermissionsBoundaryPolicyInputList":{"shape":"S4s"},"ActionNames":{"shape":"Sa8"},"ResourceArns":{"shape":"Saa"},"ResourcePolicy":{},"ResourceOwner":{},"CallerArn":{},"ContextEntries":{"shape":"Sac"},"ResourceHandlingOption":{},"MaxItems":{"type":"integer"},"Marker":{}}},"output":{"shape":"Sai","resultWrapper":"SimulatePrincipalPolicyResult"}},"TagInstanceProfile":{"input":{"type":"structure","required":["InstanceProfileName","Tags"],"members":{"InstanceProfileName":{},"Tags":{"shape":"Sv"}}}},"TagMFADevice":{"input":{"type":"structure","required":["SerialNumber","Tags"],"members":{"SerialNumber":{},"Tags":{"shape":"Sv"}}}},"TagOpenIDConnectProvider":{"input":{"type":"structure","required":["OpenIDConnectProviderArn","Tags"],"members":{"OpenIDConnectProviderArn":{},"Tags":{"shape":"Sv"}}}},"TagPolicy":{"input":{"type":"structure","required":["PolicyArn","Tags"],"members":{"PolicyArn":{},"Tags":{"shape":"Sv"}}}},"TagRole":{"input":{"type":"structure","required":["RoleName","Tags"],"members":{"RoleName":{},"Tags":{"shape":"Sv"}}}},"TagSAMLProvider":{"input":{"type":"structure","required":["SAMLProviderArn","Tags"],"members":{"SAMLProviderArn":{},"Tags":{"shape":"Sv"}}}},"TagServerCertificate":{"input":{"type":"structure","required":["ServerCertificateName","Tags"],"members":{"ServerCertificateName":{},"Tags":{"shape":"Sv"}}}},"TagUser":{"input":{"type":"structure","required":["UserName","Tags"],"members":{"UserName":{},"Tags":{"shape":"Sv"}}}},"UntagInstanceProfile":{"input":{"type":"structure","required":["InstanceProfileName","TagKeys"],"members":{"InstanceProfileName":{},"TagKeys":{"shape":"Sb9"}}}},"UntagMFADevice":{"input":{"type":"structure","required":["SerialNumber","TagKeys"],"members":{"SerialNumber":{},"TagKeys":{"shape":"Sb9"}}}},"UntagOpenIDConnectProvider":{"input":{"type":"structure","required":["OpenIDConnectProviderArn","TagKeys"],"members":{"OpenIDConnectProviderArn":{},"TagKeys":{"shape":"Sb9"}}}},"UntagPolicy":{"input":{"type":"structure","required":["PolicyArn","TagKeys"],"members":{"PolicyArn":{},"TagKeys":{"shape":"Sb9"}}}},"UntagRole":{"input":{"type":"structure","required":["RoleName","TagKeys"],"members":{"RoleName":{},"TagKeys":{"shape":"Sb9"}}}},"UntagSAMLProvider":{"input":{"type":"structure","required":["SAMLProviderArn","TagKeys"],"members":{"SAMLProviderArn":{},"TagKeys":{"shape":"Sb9"}}}},"UntagServerCertificate":{"input":{"type":"structure","required":["ServerCertificateName","TagKeys"],"members":{"ServerCertificateName":{},"TagKeys":{"shape":"Sb9"}}}},"UntagUser":{"input":{"type":"structure","required":["UserName","TagKeys"],"members":{"UserName":{},"TagKeys":{"shape":"Sb9"}}}},"UpdateAccessKey":{"input":{"type":"structure","required":["AccessKeyId","Status"],"members":{"UserName":{},"AccessKeyId":{},"Status":{}}}},"UpdateAccountPasswordPolicy":{"input":{"type":"structure","members":{"MinimumPasswordLength":{"type":"integer"},"RequireSymbols":{"type":"boolean"},"RequireNumbers":{"type":"boolean"},"RequireUppercaseCharacters":{"type":"boolean"},"RequireLowercaseCharacters":{"type":"boolean"},"AllowUsersToChangePassword":{"type":"boolean"},"MaxPasswordAge":{"type":"integer"},"PasswordReusePrevention":{"type":"integer"},"HardExpiry":{"type":"boolean"}}}},"UpdateAssumeRolePolicy":{"input":{"type":"structure","required":["RoleName","PolicyDocument"],"members":{"RoleName":{},"PolicyDocument":{}}}},"UpdateGroup":{"input":{"type":"structure","required":["GroupName"],"members":{"GroupName":{},"NewPath":{},"NewGroupName":{}}}},"UpdateLoginProfile":{"input":{"type":"structure","required":["UserName"],"members":{"UserName":{},"Password":{"shape":"Sf"},"PasswordResetRequired":{"type":"boolean"}}}},"UpdateOpenIDConnectProviderThumbprint":{"input":{"type":"structure","required":["OpenIDConnectProviderArn","ThumbprintList"],"members":{"OpenIDConnectProviderArn":{},"ThumbprintList":{"shape":"S1h"}}}},"UpdateRole":{"input":{"type":"structure","required":["RoleName"],"members":{"RoleName":{},"Description":{},"MaxSessionDuration":{"type":"integer"}}},"output":{"resultWrapper":"UpdateRoleResult","type":"structure","members":{}}},"UpdateRoleDescription":{"input":{"type":"structure","required":["RoleName","Description"],"members":{"RoleName":{},"Description":{}}},"output":{"resultWrapper":"UpdateRoleDescriptionResult","type":"structure","members":{"Role":{"shape":"S12"}}}},"UpdateSAMLProvider":{"input":{"type":"structure","required":["SAMLMetadataDocument","SAMLProviderArn"],"members":{"SAMLMetadataDocument":{},"SAMLProviderArn":{}}},"output":{"resultWrapper":"UpdateSAMLProviderResult","type":"structure","members":{"SAMLProviderArn":{}}}},"UpdateSSHPublicKey":{"input":{"type":"structure","required":["UserName","SSHPublicKeyId","Status"],"members":{"UserName":{},"SSHPublicKeyId":{},"Status":{}}}},"UpdateServerCertificate":{"input":{"type":"structure","required":["ServerCertificateName"],"members":{"ServerCertificateName":{},"NewPath":{},"NewServerCertificateName":{}}}},"UpdateServiceSpecificCredential":{"input":{"type":"structure","required":["ServiceSpecificCredentialId","Status"],"members":{"UserName":{},"ServiceSpecificCredentialId":{},"Status":{}}}},"UpdateSigningCertificate":{"input":{"type":"structure","required":["CertificateId","Status"],"members":{"UserName":{},"CertificateId":{},"Status":{}}}},"UpdateUser":{"input":{"type":"structure","required":["UserName"],"members":{"UserName":{},"NewPath":{},"NewUserName":{}}}},"UploadSSHPublicKey":{"input":{"type":"structure","required":["UserName","SSHPublicKeyBody"],"members":{"UserName":{},"SSHPublicKeyBody":{}}},"output":{"resultWrapper":"UploadSSHPublicKeyResult","type":"structure","members":{"SSHPublicKey":{"shape":"S5y"}}}},"UploadServerCertificate":{"input":{"type":"structure","required":["ServerCertificateName","CertificateBody","PrivateKey"],"members":{"Path":{},"ServerCertificateName":{},"CertificateBody":{},"PrivateKey":{"type":"string","sensitive":true},"CertificateChain":{},"Tags":{"shape":"Sv"}}},"output":{"resultWrapper":"UploadServerCertificateResult","type":"structure","members":{"ServerCertificateMetadata":{"shape":"S64"},"Tags":{"shape":"Sv"}}}},"UploadSigningCertificate":{"input":{"type":"structure","required":["CertificateBody"],"members":{"UserName":{},"CertificateBody":{}}},"output":{"resultWrapper":"UploadSigningCertificateResult","type":"structure","required":["Certificate"],"members":{"Certificate":{"shape":"S9i"}}}}},"shapes":{"Sf":{"type":"string","sensitive":true},"Ss":{"type":"structure","required":["Path","GroupName","GroupId","Arn","CreateDate"],"members":{"Path":{},"GroupName":{},"GroupId":{},"Arn":{},"CreateDate":{"type":"timestamp"}}},"Sv":{"type":"list","member":{"type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{}}}},"S10":{"type":"structure","required":["Path","InstanceProfileName","InstanceProfileId","Arn","CreateDate","Roles"],"members":{"Path":{},"InstanceProfileName":{},"InstanceProfileId":{},"Arn":{},"CreateDate":{"type":"timestamp"},"Roles":{"shape":"S11"},"Tags":{"shape":"Sv"}}},"S11":{"type":"list","member":{"shape":"S12"}},"S12":{"type":"structure","required":["Path","RoleName","RoleId","Arn","CreateDate"],"members":{"Path":{},"RoleName":{},"RoleId":{},"Arn":{},"CreateDate":{"type":"timestamp"},"AssumeRolePolicyDocument":{},"Description":{},"MaxSessionDuration":{"type":"integer"},"PermissionsBoundary":{"shape":"S16"},"Tags":{"shape":"Sv"},"RoleLastUsed":{"shape":"S18"}}},"S16":{"type":"structure","members":{"PermissionsBoundaryType":{},"PermissionsBoundaryArn":{}}},"S18":{"type":"structure","members":{"LastUsedDate":{"type":"timestamp"},"Region":{}}},"S1d":{"type":"structure","required":["UserName","CreateDate"],"members":{"UserName":{},"CreateDate":{"type":"timestamp"},"PasswordResetRequired":{"type":"boolean"}}},"S1g":{"type":"list","member":{}},"S1h":{"type":"list","member":{}},"S1p":{"type":"structure","members":{"PolicyName":{},"PolicyId":{},"Arn":{},"Path":{},"DefaultVersionId":{},"AttachmentCount":{"type":"integer"},"PermissionsBoundaryUsageCount":{"type":"integer"},"IsAttachable":{"type":"boolean"},"Description":{},"CreateDate":{"type":"timestamp"},"UpdateDate":{"type":"timestamp"},"Tags":{"shape":"Sv"}}},"S1u":{"type":"structure","members":{"Document":{},"VersionId":{},"IsDefaultVersion":{"type":"boolean"},"CreateDate":{"type":"timestamp"}}},"S27":{"type":"structure","required":["CreateDate","ServiceName","ServiceUserName","ServicePassword","ServiceSpecificCredentialId","UserName","Status"],"members":{"CreateDate":{"type":"timestamp"},"ServiceName":{},"ServiceUserName":{},"ServicePassword":{"type":"string","sensitive":true},"ServiceSpecificCredentialId":{},"UserName":{},"Status":{}}},"S2d":{"type":"structure","required":["Path","UserName","UserId","Arn","CreateDate"],"members":{"Path":{},"UserName":{},"UserId":{},"Arn":{},"CreateDate":{"type":"timestamp"},"PasswordLastUsed":{"type":"timestamp"},"PermissionsBoundary":{"shape":"S16"},"Tags":{"shape":"Sv"}}},"S2h":{"type":"structure","required":["SerialNumber"],"members":{"SerialNumber":{},"Base32StringSeed":{"shape":"S2j"},"QRCodePNG":{"shape":"S2j"},"User":{"shape":"S2d"},"EnableDate":{"type":"timestamp"},"Tags":{"shape":"Sv"}}},"S2j":{"type":"blob","sensitive":true},"S43":{"type":"list","member":{"type":"structure","members":{"PolicyName":{},"PolicyDocument":{}}}},"S46":{"type":"list","member":{"type":"structure","members":{"PolicyName":{},"PolicyArn":{}}}},"S4c":{"type":"list","member":{"shape":"S10"}},"S4f":{"type":"list","member":{"shape":"S1u"}},"S4s":{"type":"list","member":{}},"S4t":{"type":"structure","members":{"ContextKeyNames":{"shape":"S4u"}}},"S4u":{"type":"list","member":{}},"S52":{"type":"list","member":{"shape":"S2d"}},"S5k":{"type":"structure","required":["Message","Code"],"members":{"Message":{},"Code":{}}},"S5y":{"type":"structure","required":["UserName","SSHPublicKeyId","Fingerprint","SSHPublicKeyBody","Status"],"members":{"UserName":{},"SSHPublicKeyId":{},"Fingerprint":{},"SSHPublicKeyBody":{},"Status":{},"UploadDate":{"type":"timestamp"}}},"S64":{"type":"structure","required":["Path","ServerCertificateName","ServerCertificateId","Arn"],"members":{"Path":{},"ServerCertificateName":{},"ServerCertificateId":{},"Arn":{},"UploadDate":{"type":"timestamp"},"Expiration":{"type":"timestamp"}}},"S7k":{"type":"list","member":{}},"S7o":{"type":"list","member":{"shape":"Ss"}},"S9i":{"type":"structure","required":["UserName","CertificateId","CertificateBody","Status"],"members":{"UserName":{},"CertificateId":{},"CertificateBody":{},"Status":{},"UploadDate":{"type":"timestamp"}}},"Sa8":{"type":"list","member":{}},"Saa":{"type":"list","member":{}},"Sac":{"type":"list","member":{"type":"structure","members":{"ContextKeyName":{},"ContextKeyValues":{"type":"list","member":{}},"ContextKeyType":{}}}},"Sai":{"type":"structure","members":{"EvaluationResults":{"type":"list","member":{"type":"structure","required":["EvalActionName","EvalDecision"],"members":{"EvalActionName":{},"EvalResourceName":{},"EvalDecision":{},"MatchedStatements":{"shape":"Sam"},"MissingContextValues":{"shape":"S4u"},"OrganizationsDecisionDetail":{"type":"structure","members":{"AllowedByOrganizations":{"type":"boolean"}}},"PermissionsBoundaryDecisionDetail":{"shape":"Sau"},"EvalDecisionDetails":{"shape":"Sav"},"ResourceSpecificResults":{"type":"list","member":{"type":"structure","required":["EvalResourceName","EvalResourceDecision"],"members":{"EvalResourceName":{},"EvalResourceDecision":{},"MatchedStatements":{"shape":"Sam"},"MissingContextValues":{"shape":"S4u"},"EvalDecisionDetails":{"shape":"Sav"},"PermissionsBoundaryDecisionDetail":{"shape":"Sau"}}}}}}},"IsTruncated":{"type":"boolean"},"Marker":{}}},"Sam":{"type":"list","member":{"type":"structure","members":{"SourcePolicyId":{},"SourcePolicyType":{},"StartPosition":{"shape":"Saq"},"EndPosition":{"shape":"Saq"}}}},"Saq":{"type":"structure","members":{"Line":{"type":"integer"},"Column":{"type":"integer"}}},"Sau":{"type":"structure","members":{"AllowedByPermissionsBoundary":{"type":"boolean"}}},"Sav":{"type":"map","key":{},"value":{}},"Sb9":{"type":"list","member":{}}}}

/***/ }),
/* 251 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"GetAccountAuthorizationDetails":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":["UserDetailList","GroupDetailList","RoleDetailList","Policies"]},"GetGroup":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"Users"},"ListAccessKeys":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"AccessKeyMetadata"},"ListAccountAliases":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"AccountAliases"},"ListAttachedGroupPolicies":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"AttachedPolicies"},"ListAttachedRolePolicies":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"AttachedPolicies"},"ListAttachedUserPolicies":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"AttachedPolicies"},"ListEntitiesForPolicy":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":["PolicyGroups","PolicyUsers","PolicyRoles"]},"ListGroupPolicies":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"PolicyNames"},"ListGroups":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"Groups"},"ListGroupsForUser":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"Groups"},"ListInstanceProfiles":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"InstanceProfiles"},"ListInstanceProfilesForRole":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"InstanceProfiles"},"ListMFADevices":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"MFADevices"},"ListPolicies":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"Policies"},"ListPolicyVersions":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"Versions"},"ListRolePolicies":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"PolicyNames"},"ListRoles":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"Roles"},"ListSAMLProviders":{"result_key":"SAMLProviderList"},"ListSSHPublicKeys":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"SSHPublicKeys"},"ListServerCertificates":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"ServerCertificateMetadataList"},"ListSigningCertificates":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"Certificates"},"ListUserPolicies":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"PolicyNames"},"ListUserTags":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"Tags"},"ListUsers":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"Users"},"ListVirtualMFADevices":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"VirtualMFADevices"},"SimulateCustomPolicy":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"EvaluationResults"},"SimulatePrincipalPolicy":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"EvaluationResults"}}}

/***/ }),
/* 252 */
/***/ (function(module, exports) {

	module.exports = {"version":2,"waiters":{"InstanceProfileExists":{"delay":1,"operation":"GetInstanceProfile","maxAttempts":40,"acceptors":[{"expected":200,"matcher":"status","state":"success"},{"state":"retry","matcher":"status","expected":404}]},"UserExists":{"delay":1,"operation":"GetUser","maxAttempts":20,"acceptors":[{"state":"success","matcher":"status","expected":200},{"state":"retry","matcher":"error","expected":"NoSuchEntity"}]},"RoleExists":{"delay":1,"operation":"GetRole","maxAttempts":20,"acceptors":[{"state":"success","matcher":"status","expected":200},{"state":"retry","matcher":"error","expected":"NoSuchEntity"}]},"PolicyExists":{"delay":1,"operation":"GetPolicy","maxAttempts":20,"acceptors":[{"state":"success","matcher":"status","expected":200},{"state":"retry","matcher":"error","expected":"NoSuchEntity"}]}}}

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['importexport'] = {};
	AWS.ImportExport = Service.defineService('importexport', ['2010-06-01']);
	Object.defineProperty(apiLoader.services['importexport'], '2010-06-01', {
	  get: function get() {
	    var model = __webpack_require__(254);
	    model.paginators = __webpack_require__(255).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.ImportExport;


/***/ }),
/* 254 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"uid":"importexport-2010-06-01","apiVersion":"2010-06-01","endpointPrefix":"importexport","globalEndpoint":"importexport.amazonaws.com","serviceFullName":"AWS Import/Export","serviceId":"ImportExport","signatureVersion":"v2","xmlNamespace":"http://importexport.amazonaws.com/doc/2010-06-01/","protocol":"query"},"operations":{"CancelJob":{"http":{"requestUri":"/?Operation=CancelJob"},"input":{"type":"structure","required":["JobId"],"members":{"JobId":{},"APIVersion":{}}},"output":{"resultWrapper":"CancelJobResult","type":"structure","members":{"Success":{"type":"boolean"}}}},"CreateJob":{"http":{"requestUri":"/?Operation=CreateJob"},"input":{"type":"structure","required":["JobType","Manifest","ValidateOnly"],"members":{"JobType":{},"Manifest":{},"ManifestAddendum":{},"ValidateOnly":{"type":"boolean"},"APIVersion":{}}},"output":{"resultWrapper":"CreateJobResult","type":"structure","members":{"JobId":{},"JobType":{},"Signature":{},"SignatureFileContents":{},"WarningMessage":{},"ArtifactList":{"shape":"Sf"}}}},"GetShippingLabel":{"http":{"requestUri":"/?Operation=GetShippingLabel"},"input":{"type":"structure","required":["jobIds"],"members":{"jobIds":{"type":"list","member":{}},"name":{},"company":{},"phoneNumber":{},"country":{},"stateOrProvince":{},"city":{},"postalCode":{},"street1":{},"street2":{},"street3":{},"APIVersion":{}}},"output":{"resultWrapper":"GetShippingLabelResult","type":"structure","members":{"ShippingLabelURL":{},"Warning":{}}}},"GetStatus":{"http":{"requestUri":"/?Operation=GetStatus"},"input":{"type":"structure","required":["JobId"],"members":{"JobId":{},"APIVersion":{}}},"output":{"resultWrapper":"GetStatusResult","type":"structure","members":{"JobId":{},"JobType":{},"LocationCode":{},"LocationMessage":{},"ProgressCode":{},"ProgressMessage":{},"Carrier":{},"TrackingNumber":{},"LogBucket":{},"LogKey":{},"ErrorCount":{"type":"integer"},"Signature":{},"SignatureFileContents":{},"CurrentManifest":{},"CreationDate":{"type":"timestamp"},"ArtifactList":{"shape":"Sf"}}}},"ListJobs":{"http":{"requestUri":"/?Operation=ListJobs"},"input":{"type":"structure","members":{"MaxJobs":{"type":"integer"},"Marker":{},"APIVersion":{}}},"output":{"resultWrapper":"ListJobsResult","type":"structure","members":{"Jobs":{"type":"list","member":{"type":"structure","members":{"JobId":{},"CreationDate":{"type":"timestamp"},"IsCanceled":{"type":"boolean"},"JobType":{}}}},"IsTruncated":{"type":"boolean"}}}},"UpdateJob":{"http":{"requestUri":"/?Operation=UpdateJob"},"input":{"type":"structure","required":["JobId","Manifest","JobType","ValidateOnly"],"members":{"JobId":{},"Manifest":{},"JobType":{},"ValidateOnly":{"type":"boolean"},"APIVersion":{}}},"output":{"resultWrapper":"UpdateJobResult","type":"structure","members":{"Success":{"type":"boolean"},"WarningMessage":{},"ArtifactList":{"shape":"Sf"}}}}},"shapes":{"Sf":{"type":"list","member":{"type":"structure","members":{"Description":{},"URL":{}}}}},"examples":{}}

/***/ }),
/* 255 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"ListJobs":{"input_token":"Marker","output_token":"Jobs[-1].JobId","more_results":"IsTruncated","limit_key":"MaxJobs","result_key":"Jobs"}}}

/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['inspector'] = {};
	AWS.Inspector = Service.defineService('inspector', ['2015-08-18*', '2016-02-16']);
	Object.defineProperty(apiLoader.services['inspector'], '2016-02-16', {
	  get: function get() {
	    var model = __webpack_require__(257);
	    model.paginators = __webpack_require__(258).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.Inspector;


/***/ }),
/* 257 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-02-16","endpointPrefix":"inspector","jsonVersion":"1.1","protocol":"json","serviceFullName":"Amazon Inspector","serviceId":"Inspector","signatureVersion":"v4","targetPrefix":"InspectorService","uid":"inspector-2016-02-16"},"operations":{"AddAttributesToFindings":{"input":{"type":"structure","required":["findingArns","attributes"],"members":{"findingArns":{"shape":"S2"},"attributes":{"shape":"S4"}}},"output":{"type":"structure","required":["failedItems"],"members":{"failedItems":{"shape":"S9"}}}},"CreateAssessmentTarget":{"input":{"type":"structure","required":["assessmentTargetName"],"members":{"assessmentTargetName":{},"resourceGroupArn":{}}},"output":{"type":"structure","required":["assessmentTargetArn"],"members":{"assessmentTargetArn":{}}}},"CreateAssessmentTemplate":{"input":{"type":"structure","required":["assessmentTargetArn","assessmentTemplateName","durationInSeconds","rulesPackageArns"],"members":{"assessmentTargetArn":{},"assessmentTemplateName":{},"durationInSeconds":{"type":"integer"},"rulesPackageArns":{"shape":"Sj"},"userAttributesForFindings":{"shape":"S4"}}},"output":{"type":"structure","required":["assessmentTemplateArn"],"members":{"assessmentTemplateArn":{}}}},"CreateExclusionsPreview":{"input":{"type":"structure","required":["assessmentTemplateArn"],"members":{"assessmentTemplateArn":{}}},"output":{"type":"structure","required":["previewToken"],"members":{"previewToken":{}}}},"CreateResourceGroup":{"input":{"type":"structure","required":["resourceGroupTags"],"members":{"resourceGroupTags":{"shape":"Sp"}}},"output":{"type":"structure","required":["resourceGroupArn"],"members":{"resourceGroupArn":{}}}},"DeleteAssessmentRun":{"input":{"type":"structure","required":["assessmentRunArn"],"members":{"assessmentRunArn":{}}}},"DeleteAssessmentTarget":{"input":{"type":"structure","required":["assessmentTargetArn"],"members":{"assessmentTargetArn":{}}}},"DeleteAssessmentTemplate":{"input":{"type":"structure","required":["assessmentTemplateArn"],"members":{"assessmentTemplateArn":{}}}},"DescribeAssessmentRuns":{"input":{"type":"structure","required":["assessmentRunArns"],"members":{"assessmentRunArns":{"shape":"Sy"}}},"output":{"type":"structure","required":["assessmentRuns","failedItems"],"members":{"assessmentRuns":{"type":"list","member":{"type":"structure","required":["arn","name","assessmentTemplateArn","state","durationInSeconds","rulesPackageArns","userAttributesForFindings","createdAt","stateChangedAt","dataCollected","stateChanges","notifications","findingCounts"],"members":{"arn":{},"name":{},"assessmentTemplateArn":{},"state":{},"durationInSeconds":{"type":"integer"},"rulesPackageArns":{"type":"list","member":{}},"userAttributesForFindings":{"shape":"S4"},"createdAt":{"type":"timestamp"},"startedAt":{"type":"timestamp"},"completedAt":{"type":"timestamp"},"stateChangedAt":{"type":"timestamp"},"dataCollected":{"type":"boolean"},"stateChanges":{"type":"list","member":{"type":"structure","required":["stateChangedAt","state"],"members":{"stateChangedAt":{"type":"timestamp"},"state":{}}}},"notifications":{"type":"list","member":{"type":"structure","required":["date","event","error"],"members":{"date":{"type":"timestamp"},"event":{},"message":{},"error":{"type":"boolean"},"snsTopicArn":{},"snsPublishStatusCode":{}}}},"findingCounts":{"type":"map","key":{},"value":{"type":"integer"}}}}},"failedItems":{"shape":"S9"}}}},"DescribeAssessmentTargets":{"input":{"type":"structure","required":["assessmentTargetArns"],"members":{"assessmentTargetArns":{"shape":"Sy"}}},"output":{"type":"structure","required":["assessmentTargets","failedItems"],"members":{"assessmentTargets":{"type":"list","member":{"type":"structure","required":["arn","name","createdAt","updatedAt"],"members":{"arn":{},"name":{},"resourceGroupArn":{},"createdAt":{"type":"timestamp"},"updatedAt":{"type":"timestamp"}}}},"failedItems":{"shape":"S9"}}}},"DescribeAssessmentTemplates":{"input":{"type":"structure","required":["assessmentTemplateArns"],"members":{"assessmentTemplateArns":{"shape":"Sy"}}},"output":{"type":"structure","required":["assessmentTemplates","failedItems"],"members":{"assessmentTemplates":{"type":"list","member":{"type":"structure","required":["arn","name","assessmentTargetArn","durationInSeconds","rulesPackageArns","userAttributesForFindings","assessmentRunCount","createdAt"],"members":{"arn":{},"name":{},"assessmentTargetArn":{},"durationInSeconds":{"type":"integer"},"rulesPackageArns":{"shape":"Sj"},"userAttributesForFindings":{"shape":"S4"},"lastAssessmentRunArn":{},"assessmentRunCount":{"type":"integer"},"createdAt":{"type":"timestamp"}}}},"failedItems":{"shape":"S9"}}}},"DescribeCrossAccountAccessRole":{"output":{"type":"structure","required":["roleArn","valid","registeredAt"],"members":{"roleArn":{},"valid":{"type":"boolean"},"registeredAt":{"type":"timestamp"}}}},"DescribeExclusions":{"input":{"type":"structure","required":["exclusionArns"],"members":{"exclusionArns":{"type":"list","member":{}},"locale":{}}},"output":{"type":"structure","required":["exclusions","failedItems"],"members":{"exclusions":{"type":"map","key":{},"value":{"type":"structure","required":["arn","title","description","recommendation","scopes"],"members":{"arn":{},"title":{},"description":{},"recommendation":{},"scopes":{"shape":"S1x"},"attributes":{"shape":"S21"}}}},"failedItems":{"shape":"S9"}}}},"DescribeFindings":{"input":{"type":"structure","required":["findingArns"],"members":{"findingArns":{"shape":"Sy"},"locale":{}}},"output":{"type":"structure","required":["findings","failedItems"],"members":{"findings":{"type":"list","member":{"type":"structure","required":["arn","attributes","userAttributes","createdAt","updatedAt"],"members":{"arn":{},"schemaVersion":{"type":"integer"},"service":{},"serviceAttributes":{"type":"structure","required":["schemaVersion"],"members":{"schemaVersion":{"type":"integer"},"assessmentRunArn":{},"rulesPackageArn":{}}},"assetType":{},"assetAttributes":{"type":"structure","required":["schemaVersion"],"members":{"schemaVersion":{"type":"integer"},"agentId":{},"autoScalingGroup":{},"amiId":{},"hostname":{},"ipv4Addresses":{"type":"list","member":{}},"tags":{"type":"list","member":{"shape":"S2i"}},"networkInterfaces":{"type":"list","member":{"type":"structure","members":{"networkInterfaceId":{},"subnetId":{},"vpcId":{},"privateDnsName":{},"privateIpAddress":{},"privateIpAddresses":{"type":"list","member":{"type":"structure","members":{"privateDnsName":{},"privateIpAddress":{}}}},"publicDnsName":{},"publicIp":{},"ipv6Addresses":{"type":"list","member":{}},"securityGroups":{"type":"list","member":{"type":"structure","members":{"groupName":{},"groupId":{}}}}}}}}},"id":{},"title":{},"description":{},"recommendation":{},"severity":{},"numericSeverity":{"type":"double"},"confidence":{"type":"integer"},"indicatorOfCompromise":{"type":"boolean"},"attributes":{"shape":"S21"},"userAttributes":{"shape":"S4"},"createdAt":{"type":"timestamp"},"updatedAt":{"type":"timestamp"}}}},"failedItems":{"shape":"S9"}}}},"DescribeResourceGroups":{"input":{"type":"structure","required":["resourceGroupArns"],"members":{"resourceGroupArns":{"shape":"Sy"}}},"output":{"type":"structure","required":["resourceGroups","failedItems"],"members":{"resourceGroups":{"type":"list","member":{"type":"structure","required":["arn","tags","createdAt"],"members":{"arn":{},"tags":{"shape":"Sp"},"createdAt":{"type":"timestamp"}}}},"failedItems":{"shape":"S9"}}}},"DescribeRulesPackages":{"input":{"type":"structure","required":["rulesPackageArns"],"members":{"rulesPackageArns":{"shape":"Sy"},"locale":{}}},"output":{"type":"structure","required":["rulesPackages","failedItems"],"members":{"rulesPackages":{"type":"list","member":{"type":"structure","required":["arn","name","version","provider"],"members":{"arn":{},"name":{},"version":{},"provider":{},"description":{}}}},"failedItems":{"shape":"S9"}}}},"GetAssessmentReport":{"input":{"type":"structure","required":["assessmentRunArn","reportFileFormat","reportType"],"members":{"assessmentRunArn":{},"reportFileFormat":{},"reportType":{}}},"output":{"type":"structure","required":["status"],"members":{"status":{},"url":{}}}},"GetExclusionsPreview":{"input":{"type":"structure","required":["assessmentTemplateArn","previewToken"],"members":{"assessmentTemplateArn":{},"previewToken":{},"nextToken":{},"maxResults":{"type":"integer"},"locale":{}}},"output":{"type":"structure","required":["previewStatus"],"members":{"previewStatus":{},"exclusionPreviews":{"type":"list","member":{"type":"structure","required":["title","description","recommendation","scopes"],"members":{"title":{},"description":{},"recommendation":{},"scopes":{"shape":"S1x"},"attributes":{"shape":"S21"}}}},"nextToken":{}}}},"GetTelemetryMetadata":{"input":{"type":"structure","required":["assessmentRunArn"],"members":{"assessmentRunArn":{}}},"output":{"type":"structure","required":["telemetryMetadata"],"members":{"telemetryMetadata":{"shape":"S3j"}}}},"ListAssessmentRunAgents":{"input":{"type":"structure","required":["assessmentRunArn"],"members":{"assessmentRunArn":{},"filter":{"type":"structure","required":["agentHealths","agentHealthCodes"],"members":{"agentHealths":{"type":"list","member":{}},"agentHealthCodes":{"type":"list","member":{}}}},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","required":["assessmentRunAgents"],"members":{"assessmentRunAgents":{"type":"list","member":{"type":"structure","required":["agentId","assessmentRunArn","agentHealth","agentHealthCode","telemetryMetadata"],"members":{"agentId":{},"assessmentRunArn":{},"agentHealth":{},"agentHealthCode":{},"agentHealthDetails":{},"autoScalingGroup":{},"telemetryMetadata":{"shape":"S3j"}}}},"nextToken":{}}}},"ListAssessmentRuns":{"input":{"type":"structure","members":{"assessmentTemplateArns":{"shape":"S3x"},"filter":{"type":"structure","members":{"namePattern":{},"states":{"type":"list","member":{}},"durationRange":{"shape":"S41"},"rulesPackageArns":{"shape":"S42"},"startTimeRange":{"shape":"S43"},"completionTimeRange":{"shape":"S43"},"stateChangeTimeRange":{"shape":"S43"}}},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","required":["assessmentRunArns"],"members":{"assessmentRunArns":{"shape":"S45"},"nextToken":{}}}},"ListAssessmentTargets":{"input":{"type":"structure","members":{"filter":{"type":"structure","members":{"assessmentTargetNamePattern":{}}},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","required":["assessmentTargetArns"],"members":{"assessmentTargetArns":{"shape":"S45"},"nextToken":{}}}},"ListAssessmentTemplates":{"input":{"type":"structure","members":{"assessmentTargetArns":{"shape":"S3x"},"filter":{"type":"structure","members":{"namePattern":{},"durationRange":{"shape":"S41"},"rulesPackageArns":{"shape":"S42"}}},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","required":["assessmentTemplateArns"],"members":{"assessmentTemplateArns":{"shape":"S45"},"nextToken":{}}}},"ListEventSubscriptions":{"input":{"type":"structure","members":{"resourceArn":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","required":["subscriptions"],"members":{"subscriptions":{"type":"list","member":{"type":"structure","required":["resourceArn","topicArn","eventSubscriptions"],"members":{"resourceArn":{},"topicArn":{},"eventSubscriptions":{"type":"list","member":{"type":"structure","required":["event","subscribedAt"],"members":{"event":{},"subscribedAt":{"type":"timestamp"}}}}}}},"nextToken":{}}}},"ListExclusions":{"input":{"type":"structure","required":["assessmentRunArn"],"members":{"assessmentRunArn":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","required":["exclusionArns"],"members":{"exclusionArns":{"shape":"S45"},"nextToken":{}}}},"ListFindings":{"input":{"type":"structure","members":{"assessmentRunArns":{"shape":"S3x"},"filter":{"type":"structure","members":{"agentIds":{"type":"list","member":{}},"autoScalingGroups":{"type":"list","member":{}},"ruleNames":{"type":"list","member":{}},"severities":{"type":"list","member":{}},"rulesPackageArns":{"shape":"S42"},"attributes":{"shape":"S21"},"userAttributes":{"shape":"S21"},"creationTimeRange":{"shape":"S43"}}},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","required":["findingArns"],"members":{"findingArns":{"shape":"S45"},"nextToken":{}}}},"ListRulesPackages":{"input":{"type":"structure","members":{"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","required":["rulesPackageArns"],"members":{"rulesPackageArns":{"shape":"S45"},"nextToken":{}}}},"ListTagsForResource":{"input":{"type":"structure","required":["resourceArn"],"members":{"resourceArn":{}}},"output":{"type":"structure","required":["tags"],"members":{"tags":{"shape":"S4x"}}}},"PreviewAgents":{"input":{"type":"structure","required":["previewAgentsArn"],"members":{"previewAgentsArn":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","required":["agentPreviews"],"members":{"agentPreviews":{"type":"list","member":{"type":"structure","required":["agentId"],"members":{"hostname":{},"agentId":{},"autoScalingGroup":{},"agentHealth":{},"agentVersion":{},"operatingSystem":{},"kernelVersion":{},"ipv4Address":{}}}},"nextToken":{}}}},"RegisterCrossAccountAccessRole":{"input":{"type":"structure","required":["roleArn"],"members":{"roleArn":{}}}},"RemoveAttributesFromFindings":{"input":{"type":"structure","required":["findingArns","attributeKeys"],"members":{"findingArns":{"shape":"S2"},"attributeKeys":{"type":"list","member":{}}}},"output":{"type":"structure","required":["failedItems"],"members":{"failedItems":{"shape":"S9"}}}},"SetTagsForResource":{"input":{"type":"structure","required":["resourceArn"],"members":{"resourceArn":{},"tags":{"shape":"S4x"}}}},"StartAssessmentRun":{"input":{"type":"structure","required":["assessmentTemplateArn"],"members":{"assessmentTemplateArn":{},"assessmentRunName":{}}},"output":{"type":"structure","required":["assessmentRunArn"],"members":{"assessmentRunArn":{}}}},"StopAssessmentRun":{"input":{"type":"structure","required":["assessmentRunArn"],"members":{"assessmentRunArn":{},"stopAction":{}}}},"SubscribeToEvent":{"input":{"type":"structure","required":["resourceArn","event","topicArn"],"members":{"resourceArn":{},"event":{},"topicArn":{}}}},"UnsubscribeFromEvent":{"input":{"type":"structure","required":["resourceArn","event","topicArn"],"members":{"resourceArn":{},"event":{},"topicArn":{}}}},"UpdateAssessmentTarget":{"input":{"type":"structure","required":["assessmentTargetArn","assessmentTargetName"],"members":{"assessmentTargetArn":{},"assessmentTargetName":{},"resourceGroupArn":{}}}}},"shapes":{"S2":{"type":"list","member":{}},"S4":{"type":"list","member":{"shape":"S5"}},"S5":{"type":"structure","required":["key"],"members":{"key":{},"value":{}}},"S9":{"type":"map","key":{},"value":{"type":"structure","required":["failureCode","retryable"],"members":{"failureCode":{},"retryable":{"type":"boolean"}}}},"Sj":{"type":"list","member":{}},"Sp":{"type":"list","member":{"type":"structure","required":["key"],"members":{"key":{},"value":{}}}},"Sy":{"type":"list","member":{}},"S1x":{"type":"list","member":{"type":"structure","members":{"key":{},"value":{}}}},"S21":{"type":"list","member":{"shape":"S5"}},"S2i":{"type":"structure","required":["key"],"members":{"key":{},"value":{}}},"S3j":{"type":"list","member":{"type":"structure","required":["messageType","count"],"members":{"messageType":{},"count":{"type":"long"},"dataSize":{"type":"long"}}}},"S3x":{"type":"list","member":{}},"S41":{"type":"structure","members":{"minSeconds":{"type":"integer"},"maxSeconds":{"type":"integer"}}},"S42":{"type":"list","member":{}},"S43":{"type":"structure","members":{"beginDate":{"type":"timestamp"},"endDate":{"type":"timestamp"}}},"S45":{"type":"list","member":{}},"S4x":{"type":"list","member":{"shape":"S2i"}}}}

/***/ }),
/* 258 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"GetExclusionsPreview":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults"},"ListAssessmentRunAgents":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults"},"ListAssessmentRuns":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults"},"ListAssessmentTargets":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults"},"ListAssessmentTemplates":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults"},"ListEventSubscriptions":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults"},"ListExclusions":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults"},"ListFindings":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults"},"ListRulesPackages":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults"},"PreviewAgents":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults"}}}

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['iot'] = {};
	AWS.Iot = Service.defineService('iot', ['2015-05-28']);
	Object.defineProperty(apiLoader.services['iot'], '2015-05-28', {
	  get: function get() {
	    var model = __webpack_require__(260);
	    model.paginators = __webpack_require__(261).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.Iot;


/***/ }),
/* 260 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-05-28","endpointPrefix":"iot","protocol":"rest-json","serviceFullName":"AWS IoT","serviceId":"IoT","signatureVersion":"v4","signingName":"execute-api","uid":"iot-2015-05-28"},"operations":{"AcceptCertificateTransfer":{"http":{"method":"PATCH","requestUri":"/accept-certificate-transfer/{certificateId}"},"input":{"type":"structure","required":["certificateId"],"members":{"certificateId":{"location":"uri","locationName":"certificateId"},"setAsActive":{"location":"querystring","locationName":"setAsActive","type":"boolean"}}}},"AddThingToBillingGroup":{"http":{"method":"PUT","requestUri":"/billing-groups/addThingToBillingGroup"},"input":{"type":"structure","members":{"billingGroupName":{},"billingGroupArn":{},"thingName":{},"thingArn":{}}},"output":{"type":"structure","members":{}}},"AddThingToThingGroup":{"http":{"method":"PUT","requestUri":"/thing-groups/addThingToThingGroup"},"input":{"type":"structure","members":{"thingGroupName":{},"thingGroupArn":{},"thingName":{},"thingArn":{},"overrideDynamicGroups":{"type":"boolean"}}},"output":{"type":"structure","members":{}}},"AssociateTargetsWithJob":{"http":{"requestUri":"/jobs/{jobId}/targets"},"input":{"type":"structure","required":["targets","jobId"],"members":{"targets":{"shape":"Sg"},"jobId":{"location":"uri","locationName":"jobId"},"comment":{},"namespaceId":{"location":"querystring","locationName":"namespaceId"}}},"output":{"type":"structure","members":{"jobArn":{},"jobId":{},"description":{}}}},"AttachPolicy":{"http":{"method":"PUT","requestUri":"/target-policies/{policyName}"},"input":{"type":"structure","required":["policyName","target"],"members":{"policyName":{"location":"uri","locationName":"policyName"},"target":{}}}},"AttachPrincipalPolicy":{"http":{"method":"PUT","requestUri":"/principal-policies/{policyName}"},"input":{"type":"structure","required":["policyName","principal"],"members":{"policyName":{"location":"uri","locationName":"policyName"},"principal":{"location":"header","locationName":"x-amzn-iot-principal"}}},"deprecated":true},"AttachSecurityProfile":{"http":{"method":"PUT","requestUri":"/security-profiles/{securityProfileName}/targets"},"input":{"type":"structure","required":["securityProfileName","securityProfileTargetArn"],"members":{"securityProfileName":{"location":"uri","locationName":"securityProfileName"},"securityProfileTargetArn":{"location":"querystring","locationName":"securityProfileTargetArn"}}},"output":{"type":"structure","members":{}}},"AttachThingPrincipal":{"http":{"method":"PUT","requestUri":"/things/{thingName}/principals"},"input":{"type":"structure","required":["thingName","principal"],"members":{"thingName":{"location":"uri","locationName":"thingName"},"principal":{"location":"header","locationName":"x-amzn-principal"}}},"output":{"type":"structure","members":{}}},"CancelAuditMitigationActionsTask":{"http":{"method":"PUT","requestUri":"/audit/mitigationactions/tasks/{taskId}/cancel"},"input":{"type":"structure","required":["taskId"],"members":{"taskId":{"location":"uri","locationName":"taskId"}}},"output":{"type":"structure","members":{}}},"CancelAuditTask":{"http":{"method":"PUT","requestUri":"/audit/tasks/{taskId}/cancel"},"input":{"type":"structure","required":["taskId"],"members":{"taskId":{"location":"uri","locationName":"taskId"}}},"output":{"type":"structure","members":{}}},"CancelCertificateTransfer":{"http":{"method":"PATCH","requestUri":"/cancel-certificate-transfer/{certificateId}"},"input":{"type":"structure","required":["certificateId"],"members":{"certificateId":{"location":"uri","locationName":"certificateId"}}}},"CancelDetectMitigationActionsTask":{"http":{"method":"PUT","requestUri":"/detect/mitigationactions/tasks/{taskId}/cancel"},"input":{"type":"structure","required":["taskId"],"members":{"taskId":{"location":"uri","locationName":"taskId"}}},"output":{"type":"structure","members":{}}},"CancelJob":{"http":{"method":"PUT","requestUri":"/jobs/{jobId}/cancel"},"input":{"type":"structure","required":["jobId"],"members":{"jobId":{"location":"uri","locationName":"jobId"},"reasonCode":{},"comment":{},"force":{"location":"querystring","locationName":"force","type":"boolean"}}},"output":{"type":"structure","members":{"jobArn":{},"jobId":{},"description":{}}}},"CancelJobExecution":{"http":{"method":"PUT","requestUri":"/things/{thingName}/jobs/{jobId}/cancel"},"input":{"type":"structure","required":["jobId","thingName"],"members":{"jobId":{"location":"uri","locationName":"jobId"},"thingName":{"location":"uri","locationName":"thingName"},"force":{"location":"querystring","locationName":"force","type":"boolean"},"expectedVersion":{"type":"long"},"statusDetails":{"shape":"S1e"}}}},"ClearDefaultAuthorizer":{"http":{"method":"DELETE","requestUri":"/default-authorizer"},"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{}}},"ConfirmTopicRuleDestination":{"http":{"method":"GET","requestUri":"/confirmdestination/{confirmationToken+}"},"input":{"type":"structure","required":["confirmationToken"],"members":{"confirmationToken":{"location":"uri","locationName":"confirmationToken"}}},"output":{"type":"structure","members":{}}},"CreateAuditSuppression":{"http":{"requestUri":"/audit/suppressions/create"},"input":{"type":"structure","required":["checkName","resourceIdentifier","clientRequestToken"],"members":{"checkName":{},"resourceIdentifier":{"shape":"S1o"},"expirationDate":{"type":"timestamp"},"suppressIndefinitely":{"type":"boolean"},"description":{},"clientRequestToken":{"idempotencyToken":true}}},"output":{"type":"structure","members":{}}},"CreateAuthorizer":{"http":{"requestUri":"/authorizer/{authorizerName}"},"input":{"type":"structure","required":["authorizerName","authorizerFunctionArn"],"members":{"authorizerName":{"location":"uri","locationName":"authorizerName"},"authorizerFunctionArn":{},"tokenKeyName":{},"tokenSigningPublicKeys":{"shape":"S25"},"status":{},"tags":{"shape":"S29"},"signingDisabled":{"type":"boolean"}}},"output":{"type":"structure","members":{"authorizerName":{},"authorizerArn":{}}}},"CreateBillingGroup":{"http":{"requestUri":"/billing-groups/{billingGroupName}"},"input":{"type":"structure","required":["billingGroupName"],"members":{"billingGroupName":{"location":"uri","locationName":"billingGroupName"},"billingGroupProperties":{"shape":"S2h"},"tags":{"shape":"S29"}}},"output":{"type":"structure","members":{"billingGroupName":{},"billingGroupArn":{},"billingGroupId":{}}}},"CreateCertificateFromCsr":{"http":{"requestUri":"/certificates"},"input":{"type":"structure","required":["certificateSigningRequest"],"members":{"certificateSigningRequest":{},"setAsActive":{"location":"querystring","locationName":"setAsActive","type":"boolean"}}},"output":{"type":"structure","members":{"certificateArn":{},"certificateId":{},"certificatePem":{}}}},"CreateCustomMetric":{"http":{"requestUri":"/custom-metric/{metricName}"},"input":{"type":"structure","required":["metricName","metricType","clientRequestToken"],"members":{"metricName":{"location":"uri","locationName":"metricName"},"displayName":{},"metricType":{},"tags":{"shape":"S29"},"clientRequestToken":{"idempotencyToken":true}}},"output":{"type":"structure","members":{"metricName":{},"metricArn":{}}}},"CreateDimension":{"http":{"requestUri":"/dimensions/{name}"},"input":{"type":"structure","required":["name","type","stringValues","clientRequestToken"],"members":{"name":{"location":"uri","locationName":"name"},"type":{},"stringValues":{"shape":"S2z"},"tags":{"shape":"S29"},"clientRequestToken":{"idempotencyToken":true}}},"output":{"type":"structure","members":{"name":{},"arn":{}}}},"CreateDomainConfiguration":{"http":{"requestUri":"/domainConfigurations/{domainConfigurationName}"},"input":{"type":"structure","required":["domainConfigurationName"],"members":{"domainConfigurationName":{"location":"uri","locationName":"domainConfigurationName"},"domainName":{},"serverCertificateArns":{"type":"list","member":{}},"validationCertificateArn":{},"authorizerConfig":{"shape":"S38"},"serviceType":{},"tags":{"shape":"S29"}}},"output":{"type":"structure","members":{"domainConfigurationName":{},"domainConfigurationArn":{}}}},"CreateDynamicThingGroup":{"http":{"requestUri":"/dynamic-thing-groups/{thingGroupName}"},"input":{"type":"structure","required":["thingGroupName","queryString"],"members":{"thingGroupName":{"location":"uri","locationName":"thingGroupName"},"thingGroupProperties":{"shape":"S3e"},"indexName":{},"queryString":{},"queryVersion":{},"tags":{"shape":"S29"}}},"output":{"type":"structure","members":{"thingGroupName":{},"thingGroupArn":{},"thingGroupId":{},"indexName":{},"queryString":{},"queryVersion":{}}}},"CreateJob":{"http":{"method":"PUT","requestUri":"/jobs/{jobId}"},"input":{"type":"structure","required":["jobId","targets"],"members":{"jobId":{"location":"uri","locationName":"jobId"},"targets":{"shape":"Sg"},"documentSource":{},"document":{},"description":{},"presignedUrlConfig":{"shape":"S3t"},"targetSelection":{},"jobExecutionsRolloutConfig":{"shape":"S3w"},"abortConfig":{"shape":"S43"},"timeoutConfig":{"shape":"S4a"},"tags":{"shape":"S29"},"namespaceId":{},"jobTemplateArn":{}}},"output":{"type":"structure","members":{"jobArn":{},"jobId":{},"description":{}}}},"CreateJobTemplate":{"http":{"method":"PUT","requestUri":"/job-templates/{jobTemplateId}"},"input":{"type":"structure","required":["jobTemplateId","description"],"members":{"jobTemplateId":{"location":"uri","locationName":"jobTemplateId"},"jobArn":{},"documentSource":{},"document":{},"description":{},"presignedUrlConfig":{"shape":"S3t"},"jobExecutionsRolloutConfig":{"shape":"S3w"},"abortConfig":{"shape":"S43"},"timeoutConfig":{"shape":"S4a"},"tags":{"shape":"S29"}}},"output":{"type":"structure","members":{"jobTemplateArn":{},"jobTemplateId":{}}}},"CreateKeysAndCertificate":{"http":{"requestUri":"/keys-and-certificate"},"input":{"type":"structure","members":{"setAsActive":{"location":"querystring","locationName":"setAsActive","type":"boolean"}}},"output":{"type":"structure","members":{"certificateArn":{},"certificateId":{},"certificatePem":{},"keyPair":{"shape":"S4j"}}}},"CreateMitigationAction":{"http":{"requestUri":"/mitigationactions/actions/{actionName}"},"input":{"type":"structure","required":["actionName","roleArn","actionParams"],"members":{"actionName":{"location":"uri","locationName":"actionName"},"roleArn":{},"actionParams":{"shape":"S4o"},"tags":{"shape":"S29"}}},"output":{"type":"structure","members":{"actionArn":{},"actionId":{}}}},"CreateOTAUpdate":{"http":{"requestUri":"/otaUpdates/{otaUpdateId}"},"input":{"type":"structure","required":["otaUpdateId","targets","files","roleArn"],"members":{"otaUpdateId":{"location":"uri","locationName":"otaUpdateId"},"description":{},"targets":{"shape":"S57"},"protocols":{"shape":"S59"},"targetSelection":{},"awsJobExecutionsRolloutConfig":{"shape":"S5b"},"awsJobPresignedUrlConfig":{"shape":"S5i"},"awsJobAbortConfig":{"type":"structure","required":["abortCriteriaList"],"members":{"abortCriteriaList":{"type":"list","member":{"type":"structure","required":["failureType","action","thresholdPercentage","minNumberOfExecutedThings"],"members":{"failureType":{},"action":{},"thresholdPercentage":{"type":"double"},"minNumberOfExecutedThings":{"type":"integer"}}}}}},"awsJobTimeoutConfig":{"type":"structure","members":{"inProgressTimeoutInMinutes":{"type":"long"}}},"files":{"shape":"S5t"},"roleArn":{},"additionalParameters":{"shape":"S6r"},"tags":{"shape":"S29"}}},"output":{"type":"structure","members":{"otaUpdateId":{},"awsIotJobId":{},"otaUpdateArn":{},"awsIotJobArn":{},"otaUpdateStatus":{}}}},"CreatePolicy":{"http":{"requestUri":"/policies/{policyName}"},"input":{"type":"structure","required":["policyName","policyDocument"],"members":{"policyName":{"location":"uri","locationName":"policyName"},"policyDocument":{},"tags":{"shape":"S29"}}},"output":{"type":"structure","members":{"policyName":{},"policyArn":{},"policyDocument":{},"policyVersionId":{}}}},"CreatePolicyVersion":{"http":{"requestUri":"/policies/{policyName}/version"},"input":{"type":"structure","required":["policyName","policyDocument"],"members":{"policyName":{"location":"uri","locationName":"policyName"},"policyDocument":{},"setAsDefault":{"location":"querystring","locationName":"setAsDefault","type":"boolean"}}},"output":{"type":"structure","members":{"policyArn":{},"policyDocument":{},"policyVersionId":{},"isDefaultVersion":{"type":"boolean"}}}},"CreateProvisioningClaim":{"http":{"requestUri":"/provisioning-templates/{templateName}/provisioning-claim"},"input":{"type":"structure","required":["templateName"],"members":{"templateName":{"location":"uri","locationName":"templateName"}}},"output":{"type":"structure","members":{"certificateId":{},"certificatePem":{},"keyPair":{"shape":"S4j"},"expiration":{"type":"timestamp"}}}},"CreateProvisioningTemplate":{"http":{"requestUri":"/provisioning-templates"},"input":{"type":"structure","required":["templateName","templateBody","provisioningRoleArn"],"members":{"templateName":{},"description":{},"templateBody":{},"enabled":{"type":"boolean"},"provisioningRoleArn":{},"preProvisioningHook":{"shape":"S7d"},"tags":{"shape":"S29"}}},"output":{"type":"structure","members":{"templateArn":{},"templateName":{},"defaultVersionId":{"type":"integer"}}}},"CreateProvisioningTemplateVersion":{"http":{"requestUri":"/provisioning-templates/{templateName}/versions"},"input":{"type":"structure","required":["templateName","templateBody"],"members":{"templateName":{"location":"uri","locationName":"templateName"},"templateBody":{},"setAsDefault":{"location":"querystring","locationName":"setAsDefault","type":"boolean"}}},"output":{"type":"structure","members":{"templateArn":{},"templateName":{},"versionId":{"type":"integer"},"isDefaultVersion":{"type":"boolean"}}}},"CreateRoleAlias":{"http":{"requestUri":"/role-aliases/{roleAlias}"},"input":{"type":"structure","required":["roleAlias","roleArn"],"members":{"roleAlias":{"location":"uri","locationName":"roleAlias"},"roleArn":{},"credentialDurationSeconds":{"type":"integer"},"tags":{"shape":"S29"}}},"output":{"type":"structure","members":{"roleAlias":{},"roleAliasArn":{}}}},"CreateScheduledAudit":{"http":{"requestUri":"/audit/scheduledaudits/{scheduledAuditName}"},"input":{"type":"structure","required":["frequency","targetCheckNames","scheduledAuditName"],"members":{"frequency":{},"dayOfMonth":{},"dayOfWeek":{},"targetCheckNames":{"shape":"S7s"},"scheduledAuditName":{"location":"uri","locationName":"scheduledAuditName"},"tags":{"shape":"S29"}}},"output":{"type":"structure","members":{"scheduledAuditArn":{}}}},"CreateSecurityProfile":{"http":{"requestUri":"/security-profiles/{securityProfileName}"},"input":{"type":"structure","required":["securityProfileName"],"members":{"securityProfileName":{"location":"uri","locationName":"securityProfileName"},"securityProfileDescription":{},"behaviors":{"shape":"S7y"},"alertTargets":{"shape":"S8o"},"additionalMetricsToRetain":{"shape":"S8s","deprecated":true,"deprecatedMessage":"Use additionalMetricsToRetainV2."},"additionalMetricsToRetainV2":{"shape":"S8t"},"tags":{"shape":"S29"}}},"output":{"type":"structure","members":{"securityProfileName":{},"securityProfileArn":{}}}},"CreateStream":{"http":{"requestUri":"/streams/{streamId}"},"input":{"type":"structure","required":["streamId","files","roleArn"],"members":{"streamId":{"location":"uri","locationName":"streamId"},"description":{},"files":{"shape":"S8z"},"roleArn":{},"tags":{"shape":"S29"}}},"output":{"type":"structure","members":{"streamId":{},"streamArn":{},"description":{},"streamVersion":{"type":"integer"}}}},"CreateThing":{"http":{"requestUri":"/things/{thingName}"},"input":{"type":"structure","required":["thingName"],"members":{"thingName":{"location":"uri","locationName":"thingName"},"thingTypeName":{},"attributePayload":{"shape":"S3g"},"billingGroupName":{}}},"output":{"type":"structure","members":{"thingName":{},"thingArn":{},"thingId":{}}}},"CreateThingGroup":{"http":{"requestUri":"/thing-groups/{thingGroupName}"},"input":{"type":"structure","required":["thingGroupName"],"members":{"thingGroupName":{"location":"uri","locationName":"thingGroupName"},"parentGroupName":{},"thingGroupProperties":{"shape":"S3e"},"tags":{"shape":"S29"}}},"output":{"type":"structure","members":{"thingGroupName":{},"thingGroupArn":{},"thingGroupId":{}}}},"CreateThingType":{"http":{"requestUri":"/thing-types/{thingTypeName}"},"input":{"type":"structure","required":["thingTypeName"],"members":{"thingTypeName":{"location":"uri","locationName":"thingTypeName"},"thingTypeProperties":{"shape":"S9b"},"tags":{"shape":"S29"}}},"output":{"type":"structure","members":{"thingTypeName":{},"thingTypeArn":{},"thingTypeId":{}}}},"CreateTopicRule":{"http":{"requestUri":"/rules/{ruleName}"},"input":{"type":"structure","required":["ruleName","topicRulePayload"],"members":{"ruleName":{"location":"uri","locationName":"ruleName"},"topicRulePayload":{"shape":"S9j"},"tags":{"location":"header","locationName":"x-amz-tagging"}},"payload":"topicRulePayload"}},"CreateTopicRuleDestination":{"http":{"requestUri":"/destinations"},"input":{"type":"structure","required":["destinationConfiguration"],"members":{"destinationConfiguration":{"type":"structure","members":{"httpUrlConfiguration":{"type":"structure","required":["confirmationUrl"],"members":{"confirmationUrl":{}}},"vpcConfiguration":{"type":"structure","required":["subnetIds","vpcId","roleArn"],"members":{"subnetIds":{"shape":"Scj"},"securityGroups":{"shape":"Scl"},"vpcId":{},"roleArn":{}}}}}}},"output":{"type":"structure","members":{"topicRuleDestination":{"shape":"Scp"}}}},"DeleteAccountAuditConfiguration":{"http":{"method":"DELETE","requestUri":"/audit/configuration"},"input":{"type":"structure","members":{"deleteScheduledAudits":{"location":"querystring","locationName":"deleteScheduledAudits","type":"boolean"}}},"output":{"type":"structure","members":{}}},"DeleteAuditSuppression":{"http":{"requestUri":"/audit/suppressions/delete"},"input":{"type":"structure","required":["checkName","resourceIdentifier"],"members":{"checkName":{},"resourceIdentifier":{"shape":"S1o"}}},"output":{"type":"structure","members":{}}},"DeleteAuthorizer":{"http":{"method":"DELETE","requestUri":"/authorizer/{authorizerName}"},"input":{"type":"structure","required":["authorizerName"],"members":{"authorizerName":{"location":"uri","locationName":"authorizerName"}}},"output":{"type":"structure","members":{}}},"DeleteBillingGroup":{"http":{"method":"DELETE","requestUri":"/billing-groups/{billingGroupName}"},"input":{"type":"structure","required":["billingGroupName"],"members":{"billingGroupName":{"location":"uri","locationName":"billingGroupName"},"expectedVersion":{"location":"querystring","locationName":"expectedVersion","type":"long"}}},"output":{"type":"structure","members":{}}},"DeleteCACertificate":{"http":{"method":"DELETE","requestUri":"/cacertificate/{caCertificateId}"},"input":{"type":"structure","required":["certificateId"],"members":{"certificateId":{"location":"uri","locationName":"caCertificateId"}}},"output":{"type":"structure","members":{}}},"DeleteCertificate":{"http":{"method":"DELETE","requestUri":"/certificates/{certificateId}"},"input":{"type":"structure","required":["certificateId"],"members":{"certificateId":{"location":"uri","locationName":"certificateId"},"forceDelete":{"location":"querystring","locationName":"forceDelete","type":"boolean"}}}},"DeleteCustomMetric":{"http":{"method":"DELETE","requestUri":"/custom-metric/{metricName}"},"input":{"type":"structure","required":["metricName"],"members":{"metricName":{"location":"uri","locationName":"metricName"}}},"output":{"type":"structure","members":{}}},"DeleteDimension":{"http":{"method":"DELETE","requestUri":"/dimensions/{name}"},"input":{"type":"structure","required":["name"],"members":{"name":{"location":"uri","locationName":"name"}}},"output":{"type":"structure","members":{}}},"DeleteDomainConfiguration":{"http":{"method":"DELETE","requestUri":"/domainConfigurations/{domainConfigurationName}"},"input":{"type":"structure","required":["domainConfigurationName"],"members":{"domainConfigurationName":{"location":"uri","locationName":"domainConfigurationName"}}},"output":{"type":"structure","members":{}}},"DeleteDynamicThingGroup":{"http":{"method":"DELETE","requestUri":"/dynamic-thing-groups/{thingGroupName}"},"input":{"type":"structure","required":["thingGroupName"],"members":{"thingGroupName":{"location":"uri","locationName":"thingGroupName"},"expectedVersion":{"location":"querystring","locationName":"expectedVersion","type":"long"}}},"output":{"type":"structure","members":{}}},"DeleteJob":{"http":{"method":"DELETE","requestUri":"/jobs/{jobId}"},"input":{"type":"structure","required":["jobId"],"members":{"jobId":{"location":"uri","locationName":"jobId"},"force":{"location":"querystring","locationName":"force","type":"boolean"},"namespaceId":{"location":"querystring","locationName":"namespaceId"}}}},"DeleteJobExecution":{"http":{"method":"DELETE","requestUri":"/things/{thingName}/jobs/{jobId}/executionNumber/{executionNumber}"},"input":{"type":"structure","required":["jobId","thingName","executionNumber"],"members":{"jobId":{"location":"uri","locationName":"jobId"},"thingName":{"location":"uri","locationName":"thingName"},"executionNumber":{"location":"uri","locationName":"executionNumber","type":"long"},"force":{"location":"querystring","locationName":"force","type":"boolean"},"namespaceId":{"location":"querystring","locationName":"namespaceId"}}}},"DeleteJobTemplate":{"http":{"method":"DELETE","requestUri":"/job-templates/{jobTemplateId}"},"input":{"type":"structure","required":["jobTemplateId"],"members":{"jobTemplateId":{"location":"uri","locationName":"jobTemplateId"}}}},"DeleteMitigationAction":{"http":{"method":"DELETE","requestUri":"/mitigationactions/actions/{actionName}"},"input":{"type":"structure","required":["actionName"],"members":{"actionName":{"location":"uri","locationName":"actionName"}}},"output":{"type":"structure","members":{}}},"DeleteOTAUpdate":{"http":{"method":"DELETE","requestUri":"/otaUpdates/{otaUpdateId}"},"input":{"type":"structure","required":["otaUpdateId"],"members":{"otaUpdateId":{"location":"uri","locationName":"otaUpdateId"},"deleteStream":{"location":"querystring","locationName":"deleteStream","type":"boolean"},"forceDeleteAWSJob":{"location":"querystring","locationName":"forceDeleteAWSJob","type":"boolean"}}},"output":{"type":"structure","members":{}}},"DeletePolicy":{"http":{"method":"DELETE","requestUri":"/policies/{policyName}"},"input":{"type":"structure","required":["policyName"],"members":{"policyName":{"location":"uri","locationName":"policyName"}}}},"DeletePolicyVersion":{"http":{"method":"DELETE","requestUri":"/policies/{policyName}/version/{policyVersionId}"},"input":{"type":"structure","required":["policyName","policyVersionId"],"members":{"policyName":{"location":"uri","locationName":"policyName"},"policyVersionId":{"location":"uri","locationName":"policyVersionId"}}}},"DeleteProvisioningTemplate":{"http":{"method":"DELETE","requestUri":"/provisioning-templates/{templateName}"},"input":{"type":"structure","required":["templateName"],"members":{"templateName":{"location":"uri","locationName":"templateName"}}},"output":{"type":"structure","members":{}}},"DeleteProvisioningTemplateVersion":{"http":{"method":"DELETE","requestUri":"/provisioning-templates/{templateName}/versions/{versionId}"},"input":{"type":"structure","required":["templateName","versionId"],"members":{"templateName":{"location":"uri","locationName":"templateName"},"versionId":{"location":"uri","locationName":"versionId","type":"integer"}}},"output":{"type":"structure","members":{}}},"DeleteRegistrationCode":{"http":{"method":"DELETE","requestUri":"/registrationcode"},"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{}}},"DeleteRoleAlias":{"http":{"method":"DELETE","requestUri":"/role-aliases/{roleAlias}"},"input":{"type":"structure","required":["roleAlias"],"members":{"roleAlias":{"location":"uri","locationName":"roleAlias"}}},"output":{"type":"structure","members":{}}},"DeleteScheduledAudit":{"http":{"method":"DELETE","requestUri":"/audit/scheduledaudits/{scheduledAuditName}"},"input":{"type":"structure","required":["scheduledAuditName"],"members":{"scheduledAuditName":{"location":"uri","locationName":"scheduledAuditName"}}},"output":{"type":"structure","members":{}}},"DeleteSecurityProfile":{"http":{"method":"DELETE","requestUri":"/security-profiles/{securityProfileName}"},"input":{"type":"structure","required":["securityProfileName"],"members":{"securityProfileName":{"location":"uri","locationName":"securityProfileName"},"expectedVersion":{"location":"querystring","locationName":"expectedVersion","type":"long"}}},"output":{"type":"structure","members":{}}},"DeleteStream":{"http":{"method":"DELETE","requestUri":"/streams/{streamId}"},"input":{"type":"structure","required":["streamId"],"members":{"streamId":{"location":"uri","locationName":"streamId"}}},"output":{"type":"structure","members":{}}},"DeleteThing":{"http":{"method":"DELETE","requestUri":"/things/{thingName}"},"input":{"type":"structure","required":["thingName"],"members":{"thingName":{"location":"uri","locationName":"thingName"},"expectedVersion":{"location":"querystring","locationName":"expectedVersion","type":"long"}}},"output":{"type":"structure","members":{}}},"DeleteThingGroup":{"http":{"method":"DELETE","requestUri":"/thing-groups/{thingGroupName}"},"input":{"type":"structure","required":["thingGroupName"],"members":{"thingGroupName":{"location":"uri","locationName":"thingGroupName"},"expectedVersion":{"location":"querystring","locationName":"expectedVersion","type":"long"}}},"output":{"type":"structure","members":{}}},"DeleteThingType":{"http":{"method":"DELETE","requestUri":"/thing-types/{thingTypeName}"},"input":{"type":"structure","required":["thingTypeName"],"members":{"thingTypeName":{"location":"uri","locationName":"thingTypeName"}}},"output":{"type":"structure","members":{}}},"DeleteTopicRule":{"http":{"method":"DELETE","requestUri":"/rules/{ruleName}"},"input":{"type":"structure","required":["ruleName"],"members":{"ruleName":{"location":"uri","locationName":"ruleName"}}}},"DeleteTopicRuleDestination":{"http":{"method":"DELETE","requestUri":"/destinations/{arn+}"},"input":{"type":"structure","required":["arn"],"members":{"arn":{"location":"uri","locationName":"arn"}}},"output":{"type":"structure","members":{}}},"DeleteV2LoggingLevel":{"http":{"method":"DELETE","requestUri":"/v2LoggingLevel"},"input":{"type":"structure","required":["targetType","targetName"],"members":{"targetType":{"location":"querystring","locationName":"targetType"},"targetName":{"location":"querystring","locationName":"targetName"}}}},"DeprecateThingType":{"http":{"requestUri":"/thing-types/{thingTypeName}/deprecate"},"input":{"type":"structure","required":["thingTypeName"],"members":{"thingTypeName":{"location":"uri","locationName":"thingTypeName"},"undoDeprecate":{"type":"boolean"}}},"output":{"type":"structure","members":{}}},"DescribeAccountAuditConfiguration":{"http":{"method":"GET","requestUri":"/audit/configuration"},"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"roleArn":{},"auditNotificationTargetConfigurations":{"shape":"Seo"},"auditCheckConfigurations":{"shape":"Ser"}}}},"DescribeAuditFinding":{"http":{"method":"GET","requestUri":"/audit/findings/{findingId}"},"input":{"type":"structure","required":["findingId"],"members":{"findingId":{"location":"uri","locationName":"findingId"}}},"output":{"type":"structure","members":{"finding":{"shape":"Sew"}}}},"DescribeAuditMitigationActionsTask":{"http":{"method":"GET","requestUri":"/audit/mitigationactions/tasks/{taskId}"},"input":{"type":"structure","required":["taskId"],"members":{"taskId":{"location":"uri","locationName":"taskId"}}},"output":{"type":"structure","members":{"taskStatus":{},"startTime":{"type":"timestamp"},"endTime":{"type":"timestamp"},"taskStatistics":{"type":"map","key":{},"value":{"type":"structure","members":{"totalFindingsCount":{"type":"long"},"failedFindingsCount":{"type":"long"},"succeededFindingsCount":{"type":"long"},"skippedFindingsCount":{"type":"long"},"canceledFindingsCount":{"type":"long"}}}},"target":{"shape":"Sfg"},"auditCheckToActionsMapping":{"shape":"Sfk"},"actionsDefinition":{"shape":"Sfm"}}}},"DescribeAuditSuppression":{"http":{"requestUri":"/audit/suppressions/describe"},"input":{"type":"structure","required":["checkName","resourceIdentifier"],"members":{"checkName":{},"resourceIdentifier":{"shape":"S1o"}}},"output":{"type":"structure","members":{"checkName":{},"resourceIdentifier":{"shape":"S1o"},"expirationDate":{"type":"timestamp"},"suppressIndefinitely":{"type":"boolean"},"description":{}}}},"DescribeAuditTask":{"http":{"method":"GET","requestUri":"/audit/tasks/{taskId}"},"input":{"type":"structure","required":["taskId"],"members":{"taskId":{"location":"uri","locationName":"taskId"}}},"output":{"type":"structure","members":{"taskStatus":{},"taskType":{},"taskStartTime":{"type":"timestamp"},"taskStatistics":{"type":"structure","members":{"totalChecks":{"type":"integer"},"inProgressChecks":{"type":"integer"},"waitingForDataCollectionChecks":{"type":"integer"},"compliantChecks":{"type":"integer"},"nonCompliantChecks":{"type":"integer"},"failedChecks":{"type":"integer"},"canceledChecks":{"type":"integer"}}},"scheduledAuditName":{},"auditDetails":{"type":"map","key":{},"value":{"type":"structure","members":{"checkRunStatus":{},"checkCompliant":{"type":"boolean"},"totalResourcesCount":{"type":"long"},"nonCompliantResourcesCount":{"type":"long"},"suppressedNonCompliantResourcesCount":{"type":"long"},"errorCode":{},"message":{}}}}}}},"DescribeAuthorizer":{"http":{"method":"GET","requestUri":"/authorizer/{authorizerName}"},"input":{"type":"structure","required":["authorizerName"],"members":{"authorizerName":{"location":"uri","locationName":"authorizerName"}}},"output":{"type":"structure","members":{"authorizerDescription":{"shape":"Sgd"}}}},"DescribeBillingGroup":{"http":{"method":"GET","requestUri":"/billing-groups/{billingGroupName}"},"input":{"type":"structure","required":["billingGroupName"],"members":{"billingGroupName":{"location":"uri","locationName":"billingGroupName"}}},"output":{"type":"structure","members":{"billingGroupName":{},"billingGroupId":{},"billingGroupArn":{},"version":{"type":"long"},"billingGroupProperties":{"shape":"S2h"},"billingGroupMetadata":{"type":"structure","members":{"creationDate":{"type":"timestamp"}}}}}},"DescribeCACertificate":{"http":{"method":"GET","requestUri":"/cacertificate/{caCertificateId}"},"input":{"type":"structure","required":["certificateId"],"members":{"certificateId":{"location":"uri","locationName":"caCertificateId"}}},"output":{"type":"structure","members":{"certificateDescription":{"type":"structure","members":{"certificateArn":{},"certificateId":{},"status":{},"certificatePem":{},"ownedBy":{},"creationDate":{"type":"timestamp"},"autoRegistrationStatus":{},"lastModifiedDate":{"type":"timestamp"},"customerVersion":{"type":"integer"},"generationId":{},"validity":{"shape":"Sgq"}}},"registrationConfig":{"shape":"Sgr"}}}},"DescribeCertificate":{"http":{"method":"GET","requestUri":"/certificates/{certificateId}"},"input":{"type":"structure","required":["certificateId"],"members":{"certificateId":{"location":"uri","locationName":"certificateId"}}},"output":{"type":"structure","members":{"certificateDescription":{"type":"structure","members":{"certificateArn":{},"certificateId":{},"caCertificateId":{},"status":{},"certificatePem":{},"ownedBy":{},"previousOwnedBy":{},"creationDate":{"type":"timestamp"},"lastModifiedDate":{"type":"timestamp"},"customerVersion":{"type":"integer"},"transferData":{"type":"structure","members":{"transferMessage":{},"rejectReason":{},"transferDate":{"type":"timestamp"},"acceptDate":{"type":"timestamp"},"rejectDate":{"type":"timestamp"}}},"generationId":{},"validity":{"shape":"Sgq"},"certificateMode":{}}}}}},"DescribeCustomMetric":{"http":{"method":"GET","requestUri":"/custom-metric/{metricName}"},"input":{"type":"structure","required":["metricName"],"members":{"metricName":{"location":"uri","locationName":"metricName"}}},"output":{"type":"structure","members":{"metricName":{},"metricArn":{},"metricType":{},"displayName":{},"creationDate":{"type":"timestamp"},"lastModifiedDate":{"type":"timestamp"}}}},"DescribeDefaultAuthorizer":{"http":{"method":"GET","requestUri":"/default-authorizer"},"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"authorizerDescription":{"shape":"Sgd"}}}},"DescribeDetectMitigationActionsTask":{"http":{"method":"GET","requestUri":"/detect/mitigationactions/tasks/{taskId}"},"input":{"type":"structure","required":["taskId"],"members":{"taskId":{"location":"uri","locationName":"taskId"}}},"output":{"type":"structure","members":{"taskSummary":{"shape":"Sh5"}}}},"DescribeDimension":{"http":{"method":"GET","requestUri":"/dimensions/{name}"},"input":{"type":"structure","required":["name"],"members":{"name":{"location":"uri","locationName":"name"}}},"output":{"type":"structure","members":{"name":{},"arn":{},"type":{},"stringValues":{"shape":"S2z"},"creationDate":{"type":"timestamp"},"lastModifiedDate":{"type":"timestamp"}}}},"DescribeDomainConfiguration":{"http":{"method":"GET","requestUri":"/domainConfigurations/{domainConfigurationName}"},"input":{"type":"structure","required":["domainConfigurationName"],"members":{"domainConfigurationName":{"location":"uri","locationName":"domainConfigurationName"}}},"output":{"type":"structure","members":{"domainConfigurationName":{},"domainConfigurationArn":{},"domainName":{},"serverCertificates":{"type":"list","member":{"type":"structure","members":{"serverCertificateArn":{},"serverCertificateStatus":{},"serverCertificateStatusDetail":{}}}},"authorizerConfig":{"shape":"S38"},"domainConfigurationStatus":{},"serviceType":{},"domainType":{},"lastStatusChangeDate":{"type":"timestamp"}}}},"DescribeEndpoint":{"http":{"method":"GET","requestUri":"/endpoint"},"input":{"type":"structure","members":{"endpointType":{"location":"querystring","locationName":"endpointType"}}},"output":{"type":"structure","members":{"endpointAddress":{}}}},"DescribeEventConfigurations":{"http":{"method":"GET","requestUri":"/event-configurations"},"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"eventConfigurations":{"shape":"Shv"},"creationDate":{"type":"timestamp"},"lastModifiedDate":{"type":"timestamp"}}}},"DescribeIndex":{"http":{"method":"GET","requestUri":"/indices/{indexName}"},"input":{"type":"structure","required":["indexName"],"members":{"indexName":{"location":"uri","locationName":"indexName"}}},"output":{"type":"structure","members":{"indexName":{},"indexStatus":{},"schema":{}}}},"DescribeJob":{"http":{"method":"GET","requestUri":"/jobs/{jobId}"},"input":{"type":"structure","required":["jobId"],"members":{"jobId":{"location":"uri","locationName":"jobId"}}},"output":{"type":"structure","members":{"documentSource":{},"job":{"type":"structure","members":{"jobArn":{},"jobId":{},"targetSelection":{},"status":{},"forceCanceled":{"type":"boolean"},"reasonCode":{},"comment":{},"targets":{"shape":"Sg"},"description":{},"presignedUrlConfig":{"shape":"S3t"},"jobExecutionsRolloutConfig":{"shape":"S3w"},"abortConfig":{"shape":"S43"},"createdAt":{"type":"timestamp"},"lastUpdatedAt":{"type":"timestamp"},"completedAt":{"type":"timestamp"},"jobProcessDetails":{"type":"structure","members":{"processingTargets":{"type":"list","member":{}},"numberOfCanceledThings":{"type":"integer"},"numberOfSucceededThings":{"type":"integer"},"numberOfFailedThings":{"type":"integer"},"numberOfRejectedThings":{"type":"integer"},"numberOfQueuedThings":{"type":"integer"},"numberOfInProgressThings":{"type":"integer"},"numberOfRemovedThings":{"type":"integer"},"numberOfTimedOutThings":{"type":"integer"}}},"timeoutConfig":{"shape":"S4a"},"namespaceId":{},"jobTemplateArn":{}}}}}},"DescribeJobExecution":{"http":{"method":"GET","requestUri":"/things/{thingName}/jobs/{jobId}"},"input":{"type":"structure","required":["jobId","thingName"],"members":{"jobId":{"location":"uri","locationName":"jobId"},"thingName":{"location":"uri","locationName":"thingName"},"executionNumber":{"location":"querystring","locationName":"executionNumber","type":"long"}}},"output":{"type":"structure","members":{"execution":{"type":"structure","members":{"jobId":{},"status":{},"forceCanceled":{"type":"boolean"},"statusDetails":{"type":"structure","members":{"detailsMap":{"shape":"S1e"}}},"thingArn":{},"queuedAt":{"type":"timestamp"},"startedAt":{"type":"timestamp"},"lastUpdatedAt":{"type":"timestamp"},"executionNumber":{"type":"long"},"versionNumber":{"type":"long"},"approximateSecondsBeforeTimedOut":{"type":"long"}}}}}},"DescribeJobTemplate":{"http":{"method":"GET","requestUri":"/job-templates/{jobTemplateId}"},"input":{"type":"structure","required":["jobTemplateId"],"members":{"jobTemplateId":{"location":"uri","locationName":"jobTemplateId"}}},"output":{"type":"structure","members":{"jobTemplateArn":{},"jobTemplateId":{},"description":{},"documentSource":{},"document":{},"createdAt":{"type":"timestamp"},"presignedUrlConfig":{"shape":"S3t"},"jobExecutionsRolloutConfig":{"shape":"S3w"},"abortConfig":{"shape":"S43"},"timeoutConfig":{"shape":"S4a"}}}},"DescribeMitigationAction":{"http":{"method":"GET","requestUri":"/mitigationactions/actions/{actionName}"},"input":{"type":"structure","required":["actionName"],"members":{"actionName":{"location":"uri","locationName":"actionName"}}},"output":{"type":"structure","members":{"actionName":{},"actionType":{},"actionArn":{},"actionId":{},"roleArn":{},"actionParams":{"shape":"S4o"},"creationDate":{"type":"timestamp"},"lastModifiedDate":{"type":"timestamp"}}}},"DescribeProvisioningTemplate":{"http":{"method":"GET","requestUri":"/provisioning-templates/{templateName}"},"input":{"type":"structure","required":["templateName"],"members":{"templateName":{"location":"uri","locationName":"templateName"}}},"output":{"type":"structure","members":{"templateArn":{},"templateName":{},"description":{},"creationDate":{"type":"timestamp"},"lastModifiedDate":{"type":"timestamp"},"defaultVersionId":{"type":"integer"},"templateBody":{},"enabled":{"type":"boolean"},"provisioningRoleArn":{},"preProvisioningHook":{"shape":"S7d"}}}},"DescribeProvisioningTemplateVersion":{"http":{"method":"GET","requestUri":"/provisioning-templates/{templateName}/versions/{versionId}"},"input":{"type":"structure","required":["templateName","versionId"],"members":{"templateName":{"location":"uri","locationName":"templateName"},"versionId":{"location":"uri","locationName":"versionId","type":"integer"}}},"output":{"type":"structure","members":{"versionId":{"type":"integer"},"creationDate":{"type":"timestamp"},"templateBody":{},"isDefaultVersion":{"type":"boolean"}}}},"DescribeRoleAlias":{"http":{"method":"GET","requestUri":"/role-aliases/{roleAlias}"},"input":{"type":"structure","required":["roleAlias"],"members":{"roleAlias":{"location":"uri","locationName":"roleAlias"}}},"output":{"type":"structure","members":{"roleAliasDescription":{"type":"structure","members":{"roleAlias":{},"roleAliasArn":{},"roleArn":{},"owner":{},"credentialDurationSeconds":{"type":"integer"},"creationDate":{"type":"timestamp"},"lastModifiedDate":{"type":"timestamp"}}}}}},"DescribeScheduledAudit":{"http":{"method":"GET","requestUri":"/audit/scheduledaudits/{scheduledAuditName}"},"input":{"type":"structure","required":["scheduledAuditName"],"members":{"scheduledAuditName":{"location":"uri","locationName":"scheduledAuditName"}}},"output":{"type":"structure","members":{"frequency":{},"dayOfMonth":{},"dayOfWeek":{},"targetCheckNames":{"shape":"S7s"},"scheduledAuditName":{},"scheduledAuditArn":{}}}},"DescribeSecurityProfile":{"http":{"method":"GET","requestUri":"/security-profiles/{securityProfileName}"},"input":{"type":"structure","required":["securityProfileName"],"members":{"securityProfileName":{"location":"uri","locationName":"securityProfileName"}}},"output":{"type":"structure","members":{"securityProfileName":{},"securityProfileArn":{},"securityProfileDescription":{},"behaviors":{"shape":"S7y"},"alertTargets":{"shape":"S8o"},"additionalMetricsToRetain":{"shape":"S8s","deprecated":true,"deprecatedMessage":"Use additionalMetricsToRetainV2."},"additionalMetricsToRetainV2":{"shape":"S8t"},"version":{"type":"long"},"creationDate":{"type":"timestamp"},"lastModifiedDate":{"type":"timestamp"}}}},"DescribeStream":{"http":{"method":"GET","requestUri":"/streams/{streamId}"},"input":{"type":"structure","required":["streamId"],"members":{"streamId":{"location":"uri","locationName":"streamId"}}},"output":{"type":"structure","members":{"streamInfo":{"type":"structure","members":{"streamId":{},"streamArn":{},"streamVersion":{"type":"integer"},"description":{},"files":{"shape":"S8z"},"createdAt":{"type":"timestamp"},"lastUpdatedAt":{"type":"timestamp"},"roleArn":{}}}}}},"DescribeThing":{"http":{"method":"GET","requestUri":"/things/{thingName}"},"input":{"type":"structure","required":["thingName"],"members":{"thingName":{"location":"uri","locationName":"thingName"}}},"output":{"type":"structure","members":{"defaultClientId":{},"thingName":{},"thingId":{},"thingArn":{},"thingTypeName":{},"attributes":{"shape":"S3h"},"version":{"type":"long"},"billingGroupName":{}}}},"DescribeThingGroup":{"http":{"method":"GET","requestUri":"/thing-groups/{thingGroupName}"},"input":{"type":"structure","required":["thingGroupName"],"members":{"thingGroupName":{"location":"uri","locationName":"thingGroupName"}}},"output":{"type":"structure","members":{"thingGroupName":{},"thingGroupId":{},"thingGroupArn":{},"version":{"type":"long"},"thingGroupProperties":{"shape":"S3e"},"thingGroupMetadata":{"type":"structure","members":{"parentGroupName":{},"rootToParentThingGroups":{"shape":"Sje"},"creationDate":{"type":"timestamp"}}},"indexName":{},"queryString":{},"queryVersion":{},"status":{}}}},"DescribeThingRegistrationTask":{"http":{"method":"GET","requestUri":"/thing-registration-tasks/{taskId}"},"input":{"type":"structure","required":["taskId"],"members":{"taskId":{"location":"uri","locationName":"taskId"}}},"output":{"type":"structure","members":{"taskId":{},"creationDate":{"type":"timestamp"},"lastModifiedDate":{"type":"timestamp"},"templateBody":{},"inputFileBucket":{},"inputFileKey":{},"roleArn":{},"status":{},"message":{},"successCount":{"type":"integer"},"failureCount":{"type":"integer"},"percentageProgress":{"type":"integer"}}}},"DescribeThingType":{"http":{"method":"GET","requestUri":"/thing-types/{thingTypeName}"},"input":{"type":"structure","required":["thingTypeName"],"members":{"thingTypeName":{"location":"uri","locationName":"thingTypeName"}}},"output":{"type":"structure","members":{"thingTypeName":{},"thingTypeId":{},"thingTypeArn":{},"thingTypeProperties":{"shape":"S9b"},"thingTypeMetadata":{"shape":"Sjr"}}}},"DetachPolicy":{"http":{"requestUri":"/target-policies/{policyName}"},"input":{"type":"structure","required":["policyName","target"],"members":{"policyName":{"location":"uri","locationName":"policyName"},"target":{}}}},"DetachPrincipalPolicy":{"http":{"method":"DELETE","requestUri":"/principal-policies/{policyName}"},"input":{"type":"structure","required":["policyName","principal"],"members":{"policyName":{"location":"uri","locationName":"policyName"},"principal":{"location":"header","locationName":"x-amzn-iot-principal"}}},"deprecated":true},"DetachSecurityProfile":{"http":{"method":"DELETE","requestUri":"/security-profiles/{securityProfileName}/targets"},"input":{"type":"structure","required":["securityProfileName","securityProfileTargetArn"],"members":{"securityProfileName":{"location":"uri","locationName":"securityProfileName"},"securityProfileTargetArn":{"location":"querystring","locationName":"securityProfileTargetArn"}}},"output":{"type":"structure","members":{}}},"DetachThingPrincipal":{"http":{"method":"DELETE","requestUri":"/things/{thingName}/principals"},"input":{"type":"structure","required":["thingName","principal"],"members":{"thingName":{"location":"uri","locationName":"thingName"},"principal":{"location":"header","locationName":"x-amzn-principal"}}},"output":{"type":"structure","members":{}}},"DisableTopicRule":{"http":{"requestUri":"/rules/{ruleName}/disable"},"input":{"type":"structure","required":["ruleName"],"members":{"ruleName":{"location":"uri","locationName":"ruleName"}}}},"EnableTopicRule":{"http":{"requestUri":"/rules/{ruleName}/enable"},"input":{"type":"structure","required":["ruleName"],"members":{"ruleName":{"location":"uri","locationName":"ruleName"}}}},"GetBehaviorModelTrainingSummaries":{"http":{"method":"GET","requestUri":"/behavior-model-training/summaries"},"input":{"type":"structure","members":{"securityProfileName":{"location":"querystring","locationName":"securityProfileName"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"nextToken":{"location":"querystring","locationName":"nextToken"}}},"output":{"type":"structure","members":{"summaries":{"type":"list","member":{"type":"structure","members":{"securityProfileName":{},"behaviorName":{},"trainingDataCollectionStartDate":{"type":"timestamp"},"modelStatus":{},"datapointsCollectionPercentage":{"type":"double"},"lastModelRefreshDate":{"type":"timestamp"}}}},"nextToken":{}}}},"GetCardinality":{"http":{"requestUri":"/indices/cardinality"},"input":{"type":"structure","required":["queryString"],"members":{"indexName":{},"queryString":{},"aggregationField":{},"queryVersion":{}}},"output":{"type":"structure","members":{"cardinality":{"type":"integer"}}}},"GetEffectivePolicies":{"http":{"requestUri":"/effective-policies"},"input":{"type":"structure","members":{"principal":{},"cognitoIdentityPoolId":{},"thingName":{"location":"querystring","locationName":"thingName"}}},"output":{"type":"structure","members":{"effectivePolicies":{"type":"list","member":{"type":"structure","members":{"policyName":{},"policyArn":{},"policyDocument":{}}}}}}},"GetIndexingConfiguration":{"http":{"method":"GET","requestUri":"/indexing/config"},"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"thingIndexingConfiguration":{"shape":"Skj"},"thingGroupIndexingConfiguration":{"shape":"Skq"}}}},"GetJobDocument":{"http":{"method":"GET","requestUri":"/jobs/{jobId}/job-document"},"input":{"type":"structure","required":["jobId"],"members":{"jobId":{"location":"uri","locationName":"jobId"}}},"output":{"type":"structure","members":{"document":{}}}},"GetLoggingOptions":{"http":{"method":"GET","requestUri":"/loggingOptions"},"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"roleArn":{},"logLevel":{}}}},"GetOTAUpdate":{"http":{"method":"GET","requestUri":"/otaUpdates/{otaUpdateId}"},"input":{"type":"structure","required":["otaUpdateId"],"members":{"otaUpdateId":{"location":"uri","locationName":"otaUpdateId"}}},"output":{"type":"structure","members":{"otaUpdateInfo":{"type":"structure","members":{"otaUpdateId":{},"otaUpdateArn":{},"creationDate":{"type":"timestamp"},"lastModifiedDate":{"type":"timestamp"},"description":{},"targets":{"shape":"S57"},"protocols":{"shape":"S59"},"awsJobExecutionsRolloutConfig":{"shape":"S5b"},"awsJobPresignedUrlConfig":{"shape":"S5i"},"targetSelection":{},"otaUpdateFiles":{"shape":"S5t"},"otaUpdateStatus":{},"awsIotJobId":{},"awsIotJobArn":{},"errorInfo":{"type":"structure","members":{"code":{},"message":{}}},"additionalParameters":{"shape":"S6r"}}}}}},"GetPercentiles":{"http":{"requestUri":"/indices/percentiles"},"input":{"type":"structure","required":["queryString"],"members":{"indexName":{},"queryString":{},"aggregationField":{},"queryVersion":{},"percents":{"type":"list","member":{"type":"double"}}}},"output":{"type":"structure","members":{"percentiles":{"type":"list","member":{"type":"structure","members":{"percent":{"type":"double"},"value":{"type":"double"}}}}}}},"GetPolicy":{"http":{"method":"GET","requestUri":"/policies/{policyName}"},"input":{"type":"structure","required":["policyName"],"members":{"policyName":{"location":"uri","locationName":"policyName"}}},"output":{"type":"structure","members":{"policyName":{},"policyArn":{},"policyDocument":{},"defaultVersionId":{},"creationDate":{"type":"timestamp"},"lastModifiedDate":{"type":"timestamp"},"generationId":{}}}},"GetPolicyVersion":{"http":{"method":"GET","requestUri":"/policies/{policyName}/version/{policyVersionId}"},"input":{"type":"structure","required":["policyName","policyVersionId"],"members":{"policyName":{"location":"uri","locationName":"policyName"},"policyVersionId":{"location":"uri","locationName":"policyVersionId"}}},"output":{"type":"structure","members":{"policyArn":{},"policyName":{},"policyDocument":{},"policyVersionId":{},"isDefaultVersion":{"type":"boolean"},"creationDate":{"type":"timestamp"},"lastModifiedDate":{"type":"timestamp"},"generationId":{}}}},"GetRegistrationCode":{"http":{"method":"GET","requestUri":"/registrationcode"},"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"registrationCode":{}}}},"GetStatistics":{"http":{"requestUri":"/indices/statistics"},"input":{"type":"structure","required":["queryString"],"members":{"indexName":{},"queryString":{},"aggregationField":{},"queryVersion":{}}},"output":{"type":"structure","members":{"statistics":{"type":"structure","members":{"count":{"type":"integer"},"average":{"type":"double"},"sum":{"type":"double"},"minimum":{"type":"double"},"maximum":{"type":"double"},"sumOfSquares":{"type":"double"},"variance":{"type":"double"},"stdDeviation":{"type":"double"}}}}}},"GetTopicRule":{"http":{"method":"GET","requestUri":"/rules/{ruleName}"},"input":{"type":"structure","required":["ruleName"],"members":{"ruleName":{"location":"uri","locationName":"ruleName"}}},"output":{"type":"structure","members":{"ruleArn":{},"rule":{"type":"structure","members":{"ruleName":{},"sql":{},"description":{},"createdAt":{"type":"timestamp"},"actions":{"shape":"S9m"},"ruleDisabled":{"type":"boolean"},"awsIotSqlVersion":{},"errorAction":{"shape":"S9n"}}}}}},"GetTopicRuleDestination":{"http":{"method":"GET","requestUri":"/destinations/{arn+}"},"input":{"type":"structure","required":["arn"],"members":{"arn":{"location":"uri","locationName":"arn"}}},"output":{"type":"structure","members":{"topicRuleDestination":{"shape":"Scp"}}}},"GetV2LoggingOptions":{"http":{"method":"GET","requestUri":"/v2LoggingOptions"},"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"roleArn":{},"defaultLogLevel":{},"disableAllLogs":{"type":"boolean"}}}},"ListActiveViolations":{"http":{"method":"GET","requestUri":"/active-violations"},"input":{"type":"structure","members":{"thingName":{"location":"querystring","locationName":"thingName"},"securityProfileName":{"location":"querystring","locationName":"securityProfileName"},"behaviorCriteriaType":{"location":"querystring","locationName":"behaviorCriteriaType"},"listSuppressedAlerts":{"location":"querystring","locationName":"listSuppressedAlerts","type":"boolean"},"nextToken":{"location":"querystring","locationName":"nextToken"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"}}},"output":{"type":"structure","members":{"activeViolations":{"type":"list","member":{"type":"structure","members":{"violationId":{},"thingName":{},"securityProfileName":{},"behavior":{"shape":"S7z"},"lastViolationValue":{"shape":"S86"},"violationEventAdditionalInfo":{"shape":"Sm7"},"lastViolationTime":{"type":"timestamp"},"violationStartTime":{"type":"timestamp"}}}},"nextToken":{}}}},"ListAttachedPolicies":{"http":{"requestUri":"/attached-policies/{target}"},"input":{"type":"structure","required":["target"],"members":{"target":{"location":"uri","locationName":"target"},"recursive":{"location":"querystring","locationName":"recursive","type":"boolean"},"marker":{"location":"querystring","locationName":"marker"},"pageSize":{"location":"querystring","locationName":"pageSize","type":"integer"}}},"output":{"type":"structure","members":{"policies":{"shape":"Smd"},"nextMarker":{}}}},"ListAuditFindings":{"http":{"requestUri":"/audit/findings"},"input":{"type":"structure","members":{"taskId":{},"checkName":{},"resourceIdentifier":{"shape":"S1o"},"maxResults":{"type":"integer"},"nextToken":{},"startTime":{"type":"timestamp"},"endTime":{"type":"timestamp"},"listSuppressedFindings":{"type":"boolean"}}},"output":{"type":"structure","members":{"findings":{"type":"list","member":{"shape":"Sew"}},"nextToken":{}}}},"ListAuditMitigationActionsExecutions":{"http":{"method":"GET","requestUri":"/audit/mitigationactions/executions"},"input":{"type":"structure","required":["taskId","findingId"],"members":{"taskId":{"location":"querystring","locationName":"taskId"},"actionStatus":{"location":"querystring","locationName":"actionStatus"},"findingId":{"location":"querystring","locationName":"findingId"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"nextToken":{"location":"querystring","locationName":"nextToken"}}},"output":{"type":"structure","members":{"actionsExecutions":{"type":"list","member":{"type":"structure","members":{"taskId":{},"findingId":{},"actionName":{},"actionId":{},"status":{},"startTime":{"type":"timestamp"},"endTime":{"type":"timestamp"},"errorCode":{},"message":{}}}},"nextToken":{}}}},"ListAuditMitigationActionsTasks":{"http":{"method":"GET","requestUri":"/audit/mitigationactions/tasks"},"input":{"type":"structure","required":["startTime","endTime"],"members":{"auditTaskId":{"location":"querystring","locationName":"auditTaskId"},"findingId":{"location":"querystring","locationName":"findingId"},"taskStatus":{"location":"querystring","locationName":"taskStatus"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"nextToken":{"location":"querystring","locationName":"nextToken"},"startTime":{"location":"querystring","locationName":"startTime","type":"timestamp"},"endTime":{"location":"querystring","locationName":"endTime","type":"timestamp"}}},"output":{"type":"structure","members":{"tasks":{"type":"list","member":{"type":"structure","members":{"taskId":{},"startTime":{"type":"timestamp"},"taskStatus":{}}}},"nextToken":{}}}},"ListAuditSuppressions":{"http":{"requestUri":"/audit/suppressions/list"},"input":{"type":"structure","members":{"checkName":{},"resourceIdentifier":{"shape":"S1o"},"ascendingOrder":{"type":"boolean"},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"suppressions":{"type":"list","member":{"type":"structure","required":["checkName","resourceIdentifier"],"members":{"checkName":{},"resourceIdentifier":{"shape":"S1o"},"expirationDate":{"type":"timestamp"},"suppressIndefinitely":{"type":"boolean"},"description":{}}}},"nextToken":{}}}},"ListAuditTasks":{"http":{"method":"GET","requestUri":"/audit/tasks"},"input":{"type":"structure","required":["startTime","endTime"],"members":{"startTime":{"location":"querystring","locationName":"startTime","type":"timestamp"},"endTime":{"location":"querystring","locationName":"endTime","type":"timestamp"},"taskType":{"location":"querystring","locationName":"taskType"},"taskStatus":{"location":"querystring","locationName":"taskStatus"},"nextToken":{"location":"querystring","locationName":"nextToken"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"}}},"output":{"type":"structure","members":{"tasks":{"type":"list","member":{"type":"structure","members":{"taskId":{},"taskStatus":{},"taskType":{}}}},"nextToken":{}}}},"ListAuthorizers":{"http":{"method":"GET","requestUri":"/authorizers/"},"input":{"type":"structure","members":{"pageSize":{"location":"querystring","locationName":"pageSize","type":"integer"},"marker":{"location":"querystring","locationName":"marker"},"ascendingOrder":{"location":"querystring","locationName":"isAscendingOrder","type":"boolean"},"status":{"location":"querystring","locationName":"status"}}},"output":{"type":"structure","members":{"authorizers":{"type":"list","member":{"type":"structure","members":{"authorizerName":{},"authorizerArn":{}}}},"nextMarker":{}}}},"ListBillingGroups":{"http":{"method":"GET","requestUri":"/billing-groups"},"input":{"type":"structure","members":{"nextToken":{"location":"querystring","locationName":"nextToken"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"namePrefixFilter":{"location":"querystring","locationName":"namePrefixFilter"}}},"output":{"type":"structure","members":{"billingGroups":{"type":"list","member":{"shape":"Sjf"}},"nextToken":{}}}},"ListCACertificates":{"http":{"method":"GET","requestUri":"/cacertificates"},"input":{"type":"structure","members":{"pageSize":{"location":"querystring","locationName":"pageSize","type":"integer"},"marker":{"location":"querystring","locationName":"marker"},"ascendingOrder":{"location":"querystring","locationName":"isAscendingOrder","type":"boolean"}}},"output":{"type":"structure","members":{"certificates":{"type":"list","member":{"type":"structure","members":{"certificateArn":{},"certificateId":{},"status":{},"creationDate":{"type":"timestamp"}}}},"nextMarker":{}}}},"ListCertificates":{"http":{"method":"GET","requestUri":"/certificates"},"input":{"type":"structure","members":{"pageSize":{"location":"querystring","locationName":"pageSize","type":"integer"},"marker":{"location":"querystring","locationName":"marker"},"ascendingOrder":{"location":"querystring","locationName":"isAscendingOrder","type":"boolean"}}},"output":{"type":"structure","members":{"certificates":{"shape":"Snf"},"nextMarker":{}}}},"ListCertificatesByCA":{"http":{"method":"GET","requestUri":"/certificates-by-ca/{caCertificateId}"},"input":{"type":"structure","required":["caCertificateId"],"members":{"caCertificateId":{"location":"uri","locationName":"caCertificateId"},"pageSize":{"location":"querystring","locationName":"pageSize","type":"integer"},"marker":{"location":"querystring","locationName":"marker"},"ascendingOrder":{"location":"querystring","locationName":"isAscendingOrder","type":"boolean"}}},"output":{"type":"structure","members":{"certificates":{"shape":"Snf"},"nextMarker":{}}}},"ListCustomMetrics":{"http":{"method":"GET","requestUri":"/custom-metrics"},"input":{"type":"structure","members":{"nextToken":{"location":"querystring","locationName":"nextToken"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"}}},"output":{"type":"structure","members":{"metricNames":{"type":"list","member":{}},"nextToken":{}}}},"ListDetectMitigationActionsExecutions":{"http":{"method":"GET","requestUri":"/detect/mitigationactions/executions"},"input":{"type":"structure","members":{"taskId":{"location":"querystring","locationName":"taskId"},"violationId":{"location":"querystring","locationName":"violationId"},"thingName":{"location":"querystring","locationName":"thingName"},"startTime":{"location":"querystring","locationName":"startTime","type":"timestamp"},"endTime":{"location":"querystring","locationName":"endTime","type":"timestamp"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"nextToken":{"location":"querystring","locationName":"nextToken"}}},"output":{"type":"structure","members":{"actionsExecutions":{"type":"list","member":{"type":"structure","members":{"taskId":{},"violationId":{},"actionName":{},"thingName":{},"executionStartDate":{"type":"timestamp"},"executionEndDate":{"type":"timestamp"},"status":{},"errorCode":{},"message":{}}}},"nextToken":{}}}},"ListDetectMitigationActionsTasks":{"http":{"method":"GET","requestUri":"/detect/mitigationactions/tasks"},"input":{"type":"structure","required":["startTime","endTime"],"members":{"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"nextToken":{"location":"querystring","locationName":"nextToken"},"startTime":{"location":"querystring","locationName":"startTime","type":"timestamp"},"endTime":{"location":"querystring","locationName":"endTime","type":"timestamp"}}},"output":{"type":"structure","members":{"tasks":{"type":"list","member":{"shape":"Sh5"}},"nextToken":{}}}},"ListDimensions":{"http":{"method":"GET","requestUri":"/dimensions"},"input":{"type":"structure","members":{"nextToken":{"location":"querystring","locationName":"nextToken"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"}}},"output":{"type":"structure","members":{"dimensionNames":{"type":"list","member":{}},"nextToken":{}}}},"ListDomainConfigurations":{"http":{"method":"GET","requestUri":"/domainConfigurations"},"input":{"type":"structure","members":{"marker":{"location":"querystring","locationName":"marker"},"pageSize":{"location":"querystring","locationName":"pageSize","type":"integer"},"serviceType":{"location":"querystring","locationName":"serviceType"}}},"output":{"type":"structure","members":{"domainConfigurations":{"type":"list","member":{"type":"structure","members":{"domainConfigurationName":{},"domainConfigurationArn":{},"serviceType":{}}}},"nextMarker":{}}}},"ListIndices":{"http":{"method":"GET","requestUri":"/indices"},"input":{"type":"structure","members":{"nextToken":{"location":"querystring","locationName":"nextToken"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"}}},"output":{"type":"structure","members":{"indexNames":{"type":"list","member":{}},"nextToken":{}}}},"ListJobExecutionsForJob":{"http":{"method":"GET","requestUri":"/jobs/{jobId}/things"},"input":{"type":"structure","required":["jobId"],"members":{"jobId":{"location":"uri","locationName":"jobId"},"status":{"location":"querystring","locationName":"status"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"nextToken":{"location":"querystring","locationName":"nextToken"}}},"output":{"type":"structure","members":{"executionSummaries":{"type":"list","member":{"type":"structure","members":{"thingArn":{},"jobExecutionSummary":{"shape":"Sob"}}}},"nextToken":{}}}},"ListJobExecutionsForThing":{"http":{"method":"GET","requestUri":"/things/{thingName}/jobs"},"input":{"type":"structure","required":["thingName"],"members":{"thingName":{"location":"uri","locationName":"thingName"},"status":{"location":"querystring","locationName":"status"},"namespaceId":{"location":"querystring","locationName":"namespaceId"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"nextToken":{"location":"querystring","locationName":"nextToken"}}},"output":{"type":"structure","members":{"executionSummaries":{"type":"list","member":{"type":"structure","members":{"jobId":{},"jobExecutionSummary":{"shape":"Sob"}}}},"nextToken":{}}}},"ListJobTemplates":{"http":{"method":"GET","requestUri":"/job-templates"},"input":{"type":"structure","members":{"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"nextToken":{"location":"querystring","locationName":"nextToken"}}},"output":{"type":"structure","members":{"jobTemplates":{"type":"list","member":{"type":"structure","members":{"jobTemplateArn":{},"jobTemplateId":{},"description":{},"createdAt":{"type":"timestamp"}}}},"nextToken":{}}}},"ListJobs":{"http":{"method":"GET","requestUri":"/jobs"},"input":{"type":"structure","members":{"status":{"location":"querystring","locationName":"status"},"targetSelection":{"location":"querystring","locationName":"targetSelection"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"nextToken":{"location":"querystring","locationName":"nextToken"},"thingGroupName":{"location":"querystring","locationName":"thingGroupName"},"thingGroupId":{"location":"querystring","locationName":"thingGroupId"},"namespaceId":{"location":"querystring","locationName":"namespaceId"}}},"output":{"type":"structure","members":{"jobs":{"type":"list","member":{"type":"structure","members":{"jobArn":{},"jobId":{},"thingGroupId":{},"targetSelection":{},"status":{},"createdAt":{"type":"timestamp"},"lastUpdatedAt":{"type":"timestamp"},"completedAt":{"type":"timestamp"}}}},"nextToken":{}}}},"ListMitigationActions":{"http":{"method":"GET","requestUri":"/mitigationactions/actions"},"input":{"type":"structure","members":{"actionType":{"location":"querystring","locationName":"actionType"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"nextToken":{"location":"querystring","locationName":"nextToken"}}},"output":{"type":"structure","members":{"actionIdentifiers":{"type":"list","member":{"type":"structure","members":{"actionName":{},"actionArn":{},"creationDate":{"type":"timestamp"}}}},"nextToken":{}}}},"ListOTAUpdates":{"http":{"method":"GET","requestUri":"/otaUpdates"},"input":{"type":"structure","members":{"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"nextToken":{"location":"querystring","locationName":"nextToken"},"otaUpdateStatus":{"location":"querystring","locationName":"otaUpdateStatus"}}},"output":{"type":"structure","members":{"otaUpdates":{"type":"list","member":{"type":"structure","members":{"otaUpdateId":{},"otaUpdateArn":{},"creationDate":{"type":"timestamp"}}}},"nextToken":{}}}},"ListOutgoingCertificates":{"http":{"method":"GET","requestUri":"/certificates-out-going"},"input":{"type":"structure","members":{"pageSize":{"location":"querystring","locationName":"pageSize","type":"integer"},"marker":{"location":"querystring","locationName":"marker"},"ascendingOrder":{"location":"querystring","locationName":"isAscendingOrder","type":"boolean"}}},"output":{"type":"structure","members":{"outgoingCertificates":{"type":"list","member":{"type":"structure","members":{"certificateArn":{},"certificateId":{},"transferredTo":{},"transferDate":{"type":"timestamp"},"transferMessage":{},"creationDate":{"type":"timestamp"}}}},"nextMarker":{}}}},"ListPolicies":{"http":{"method":"GET","requestUri":"/policies"},"input":{"type":"structure","members":{"marker":{"location":"querystring","locationName":"marker"},"pageSize":{"location":"querystring","locationName":"pageSize","type":"integer"},"ascendingOrder":{"location":"querystring","locationName":"isAscendingOrder","type":"boolean"}}},"output":{"type":"structure","members":{"policies":{"shape":"Smd"},"nextMarker":{}}}},"ListPolicyPrincipals":{"http":{"method":"GET","requestUri":"/policy-principals"},"input":{"type":"structure","required":["policyName"],"members":{"policyName":{"location":"header","locationName":"x-amzn-iot-policy"},"marker":{"location":"querystring","locationName":"marker"},"pageSize":{"location":"querystring","locationName":"pageSize","type":"integer"},"ascendingOrder":{"location":"querystring","locationName":"isAscendingOrder","type":"boolean"}}},"output":{"type":"structure","members":{"principals":{"shape":"Sp4"},"nextMarker":{}}},"deprecated":true},"ListPolicyVersions":{"http":{"method":"GET","requestUri":"/policies/{policyName}/version"},"input":{"type":"structure","required":["policyName"],"members":{"policyName":{"location":"uri","locationName":"policyName"}}},"output":{"type":"structure","members":{"policyVersions":{"type":"list","member":{"type":"structure","members":{"versionId":{},"isDefaultVersion":{"type":"boolean"},"createDate":{"type":"timestamp"}}}}}}},"ListPrincipalPolicies":{"http":{"method":"GET","requestUri":"/principal-policies"},"input":{"type":"structure","required":["principal"],"members":{"principal":{"location":"header","locationName":"x-amzn-iot-principal"},"marker":{"location":"querystring","locationName":"marker"},"pageSize":{"location":"querystring","locationName":"pageSize","type":"integer"},"ascendingOrder":{"location":"querystring","locationName":"isAscendingOrder","type":"boolean"}}},"output":{"type":"structure","members":{"policies":{"shape":"Smd"},"nextMarker":{}}},"deprecated":true},"ListPrincipalThings":{"http":{"method":"GET","requestUri":"/principals/things"},"input":{"type":"structure","required":["principal"],"members":{"nextToken":{"location":"querystring","locationName":"nextToken"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"principal":{"location":"header","locationName":"x-amzn-principal"}}},"output":{"type":"structure","members":{"things":{"shape":"Spe"},"nextToken":{}}}},"ListProvisioningTemplateVersions":{"http":{"method":"GET","requestUri":"/provisioning-templates/{templateName}/versions"},"input":{"type":"structure","required":["templateName"],"members":{"templateName":{"location":"uri","locationName":"templateName"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"nextToken":{"location":"querystring","locationName":"nextToken"}}},"output":{"type":"structure","members":{"versions":{"type":"list","member":{"type":"structure","members":{"versionId":{"type":"integer"},"creationDate":{"type":"timestamp"},"isDefaultVersion":{"type":"boolean"}}}},"nextToken":{}}}},"ListProvisioningTemplates":{"http":{"method":"GET","requestUri":"/provisioning-templates"},"input":{"type":"structure","members":{"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"nextToken":{"location":"querystring","locationName":"nextToken"}}},"output":{"type":"structure","members":{"templates":{"type":"list","member":{"type":"structure","members":{"templateArn":{},"templateName":{},"description":{},"creationDate":{"type":"timestamp"},"lastModifiedDate":{"type":"timestamp"},"enabled":{"type":"boolean"}}}},"nextToken":{}}}},"ListRoleAliases":{"http":{"method":"GET","requestUri":"/role-aliases"},"input":{"type":"structure","members":{"pageSize":{"location":"querystring","locationName":"pageSize","type":"integer"},"marker":{"location":"querystring","locationName":"marker"},"ascendingOrder":{"location":"querystring","locationName":"isAscendingOrder","type":"boolean"}}},"output":{"type":"structure","members":{"roleAliases":{"type":"list","member":{}},"nextMarker":{}}}},"ListScheduledAudits":{"http":{"method":"GET","requestUri":"/audit/scheduledaudits"},"input":{"type":"structure","members":{"nextToken":{"location":"querystring","locationName":"nextToken"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"}}},"output":{"type":"structure","members":{"scheduledAudits":{"type":"list","member":{"type":"structure","members":{"scheduledAuditName":{},"scheduledAuditArn":{},"frequency":{},"dayOfMonth":{},"dayOfWeek":{}}}},"nextToken":{}}}},"ListSecurityProfiles":{"http":{"method":"GET","requestUri":"/security-profiles"},"input":{"type":"structure","members":{"nextToken":{"location":"querystring","locationName":"nextToken"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"dimensionName":{"location":"querystring","locationName":"dimensionName"},"metricName":{"location":"querystring","locationName":"metricName"}}},"output":{"type":"structure","members":{"securityProfileIdentifiers":{"type":"list","member":{"shape":"Spx"}},"nextToken":{}}}},"ListSecurityProfilesForTarget":{"http":{"method":"GET","requestUri":"/security-profiles-for-target"},"input":{"type":"structure","required":["securityProfileTargetArn"],"members":{"nextToken":{"location":"querystring","locationName":"nextToken"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"recursive":{"location":"querystring","locationName":"recursive","type":"boolean"},"securityProfileTargetArn":{"location":"querystring","locationName":"securityProfileTargetArn"}}},"output":{"type":"structure","members":{"securityProfileTargetMappings":{"type":"list","member":{"type":"structure","members":{"securityProfileIdentifier":{"shape":"Spx"},"target":{"shape":"Sq2"}}}},"nextToken":{}}}},"ListStreams":{"http":{"method":"GET","requestUri":"/streams"},"input":{"type":"structure","members":{"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"nextToken":{"location":"querystring","locationName":"nextToken"},"ascendingOrder":{"location":"querystring","locationName":"isAscendingOrder","type":"boolean"}}},"output":{"type":"structure","members":{"streams":{"type":"list","member":{"type":"structure","members":{"streamId":{},"streamArn":{},"streamVersion":{"type":"integer"},"description":{}}}},"nextToken":{}}}},"ListTagsForResource":{"http":{"method":"GET","requestUri":"/tags"},"input":{"type":"structure","required":["resourceArn"],"members":{"resourceArn":{"location":"querystring","locationName":"resourceArn"},"nextToken":{"location":"querystring","locationName":"nextToken"}}},"output":{"type":"structure","members":{"tags":{"shape":"S29"},"nextToken":{}}}},"ListTargetsForPolicy":{"http":{"requestUri":"/policy-targets/{policyName}"},"input":{"type":"structure","required":["policyName"],"members":{"policyName":{"location":"uri","locationName":"policyName"},"marker":{"location":"querystring","locationName":"marker"},"pageSize":{"location":"querystring","locationName":"pageSize","type":"integer"}}},"output":{"type":"structure","members":{"targets":{"type":"list","member":{}},"nextMarker":{}}}},"ListTargetsForSecurityProfile":{"http":{"method":"GET","requestUri":"/security-profiles/{securityProfileName}/targets"},"input":{"type":"structure","required":["securityProfileName"],"members":{"securityProfileName":{"location":"uri","locationName":"securityProfileName"},"nextToken":{"location":"querystring","locationName":"nextToken"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"}}},"output":{"type":"structure","members":{"securityProfileTargets":{"type":"list","member":{"shape":"Sq2"}},"nextToken":{}}}},"ListThingGroups":{"http":{"method":"GET","requestUri":"/thing-groups"},"input":{"type":"structure","members":{"nextToken":{"location":"querystring","locationName":"nextToken"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"parentGroup":{"location":"querystring","locationName":"parentGroup"},"namePrefixFilter":{"location":"querystring","locationName":"namePrefixFilter"},"recursive":{"location":"querystring","locationName":"recursive","type":"boolean"}}},"output":{"type":"structure","members":{"thingGroups":{"shape":"Sje"},"nextToken":{}}}},"ListThingGroupsForThing":{"http":{"method":"GET","requestUri":"/things/{thingName}/thing-groups"},"input":{"type":"structure","required":["thingName"],"members":{"thingName":{"location":"uri","locationName":"thingName"},"nextToken":{"location":"querystring","locationName":"nextToken"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"}}},"output":{"type":"structure","members":{"thingGroups":{"shape":"Sje"},"nextToken":{}}}},"ListThingPrincipals":{"http":{"method":"GET","requestUri":"/things/{thingName}/principals"},"input":{"type":"structure","required":["thingName"],"members":{"nextToken":{"location":"querystring","locationName":"nextToken"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"thingName":{"location":"uri","locationName":"thingName"}}},"output":{"type":"structure","members":{"principals":{"shape":"Sp4"},"nextToken":{}}}},"ListThingRegistrationTaskReports":{"http":{"method":"GET","requestUri":"/thing-registration-tasks/{taskId}/reports"},"input":{"type":"structure","required":["taskId","reportType"],"members":{"taskId":{"location":"uri","locationName":"taskId"},"reportType":{"location":"querystring","locationName":"reportType"},"nextToken":{"location":"querystring","locationName":"nextToken"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"}}},"output":{"type":"structure","members":{"resourceLinks":{"type":"list","member":{}},"reportType":{},"nextToken":{}}}},"ListThingRegistrationTasks":{"http":{"method":"GET","requestUri":"/thing-registration-tasks"},"input":{"type":"structure","members":{"nextToken":{"location":"querystring","locationName":"nextToken"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"status":{"location":"querystring","locationName":"status"}}},"output":{"type":"structure","members":{"taskIds":{"type":"list","member":{}},"nextToken":{}}}},"ListThingTypes":{"http":{"method":"GET","requestUri":"/thing-types"},"input":{"type":"structure","members":{"nextToken":{"location":"querystring","locationName":"nextToken"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"thingTypeName":{"location":"querystring","locationName":"thingTypeName"}}},"output":{"type":"structure","members":{"thingTypes":{"type":"list","member":{"type":"structure","members":{"thingTypeName":{},"thingTypeArn":{},"thingTypeProperties":{"shape":"S9b"},"thingTypeMetadata":{"shape":"Sjr"}}}},"nextToken":{}}}},"ListThings":{"http":{"method":"GET","requestUri":"/things"},"input":{"type":"structure","members":{"nextToken":{"location":"querystring","locationName":"nextToken"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"attributeName":{"location":"querystring","locationName":"attributeName"},"attributeValue":{"location":"querystring","locationName":"attributeValue"},"thingTypeName":{"location":"querystring","locationName":"thingTypeName"},"usePrefixAttributeValue":{"location":"querystring","locationName":"usePrefixAttributeValue","type":"boolean"}}},"output":{"type":"structure","members":{"things":{"type":"list","member":{"type":"structure","members":{"thingName":{},"thingTypeName":{},"thingArn":{},"attributes":{"shape":"S3h"},"version":{"type":"long"}}}},"nextToken":{}}}},"ListThingsInBillingGroup":{"http":{"method":"GET","requestUri":"/billing-groups/{billingGroupName}/things"},"input":{"type":"structure","required":["billingGroupName"],"members":{"billingGroupName":{"location":"uri","locationName":"billingGroupName"},"nextToken":{"location":"querystring","locationName":"nextToken"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"}}},"output":{"type":"structure","members":{"things":{"shape":"Spe"},"nextToken":{}}}},"ListThingsInThingGroup":{"http":{"method":"GET","requestUri":"/thing-groups/{thingGroupName}/things"},"input":{"type":"structure","required":["thingGroupName"],"members":{"thingGroupName":{"location":"uri","locationName":"thingGroupName"},"recursive":{"location":"querystring","locationName":"recursive","type":"boolean"},"nextToken":{"location":"querystring","locationName":"nextToken"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"}}},"output":{"type":"structure","members":{"things":{"shape":"Spe"},"nextToken":{}}}},"ListTopicRuleDestinations":{"http":{"method":"GET","requestUri":"/destinations"},"input":{"type":"structure","members":{"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"nextToken":{"location":"querystring","locationName":"nextToken"}}},"output":{"type":"structure","members":{"destinationSummaries":{"type":"list","member":{"type":"structure","members":{"arn":{},"status":{},"createdAt":{"type":"timestamp"},"lastUpdatedAt":{"type":"timestamp"},"statusReason":{},"httpUrlSummary":{"type":"structure","members":{"confirmationUrl":{}}},"vpcDestinationSummary":{"type":"structure","members":{"subnetIds":{"shape":"Scj"},"securityGroups":{"shape":"Scl"},"vpcId":{},"roleArn":{}}}}}},"nextToken":{}}}},"ListTopicRules":{"http":{"method":"GET","requestUri":"/rules"},"input":{"type":"structure","members":{"topic":{"location":"querystring","locationName":"topic"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"nextToken":{"location":"querystring","locationName":"nextToken"},"ruleDisabled":{"location":"querystring","locationName":"ruleDisabled","type":"boolean"}}},"output":{"type":"structure","members":{"rules":{"type":"list","member":{"type":"structure","members":{"ruleArn":{},"ruleName":{},"topicPattern":{},"createdAt":{"type":"timestamp"},"ruleDisabled":{"type":"boolean"}}}},"nextToken":{}}}},"ListV2LoggingLevels":{"http":{"method":"GET","requestUri":"/v2LoggingLevel"},"input":{"type":"structure","members":{"targetType":{"location":"querystring","locationName":"targetType"},"nextToken":{"location":"querystring","locationName":"nextToken"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"}}},"output":{"type":"structure","members":{"logTargetConfigurations":{"type":"list","member":{"type":"structure","members":{"logTarget":{"shape":"Srq"},"logLevel":{}}}},"nextToken":{}}}},"ListViolationEvents":{"http":{"method":"GET","requestUri":"/violation-events"},"input":{"type":"structure","required":["startTime","endTime"],"members":{"startTime":{"location":"querystring","locationName":"startTime","type":"timestamp"},"endTime":{"location":"querystring","locationName":"endTime","type":"timestamp"},"thingName":{"location":"querystring","locationName":"thingName"},"securityProfileName":{"location":"querystring","locationName":"securityProfileName"},"behaviorCriteriaType":{"location":"querystring","locationName":"behaviorCriteriaType"},"listSuppressedAlerts":{"location":"querystring","locationName":"listSuppressedAlerts","type":"boolean"},"nextToken":{"location":"querystring","locationName":"nextToken"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"}}},"output":{"type":"structure","members":{"violationEvents":{"type":"list","member":{"type":"structure","members":{"violationId":{},"thingName":{},"securityProfileName":{},"behavior":{"shape":"S7z"},"metricValue":{"shape":"S86"},"violationEventAdditionalInfo":{"shape":"Sm7"},"violationEventType":{},"violationEventTime":{"type":"timestamp"}}}},"nextToken":{}}}},"RegisterCACertificate":{"http":{"requestUri":"/cacertificate"},"input":{"type":"structure","required":["caCertificate","verificationCertificate"],"members":{"caCertificate":{},"verificationCertificate":{},"setAsActive":{"location":"querystring","locationName":"setAsActive","type":"boolean"},"allowAutoRegistration":{"location":"querystring","locationName":"allowAutoRegistration","type":"boolean"},"registrationConfig":{"shape":"Sgr"},"tags":{"shape":"S29"}}},"output":{"type":"structure","members":{"certificateArn":{},"certificateId":{}}}},"RegisterCertificate":{"http":{"requestUri":"/certificate/register"},"input":{"type":"structure","required":["certificatePem"],"members":{"certificatePem":{},"caCertificatePem":{},"setAsActive":{"deprecated":true,"location":"querystring","locationName":"setAsActive","type":"boolean"},"status":{}}},"output":{"type":"structure","members":{"certificateArn":{},"certificateId":{}}}},"RegisterCertificateWithoutCA":{"http":{"requestUri":"/certificate/register-no-ca"},"input":{"type":"structure","required":["certificatePem"],"members":{"certificatePem":{},"status":{}}},"output":{"type":"structure","members":{"certificateArn":{},"certificateId":{}}}},"RegisterThing":{"http":{"requestUri":"/things"},"input":{"type":"structure","required":["templateBody"],"members":{"templateBody":{},"parameters":{"type":"map","key":{},"value":{}}}},"output":{"type":"structure","members":{"certificatePem":{},"resourceArns":{"type":"map","key":{},"value":{}}}}},"RejectCertificateTransfer":{"http":{"method":"PATCH","requestUri":"/reject-certificate-transfer/{certificateId}"},"input":{"type":"structure","required":["certificateId"],"members":{"certificateId":{"location":"uri","locationName":"certificateId"},"rejectReason":{}}}},"RemoveThingFromBillingGroup":{"http":{"method":"PUT","requestUri":"/billing-groups/removeThingFromBillingGroup"},"input":{"type":"structure","members":{"billingGroupName":{},"billingGroupArn":{},"thingName":{},"thingArn":{}}},"output":{"type":"structure","members":{}}},"RemoveThingFromThingGroup":{"http":{"method":"PUT","requestUri":"/thing-groups/removeThingFromThingGroup"},"input":{"type":"structure","members":{"thingGroupName":{},"thingGroupArn":{},"thingName":{},"thingArn":{}}},"output":{"type":"structure","members":{}}},"ReplaceTopicRule":{"http":{"method":"PATCH","requestUri":"/rules/{ruleName}"},"input":{"type":"structure","required":["ruleName","topicRulePayload"],"members":{"ruleName":{"location":"uri","locationName":"ruleName"},"topicRulePayload":{"shape":"S9j"}},"payload":"topicRulePayload"}},"SearchIndex":{"http":{"requestUri":"/indices/search"},"input":{"type":"structure","required":["queryString"],"members":{"indexName":{},"queryString":{},"nextToken":{},"maxResults":{"type":"integer"},"queryVersion":{}}},"output":{"type":"structure","members":{"nextToken":{},"things":{"type":"list","member":{"type":"structure","members":{"thingName":{},"thingId":{},"thingTypeName":{},"thingGroupNames":{"shape":"Ssk"},"attributes":{"shape":"S3h"},"shadow":{},"connectivity":{"type":"structure","members":{"connected":{"type":"boolean"},"timestamp":{"type":"long"}}}}}},"thingGroups":{"type":"list","member":{"type":"structure","members":{"thingGroupName":{},"thingGroupId":{},"thingGroupDescription":{},"attributes":{"shape":"S3h"},"parentGroupNames":{"shape":"Ssk"}}}}}}},"SetDefaultAuthorizer":{"http":{"requestUri":"/default-authorizer"},"input":{"type":"structure","required":["authorizerName"],"members":{"authorizerName":{}}},"output":{"type":"structure","members":{"authorizerName":{},"authorizerArn":{}}}},"SetDefaultPolicyVersion":{"http":{"method":"PATCH","requestUri":"/policies/{policyName}/version/{policyVersionId}"},"input":{"type":"structure","required":["policyName","policyVersionId"],"members":{"policyName":{"location":"uri","locationName":"policyName"},"policyVersionId":{"location":"uri","locationName":"policyVersionId"}}}},"SetLoggingOptions":{"http":{"requestUri":"/loggingOptions"},"input":{"type":"structure","required":["loggingOptionsPayload"],"members":{"loggingOptionsPayload":{"type":"structure","required":["roleArn"],"members":{"roleArn":{},"logLevel":{}}}},"payload":"loggingOptionsPayload"}},"SetV2LoggingLevel":{"http":{"requestUri":"/v2LoggingLevel"},"input":{"type":"structure","required":["logTarget","logLevel"],"members":{"logTarget":{"shape":"Srq"},"logLevel":{}}}},"SetV2LoggingOptions":{"http":{"requestUri":"/v2LoggingOptions"},"input":{"type":"structure","members":{"roleArn":{},"defaultLogLevel":{},"disableAllLogs":{"type":"boolean"}}}},"StartAuditMitigationActionsTask":{"http":{"requestUri":"/audit/mitigationactions/tasks/{taskId}"},"input":{"type":"structure","required":["taskId","target","auditCheckToActionsMapping","clientRequestToken"],"members":{"taskId":{"location":"uri","locationName":"taskId"},"target":{"shape":"Sfg"},"auditCheckToActionsMapping":{"shape":"Sfk"},"clientRequestToken":{"idempotencyToken":true}}},"output":{"type":"structure","members":{"taskId":{}}}},"StartDetectMitigationActionsTask":{"http":{"method":"PUT","requestUri":"/detect/mitigationactions/tasks/{taskId}"},"input":{"type":"structure","required":["taskId","target","actions","clientRequestToken"],"members":{"taskId":{"location":"uri","locationName":"taskId"},"target":{"shape":"Sh7"},"actions":{"type":"list","member":{}},"violationEventOccurrenceRange":{"shape":"Sha"},"includeOnlyActiveViolations":{"type":"boolean"},"includeSuppressedAlerts":{"type":"boolean"},"clientRequestToken":{"idempotencyToken":true}}},"output":{"type":"structure","members":{"taskId":{}}}},"StartOnDemandAuditTask":{"http":{"requestUri":"/audit/tasks"},"input":{"type":"structure","required":["targetCheckNames"],"members":{"targetCheckNames":{"shape":"S7s"}}},"output":{"type":"structure","members":{"taskId":{}}}},"StartThingRegistrationTask":{"http":{"requestUri":"/thing-registration-tasks"},"input":{"type":"structure","required":["templateBody","inputFileBucket","inputFileKey","roleArn"],"members":{"templateBody":{},"inputFileBucket":{},"inputFileKey":{},"roleArn":{}}},"output":{"type":"structure","members":{"taskId":{}}}},"StopThingRegistrationTask":{"http":{"method":"PUT","requestUri":"/thing-registration-tasks/{taskId}/cancel"},"input":{"type":"structure","required":["taskId"],"members":{"taskId":{"location":"uri","locationName":"taskId"}}},"output":{"type":"structure","members":{}}},"TagResource":{"http":{"requestUri":"/tags"},"input":{"type":"structure","required":["resourceArn","tags"],"members":{"resourceArn":{},"tags":{"shape":"S29"}}},"output":{"type":"structure","members":{}}},"TestAuthorization":{"http":{"requestUri":"/test-authorization"},"input":{"type":"structure","required":["authInfos"],"members":{"principal":{},"cognitoIdentityPoolId":{},"authInfos":{"type":"list","member":{"shape":"Std"}},"clientId":{"location":"querystring","locationName":"clientId"},"policyNamesToAdd":{"shape":"Sth"},"policyNamesToSkip":{"shape":"Sth"}}},"output":{"type":"structure","members":{"authResults":{"type":"list","member":{"type":"structure","members":{"authInfo":{"shape":"Std"},"allowed":{"type":"structure","members":{"policies":{"shape":"Smd"}}},"denied":{"type":"structure","members":{"implicitDeny":{"type":"structure","members":{"policies":{"shape":"Smd"}}},"explicitDeny":{"type":"structure","members":{"policies":{"shape":"Smd"}}}}},"authDecision":{},"missingContextValues":{"type":"list","member":{}}}}}}}},"TestInvokeAuthorizer":{"http":{"requestUri":"/authorizer/{authorizerName}/test"},"input":{"type":"structure","required":["authorizerName"],"members":{"authorizerName":{"location":"uri","locationName":"authorizerName"},"token":{},"tokenSignature":{},"httpContext":{"type":"structure","members":{"headers":{"type":"map","key":{},"value":{}},"queryString":{}}},"mqttContext":{"type":"structure","members":{"username":{},"password":{"type":"blob"},"clientId":{}}},"tlsContext":{"type":"structure","members":{"serverName":{}}}}},"output":{"type":"structure","members":{"isAuthenticated":{"type":"boolean"},"principalId":{},"policyDocuments":{"type":"list","member":{}},"refreshAfterInSeconds":{"type":"integer"},"disconnectAfterInSeconds":{"type":"integer"}}}},"TransferCertificate":{"http":{"method":"PATCH","requestUri":"/transfer-certificate/{certificateId}"},"input":{"type":"structure","required":["certificateId","targetAwsAccount"],"members":{"certificateId":{"location":"uri","locationName":"certificateId"},"targetAwsAccount":{"location":"querystring","locationName":"targetAwsAccount"},"transferMessage":{}}},"output":{"type":"structure","members":{"transferredCertificateArn":{}}}},"UntagResource":{"http":{"requestUri":"/untag"},"input":{"type":"structure","required":["resourceArn","tagKeys"],"members":{"resourceArn":{},"tagKeys":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"UpdateAccountAuditConfiguration":{"http":{"method":"PATCH","requestUri":"/audit/configuration"},"input":{"type":"structure","members":{"roleArn":{},"auditNotificationTargetConfigurations":{"shape":"Seo"},"auditCheckConfigurations":{"shape":"Ser"}}},"output":{"type":"structure","members":{}}},"UpdateAuditSuppression":{"http":{"method":"PATCH","requestUri":"/audit/suppressions/update"},"input":{"type":"structure","required":["checkName","resourceIdentifier"],"members":{"checkName":{},"resourceIdentifier":{"shape":"S1o"},"expirationDate":{"type":"timestamp"},"suppressIndefinitely":{"type":"boolean"},"description":{}}},"output":{"type":"structure","members":{}}},"UpdateAuthorizer":{"http":{"method":"PUT","requestUri":"/authorizer/{authorizerName}"},"input":{"type":"structure","required":["authorizerName"],"members":{"authorizerName":{"location":"uri","locationName":"authorizerName"},"authorizerFunctionArn":{},"tokenKeyName":{},"tokenSigningPublicKeys":{"shape":"S25"},"status":{}}},"output":{"type":"structure","members":{"authorizerName":{},"authorizerArn":{}}}},"UpdateBillingGroup":{"http":{"method":"PATCH","requestUri":"/billing-groups/{billingGroupName}"},"input":{"type":"structure","required":["billingGroupName","billingGroupProperties"],"members":{"billingGroupName":{"location":"uri","locationName":"billingGroupName"},"billingGroupProperties":{"shape":"S2h"},"expectedVersion":{"type":"long"}}},"output":{"type":"structure","members":{"version":{"type":"long"}}}},"UpdateCACertificate":{"http":{"method":"PUT","requestUri":"/cacertificate/{caCertificateId}"},"input":{"type":"structure","required":["certificateId"],"members":{"certificateId":{"location":"uri","locationName":"caCertificateId"},"newStatus":{"location":"querystring","locationName":"newStatus"},"newAutoRegistrationStatus":{"location":"querystring","locationName":"newAutoRegistrationStatus"},"registrationConfig":{"shape":"Sgr"},"removeAutoRegistration":{"type":"boolean"}}}},"UpdateCertificate":{"http":{"method":"PUT","requestUri":"/certificates/{certificateId}"},"input":{"type":"structure","required":["certificateId","newStatus"],"members":{"certificateId":{"location":"uri","locationName":"certificateId"},"newStatus":{"location":"querystring","locationName":"newStatus"}}}},"UpdateCustomMetric":{"http":{"method":"PATCH","requestUri":"/custom-metric/{metricName}"},"input":{"type":"structure","required":["metricName","displayName"],"members":{"metricName":{"location":"uri","locationName":"metricName"},"displayName":{}}},"output":{"type":"structure","members":{"metricName":{},"metricArn":{},"metricType":{},"displayName":{},"creationDate":{"type":"timestamp"},"lastModifiedDate":{"type":"timestamp"}}}},"UpdateDimension":{"http":{"method":"PATCH","requestUri":"/dimensions/{name}"},"input":{"type":"structure","required":["name","stringValues"],"members":{"name":{"location":"uri","locationName":"name"},"stringValues":{"shape":"S2z"}}},"output":{"type":"structure","members":{"name":{},"arn":{},"type":{},"stringValues":{"shape":"S2z"},"creationDate":{"type":"timestamp"},"lastModifiedDate":{"type":"timestamp"}}}},"UpdateDomainConfiguration":{"http":{"method":"PUT","requestUri":"/domainConfigurations/{domainConfigurationName}"},"input":{"type":"structure","required":["domainConfigurationName"],"members":{"domainConfigurationName":{"location":"uri","locationName":"domainConfigurationName"},"authorizerConfig":{"shape":"S38"},"domainConfigurationStatus":{},"removeAuthorizerConfig":{"type":"boolean"}}},"output":{"type":"structure","members":{"domainConfigurationName":{},"domainConfigurationArn":{}}}},"UpdateDynamicThingGroup":{"http":{"method":"PATCH","requestUri":"/dynamic-thing-groups/{thingGroupName}"},"input":{"type":"structure","required":["thingGroupName","thingGroupProperties"],"members":{"thingGroupName":{"location":"uri","locationName":"thingGroupName"},"thingGroupProperties":{"shape":"S3e"},"expectedVersion":{"type":"long"},"indexName":{},"queryString":{},"queryVersion":{}}},"output":{"type":"structure","members":{"version":{"type":"long"}}}},"UpdateEventConfigurations":{"http":{"method":"PATCH","requestUri":"/event-configurations"},"input":{"type":"structure","members":{"eventConfigurations":{"shape":"Shv"}}},"output":{"type":"structure","members":{}}},"UpdateIndexingConfiguration":{"http":{"requestUri":"/indexing/config"},"input":{"type":"structure","members":{"thingIndexingConfiguration":{"shape":"Skj"},"thingGroupIndexingConfiguration":{"shape":"Skq"}}},"output":{"type":"structure","members":{}}},"UpdateJob":{"http":{"method":"PATCH","requestUri":"/jobs/{jobId}"},"input":{"type":"structure","required":["jobId"],"members":{"jobId":{"location":"uri","locationName":"jobId"},"description":{},"presignedUrlConfig":{"shape":"S3t"},"jobExecutionsRolloutConfig":{"shape":"S3w"},"abortConfig":{"shape":"S43"},"timeoutConfig":{"shape":"S4a"},"namespaceId":{"location":"querystring","locationName":"namespaceId"}}}},"UpdateMitigationAction":{"http":{"method":"PATCH","requestUri":"/mitigationactions/actions/{actionName}"},"input":{"type":"structure","required":["actionName"],"members":{"actionName":{"location":"uri","locationName":"actionName"},"roleArn":{},"actionParams":{"shape":"S4o"}}},"output":{"type":"structure","members":{"actionArn":{},"actionId":{}}}},"UpdateProvisioningTemplate":{"http":{"method":"PATCH","requestUri":"/provisioning-templates/{templateName}"},"input":{"type":"structure","required":["templateName"],"members":{"templateName":{"location":"uri","locationName":"templateName"},"description":{},"enabled":{"type":"boolean"},"defaultVersionId":{"type":"integer"},"provisioningRoleArn":{},"preProvisioningHook":{"shape":"S7d"},"removePreProvisioningHook":{"type":"boolean"}}},"output":{"type":"structure","members":{}}},"UpdateRoleAlias":{"http":{"method":"PUT","requestUri":"/role-aliases/{roleAlias}"},"input":{"type":"structure","required":["roleAlias"],"members":{"roleAlias":{"location":"uri","locationName":"roleAlias"},"roleArn":{},"credentialDurationSeconds":{"type":"integer"}}},"output":{"type":"structure","members":{"roleAlias":{},"roleAliasArn":{}}}},"UpdateScheduledAudit":{"http":{"method":"PATCH","requestUri":"/audit/scheduledaudits/{scheduledAuditName}"},"input":{"type":"structure","required":["scheduledAuditName"],"members":{"frequency":{},"dayOfMonth":{},"dayOfWeek":{},"targetCheckNames":{"shape":"S7s"},"scheduledAuditName":{"location":"uri","locationName":"scheduledAuditName"}}},"output":{"type":"structure","members":{"scheduledAuditArn":{}}}},"UpdateSecurityProfile":{"http":{"method":"PATCH","requestUri":"/security-profiles/{securityProfileName}"},"input":{"type":"structure","required":["securityProfileName"],"members":{"securityProfileName":{"location":"uri","locationName":"securityProfileName"},"securityProfileDescription":{},"behaviors":{"shape":"S7y"},"alertTargets":{"shape":"S8o"},"additionalMetricsToRetain":{"shape":"S8s","deprecated":true,"deprecatedMessage":"Use additionalMetricsToRetainV2."},"additionalMetricsToRetainV2":{"shape":"S8t"},"deleteBehaviors":{"type":"boolean"},"deleteAlertTargets":{"type":"boolean"},"deleteAdditionalMetricsToRetain":{"type":"boolean"},"expectedVersion":{"location":"querystring","locationName":"expectedVersion","type":"long"}}},"output":{"type":"structure","members":{"securityProfileName":{},"securityProfileArn":{},"securityProfileDescription":{},"behaviors":{"shape":"S7y"},"alertTargets":{"shape":"S8o"},"additionalMetricsToRetain":{"shape":"S8s","deprecated":true,"deprecatedMessage":"Use additionalMetricsToRetainV2."},"additionalMetricsToRetainV2":{"shape":"S8t"},"version":{"type":"long"},"creationDate":{"type":"timestamp"},"lastModifiedDate":{"type":"timestamp"}}}},"UpdateStream":{"http":{"method":"PUT","requestUri":"/streams/{streamId}"},"input":{"type":"structure","required":["streamId"],"members":{"streamId":{"location":"uri","locationName":"streamId"},"description":{},"files":{"shape":"S8z"},"roleArn":{}}},"output":{"type":"structure","members":{"streamId":{},"streamArn":{},"description":{},"streamVersion":{"type":"integer"}}}},"UpdateThing":{"http":{"method":"PATCH","requestUri":"/things/{thingName}"},"input":{"type":"structure","required":["thingName"],"members":{"thingName":{"location":"uri","locationName":"thingName"},"thingTypeName":{},"attributePayload":{"shape":"S3g"},"expectedVersion":{"type":"long"},"removeThingType":{"type":"boolean"}}},"output":{"type":"structure","members":{}}},"UpdateThingGroup":{"http":{"method":"PATCH","requestUri":"/thing-groups/{thingGroupName}"},"input":{"type":"structure","required":["thingGroupName","thingGroupProperties"],"members":{"thingGroupName":{"location":"uri","locationName":"thingGroupName"},"thingGroupProperties":{"shape":"S3e"},"expectedVersion":{"type":"long"}}},"output":{"type":"structure","members":{"version":{"type":"long"}}}},"UpdateThingGroupsForThing":{"http":{"method":"PUT","requestUri":"/thing-groups/updateThingGroupsForThing"},"input":{"type":"structure","members":{"thingName":{},"thingGroupsToAdd":{"shape":"Svr"},"thingGroupsToRemove":{"shape":"Svr"},"overrideDynamicGroups":{"type":"boolean"}}},"output":{"type":"structure","members":{}}},"UpdateTopicRuleDestination":{"http":{"method":"PATCH","requestUri":"/destinations"},"input":{"type":"structure","required":["arn","status"],"members":{"arn":{},"status":{}}},"output":{"type":"structure","members":{}}},"ValidateSecurityProfileBehaviors":{"http":{"requestUri":"/security-profile-behaviors/validate"},"input":{"type":"structure","required":["behaviors"],"members":{"behaviors":{"shape":"S7y"}}},"output":{"type":"structure","members":{"valid":{"type":"boolean"},"validationErrors":{"type":"list","member":{"type":"structure","members":{"errorMessage":{}}}}}}}},"shapes":{"Sg":{"type":"list","member":{}},"S1e":{"type":"map","key":{},"value":{}},"S1o":{"type":"structure","members":{"deviceCertificateId":{},"caCertificateId":{},"cognitoIdentityPoolId":{},"clientId":{},"policyVersionIdentifier":{"type":"structure","members":{"policyName":{},"policyVersionId":{}}},"account":{},"iamRoleArn":{},"roleAliasArn":{}}},"S25":{"type":"map","key":{},"value":{}},"S29":{"type":"list","member":{"type":"structure","required":["Key"],"members":{"Key":{},"Value":{}}}},"S2h":{"type":"structure","members":{"billingGroupDescription":{}}},"S2z":{"type":"list","member":{}},"S38":{"type":"structure","members":{"defaultAuthorizerName":{},"allowAuthorizerOverride":{"type":"boolean"}}},"S3e":{"type":"structure","members":{"thingGroupDescription":{},"attributePayload":{"shape":"S3g"}}},"S3g":{"type":"structure","members":{"attributes":{"shape":"S3h"},"merge":{"type":"boolean"}}},"S3h":{"type":"map","key":{},"value":{}},"S3t":{"type":"structure","members":{"roleArn":{},"expiresInSec":{"type":"long"}}},"S3w":{"type":"structure","members":{"maximumPerMinute":{"type":"integer"},"exponentialRate":{"type":"structure","required":["baseRatePerMinute","incrementFactor","rateIncreaseCriteria"],"members":{"baseRatePerMinute":{"type":"integer"},"incrementFactor":{"type":"double"},"rateIncreaseCriteria":{"type":"structure","members":{"numberOfNotifiedThings":{"type":"integer"},"numberOfSucceededThings":{"type":"integer"}}}}}}},"S43":{"type":"structure","required":["criteriaList"],"members":{"criteriaList":{"type":"list","member":{"type":"structure","required":["failureType","action","thresholdPercentage","minNumberOfExecutedThings"],"members":{"failureType":{},"action":{},"thresholdPercentage":{"type":"double"},"minNumberOfExecutedThings":{"type":"integer"}}}}}},"S4a":{"type":"structure","members":{"inProgressTimeoutInMinutes":{"type":"long"}}},"S4j":{"type":"structure","members":{"PublicKey":{},"PrivateKey":{"type":"string","sensitive":true}}},"S4o":{"type":"structure","members":{"updateDeviceCertificateParams":{"type":"structure","required":["action"],"members":{"action":{}}},"updateCACertificateParams":{"type":"structure","required":["action"],"members":{"action":{}}},"addThingsToThingGroupParams":{"type":"structure","required":["thingGroupNames"],"members":{"thingGroupNames":{"type":"list","member":{}},"overrideDynamicGroups":{"type":"boolean"}}},"replaceDefaultPolicyVersionParams":{"type":"structure","required":["templateName"],"members":{"templateName":{}}},"enableIoTLoggingParams":{"type":"structure","required":["roleArnForLogging","logLevel"],"members":{"roleArnForLogging":{},"logLevel":{}}},"publishFindingToSnsParams":{"type":"structure","required":["topicArn"],"members":{"topicArn":{}}}}},"S57":{"type":"list","member":{}},"S59":{"type":"list","member":{}},"S5b":{"type":"structure","members":{"maximumPerMinute":{"type":"integer"},"exponentialRate":{"type":"structure","required":["baseRatePerMinute","incrementFactor","rateIncreaseCriteria"],"members":{"baseRatePerMinute":{"type":"integer"},"incrementFactor":{"type":"double"},"rateIncreaseCriteria":{"type":"structure","members":{"numberOfNotifiedThings":{"type":"integer"},"numberOfSucceededThings":{"type":"integer"}}}}}}},"S5i":{"type":"structure","members":{"expiresInSec":{"type":"long"}}},"S5t":{"type":"list","member":{"type":"structure","members":{"fileName":{},"fileType":{"type":"integer"},"fileVersion":{},"fileLocation":{"type":"structure","members":{"stream":{"type":"structure","members":{"streamId":{},"fileId":{"type":"integer"}}},"s3Location":{"shape":"S62"}}},"codeSigning":{"type":"structure","members":{"awsSignerJobId":{},"startSigningJobParameter":{"type":"structure","members":{"signingProfileParameter":{"type":"structure","members":{"certificateArn":{},"platform":{},"certificatePathOnDevice":{}}},"signingProfileName":{},"destination":{"type":"structure","members":{"s3Destination":{"type":"structure","members":{"bucket":{},"prefix":{}}}}}}},"customCodeSigning":{"type":"structure","members":{"signature":{"type":"structure","members":{"inlineDocument":{"type":"blob"}}},"certificateChain":{"type":"structure","members":{"certificateName":{},"inlineDocument":{}}},"hashAlgorithm":{},"signatureAlgorithm":{}}}}},"attributes":{"type":"map","key":{},"value":{}}}}},"S62":{"type":"structure","members":{"bucket":{},"key":{},"version":{}}},"S6r":{"type":"map","key":{},"value":{}},"S7d":{"type":"structure","required":["targetArn"],"members":{"payloadVersion":{},"targetArn":{}}},"S7s":{"type":"list","member":{}},"S7y":{"type":"list","member":{"shape":"S7z"}},"S7z":{"type":"structure","required":["name"],"members":{"name":{},"metric":{},"metricDimension":{"shape":"S82"},"criteria":{"type":"structure","members":{"comparisonOperator":{},"value":{"shape":"S86"},"durationSeconds":{"type":"integer"},"consecutiveDatapointsToAlarm":{"type":"integer"},"consecutiveDatapointsToClear":{"type":"integer"},"statisticalThreshold":{"type":"structure","members":{"statistic":{}}},"mlDetectionConfig":{"type":"structure","required":["confidenceLevel"],"members":{"confidenceLevel":{}}}}},"suppressAlerts":{"type":"boolean"}}},"S82":{"type":"structure","required":["dimensionName"],"members":{"dimensionName":{},"operator":{}}},"S86":{"type":"structure","members":{"count":{"type":"long"},"cidrs":{"type":"list","member":{}},"ports":{"type":"list","member":{"type":"integer"}},"number":{"type":"double"},"numbers":{"type":"list","member":{"type":"double"}},"strings":{"type":"list","member":{}}}},"S8o":{"type":"map","key":{},"value":{"type":"structure","required":["alertTargetArn","roleArn"],"members":{"alertTargetArn":{},"roleArn":{}}}},"S8s":{"type":"list","member":{}},"S8t":{"type":"list","member":{"type":"structure","required":["metric"],"members":{"metric":{},"metricDimension":{"shape":"S82"}}}},"S8z":{"type":"list","member":{"type":"structure","members":{"fileId":{"type":"integer"},"s3Location":{"shape":"S62"}}}},"S9b":{"type":"structure","members":{"thingTypeDescription":{},"searchableAttributes":{"type":"list","member":{}}}},"S9j":{"type":"structure","required":["sql","actions"],"members":{"sql":{},"description":{},"actions":{"shape":"S9m"},"ruleDisabled":{"type":"boolean"},"awsIotSqlVersion":{},"errorAction":{"shape":"S9n"}}},"S9m":{"type":"list","member":{"shape":"S9n"}},"S9n":{"type":"structure","members":{"dynamoDB":{"type":"structure","required":["tableName","roleArn","hashKeyField","hashKeyValue"],"members":{"tableName":{},"roleArn":{},"operation":{},"hashKeyField":{},"hashKeyValue":{},"hashKeyType":{},"rangeKeyField":{},"rangeKeyValue":{},"rangeKeyType":{},"payloadField":{}}},"dynamoDBv2":{"type":"structure","required":["roleArn","putItem"],"members":{"roleArn":{},"putItem":{"type":"structure","required":["tableName"],"members":{"tableName":{}}}}},"lambda":{"type":"structure","required":["functionArn"],"members":{"functionArn":{}}},"sns":{"type":"structure","required":["targetArn","roleArn"],"members":{"targetArn":{},"roleArn":{},"messageFormat":{}}},"sqs":{"type":"structure","required":["roleArn","queueUrl"],"members":{"roleArn":{},"queueUrl":{},"useBase64":{"type":"boolean"}}},"kinesis":{"type":"structure","required":["roleArn","streamName"],"members":{"roleArn":{},"streamName":{},"partitionKey":{}}},"republish":{"type":"structure","required":["roleArn","topic"],"members":{"roleArn":{},"topic":{},"qos":{"type":"integer"}}},"s3":{"type":"structure","required":["roleArn","bucketName","key"],"members":{"roleArn":{},"bucketName":{},"key":{},"cannedAcl":{}}},"firehose":{"type":"structure","required":["roleArn","deliveryStreamName"],"members":{"roleArn":{},"deliveryStreamName":{},"separator":{},"batchMode":{"type":"boolean"}}},"cloudwatchMetric":{"type":"structure","required":["roleArn","metricNamespace","metricName","metricValue","metricUnit"],"members":{"roleArn":{},"metricNamespace":{},"metricName":{},"metricValue":{},"metricUnit":{},"metricTimestamp":{}}},"cloudwatchAlarm":{"type":"structure","required":["roleArn","alarmName","stateReason","stateValue"],"members":{"roleArn":{},"alarmName":{},"stateReason":{},"stateValue":{}}},"cloudwatchLogs":{"type":"structure","required":["roleArn","logGroupName"],"members":{"roleArn":{},"logGroupName":{}}},"elasticsearch":{"type":"structure","required":["roleArn","endpoint","index","type","id"],"members":{"roleArn":{},"endpoint":{},"index":{},"type":{},"id":{}}},"salesforce":{"type":"structure","required":["token","url"],"members":{"token":{},"url":{}}},"iotAnalytics":{"type":"structure","members":{"channelArn":{},"channelName":{},"batchMode":{"type":"boolean"},"roleArn":{}}},"iotEvents":{"type":"structure","required":["inputName","roleArn"],"members":{"inputName":{},"messageId":{},"batchMode":{"type":"boolean"},"roleArn":{}}},"iotSiteWise":{"type":"structure","required":["putAssetPropertyValueEntries","roleArn"],"members":{"putAssetPropertyValueEntries":{"type":"list","member":{"type":"structure","required":["propertyValues"],"members":{"entryId":{},"assetId":{},"propertyId":{},"propertyAlias":{},"propertyValues":{"type":"list","member":{"type":"structure","required":["value","timestamp"],"members":{"value":{"type":"structure","members":{"stringValue":{},"integerValue":{},"doubleValue":{},"booleanValue":{}}},"timestamp":{"type":"structure","required":["timeInSeconds"],"members":{"timeInSeconds":{},"offsetInNanos":{}}},"quality":{}}}}}}},"roleArn":{}}},"stepFunctions":{"type":"structure","required":["stateMachineName","roleArn"],"members":{"executionNamePrefix":{},"stateMachineName":{},"roleArn":{}}},"timestream":{"type":"structure","required":["roleArn","databaseName","tableName","dimensions"],"members":{"roleArn":{},"databaseName":{},"tableName":{},"dimensions":{"type":"list","member":{"type":"structure","required":["name","value"],"members":{"name":{},"value":{}}}},"timestamp":{"type":"structure","required":["value","unit"],"members":{"value":{},"unit":{}}}}},"http":{"type":"structure","required":["url"],"members":{"url":{},"confirmationUrl":{},"headers":{"type":"list","member":{"type":"structure","required":["key","value"],"members":{"key":{},"value":{}}}},"auth":{"type":"structure","members":{"sigv4":{"type":"structure","required":["signingRegion","serviceName","roleArn"],"members":{"signingRegion":{},"serviceName":{},"roleArn":{}}}}}}},"kafka":{"type":"structure","required":["destinationArn","topic","clientProperties"],"members":{"destinationArn":{},"topic":{},"key":{},"partition":{},"clientProperties":{"type":"map","key":{},"value":{}}}}}},"Scj":{"type":"list","member":{}},"Scl":{"type":"list","member":{}},"Scp":{"type":"structure","members":{"arn":{},"status":{},"createdAt":{"type":"timestamp"},"lastUpdatedAt":{"type":"timestamp"},"statusReason":{},"httpUrlProperties":{"type":"structure","members":{"confirmationUrl":{}}},"vpcProperties":{"type":"structure","members":{"subnetIds":{"shape":"Scj"},"securityGroups":{"shape":"Scl"},"vpcId":{},"roleArn":{}}}}},"Seo":{"type":"map","key":{},"value":{"type":"structure","members":{"targetArn":{},"roleArn":{},"enabled":{"type":"boolean"}}}},"Ser":{"type":"map","key":{},"value":{"type":"structure","members":{"enabled":{"type":"boolean"}}}},"Sew":{"type":"structure","members":{"findingId":{},"taskId":{},"checkName":{},"taskStartTime":{"type":"timestamp"},"findingTime":{"type":"timestamp"},"severity":{},"nonCompliantResource":{"type":"structure","members":{"resourceType":{},"resourceIdentifier":{"shape":"S1o"},"additionalInfo":{"shape":"Sf0"}}},"relatedResources":{"type":"list","member":{"type":"structure","members":{"resourceType":{},"resourceIdentifier":{"shape":"S1o"},"additionalInfo":{"shape":"Sf0"}}}},"reasonForNonCompliance":{},"reasonForNonComplianceCode":{},"isSuppressed":{"type":"boolean"}}},"Sf0":{"type":"map","key":{},"value":{}},"Sfg":{"type":"structure","members":{"auditTaskId":{},"findingIds":{"type":"list","member":{}},"auditCheckToReasonCodeFilter":{"type":"map","key":{},"value":{"type":"list","member":{}}}}},"Sfk":{"type":"map","key":{},"value":{"type":"list","member":{}}},"Sfm":{"type":"list","member":{"type":"structure","members":{"name":{},"id":{},"roleArn":{},"actionParams":{"shape":"S4o"}}}},"Sgd":{"type":"structure","members":{"authorizerName":{},"authorizerArn":{},"authorizerFunctionArn":{},"tokenKeyName":{},"tokenSigningPublicKeys":{"shape":"S25"},"status":{},"creationDate":{"type":"timestamp"},"lastModifiedDate":{"type":"timestamp"},"signingDisabled":{"type":"boolean"}}},"Sgq":{"type":"structure","members":{"notBefore":{"type":"timestamp"},"notAfter":{"type":"timestamp"}}},"Sgr":{"type":"structure","members":{"templateBody":{},"roleArn":{}}},"Sh5":{"type":"structure","members":{"taskId":{},"taskStatus":{},"taskStartTime":{"type":"timestamp"},"taskEndTime":{"type":"timestamp"},"target":{"shape":"Sh7"},"violationEventOccurrenceRange":{"shape":"Sha"},"onlyActiveViolationsIncluded":{"type":"boolean"},"suppressedAlertsIncluded":{"type":"boolean"},"actionsDefinition":{"shape":"Sfm"},"taskStatistics":{"type":"structure","members":{"actionsExecuted":{"type":"long"},"actionsSkipped":{"type":"long"},"actionsFailed":{"type":"long"}}}}},"Sh7":{"type":"structure","members":{"violationIds":{"type":"list","member":{}},"securityProfileName":{},"behaviorName":{}}},"Sha":{"type":"structure","required":["startTime","endTime"],"members":{"startTime":{"type":"timestamp"},"endTime":{"type":"timestamp"}}},"Shv":{"type":"map","key":{},"value":{"type":"structure","members":{"Enabled":{"type":"boolean"}}}},"Sje":{"type":"list","member":{"shape":"Sjf"}},"Sjf":{"type":"structure","members":{"groupName":{},"groupArn":{}}},"Sjr":{"type":"structure","members":{"deprecated":{"type":"boolean"},"deprecationDate":{"type":"timestamp"},"creationDate":{"type":"timestamp"}}},"Skj":{"type":"structure","required":["thingIndexingMode"],"members":{"thingIndexingMode":{},"thingConnectivityIndexingMode":{},"managedFields":{"shape":"Skm"},"customFields":{"shape":"Skm"}}},"Skm":{"type":"list","member":{"type":"structure","members":{"name":{},"type":{}}}},"Skq":{"type":"structure","required":["thingGroupIndexingMode"],"members":{"thingGroupIndexingMode":{},"managedFields":{"shape":"Skm"},"customFields":{"shape":"Skm"}}},"Sm7":{"type":"structure","members":{"confidenceLevel":{}}},"Smd":{"type":"list","member":{"type":"structure","members":{"policyName":{},"policyArn":{}}}},"Snf":{"type":"list","member":{"type":"structure","members":{"certificateArn":{},"certificateId":{},"status":{},"certificateMode":{},"creationDate":{"type":"timestamp"}}}},"Sob":{"type":"structure","members":{"status":{},"queuedAt":{"type":"timestamp"},"startedAt":{"type":"timestamp"},"lastUpdatedAt":{"type":"timestamp"},"executionNumber":{"type":"long"}}},"Sp4":{"type":"list","member":{}},"Spe":{"type":"list","member":{}},"Spx":{"type":"structure","required":["name","arn"],"members":{"name":{},"arn":{}}},"Sq2":{"type":"structure","required":["arn"],"members":{"arn":{}}},"Srq":{"type":"structure","required":["targetType"],"members":{"targetType":{},"targetName":{}}},"Ssk":{"type":"list","member":{}},"Std":{"type":"structure","required":["resources"],"members":{"actionType":{},"resources":{"type":"list","member":{}}}},"Sth":{"type":"list","member":{}},"Svr":{"type":"list","member":{}}}}

/***/ }),
/* 261 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"GetBehaviorModelTrainingSummaries":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"summaries"},"ListActiveViolations":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"activeViolations"},"ListAttachedPolicies":{"input_token":"marker","limit_key":"pageSize","output_token":"nextMarker","result_key":"policies"},"ListAuditFindings":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"findings"},"ListAuditMitigationActionsExecutions":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"actionsExecutions"},"ListAuditMitigationActionsTasks":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"tasks"},"ListAuditSuppressions":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"suppressions"},"ListAuditTasks":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"tasks"},"ListAuthorizers":{"input_token":"marker","limit_key":"pageSize","output_token":"nextMarker","result_key":"authorizers"},"ListBillingGroups":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"billingGroups"},"ListCACertificates":{"input_token":"marker","limit_key":"pageSize","output_token":"nextMarker","result_key":"certificates"},"ListCertificates":{"input_token":"marker","limit_key":"pageSize","output_token":"nextMarker","result_key":"certificates"},"ListCertificatesByCA":{"input_token":"marker","limit_key":"pageSize","output_token":"nextMarker","result_key":"certificates"},"ListCustomMetrics":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"metricNames"},"ListDetectMitigationActionsExecutions":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"actionsExecutions"},"ListDetectMitigationActionsTasks":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"tasks"},"ListDimensions":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"dimensionNames"},"ListDomainConfigurations":{"input_token":"marker","limit_key":"pageSize","output_token":"nextMarker","result_key":"domainConfigurations"},"ListIndices":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"indexNames"},"ListJobExecutionsForJob":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"executionSummaries"},"ListJobExecutionsForThing":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"executionSummaries"},"ListJobs":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"jobs"},"ListMitigationActions":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"actionIdentifiers"},"ListOTAUpdates":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"otaUpdates"},"ListOutgoingCertificates":{"input_token":"marker","limit_key":"pageSize","output_token":"nextMarker","result_key":"outgoingCertificates"},"ListPolicies":{"input_token":"marker","limit_key":"pageSize","output_token":"nextMarker","result_key":"policies"},"ListPolicyPrincipals":{"input_token":"marker","limit_key":"pageSize","output_token":"nextMarker","result_key":"principals"},"ListPrincipalPolicies":{"input_token":"marker","limit_key":"pageSize","output_token":"nextMarker","result_key":"policies"},"ListPrincipalThings":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"things"},"ListProvisioningTemplateVersions":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"versions"},"ListProvisioningTemplates":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"templates"},"ListRoleAliases":{"input_token":"marker","limit_key":"pageSize","output_token":"nextMarker","result_key":"roleAliases"},"ListScheduledAudits":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"scheduledAudits"},"ListSecurityProfiles":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"securityProfileIdentifiers"},"ListSecurityProfilesForTarget":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"securityProfileTargetMappings"},"ListStreams":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"streams"},"ListTagsForResource":{"input_token":"nextToken","output_token":"nextToken","result_key":"tags"},"ListTargetsForPolicy":{"input_token":"marker","limit_key":"pageSize","output_token":"nextMarker","result_key":"targets"},"ListTargetsForSecurityProfile":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"securityProfileTargets"},"ListThingGroups":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"thingGroups"},"ListThingGroupsForThing":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"thingGroups"},"ListThingPrincipals":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"principals"},"ListThingRegistrationTaskReports":{"input_token":"nextToken","limit_key":"maxResults","non_aggregate_keys":["reportType"],"output_token":"nextToken","result_key":"resourceLinks"},"ListThingRegistrationTasks":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"taskIds"},"ListThingTypes":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"thingTypes"},"ListThings":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"things"},"ListThingsInBillingGroup":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"things"},"ListThingsInThingGroup":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"things"},"ListTopicRuleDestinations":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"destinationSummaries"},"ListTopicRules":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"rules"},"ListV2LoggingLevels":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"logTargetConfigurations"},"ListViolationEvents":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"violationEvents"}}}

/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['iotdata'] = {};
	AWS.IotData = Service.defineService('iotdata', ['2015-05-28']);
	__webpack_require__(263);
	Object.defineProperty(apiLoader.services['iotdata'], '2015-05-28', {
	  get: function get() {
	    var model = __webpack_require__(264);
	    model.paginators = __webpack_require__(265).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.IotData;


/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(4);

	/**
	 * @api private
	 */
	var blobPayloadOutputOps = [
	  'deleteThingShadow',
	  'getThingShadow',
	  'updateThingShadow'
	];

	/**
	 * Constructs a service interface object. Each API operation is exposed as a
	 * function on service.
	 *
	 * ### Sending a Request Using IotData
	 *
	 * ```javascript
	 * var iotdata = new AWS.IotData({endpoint: 'my.host.tld'});
	 * iotdata.getThingShadow(params, function (err, data) {
	 *   if (err) console.log(err, err.stack); // an error occurred
	 *   else     console.log(data);           // successful response
	 * });
	 * ```
	 *
	 * ### Locking the API Version
	 *
	 * In order to ensure that the IotData object uses this specific API,
	 * you can construct the object by passing the `apiVersion` option to the
	 * constructor:
	 *
	 * ```javascript
	 * var iotdata = new AWS.IotData({
	 *   endpoint: 'my.host.tld',
	 *   apiVersion: '2015-05-28'
	 * });
	 * ```
	 *
	 * You can also set the API version globally in `AWS.config.apiVersions` using
	 * the **iotdata** service identifier:
	 *
	 * ```javascript
	 * AWS.config.apiVersions = {
	 *   iotdata: '2015-05-28',
	 *   // other service API versions
	 * };
	 *
	 * var iotdata = new AWS.IotData({endpoint: 'my.host.tld'});
	 * ```
	 *
	 * @note You *must* provide an `endpoint` configuration parameter when
	 *   constructing this service. See {constructor} for more information.
	 *
	 * @!method constructor(options = {})
	 *   Constructs a service object. This object has one method for each
	 *   API operation.
	 *
	 *   @example Constructing a IotData object
	 *     var iotdata = new AWS.IotData({endpoint: 'my.host.tld'});
	 *   @note You *must* provide an `endpoint` when constructing this service.
	 *   @option (see AWS.Config.constructor)
	 *
	 * @service iotdata
	 * @version 2015-05-28
	 */
	AWS.util.update(AWS.IotData.prototype, {
	    /**
	     * @api private
	     */
	    validateService: function validateService() {
	        if (!this.config.endpoint || this.config.endpoint.indexOf('{') >= 0) {
	            var msg = 'AWS.IotData requires an explicit ' +
	                '`endpoint\' configuration option.';
	            throw AWS.util.error(new Error(),
	                {name: 'InvalidEndpoint', message: msg});
	        }
	    },

	    /**
	     * @api private
	     */
	    setupRequestListeners: function setupRequestListeners(request) {
	        request.addListener('validateResponse', this.validateResponseBody);
	        if (blobPayloadOutputOps.indexOf(request.operation) > -1) {
	            request.addListener('extractData', AWS.util.convertPayloadToString);
	        }
	    },

	    /**
	     * @api private
	     */
	    validateResponseBody: function validateResponseBody(resp) {
	        var body = resp.httpResponse.body.toString() || '{}';
	        var bodyCheck = body.trim();
	        if (!bodyCheck || bodyCheck.charAt(0) !== '{') {
	            resp.httpResponse.body = '';
	        }
	    }

	});


/***/ }),
/* 264 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-05-28","endpointPrefix":"data.iot","protocol":"rest-json","serviceFullName":"AWS IoT Data Plane","serviceId":"IoT Data Plane","signatureVersion":"v4","signingName":"iotdata","uid":"iot-data-2015-05-28"},"operations":{"DeleteThingShadow":{"http":{"method":"DELETE","requestUri":"/things/{thingName}/shadow"},"input":{"type":"structure","required":["thingName"],"members":{"thingName":{"location":"uri","locationName":"thingName"},"shadowName":{"location":"querystring","locationName":"name"}}},"output":{"type":"structure","required":["payload"],"members":{"payload":{"type":"blob"}},"payload":"payload"}},"GetThingShadow":{"http":{"method":"GET","requestUri":"/things/{thingName}/shadow"},"input":{"type":"structure","required":["thingName"],"members":{"thingName":{"location":"uri","locationName":"thingName"},"shadowName":{"location":"querystring","locationName":"name"}}},"output":{"type":"structure","members":{"payload":{"type":"blob"}},"payload":"payload"}},"ListNamedShadowsForThing":{"http":{"method":"GET","requestUri":"/api/things/shadow/ListNamedShadowsForThing/{thingName}"},"input":{"type":"structure","required":["thingName"],"members":{"thingName":{"location":"uri","locationName":"thingName"},"nextToken":{"location":"querystring","locationName":"nextToken"},"pageSize":{"location":"querystring","locationName":"pageSize","type":"integer"}}},"output":{"type":"structure","members":{"results":{"type":"list","member":{}},"nextToken":{},"timestamp":{"type":"long"}}}},"Publish":{"http":{"requestUri":"/topics/{topic}"},"input":{"type":"structure","required":["topic"],"members":{"topic":{"location":"uri","locationName":"topic"},"qos":{"location":"querystring","locationName":"qos","type":"integer"},"payload":{"type":"blob"}},"payload":"payload"}},"UpdateThingShadow":{"http":{"requestUri":"/things/{thingName}/shadow"},"input":{"type":"structure","required":["thingName","payload"],"members":{"thingName":{"location":"uri","locationName":"thingName"},"shadowName":{"location":"querystring","locationName":"name"},"payload":{"type":"blob"}},"payload":"payload"},"output":{"type":"structure","members":{"payload":{"type":"blob"}},"payload":"payload"}}},"shapes":{}}

/***/ }),
/* 265 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{}}

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['kinesis'] = {};
	AWS.Kinesis = Service.defineService('kinesis', ['2013-12-02']);
	Object.defineProperty(apiLoader.services['kinesis'], '2013-12-02', {
	  get: function get() {
	    var model = __webpack_require__(267);
	    model.paginators = __webpack_require__(268).pagination;
	    model.waiters = __webpack_require__(269).waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.Kinesis;


/***/ }),
/* 267 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2013-12-02","endpointPrefix":"kinesis","jsonVersion":"1.1","protocol":"json","protocolSettings":{"h2":"eventstream"},"serviceAbbreviation":"Kinesis","serviceFullName":"Amazon Kinesis","serviceId":"Kinesis","signatureVersion":"v4","targetPrefix":"Kinesis_20131202","uid":"kinesis-2013-12-02"},"operations":{"AddTagsToStream":{"input":{"type":"structure","required":["StreamName","Tags"],"members":{"StreamName":{},"Tags":{"type":"map","key":{},"value":{}}}}},"CreateStream":{"input":{"type":"structure","required":["StreamName","ShardCount"],"members":{"StreamName":{},"ShardCount":{"type":"integer"}}}},"DecreaseStreamRetentionPeriod":{"input":{"type":"structure","required":["StreamName","RetentionPeriodHours"],"members":{"StreamName":{},"RetentionPeriodHours":{"type":"integer"}}}},"DeleteStream":{"input":{"type":"structure","required":["StreamName"],"members":{"StreamName":{},"EnforceConsumerDeletion":{"type":"boolean"}}}},"DeregisterStreamConsumer":{"input":{"type":"structure","members":{"StreamARN":{},"ConsumerName":{},"ConsumerARN":{}}}},"DescribeLimits":{"input":{"type":"structure","members":{}},"output":{"type":"structure","required":["ShardLimit","OpenShardCount"],"members":{"ShardLimit":{"type":"integer"},"OpenShardCount":{"type":"integer"}}}},"DescribeStream":{"input":{"type":"structure","required":["StreamName"],"members":{"StreamName":{},"Limit":{"type":"integer"},"ExclusiveStartShardId":{}}},"output":{"type":"structure","required":["StreamDescription"],"members":{"StreamDescription":{"type":"structure","required":["StreamName","StreamARN","StreamStatus","Shards","HasMoreShards","RetentionPeriodHours","StreamCreationTimestamp","EnhancedMonitoring"],"members":{"StreamName":{},"StreamARN":{},"StreamStatus":{},"Shards":{"shape":"Sp"},"HasMoreShards":{"type":"boolean"},"RetentionPeriodHours":{"type":"integer"},"StreamCreationTimestamp":{"type":"timestamp"},"EnhancedMonitoring":{"shape":"Sw"},"EncryptionType":{},"KeyId":{}}}}}},"DescribeStreamConsumer":{"input":{"type":"structure","members":{"StreamARN":{},"ConsumerName":{},"ConsumerARN":{}}},"output":{"type":"structure","required":["ConsumerDescription"],"members":{"ConsumerDescription":{"type":"structure","required":["ConsumerName","ConsumerARN","ConsumerStatus","ConsumerCreationTimestamp","StreamARN"],"members":{"ConsumerName":{},"ConsumerARN":{},"ConsumerStatus":{},"ConsumerCreationTimestamp":{"type":"timestamp"},"StreamARN":{}}}}}},"DescribeStreamSummary":{"input":{"type":"structure","required":["StreamName"],"members":{"StreamName":{}}},"output":{"type":"structure","required":["StreamDescriptionSummary"],"members":{"StreamDescriptionSummary":{"type":"structure","required":["StreamName","StreamARN","StreamStatus","RetentionPeriodHours","StreamCreationTimestamp","EnhancedMonitoring","OpenShardCount"],"members":{"StreamName":{},"StreamARN":{},"StreamStatus":{},"RetentionPeriodHours":{"type":"integer"},"StreamCreationTimestamp":{"type":"timestamp"},"EnhancedMonitoring":{"shape":"Sw"},"EncryptionType":{},"KeyId":{},"OpenShardCount":{"type":"integer"},"ConsumerCount":{"type":"integer"}}}}}},"DisableEnhancedMonitoring":{"input":{"type":"structure","required":["StreamName","ShardLevelMetrics"],"members":{"StreamName":{},"ShardLevelMetrics":{"shape":"Sy"}}},"output":{"shape":"S1b"}},"EnableEnhancedMonitoring":{"input":{"type":"structure","required":["StreamName","ShardLevelMetrics"],"members":{"StreamName":{},"ShardLevelMetrics":{"shape":"Sy"}}},"output":{"shape":"S1b"}},"GetRecords":{"input":{"type":"structure","required":["ShardIterator"],"members":{"ShardIterator":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","required":["Records"],"members":{"Records":{"type":"list","member":{"type":"structure","required":["SequenceNumber","Data","PartitionKey"],"members":{"SequenceNumber":{},"ApproximateArrivalTimestamp":{"type":"timestamp"},"Data":{"type":"blob"},"PartitionKey":{},"EncryptionType":{}}}},"NextShardIterator":{},"MillisBehindLatest":{"type":"long"},"ChildShards":{"type":"list","member":{"type":"structure","required":["ShardId","ParentShards","HashKeyRange"],"members":{"ShardId":{},"ParentShards":{"type":"list","member":{}},"HashKeyRange":{"shape":"Sr"}}}}}}},"GetShardIterator":{"input":{"type":"structure","required":["StreamName","ShardId","ShardIteratorType"],"members":{"StreamName":{},"ShardId":{},"ShardIteratorType":{},"StartingSequenceNumber":{},"Timestamp":{"type":"timestamp"}}},"output":{"type":"structure","members":{"ShardIterator":{}}}},"IncreaseStreamRetentionPeriod":{"input":{"type":"structure","required":["StreamName","RetentionPeriodHours"],"members":{"StreamName":{},"RetentionPeriodHours":{"type":"integer"}}}},"ListShards":{"input":{"type":"structure","members":{"StreamName":{},"NextToken":{},"ExclusiveStartShardId":{},"MaxResults":{"type":"integer"},"StreamCreationTimestamp":{"type":"timestamp"},"ShardFilter":{"type":"structure","required":["Type"],"members":{"Type":{},"ShardId":{},"Timestamp":{"type":"timestamp"}}}}},"output":{"type":"structure","members":{"Shards":{"shape":"Sp"},"NextToken":{}}}},"ListStreamConsumers":{"input":{"type":"structure","required":["StreamARN"],"members":{"StreamARN":{},"NextToken":{},"MaxResults":{"type":"integer"},"StreamCreationTimestamp":{"type":"timestamp"}}},"output":{"type":"structure","members":{"Consumers":{"type":"list","member":{"shape":"S23"}},"NextToken":{}}}},"ListStreams":{"input":{"type":"structure","members":{"Limit":{"type":"integer"},"ExclusiveStartStreamName":{}}},"output":{"type":"structure","required":["StreamNames","HasMoreStreams"],"members":{"StreamNames":{"type":"list","member":{}},"HasMoreStreams":{"type":"boolean"}}}},"ListTagsForStream":{"input":{"type":"structure","required":["StreamName"],"members":{"StreamName":{},"ExclusiveStartTagKey":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","required":["Tags","HasMoreTags"],"members":{"Tags":{"type":"list","member":{"type":"structure","required":["Key"],"members":{"Key":{},"Value":{}}}},"HasMoreTags":{"type":"boolean"}}}},"MergeShards":{"input":{"type":"structure","required":["StreamName","ShardToMerge","AdjacentShardToMerge"],"members":{"StreamName":{},"ShardToMerge":{},"AdjacentShardToMerge":{}}}},"PutRecord":{"input":{"type":"structure","required":["StreamName","Data","PartitionKey"],"members":{"StreamName":{},"Data":{"type":"blob"},"PartitionKey":{},"ExplicitHashKey":{},"SequenceNumberForOrdering":{}}},"output":{"type":"structure","required":["ShardId","SequenceNumber"],"members":{"ShardId":{},"SequenceNumber":{},"EncryptionType":{}}}},"PutRecords":{"input":{"type":"structure","required":["Records","StreamName"],"members":{"Records":{"type":"list","member":{"type":"structure","required":["Data","PartitionKey"],"members":{"Data":{"type":"blob"},"ExplicitHashKey":{},"PartitionKey":{}}}},"StreamName":{}}},"output":{"type":"structure","required":["Records"],"members":{"FailedRecordCount":{"type":"integer"},"Records":{"type":"list","member":{"type":"structure","members":{"SequenceNumber":{},"ShardId":{},"ErrorCode":{},"ErrorMessage":{}}}},"EncryptionType":{}}}},"RegisterStreamConsumer":{"input":{"type":"structure","required":["StreamARN","ConsumerName"],"members":{"StreamARN":{},"ConsumerName":{}}},"output":{"type":"structure","required":["Consumer"],"members":{"Consumer":{"shape":"S23"}}}},"RemoveTagsFromStream":{"input":{"type":"structure","required":["StreamName","TagKeys"],"members":{"StreamName":{},"TagKeys":{"type":"list","member":{}}}}},"SplitShard":{"input":{"type":"structure","required":["StreamName","ShardToSplit","NewStartingHashKey"],"members":{"StreamName":{},"ShardToSplit":{},"NewStartingHashKey":{}}}},"StartStreamEncryption":{"input":{"type":"structure","required":["StreamName","EncryptionType","KeyId"],"members":{"StreamName":{},"EncryptionType":{},"KeyId":{}}}},"StopStreamEncryption":{"input":{"type":"structure","required":["StreamName","EncryptionType","KeyId"],"members":{"StreamName":{},"EncryptionType":{},"KeyId":{}}}},"UpdateShardCount":{"input":{"type":"structure","required":["StreamName","TargetShardCount","ScalingType"],"members":{"StreamName":{},"TargetShardCount":{"type":"integer"},"ScalingType":{}}},"output":{"type":"structure","members":{"StreamName":{},"CurrentShardCount":{"type":"integer"},"TargetShardCount":{"type":"integer"}}}}},"shapes":{"Sp":{"type":"list","member":{"type":"structure","required":["ShardId","HashKeyRange","SequenceNumberRange"],"members":{"ShardId":{},"ParentShardId":{},"AdjacentParentShardId":{},"HashKeyRange":{"shape":"Sr"},"SequenceNumberRange":{"type":"structure","required":["StartingSequenceNumber"],"members":{"StartingSequenceNumber":{},"EndingSequenceNumber":{}}}}}},"Sr":{"type":"structure","required":["StartingHashKey","EndingHashKey"],"members":{"StartingHashKey":{},"EndingHashKey":{}}},"Sw":{"type":"list","member":{"type":"structure","members":{"ShardLevelMetrics":{"shape":"Sy"}}}},"Sy":{"type":"list","member":{}},"S1b":{"type":"structure","members":{"StreamName":{},"CurrentShardLevelMetrics":{"shape":"Sy"},"DesiredShardLevelMetrics":{"shape":"Sy"}}},"S23":{"type":"structure","required":["ConsumerName","ConsumerARN","ConsumerStatus","ConsumerCreationTimestamp"],"members":{"ConsumerName":{},"ConsumerARN":{},"ConsumerStatus":{},"ConsumerCreationTimestamp":{"type":"timestamp"}}}}}

/***/ }),
/* 268 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeStream":{"input_token":"ExclusiveStartShardId","limit_key":"Limit","more_results":"StreamDescription.HasMoreShards","output_token":"StreamDescription.Shards[-1].ShardId","result_key":"StreamDescription.Shards"},"ListStreamConsumers":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken"},"ListStreams":{"input_token":"ExclusiveStartStreamName","limit_key":"Limit","more_results":"HasMoreStreams","output_token":"StreamNames[-1]","result_key":"StreamNames"}}}

/***/ }),
/* 269 */
/***/ (function(module, exports) {

	module.exports = {"version":2,"waiters":{"StreamExists":{"delay":10,"operation":"DescribeStream","maxAttempts":18,"acceptors":[{"expected":"ACTIVE","matcher":"path","state":"success","argument":"StreamDescription.StreamStatus"}]},"StreamNotExists":{"delay":10,"operation":"DescribeStream","maxAttempts":18,"acceptors":[{"expected":"ResourceNotFoundException","matcher":"error","state":"success"}]}}}

/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['kinesisanalytics'] = {};
	AWS.KinesisAnalytics = Service.defineService('kinesisanalytics', ['2015-08-14']);
	Object.defineProperty(apiLoader.services['kinesisanalytics'], '2015-08-14', {
	  get: function get() {
	    var model = __webpack_require__(271);
	    model.paginators = __webpack_require__(272).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.KinesisAnalytics;


/***/ }),
/* 271 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-08-14","endpointPrefix":"kinesisanalytics","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"Kinesis Analytics","serviceFullName":"Amazon Kinesis Analytics","serviceId":"Kinesis Analytics","signatureVersion":"v4","targetPrefix":"KinesisAnalytics_20150814","uid":"kinesisanalytics-2015-08-14"},"operations":{"AddApplicationCloudWatchLoggingOption":{"input":{"type":"structure","required":["ApplicationName","CurrentApplicationVersionId","CloudWatchLoggingOption"],"members":{"ApplicationName":{},"CurrentApplicationVersionId":{"type":"long"},"CloudWatchLoggingOption":{"shape":"S4"}}},"output":{"type":"structure","members":{}}},"AddApplicationInput":{"input":{"type":"structure","required":["ApplicationName","CurrentApplicationVersionId","Input"],"members":{"ApplicationName":{},"CurrentApplicationVersionId":{"type":"long"},"Input":{"shape":"S9"}}},"output":{"type":"structure","members":{}}},"AddApplicationInputProcessingConfiguration":{"input":{"type":"structure","required":["ApplicationName","CurrentApplicationVersionId","InputId","InputProcessingConfiguration"],"members":{"ApplicationName":{},"CurrentApplicationVersionId":{"type":"long"},"InputId":{},"InputProcessingConfiguration":{"shape":"Sb"}}},"output":{"type":"structure","members":{}}},"AddApplicationOutput":{"input":{"type":"structure","required":["ApplicationName","CurrentApplicationVersionId","Output"],"members":{"ApplicationName":{},"CurrentApplicationVersionId":{"type":"long"},"Output":{"shape":"S12"}}},"output":{"type":"structure","members":{}}},"AddApplicationReferenceDataSource":{"input":{"type":"structure","required":["ApplicationName","CurrentApplicationVersionId","ReferenceDataSource"],"members":{"ApplicationName":{},"CurrentApplicationVersionId":{"type":"long"},"ReferenceDataSource":{"type":"structure","required":["TableName","ReferenceSchema"],"members":{"TableName":{},"S3ReferenceDataSource":{"type":"structure","required":["BucketARN","FileKey","ReferenceRoleARN"],"members":{"BucketARN":{},"FileKey":{},"ReferenceRoleARN":{}}},"ReferenceSchema":{"shape":"Si"}}}}},"output":{"type":"structure","members":{}}},"CreateApplication":{"input":{"type":"structure","required":["ApplicationName"],"members":{"ApplicationName":{},"ApplicationDescription":{},"Inputs":{"type":"list","member":{"shape":"S9"}},"Outputs":{"type":"list","member":{"shape":"S12"}},"CloudWatchLoggingOptions":{"type":"list","member":{"shape":"S4"}},"ApplicationCode":{},"Tags":{"shape":"S1l"}}},"output":{"type":"structure","required":["ApplicationSummary"],"members":{"ApplicationSummary":{"shape":"S1q"}}}},"DeleteApplication":{"input":{"type":"structure","required":["ApplicationName","CreateTimestamp"],"members":{"ApplicationName":{},"CreateTimestamp":{"type":"timestamp"}}},"output":{"type":"structure","members":{}}},"DeleteApplicationCloudWatchLoggingOption":{"input":{"type":"structure","required":["ApplicationName","CurrentApplicationVersionId","CloudWatchLoggingOptionId"],"members":{"ApplicationName":{},"CurrentApplicationVersionId":{"type":"long"},"CloudWatchLoggingOptionId":{}}},"output":{"type":"structure","members":{}}},"DeleteApplicationInputProcessingConfiguration":{"input":{"type":"structure","required":["ApplicationName","CurrentApplicationVersionId","InputId"],"members":{"ApplicationName":{},"CurrentApplicationVersionId":{"type":"long"},"InputId":{}}},"output":{"type":"structure","members":{}}},"DeleteApplicationOutput":{"input":{"type":"structure","required":["ApplicationName","CurrentApplicationVersionId","OutputId"],"members":{"ApplicationName":{},"CurrentApplicationVersionId":{"type":"long"},"OutputId":{}}},"output":{"type":"structure","members":{}}},"DeleteApplicationReferenceDataSource":{"input":{"type":"structure","required":["ApplicationName","CurrentApplicationVersionId","ReferenceId"],"members":{"ApplicationName":{},"CurrentApplicationVersionId":{"type":"long"},"ReferenceId":{}}},"output":{"type":"structure","members":{}}},"DescribeApplication":{"input":{"type":"structure","required":["ApplicationName"],"members":{"ApplicationName":{}}},"output":{"type":"structure","required":["ApplicationDetail"],"members":{"ApplicationDetail":{"type":"structure","required":["ApplicationName","ApplicationARN","ApplicationStatus","ApplicationVersionId"],"members":{"ApplicationName":{},"ApplicationDescription":{},"ApplicationARN":{},"ApplicationStatus":{},"CreateTimestamp":{"type":"timestamp"},"LastUpdateTimestamp":{"type":"timestamp"},"InputDescriptions":{"type":"list","member":{"type":"structure","members":{"InputId":{},"NamePrefix":{},"InAppStreamNames":{"type":"list","member":{}},"InputProcessingConfigurationDescription":{"type":"structure","members":{"InputLambdaProcessorDescription":{"type":"structure","members":{"ResourceARN":{},"RoleARN":{}}}}},"KinesisStreamsInputDescription":{"type":"structure","members":{"ResourceARN":{},"RoleARN":{}}},"KinesisFirehoseInputDescription":{"type":"structure","members":{"ResourceARN":{},"RoleARN":{}}},"InputSchema":{"shape":"Si"},"InputParallelism":{"shape":"Sg"},"InputStartingPositionConfiguration":{"shape":"S2d"}}}},"OutputDescriptions":{"type":"list","member":{"type":"structure","members":{"OutputId":{},"Name":{},"KinesisStreamsOutputDescription":{"type":"structure","members":{"ResourceARN":{},"RoleARN":{}}},"KinesisFirehoseOutputDescription":{"type":"structure","members":{"ResourceARN":{},"RoleARN":{}}},"LambdaOutputDescription":{"type":"structure","members":{"ResourceARN":{},"RoleARN":{}}},"DestinationSchema":{"shape":"S16"}}}},"ReferenceDataSourceDescriptions":{"type":"list","member":{"type":"structure","required":["ReferenceId","TableName","S3ReferenceDataSourceDescription"],"members":{"ReferenceId":{},"TableName":{},"S3ReferenceDataSourceDescription":{"type":"structure","required":["BucketARN","FileKey","ReferenceRoleARN"],"members":{"BucketARN":{},"FileKey":{},"ReferenceRoleARN":{}}},"ReferenceSchema":{"shape":"Si"}}}},"CloudWatchLoggingOptionDescriptions":{"type":"list","member":{"type":"structure","required":["LogStreamARN","RoleARN"],"members":{"CloudWatchLoggingOptionId":{},"LogStreamARN":{},"RoleARN":{}}}},"ApplicationCode":{},"ApplicationVersionId":{"type":"long"}}}}}},"DiscoverInputSchema":{"input":{"type":"structure","members":{"ResourceARN":{},"RoleARN":{},"InputStartingPositionConfiguration":{"shape":"S2d"},"S3Configuration":{"type":"structure","required":["RoleARN","BucketARN","FileKey"],"members":{"RoleARN":{},"BucketARN":{},"FileKey":{}}},"InputProcessingConfiguration":{"shape":"Sb"}}},"output":{"type":"structure","members":{"InputSchema":{"shape":"Si"},"ParsedInputRecords":{"type":"list","member":{"type":"list","member":{}}},"ProcessedInputRecords":{"type":"list","member":{}},"RawInputRecords":{"type":"list","member":{}}}}},"ListApplications":{"input":{"type":"structure","members":{"Limit":{"type":"integer"},"ExclusiveStartApplicationName":{}}},"output":{"type":"structure","required":["ApplicationSummaries","HasMoreApplications"],"members":{"ApplicationSummaries":{"type":"list","member":{"shape":"S1q"}},"HasMoreApplications":{"type":"boolean"}}}},"ListTagsForResource":{"input":{"type":"structure","required":["ResourceARN"],"members":{"ResourceARN":{}}},"output":{"type":"structure","members":{"Tags":{"shape":"S1l"}}}},"StartApplication":{"input":{"type":"structure","required":["ApplicationName","InputConfigurations"],"members":{"ApplicationName":{},"InputConfigurations":{"type":"list","member":{"type":"structure","required":["Id","InputStartingPositionConfiguration"],"members":{"Id":{},"InputStartingPositionConfiguration":{"shape":"S2d"}}}}}},"output":{"type":"structure","members":{}}},"StopApplication":{"input":{"type":"structure","required":["ApplicationName"],"members":{"ApplicationName":{}}},"output":{"type":"structure","members":{}}},"TagResource":{"input":{"type":"structure","required":["ResourceARN","Tags"],"members":{"ResourceARN":{},"Tags":{"shape":"S1l"}}},"output":{"type":"structure","members":{}}},"UntagResource":{"input":{"type":"structure","required":["ResourceARN","TagKeys"],"members":{"ResourceARN":{},"TagKeys":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"UpdateApplication":{"input":{"type":"structure","required":["ApplicationName","CurrentApplicationVersionId","ApplicationUpdate"],"members":{"ApplicationName":{},"CurrentApplicationVersionId":{"type":"long"},"ApplicationUpdate":{"type":"structure","members":{"InputUpdates":{"type":"list","member":{"type":"structure","required":["InputId"],"members":{"InputId":{},"NamePrefixUpdate":{},"InputProcessingConfigurationUpdate":{"type":"structure","required":["InputLambdaProcessorUpdate"],"members":{"InputLambdaProcessorUpdate":{"type":"structure","members":{"ResourceARNUpdate":{},"RoleARNUpdate":{}}}}},"KinesisStreamsInputUpdate":{"type":"structure","members":{"ResourceARNUpdate":{},"RoleARNUpdate":{}}},"KinesisFirehoseInputUpdate":{"type":"structure","members":{"ResourceARNUpdate":{},"RoleARNUpdate":{}}},"InputSchemaUpdate":{"type":"structure","members":{"RecordFormatUpdate":{"shape":"Sj"},"RecordEncodingUpdate":{},"RecordColumnUpdates":{"shape":"Ss"}}},"InputParallelismUpdate":{"type":"structure","members":{"CountUpdate":{"type":"integer"}}}}}},"ApplicationCodeUpdate":{},"OutputUpdates":{"type":"list","member":{"type":"structure","required":["OutputId"],"members":{"OutputId":{},"NameUpdate":{},"KinesisStreamsOutputUpdate":{"type":"structure","members":{"ResourceARNUpdate":{},"RoleARNUpdate":{}}},"KinesisFirehoseOutputUpdate":{"type":"structure","members":{"ResourceARNUpdate":{},"RoleARNUpdate":{}}},"LambdaOutputUpdate":{"type":"structure","members":{"ResourceARNUpdate":{},"RoleARNUpdate":{}}},"DestinationSchemaUpdate":{"shape":"S16"}}}},"ReferenceDataSourceUpdates":{"type":"list","member":{"type":"structure","required":["ReferenceId"],"members":{"ReferenceId":{},"TableNameUpdate":{},"S3ReferenceDataSourceUpdate":{"type":"structure","members":{"BucketARNUpdate":{},"FileKeyUpdate":{},"ReferenceRoleARNUpdate":{}}},"ReferenceSchemaUpdate":{"shape":"Si"}}}},"CloudWatchLoggingOptionUpdates":{"type":"list","member":{"type":"structure","required":["CloudWatchLoggingOptionId"],"members":{"CloudWatchLoggingOptionId":{},"LogStreamARNUpdate":{},"RoleARNUpdate":{}}}}}}}},"output":{"type":"structure","members":{}}}},"shapes":{"S4":{"type":"structure","required":["LogStreamARN","RoleARN"],"members":{"LogStreamARN":{},"RoleARN":{}}},"S9":{"type":"structure","required":["NamePrefix","InputSchema"],"members":{"NamePrefix":{},"InputProcessingConfiguration":{"shape":"Sb"},"KinesisStreamsInput":{"type":"structure","required":["ResourceARN","RoleARN"],"members":{"ResourceARN":{},"RoleARN":{}}},"KinesisFirehoseInput":{"type":"structure","required":["ResourceARN","RoleARN"],"members":{"ResourceARN":{},"RoleARN":{}}},"InputParallelism":{"shape":"Sg"},"InputSchema":{"shape":"Si"}}},"Sb":{"type":"structure","required":["InputLambdaProcessor"],"members":{"InputLambdaProcessor":{"type":"structure","required":["ResourceARN","RoleARN"],"members":{"ResourceARN":{},"RoleARN":{}}}}},"Sg":{"type":"structure","members":{"Count":{"type":"integer"}}},"Si":{"type":"structure","required":["RecordFormat","RecordColumns"],"members":{"RecordFormat":{"shape":"Sj"},"RecordEncoding":{},"RecordColumns":{"shape":"Ss"}}},"Sj":{"type":"structure","required":["RecordFormatType"],"members":{"RecordFormatType":{},"MappingParameters":{"type":"structure","members":{"JSONMappingParameters":{"type":"structure","required":["RecordRowPath"],"members":{"RecordRowPath":{}}},"CSVMappingParameters":{"type":"structure","required":["RecordRowDelimiter","RecordColumnDelimiter"],"members":{"RecordRowDelimiter":{},"RecordColumnDelimiter":{}}}}}}},"Ss":{"type":"list","member":{"type":"structure","required":["Name","SqlType"],"members":{"Name":{},"Mapping":{},"SqlType":{}}}},"S12":{"type":"structure","required":["Name","DestinationSchema"],"members":{"Name":{},"KinesisStreamsOutput":{"type":"structure","required":["ResourceARN","RoleARN"],"members":{"ResourceARN":{},"RoleARN":{}}},"KinesisFirehoseOutput":{"type":"structure","required":["ResourceARN","RoleARN"],"members":{"ResourceARN":{},"RoleARN":{}}},"LambdaOutput":{"type":"structure","required":["ResourceARN","RoleARN"],"members":{"ResourceARN":{},"RoleARN":{}}},"DestinationSchema":{"shape":"S16"}}},"S16":{"type":"structure","required":["RecordFormatType"],"members":{"RecordFormatType":{}}},"S1l":{"type":"list","member":{"type":"structure","required":["Key"],"members":{"Key":{},"Value":{}}}},"S1q":{"type":"structure","required":["ApplicationName","ApplicationARN","ApplicationStatus"],"members":{"ApplicationName":{},"ApplicationARN":{},"ApplicationStatus":{}}},"S2d":{"type":"structure","members":{"InputStartingPosition":{}}}}}

/***/ }),
/* 272 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{}}

/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['kms'] = {};
	AWS.KMS = Service.defineService('kms', ['2014-11-01']);
	Object.defineProperty(apiLoader.services['kms'], '2014-11-01', {
	  get: function get() {
	    var model = __webpack_require__(274);
	    model.paginators = __webpack_require__(275).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.KMS;


/***/ }),
/* 274 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2014-11-01","endpointPrefix":"kms","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"KMS","serviceFullName":"AWS Key Management Service","serviceId":"KMS","signatureVersion":"v4","targetPrefix":"TrentService","uid":"kms-2014-11-01"},"operations":{"CancelKeyDeletion":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{}}},"output":{"type":"structure","members":{"KeyId":{}}}},"ConnectCustomKeyStore":{"input":{"type":"structure","required":["CustomKeyStoreId"],"members":{"CustomKeyStoreId":{}}},"output":{"type":"structure","members":{}}},"CreateAlias":{"input":{"type":"structure","required":["AliasName","TargetKeyId"],"members":{"AliasName":{},"TargetKeyId":{}}}},"CreateCustomKeyStore":{"input":{"type":"structure","required":["CustomKeyStoreName","CloudHsmClusterId","TrustAnchorCertificate","KeyStorePassword"],"members":{"CustomKeyStoreName":{},"CloudHsmClusterId":{},"TrustAnchorCertificate":{},"KeyStorePassword":{"shape":"Sd"}}},"output":{"type":"structure","members":{"CustomKeyStoreId":{}}}},"CreateGrant":{"input":{"type":"structure","required":["KeyId","GranteePrincipal","Operations"],"members":{"KeyId":{},"GranteePrincipal":{},"RetiringPrincipal":{},"Operations":{"shape":"Sh"},"Constraints":{"shape":"Sj"},"GrantTokens":{"shape":"Sn"},"Name":{}}},"output":{"type":"structure","members":{"GrantToken":{},"GrantId":{}}}},"CreateKey":{"input":{"type":"structure","members":{"Policy":{},"Description":{},"KeyUsage":{},"CustomerMasterKeySpec":{},"Origin":{},"CustomKeyStoreId":{},"BypassPolicyLockoutSafetyCheck":{"type":"boolean"},"Tags":{"shape":"Sz"},"MultiRegion":{"type":"boolean"}}},"output":{"type":"structure","members":{"KeyMetadata":{"shape":"S15"}}}},"Decrypt":{"input":{"type":"structure","required":["CiphertextBlob"],"members":{"CiphertextBlob":{"type":"blob"},"EncryptionContext":{"shape":"Sk"},"GrantTokens":{"shape":"Sn"},"KeyId":{},"EncryptionAlgorithm":{}}},"output":{"type":"structure","members":{"KeyId":{},"Plaintext":{"shape":"S1p"},"EncryptionAlgorithm":{}}}},"DeleteAlias":{"input":{"type":"structure","required":["AliasName"],"members":{"AliasName":{}}}},"DeleteCustomKeyStore":{"input":{"type":"structure","required":["CustomKeyStoreId"],"members":{"CustomKeyStoreId":{}}},"output":{"type":"structure","members":{}}},"DeleteImportedKeyMaterial":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{}}}},"DescribeCustomKeyStores":{"input":{"type":"structure","members":{"CustomKeyStoreId":{},"CustomKeyStoreName":{},"Limit":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"CustomKeyStores":{"type":"list","member":{"type":"structure","members":{"CustomKeyStoreId":{},"CustomKeyStoreName":{},"CloudHsmClusterId":{},"TrustAnchorCertificate":{},"ConnectionState":{},"ConnectionErrorCode":{},"CreationDate":{"type":"timestamp"}}}},"NextMarker":{},"Truncated":{"type":"boolean"}}}},"DescribeKey":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{},"GrantTokens":{"shape":"Sn"}}},"output":{"type":"structure","members":{"KeyMetadata":{"shape":"S15"}}}},"DisableKey":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{}}}},"DisableKeyRotation":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{}}}},"DisconnectCustomKeyStore":{"input":{"type":"structure","required":["CustomKeyStoreId"],"members":{"CustomKeyStoreId":{}}},"output":{"type":"structure","members":{}}},"EnableKey":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{}}}},"EnableKeyRotation":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{}}}},"Encrypt":{"input":{"type":"structure","required":["KeyId","Plaintext"],"members":{"KeyId":{},"Plaintext":{"shape":"S1p"},"EncryptionContext":{"shape":"Sk"},"GrantTokens":{"shape":"Sn"},"EncryptionAlgorithm":{}}},"output":{"type":"structure","members":{"CiphertextBlob":{"type":"blob"},"KeyId":{},"EncryptionAlgorithm":{}}}},"GenerateDataKey":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{},"EncryptionContext":{"shape":"Sk"},"NumberOfBytes":{"type":"integer"},"KeySpec":{},"GrantTokens":{"shape":"Sn"}}},"output":{"type":"structure","members":{"CiphertextBlob":{"type":"blob"},"Plaintext":{"shape":"S1p"},"KeyId":{}}}},"GenerateDataKeyPair":{"input":{"type":"structure","required":["KeyId","KeyPairSpec"],"members":{"EncryptionContext":{"shape":"Sk"},"KeyId":{},"KeyPairSpec":{},"GrantTokens":{"shape":"Sn"}}},"output":{"type":"structure","members":{"PrivateKeyCiphertextBlob":{"type":"blob"},"PrivateKeyPlaintext":{"shape":"S1p"},"PublicKey":{"type":"blob"},"KeyId":{},"KeyPairSpec":{}}}},"GenerateDataKeyPairWithoutPlaintext":{"input":{"type":"structure","required":["KeyId","KeyPairSpec"],"members":{"EncryptionContext":{"shape":"Sk"},"KeyId":{},"KeyPairSpec":{},"GrantTokens":{"shape":"Sn"}}},"output":{"type":"structure","members":{"PrivateKeyCiphertextBlob":{"type":"blob"},"PublicKey":{"type":"blob"},"KeyId":{},"KeyPairSpec":{}}}},"GenerateDataKeyWithoutPlaintext":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{},"EncryptionContext":{"shape":"Sk"},"KeySpec":{},"NumberOfBytes":{"type":"integer"},"GrantTokens":{"shape":"Sn"}}},"output":{"type":"structure","members":{"CiphertextBlob":{"type":"blob"},"KeyId":{}}}},"GenerateRandom":{"input":{"type":"structure","members":{"NumberOfBytes":{"type":"integer"},"CustomKeyStoreId":{}}},"output":{"type":"structure","members":{"Plaintext":{"shape":"S1p"}}}},"GetKeyPolicy":{"input":{"type":"structure","required":["KeyId","PolicyName"],"members":{"KeyId":{},"PolicyName":{}}},"output":{"type":"structure","members":{"Policy":{}}}},"GetKeyRotationStatus":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{}}},"output":{"type":"structure","members":{"KeyRotationEnabled":{"type":"boolean"}}}},"GetParametersForImport":{"input":{"type":"structure","required":["KeyId","WrappingAlgorithm","WrappingKeySpec"],"members":{"KeyId":{},"WrappingAlgorithm":{},"WrappingKeySpec":{}}},"output":{"type":"structure","members":{"KeyId":{},"ImportToken":{"type":"blob"},"PublicKey":{"shape":"S1p"},"ParametersValidTo":{"type":"timestamp"}}}},"GetPublicKey":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{},"GrantTokens":{"shape":"Sn"}}},"output":{"type":"structure","members":{"KeyId":{},"PublicKey":{"type":"blob"},"CustomerMasterKeySpec":{},"KeyUsage":{},"EncryptionAlgorithms":{"shape":"S1c"},"SigningAlgorithms":{"shape":"S1e"}}}},"ImportKeyMaterial":{"input":{"type":"structure","required":["KeyId","ImportToken","EncryptedKeyMaterial"],"members":{"KeyId":{},"ImportToken":{"type":"blob"},"EncryptedKeyMaterial":{"type":"blob"},"ValidTo":{"type":"timestamp"},"ExpirationModel":{}}},"output":{"type":"structure","members":{}}},"ListAliases":{"input":{"type":"structure","members":{"KeyId":{},"Limit":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"Aliases":{"type":"list","member":{"type":"structure","members":{"AliasName":{},"AliasArn":{},"TargetKeyId":{},"CreationDate":{"type":"timestamp"},"LastUpdatedDate":{"type":"timestamp"}}}},"NextMarker":{},"Truncated":{"type":"boolean"}}}},"ListGrants":{"input":{"type":"structure","required":["KeyId"],"members":{"Limit":{"type":"integer"},"Marker":{},"KeyId":{},"GrantId":{},"GranteePrincipal":{}}},"output":{"shape":"S38"}},"ListKeyPolicies":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{},"Limit":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"PolicyNames":{"type":"list","member":{}},"NextMarker":{},"Truncated":{"type":"boolean"}}}},"ListKeys":{"input":{"type":"structure","members":{"Limit":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"Keys":{"type":"list","member":{"type":"structure","members":{"KeyId":{},"KeyArn":{}}}},"NextMarker":{},"Truncated":{"type":"boolean"}}}},"ListResourceTags":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{},"Limit":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"Tags":{"shape":"Sz"},"NextMarker":{},"Truncated":{"type":"boolean"}}}},"ListRetirableGrants":{"input":{"type":"structure","required":["RetiringPrincipal"],"members":{"Limit":{"type":"integer"},"Marker":{},"RetiringPrincipal":{}}},"output":{"shape":"S38"}},"PutKeyPolicy":{"input":{"type":"structure","required":["KeyId","PolicyName","Policy"],"members":{"KeyId":{},"PolicyName":{},"Policy":{},"BypassPolicyLockoutSafetyCheck":{"type":"boolean"}}}},"ReEncrypt":{"input":{"type":"structure","required":["CiphertextBlob","DestinationKeyId"],"members":{"CiphertextBlob":{"type":"blob"},"SourceEncryptionContext":{"shape":"Sk"},"SourceKeyId":{},"DestinationKeyId":{},"DestinationEncryptionContext":{"shape":"Sk"},"SourceEncryptionAlgorithm":{},"DestinationEncryptionAlgorithm":{},"GrantTokens":{"shape":"Sn"}}},"output":{"type":"structure","members":{"CiphertextBlob":{"type":"blob"},"SourceKeyId":{},"KeyId":{},"SourceEncryptionAlgorithm":{},"DestinationEncryptionAlgorithm":{}}}},"ReplicateKey":{"input":{"type":"structure","required":["KeyId","ReplicaRegion"],"members":{"KeyId":{},"ReplicaRegion":{},"Policy":{},"BypassPolicyLockoutSafetyCheck":{"type":"boolean"},"Description":{},"Tags":{"shape":"Sz"}}},"output":{"type":"structure","members":{"ReplicaKeyMetadata":{"shape":"S15"},"ReplicaPolicy":{},"ReplicaTags":{"shape":"Sz"}}}},"RetireGrant":{"input":{"type":"structure","members":{"GrantToken":{},"KeyId":{},"GrantId":{}}}},"RevokeGrant":{"input":{"type":"structure","required":["KeyId","GrantId"],"members":{"KeyId":{},"GrantId":{}}}},"ScheduleKeyDeletion":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{},"PendingWindowInDays":{"type":"integer"}}},"output":{"type":"structure","members":{"KeyId":{},"DeletionDate":{"type":"timestamp"},"KeyState":{},"PendingWindowInDays":{"type":"integer"}}}},"Sign":{"input":{"type":"structure","required":["KeyId","Message","SigningAlgorithm"],"members":{"KeyId":{},"Message":{"shape":"S1p"},"MessageType":{},"GrantTokens":{"shape":"Sn"},"SigningAlgorithm":{}}},"output":{"type":"structure","members":{"KeyId":{},"Signature":{"type":"blob"},"SigningAlgorithm":{}}}},"TagResource":{"input":{"type":"structure","required":["KeyId","Tags"],"members":{"KeyId":{},"Tags":{"shape":"Sz"}}}},"UntagResource":{"input":{"type":"structure","required":["KeyId","TagKeys"],"members":{"KeyId":{},"TagKeys":{"type":"list","member":{}}}}},"UpdateAlias":{"input":{"type":"structure","required":["AliasName","TargetKeyId"],"members":{"AliasName":{},"TargetKeyId":{}}}},"UpdateCustomKeyStore":{"input":{"type":"structure","required":["CustomKeyStoreId"],"members":{"CustomKeyStoreId":{},"NewCustomKeyStoreName":{},"KeyStorePassword":{"shape":"Sd"},"CloudHsmClusterId":{}}},"output":{"type":"structure","members":{}}},"UpdateKeyDescription":{"input":{"type":"structure","required":["KeyId","Description"],"members":{"KeyId":{},"Description":{}}}},"UpdatePrimaryRegion":{"input":{"type":"structure","required":["KeyId","PrimaryRegion"],"members":{"KeyId":{},"PrimaryRegion":{}}}},"Verify":{"input":{"type":"structure","required":["KeyId","Message","Signature","SigningAlgorithm"],"members":{"KeyId":{},"Message":{"shape":"S1p"},"MessageType":{},"Signature":{"type":"blob"},"SigningAlgorithm":{},"GrantTokens":{"shape":"Sn"}}},"output":{"type":"structure","members":{"KeyId":{},"SignatureValid":{"type":"boolean"},"SigningAlgorithm":{}}}}},"shapes":{"Sd":{"type":"string","sensitive":true},"Sh":{"type":"list","member":{}},"Sj":{"type":"structure","members":{"EncryptionContextSubset":{"shape":"Sk"},"EncryptionContextEquals":{"shape":"Sk"}}},"Sk":{"type":"map","key":{},"value":{}},"Sn":{"type":"list","member":{}},"Sz":{"type":"list","member":{"type":"structure","required":["TagKey","TagValue"],"members":{"TagKey":{},"TagValue":{}}}},"S15":{"type":"structure","required":["KeyId"],"members":{"AWSAccountId":{},"KeyId":{},"Arn":{},"CreationDate":{"type":"timestamp"},"Enabled":{"type":"boolean"},"Description":{},"KeyUsage":{},"KeyState":{},"DeletionDate":{"type":"timestamp"},"ValidTo":{"type":"timestamp"},"Origin":{},"CustomKeyStoreId":{},"CloudHsmClusterId":{},"ExpirationModel":{},"KeyManager":{},"CustomerMasterKeySpec":{},"EncryptionAlgorithms":{"shape":"S1c"},"SigningAlgorithms":{"shape":"S1e"},"MultiRegion":{"type":"boolean"},"MultiRegionConfiguration":{"type":"structure","members":{"MultiRegionKeyType":{},"PrimaryKey":{"shape":"S1i"},"ReplicaKeys":{"type":"list","member":{"shape":"S1i"}}}},"PendingDeletionWindowInDays":{"type":"integer"}}},"S1c":{"type":"list","member":{}},"S1e":{"type":"list","member":{}},"S1i":{"type":"structure","members":{"Arn":{},"Region":{}}},"S1p":{"type":"blob","sensitive":true},"S38":{"type":"structure","members":{"Grants":{"type":"list","member":{"type":"structure","members":{"KeyId":{},"GrantId":{},"Name":{},"CreationDate":{"type":"timestamp"},"GranteePrincipal":{},"RetiringPrincipal":{},"IssuingAccount":{},"Operations":{"shape":"Sh"},"Constraints":{"shape":"Sj"}}}},"NextMarker":{},"Truncated":{"type":"boolean"}}}}}

/***/ }),
/* 275 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"ListAliases":{"input_token":"Marker","limit_key":"Limit","more_results":"Truncated","output_token":"NextMarker","result_key":"Aliases"},"ListGrants":{"input_token":"Marker","limit_key":"Limit","more_results":"Truncated","output_token":"NextMarker","result_key":"Grants"},"ListKeyPolicies":{"input_token":"Marker","limit_key":"Limit","more_results":"Truncated","output_token":"NextMarker","result_key":"PolicyNames"},"ListKeys":{"input_token":"Marker","limit_key":"Limit","more_results":"Truncated","output_token":"NextMarker","result_key":"Keys"}}}

/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['lambda'] = {};
	AWS.Lambda = Service.defineService('lambda', ['2014-11-11', '2015-03-31']);
	__webpack_require__(277);
	Object.defineProperty(apiLoader.services['lambda'], '2014-11-11', {
	  get: function get() {
	    var model = __webpack_require__(278);
	    model.paginators = __webpack_require__(279).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	Object.defineProperty(apiLoader.services['lambda'], '2015-03-31', {
	  get: function get() {
	    var model = __webpack_require__(280);
	    model.paginators = __webpack_require__(281).pagination;
	    model.waiters = __webpack_require__(282).waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.Lambda;


/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(4);

	AWS.util.update(AWS.Lambda.prototype, {
	  /**
	   * @api private
	   */
	  setupRequestListeners: function setupRequestListeners(request) {
	    if (request.operation === 'invoke') {
	      request.addListener('extractData', AWS.util.convertPayloadToString);
	    }
	  }
	});



/***/ }),
/* 278 */
/***/ (function(module, exports) {

	module.exports = {"metadata":{"apiVersion":"2014-11-11","endpointPrefix":"lambda","serviceFullName":"AWS Lambda","serviceId":"Lambda","signatureVersion":"v4","protocol":"rest-json"},"operations":{"AddEventSource":{"http":{"requestUri":"/2014-11-13/event-source-mappings/"},"input":{"type":"structure","required":["EventSource","FunctionName","Role"],"members":{"EventSource":{},"FunctionName":{},"Role":{},"BatchSize":{"type":"integer"},"Parameters":{"shape":"S6"}}},"output":{"shape":"S7"}},"DeleteFunction":{"http":{"method":"DELETE","requestUri":"/2014-11-13/functions/{FunctionName}","responseCode":204},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"}}}},"GetEventSource":{"http":{"method":"GET","requestUri":"/2014-11-13/event-source-mappings/{UUID}","responseCode":200},"input":{"type":"structure","required":["UUID"],"members":{"UUID":{"location":"uri","locationName":"UUID"}}},"output":{"shape":"S7"}},"GetFunction":{"http":{"method":"GET","requestUri":"/2014-11-13/functions/{FunctionName}","responseCode":200},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"}}},"output":{"type":"structure","members":{"Configuration":{"shape":"Se"},"Code":{"type":"structure","members":{"RepositoryType":{},"Location":{}}}}}},"GetFunctionConfiguration":{"http":{"method":"GET","requestUri":"/2014-11-13/functions/{FunctionName}/configuration","responseCode":200},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"}}},"output":{"shape":"Se"}},"InvokeAsync":{"http":{"requestUri":"/2014-11-13/functions/{FunctionName}/invoke-async/","responseCode":202},"input":{"type":"structure","required":["FunctionName","InvokeArgs"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"InvokeArgs":{"shape":"Sq"}},"payload":"InvokeArgs"},"output":{"type":"structure","members":{"Status":{"location":"statusCode","type":"integer"}}}},"ListEventSources":{"http":{"method":"GET","requestUri":"/2014-11-13/event-source-mappings/","responseCode":200},"input":{"type":"structure","members":{"EventSourceArn":{"location":"querystring","locationName":"EventSource"},"FunctionName":{"location":"querystring","locationName":"FunctionName"},"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems","type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"EventSources":{"type":"list","member":{"shape":"S7"}}}}},"ListFunctions":{"http":{"method":"GET","requestUri":"/2014-11-13/functions/","responseCode":200},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems","type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"Functions":{"type":"list","member":{"shape":"Se"}}}}},"RemoveEventSource":{"http":{"method":"DELETE","requestUri":"/2014-11-13/event-source-mappings/{UUID}","responseCode":204},"input":{"type":"structure","required":["UUID"],"members":{"UUID":{"location":"uri","locationName":"UUID"}}}},"UpdateFunctionConfiguration":{"http":{"method":"PUT","requestUri":"/2014-11-13/functions/{FunctionName}/configuration","responseCode":200},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Role":{"location":"querystring","locationName":"Role"},"Handler":{"location":"querystring","locationName":"Handler"},"Description":{"location":"querystring","locationName":"Description"},"Timeout":{"location":"querystring","locationName":"Timeout","type":"integer"},"MemorySize":{"location":"querystring","locationName":"MemorySize","type":"integer"}}},"output":{"shape":"Se"}},"UploadFunction":{"http":{"method":"PUT","requestUri":"/2014-11-13/functions/{FunctionName}","responseCode":201},"input":{"type":"structure","required":["FunctionName","FunctionZip","Runtime","Role","Handler","Mode"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"FunctionZip":{"shape":"Sq"},"Runtime":{"location":"querystring","locationName":"Runtime"},"Role":{"location":"querystring","locationName":"Role"},"Handler":{"location":"querystring","locationName":"Handler"},"Mode":{"location":"querystring","locationName":"Mode"},"Description":{"location":"querystring","locationName":"Description"},"Timeout":{"location":"querystring","locationName":"Timeout","type":"integer"},"MemorySize":{"location":"querystring","locationName":"MemorySize","type":"integer"}},"payload":"FunctionZip"},"output":{"shape":"Se"}}},"shapes":{"S6":{"type":"map","key":{},"value":{}},"S7":{"type":"structure","members":{"UUID":{},"BatchSize":{"type":"integer"},"EventSource":{},"FunctionName":{},"Parameters":{"shape":"S6"},"Role":{},"LastModified":{"type":"timestamp"},"IsActive":{"type":"boolean"},"Status":{}}},"Se":{"type":"structure","members":{"FunctionName":{},"FunctionARN":{},"ConfigurationId":{},"Runtime":{},"Role":{},"Handler":{},"Mode":{},"CodeSize":{"type":"long"},"Description":{},"Timeout":{"type":"integer"},"MemorySize":{"type":"integer"},"LastModified":{"type":"timestamp"}}},"Sq":{"type":"blob","streaming":true}}}

/***/ }),
/* 279 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"ListEventSources":{"input_token":"Marker","output_token":"NextMarker","limit_key":"MaxItems","result_key":"EventSources"},"ListFunctions":{"input_token":"Marker","output_token":"NextMarker","limit_key":"MaxItems","result_key":"Functions"}}}

/***/ }),
/* 280 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-03-31","endpointPrefix":"lambda","protocol":"rest-json","serviceFullName":"AWS Lambda","serviceId":"Lambda","signatureVersion":"v4","uid":"lambda-2015-03-31"},"operations":{"AddLayerVersionPermission":{"http":{"requestUri":"/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy","responseCode":201},"input":{"type":"structure","required":["LayerName","VersionNumber","StatementId","Action","Principal"],"members":{"LayerName":{"location":"uri","locationName":"LayerName"},"VersionNumber":{"location":"uri","locationName":"VersionNumber","type":"long"},"StatementId":{},"Action":{},"Principal":{},"OrganizationId":{},"RevisionId":{"location":"querystring","locationName":"RevisionId"}}},"output":{"type":"structure","members":{"Statement":{},"RevisionId":{}}}},"AddPermission":{"http":{"requestUri":"/2015-03-31/functions/{FunctionName}/policy","responseCode":201},"input":{"type":"structure","required":["FunctionName","StatementId","Action","Principal"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"StatementId":{},"Action":{},"Principal":{},"SourceArn":{},"SourceAccount":{},"EventSourceToken":{},"Qualifier":{"location":"querystring","locationName":"Qualifier"},"RevisionId":{}}},"output":{"type":"structure","members":{"Statement":{}}}},"CreateAlias":{"http":{"requestUri":"/2015-03-31/functions/{FunctionName}/aliases","responseCode":201},"input":{"type":"structure","required":["FunctionName","Name","FunctionVersion"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Name":{},"FunctionVersion":{},"Description":{},"RoutingConfig":{"shape":"Sn"}}},"output":{"shape":"Sr"}},"CreateCodeSigningConfig":{"http":{"requestUri":"/2020-04-22/code-signing-configs/","responseCode":201},"input":{"type":"structure","required":["AllowedPublishers"],"members":{"Description":{},"AllowedPublishers":{"shape":"Su"},"CodeSigningPolicies":{"shape":"Sw"}}},"output":{"type":"structure","required":["CodeSigningConfig"],"members":{"CodeSigningConfig":{"shape":"Sz"}}}},"CreateEventSourceMapping":{"http":{"requestUri":"/2015-03-31/event-source-mappings/","responseCode":202},"input":{"type":"structure","required":["FunctionName"],"members":{"EventSourceArn":{},"FunctionName":{},"Enabled":{"type":"boolean"},"BatchSize":{"type":"integer"},"MaximumBatchingWindowInSeconds":{"type":"integer"},"ParallelizationFactor":{"type":"integer"},"StartingPosition":{},"StartingPositionTimestamp":{"type":"timestamp"},"DestinationConfig":{"shape":"S1a"},"MaximumRecordAgeInSeconds":{"type":"integer"},"BisectBatchOnFunctionError":{"type":"boolean"},"MaximumRetryAttempts":{"type":"integer"},"TumblingWindowInSeconds":{"type":"integer"},"Topics":{"shape":"S1i"},"Queues":{"shape":"S1k"},"SourceAccessConfigurations":{"shape":"S1m"},"SelfManagedEventSource":{"shape":"S1q"},"FunctionResponseTypes":{"shape":"S1v"}}},"output":{"shape":"S1x"}},"CreateFunction":{"http":{"requestUri":"/2015-03-31/functions","responseCode":201},"input":{"type":"structure","required":["FunctionName","Role","Code"],"members":{"FunctionName":{},"Runtime":{},"Role":{},"Handler":{},"Code":{"type":"structure","members":{"ZipFile":{"shape":"S23"},"S3Bucket":{},"S3Key":{},"S3ObjectVersion":{},"ImageUri":{}}},"Description":{},"Timeout":{"type":"integer"},"MemorySize":{"type":"integer"},"Publish":{"type":"boolean"},"VpcConfig":{"shape":"S2a"},"PackageType":{},"DeadLetterConfig":{"shape":"S2g"},"Environment":{"shape":"S2i"},"KMSKeyArn":{},"TracingConfig":{"shape":"S2n"},"Tags":{"shape":"S2p"},"Layers":{"shape":"S2s"},"FileSystemConfigs":{"shape":"S2u"},"ImageConfig":{"shape":"S2y"},"CodeSigningConfigArn":{}}},"output":{"shape":"S31"}},"DeleteAlias":{"http":{"method":"DELETE","requestUri":"/2015-03-31/functions/{FunctionName}/aliases/{Name}","responseCode":204},"input":{"type":"structure","required":["FunctionName","Name"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Name":{"location":"uri","locationName":"Name"}}}},"DeleteCodeSigningConfig":{"http":{"method":"DELETE","requestUri":"/2020-04-22/code-signing-configs/{CodeSigningConfigArn}","responseCode":204},"input":{"type":"structure","required":["CodeSigningConfigArn"],"members":{"CodeSigningConfigArn":{"location":"uri","locationName":"CodeSigningConfigArn"}}},"output":{"type":"structure","members":{}}},"DeleteEventSourceMapping":{"http":{"method":"DELETE","requestUri":"/2015-03-31/event-source-mappings/{UUID}","responseCode":202},"input":{"type":"structure","required":["UUID"],"members":{"UUID":{"location":"uri","locationName":"UUID"}}},"output":{"shape":"S1x"}},"DeleteFunction":{"http":{"method":"DELETE","requestUri":"/2015-03-31/functions/{FunctionName}","responseCode":204},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Qualifier":{"location":"querystring","locationName":"Qualifier"}}}},"DeleteFunctionCodeSigningConfig":{"http":{"method":"DELETE","requestUri":"/2020-06-30/functions/{FunctionName}/code-signing-config","responseCode":204},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"}}}},"DeleteFunctionConcurrency":{"http":{"method":"DELETE","requestUri":"/2017-10-31/functions/{FunctionName}/concurrency","responseCode":204},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"}}}},"DeleteFunctionEventInvokeConfig":{"http":{"method":"DELETE","requestUri":"/2019-09-25/functions/{FunctionName}/event-invoke-config","responseCode":204},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Qualifier":{"location":"querystring","locationName":"Qualifier"}}}},"DeleteLayerVersion":{"http":{"method":"DELETE","requestUri":"/2018-10-31/layers/{LayerName}/versions/{VersionNumber}","responseCode":204},"input":{"type":"structure","required":["LayerName","VersionNumber"],"members":{"LayerName":{"location":"uri","locationName":"LayerName"},"VersionNumber":{"location":"uri","locationName":"VersionNumber","type":"long"}}}},"DeleteProvisionedConcurrencyConfig":{"http":{"method":"DELETE","requestUri":"/2019-09-30/functions/{FunctionName}/provisioned-concurrency","responseCode":204},"input":{"type":"structure","required":["FunctionName","Qualifier"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Qualifier":{"location":"querystring","locationName":"Qualifier"}}}},"GetAccountSettings":{"http":{"method":"GET","requestUri":"/2016-08-19/account-settings/","responseCode":200},"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"AccountLimit":{"type":"structure","members":{"TotalCodeSize":{"type":"long"},"CodeSizeUnzipped":{"type":"long"},"CodeSizeZipped":{"type":"long"},"ConcurrentExecutions":{"type":"integer"},"UnreservedConcurrentExecutions":{"type":"integer"}}},"AccountUsage":{"type":"structure","members":{"TotalCodeSize":{"type":"long"},"FunctionCount":{"type":"long"}}}}}},"GetAlias":{"http":{"method":"GET","requestUri":"/2015-03-31/functions/{FunctionName}/aliases/{Name}","responseCode":200},"input":{"type":"structure","required":["FunctionName","Name"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Name":{"location":"uri","locationName":"Name"}}},"output":{"shape":"Sr"}},"GetCodeSigningConfig":{"http":{"method":"GET","requestUri":"/2020-04-22/code-signing-configs/{CodeSigningConfigArn}","responseCode":200},"input":{"type":"structure","required":["CodeSigningConfigArn"],"members":{"CodeSigningConfigArn":{"location":"uri","locationName":"CodeSigningConfigArn"}}},"output":{"type":"structure","required":["CodeSigningConfig"],"members":{"CodeSigningConfig":{"shape":"Sz"}}}},"GetEventSourceMapping":{"http":{"method":"GET","requestUri":"/2015-03-31/event-source-mappings/{UUID}","responseCode":200},"input":{"type":"structure","required":["UUID"],"members":{"UUID":{"location":"uri","locationName":"UUID"}}},"output":{"shape":"S1x"}},"GetFunction":{"http":{"method":"GET","requestUri":"/2015-03-31/functions/{FunctionName}","responseCode":200},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Qualifier":{"location":"querystring","locationName":"Qualifier"}}},"output":{"type":"structure","members":{"Configuration":{"shape":"S31"},"Code":{"type":"structure","members":{"RepositoryType":{},"Location":{},"ImageUri":{},"ResolvedImageUri":{}}},"Tags":{"shape":"S2p"},"Concurrency":{"shape":"S48"}}}},"GetFunctionCodeSigningConfig":{"http":{"method":"GET","requestUri":"/2020-06-30/functions/{FunctionName}/code-signing-config","responseCode":200},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"}}},"output":{"type":"structure","required":["CodeSigningConfigArn","FunctionName"],"members":{"CodeSigningConfigArn":{},"FunctionName":{}}}},"GetFunctionConcurrency":{"http":{"method":"GET","requestUri":"/2019-09-30/functions/{FunctionName}/concurrency","responseCode":200},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"}}},"output":{"type":"structure","members":{"ReservedConcurrentExecutions":{"type":"integer"}}}},"GetFunctionConfiguration":{"http":{"method":"GET","requestUri":"/2015-03-31/functions/{FunctionName}/configuration","responseCode":200},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Qualifier":{"location":"querystring","locationName":"Qualifier"}}},"output":{"shape":"S31"}},"GetFunctionEventInvokeConfig":{"http":{"method":"GET","requestUri":"/2019-09-25/functions/{FunctionName}/event-invoke-config","responseCode":200},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Qualifier":{"location":"querystring","locationName":"Qualifier"}}},"output":{"shape":"S4g"}},"GetLayerVersion":{"http":{"method":"GET","requestUri":"/2018-10-31/layers/{LayerName}/versions/{VersionNumber}","responseCode":200},"input":{"type":"structure","required":["LayerName","VersionNumber"],"members":{"LayerName":{"location":"uri","locationName":"LayerName"},"VersionNumber":{"location":"uri","locationName":"VersionNumber","type":"long"}}},"output":{"shape":"S4k"}},"GetLayerVersionByArn":{"http":{"method":"GET","requestUri":"/2018-10-31/layers?find=LayerVersion","responseCode":200},"input":{"type":"structure","required":["Arn"],"members":{"Arn":{"location":"querystring","locationName":"Arn"}}},"output":{"shape":"S4k"}},"GetLayerVersionPolicy":{"http":{"method":"GET","requestUri":"/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy","responseCode":200},"input":{"type":"structure","required":["LayerName","VersionNumber"],"members":{"LayerName":{"location":"uri","locationName":"LayerName"},"VersionNumber":{"location":"uri","locationName":"VersionNumber","type":"long"}}},"output":{"type":"structure","members":{"Policy":{},"RevisionId":{}}}},"GetPolicy":{"http":{"method":"GET","requestUri":"/2015-03-31/functions/{FunctionName}/policy","responseCode":200},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Qualifier":{"location":"querystring","locationName":"Qualifier"}}},"output":{"type":"structure","members":{"Policy":{},"RevisionId":{}}}},"GetProvisionedConcurrencyConfig":{"http":{"method":"GET","requestUri":"/2019-09-30/functions/{FunctionName}/provisioned-concurrency","responseCode":200},"input":{"type":"structure","required":["FunctionName","Qualifier"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Qualifier":{"location":"querystring","locationName":"Qualifier"}}},"output":{"type":"structure","members":{"RequestedProvisionedConcurrentExecutions":{"type":"integer"},"AvailableProvisionedConcurrentExecutions":{"type":"integer"},"AllocatedProvisionedConcurrentExecutions":{"type":"integer"},"Status":{},"StatusReason":{},"LastModified":{}}}},"Invoke":{"http":{"requestUri":"/2015-03-31/functions/{FunctionName}/invocations"},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"InvocationType":{"location":"header","locationName":"X-Amz-Invocation-Type"},"LogType":{"location":"header","locationName":"X-Amz-Log-Type"},"ClientContext":{"location":"header","locationName":"X-Amz-Client-Context"},"Payload":{"shape":"S23"},"Qualifier":{"location":"querystring","locationName":"Qualifier"}},"payload":"Payload"},"output":{"type":"structure","members":{"StatusCode":{"location":"statusCode","type":"integer"},"FunctionError":{"location":"header","locationName":"X-Amz-Function-Error"},"LogResult":{"location":"header","locationName":"X-Amz-Log-Result"},"Payload":{"shape":"S23"},"ExecutedVersion":{"location":"header","locationName":"X-Amz-Executed-Version"}},"payload":"Payload"}},"InvokeAsync":{"http":{"requestUri":"/2014-11-13/functions/{FunctionName}/invoke-async/","responseCode":202},"input":{"type":"structure","required":["FunctionName","InvokeArgs"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"InvokeArgs":{"type":"blob","streaming":true}},"deprecated":true,"payload":"InvokeArgs"},"output":{"type":"structure","members":{"Status":{"location":"statusCode","type":"integer"}},"deprecated":true},"deprecated":true},"ListAliases":{"http":{"method":"GET","requestUri":"/2015-03-31/functions/{FunctionName}/aliases","responseCode":200},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"FunctionVersion":{"location":"querystring","locationName":"FunctionVersion"},"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems","type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"Aliases":{"type":"list","member":{"shape":"Sr"}}}}},"ListCodeSigningConfigs":{"http":{"method":"GET","requestUri":"/2020-04-22/code-signing-configs/","responseCode":200},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems","type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"CodeSigningConfigs":{"type":"list","member":{"shape":"Sz"}}}}},"ListEventSourceMappings":{"http":{"method":"GET","requestUri":"/2015-03-31/event-source-mappings/","responseCode":200},"input":{"type":"structure","members":{"EventSourceArn":{"location":"querystring","locationName":"EventSourceArn"},"FunctionName":{"location":"querystring","locationName":"FunctionName"},"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems","type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"EventSourceMappings":{"type":"list","member":{"shape":"S1x"}}}}},"ListFunctionEventInvokeConfigs":{"http":{"method":"GET","requestUri":"/2019-09-25/functions/{FunctionName}/event-invoke-config/list","responseCode":200},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems","type":"integer"}}},"output":{"type":"structure","members":{"FunctionEventInvokeConfigs":{"type":"list","member":{"shape":"S4g"}},"NextMarker":{}}}},"ListFunctions":{"http":{"method":"GET","requestUri":"/2015-03-31/functions/","responseCode":200},"input":{"type":"structure","members":{"MasterRegion":{"location":"querystring","locationName":"MasterRegion"},"FunctionVersion":{"location":"querystring","locationName":"FunctionVersion"},"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems","type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"Functions":{"shape":"S5p"}}}},"ListFunctionsByCodeSigningConfig":{"http":{"method":"GET","requestUri":"/2020-04-22/code-signing-configs/{CodeSigningConfigArn}/functions","responseCode":200},"input":{"type":"structure","required":["CodeSigningConfigArn"],"members":{"CodeSigningConfigArn":{"location":"uri","locationName":"CodeSigningConfigArn"},"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems","type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"FunctionArns":{"type":"list","member":{}}}}},"ListLayerVersions":{"http":{"method":"GET","requestUri":"/2018-10-31/layers/{LayerName}/versions","responseCode":200},"input":{"type":"structure","required":["LayerName"],"members":{"CompatibleRuntime":{"location":"querystring","locationName":"CompatibleRuntime"},"LayerName":{"location":"uri","locationName":"LayerName"},"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems","type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"LayerVersions":{"type":"list","member":{"shape":"S5x"}}}}},"ListLayers":{"http":{"method":"GET","requestUri":"/2018-10-31/layers","responseCode":200},"input":{"type":"structure","members":{"CompatibleRuntime":{"location":"querystring","locationName":"CompatibleRuntime"},"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems","type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"Layers":{"type":"list","member":{"type":"structure","members":{"LayerName":{},"LayerArn":{},"LatestMatchingVersion":{"shape":"S5x"}}}}}}},"ListProvisionedConcurrencyConfigs":{"http":{"method":"GET","requestUri":"/2019-09-30/functions/{FunctionName}/provisioned-concurrency?List=ALL","responseCode":200},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems","type":"integer"}}},"output":{"type":"structure","members":{"ProvisionedConcurrencyConfigs":{"type":"list","member":{"type":"structure","members":{"FunctionArn":{},"RequestedProvisionedConcurrentExecutions":{"type":"integer"},"AvailableProvisionedConcurrentExecutions":{"type":"integer"},"AllocatedProvisionedConcurrentExecutions":{"type":"integer"},"Status":{},"StatusReason":{},"LastModified":{}}}},"NextMarker":{}}}},"ListTags":{"http":{"method":"GET","requestUri":"/2017-03-31/tags/{ARN}"},"input":{"type":"structure","required":["Resource"],"members":{"Resource":{"location":"uri","locationName":"ARN"}}},"output":{"type":"structure","members":{"Tags":{"shape":"S2p"}}}},"ListVersionsByFunction":{"http":{"method":"GET","requestUri":"/2015-03-31/functions/{FunctionName}/versions","responseCode":200},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems","type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"Versions":{"shape":"S5p"}}}},"PublishLayerVersion":{"http":{"requestUri":"/2018-10-31/layers/{LayerName}/versions","responseCode":201},"input":{"type":"structure","required":["LayerName","Content"],"members":{"LayerName":{"location":"uri","locationName":"LayerName"},"Description":{},"Content":{"type":"structure","members":{"S3Bucket":{},"S3Key":{},"S3ObjectVersion":{},"ZipFile":{"shape":"S23"}}},"CompatibleRuntimes":{"shape":"S4n"},"LicenseInfo":{}}},"output":{"type":"structure","members":{"Content":{"shape":"S4l"},"LayerArn":{},"LayerVersionArn":{},"Description":{},"CreatedDate":{},"Version":{"type":"long"},"CompatibleRuntimes":{"shape":"S4n"},"LicenseInfo":{}}}},"PublishVersion":{"http":{"requestUri":"/2015-03-31/functions/{FunctionName}/versions","responseCode":201},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"CodeSha256":{},"Description":{},"RevisionId":{}}},"output":{"shape":"S31"}},"PutFunctionCodeSigningConfig":{"http":{"method":"PUT","requestUri":"/2020-06-30/functions/{FunctionName}/code-signing-config","responseCode":200},"input":{"type":"structure","required":["CodeSigningConfigArn","FunctionName"],"members":{"CodeSigningConfigArn":{},"FunctionName":{"location":"uri","locationName":"FunctionName"}}},"output":{"type":"structure","required":["CodeSigningConfigArn","FunctionName"],"members":{"CodeSigningConfigArn":{},"FunctionName":{}}}},"PutFunctionConcurrency":{"http":{"method":"PUT","requestUri":"/2017-10-31/functions/{FunctionName}/concurrency","responseCode":200},"input":{"type":"structure","required":["FunctionName","ReservedConcurrentExecutions"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"ReservedConcurrentExecutions":{"type":"integer"}}},"output":{"shape":"S48"}},"PutFunctionEventInvokeConfig":{"http":{"method":"PUT","requestUri":"/2019-09-25/functions/{FunctionName}/event-invoke-config","responseCode":200},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Qualifier":{"location":"querystring","locationName":"Qualifier"},"MaximumRetryAttempts":{"type":"integer"},"MaximumEventAgeInSeconds":{"type":"integer"},"DestinationConfig":{"shape":"S1a"}}},"output":{"shape":"S4g"}},"PutProvisionedConcurrencyConfig":{"http":{"method":"PUT","requestUri":"/2019-09-30/functions/{FunctionName}/provisioned-concurrency","responseCode":202},"input":{"type":"structure","required":["FunctionName","Qualifier","ProvisionedConcurrentExecutions"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Qualifier":{"location":"querystring","locationName":"Qualifier"},"ProvisionedConcurrentExecutions":{"type":"integer"}}},"output":{"type":"structure","members":{"RequestedProvisionedConcurrentExecutions":{"type":"integer"},"AvailableProvisionedConcurrentExecutions":{"type":"integer"},"AllocatedProvisionedConcurrentExecutions":{"type":"integer"},"Status":{},"StatusReason":{},"LastModified":{}}}},"RemoveLayerVersionPermission":{"http":{"method":"DELETE","requestUri":"/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy/{StatementId}","responseCode":204},"input":{"type":"structure","required":["LayerName","VersionNumber","StatementId"],"members":{"LayerName":{"location":"uri","locationName":"LayerName"},"VersionNumber":{"location":"uri","locationName":"VersionNumber","type":"long"},"StatementId":{"location":"uri","locationName":"StatementId"},"RevisionId":{"location":"querystring","locationName":"RevisionId"}}}},"RemovePermission":{"http":{"method":"DELETE","requestUri":"/2015-03-31/functions/{FunctionName}/policy/{StatementId}","responseCode":204},"input":{"type":"structure","required":["FunctionName","StatementId"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"StatementId":{"location":"uri","locationName":"StatementId"},"Qualifier":{"location":"querystring","locationName":"Qualifier"},"RevisionId":{"location":"querystring","locationName":"RevisionId"}}}},"TagResource":{"http":{"requestUri":"/2017-03-31/tags/{ARN}","responseCode":204},"input":{"type":"structure","required":["Resource","Tags"],"members":{"Resource":{"location":"uri","locationName":"ARN"},"Tags":{"shape":"S2p"}}}},"UntagResource":{"http":{"method":"DELETE","requestUri":"/2017-03-31/tags/{ARN}","responseCode":204},"input":{"type":"structure","required":["Resource","TagKeys"],"members":{"Resource":{"location":"uri","locationName":"ARN"},"TagKeys":{"location":"querystring","locationName":"tagKeys","type":"list","member":{}}}}},"UpdateAlias":{"http":{"method":"PUT","requestUri":"/2015-03-31/functions/{FunctionName}/aliases/{Name}","responseCode":200},"input":{"type":"structure","required":["FunctionName","Name"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Name":{"location":"uri","locationName":"Name"},"FunctionVersion":{},"Description":{},"RoutingConfig":{"shape":"Sn"},"RevisionId":{}}},"output":{"shape":"Sr"}},"UpdateCodeSigningConfig":{"http":{"method":"PUT","requestUri":"/2020-04-22/code-signing-configs/{CodeSigningConfigArn}","responseCode":200},"input":{"type":"structure","required":["CodeSigningConfigArn"],"members":{"CodeSigningConfigArn":{"location":"uri","locationName":"CodeSigningConfigArn"},"Description":{},"AllowedPublishers":{"shape":"Su"},"CodeSigningPolicies":{"shape":"Sw"}}},"output":{"type":"structure","required":["CodeSigningConfig"],"members":{"CodeSigningConfig":{"shape":"Sz"}}}},"UpdateEventSourceMapping":{"http":{"method":"PUT","requestUri":"/2015-03-31/event-source-mappings/{UUID}","responseCode":202},"input":{"type":"structure","required":["UUID"],"members":{"UUID":{"location":"uri","locationName":"UUID"},"FunctionName":{},"Enabled":{"type":"boolean"},"BatchSize":{"type":"integer"},"MaximumBatchingWindowInSeconds":{"type":"integer"},"DestinationConfig":{"shape":"S1a"},"MaximumRecordAgeInSeconds":{"type":"integer"},"BisectBatchOnFunctionError":{"type":"boolean"},"MaximumRetryAttempts":{"type":"integer"},"ParallelizationFactor":{"type":"integer"},"SourceAccessConfigurations":{"shape":"S1m"},"TumblingWindowInSeconds":{"type":"integer"},"FunctionResponseTypes":{"shape":"S1v"}}},"output":{"shape":"S1x"}},"UpdateFunctionCode":{"http":{"method":"PUT","requestUri":"/2015-03-31/functions/{FunctionName}/code","responseCode":200},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"ZipFile":{"shape":"S23"},"S3Bucket":{},"S3Key":{},"S3ObjectVersion":{},"ImageUri":{},"Publish":{"type":"boolean"},"DryRun":{"type":"boolean"},"RevisionId":{}}},"output":{"shape":"S31"}},"UpdateFunctionConfiguration":{"http":{"method":"PUT","requestUri":"/2015-03-31/functions/{FunctionName}/configuration","responseCode":200},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Role":{},"Handler":{},"Description":{},"Timeout":{"type":"integer"},"MemorySize":{"type":"integer"},"VpcConfig":{"shape":"S2a"},"Environment":{"shape":"S2i"},"Runtime":{},"DeadLetterConfig":{"shape":"S2g"},"KMSKeyArn":{},"TracingConfig":{"shape":"S2n"},"RevisionId":{},"Layers":{"shape":"S2s"},"FileSystemConfigs":{"shape":"S2u"},"ImageConfig":{"shape":"S2y"}}},"output":{"shape":"S31"}},"UpdateFunctionEventInvokeConfig":{"http":{"requestUri":"/2019-09-25/functions/{FunctionName}/event-invoke-config","responseCode":200},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Qualifier":{"location":"querystring","locationName":"Qualifier"},"MaximumRetryAttempts":{"type":"integer"},"MaximumEventAgeInSeconds":{"type":"integer"},"DestinationConfig":{"shape":"S1a"}}},"output":{"shape":"S4g"}}},"shapes":{"Sn":{"type":"structure","members":{"AdditionalVersionWeights":{"type":"map","key":{},"value":{"type":"double"}}}},"Sr":{"type":"structure","members":{"AliasArn":{},"Name":{},"FunctionVersion":{},"Description":{},"RoutingConfig":{"shape":"Sn"},"RevisionId":{}}},"Su":{"type":"structure","required":["SigningProfileVersionArns"],"members":{"SigningProfileVersionArns":{"type":"list","member":{}}}},"Sw":{"type":"structure","members":{"UntrustedArtifactOnDeployment":{}}},"Sz":{"type":"structure","required":["CodeSigningConfigId","CodeSigningConfigArn","AllowedPublishers","CodeSigningPolicies","LastModified"],"members":{"CodeSigningConfigId":{},"CodeSigningConfigArn":{},"Description":{},"AllowedPublishers":{"shape":"Su"},"CodeSigningPolicies":{"shape":"Sw"},"LastModified":{}}},"S1a":{"type":"structure","members":{"OnSuccess":{"type":"structure","members":{"Destination":{}}},"OnFailure":{"type":"structure","members":{"Destination":{}}}}},"S1i":{"type":"list","member":{}},"S1k":{"type":"list","member":{}},"S1m":{"type":"list","member":{"type":"structure","members":{"Type":{},"URI":{}}}},"S1q":{"type":"structure","members":{"Endpoints":{"type":"map","key":{},"value":{"type":"list","member":{}}}}},"S1v":{"type":"list","member":{}},"S1x":{"type":"structure","members":{"UUID":{},"StartingPosition":{},"StartingPositionTimestamp":{"type":"timestamp"},"BatchSize":{"type":"integer"},"MaximumBatchingWindowInSeconds":{"type":"integer"},"ParallelizationFactor":{"type":"integer"},"EventSourceArn":{},"FunctionArn":{},"LastModified":{"type":"timestamp"},"LastProcessingResult":{},"State":{},"StateTransitionReason":{},"DestinationConfig":{"shape":"S1a"},"Topics":{"shape":"S1i"},"Queues":{"shape":"S1k"},"SourceAccessConfigurations":{"shape":"S1m"},"SelfManagedEventSource":{"shape":"S1q"},"MaximumRecordAgeInSeconds":{"type":"integer"},"BisectBatchOnFunctionError":{"type":"boolean"},"MaximumRetryAttempts":{"type":"integer"},"TumblingWindowInSeconds":{"type":"integer"},"FunctionResponseTypes":{"shape":"S1v"}}},"S23":{"type":"blob","sensitive":true},"S2a":{"type":"structure","members":{"SubnetIds":{"shape":"S2b"},"SecurityGroupIds":{"shape":"S2d"}}},"S2b":{"type":"list","member":{}},"S2d":{"type":"list","member":{}},"S2g":{"type":"structure","members":{"TargetArn":{}}},"S2i":{"type":"structure","members":{"Variables":{"shape":"S2j"}}},"S2j":{"type":"map","key":{"type":"string","sensitive":true},"value":{"type":"string","sensitive":true},"sensitive":true},"S2n":{"type":"structure","members":{"Mode":{}}},"S2p":{"type":"map","key":{},"value":{}},"S2s":{"type":"list","member":{}},"S2u":{"type":"list","member":{"type":"structure","required":["Arn","LocalMountPath"],"members":{"Arn":{},"LocalMountPath":{}}}},"S2y":{"type":"structure","members":{"EntryPoint":{"shape":"S2z"},"Command":{"shape":"S2z"},"WorkingDirectory":{}}},"S2z":{"type":"list","member":{}},"S31":{"type":"structure","members":{"FunctionName":{},"FunctionArn":{},"Runtime":{},"Role":{},"Handler":{},"CodeSize":{"type":"long"},"Description":{},"Timeout":{"type":"integer"},"MemorySize":{"type":"integer"},"LastModified":{},"CodeSha256":{},"Version":{},"VpcConfig":{"type":"structure","members":{"SubnetIds":{"shape":"S2b"},"SecurityGroupIds":{"shape":"S2d"},"VpcId":{}}},"DeadLetterConfig":{"shape":"S2g"},"Environment":{"type":"structure","members":{"Variables":{"shape":"S2j"},"Error":{"type":"structure","members":{"ErrorCode":{},"Message":{"shape":"S39"}}}}},"KMSKeyArn":{},"TracingConfig":{"type":"structure","members":{"Mode":{}}},"MasterArn":{},"RevisionId":{},"Layers":{"type":"list","member":{"type":"structure","members":{"Arn":{},"CodeSize":{"type":"long"},"SigningProfileVersionArn":{},"SigningJobArn":{}}}},"State":{},"StateReason":{},"StateReasonCode":{},"LastUpdateStatus":{},"LastUpdateStatusReason":{},"LastUpdateStatusReasonCode":{},"FileSystemConfigs":{"shape":"S2u"},"PackageType":{},"ImageConfigResponse":{"type":"structure","members":{"ImageConfig":{"shape":"S2y"},"Error":{"type":"structure","members":{"ErrorCode":{},"Message":{"shape":"S39"}}}}},"SigningProfileVersionArn":{},"SigningJobArn":{}}},"S39":{"type":"string","sensitive":true},"S48":{"type":"structure","members":{"ReservedConcurrentExecutions":{"type":"integer"}}},"S4g":{"type":"structure","members":{"LastModified":{"type":"timestamp"},"FunctionArn":{},"MaximumRetryAttempts":{"type":"integer"},"MaximumEventAgeInSeconds":{"type":"integer"},"DestinationConfig":{"shape":"S1a"}}},"S4k":{"type":"structure","members":{"Content":{"shape":"S4l"},"LayerArn":{},"LayerVersionArn":{},"Description":{},"CreatedDate":{},"Version":{"type":"long"},"CompatibleRuntimes":{"shape":"S4n"},"LicenseInfo":{}}},"S4l":{"type":"structure","members":{"Location":{},"CodeSha256":{},"CodeSize":{"type":"long"},"SigningProfileVersionArn":{},"SigningJobArn":{}}},"S4n":{"type":"list","member":{}},"S5p":{"type":"list","member":{"shape":"S31"}},"S5x":{"type":"structure","members":{"LayerVersionArn":{},"Version":{"type":"long"},"Description":{},"CreatedDate":{},"CompatibleRuntimes":{"shape":"S4n"},"LicenseInfo":{}}}}}

/***/ }),
/* 281 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"ListAliases":{"input_token":"Marker","limit_key":"MaxItems","output_token":"NextMarker","result_key":"Aliases"},"ListCodeSigningConfigs":{"input_token":"Marker","limit_key":"MaxItems","output_token":"NextMarker","result_key":"CodeSigningConfigs"},"ListEventSourceMappings":{"input_token":"Marker","limit_key":"MaxItems","output_token":"NextMarker","result_key":"EventSourceMappings"},"ListFunctionEventInvokeConfigs":{"input_token":"Marker","limit_key":"MaxItems","output_token":"NextMarker","result_key":"FunctionEventInvokeConfigs"},"ListFunctions":{"input_token":"Marker","limit_key":"MaxItems","output_token":"NextMarker","result_key":"Functions"},"ListFunctionsByCodeSigningConfig":{"input_token":"Marker","limit_key":"MaxItems","output_token":"NextMarker","result_key":"FunctionArns"},"ListLayerVersions":{"input_token":"Marker","limit_key":"MaxItems","output_token":"NextMarker","result_key":"LayerVersions"},"ListLayers":{"input_token":"Marker","limit_key":"MaxItems","output_token":"NextMarker","result_key":"Layers"},"ListProvisionedConcurrencyConfigs":{"input_token":"Marker","limit_key":"MaxItems","output_token":"NextMarker","result_key":"ProvisionedConcurrencyConfigs"},"ListVersionsByFunction":{"input_token":"Marker","limit_key":"MaxItems","output_token":"NextMarker","result_key":"Versions"}}}

/***/ }),
/* 282 */
/***/ (function(module, exports) {

	module.exports = {"version":2,"waiters":{"FunctionExists":{"delay":1,"operation":"GetFunction","maxAttempts":20,"acceptors":[{"state":"success","matcher":"status","expected":200},{"state":"retry","matcher":"error","expected":"ResourceNotFoundException"}]},"FunctionActive":{"delay":5,"maxAttempts":60,"operation":"GetFunctionConfiguration","description":"Waits for the function's State to be Active.","acceptors":[{"state":"success","matcher":"path","argument":"State","expected":"Active"},{"state":"failure","matcher":"path","argument":"State","expected":"Failed"},{"state":"retry","matcher":"path","argument":"State","expected":"Pending"}]},"FunctionUpdated":{"delay":5,"maxAttempts":60,"operation":"GetFunctionConfiguration","description":"Waits for the function's LastUpdateStatus to be Successful.","acceptors":[{"state":"success","matcher":"path","argument":"LastUpdateStatus","expected":"Successful"},{"state":"failure","matcher":"path","argument":"LastUpdateStatus","expected":"Failed"},{"state":"retry","matcher":"path","argument":"LastUpdateStatus","expected":"InProgress"}]}}}

/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['lexruntime'] = {};
	AWS.LexRuntime = Service.defineService('lexruntime', ['2016-11-28']);
	Object.defineProperty(apiLoader.services['lexruntime'], '2016-11-28', {
	  get: function get() {
	    var model = __webpack_require__(284);
	    model.paginators = __webpack_require__(285).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.LexRuntime;


/***/ }),
/* 284 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-11-28","endpointPrefix":"runtime.lex","jsonVersion":"1.1","protocol":"rest-json","serviceFullName":"Amazon Lex Runtime Service","serviceId":"Lex Runtime Service","signatureVersion":"v4","signingName":"lex","uid":"runtime.lex-2016-11-28"},"operations":{"DeleteSession":{"http":{"method":"DELETE","requestUri":"/bot/{botName}/alias/{botAlias}/user/{userId}/session"},"input":{"type":"structure","required":["botName","botAlias","userId"],"members":{"botName":{"location":"uri","locationName":"botName"},"botAlias":{"location":"uri","locationName":"botAlias"},"userId":{"location":"uri","locationName":"userId"}}},"output":{"type":"structure","members":{"botName":{},"botAlias":{},"userId":{},"sessionId":{}}}},"GetSession":{"http":{"method":"GET","requestUri":"/bot/{botName}/alias/{botAlias}/user/{userId}/session/"},"input":{"type":"structure","required":["botName","botAlias","userId"],"members":{"botName":{"location":"uri","locationName":"botName"},"botAlias":{"location":"uri","locationName":"botAlias"},"userId":{"location":"uri","locationName":"userId"},"checkpointLabelFilter":{"location":"querystring","locationName":"checkpointLabelFilter"}}},"output":{"type":"structure","members":{"recentIntentSummaryView":{"shape":"Sa"},"sessionAttributes":{"shape":"Sd"},"sessionId":{},"dialogAction":{"shape":"Sh"},"activeContexts":{"shape":"Sk"}}}},"PostContent":{"http":{"requestUri":"/bot/{botName}/alias/{botAlias}/user/{userId}/content"},"input":{"type":"structure","required":["botName","botAlias","userId","contentType","inputStream"],"members":{"botName":{"location":"uri","locationName":"botName"},"botAlias":{"location":"uri","locationName":"botAlias"},"userId":{"location":"uri","locationName":"userId"},"sessionAttributes":{"shape":"St","jsonvalue":true,"location":"header","locationName":"x-amz-lex-session-attributes"},"requestAttributes":{"shape":"St","jsonvalue":true,"location":"header","locationName":"x-amz-lex-request-attributes"},"contentType":{"location":"header","locationName":"Content-Type"},"accept":{"location":"header","locationName":"Accept"},"inputStream":{"shape":"Sw"},"activeContexts":{"shape":"Sx","jsonvalue":true,"location":"header","locationName":"x-amz-lex-active-contexts"}},"payload":"inputStream"},"output":{"type":"structure","members":{"contentType":{"location":"header","locationName":"Content-Type"},"intentName":{"location":"header","locationName":"x-amz-lex-intent-name"},"nluIntentConfidence":{"jsonvalue":true,"location":"header","locationName":"x-amz-lex-nlu-intent-confidence"},"alternativeIntents":{"jsonvalue":true,"location":"header","locationName":"x-amz-lex-alternative-intents"},"slots":{"jsonvalue":true,"location":"header","locationName":"x-amz-lex-slots"},"sessionAttributes":{"jsonvalue":true,"location":"header","locationName":"x-amz-lex-session-attributes"},"sentimentResponse":{"location":"header","locationName":"x-amz-lex-sentiment"},"message":{"shape":"Si","deprecated":true,"deprecatedMessage":"The message field is deprecated, use the encodedMessage field instead. The message field is available only in the de-DE, en-AU, en-GB, en-US, es-419, es-ES, es-US, fr-CA, fr-FR and it-IT locales.","location":"header","locationName":"x-amz-lex-message"},"encodedMessage":{"shape":"Sz","location":"header","locationName":"x-amz-lex-encoded-message"},"messageFormat":{"location":"header","locationName":"x-amz-lex-message-format"},"dialogState":{"location":"header","locationName":"x-amz-lex-dialog-state"},"slotToElicit":{"location":"header","locationName":"x-amz-lex-slot-to-elicit"},"inputTranscript":{"deprecated":true,"deprecatedMessage":"The inputTranscript field is deprecated, use the encodedInputTranscript field instead. The inputTranscript field is available only in the de-DE, en-AU, en-GB, en-US, es-419, es-ES, es-US, fr-CA, fr-FR and it-IT locales.","location":"header","locationName":"x-amz-lex-input-transcript"},"encodedInputTranscript":{"location":"header","locationName":"x-amz-lex-encoded-input-transcript","type":"string","sensitive":true},"audioStream":{"shape":"Sw"},"botVersion":{"location":"header","locationName":"x-amz-lex-bot-version"},"sessionId":{"location":"header","locationName":"x-amz-lex-session-id"},"activeContexts":{"shape":"Sx","jsonvalue":true,"location":"header","locationName":"x-amz-lex-active-contexts"}},"payload":"audioStream"},"authtype":"v4-unsigned-body"},"PostText":{"http":{"requestUri":"/bot/{botName}/alias/{botAlias}/user/{userId}/text"},"input":{"type":"structure","required":["botName","botAlias","userId","inputText"],"members":{"botName":{"location":"uri","locationName":"botName"},"botAlias":{"location":"uri","locationName":"botAlias"},"userId":{"location":"uri","locationName":"userId"},"sessionAttributes":{"shape":"Sd"},"requestAttributes":{"shape":"Sd"},"inputText":{"shape":"Si"},"activeContexts":{"shape":"Sk"}}},"output":{"type":"structure","members":{"intentName":{},"nluIntentConfidence":{"shape":"S15"},"alternativeIntents":{"type":"list","member":{"type":"structure","members":{"intentName":{},"nluIntentConfidence":{"shape":"S15"},"slots":{"shape":"Sd"}}}},"slots":{"shape":"Sd"},"sessionAttributes":{"shape":"Sd"},"message":{"shape":"Si"},"sentimentResponse":{"type":"structure","members":{"sentimentLabel":{},"sentimentScore":{}}},"messageFormat":{},"dialogState":{},"slotToElicit":{},"responseCard":{"type":"structure","members":{"version":{},"contentType":{},"genericAttachments":{"type":"list","member":{"type":"structure","members":{"title":{},"subTitle":{},"attachmentLinkUrl":{},"imageUrl":{},"buttons":{"type":"list","member":{"type":"structure","required":["text","value"],"members":{"text":{},"value":{}}}}}}}}},"sessionId":{},"botVersion":{},"activeContexts":{"shape":"Sk"}}}},"PutSession":{"http":{"requestUri":"/bot/{botName}/alias/{botAlias}/user/{userId}/session"},"input":{"type":"structure","required":["botName","botAlias","userId"],"members":{"botName":{"location":"uri","locationName":"botName"},"botAlias":{"location":"uri","locationName":"botAlias"},"userId":{"location":"uri","locationName":"userId"},"sessionAttributes":{"shape":"Sd"},"dialogAction":{"shape":"Sh"},"recentIntentSummaryView":{"shape":"Sa"},"accept":{"location":"header","locationName":"Accept"},"activeContexts":{"shape":"Sk"}}},"output":{"type":"structure","members":{"contentType":{"location":"header","locationName":"Content-Type"},"intentName":{"location":"header","locationName":"x-amz-lex-intent-name"},"slots":{"jsonvalue":true,"location":"header","locationName":"x-amz-lex-slots"},"sessionAttributes":{"jsonvalue":true,"location":"header","locationName":"x-amz-lex-session-attributes"},"message":{"shape":"Si","deprecated":true,"deprecatedMessage":"The message field is deprecated, use the encodedMessage field instead. The message field is available only in the de-DE, en-AU, en-GB, en-US, es-419, es-ES, es-US, fr-CA, fr-FR and it-IT locales.","location":"header","locationName":"x-amz-lex-message"},"encodedMessage":{"shape":"Sz","location":"header","locationName":"x-amz-lex-encoded-message"},"messageFormat":{"location":"header","locationName":"x-amz-lex-message-format"},"dialogState":{"location":"header","locationName":"x-amz-lex-dialog-state"},"slotToElicit":{"location":"header","locationName":"x-amz-lex-slot-to-elicit"},"audioStream":{"shape":"Sw"},"sessionId":{"location":"header","locationName":"x-amz-lex-session-id"},"activeContexts":{"shape":"Sx","jsonvalue":true,"location":"header","locationName":"x-amz-lex-active-contexts"}},"payload":"audioStream"}}},"shapes":{"Sa":{"type":"list","member":{"type":"structure","required":["dialogActionType"],"members":{"intentName":{},"checkpointLabel":{},"slots":{"shape":"Sd"},"confirmationStatus":{},"dialogActionType":{},"fulfillmentState":{},"slotToElicit":{}}}},"Sd":{"type":"map","key":{},"value":{},"sensitive":true},"Sh":{"type":"structure","required":["type"],"members":{"type":{},"intentName":{},"slots":{"shape":"Sd"},"slotToElicit":{},"fulfillmentState":{},"message":{"shape":"Si"},"messageFormat":{}}},"Si":{"type":"string","sensitive":true},"Sk":{"type":"list","member":{"type":"structure","required":["name","timeToLive","parameters"],"members":{"name":{},"timeToLive":{"type":"structure","members":{"timeToLiveInSeconds":{"type":"integer"},"turnsToLive":{"type":"integer"}}},"parameters":{"type":"map","key":{},"value":{"shape":"Si"}}}},"sensitive":true},"St":{"type":"string","sensitive":true},"Sw":{"type":"blob","streaming":true},"Sx":{"type":"string","sensitive":true},"Sz":{"type":"string","sensitive":true},"S15":{"type":"structure","members":{"score":{"type":"double"}}}}}

/***/ }),
/* 285 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{}}

/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['lightsail'] = {};
	AWS.Lightsail = Service.defineService('lightsail', ['2016-11-28']);
	Object.defineProperty(apiLoader.services['lightsail'], '2016-11-28', {
	  get: function get() {
	    var model = __webpack_require__(287);
	    model.paginators = __webpack_require__(288).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.Lightsail;


/***/ }),
/* 287 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-11-28","endpointPrefix":"lightsail","jsonVersion":"1.1","protocol":"json","serviceFullName":"Amazon Lightsail","serviceId":"Lightsail","signatureVersion":"v4","targetPrefix":"Lightsail_20161128","uid":"lightsail-2016-11-28"},"operations":{"AllocateStaticIp":{"input":{"type":"structure","required":["staticIpName"],"members":{"staticIpName":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"AttachCertificateToDistribution":{"input":{"type":"structure","required":["distributionName","certificateName"],"members":{"distributionName":{},"certificateName":{}}},"output":{"type":"structure","members":{"operation":{"shape":"S5"}}}},"AttachDisk":{"input":{"type":"structure","required":["diskName","instanceName","diskPath"],"members":{"diskName":{},"instanceName":{},"diskPath":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"AttachInstancesToLoadBalancer":{"input":{"type":"structure","required":["loadBalancerName","instanceNames"],"members":{"loadBalancerName":{},"instanceNames":{"shape":"Sk"}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"AttachLoadBalancerTlsCertificate":{"input":{"type":"structure","required":["loadBalancerName","certificateName"],"members":{"loadBalancerName":{},"certificateName":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"AttachStaticIp":{"input":{"type":"structure","required":["staticIpName","instanceName"],"members":{"staticIpName":{},"instanceName":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"CloseInstancePublicPorts":{"input":{"type":"structure","required":["portInfo","instanceName"],"members":{"portInfo":{"shape":"Sr"},"instanceName":{}}},"output":{"type":"structure","members":{"operation":{"shape":"S5"}}}},"CopySnapshot":{"input":{"type":"structure","required":["targetSnapshotName","sourceRegion"],"members":{"sourceSnapshotName":{},"sourceResourceName":{},"restoreDate":{},"useLatestRestorableAutoSnapshot":{"type":"boolean"},"targetSnapshotName":{},"sourceRegion":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"CreateBucket":{"input":{"type":"structure","required":["bucketName","bundleId"],"members":{"bucketName":{},"bundleId":{},"tags":{"shape":"S10"},"enableObjectVersioning":{"type":"boolean"}}},"output":{"type":"structure","members":{"bucket":{"shape":"S15"},"operations":{"shape":"S4"}}}},"CreateBucketAccessKey":{"input":{"type":"structure","required":["bucketName"],"members":{"bucketName":{}}},"output":{"type":"structure","members":{"accessKey":{"shape":"S1e"},"operations":{"shape":"S4"}}}},"CreateCertificate":{"input":{"type":"structure","required":["certificateName","domainName"],"members":{"certificateName":{},"domainName":{},"subjectAlternativeNames":{"shape":"S1k"},"tags":{"shape":"S10"}}},"output":{"type":"structure","members":{"certificate":{"shape":"S1m"},"operations":{"shape":"S4"}}}},"CreateCloudFormationStack":{"input":{"type":"structure","required":["instances"],"members":{"instances":{"type":"list","member":{"type":"structure","required":["sourceName","instanceType","portInfoSource","availabilityZone"],"members":{"sourceName":{},"instanceType":{},"portInfoSource":{},"userData":{},"availabilityZone":{}}}}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"CreateContactMethod":{"input":{"type":"structure","required":["protocol","contactEndpoint"],"members":{"protocol":{},"contactEndpoint":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"CreateContainerService":{"input":{"type":"structure","required":["serviceName","power","scale"],"members":{"serviceName":{},"power":{},"scale":{"type":"integer"},"tags":{"shape":"S10"},"publicDomainNames":{"shape":"S2f"},"deployment":{"type":"structure","members":{"containers":{"shape":"S2i"},"publicEndpoint":{"shape":"S2o"}}}}},"output":{"type":"structure","members":{"containerService":{"shape":"S2s"}}}},"CreateContainerServiceDeployment":{"input":{"type":"structure","required":["serviceName"],"members":{"serviceName":{},"containers":{"shape":"S2i"},"publicEndpoint":{"shape":"S2o"}}},"output":{"type":"structure","members":{"containerService":{"shape":"S2s"}}}},"CreateContainerServiceRegistryLogin":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"registryLogin":{"type":"structure","members":{"username":{},"password":{},"expiresAt":{"type":"timestamp"},"registry":{}}}}}},"CreateDisk":{"input":{"type":"structure","required":["diskName","availabilityZone","sizeInGb"],"members":{"diskName":{},"availabilityZone":{},"sizeInGb":{"type":"integer"},"tags":{"shape":"S10"},"addOns":{"shape":"S35"}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"CreateDiskFromSnapshot":{"input":{"type":"structure","required":["diskName","availabilityZone","sizeInGb"],"members":{"diskName":{},"diskSnapshotName":{},"availabilityZone":{},"sizeInGb":{"type":"integer"},"tags":{"shape":"S10"},"addOns":{"shape":"S35"},"sourceDiskName":{},"restoreDate":{},"useLatestRestorableAutoSnapshot":{"type":"boolean"}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"CreateDiskSnapshot":{"input":{"type":"structure","required":["diskSnapshotName"],"members":{"diskName":{},"diskSnapshotName":{},"instanceName":{},"tags":{"shape":"S10"}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"CreateDistribution":{"input":{"type":"structure","required":["distributionName","origin","defaultCacheBehavior","bundleId"],"members":{"distributionName":{},"origin":{"shape":"S3g"},"defaultCacheBehavior":{"shape":"S3i"},"cacheBehaviorSettings":{"shape":"S3k"},"cacheBehaviors":{"shape":"S3s"},"bundleId":{},"ipAddressType":{},"tags":{"shape":"S10"}}},"output":{"type":"structure","members":{"distribution":{"shape":"S3w"},"operation":{"shape":"S5"}}}},"CreateDomain":{"input":{"type":"structure","required":["domainName"],"members":{"domainName":{},"tags":{"shape":"S10"}}},"output":{"type":"structure","members":{"operation":{"shape":"S5"}}}},"CreateDomainEntry":{"input":{"type":"structure","required":["domainName","domainEntry"],"members":{"domainName":{},"domainEntry":{"shape":"S41"}}},"output":{"type":"structure","members":{"operation":{"shape":"S5"}}}},"CreateInstanceSnapshot":{"input":{"type":"structure","required":["instanceSnapshotName","instanceName"],"members":{"instanceSnapshotName":{},"instanceName":{},"tags":{"shape":"S10"}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"CreateInstances":{"input":{"type":"structure","required":["instanceNames","availabilityZone","blueprintId","bundleId"],"members":{"instanceNames":{"shape":"Su"},"availabilityZone":{},"customImageName":{"deprecated":true},"blueprintId":{},"bundleId":{},"userData":{},"keyPairName":{},"tags":{"shape":"S10"},"addOns":{"shape":"S35"},"ipAddressType":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"CreateInstancesFromSnapshot":{"input":{"type":"structure","required":["instanceNames","availabilityZone","bundleId"],"members":{"instanceNames":{"shape":"Su"},"attachedDiskMapping":{"type":"map","key":{},"value":{"type":"list","member":{"type":"structure","members":{"originalDiskPath":{},"newDiskName":{}}}}},"availabilityZone":{},"instanceSnapshotName":{},"bundleId":{},"userData":{},"keyPairName":{},"tags":{"shape":"S10"},"addOns":{"shape":"S35"},"ipAddressType":{},"sourceInstanceName":{},"restoreDate":{},"useLatestRestorableAutoSnapshot":{"type":"boolean"}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"CreateKeyPair":{"input":{"type":"structure","required":["keyPairName"],"members":{"keyPairName":{},"tags":{"shape":"S10"}}},"output":{"type":"structure","members":{"keyPair":{"shape":"S4h"},"publicKeyBase64":{},"privateKeyBase64":{},"operation":{"shape":"S5"}}}},"CreateLoadBalancer":{"input":{"type":"structure","required":["loadBalancerName","instancePort"],"members":{"loadBalancerName":{},"instancePort":{"type":"integer"},"healthCheckPath":{},"certificateName":{},"certificateDomainName":{},"certificateAlternativeNames":{"shape":"S4k"},"tags":{"shape":"S10"},"ipAddressType":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"CreateLoadBalancerTlsCertificate":{"input":{"type":"structure","required":["loadBalancerName","certificateName","certificateDomainName"],"members":{"loadBalancerName":{},"certificateName":{},"certificateDomainName":{},"certificateAlternativeNames":{"shape":"S4k"},"tags":{"shape":"S10"}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"CreateRelationalDatabase":{"input":{"type":"structure","required":["relationalDatabaseName","relationalDatabaseBlueprintId","relationalDatabaseBundleId","masterDatabaseName","masterUsername"],"members":{"relationalDatabaseName":{},"availabilityZone":{},"relationalDatabaseBlueprintId":{},"relationalDatabaseBundleId":{},"masterDatabaseName":{},"masterUsername":{},"masterUserPassword":{"shape":"S4p"},"preferredBackupWindow":{},"preferredMaintenanceWindow":{},"publiclyAccessible":{"type":"boolean"},"tags":{"shape":"S10"}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"CreateRelationalDatabaseFromSnapshot":{"input":{"type":"structure","required":["relationalDatabaseName"],"members":{"relationalDatabaseName":{},"availabilityZone":{},"publiclyAccessible":{"type":"boolean"},"relationalDatabaseSnapshotName":{},"relationalDatabaseBundleId":{},"sourceRelationalDatabaseName":{},"restoreTime":{"type":"timestamp"},"useLatestRestorableTime":{"type":"boolean"},"tags":{"shape":"S10"}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"CreateRelationalDatabaseSnapshot":{"input":{"type":"structure","required":["relationalDatabaseName","relationalDatabaseSnapshotName"],"members":{"relationalDatabaseName":{},"relationalDatabaseSnapshotName":{},"tags":{"shape":"S10"}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"DeleteAlarm":{"input":{"type":"structure","required":["alarmName"],"members":{"alarmName":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"DeleteAutoSnapshot":{"input":{"type":"structure","required":["resourceName","date"],"members":{"resourceName":{},"date":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"DeleteBucket":{"input":{"type":"structure","required":["bucketName"],"members":{"bucketName":{},"forceDelete":{"type":"boolean"}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"DeleteBucketAccessKey":{"input":{"type":"structure","required":["bucketName","accessKeyId"],"members":{"bucketName":{},"accessKeyId":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"DeleteCertificate":{"input":{"type":"structure","required":["certificateName"],"members":{"certificateName":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"DeleteContactMethod":{"input":{"type":"structure","required":["protocol"],"members":{"protocol":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"DeleteContainerImage":{"input":{"type":"structure","required":["serviceName","image"],"members":{"serviceName":{},"image":{}}},"output":{"type":"structure","members":{}}},"DeleteContainerService":{"input":{"type":"structure","required":["serviceName"],"members":{"serviceName":{}}},"output":{"type":"structure","members":{}}},"DeleteDisk":{"input":{"type":"structure","required":["diskName"],"members":{"diskName":{},"forceDeleteAddOns":{"type":"boolean"}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"DeleteDiskSnapshot":{"input":{"type":"structure","required":["diskSnapshotName"],"members":{"diskSnapshotName":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"DeleteDistribution":{"input":{"type":"structure","members":{"distributionName":{}}},"output":{"type":"structure","members":{"operation":{"shape":"S5"}}}},"DeleteDomain":{"input":{"type":"structure","required":["domainName"],"members":{"domainName":{}}},"output":{"type":"structure","members":{"operation":{"shape":"S5"}}}},"DeleteDomainEntry":{"input":{"type":"structure","required":["domainName","domainEntry"],"members":{"domainName":{},"domainEntry":{"shape":"S41"}}},"output":{"type":"structure","members":{"operation":{"shape":"S5"}}}},"DeleteInstance":{"input":{"type":"structure","required":["instanceName"],"members":{"instanceName":{},"forceDeleteAddOns":{"type":"boolean"}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"DeleteInstanceSnapshot":{"input":{"type":"structure","required":["instanceSnapshotName"],"members":{"instanceSnapshotName":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"DeleteKeyPair":{"input":{"type":"structure","required":["keyPairName"],"members":{"keyPairName":{}}},"output":{"type":"structure","members":{"operation":{"shape":"S5"}}}},"DeleteKnownHostKeys":{"input":{"type":"structure","required":["instanceName"],"members":{"instanceName":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"DeleteLoadBalancer":{"input":{"type":"structure","required":["loadBalancerName"],"members":{"loadBalancerName":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"DeleteLoadBalancerTlsCertificate":{"input":{"type":"structure","required":["loadBalancerName","certificateName"],"members":{"loadBalancerName":{},"certificateName":{},"force":{"type":"boolean"}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"DeleteRelationalDatabase":{"input":{"type":"structure","required":["relationalDatabaseName"],"members":{"relationalDatabaseName":{},"skipFinalSnapshot":{"type":"boolean"},"finalRelationalDatabaseSnapshotName":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"DeleteRelationalDatabaseSnapshot":{"input":{"type":"structure","required":["relationalDatabaseSnapshotName"],"members":{"relationalDatabaseSnapshotName":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"DetachCertificateFromDistribution":{"input":{"type":"structure","required":["distributionName"],"members":{"distributionName":{}}},"output":{"type":"structure","members":{"operation":{"shape":"S5"}}}},"DetachDisk":{"input":{"type":"structure","required":["diskName"],"members":{"diskName":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"DetachInstancesFromLoadBalancer":{"input":{"type":"structure","required":["loadBalancerName","instanceNames"],"members":{"loadBalancerName":{},"instanceNames":{"shape":"Sk"}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"DetachStaticIp":{"input":{"type":"structure","required":["staticIpName"],"members":{"staticIpName":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"DisableAddOn":{"input":{"type":"structure","required":["addOnType","resourceName"],"members":{"addOnType":{},"resourceName":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"DownloadDefaultKeyPair":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"publicKeyBase64":{},"privateKeyBase64":{}}}},"EnableAddOn":{"input":{"type":"structure","required":["resourceName","addOnRequest"],"members":{"resourceName":{},"addOnRequest":{"shape":"S36"}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"ExportSnapshot":{"input":{"type":"structure","required":["sourceSnapshotName"],"members":{"sourceSnapshotName":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"GetActiveNames":{"input":{"type":"structure","members":{"pageToken":{}}},"output":{"type":"structure","members":{"activeNames":{"shape":"Su"},"nextPageToken":{}}}},"GetAlarms":{"input":{"type":"structure","members":{"alarmName":{},"pageToken":{},"monitoredResourceName":{}}},"output":{"type":"structure","members":{"alarms":{"type":"list","member":{"type":"structure","members":{"name":{},"arn":{},"createdAt":{"type":"timestamp"},"location":{"shape":"S9"},"resourceType":{},"supportCode":{},"monitoredResourceInfo":{"type":"structure","members":{"arn":{},"name":{},"resourceType":{}}},"comparisonOperator":{},"evaluationPeriods":{"type":"integer"},"period":{"type":"integer"},"threshold":{"type":"double"},"datapointsToAlarm":{"type":"integer"},"treatMissingData":{},"statistic":{},"metricName":{},"state":{},"unit":{},"contactProtocols":{"shape":"S6y"},"notificationTriggers":{"shape":"S6z"},"notificationEnabled":{"type":"boolean"}}}},"nextPageToken":{}}}},"GetAutoSnapshots":{"input":{"type":"structure","required":["resourceName"],"members":{"resourceName":{}}},"output":{"type":"structure","members":{"resourceName":{},"resourceType":{},"autoSnapshots":{"type":"list","member":{"type":"structure","members":{"date":{},"createdAt":{"type":"timestamp"},"status":{},"fromAttachedDisks":{"type":"list","member":{"type":"structure","members":{"path":{},"sizeInGb":{"type":"integer"}}}}}}}}}},"GetBlueprints":{"input":{"type":"structure","members":{"includeInactive":{"type":"boolean"},"pageToken":{}}},"output":{"type":"structure","members":{"blueprints":{"type":"list","member":{"type":"structure","members":{"blueprintId":{},"name":{},"group":{},"type":{},"description":{},"isActive":{"type":"boolean"},"minPower":{"type":"integer"},"version":{},"versionCode":{},"productUrl":{},"licenseUrl":{},"platform":{}}}},"nextPageToken":{}}}},"GetBucketAccessKeys":{"input":{"type":"structure","required":["bucketName"],"members":{"bucketName":{}}},"output":{"type":"structure","members":{"accessKeys":{"type":"list","member":{"shape":"S1e"}}}}},"GetBucketBundles":{"input":{"type":"structure","members":{"includeInactive":{"type":"boolean"}}},"output":{"type":"structure","members":{"bundles":{"type":"list","member":{"type":"structure","members":{"bundleId":{},"name":{},"price":{"type":"float"},"storagePerMonthInGb":{"type":"integer"},"transferPerMonthInGb":{"type":"integer"},"isActive":{"type":"boolean"}}}}}}},"GetBucketMetricData":{"input":{"type":"structure","required":["bucketName","metricName","startTime","endTime","period","statistics","unit"],"members":{"bucketName":{},"metricName":{},"startTime":{"type":"timestamp"},"endTime":{"type":"timestamp"},"period":{"type":"integer"},"statistics":{"shape":"S7n"},"unit":{}}},"output":{"type":"structure","members":{"metricName":{},"metricData":{"shape":"S7p"}}}},"GetBuckets":{"input":{"type":"structure","members":{"bucketName":{},"pageToken":{},"includeConnectedResources":{"type":"boolean"}}},"output":{"type":"structure","members":{"buckets":{"type":"list","member":{"shape":"S15"}},"nextPageToken":{}}}},"GetBundles":{"input":{"type":"structure","members":{"includeInactive":{"type":"boolean"},"pageToken":{}}},"output":{"type":"structure","members":{"bundles":{"type":"list","member":{"type":"structure","members":{"price":{"type":"float"},"cpuCount":{"type":"integer"},"diskSizeInGb":{"type":"integer"},"bundleId":{},"instanceType":{},"isActive":{"type":"boolean"},"name":{},"power":{"type":"integer"},"ramSizeInGb":{"type":"float"},"transferPerMonthInGb":{"type":"integer"},"supportedPlatforms":{"type":"list","member":{}}}}},"nextPageToken":{}}}},"GetCertificates":{"input":{"type":"structure","members":{"certificateStatuses":{"type":"list","member":{}},"includeCertificateDetails":{"type":"boolean"},"certificateName":{}}},"output":{"type":"structure","members":{"certificates":{"type":"list","member":{"shape":"S1m"}}}}},"GetCloudFormationStackRecords":{"input":{"type":"structure","members":{"pageToken":{}}},"output":{"type":"structure","members":{"cloudFormationStackRecords":{"type":"list","member":{"type":"structure","members":{"name":{},"arn":{},"createdAt":{"type":"timestamp"},"location":{"shape":"S9"},"resourceType":{},"state":{},"sourceInfo":{"type":"list","member":{"type":"structure","members":{"resourceType":{},"name":{},"arn":{}}}},"destinationInfo":{"shape":"S8d"}}}},"nextPageToken":{}}}},"GetContactMethods":{"input":{"type":"structure","members":{"protocols":{"shape":"S6y"}}},"output":{"type":"structure","members":{"contactMethods":{"type":"list","member":{"type":"structure","members":{"contactEndpoint":{},"status":{},"protocol":{},"name":{},"arn":{},"createdAt":{"type":"timestamp"},"location":{"shape":"S9"},"resourceType":{},"supportCode":{}}}}}}},"GetContainerAPIMetadata":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"metadata":{"type":"list","member":{"type":"map","key":{},"value":{}}}}}},"GetContainerImages":{"input":{"type":"structure","required":["serviceName"],"members":{"serviceName":{}}},"output":{"type":"structure","members":{"containerImages":{"type":"list","member":{"shape":"S8q"}}}}},"GetContainerLog":{"input":{"type":"structure","required":["serviceName","containerName"],"members":{"serviceName":{},"containerName":{},"startTime":{"type":"timestamp"},"endTime":{"type":"timestamp"},"filterPattern":{},"pageToken":{}}},"output":{"type":"structure","members":{"logEvents":{"type":"list","member":{"type":"structure","members":{"createdAt":{"type":"timestamp"},"message":{}}}},"nextPageToken":{}}}},"GetContainerServiceDeployments":{"input":{"type":"structure","required":["serviceName"],"members":{"serviceName":{}}},"output":{"type":"structure","members":{"deployments":{"type":"list","member":{"shape":"S2w"}}}}},"GetContainerServiceMetricData":{"input":{"type":"structure","required":["serviceName","metricName","startTime","endTime","period","statistics"],"members":{"serviceName":{},"metricName":{},"startTime":{"type":"timestamp"},"endTime":{"type":"timestamp"},"period":{"type":"integer"},"statistics":{"shape":"S7n"}}},"output":{"type":"structure","members":{"metricName":{},"metricData":{"shape":"S7p"}}}},"GetContainerServicePowers":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"powers":{"type":"list","member":{"type":"structure","members":{"powerId":{},"price":{"type":"float"},"cpuCount":{"type":"float"},"ramSizeInGb":{"type":"float"},"name":{},"isActive":{"type":"boolean"}}}}}}},"GetContainerServices":{"input":{"type":"structure","members":{"serviceName":{}}},"output":{"type":"structure","members":{"containerServices":{"type":"list","member":{"shape":"S2s"}}}}},"GetDisk":{"input":{"type":"structure","required":["diskName"],"members":{"diskName":{}}},"output":{"type":"structure","members":{"disk":{"shape":"S9a"}}}},"GetDiskSnapshot":{"input":{"type":"structure","required":["diskSnapshotName"],"members":{"diskSnapshotName":{}}},"output":{"type":"structure","members":{"diskSnapshot":{"shape":"S9g"}}}},"GetDiskSnapshots":{"input":{"type":"structure","members":{"pageToken":{}}},"output":{"type":"structure","members":{"diskSnapshots":{"type":"list","member":{"shape":"S9g"}},"nextPageToken":{}}}},"GetDisks":{"input":{"type":"structure","members":{"pageToken":{}}},"output":{"type":"structure","members":{"disks":{"shape":"S9n"},"nextPageToken":{}}}},"GetDistributionBundles":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"bundles":{"type":"list","member":{"type":"structure","members":{"bundleId":{},"name":{},"price":{"type":"float"},"transferPerMonthInGb":{"type":"integer"},"isActive":{"type":"boolean"}}}}}}},"GetDistributionLatestCacheReset":{"input":{"type":"structure","members":{"distributionName":{}}},"output":{"type":"structure","members":{"status":{},"createTime":{"type":"timestamp"}}}},"GetDistributionMetricData":{"input":{"type":"structure","required":["distributionName","metricName","startTime","endTime","period","unit","statistics"],"members":{"distributionName":{},"metricName":{},"startTime":{"type":"timestamp"},"endTime":{"type":"timestamp"},"period":{"type":"integer"},"unit":{},"statistics":{"shape":"S7n"}}},"output":{"type":"structure","members":{"metricName":{},"metricData":{"shape":"S7p"}}}},"GetDistributions":{"input":{"type":"structure","members":{"distributionName":{},"pageToken":{}}},"output":{"type":"structure","members":{"distributions":{"type":"list","member":{"shape":"S3w"}},"nextPageToken":{}}}},"GetDomain":{"input":{"type":"structure","required":["domainName"],"members":{"domainName":{}}},"output":{"type":"structure","members":{"domain":{"shape":"Sa2"}}}},"GetDomains":{"input":{"type":"structure","members":{"pageToken":{}}},"output":{"type":"structure","members":{"domains":{"type":"list","member":{"shape":"Sa2"}},"nextPageToken":{}}}},"GetExportSnapshotRecords":{"input":{"type":"structure","members":{"pageToken":{}}},"output":{"type":"structure","members":{"exportSnapshotRecords":{"type":"list","member":{"type":"structure","members":{"name":{},"arn":{},"createdAt":{"type":"timestamp"},"location":{"shape":"S9"},"resourceType":{},"state":{},"sourceInfo":{"type":"structure","members":{"resourceType":{},"createdAt":{"type":"timestamp"},"name":{},"arn":{},"fromResourceName":{},"fromResourceArn":{},"instanceSnapshotInfo":{"type":"structure","members":{"fromBundleId":{},"fromBlueprintId":{},"fromDiskInfo":{"type":"list","member":{"type":"structure","members":{"name":{},"path":{},"sizeInGb":{"type":"integer"},"isSystemDisk":{"type":"boolean"}}}}}},"diskSnapshotInfo":{"type":"structure","members":{"sizeInGb":{"type":"integer"}}}}},"destinationInfo":{"shape":"S8d"}}}},"nextPageToken":{}}}},"GetInstance":{"input":{"type":"structure","required":["instanceName"],"members":{"instanceName":{}}},"output":{"type":"structure","members":{"instance":{"shape":"Saj"}}}},"GetInstanceAccessDetails":{"input":{"type":"structure","required":["instanceName"],"members":{"instanceName":{},"protocol":{}}},"output":{"type":"structure","members":{"accessDetails":{"type":"structure","members":{"certKey":{},"expiresAt":{"type":"timestamp"},"ipAddress":{},"password":{},"passwordData":{"type":"structure","members":{"ciphertext":{},"keyPairName":{}}},"privateKey":{},"protocol":{},"instanceName":{},"username":{},"hostKeys":{"type":"list","member":{"type":"structure","members":{"algorithm":{},"publicKey":{},"witnessedAt":{"type":"timestamp"},"fingerprintSHA1":{},"fingerprintSHA256":{},"notValidBefore":{"type":"timestamp"},"notValidAfter":{"type":"timestamp"}}}}}}}}},"GetInstanceMetricData":{"input":{"type":"structure","required":["instanceName","metricName","period","startTime","endTime","unit","statistics"],"members":{"instanceName":{},"metricName":{},"period":{"type":"integer"},"startTime":{"type":"timestamp"},"endTime":{"type":"timestamp"},"unit":{},"statistics":{"shape":"S7n"}}},"output":{"type":"structure","members":{"metricName":{},"metricData":{"shape":"S7p"}}}},"GetInstancePortStates":{"input":{"type":"structure","required":["instanceName"],"members":{"instanceName":{}}},"output":{"type":"structure","members":{"portStates":{"type":"list","member":{"type":"structure","members":{"fromPort":{"type":"integer"},"toPort":{"type":"integer"},"protocol":{},"state":{},"cidrs":{"shape":"Su"},"ipv6Cidrs":{"shape":"Su"},"cidrListAliases":{"shape":"Su"}}}}}}},"GetInstanceSnapshot":{"input":{"type":"structure","required":["instanceSnapshotName"],"members":{"instanceSnapshotName":{}}},"output":{"type":"structure","members":{"instanceSnapshot":{"shape":"Sbc"}}}},"GetInstanceSnapshots":{"input":{"type":"structure","members":{"pageToken":{}}},"output":{"type":"structure","members":{"instanceSnapshots":{"type":"list","member":{"shape":"Sbc"}},"nextPageToken":{}}}},"GetInstanceState":{"input":{"type":"structure","required":["instanceName"],"members":{"instanceName":{}}},"output":{"type":"structure","members":{"state":{"shape":"Sau"}}}},"GetInstances":{"input":{"type":"structure","members":{"pageToken":{}}},"output":{"type":"structure","members":{"instances":{"type":"list","member":{"shape":"Saj"}},"nextPageToken":{}}}},"GetKeyPair":{"input":{"type":"structure","required":["keyPairName"],"members":{"keyPairName":{}}},"output":{"type":"structure","members":{"keyPair":{"shape":"S4h"}}}},"GetKeyPairs":{"input":{"type":"structure","members":{"pageToken":{}}},"output":{"type":"structure","members":{"keyPairs":{"type":"list","member":{"shape":"S4h"}},"nextPageToken":{}}}},"GetLoadBalancer":{"input":{"type":"structure","required":["loadBalancerName"],"members":{"loadBalancerName":{}}},"output":{"type":"structure","members":{"loadBalancer":{"shape":"Sbt"}}}},"GetLoadBalancerMetricData":{"input":{"type":"structure","required":["loadBalancerName","metricName","period","startTime","endTime","unit","statistics"],"members":{"loadBalancerName":{},"metricName":{},"period":{"type":"integer"},"startTime":{"type":"timestamp"},"endTime":{"type":"timestamp"},"unit":{},"statistics":{"shape":"S7n"}}},"output":{"type":"structure","members":{"metricName":{},"metricData":{"shape":"S7p"}}}},"GetLoadBalancerTlsCertificates":{"input":{"type":"structure","required":["loadBalancerName"],"members":{"loadBalancerName":{}}},"output":{"type":"structure","members":{"tlsCertificates":{"type":"list","member":{"type":"structure","members":{"name":{},"arn":{},"supportCode":{},"createdAt":{"type":"timestamp"},"location":{"shape":"S9"},"resourceType":{},"tags":{"shape":"S10"},"loadBalancerName":{},"isAttached":{"type":"boolean"},"status":{},"domainName":{},"domainValidationRecords":{"type":"list","member":{"type":"structure","members":{"name":{},"type":{},"value":{},"validationStatus":{},"domainName":{}}}},"failureReason":{},"issuedAt":{"type":"timestamp"},"issuer":{},"keyAlgorithm":{},"notAfter":{"type":"timestamp"},"notBefore":{"type":"timestamp"},"renewalSummary":{"type":"structure","members":{"renewalStatus":{},"domainValidationOptions":{"type":"list","member":{"type":"structure","members":{"domainName":{},"validationStatus":{}}}}}},"revocationReason":{},"revokedAt":{"type":"timestamp"},"serial":{},"signatureAlgorithm":{},"subject":{},"subjectAlternativeNames":{"shape":"Su"}}}}}}},"GetLoadBalancers":{"input":{"type":"structure","members":{"pageToken":{}}},"output":{"type":"structure","members":{"loadBalancers":{"type":"list","member":{"shape":"Sbt"}},"nextPageToken":{}}}},"GetOperation":{"input":{"type":"structure","required":["operationId"],"members":{"operationId":{}}},"output":{"type":"structure","members":{"operation":{"shape":"S5"}}}},"GetOperations":{"input":{"type":"structure","members":{"pageToken":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"},"nextPageToken":{}}}},"GetOperationsForResource":{"input":{"type":"structure","required":["resourceName"],"members":{"resourceName":{},"pageToken":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"},"nextPageCount":{"deprecated":true},"nextPageToken":{}}}},"GetRegions":{"input":{"type":"structure","members":{"includeAvailabilityZones":{"type":"boolean"},"includeRelationalDatabaseAvailabilityZones":{"type":"boolean"}}},"output":{"type":"structure","members":{"regions":{"type":"list","member":{"type":"structure","members":{"continentCode":{},"description":{},"displayName":{},"name":{},"availabilityZones":{"shape":"Scz"},"relationalDatabaseAvailabilityZones":{"shape":"Scz"}}}}}}},"GetRelationalDatabase":{"input":{"type":"structure","required":["relationalDatabaseName"],"members":{"relationalDatabaseName":{}}},"output":{"type":"structure","members":{"relationalDatabase":{"shape":"Sd3"}}}},"GetRelationalDatabaseBlueprints":{"input":{"type":"structure","members":{"pageToken":{}}},"output":{"type":"structure","members":{"blueprints":{"type":"list","member":{"type":"structure","members":{"blueprintId":{},"engine":{},"engineVersion":{},"engineDescription":{},"engineVersionDescription":{},"isEngineDefault":{"type":"boolean"}}}},"nextPageToken":{}}}},"GetRelationalDatabaseBundles":{"input":{"type":"structure","members":{"pageToken":{}}},"output":{"type":"structure","members":{"bundles":{"type":"list","member":{"type":"structure","members":{"bundleId":{},"name":{},"price":{"type":"float"},"ramSizeInGb":{"type":"float"},"diskSizeInGb":{"type":"integer"},"transferPerMonthInGb":{"type":"integer"},"cpuCount":{"type":"integer"},"isEncrypted":{"type":"boolean"},"isActive":{"type":"boolean"}}}},"nextPageToken":{}}}},"GetRelationalDatabaseEvents":{"input":{"type":"structure","required":["relationalDatabaseName"],"members":{"relationalDatabaseName":{},"durationInMinutes":{"type":"integer"},"pageToken":{}}},"output":{"type":"structure","members":{"relationalDatabaseEvents":{"type":"list","member":{"type":"structure","members":{"resource":{},"createdAt":{"type":"timestamp"},"message":{},"eventCategories":{"shape":"Su"}}}},"nextPageToken":{}}}},"GetRelationalDatabaseLogEvents":{"input":{"type":"structure","required":["relationalDatabaseName","logStreamName"],"members":{"relationalDatabaseName":{},"logStreamName":{},"startTime":{"type":"timestamp"},"endTime":{"type":"timestamp"},"startFromHead":{"type":"boolean"},"pageToken":{}}},"output":{"type":"structure","members":{"resourceLogEvents":{"type":"list","member":{"type":"structure","members":{"createdAt":{"type":"timestamp"},"message":{}}}},"nextBackwardToken":{},"nextForwardToken":{}}}},"GetRelationalDatabaseLogStreams":{"input":{"type":"structure","required":["relationalDatabaseName"],"members":{"relationalDatabaseName":{}}},"output":{"type":"structure","members":{"logStreams":{"shape":"Su"}}}},"GetRelationalDatabaseMasterUserPassword":{"input":{"type":"structure","required":["relationalDatabaseName"],"members":{"relationalDatabaseName":{},"passwordVersion":{}}},"output":{"type":"structure","members":{"masterUserPassword":{"shape":"S4p"},"createdAt":{"type":"timestamp"}}}},"GetRelationalDatabaseMetricData":{"input":{"type":"structure","required":["relationalDatabaseName","metricName","period","startTime","endTime","unit","statistics"],"members":{"relationalDatabaseName":{},"metricName":{},"period":{"type":"integer"},"startTime":{"type":"timestamp"},"endTime":{"type":"timestamp"},"unit":{},"statistics":{"shape":"S7n"}}},"output":{"type":"structure","members":{"metricName":{},"metricData":{"shape":"S7p"}}}},"GetRelationalDatabaseParameters":{"input":{"type":"structure","required":["relationalDatabaseName"],"members":{"relationalDatabaseName":{},"pageToken":{}}},"output":{"type":"structure","members":{"parameters":{"shape":"Se0"},"nextPageToken":{}}}},"GetRelationalDatabaseSnapshot":{"input":{"type":"structure","required":["relationalDatabaseSnapshotName"],"members":{"relationalDatabaseSnapshotName":{}}},"output":{"type":"structure","members":{"relationalDatabaseSnapshot":{"shape":"Se4"}}}},"GetRelationalDatabaseSnapshots":{"input":{"type":"structure","members":{"pageToken":{}}},"output":{"type":"structure","members":{"relationalDatabaseSnapshots":{"type":"list","member":{"shape":"Se4"}},"nextPageToken":{}}}},"GetRelationalDatabases":{"input":{"type":"structure","members":{"pageToken":{}}},"output":{"type":"structure","members":{"relationalDatabases":{"type":"list","member":{"shape":"Sd3"}},"nextPageToken":{}}}},"GetStaticIp":{"input":{"type":"structure","required":["staticIpName"],"members":{"staticIpName":{}}},"output":{"type":"structure","members":{"staticIp":{"shape":"Sed"}}}},"GetStaticIps":{"input":{"type":"structure","members":{"pageToken":{}}},"output":{"type":"structure","members":{"staticIps":{"type":"list","member":{"shape":"Sed"}},"nextPageToken":{}}}},"ImportKeyPair":{"input":{"type":"structure","required":["keyPairName","publicKeyBase64"],"members":{"keyPairName":{},"publicKeyBase64":{}}},"output":{"type":"structure","members":{"operation":{"shape":"S5"}}}},"IsVpcPeered":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"isPeered":{"type":"boolean"}}}},"OpenInstancePublicPorts":{"input":{"type":"structure","required":["portInfo","instanceName"],"members":{"portInfo":{"shape":"Sr"},"instanceName":{}}},"output":{"type":"structure","members":{"operation":{"shape":"S5"}}}},"PeerVpc":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"operation":{"shape":"S5"}}}},"PutAlarm":{"input":{"type":"structure","required":["alarmName","metricName","monitoredResourceName","comparisonOperator","threshold","evaluationPeriods"],"members":{"alarmName":{},"metricName":{},"monitoredResourceName":{},"comparisonOperator":{},"threshold":{"type":"double"},"evaluationPeriods":{"type":"integer"},"datapointsToAlarm":{"type":"integer"},"treatMissingData":{},"contactProtocols":{"shape":"S6y"},"notificationTriggers":{"shape":"S6z"},"notificationEnabled":{"type":"boolean"}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"PutInstancePublicPorts":{"input":{"type":"structure","required":["portInfos","instanceName"],"members":{"portInfos":{"type":"list","member":{"shape":"Sr"}},"instanceName":{}}},"output":{"type":"structure","members":{"operation":{"shape":"S5"}}}},"RebootInstance":{"input":{"type":"structure","required":["instanceName"],"members":{"instanceName":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"RebootRelationalDatabase":{"input":{"type":"structure","required":["relationalDatabaseName"],"members":{"relationalDatabaseName":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"RegisterContainerImage":{"input":{"type":"structure","required":["serviceName","label","digest"],"members":{"serviceName":{},"label":{},"digest":{}}},"output":{"type":"structure","members":{"containerImage":{"shape":"S8q"}}}},"ReleaseStaticIp":{"input":{"type":"structure","required":["staticIpName"],"members":{"staticIpName":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"ResetDistributionCache":{"input":{"type":"structure","members":{"distributionName":{}}},"output":{"type":"structure","members":{"status":{},"createTime":{"type":"timestamp"},"operation":{"shape":"S5"}}}},"SendContactMethodVerification":{"input":{"type":"structure","required":["protocol"],"members":{"protocol":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"SetIpAddressType":{"input":{"type":"structure","required":["resourceType","resourceName","ipAddressType"],"members":{"resourceType":{},"resourceName":{},"ipAddressType":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"SetResourceAccessForBucket":{"input":{"type":"structure","required":["resourceName","bucketName","access"],"members":{"resourceName":{},"bucketName":{},"access":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"StartInstance":{"input":{"type":"structure","required":["instanceName"],"members":{"instanceName":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"StartRelationalDatabase":{"input":{"type":"structure","required":["relationalDatabaseName"],"members":{"relationalDatabaseName":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"StopInstance":{"input":{"type":"structure","required":["instanceName"],"members":{"instanceName":{},"force":{"type":"boolean"}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"StopRelationalDatabase":{"input":{"type":"structure","required":["relationalDatabaseName"],"members":{"relationalDatabaseName":{},"relationalDatabaseSnapshotName":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"TagResource":{"input":{"type":"structure","required":["resourceName","tags"],"members":{"resourceName":{},"resourceArn":{},"tags":{"shape":"S10"}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"TestAlarm":{"input":{"type":"structure","required":["alarmName","state"],"members":{"alarmName":{},"state":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"UnpeerVpc":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"operation":{"shape":"S5"}}}},"UntagResource":{"input":{"type":"structure","required":["resourceName","tagKeys"],"members":{"resourceName":{},"resourceArn":{},"tagKeys":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"UpdateBucket":{"input":{"type":"structure","required":["bucketName"],"members":{"bucketName":{},"accessRules":{"shape":"S16"},"versioning":{},"readonlyAccessAccounts":{"shape":"S18"}}},"output":{"type":"structure","members":{"bucket":{"shape":"S15"},"operations":{"shape":"S4"}}}},"UpdateBucketBundle":{"input":{"type":"structure","required":["bucketName","bundleId"],"members":{"bucketName":{},"bundleId":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"UpdateContainerService":{"input":{"type":"structure","required":["serviceName"],"members":{"serviceName":{},"power":{},"scale":{"type":"integer"},"isDisabled":{"type":"boolean"},"publicDomainNames":{"shape":"S2f"}}},"output":{"type":"structure","members":{"containerService":{"shape":"S2s"}}}},"UpdateDistribution":{"input":{"type":"structure","required":["distributionName"],"members":{"distributionName":{},"origin":{"shape":"S3g"},"defaultCacheBehavior":{"shape":"S3i"},"cacheBehaviorSettings":{"shape":"S3k"},"cacheBehaviors":{"shape":"S3s"},"isEnabled":{"type":"boolean"}}},"output":{"type":"structure","members":{"operation":{"shape":"S5"}}}},"UpdateDistributionBundle":{"input":{"type":"structure","members":{"distributionName":{},"bundleId":{}}},"output":{"type":"structure","members":{"operation":{"shape":"S5"}}}},"UpdateDomainEntry":{"input":{"type":"structure","required":["domainName","domainEntry"],"members":{"domainName":{},"domainEntry":{"shape":"S41"}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"UpdateLoadBalancerAttribute":{"input":{"type":"structure","required":["loadBalancerName","attributeName","attributeValue"],"members":{"loadBalancerName":{},"attributeName":{},"attributeValue":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"UpdateRelationalDatabase":{"input":{"type":"structure","required":["relationalDatabaseName"],"members":{"relationalDatabaseName":{},"masterUserPassword":{"shape":"S4p"},"rotateMasterUserPassword":{"type":"boolean"},"preferredBackupWindow":{},"preferredMaintenanceWindow":{},"enableBackupRetention":{"type":"boolean"},"disableBackupRetention":{"type":"boolean"},"publiclyAccessible":{"type":"boolean"},"applyImmediately":{"type":"boolean"},"caCertificateIdentifier":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"UpdateRelationalDatabaseParameters":{"input":{"type":"structure","required":["relationalDatabaseName","parameters"],"members":{"relationalDatabaseName":{},"parameters":{"shape":"Se0"}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}}},"shapes":{"S4":{"type":"list","member":{"shape":"S5"}},"S5":{"type":"structure","members":{"id":{},"resourceName":{},"resourceType":{},"createdAt":{"type":"timestamp"},"location":{"shape":"S9"},"isTerminal":{"type":"boolean"},"operationDetails":{},"operationType":{},"status":{},"statusChangedAt":{"type":"timestamp"},"errorCode":{},"errorDetails":{}}},"S9":{"type":"structure","members":{"availabilityZone":{},"regionName":{}}},"Sk":{"type":"list","member":{}},"Sr":{"type":"structure","members":{"fromPort":{"type":"integer"},"toPort":{"type":"integer"},"protocol":{},"cidrs":{"shape":"Su"},"ipv6Cidrs":{"shape":"Su"},"cidrListAliases":{"shape":"Su"}}},"Su":{"type":"list","member":{}},"S10":{"type":"list","member":{"type":"structure","members":{"key":{},"value":{}}}},"S15":{"type":"structure","members":{"resourceType":{},"accessRules":{"shape":"S16"},"arn":{},"bundleId":{},"createdAt":{"type":"timestamp"},"url":{},"location":{"shape":"S9"},"name":{},"supportCode":{},"tags":{"shape":"S10"},"objectVersioning":{},"ableToUpdateBundle":{"type":"boolean"},"readonlyAccessAccounts":{"shape":"S18"},"resourcesReceivingAccess":{"type":"list","member":{"type":"structure","members":{"name":{},"resourceType":{}}}},"state":{"type":"structure","members":{"code":{},"message":{}}}}},"S16":{"type":"structure","members":{"getObject":{},"allowPublicOverrides":{"type":"boolean"}}},"S18":{"type":"list","member":{}},"S1e":{"type":"structure","members":{"accessKeyId":{"type":"string","sensitive":true},"secretAccessKey":{},"status":{},"createdAt":{"type":"timestamp"}}},"S1k":{"type":"list","member":{}},"S1m":{"type":"structure","members":{"certificateArn":{},"certificateName":{},"domainName":{},"certificateDetail":{"type":"structure","members":{"arn":{},"name":{},"domainName":{},"status":{},"serialNumber":{},"subjectAlternativeNames":{"shape":"S1k"},"domainValidationRecords":{"shape":"S1q"},"requestFailureReason":{},"inUseResourceCount":{"type":"integer"},"keyAlgorithm":{},"createdAt":{"type":"timestamp"},"issuedAt":{"type":"timestamp"},"issuerCA":{},"notBefore":{"type":"timestamp"},"notAfter":{"type":"timestamp"},"eligibleToRenew":{},"renewalSummary":{"type":"structure","members":{"domainValidationRecords":{"shape":"S1q"},"renewalStatus":{},"renewalStatusReason":{},"updatedAt":{"type":"timestamp"}}},"revokedAt":{"type":"timestamp"},"revocationReason":{},"tags":{"shape":"S10"},"supportCode":{}}},"tags":{"shape":"S10"}}},"S1q":{"type":"list","member":{"type":"structure","members":{"domainName":{},"resourceRecord":{"type":"structure","members":{"name":{},"type":{},"value":{}}}}}},"S2f":{"type":"map","key":{},"value":{"type":"list","member":{}}},"S2i":{"type":"map","key":{},"value":{"type":"structure","members":{"image":{},"command":{"shape":"Su"},"environment":{"type":"map","key":{},"value":{}},"ports":{"type":"map","key":{},"value":{}}}}},"S2o":{"type":"structure","required":["containerName","containerPort"],"members":{"containerName":{},"containerPort":{"type":"integer"},"healthCheck":{"shape":"S2q"}}},"S2q":{"type":"structure","members":{"healthyThreshold":{"type":"integer"},"unhealthyThreshold":{"type":"integer"},"timeoutSeconds":{"type":"integer"},"intervalSeconds":{"type":"integer"},"path":{},"successCodes":{}}},"S2s":{"type":"structure","members":{"containerServiceName":{},"arn":{},"createdAt":{"type":"timestamp"},"location":{"shape":"S9"},"resourceType":{},"tags":{"shape":"S10"},"power":{},"powerId":{},"state":{},"stateDetail":{"type":"structure","members":{"code":{},"message":{}}},"scale":{"type":"integer"},"currentDeployment":{"shape":"S2w"},"nextDeployment":{"shape":"S2w"},"isDisabled":{"type":"boolean"},"principalArn":{},"privateDomainName":{},"publicDomainNames":{"shape":"S2f"},"url":{}}},"S2w":{"type":"structure","members":{"version":{"type":"integer"},"state":{},"containers":{"shape":"S2i"},"publicEndpoint":{"type":"structure","members":{"containerName":{},"containerPort":{"type":"integer"},"healthCheck":{"shape":"S2q"}}},"createdAt":{"type":"timestamp"}}},"S35":{"type":"list","member":{"shape":"S36"}},"S36":{"type":"structure","required":["addOnType"],"members":{"addOnType":{},"autoSnapshotAddOnRequest":{"type":"structure","members":{"snapshotTimeOfDay":{}}}}},"S3g":{"type":"structure","members":{"name":{},"regionName":{},"protocolPolicy":{}}},"S3i":{"type":"structure","members":{"behavior":{}}},"S3k":{"type":"structure","members":{"defaultTTL":{"type":"long"},"minimumTTL":{"type":"long"},"maximumTTL":{"type":"long"},"allowedHTTPMethods":{},"cachedHTTPMethods":{},"forwardedCookies":{"type":"structure","members":{"option":{},"cookiesAllowList":{"shape":"Su"}}},"forwardedHeaders":{"type":"structure","members":{"option":{},"headersAllowList":{"type":"list","member":{}}}},"forwardedQueryStrings":{"type":"structure","members":{"option":{"type":"boolean"},"queryStringsAllowList":{"shape":"Su"}}}}},"S3s":{"type":"list","member":{"type":"structure","members":{"path":{},"behavior":{}}}},"S3w":{"type":"structure","members":{"name":{},"arn":{},"supportCode":{},"createdAt":{"type":"timestamp"},"location":{"shape":"S9"},"resourceType":{},"alternativeDomainNames":{"shape":"Su"},"status":{},"isEnabled":{"type":"boolean"},"domainName":{},"bundleId":{},"certificateName":{},"origin":{"type":"structure","members":{"name":{},"resourceType":{},"regionName":{},"protocolPolicy":{}}},"originPublicDNS":{},"defaultCacheBehavior":{"shape":"S3i"},"cacheBehaviorSettings":{"shape":"S3k"},"cacheBehaviors":{"shape":"S3s"},"ableToUpdateBundle":{"type":"boolean"},"ipAddressType":{},"tags":{"shape":"S10"}}},"S41":{"type":"structure","members":{"id":{},"name":{},"target":{},"isAlias":{"type":"boolean"},"type":{},"options":{"deprecated":true,"type":"map","key":{},"value":{}}}},"S4h":{"type":"structure","members":{"name":{},"arn":{},"supportCode":{},"createdAt":{"type":"timestamp"},"location":{"shape":"S9"},"resourceType":{},"tags":{"shape":"S10"},"fingerprint":{}}},"S4k":{"type":"list","member":{}},"S4p":{"type":"string","sensitive":true},"S6y":{"type":"list","member":{}},"S6z":{"type":"list","member":{}},"S7n":{"type":"list","member":{}},"S7p":{"type":"list","member":{"type":"structure","members":{"average":{"type":"double"},"maximum":{"type":"double"},"minimum":{"type":"double"},"sampleCount":{"type":"double"},"sum":{"type":"double"},"timestamp":{"type":"timestamp"},"unit":{}}}},"S8d":{"type":"structure","members":{"id":{},"service":{}}},"S8q":{"type":"structure","members":{"image":{},"digest":{},"createdAt":{"type":"timestamp"}}},"S9a":{"type":"structure","members":{"name":{},"arn":{},"supportCode":{},"createdAt":{"type":"timestamp"},"location":{"shape":"S9"},"resourceType":{},"tags":{"shape":"S10"},"addOns":{"shape":"S9b"},"sizeInGb":{"type":"integer"},"isSystemDisk":{"type":"boolean"},"iops":{"type":"integer"},"path":{},"state":{},"attachedTo":{},"isAttached":{"type":"boolean"},"attachmentState":{"deprecated":true},"gbInUse":{"deprecated":true,"type":"integer"}}},"S9b":{"type":"list","member":{"type":"structure","members":{"name":{},"status":{},"snapshotTimeOfDay":{},"nextSnapshotTimeOfDay":{}}}},"S9g":{"type":"structure","members":{"name":{},"arn":{},"supportCode":{},"createdAt":{"type":"timestamp"},"location":{"shape":"S9"},"resourceType":{},"tags":{"shape":"S10"},"sizeInGb":{"type":"integer"},"state":{},"progress":{},"fromDiskName":{},"fromDiskArn":{},"fromInstanceName":{},"fromInstanceArn":{},"isFromAutoSnapshot":{"type":"boolean"}}},"S9n":{"type":"list","member":{"shape":"S9a"}},"Sa2":{"type":"structure","members":{"name":{},"arn":{},"supportCode":{},"createdAt":{"type":"timestamp"},"location":{"shape":"S9"},"resourceType":{},"tags":{"shape":"S10"},"domainEntries":{"type":"list","member":{"shape":"S41"}}}},"Saj":{"type":"structure","members":{"name":{},"arn":{},"supportCode":{},"createdAt":{"type":"timestamp"},"location":{"shape":"S9"},"resourceType":{},"tags":{"shape":"S10"},"blueprintId":{},"blueprintName":{},"bundleId":{},"addOns":{"shape":"S9b"},"isStaticIp":{"type":"boolean"},"privateIpAddress":{},"publicIpAddress":{},"ipv6Addresses":{"type":"list","member":{}},"ipAddressType":{},"hardware":{"type":"structure","members":{"cpuCount":{"type":"integer"},"disks":{"shape":"S9n"},"ramSizeInGb":{"type":"float"}}},"networking":{"type":"structure","members":{"monthlyTransfer":{"type":"structure","members":{"gbPerMonthAllocated":{"type":"integer"}}},"ports":{"type":"list","member":{"type":"structure","members":{"fromPort":{"type":"integer"},"toPort":{"type":"integer"},"protocol":{},"accessFrom":{},"accessType":{},"commonName":{},"accessDirection":{},"cidrs":{"shape":"Su"},"ipv6Cidrs":{"shape":"Su"},"cidrListAliases":{"shape":"Su"}}}}}},"state":{"shape":"Sau"},"username":{},"sshKeyName":{}}},"Sau":{"type":"structure","members":{"code":{"type":"integer"},"name":{}}},"Sbc":{"type":"structure","members":{"name":{},"arn":{},"supportCode":{},"createdAt":{"type":"timestamp"},"location":{"shape":"S9"},"resourceType":{},"tags":{"shape":"S10"},"state":{},"progress":{},"fromAttachedDisks":{"shape":"S9n"},"fromInstanceName":{},"fromInstanceArn":{},"fromBlueprintId":{},"fromBundleId":{},"isFromAutoSnapshot":{"type":"boolean"},"sizeInGb":{"type":"integer"}}},"Sbt":{"type":"structure","members":{"name":{},"arn":{},"supportCode":{},"createdAt":{"type":"timestamp"},"location":{"shape":"S9"},"resourceType":{},"tags":{"shape":"S10"},"dnsName":{},"state":{},"protocol":{},"publicPorts":{"type":"list","member":{"type":"integer"}},"healthCheckPath":{},"instancePort":{"type":"integer"},"instanceHealthSummary":{"type":"list","member":{"type":"structure","members":{"instanceName":{},"instanceHealth":{},"instanceHealthReason":{}}}},"tlsCertificateSummaries":{"type":"list","member":{"type":"structure","members":{"name":{},"isAttached":{"type":"boolean"}}}},"configurationOptions":{"type":"map","key":{},"value":{}},"ipAddressType":{}}},"Scz":{"type":"list","member":{"type":"structure","members":{"zoneName":{},"state":{}}}},"Sd3":{"type":"structure","members":{"name":{},"arn":{},"supportCode":{},"createdAt":{"type":"timestamp"},"location":{"shape":"S9"},"resourceType":{},"tags":{"shape":"S10"},"relationalDatabaseBlueprintId":{},"relationalDatabaseBundleId":{},"masterDatabaseName":{},"hardware":{"type":"structure","members":{"cpuCount":{"type":"integer"},"diskSizeInGb":{"type":"integer"},"ramSizeInGb":{"type":"float"}}},"state":{},"secondaryAvailabilityZone":{},"backupRetentionEnabled":{"type":"boolean"},"pendingModifiedValues":{"type":"structure","members":{"masterUserPassword":{},"engineVersion":{},"backupRetentionEnabled":{"type":"boolean"}}},"engine":{},"engineVersion":{},"latestRestorableTime":{"type":"timestamp"},"masterUsername":{},"parameterApplyStatus":{},"preferredBackupWindow":{},"preferredMaintenanceWindow":{},"publiclyAccessible":{"type":"boolean"},"masterEndpoint":{"type":"structure","members":{"port":{"type":"integer"},"address":{}}},"pendingMaintenanceActions":{"type":"list","member":{"type":"structure","members":{"action":{},"description":{},"currentApplyDate":{"type":"timestamp"}}}},"caCertificateIdentifier":{}}},"Se0":{"type":"list","member":{"type":"structure","members":{"allowedValues":{},"applyMethod":{},"applyType":{},"dataType":{},"description":{},"isModifiable":{"type":"boolean"},"parameterName":{},"parameterValue":{}}}},"Se4":{"type":"structure","members":{"name":{},"arn":{},"supportCode":{},"createdAt":{"type":"timestamp"},"location":{"shape":"S9"},"resourceType":{},"tags":{"shape":"S10"},"engine":{},"engineVersion":{},"sizeInGb":{"type":"integer"},"state":{},"fromRelationalDatabaseName":{},"fromRelationalDatabaseArn":{},"fromRelationalDatabaseBundleId":{},"fromRelationalDatabaseBlueprintId":{}}},"Sed":{"type":"structure","members":{"name":{},"arn":{},"supportCode":{},"createdAt":{"type":"timestamp"},"location":{"shape":"S9"},"resourceType":{},"ipAddress":{},"attachedTo":{},"isAttached":{"type":"boolean"}}}}}

/***/ }),
/* 288 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{}}

/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['machinelearning'] = {};
	AWS.MachineLearning = Service.defineService('machinelearning', ['2014-12-12']);
	__webpack_require__(290);
	Object.defineProperty(apiLoader.services['machinelearning'], '2014-12-12', {
	  get: function get() {
	    var model = __webpack_require__(291);
	    model.paginators = __webpack_require__(292).pagination;
	    model.waiters = __webpack_require__(293).waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.MachineLearning;


/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(4);

	AWS.util.update(AWS.MachineLearning.prototype, {
	  /**
	   * @api private
	   */
	  setupRequestListeners: function setupRequestListeners(request) {
	    if (request.operation === 'predict') {
	      request.addListener('build', this.buildEndpoint);
	    }
	  },

	  /**
	   * Updates request endpoint from PredictEndpoint
	   * @api private
	   */
	  buildEndpoint: function buildEndpoint(request) {
	    var url = request.params.PredictEndpoint;
	    if (url) {
	      request.httpRequest.endpoint = new AWS.Endpoint(url);
	    }
	  }

	});


/***/ }),
/* 291 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2014-12-12","endpointPrefix":"machinelearning","jsonVersion":"1.1","protocol":"json","serviceFullName":"Amazon Machine Learning","serviceId":"Machine Learning","signatureVersion":"v4","targetPrefix":"AmazonML_20141212","uid":"machinelearning-2014-12-12"},"operations":{"AddTags":{"input":{"type":"structure","required":["Tags","ResourceId","ResourceType"],"members":{"Tags":{"shape":"S2"},"ResourceId":{},"ResourceType":{}}},"output":{"type":"structure","members":{"ResourceId":{},"ResourceType":{}}}},"CreateBatchPrediction":{"input":{"type":"structure","required":["BatchPredictionId","MLModelId","BatchPredictionDataSourceId","OutputUri"],"members":{"BatchPredictionId":{},"BatchPredictionName":{},"MLModelId":{},"BatchPredictionDataSourceId":{},"OutputUri":{}}},"output":{"type":"structure","members":{"BatchPredictionId":{}}}},"CreateDataSourceFromRDS":{"input":{"type":"structure","required":["DataSourceId","RDSData","RoleARN"],"members":{"DataSourceId":{},"DataSourceName":{},"RDSData":{"type":"structure","required":["DatabaseInformation","SelectSqlQuery","DatabaseCredentials","S3StagingLocation","ResourceRole","ServiceRole","SubnetId","SecurityGroupIds"],"members":{"DatabaseInformation":{"shape":"Sf"},"SelectSqlQuery":{},"DatabaseCredentials":{"type":"structure","required":["Username","Password"],"members":{"Username":{},"Password":{}}},"S3StagingLocation":{},"DataRearrangement":{},"DataSchema":{},"DataSchemaUri":{},"ResourceRole":{},"ServiceRole":{},"SubnetId":{},"SecurityGroupIds":{"type":"list","member":{}}}},"RoleARN":{},"ComputeStatistics":{"type":"boolean"}}},"output":{"type":"structure","members":{"DataSourceId":{}}}},"CreateDataSourceFromRedshift":{"input":{"type":"structure","required":["DataSourceId","DataSpec","RoleARN"],"members":{"DataSourceId":{},"DataSourceName":{},"DataSpec":{"type":"structure","required":["DatabaseInformation","SelectSqlQuery","DatabaseCredentials","S3StagingLocation"],"members":{"DatabaseInformation":{"shape":"Sy"},"SelectSqlQuery":{},"DatabaseCredentials":{"type":"structure","required":["Username","Password"],"members":{"Username":{},"Password":{}}},"S3StagingLocation":{},"DataRearrangement":{},"DataSchema":{},"DataSchemaUri":{}}},"RoleARN":{},"ComputeStatistics":{"type":"boolean"}}},"output":{"type":"structure","members":{"DataSourceId":{}}}},"CreateDataSourceFromS3":{"input":{"type":"structure","required":["DataSourceId","DataSpec"],"members":{"DataSourceId":{},"DataSourceName":{},"DataSpec":{"type":"structure","required":["DataLocationS3"],"members":{"DataLocationS3":{},"DataRearrangement":{},"DataSchema":{},"DataSchemaLocationS3":{}}},"ComputeStatistics":{"type":"boolean"}}},"output":{"type":"structure","members":{"DataSourceId":{}}}},"CreateEvaluation":{"input":{"type":"structure","required":["EvaluationId","MLModelId","EvaluationDataSourceId"],"members":{"EvaluationId":{},"EvaluationName":{},"MLModelId":{},"EvaluationDataSourceId":{}}},"output":{"type":"structure","members":{"EvaluationId":{}}}},"CreateMLModel":{"input":{"type":"structure","required":["MLModelId","MLModelType","TrainingDataSourceId"],"members":{"MLModelId":{},"MLModelName":{},"MLModelType":{},"Parameters":{"shape":"S1d"},"TrainingDataSourceId":{},"Recipe":{},"RecipeUri":{}}},"output":{"type":"structure","members":{"MLModelId":{}}}},"CreateRealtimeEndpoint":{"input":{"type":"structure","required":["MLModelId"],"members":{"MLModelId":{}}},"output":{"type":"structure","members":{"MLModelId":{},"RealtimeEndpointInfo":{"shape":"S1j"}}}},"DeleteBatchPrediction":{"input":{"type":"structure","required":["BatchPredictionId"],"members":{"BatchPredictionId":{}}},"output":{"type":"structure","members":{"BatchPredictionId":{}}}},"DeleteDataSource":{"input":{"type":"structure","required":["DataSourceId"],"members":{"DataSourceId":{}}},"output":{"type":"structure","members":{"DataSourceId":{}}}},"DeleteEvaluation":{"input":{"type":"structure","required":["EvaluationId"],"members":{"EvaluationId":{}}},"output":{"type":"structure","members":{"EvaluationId":{}}}},"DeleteMLModel":{"input":{"type":"structure","required":["MLModelId"],"members":{"MLModelId":{}}},"output":{"type":"structure","members":{"MLModelId":{}}}},"DeleteRealtimeEndpoint":{"input":{"type":"structure","required":["MLModelId"],"members":{"MLModelId":{}}},"output":{"type":"structure","members":{"MLModelId":{},"RealtimeEndpointInfo":{"shape":"S1j"}}}},"DeleteTags":{"input":{"type":"structure","required":["TagKeys","ResourceId","ResourceType"],"members":{"TagKeys":{"type":"list","member":{}},"ResourceId":{},"ResourceType":{}}},"output":{"type":"structure","members":{"ResourceId":{},"ResourceType":{}}}},"DescribeBatchPredictions":{"input":{"type":"structure","members":{"FilterVariable":{},"EQ":{},"GT":{},"LT":{},"GE":{},"LE":{},"NE":{},"Prefix":{},"SortOrder":{},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"Results":{"type":"list","member":{"type":"structure","members":{"BatchPredictionId":{},"MLModelId":{},"BatchPredictionDataSourceId":{},"InputDataLocationS3":{},"CreatedByIamUser":{},"CreatedAt":{"type":"timestamp"},"LastUpdatedAt":{"type":"timestamp"},"Name":{},"Status":{},"OutputUri":{},"Message":{},"ComputeTime":{"type":"long"},"FinishedAt":{"type":"timestamp"},"StartedAt":{"type":"timestamp"},"TotalRecordCount":{"type":"long"},"InvalidRecordCount":{"type":"long"}}}},"NextToken":{}}}},"DescribeDataSources":{"input":{"type":"structure","members":{"FilterVariable":{},"EQ":{},"GT":{},"LT":{},"GE":{},"LE":{},"NE":{},"Prefix":{},"SortOrder":{},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"Results":{"type":"list","member":{"type":"structure","members":{"DataSourceId":{},"DataLocationS3":{},"DataRearrangement":{},"CreatedByIamUser":{},"CreatedAt":{"type":"timestamp"},"LastUpdatedAt":{"type":"timestamp"},"DataSizeInBytes":{"type":"long"},"NumberOfFiles":{"type":"long"},"Name":{},"Status":{},"Message":{},"RedshiftMetadata":{"shape":"S2i"},"RDSMetadata":{"shape":"S2j"},"RoleARN":{},"ComputeStatistics":{"type":"boolean"},"ComputeTime":{"type":"long"},"FinishedAt":{"type":"timestamp"},"StartedAt":{"type":"timestamp"}}}},"NextToken":{}}}},"DescribeEvaluations":{"input":{"type":"structure","members":{"FilterVariable":{},"EQ":{},"GT":{},"LT":{},"GE":{},"LE":{},"NE":{},"Prefix":{},"SortOrder":{},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"Results":{"type":"list","member":{"type":"structure","members":{"EvaluationId":{},"MLModelId":{},"EvaluationDataSourceId":{},"InputDataLocationS3":{},"CreatedByIamUser":{},"CreatedAt":{"type":"timestamp"},"LastUpdatedAt":{"type":"timestamp"},"Name":{},"Status":{},"PerformanceMetrics":{"shape":"S2q"},"Message":{},"ComputeTime":{"type":"long"},"FinishedAt":{"type":"timestamp"},"StartedAt":{"type":"timestamp"}}}},"NextToken":{}}}},"DescribeMLModels":{"input":{"type":"structure","members":{"FilterVariable":{},"EQ":{},"GT":{},"LT":{},"GE":{},"LE":{},"NE":{},"Prefix":{},"SortOrder":{},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"Results":{"type":"list","member":{"type":"structure","members":{"MLModelId":{},"TrainingDataSourceId":{},"CreatedByIamUser":{},"CreatedAt":{"type":"timestamp"},"LastUpdatedAt":{"type":"timestamp"},"Name":{},"Status":{},"SizeInBytes":{"type":"long"},"EndpointInfo":{"shape":"S1j"},"TrainingParameters":{"shape":"S1d"},"InputDataLocationS3":{},"Algorithm":{},"MLModelType":{},"ScoreThreshold":{"type":"float"},"ScoreThresholdLastUpdatedAt":{"type":"timestamp"},"Message":{},"ComputeTime":{"type":"long"},"FinishedAt":{"type":"timestamp"},"StartedAt":{"type":"timestamp"}}}},"NextToken":{}}}},"DescribeTags":{"input":{"type":"structure","required":["ResourceId","ResourceType"],"members":{"ResourceId":{},"ResourceType":{}}},"output":{"type":"structure","members":{"ResourceId":{},"ResourceType":{},"Tags":{"shape":"S2"}}}},"GetBatchPrediction":{"input":{"type":"structure","required":["BatchPredictionId"],"members":{"BatchPredictionId":{}}},"output":{"type":"structure","members":{"BatchPredictionId":{},"MLModelId":{},"BatchPredictionDataSourceId":{},"InputDataLocationS3":{},"CreatedByIamUser":{},"CreatedAt":{"type":"timestamp"},"LastUpdatedAt":{"type":"timestamp"},"Name":{},"Status":{},"OutputUri":{},"LogUri":{},"Message":{},"ComputeTime":{"type":"long"},"FinishedAt":{"type":"timestamp"},"StartedAt":{"type":"timestamp"},"TotalRecordCount":{"type":"long"},"InvalidRecordCount":{"type":"long"}}}},"GetDataSource":{"input":{"type":"structure","required":["DataSourceId"],"members":{"DataSourceId":{},"Verbose":{"type":"boolean"}}},"output":{"type":"structure","members":{"DataSourceId":{},"DataLocationS3":{},"DataRearrangement":{},"CreatedByIamUser":{},"CreatedAt":{"type":"timestamp"},"LastUpdatedAt":{"type":"timestamp"},"DataSizeInBytes":{"type":"long"},"NumberOfFiles":{"type":"long"},"Name":{},"Status":{},"LogUri":{},"Message":{},"RedshiftMetadata":{"shape":"S2i"},"RDSMetadata":{"shape":"S2j"},"RoleARN":{},"ComputeStatistics":{"type":"boolean"},"ComputeTime":{"type":"long"},"FinishedAt":{"type":"timestamp"},"StartedAt":{"type":"timestamp"},"DataSourceSchema":{}}}},"GetEvaluation":{"input":{"type":"structure","required":["EvaluationId"],"members":{"EvaluationId":{}}},"output":{"type":"structure","members":{"EvaluationId":{},"MLModelId":{},"EvaluationDataSourceId":{},"InputDataLocationS3":{},"CreatedByIamUser":{},"CreatedAt":{"type":"timestamp"},"LastUpdatedAt":{"type":"timestamp"},"Name":{},"Status":{},"PerformanceMetrics":{"shape":"S2q"},"LogUri":{},"Message":{},"ComputeTime":{"type":"long"},"FinishedAt":{"type":"timestamp"},"StartedAt":{"type":"timestamp"}}}},"GetMLModel":{"input":{"type":"structure","required":["MLModelId"],"members":{"MLModelId":{},"Verbose":{"type":"boolean"}}},"output":{"type":"structure","members":{"MLModelId":{},"TrainingDataSourceId":{},"CreatedByIamUser":{},"CreatedAt":{"type":"timestamp"},"LastUpdatedAt":{"type":"timestamp"},"Name":{},"Status":{},"SizeInBytes":{"type":"long"},"EndpointInfo":{"shape":"S1j"},"TrainingParameters":{"shape":"S1d"},"InputDataLocationS3":{},"MLModelType":{},"ScoreThreshold":{"type":"float"},"ScoreThresholdLastUpdatedAt":{"type":"timestamp"},"LogUri":{},"Message":{},"ComputeTime":{"type":"long"},"FinishedAt":{"type":"timestamp"},"StartedAt":{"type":"timestamp"},"Recipe":{},"Schema":{}}}},"Predict":{"input":{"type":"structure","required":["MLModelId","Record","PredictEndpoint"],"members":{"MLModelId":{},"Record":{"type":"map","key":{},"value":{}},"PredictEndpoint":{}}},"output":{"type":"structure","members":{"Prediction":{"type":"structure","members":{"predictedLabel":{},"predictedValue":{"type":"float"},"predictedScores":{"type":"map","key":{},"value":{"type":"float"}},"details":{"type":"map","key":{},"value":{}}}}}}},"UpdateBatchPrediction":{"input":{"type":"structure","required":["BatchPredictionId","BatchPredictionName"],"members":{"BatchPredictionId":{},"BatchPredictionName":{}}},"output":{"type":"structure","members":{"BatchPredictionId":{}}}},"UpdateDataSource":{"input":{"type":"structure","required":["DataSourceId","DataSourceName"],"members":{"DataSourceId":{},"DataSourceName":{}}},"output":{"type":"structure","members":{"DataSourceId":{}}}},"UpdateEvaluation":{"input":{"type":"structure","required":["EvaluationId","EvaluationName"],"members":{"EvaluationId":{},"EvaluationName":{}}},"output":{"type":"structure","members":{"EvaluationId":{}}}},"UpdateMLModel":{"input":{"type":"structure","required":["MLModelId"],"members":{"MLModelId":{},"MLModelName":{},"ScoreThreshold":{"type":"float"}}},"output":{"type":"structure","members":{"MLModelId":{}}}}},"shapes":{"S2":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{}}}},"Sf":{"type":"structure","required":["InstanceIdentifier","DatabaseName"],"members":{"InstanceIdentifier":{},"DatabaseName":{}}},"Sy":{"type":"structure","required":["DatabaseName","ClusterIdentifier"],"members":{"DatabaseName":{},"ClusterIdentifier":{}}},"S1d":{"type":"map","key":{},"value":{}},"S1j":{"type":"structure","members":{"PeakRequestsPerSecond":{"type":"integer"},"CreatedAt":{"type":"timestamp"},"EndpointUrl":{},"EndpointStatus":{}}},"S2i":{"type":"structure","members":{"RedshiftDatabase":{"shape":"Sy"},"DatabaseUserName":{},"SelectSqlQuery":{}}},"S2j":{"type":"structure","members":{"Database":{"shape":"Sf"},"DatabaseUserName":{},"SelectSqlQuery":{},"ResourceRole":{},"ServiceRole":{},"DataPipelineId":{}}},"S2q":{"type":"structure","members":{"Properties":{"type":"map","key":{},"value":{}}}}}}

/***/ }),
/* 292 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeBatchPredictions":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken","result_key":"Results"},"DescribeDataSources":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken","result_key":"Results"},"DescribeEvaluations":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken","result_key":"Results"},"DescribeMLModels":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken","result_key":"Results"}}}

/***/ }),
/* 293 */
/***/ (function(module, exports) {

	module.exports = {"version":2,"waiters":{"DataSourceAvailable":{"delay":30,"operation":"DescribeDataSources","maxAttempts":60,"acceptors":[{"expected":"COMPLETED","matcher":"pathAll","state":"success","argument":"Results[].Status"},{"expected":"FAILED","matcher":"pathAny","state":"failure","argument":"Results[].Status"}]},"MLModelAvailable":{"delay":30,"operation":"DescribeMLModels","maxAttempts":60,"acceptors":[{"expected":"COMPLETED","matcher":"pathAll","state":"success","argument":"Results[].Status"},{"expected":"FAILED","matcher":"pathAny","state":"failure","argument":"Results[].Status"}]},"EvaluationAvailable":{"delay":30,"operation":"DescribeEvaluations","maxAttempts":60,"acceptors":[{"expected":"COMPLETED","matcher":"pathAll","state":"success","argument":"Results[].Status"},{"expected":"FAILED","matcher":"pathAny","state":"failure","argument":"Results[].Status"}]},"BatchPredictionAvailable":{"delay":30,"operation":"DescribeBatchPredictions","maxAttempts":60,"acceptors":[{"expected":"COMPLETED","matcher":"pathAll","state":"success","argument":"Results[].Status"},{"expected":"FAILED","matcher":"pathAny","state":"failure","argument":"Results[].Status"}]}}}

/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['marketplacecommerceanalytics'] = {};
	AWS.MarketplaceCommerceAnalytics = Service.defineService('marketplacecommerceanalytics', ['2015-07-01']);
	Object.defineProperty(apiLoader.services['marketplacecommerceanalytics'], '2015-07-01', {
	  get: function get() {
	    var model = __webpack_require__(295);
	    model.paginators = __webpack_require__(296).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.MarketplaceCommerceAnalytics;


/***/ }),
/* 295 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-07-01","endpointPrefix":"marketplacecommerceanalytics","jsonVersion":"1.1","protocol":"json","serviceFullName":"AWS Marketplace Commerce Analytics","serviceId":"Marketplace Commerce Analytics","signatureVersion":"v4","signingName":"marketplacecommerceanalytics","targetPrefix":"MarketplaceCommerceAnalytics20150701","uid":"marketplacecommerceanalytics-2015-07-01"},"operations":{"GenerateDataSet":{"input":{"type":"structure","required":["dataSetType","dataSetPublicationDate","roleNameArn","destinationS3BucketName","snsTopicArn"],"members":{"dataSetType":{},"dataSetPublicationDate":{"type":"timestamp"},"roleNameArn":{},"destinationS3BucketName":{},"destinationS3Prefix":{},"snsTopicArn":{},"customerDefinedValues":{"shape":"S8"}}},"output":{"type":"structure","members":{"dataSetRequestId":{}}}},"StartSupportDataExport":{"input":{"type":"structure","required":["dataSetType","fromDate","roleNameArn","destinationS3BucketName","snsTopicArn"],"members":{"dataSetType":{},"fromDate":{"type":"timestamp"},"roleNameArn":{},"destinationS3BucketName":{},"destinationS3Prefix":{},"snsTopicArn":{},"customerDefinedValues":{"shape":"S8"}}},"output":{"type":"structure","members":{"dataSetRequestId":{}}}}},"shapes":{"S8":{"type":"map","key":{},"value":{}}}}

/***/ }),
/* 296 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{}}

/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['marketplacemetering'] = {};
	AWS.MarketplaceMetering = Service.defineService('marketplacemetering', ['2016-01-14']);
	Object.defineProperty(apiLoader.services['marketplacemetering'], '2016-01-14', {
	  get: function get() {
	    var model = __webpack_require__(298);
	    model.paginators = __webpack_require__(299).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.MarketplaceMetering;


/***/ }),
/* 298 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-01-14","endpointPrefix":"metering.marketplace","jsonVersion":"1.1","protocol":"json","serviceFullName":"AWSMarketplace Metering","serviceId":"Marketplace Metering","signatureVersion":"v4","signingName":"aws-marketplace","targetPrefix":"AWSMPMeteringService","uid":"meteringmarketplace-2016-01-14"},"operations":{"BatchMeterUsage":{"input":{"type":"structure","required":["UsageRecords","ProductCode"],"members":{"UsageRecords":{"shape":"S2"},"ProductCode":{}}},"output":{"type":"structure","members":{"Results":{"type":"list","member":{"type":"structure","members":{"UsageRecord":{"shape":"S3"},"MeteringRecordId":{},"Status":{}}}},"UnprocessedRecords":{"shape":"S2"}}}},"MeterUsage":{"input":{"type":"structure","required":["ProductCode","Timestamp","UsageDimension"],"members":{"ProductCode":{},"Timestamp":{"type":"timestamp"},"UsageDimension":{},"UsageQuantity":{"type":"integer"},"DryRun":{"type":"boolean"},"UsageAllocations":{"shape":"S8"}}},"output":{"type":"structure","members":{"MeteringRecordId":{}}}},"RegisterUsage":{"input":{"type":"structure","required":["ProductCode","PublicKeyVersion"],"members":{"ProductCode":{},"PublicKeyVersion":{"type":"integer"},"Nonce":{}}},"output":{"type":"structure","members":{"PublicKeyRotationTimestamp":{"type":"timestamp"},"Signature":{}}}},"ResolveCustomer":{"input":{"type":"structure","required":["RegistrationToken"],"members":{"RegistrationToken":{}}},"output":{"type":"structure","members":{"CustomerIdentifier":{},"ProductCode":{}}}}},"shapes":{"S2":{"type":"list","member":{"shape":"S3"}},"S3":{"type":"structure","required":["Timestamp","CustomerIdentifier","Dimension"],"members":{"Timestamp":{"type":"timestamp"},"CustomerIdentifier":{},"Dimension":{},"Quantity":{"type":"integer"},"UsageAllocations":{"shape":"S8"}}},"S8":{"type":"list","member":{"type":"structure","required":["AllocatedUsageQuantity"],"members":{"AllocatedUsageQuantity":{"type":"integer"},"Tags":{"type":"list","member":{"type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{}}}}}}}}}

/***/ }),
/* 299 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{}}

/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['mturk'] = {};
	AWS.MTurk = Service.defineService('mturk', ['2017-01-17']);
	Object.defineProperty(apiLoader.services['mturk'], '2017-01-17', {
	  get: function get() {
	    var model = __webpack_require__(301);
	    model.paginators = __webpack_require__(302).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.MTurk;


/***/ }),
/* 301 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2017-01-17","endpointPrefix":"mturk-requester","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"Amazon MTurk","serviceFullName":"Amazon Mechanical Turk","serviceId":"MTurk","signatureVersion":"v4","targetPrefix":"MTurkRequesterServiceV20170117","uid":"mturk-requester-2017-01-17"},"operations":{"AcceptQualificationRequest":{"input":{"type":"structure","required":["QualificationRequestId"],"members":{"QualificationRequestId":{},"IntegerValue":{"type":"integer"}}},"output":{"type":"structure","members":{}}},"ApproveAssignment":{"input":{"type":"structure","required":["AssignmentId"],"members":{"AssignmentId":{},"RequesterFeedback":{},"OverrideRejection":{"type":"boolean"}}},"output":{"type":"structure","members":{}},"idempotent":true},"AssociateQualificationWithWorker":{"input":{"type":"structure","required":["QualificationTypeId","WorkerId"],"members":{"QualificationTypeId":{},"WorkerId":{},"IntegerValue":{"type":"integer"},"SendNotification":{"type":"boolean"}}},"output":{"type":"structure","members":{}}},"CreateAdditionalAssignmentsForHIT":{"input":{"type":"structure","required":["HITId","NumberOfAdditionalAssignments"],"members":{"HITId":{},"NumberOfAdditionalAssignments":{"type":"integer"},"UniqueRequestToken":{}}},"output":{"type":"structure","members":{}}},"CreateHIT":{"input":{"type":"structure","required":["LifetimeInSeconds","AssignmentDurationInSeconds","Reward","Title","Description"],"members":{"MaxAssignments":{"type":"integer"},"AutoApprovalDelayInSeconds":{"type":"long"},"LifetimeInSeconds":{"type":"long"},"AssignmentDurationInSeconds":{"type":"long"},"Reward":{},"Title":{},"Keywords":{},"Description":{},"Question":{},"RequesterAnnotation":{},"QualificationRequirements":{"shape":"Si"},"UniqueRequestToken":{},"AssignmentReviewPolicy":{"shape":"Sq"},"HITReviewPolicy":{"shape":"Sq"},"HITLayoutId":{},"HITLayoutParameters":{"shape":"Sw"}}},"output":{"type":"structure","members":{"HIT":{"shape":"Sz"}}}},"CreateHITType":{"input":{"type":"structure","required":["AssignmentDurationInSeconds","Reward","Title","Description"],"members":{"AutoApprovalDelayInSeconds":{"type":"long"},"AssignmentDurationInSeconds":{"type":"long"},"Reward":{},"Title":{},"Keywords":{},"Description":{},"QualificationRequirements":{"shape":"Si"}}},"output":{"type":"structure","members":{"HITTypeId":{}}},"idempotent":true},"CreateHITWithHITType":{"input":{"type":"structure","required":["HITTypeId","LifetimeInSeconds"],"members":{"HITTypeId":{},"MaxAssignments":{"type":"integer"},"LifetimeInSeconds":{"type":"long"},"Question":{},"RequesterAnnotation":{},"UniqueRequestToken":{},"AssignmentReviewPolicy":{"shape":"Sq"},"HITReviewPolicy":{"shape":"Sq"},"HITLayoutId":{},"HITLayoutParameters":{"shape":"Sw"}}},"output":{"type":"structure","members":{"HIT":{"shape":"Sz"}}}},"CreateQualificationType":{"input":{"type":"structure","required":["Name","Description","QualificationTypeStatus"],"members":{"Name":{},"Keywords":{},"Description":{},"QualificationTypeStatus":{},"RetryDelayInSeconds":{"type":"long"},"Test":{},"AnswerKey":{},"TestDurationInSeconds":{"type":"long"},"AutoGranted":{"type":"boolean"},"AutoGrantedValue":{"type":"integer"}}},"output":{"type":"structure","members":{"QualificationType":{"shape":"S1a"}}}},"CreateWorkerBlock":{"input":{"type":"structure","required":["WorkerId","Reason"],"members":{"WorkerId":{},"Reason":{}}},"output":{"type":"structure","members":{}}},"DeleteHIT":{"input":{"type":"structure","required":["HITId"],"members":{"HITId":{}}},"output":{"type":"structure","members":{}},"idempotent":true},"DeleteQualificationType":{"input":{"type":"structure","required":["QualificationTypeId"],"members":{"QualificationTypeId":{}}},"output":{"type":"structure","members":{}},"idempotent":true},"DeleteWorkerBlock":{"input":{"type":"structure","required":["WorkerId"],"members":{"WorkerId":{},"Reason":{}}},"output":{"type":"structure","members":{}},"idempotent":true},"DisassociateQualificationFromWorker":{"input":{"type":"structure","required":["WorkerId","QualificationTypeId"],"members":{"WorkerId":{},"QualificationTypeId":{},"Reason":{}}},"output":{"type":"structure","members":{}}},"GetAccountBalance":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"AvailableBalance":{},"OnHoldBalance":{}}},"idempotent":true},"GetAssignment":{"input":{"type":"structure","required":["AssignmentId"],"members":{"AssignmentId":{}}},"output":{"type":"structure","members":{"Assignment":{"shape":"S1p"},"HIT":{"shape":"Sz"}}},"idempotent":true},"GetFileUploadURL":{"input":{"type":"structure","required":["AssignmentId","QuestionIdentifier"],"members":{"AssignmentId":{},"QuestionIdentifier":{}}},"output":{"type":"structure","members":{"FileUploadURL":{}}},"idempotent":true},"GetHIT":{"input":{"type":"structure","required":["HITId"],"members":{"HITId":{}}},"output":{"type":"structure","members":{"HIT":{"shape":"Sz"}}},"idempotent":true},"GetQualificationScore":{"input":{"type":"structure","required":["QualificationTypeId","WorkerId"],"members":{"QualificationTypeId":{},"WorkerId":{}}},"output":{"type":"structure","members":{"Qualification":{"shape":"S1x"}}},"idempotent":true},"GetQualificationType":{"input":{"type":"structure","required":["QualificationTypeId"],"members":{"QualificationTypeId":{}}},"output":{"type":"structure","members":{"QualificationType":{"shape":"S1a"}}},"idempotent":true},"ListAssignmentsForHIT":{"input":{"type":"structure","required":["HITId"],"members":{"HITId":{},"NextToken":{},"MaxResults":{"type":"integer"},"AssignmentStatuses":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"NextToken":{},"NumResults":{"type":"integer"},"Assignments":{"type":"list","member":{"shape":"S1p"}}}},"idempotent":true},"ListBonusPayments":{"input":{"type":"structure","members":{"HITId":{},"AssignmentId":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"NumResults":{"type":"integer"},"NextToken":{},"BonusPayments":{"type":"list","member":{"type":"structure","members":{"WorkerId":{},"BonusAmount":{},"AssignmentId":{},"Reason":{},"GrantTime":{"type":"timestamp"}}}}}},"idempotent":true},"ListHITs":{"input":{"type":"structure","members":{"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"NextToken":{},"NumResults":{"type":"integer"},"HITs":{"shape":"S2d"}}},"idempotent":true},"ListHITsForQualificationType":{"input":{"type":"structure","required":["QualificationTypeId"],"members":{"QualificationTypeId":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"NextToken":{},"NumResults":{"type":"integer"},"HITs":{"shape":"S2d"}}},"idempotent":true},"ListQualificationRequests":{"input":{"type":"structure","members":{"QualificationTypeId":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"NumResults":{"type":"integer"},"NextToken":{},"QualificationRequests":{"type":"list","member":{"type":"structure","members":{"QualificationRequestId":{},"QualificationTypeId":{},"WorkerId":{},"Test":{},"Answer":{},"SubmitTime":{"type":"timestamp"}}}}}},"idempotent":true},"ListQualificationTypes":{"input":{"type":"structure","required":["MustBeRequestable"],"members":{"Query":{},"MustBeRequestable":{"type":"boolean"},"MustBeOwnedByCaller":{"type":"boolean"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"NumResults":{"type":"integer"},"NextToken":{},"QualificationTypes":{"type":"list","member":{"shape":"S1a"}}}},"idempotent":true},"ListReviewPolicyResultsForHIT":{"input":{"type":"structure","required":["HITId"],"members":{"HITId":{},"PolicyLevels":{"type":"list","member":{}},"RetrieveActions":{"type":"boolean"},"RetrieveResults":{"type":"boolean"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"HITId":{},"AssignmentReviewPolicy":{"shape":"Sq"},"HITReviewPolicy":{"shape":"Sq"},"AssignmentReviewReport":{"shape":"S2r"},"HITReviewReport":{"shape":"S2r"},"NextToken":{}}},"idempotent":true},"ListReviewableHITs":{"input":{"type":"structure","members":{"HITTypeId":{},"Status":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"NextToken":{},"NumResults":{"type":"integer"},"HITs":{"shape":"S2d"}}},"idempotent":true},"ListWorkerBlocks":{"input":{"type":"structure","members":{"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"NextToken":{},"NumResults":{"type":"integer"},"WorkerBlocks":{"type":"list","member":{"type":"structure","members":{"WorkerId":{},"Reason":{}}}}}},"idempotent":true},"ListWorkersWithQualificationType":{"input":{"type":"structure","required":["QualificationTypeId"],"members":{"QualificationTypeId":{},"Status":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"NextToken":{},"NumResults":{"type":"integer"},"Qualifications":{"type":"list","member":{"shape":"S1x"}}}},"idempotent":true},"NotifyWorkers":{"input":{"type":"structure","required":["Subject","MessageText","WorkerIds"],"members":{"Subject":{},"MessageText":{},"WorkerIds":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"NotifyWorkersFailureStatuses":{"type":"list","member":{"type":"structure","members":{"NotifyWorkersFailureCode":{},"NotifyWorkersFailureMessage":{},"WorkerId":{}}}}}}},"RejectAssignment":{"input":{"type":"structure","required":["AssignmentId","RequesterFeedback"],"members":{"AssignmentId":{},"RequesterFeedback":{}}},"output":{"type":"structure","members":{}},"idempotent":true},"RejectQualificationRequest":{"input":{"type":"structure","required":["QualificationRequestId"],"members":{"QualificationRequestId":{},"Reason":{}}},"output":{"type":"structure","members":{}}},"SendBonus":{"input":{"type":"structure","required":["WorkerId","BonusAmount","AssignmentId","Reason"],"members":{"WorkerId":{},"BonusAmount":{},"AssignmentId":{},"Reason":{},"UniqueRequestToken":{}}},"output":{"type":"structure","members":{}}},"SendTestEventNotification":{"input":{"type":"structure","required":["Notification","TestEventType"],"members":{"Notification":{"shape":"S3k"},"TestEventType":{}}},"output":{"type":"structure","members":{}}},"UpdateExpirationForHIT":{"input":{"type":"structure","required":["HITId","ExpireAt"],"members":{"HITId":{},"ExpireAt":{"type":"timestamp"}}},"output":{"type":"structure","members":{}},"idempotent":true},"UpdateHITReviewStatus":{"input":{"type":"structure","required":["HITId"],"members":{"HITId":{},"Revert":{"type":"boolean"}}},"output":{"type":"structure","members":{}},"idempotent":true},"UpdateHITTypeOfHIT":{"input":{"type":"structure","required":["HITId","HITTypeId"],"members":{"HITId":{},"HITTypeId":{}}},"output":{"type":"structure","members":{}},"idempotent":true},"UpdateNotificationSettings":{"input":{"type":"structure","required":["HITTypeId"],"members":{"HITTypeId":{},"Notification":{"shape":"S3k"},"Active":{"type":"boolean"}}},"output":{"type":"structure","members":{}},"idempotent":true},"UpdateQualificationType":{"input":{"type":"structure","required":["QualificationTypeId"],"members":{"QualificationTypeId":{},"Description":{},"QualificationTypeStatus":{},"Test":{},"AnswerKey":{},"TestDurationInSeconds":{"type":"long"},"RetryDelayInSeconds":{"type":"long"},"AutoGranted":{"type":"boolean"},"AutoGrantedValue":{"type":"integer"}}},"output":{"type":"structure","members":{"QualificationType":{"shape":"S1a"}}}}},"shapes":{"Si":{"type":"list","member":{"type":"structure","required":["QualificationTypeId","Comparator"],"members":{"QualificationTypeId":{},"Comparator":{},"IntegerValues":{"type":"list","member":{"type":"integer"}},"LocaleValues":{"type":"list","member":{"shape":"Sn"}},"RequiredToPreview":{"deprecated":true,"type":"boolean"},"ActionsGuarded":{}}}},"Sn":{"type":"structure","required":["Country"],"members":{"Country":{},"Subdivision":{}}},"Sq":{"type":"structure","required":["PolicyName"],"members":{"PolicyName":{},"Parameters":{"type":"list","member":{"type":"structure","members":{"Key":{},"Values":{"shape":"St"},"MapEntries":{"type":"list","member":{"type":"structure","members":{"Key":{},"Values":{"shape":"St"}}}}}}}}},"St":{"type":"list","member":{}},"Sw":{"type":"list","member":{"type":"structure","required":["Name","Value"],"members":{"Name":{},"Value":{}}}},"Sz":{"type":"structure","members":{"HITId":{},"HITTypeId":{},"HITGroupId":{},"HITLayoutId":{},"CreationTime":{"type":"timestamp"},"Title":{},"Description":{},"Question":{},"Keywords":{},"HITStatus":{},"MaxAssignments":{"type":"integer"},"Reward":{},"AutoApprovalDelayInSeconds":{"type":"long"},"Expiration":{"type":"timestamp"},"AssignmentDurationInSeconds":{"type":"long"},"RequesterAnnotation":{},"QualificationRequirements":{"shape":"Si"},"HITReviewStatus":{},"NumberOfAssignmentsPending":{"type":"integer"},"NumberOfAssignmentsAvailable":{"type":"integer"},"NumberOfAssignmentsCompleted":{"type":"integer"}}},"S1a":{"type":"structure","members":{"QualificationTypeId":{},"CreationTime":{"type":"timestamp"},"Name":{},"Description":{},"Keywords":{},"QualificationTypeStatus":{},"Test":{},"TestDurationInSeconds":{"type":"long"},"AnswerKey":{},"RetryDelayInSeconds":{"type":"long"},"IsRequestable":{"type":"boolean"},"AutoGranted":{"type":"boolean"},"AutoGrantedValue":{"type":"integer"}}},"S1p":{"type":"structure","members":{"AssignmentId":{},"WorkerId":{},"HITId":{},"AssignmentStatus":{},"AutoApprovalTime":{"type":"timestamp"},"AcceptTime":{"type":"timestamp"},"SubmitTime":{"type":"timestamp"},"ApprovalTime":{"type":"timestamp"},"RejectionTime":{"type":"timestamp"},"Deadline":{"type":"timestamp"},"Answer":{},"RequesterFeedback":{}}},"S1x":{"type":"structure","members":{"QualificationTypeId":{},"WorkerId":{},"GrantTime":{"type":"timestamp"},"IntegerValue":{"type":"integer"},"LocaleValue":{"shape":"Sn"},"Status":{}}},"S2d":{"type":"list","member":{"shape":"Sz"}},"S2r":{"type":"structure","members":{"ReviewResults":{"type":"list","member":{"type":"structure","members":{"ActionId":{},"SubjectId":{},"SubjectType":{},"QuestionId":{},"Key":{},"Value":{}}}},"ReviewActions":{"type":"list","member":{"type":"structure","members":{"ActionId":{},"ActionName":{},"TargetId":{},"TargetType":{},"Status":{},"CompleteTime":{"type":"timestamp"},"Result":{},"ErrorCode":{}}}}}},"S3k":{"type":"structure","required":["Destination","Transport","Version","EventTypes"],"members":{"Destination":{},"Transport":{},"Version":{},"EventTypes":{"type":"list","member":{}}}}}}

/***/ }),
/* 302 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"ListAssignmentsForHIT":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListBonusPayments":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListHITs":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListHITsForQualificationType":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListQualificationRequests":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListQualificationTypes":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListReviewPolicyResultsForHIT":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListReviewableHITs":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListWorkerBlocks":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListWorkersWithQualificationType":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"}}}

/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['mobileanalytics'] = {};
	AWS.MobileAnalytics = Service.defineService('mobileanalytics', ['2014-06-05']);
	Object.defineProperty(apiLoader.services['mobileanalytics'], '2014-06-05', {
	  get: function get() {
	    var model = __webpack_require__(304);
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.MobileAnalytics;


/***/ }),
/* 304 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2014-06-05","endpointPrefix":"mobileanalytics","serviceFullName":"Amazon Mobile Analytics","serviceId":"Mobile Analytics","signatureVersion":"v4","protocol":"rest-json"},"operations":{"PutEvents":{"http":{"requestUri":"/2014-06-05/events","responseCode":202},"input":{"type":"structure","required":["events","clientContext"],"members":{"events":{"type":"list","member":{"type":"structure","required":["eventType","timestamp"],"members":{"eventType":{},"timestamp":{},"session":{"type":"structure","members":{"id":{},"duration":{"type":"long"},"startTimestamp":{},"stopTimestamp":{}}},"version":{},"attributes":{"type":"map","key":{},"value":{}},"metrics":{"type":"map","key":{},"value":{"type":"double"}}}}},"clientContext":{"location":"header","locationName":"x-amz-Client-Context"},"clientContextEncoding":{"location":"header","locationName":"x-amz-Client-Context-Encoding"}}}}},"shapes":{}}

/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['opsworks'] = {};
	AWS.OpsWorks = Service.defineService('opsworks', ['2013-02-18']);
	Object.defineProperty(apiLoader.services['opsworks'], '2013-02-18', {
	  get: function get() {
	    var model = __webpack_require__(306);
	    model.paginators = __webpack_require__(307).pagination;
	    model.waiters = __webpack_require__(308).waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.OpsWorks;


/***/ }),
/* 306 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2013-02-18","endpointPrefix":"opsworks","jsonVersion":"1.1","protocol":"json","serviceFullName":"AWS OpsWorks","serviceId":"OpsWorks","signatureVersion":"v4","targetPrefix":"OpsWorks_20130218","uid":"opsworks-2013-02-18"},"operations":{"AssignInstance":{"input":{"type":"structure","required":["InstanceId","LayerIds"],"members":{"InstanceId":{},"LayerIds":{"shape":"S3"}}}},"AssignVolume":{"input":{"type":"structure","required":["VolumeId"],"members":{"VolumeId":{},"InstanceId":{}}}},"AssociateElasticIp":{"input":{"type":"structure","required":["ElasticIp"],"members":{"ElasticIp":{},"InstanceId":{}}}},"AttachElasticLoadBalancer":{"input":{"type":"structure","required":["ElasticLoadBalancerName","LayerId"],"members":{"ElasticLoadBalancerName":{},"LayerId":{}}}},"CloneStack":{"input":{"type":"structure","required":["SourceStackId","ServiceRoleArn"],"members":{"SourceStackId":{},"Name":{},"Region":{},"VpcId":{},"Attributes":{"shape":"S8"},"ServiceRoleArn":{},"DefaultInstanceProfileArn":{},"DefaultOs":{},"HostnameTheme":{},"DefaultAvailabilityZone":{},"DefaultSubnetId":{},"CustomJson":{},"ConfigurationManager":{"shape":"Sa"},"ChefConfiguration":{"shape":"Sb"},"UseCustomCookbooks":{"type":"boolean"},"UseOpsworksSecurityGroups":{"type":"boolean"},"CustomCookbooksSource":{"shape":"Sd"},"DefaultSshKeyName":{},"ClonePermissions":{"type":"boolean"},"CloneAppIds":{"shape":"S3"},"DefaultRootDeviceType":{},"AgentVersion":{}}},"output":{"type":"structure","members":{"StackId":{}}}},"CreateApp":{"input":{"type":"structure","required":["StackId","Name","Type"],"members":{"StackId":{},"Shortname":{},"Name":{},"Description":{},"DataSources":{"shape":"Si"},"Type":{},"AppSource":{"shape":"Sd"},"Domains":{"shape":"S3"},"EnableSsl":{"type":"boolean"},"SslConfiguration":{"shape":"Sl"},"Attributes":{"shape":"Sm"},"Environment":{"shape":"So"}}},"output":{"type":"structure","members":{"AppId":{}}}},"CreateDeployment":{"input":{"type":"structure","required":["StackId","Command"],"members":{"StackId":{},"AppId":{},"InstanceIds":{"shape":"S3"},"LayerIds":{"shape":"S3"},"Command":{"shape":"Ss"},"Comment":{},"CustomJson":{}}},"output":{"type":"structure","members":{"DeploymentId":{}}}},"CreateInstance":{"input":{"type":"structure","required":["StackId","LayerIds","InstanceType"],"members":{"StackId":{},"LayerIds":{"shape":"S3"},"InstanceType":{},"AutoScalingType":{},"Hostname":{},"Os":{},"AmiId":{},"SshKeyName":{},"AvailabilityZone":{},"VirtualizationType":{},"SubnetId":{},"Architecture":{},"RootDeviceType":{},"BlockDeviceMappings":{"shape":"Sz"},"InstallUpdatesOnBoot":{"type":"boolean"},"EbsOptimized":{"type":"boolean"},"AgentVersion":{},"Tenancy":{}}},"output":{"type":"structure","members":{"InstanceId":{}}}},"CreateLayer":{"input":{"type":"structure","required":["StackId","Type","Name","Shortname"],"members":{"StackId":{},"Type":{},"Name":{},"Shortname":{},"Attributes":{"shape":"S17"},"CloudWatchLogsConfiguration":{"shape":"S19"},"CustomInstanceProfileArn":{},"CustomJson":{},"CustomSecurityGroupIds":{"shape":"S3"},"Packages":{"shape":"S3"},"VolumeConfigurations":{"shape":"S1f"},"EnableAutoHealing":{"type":"boolean"},"AutoAssignElasticIps":{"type":"boolean"},"AutoAssignPublicIps":{"type":"boolean"},"CustomRecipes":{"shape":"S1h"},"InstallUpdatesOnBoot":{"type":"boolean"},"UseEbsOptimizedInstances":{"type":"boolean"},"LifecycleEventConfiguration":{"shape":"S1i"}}},"output":{"type":"structure","members":{"LayerId":{}}}},"CreateStack":{"input":{"type":"structure","required":["Name","Region","ServiceRoleArn","DefaultInstanceProfileArn"],"members":{"Name":{},"Region":{},"VpcId":{},"Attributes":{"shape":"S8"},"ServiceRoleArn":{},"DefaultInstanceProfileArn":{},"DefaultOs":{},"HostnameTheme":{},"DefaultAvailabilityZone":{},"DefaultSubnetId":{},"CustomJson":{},"ConfigurationManager":{"shape":"Sa"},"ChefConfiguration":{"shape":"Sb"},"UseCustomCookbooks":{"type":"boolean"},"UseOpsworksSecurityGroups":{"type":"boolean"},"CustomCookbooksSource":{"shape":"Sd"},"DefaultSshKeyName":{},"DefaultRootDeviceType":{},"AgentVersion":{}}},"output":{"type":"structure","members":{"StackId":{}}}},"CreateUserProfile":{"input":{"type":"structure","required":["IamUserArn"],"members":{"IamUserArn":{},"SshUsername":{},"SshPublicKey":{},"AllowSelfManagement":{"type":"boolean"}}},"output":{"type":"structure","members":{"IamUserArn":{}}}},"DeleteApp":{"input":{"type":"structure","required":["AppId"],"members":{"AppId":{}}}},"DeleteInstance":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{},"DeleteElasticIp":{"type":"boolean"},"DeleteVolumes":{"type":"boolean"}}}},"DeleteLayer":{"input":{"type":"structure","required":["LayerId"],"members":{"LayerId":{}}}},"DeleteStack":{"input":{"type":"structure","required":["StackId"],"members":{"StackId":{}}}},"DeleteUserProfile":{"input":{"type":"structure","required":["IamUserArn"],"members":{"IamUserArn":{}}}},"DeregisterEcsCluster":{"input":{"type":"structure","required":["EcsClusterArn"],"members":{"EcsClusterArn":{}}}},"DeregisterElasticIp":{"input":{"type":"structure","required":["ElasticIp"],"members":{"ElasticIp":{}}}},"DeregisterInstance":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{}}}},"DeregisterRdsDbInstance":{"input":{"type":"structure","required":["RdsDbInstanceArn"],"members":{"RdsDbInstanceArn":{}}}},"DeregisterVolume":{"input":{"type":"structure","required":["VolumeId"],"members":{"VolumeId":{}}}},"DescribeAgentVersions":{"input":{"type":"structure","members":{"StackId":{},"ConfigurationManager":{"shape":"Sa"}}},"output":{"type":"structure","members":{"AgentVersions":{"type":"list","member":{"type":"structure","members":{"Version":{},"ConfigurationManager":{"shape":"Sa"}}}}}}},"DescribeApps":{"input":{"type":"structure","members":{"StackId":{},"AppIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"Apps":{"type":"list","member":{"type":"structure","members":{"AppId":{},"StackId":{},"Shortname":{},"Name":{},"Description":{},"DataSources":{"shape":"Si"},"Type":{},"AppSource":{"shape":"Sd"},"Domains":{"shape":"S3"},"EnableSsl":{"type":"boolean"},"SslConfiguration":{"shape":"Sl"},"Attributes":{"shape":"Sm"},"CreatedAt":{},"Environment":{"shape":"So"}}}}}}},"DescribeCommands":{"input":{"type":"structure","members":{"DeploymentId":{},"InstanceId":{},"CommandIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"Commands":{"type":"list","member":{"type":"structure","members":{"CommandId":{},"InstanceId":{},"DeploymentId":{},"CreatedAt":{},"AcknowledgedAt":{},"CompletedAt":{},"Status":{},"ExitCode":{"type":"integer"},"LogUrl":{},"Type":{}}}}}}},"DescribeDeployments":{"input":{"type":"structure","members":{"StackId":{},"AppId":{},"DeploymentIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"Deployments":{"type":"list","member":{"type":"structure","members":{"DeploymentId":{},"StackId":{},"AppId":{},"CreatedAt":{},"CompletedAt":{},"Duration":{"type":"integer"},"IamUserArn":{},"Comment":{},"Command":{"shape":"Ss"},"Status":{},"CustomJson":{},"InstanceIds":{"shape":"S3"}}}}}}},"DescribeEcsClusters":{"input":{"type":"structure","members":{"EcsClusterArns":{"shape":"S3"},"StackId":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"EcsClusters":{"type":"list","member":{"type":"structure","members":{"EcsClusterArn":{},"EcsClusterName":{},"StackId":{},"RegisteredAt":{}}}},"NextToken":{}}}},"DescribeElasticIps":{"input":{"type":"structure","members":{"InstanceId":{},"StackId":{},"Ips":{"shape":"S3"}}},"output":{"type":"structure","members":{"ElasticIps":{"type":"list","member":{"type":"structure","members":{"Ip":{},"Name":{},"Domain":{},"Region":{},"InstanceId":{}}}}}}},"DescribeElasticLoadBalancers":{"input":{"type":"structure","members":{"StackId":{},"LayerIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"ElasticLoadBalancers":{"type":"list","member":{"type":"structure","members":{"ElasticLoadBalancerName":{},"Region":{},"DnsName":{},"StackId":{},"LayerId":{},"VpcId":{},"AvailabilityZones":{"shape":"S3"},"SubnetIds":{"shape":"S3"},"Ec2InstanceIds":{"shape":"S3"}}}}}}},"DescribeInstances":{"input":{"type":"structure","members":{"StackId":{},"LayerId":{},"InstanceIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"Instances":{"type":"list","member":{"type":"structure","members":{"AgentVersion":{},"AmiId":{},"Architecture":{},"Arn":{},"AutoScalingType":{},"AvailabilityZone":{},"BlockDeviceMappings":{"shape":"Sz"},"CreatedAt":{},"EbsOptimized":{"type":"boolean"},"Ec2InstanceId":{},"EcsClusterArn":{},"EcsContainerInstanceArn":{},"ElasticIp":{},"Hostname":{},"InfrastructureClass":{},"InstallUpdatesOnBoot":{"type":"boolean"},"InstanceId":{},"InstanceProfileArn":{},"InstanceType":{},"LastServiceErrorId":{},"LayerIds":{"shape":"S3"},"Os":{},"Platform":{},"PrivateDns":{},"PrivateIp":{},"PublicDns":{},"PublicIp":{},"RegisteredBy":{},"ReportedAgentVersion":{},"ReportedOs":{"type":"structure","members":{"Family":{},"Name":{},"Version":{}}},"RootDeviceType":{},"RootDeviceVolumeId":{},"SecurityGroupIds":{"shape":"S3"},"SshHostDsaKeyFingerprint":{},"SshHostRsaKeyFingerprint":{},"SshKeyName":{},"StackId":{},"Status":{},"SubnetId":{},"Tenancy":{},"VirtualizationType":{}}}}}}},"DescribeLayers":{"input":{"type":"structure","members":{"StackId":{},"LayerIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"Layers":{"type":"list","member":{"type":"structure","members":{"Arn":{},"StackId":{},"LayerId":{},"Type":{},"Name":{},"Shortname":{},"Attributes":{"shape":"S17"},"CloudWatchLogsConfiguration":{"shape":"S19"},"CustomInstanceProfileArn":{},"CustomJson":{},"CustomSecurityGroupIds":{"shape":"S3"},"DefaultSecurityGroupNames":{"shape":"S3"},"Packages":{"shape":"S3"},"VolumeConfigurations":{"shape":"S1f"},"EnableAutoHealing":{"type":"boolean"},"AutoAssignElasticIps":{"type":"boolean"},"AutoAssignPublicIps":{"type":"boolean"},"DefaultRecipes":{"shape":"S1h"},"CustomRecipes":{"shape":"S1h"},"CreatedAt":{},"InstallUpdatesOnBoot":{"type":"boolean"},"UseEbsOptimizedInstances":{"type":"boolean"},"LifecycleEventConfiguration":{"shape":"S1i"}}}}}}},"DescribeLoadBasedAutoScaling":{"input":{"type":"structure","required":["LayerIds"],"members":{"LayerIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"LoadBasedAutoScalingConfigurations":{"type":"list","member":{"type":"structure","members":{"LayerId":{},"Enable":{"type":"boolean"},"UpScaling":{"shape":"S36"},"DownScaling":{"shape":"S36"}}}}}}},"DescribeMyUserProfile":{"output":{"type":"structure","members":{"UserProfile":{"type":"structure","members":{"IamUserArn":{},"Name":{},"SshUsername":{},"SshPublicKey":{}}}}}},"DescribeOperatingSystems":{"output":{"type":"structure","members":{"OperatingSystems":{"type":"list","member":{"type":"structure","members":{"Name":{},"Id":{},"Type":{},"ConfigurationManagers":{"type":"list","member":{"type":"structure","members":{"Name":{},"Version":{}}}},"ReportedName":{},"ReportedVersion":{},"Supported":{"type":"boolean"}}}}}}},"DescribePermissions":{"input":{"type":"structure","members":{"IamUserArn":{},"StackId":{}}},"output":{"type":"structure","members":{"Permissions":{"type":"list","member":{"type":"structure","members":{"StackId":{},"IamUserArn":{},"AllowSsh":{"type":"boolean"},"AllowSudo":{"type":"boolean"},"Level":{}}}}}}},"DescribeRaidArrays":{"input":{"type":"structure","members":{"InstanceId":{},"StackId":{},"RaidArrayIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"RaidArrays":{"type":"list","member":{"type":"structure","members":{"RaidArrayId":{},"InstanceId":{},"Name":{},"RaidLevel":{"type":"integer"},"NumberOfDisks":{"type":"integer"},"Size":{"type":"integer"},"Device":{},"MountPoint":{},"AvailabilityZone":{},"CreatedAt":{},"StackId":{},"VolumeType":{},"Iops":{"type":"integer"}}}}}}},"DescribeRdsDbInstances":{"input":{"type":"structure","required":["StackId"],"members":{"StackId":{},"RdsDbInstanceArns":{"shape":"S3"}}},"output":{"type":"structure","members":{"RdsDbInstances":{"type":"list","member":{"type":"structure","members":{"RdsDbInstanceArn":{},"DbInstanceIdentifier":{},"DbUser":{},"DbPassword":{},"Region":{},"Address":{},"Engine":{},"StackId":{},"MissingOnRds":{"type":"boolean"}}}}}}},"DescribeServiceErrors":{"input":{"type":"structure","members":{"StackId":{},"InstanceId":{},"ServiceErrorIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"ServiceErrors":{"type":"list","member":{"type":"structure","members":{"ServiceErrorId":{},"StackId":{},"InstanceId":{},"Type":{},"Message":{},"CreatedAt":{}}}}}}},"DescribeStackProvisioningParameters":{"input":{"type":"structure","required":["StackId"],"members":{"StackId":{}}},"output":{"type":"structure","members":{"AgentInstallerUrl":{},"Parameters":{"type":"map","key":{},"value":{}}}}},"DescribeStackSummary":{"input":{"type":"structure","required":["StackId"],"members":{"StackId":{}}},"output":{"type":"structure","members":{"StackSummary":{"type":"structure","members":{"StackId":{},"Name":{},"Arn":{},"LayersCount":{"type":"integer"},"AppsCount":{"type":"integer"},"InstancesCount":{"type":"structure","members":{"Assigning":{"type":"integer"},"Booting":{"type":"integer"},"ConnectionLost":{"type":"integer"},"Deregistering":{"type":"integer"},"Online":{"type":"integer"},"Pending":{"type":"integer"},"Rebooting":{"type":"integer"},"Registered":{"type":"integer"},"Registering":{"type":"integer"},"Requested":{"type":"integer"},"RunningSetup":{"type":"integer"},"SetupFailed":{"type":"integer"},"ShuttingDown":{"type":"integer"},"StartFailed":{"type":"integer"},"StopFailed":{"type":"integer"},"Stopped":{"type":"integer"},"Stopping":{"type":"integer"},"Terminated":{"type":"integer"},"Terminating":{"type":"integer"},"Unassigning":{"type":"integer"}}}}}}}},"DescribeStacks":{"input":{"type":"structure","members":{"StackIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"Stacks":{"type":"list","member":{"type":"structure","members":{"StackId":{},"Name":{},"Arn":{},"Region":{},"VpcId":{},"Attributes":{"shape":"S8"},"ServiceRoleArn":{},"DefaultInstanceProfileArn":{},"DefaultOs":{},"HostnameTheme":{},"DefaultAvailabilityZone":{},"DefaultSubnetId":{},"CustomJson":{},"ConfigurationManager":{"shape":"Sa"},"ChefConfiguration":{"shape":"Sb"},"UseCustomCookbooks":{"type":"boolean"},"UseOpsworksSecurityGroups":{"type":"boolean"},"CustomCookbooksSource":{"shape":"Sd"},"DefaultSshKeyName":{},"CreatedAt":{},"DefaultRootDeviceType":{},"AgentVersion":{}}}}}}},"DescribeTimeBasedAutoScaling":{"input":{"type":"structure","required":["InstanceIds"],"members":{"InstanceIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"TimeBasedAutoScalingConfigurations":{"type":"list","member":{"type":"structure","members":{"InstanceId":{},"AutoScalingSchedule":{"shape":"S4b"}}}}}}},"DescribeUserProfiles":{"input":{"type":"structure","members":{"IamUserArns":{"shape":"S3"}}},"output":{"type":"structure","members":{"UserProfiles":{"type":"list","member":{"type":"structure","members":{"IamUserArn":{},"Name":{},"SshUsername":{},"SshPublicKey":{},"AllowSelfManagement":{"type":"boolean"}}}}}}},"DescribeVolumes":{"input":{"type":"structure","members":{"InstanceId":{},"StackId":{},"RaidArrayId":{},"VolumeIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"Volumes":{"type":"list","member":{"type":"structure","members":{"VolumeId":{},"Ec2VolumeId":{},"Name":{},"RaidArrayId":{},"InstanceId":{},"Status":{},"Size":{"type":"integer"},"Device":{},"MountPoint":{},"Region":{},"AvailabilityZone":{},"VolumeType":{},"Iops":{"type":"integer"},"Encrypted":{"type":"boolean"}}}}}}},"DetachElasticLoadBalancer":{"input":{"type":"structure","required":["ElasticLoadBalancerName","LayerId"],"members":{"ElasticLoadBalancerName":{},"LayerId":{}}}},"DisassociateElasticIp":{"input":{"type":"structure","required":["ElasticIp"],"members":{"ElasticIp":{}}}},"GetHostnameSuggestion":{"input":{"type":"structure","required":["LayerId"],"members":{"LayerId":{}}},"output":{"type":"structure","members":{"LayerId":{},"Hostname":{}}}},"GrantAccess":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{},"ValidForInMinutes":{"type":"integer"}}},"output":{"type":"structure","members":{"TemporaryCredential":{"type":"structure","members":{"Username":{},"Password":{},"ValidForInMinutes":{"type":"integer"},"InstanceId":{}}}}}},"ListTags":{"input":{"type":"structure","required":["ResourceArn"],"members":{"ResourceArn":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Tags":{"shape":"S50"},"NextToken":{}}}},"RebootInstance":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{}}}},"RegisterEcsCluster":{"input":{"type":"structure","required":["EcsClusterArn","StackId"],"members":{"EcsClusterArn":{},"StackId":{}}},"output":{"type":"structure","members":{"EcsClusterArn":{}}}},"RegisterElasticIp":{"input":{"type":"structure","required":["ElasticIp","StackId"],"members":{"ElasticIp":{},"StackId":{}}},"output":{"type":"structure","members":{"ElasticIp":{}}}},"RegisterInstance":{"input":{"type":"structure","required":["StackId"],"members":{"StackId":{},"Hostname":{},"PublicIp":{},"PrivateIp":{},"RsaPublicKey":{},"RsaPublicKeyFingerprint":{},"InstanceIdentity":{"type":"structure","members":{"Document":{},"Signature":{}}}}},"output":{"type":"structure","members":{"InstanceId":{}}}},"RegisterRdsDbInstance":{"input":{"type":"structure","required":["StackId","RdsDbInstanceArn","DbUser","DbPassword"],"members":{"StackId":{},"RdsDbInstanceArn":{},"DbUser":{},"DbPassword":{}}}},"RegisterVolume":{"input":{"type":"structure","required":["StackId"],"members":{"Ec2VolumeId":{},"StackId":{}}},"output":{"type":"structure","members":{"VolumeId":{}}}},"SetLoadBasedAutoScaling":{"input":{"type":"structure","required":["LayerId"],"members":{"LayerId":{},"Enable":{"type":"boolean"},"UpScaling":{"shape":"S36"},"DownScaling":{"shape":"S36"}}}},"SetPermission":{"input":{"type":"structure","required":["StackId","IamUserArn"],"members":{"StackId":{},"IamUserArn":{},"AllowSsh":{"type":"boolean"},"AllowSudo":{"type":"boolean"},"Level":{}}}},"SetTimeBasedAutoScaling":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{},"AutoScalingSchedule":{"shape":"S4b"}}}},"StartInstance":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{}}}},"StartStack":{"input":{"type":"structure","required":["StackId"],"members":{"StackId":{}}}},"StopInstance":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{},"Force":{"type":"boolean"}}}},"StopStack":{"input":{"type":"structure","required":["StackId"],"members":{"StackId":{}}}},"TagResource":{"input":{"type":"structure","required":["ResourceArn","Tags"],"members":{"ResourceArn":{},"Tags":{"shape":"S50"}}}},"UnassignInstance":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{}}}},"UnassignVolume":{"input":{"type":"structure","required":["VolumeId"],"members":{"VolumeId":{}}}},"UntagResource":{"input":{"type":"structure","required":["ResourceArn","TagKeys"],"members":{"ResourceArn":{},"TagKeys":{"type":"list","member":{}}}}},"UpdateApp":{"input":{"type":"structure","required":["AppId"],"members":{"AppId":{},"Name":{},"Description":{},"DataSources":{"shape":"Si"},"Type":{},"AppSource":{"shape":"Sd"},"Domains":{"shape":"S3"},"EnableSsl":{"type":"boolean"},"SslConfiguration":{"shape":"Sl"},"Attributes":{"shape":"Sm"},"Environment":{"shape":"So"}}}},"UpdateElasticIp":{"input":{"type":"structure","required":["ElasticIp"],"members":{"ElasticIp":{},"Name":{}}}},"UpdateInstance":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{},"LayerIds":{"shape":"S3"},"InstanceType":{},"AutoScalingType":{},"Hostname":{},"Os":{},"AmiId":{},"SshKeyName":{},"Architecture":{},"InstallUpdatesOnBoot":{"type":"boolean"},"EbsOptimized":{"type":"boolean"},"AgentVersion":{}}}},"UpdateLayer":{"input":{"type":"structure","required":["LayerId"],"members":{"LayerId":{},"Name":{},"Shortname":{},"Attributes":{"shape":"S17"},"CloudWatchLogsConfiguration":{"shape":"S19"},"CustomInstanceProfileArn":{},"CustomJson":{},"CustomSecurityGroupIds":{"shape":"S3"},"Packages":{"shape":"S3"},"VolumeConfigurations":{"shape":"S1f"},"EnableAutoHealing":{"type":"boolean"},"AutoAssignElasticIps":{"type":"boolean"},"AutoAssignPublicIps":{"type":"boolean"},"CustomRecipes":{"shape":"S1h"},"InstallUpdatesOnBoot":{"type":"boolean"},"UseEbsOptimizedInstances":{"type":"boolean"},"LifecycleEventConfiguration":{"shape":"S1i"}}}},"UpdateMyUserProfile":{"input":{"type":"structure","members":{"SshPublicKey":{}}}},"UpdateRdsDbInstance":{"input":{"type":"structure","required":["RdsDbInstanceArn"],"members":{"RdsDbInstanceArn":{},"DbUser":{},"DbPassword":{}}}},"UpdateStack":{"input":{"type":"structure","required":["StackId"],"members":{"StackId":{},"Name":{},"Attributes":{"shape":"S8"},"ServiceRoleArn":{},"DefaultInstanceProfileArn":{},"DefaultOs":{},"HostnameTheme":{},"DefaultAvailabilityZone":{},"DefaultSubnetId":{},"CustomJson":{},"ConfigurationManager":{"shape":"Sa"},"ChefConfiguration":{"shape":"Sb"},"UseCustomCookbooks":{"type":"boolean"},"CustomCookbooksSource":{"shape":"Sd"},"DefaultSshKeyName":{},"DefaultRootDeviceType":{},"UseOpsworksSecurityGroups":{"type":"boolean"},"AgentVersion":{}}}},"UpdateUserProfile":{"input":{"type":"structure","required":["IamUserArn"],"members":{"IamUserArn":{},"SshUsername":{},"SshPublicKey":{},"AllowSelfManagement":{"type":"boolean"}}}},"UpdateVolume":{"input":{"type":"structure","required":["VolumeId"],"members":{"VolumeId":{},"Name":{},"MountPoint":{}}}}},"shapes":{"S3":{"type":"list","member":{}},"S8":{"type":"map","key":{},"value":{}},"Sa":{"type":"structure","members":{"Name":{},"Version":{}}},"Sb":{"type":"structure","members":{"ManageBerkshelf":{"type":"boolean"},"BerkshelfVersion":{}}},"Sd":{"type":"structure","members":{"Type":{},"Url":{},"Username":{},"Password":{},"SshKey":{},"Revision":{}}},"Si":{"type":"list","member":{"type":"structure","members":{"Type":{},"Arn":{},"DatabaseName":{}}}},"Sl":{"type":"structure","required":["Certificate","PrivateKey"],"members":{"Certificate":{},"PrivateKey":{},"Chain":{}}},"Sm":{"type":"map","key":{},"value":{}},"So":{"type":"list","member":{"type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{},"Secure":{"type":"boolean"}}}},"Ss":{"type":"structure","required":["Name"],"members":{"Name":{},"Args":{"type":"map","key":{},"value":{"shape":"S3"}}}},"Sz":{"type":"list","member":{"type":"structure","members":{"DeviceName":{},"NoDevice":{},"VirtualName":{},"Ebs":{"type":"structure","members":{"SnapshotId":{},"Iops":{"type":"integer"},"VolumeSize":{"type":"integer"},"VolumeType":{},"DeleteOnTermination":{"type":"boolean"}}}}}},"S17":{"type":"map","key":{},"value":{}},"S19":{"type":"structure","members":{"Enabled":{"type":"boolean"},"LogStreams":{"type":"list","member":{"type":"structure","members":{"LogGroupName":{},"DatetimeFormat":{},"TimeZone":{},"File":{},"FileFingerprintLines":{},"MultiLineStartPattern":{},"InitialPosition":{},"Encoding":{},"BufferDuration":{"type":"integer"},"BatchCount":{"type":"integer"},"BatchSize":{"type":"integer"}}}}}},"S1f":{"type":"list","member":{"type":"structure","required":["MountPoint","NumberOfDisks","Size"],"members":{"MountPoint":{},"RaidLevel":{"type":"integer"},"NumberOfDisks":{"type":"integer"},"Size":{"type":"integer"},"VolumeType":{},"Iops":{"type":"integer"},"Encrypted":{"type":"boolean"}}}},"S1h":{"type":"structure","members":{"Setup":{"shape":"S3"},"Configure":{"shape":"S3"},"Deploy":{"shape":"S3"},"Undeploy":{"shape":"S3"},"Shutdown":{"shape":"S3"}}},"S1i":{"type":"structure","members":{"Shutdown":{"type":"structure","members":{"ExecutionTimeout":{"type":"integer"},"DelayUntilElbConnectionsDrained":{"type":"boolean"}}}}},"S36":{"type":"structure","members":{"InstanceCount":{"type":"integer"},"ThresholdsWaitTime":{"type":"integer"},"IgnoreMetricsTime":{"type":"integer"},"CpuThreshold":{"type":"double"},"MemoryThreshold":{"type":"double"},"LoadThreshold":{"type":"double"},"Alarms":{"shape":"S3"}}},"S4b":{"type":"structure","members":{"Monday":{"shape":"S4c"},"Tuesday":{"shape":"S4c"},"Wednesday":{"shape":"S4c"},"Thursday":{"shape":"S4c"},"Friday":{"shape":"S4c"},"Saturday":{"shape":"S4c"},"Sunday":{"shape":"S4c"}}},"S4c":{"type":"map","key":{},"value":{}},"S50":{"type":"map","key":{},"value":{}}}}

/***/ }),
/* 307 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeApps":{"result_key":"Apps"},"DescribeCommands":{"result_key":"Commands"},"DescribeDeployments":{"result_key":"Deployments"},"DescribeEcsClusters":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"EcsClusters"},"DescribeElasticIps":{"result_key":"ElasticIps"},"DescribeElasticLoadBalancers":{"result_key":"ElasticLoadBalancers"},"DescribeInstances":{"result_key":"Instances"},"DescribeLayers":{"result_key":"Layers"},"DescribeLoadBasedAutoScaling":{"result_key":"LoadBasedAutoScalingConfigurations"},"DescribePermissions":{"result_key":"Permissions"},"DescribeRaidArrays":{"result_key":"RaidArrays"},"DescribeServiceErrors":{"result_key":"ServiceErrors"},"DescribeStacks":{"result_key":"Stacks"},"DescribeTimeBasedAutoScaling":{"result_key":"TimeBasedAutoScalingConfigurations"},"DescribeUserProfiles":{"result_key":"UserProfiles"},"DescribeVolumes":{"result_key":"Volumes"}}}

/***/ }),
/* 308 */
/***/ (function(module, exports) {

	module.exports = {"version":2,"waiters":{"AppExists":{"delay":1,"operation":"DescribeApps","maxAttempts":40,"acceptors":[{"expected":200,"matcher":"status","state":"success"},{"matcher":"status","expected":400,"state":"failure"}]},"DeploymentSuccessful":{"delay":15,"operation":"DescribeDeployments","maxAttempts":40,"description":"Wait until a deployment has completed successfully.","acceptors":[{"expected":"successful","matcher":"pathAll","state":"success","argument":"Deployments[].Status"},{"expected":"failed","matcher":"pathAny","state":"failure","argument":"Deployments[].Status"}]},"InstanceOnline":{"delay":15,"operation":"DescribeInstances","maxAttempts":40,"description":"Wait until OpsWorks instance is online.","acceptors":[{"expected":"online","matcher":"pathAll","state":"success","argument":"Instances[].Status"},{"expected":"setup_failed","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"shutting_down","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"start_failed","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"stopped","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"stopping","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"terminating","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"terminated","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"stop_failed","matcher":"pathAny","state":"failure","argument":"Instances[].Status"}]},"InstanceRegistered":{"delay":15,"operation":"DescribeInstances","maxAttempts":40,"description":"Wait until OpsWorks instance is registered.","acceptors":[{"expected":"registered","matcher":"pathAll","state":"success","argument":"Instances[].Status"},{"expected":"setup_failed","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"shutting_down","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"stopped","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"stopping","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"terminating","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"terminated","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"stop_failed","matcher":"pathAny","state":"failure","argument":"Instances[].Status"}]},"InstanceStopped":{"delay":15,"operation":"DescribeInstances","maxAttempts":40,"description":"Wait until OpsWorks instance is stopped.","acceptors":[{"expected":"stopped","matcher":"pathAll","state":"success","argument":"Instances[].Status"},{"expected":"booting","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"pending","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"rebooting","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"requested","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"running_setup","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"setup_failed","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"start_failed","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"stop_failed","matcher":"pathAny","state":"failure","argument":"Instances[].Status"}]},"InstanceTerminated":{"delay":15,"operation":"DescribeInstances","maxAttempts":40,"description":"Wait until OpsWorks instance is terminated.","acceptors":[{"expected":"terminated","matcher":"pathAll","state":"success","argument":"Instances[].Status"},{"expected":"ResourceNotFoundException","matcher":"error","state":"success"},{"expected":"booting","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"online","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"pending","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"rebooting","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"requested","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"running_setup","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"setup_failed","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"start_failed","matcher":"pathAny","state":"failure","argument":"Instances[].Status"}]}}}

/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['opsworkscm'] = {};
	AWS.OpsWorksCM = Service.defineService('opsworkscm', ['2016-11-01']);
	Object.defineProperty(apiLoader.services['opsworkscm'], '2016-11-01', {
	  get: function get() {
	    var model = __webpack_require__(310);
	    model.paginators = __webpack_require__(311).pagination;
	    model.waiters = __webpack_require__(312).waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.OpsWorksCM;


/***/ }),
/* 310 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-11-01","endpointPrefix":"opsworks-cm","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"OpsWorksCM","serviceFullName":"AWS OpsWorks CM","serviceId":"OpsWorksCM","signatureVersion":"v4","signingName":"opsworks-cm","targetPrefix":"OpsWorksCM_V2016_11_01","uid":"opsworkscm-2016-11-01"},"operations":{"AssociateNode":{"input":{"type":"structure","required":["ServerName","NodeName","EngineAttributes"],"members":{"ServerName":{},"NodeName":{},"EngineAttributes":{"shape":"S4"}}},"output":{"type":"structure","members":{"NodeAssociationStatusToken":{}}}},"CreateBackup":{"input":{"type":"structure","required":["ServerName"],"members":{"ServerName":{},"Description":{},"Tags":{"shape":"Sc"}}},"output":{"type":"structure","members":{"Backup":{"shape":"Sh"}}}},"CreateServer":{"input":{"type":"structure","required":["Engine","ServerName","InstanceProfileArn","InstanceType","ServiceRoleArn"],"members":{"AssociatePublicIpAddress":{"type":"boolean"},"CustomDomain":{},"CustomCertificate":{},"CustomPrivateKey":{"type":"string","sensitive":true},"DisableAutomatedBackup":{"type":"boolean"},"Engine":{},"EngineModel":{},"EngineVersion":{},"EngineAttributes":{"shape":"S4"},"BackupRetentionCount":{"type":"integer"},"ServerName":{},"InstanceProfileArn":{},"InstanceType":{},"KeyPair":{},"PreferredMaintenanceWindow":{},"PreferredBackupWindow":{},"SecurityGroupIds":{"shape":"Sn"},"ServiceRoleArn":{},"SubnetIds":{"shape":"Sn"},"Tags":{"shape":"Sc"},"BackupId":{}}},"output":{"type":"structure","members":{"Server":{"shape":"Sz"}}}},"DeleteBackup":{"input":{"type":"structure","required":["BackupId"],"members":{"BackupId":{}}},"output":{"type":"structure","members":{}}},"DeleteServer":{"input":{"type":"structure","required":["ServerName"],"members":{"ServerName":{}}},"output":{"type":"structure","members":{}}},"DescribeAccountAttributes":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"Attributes":{"type":"list","member":{"type":"structure","members":{"Name":{},"Maximum":{"type":"integer"},"Used":{"type":"integer"}}}}}}},"DescribeBackups":{"input":{"type":"structure","members":{"BackupId":{},"ServerName":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Backups":{"type":"list","member":{"shape":"Sh"}},"NextToken":{}}}},"DescribeEvents":{"input":{"type":"structure","required":["ServerName"],"members":{"ServerName":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"ServerEvents":{"type":"list","member":{"type":"structure","members":{"CreatedAt":{"type":"timestamp"},"ServerName":{},"Message":{},"LogUrl":{}}}},"NextToken":{}}}},"DescribeNodeAssociationStatus":{"input":{"type":"structure","required":["NodeAssociationStatusToken","ServerName"],"members":{"NodeAssociationStatusToken":{},"ServerName":{}}},"output":{"type":"structure","members":{"NodeAssociationStatus":{},"EngineAttributes":{"shape":"S4"}}}},"DescribeServers":{"input":{"type":"structure","members":{"ServerName":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Servers":{"type":"list","member":{"shape":"Sz"}},"NextToken":{}}}},"DisassociateNode":{"input":{"type":"structure","required":["ServerName","NodeName"],"members":{"ServerName":{},"NodeName":{},"EngineAttributes":{"shape":"S4"}}},"output":{"type":"structure","members":{"NodeAssociationStatusToken":{}}}},"ExportServerEngineAttribute":{"input":{"type":"structure","required":["ExportAttributeName","ServerName"],"members":{"ExportAttributeName":{},"ServerName":{},"InputAttributes":{"shape":"S4"}}},"output":{"type":"structure","members":{"EngineAttribute":{"shape":"S5"},"ServerName":{}}}},"ListTagsForResource":{"input":{"type":"structure","required":["ResourceArn"],"members":{"ResourceArn":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Tags":{"shape":"Sc"},"NextToken":{}}}},"RestoreServer":{"input":{"type":"structure","required":["BackupId","ServerName"],"members":{"BackupId":{},"ServerName":{},"InstanceType":{},"KeyPair":{}}},"output":{"type":"structure","members":{"Server":{"shape":"Sz"}}}},"StartMaintenance":{"input":{"type":"structure","required":["ServerName"],"members":{"ServerName":{},"EngineAttributes":{"shape":"S4"}}},"output":{"type":"structure","members":{"Server":{"shape":"Sz"}}}},"TagResource":{"input":{"type":"structure","required":["ResourceArn","Tags"],"members":{"ResourceArn":{},"Tags":{"shape":"Sc"}}},"output":{"type":"structure","members":{}}},"UntagResource":{"input":{"type":"structure","required":["ResourceArn","TagKeys"],"members":{"ResourceArn":{},"TagKeys":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"UpdateServer":{"input":{"type":"structure","required":["ServerName"],"members":{"DisableAutomatedBackup":{"type":"boolean"},"BackupRetentionCount":{"type":"integer"},"ServerName":{},"PreferredMaintenanceWindow":{},"PreferredBackupWindow":{}}},"output":{"type":"structure","members":{"Server":{"shape":"Sz"}}}},"UpdateServerEngineAttributes":{"input":{"type":"structure","required":["ServerName","AttributeName"],"members":{"ServerName":{},"AttributeName":{},"AttributeValue":{}}},"output":{"type":"structure","members":{"Server":{"shape":"Sz"}}}}},"shapes":{"S4":{"type":"list","member":{"shape":"S5"}},"S5":{"type":"structure","members":{"Name":{},"Value":{"type":"string","sensitive":true}}},"Sc":{"type":"list","member":{"type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{}}}},"Sh":{"type":"structure","members":{"BackupArn":{},"BackupId":{},"BackupType":{},"CreatedAt":{"type":"timestamp"},"Description":{},"Engine":{},"EngineModel":{},"EngineVersion":{},"InstanceProfileArn":{},"InstanceType":{},"KeyPair":{},"PreferredBackupWindow":{},"PreferredMaintenanceWindow":{},"S3DataSize":{"deprecated":true,"type":"integer"},"S3DataUrl":{"deprecated":true},"S3LogUrl":{},"SecurityGroupIds":{"shape":"Sn"},"ServerName":{},"ServiceRoleArn":{},"Status":{},"StatusDescription":{},"SubnetIds":{"shape":"Sn"},"ToolsVersion":{},"UserArn":{}}},"Sn":{"type":"list","member":{}},"Sz":{"type":"structure","members":{"AssociatePublicIpAddress":{"type":"boolean"},"BackupRetentionCount":{"type":"integer"},"ServerName":{},"CreatedAt":{"type":"timestamp"},"CloudFormationStackArn":{},"CustomDomain":{},"DisableAutomatedBackup":{"type":"boolean"},"Endpoint":{},"Engine":{},"EngineModel":{},"EngineAttributes":{"shape":"S4"},"EngineVersion":{},"InstanceProfileArn":{},"InstanceType":{},"KeyPair":{},"MaintenanceStatus":{},"PreferredMaintenanceWindow":{},"PreferredBackupWindow":{},"SecurityGroupIds":{"shape":"Sn"},"ServiceRoleArn":{},"Status":{},"StatusReason":{},"SubnetIds":{"shape":"Sn"},"ServerArn":{}}}}}

/***/ }),
/* 311 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeBackups":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Backups"},"DescribeEvents":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"ServerEvents"},"DescribeServers":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Servers"},"ListTagsForResource":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Tags"}}}

/***/ }),
/* 312 */
/***/ (function(module, exports) {

	module.exports = {"version":2,"waiters":{"NodeAssociated":{"delay":15,"maxAttempts":15,"operation":"DescribeNodeAssociationStatus","description":"Wait until node is associated or disassociated.","acceptors":[{"expected":"SUCCESS","state":"success","matcher":"path","argument":"NodeAssociationStatus"},{"expected":"FAILED","state":"failure","matcher":"path","argument":"NodeAssociationStatus"}]}}}

/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['organizations'] = {};
	AWS.Organizations = Service.defineService('organizations', ['2016-11-28']);
	Object.defineProperty(apiLoader.services['organizations'], '2016-11-28', {
	  get: function get() {
	    var model = __webpack_require__(314);
	    model.paginators = __webpack_require__(315).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.Organizations;


/***/ }),
/* 314 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-11-28","endpointPrefix":"organizations","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"Organizations","serviceFullName":"AWS Organizations","serviceId":"Organizations","signatureVersion":"v4","targetPrefix":"AWSOrganizationsV20161128","uid":"organizations-2016-11-28"},"operations":{"AcceptHandshake":{"input":{"type":"structure","required":["HandshakeId"],"members":{"HandshakeId":{}}},"output":{"type":"structure","members":{"Handshake":{"shape":"S4"}}}},"AttachPolicy":{"input":{"type":"structure","required":["PolicyId","TargetId"],"members":{"PolicyId":{},"TargetId":{}}}},"CancelHandshake":{"input":{"type":"structure","required":["HandshakeId"],"members":{"HandshakeId":{}}},"output":{"type":"structure","members":{"Handshake":{"shape":"S4"}}}},"CreateAccount":{"input":{"type":"structure","required":["Email","AccountName"],"members":{"Email":{"shape":"Sn"},"AccountName":{"shape":"So"},"RoleName":{},"IamUserAccessToBilling":{},"Tags":{"shape":"Sr"}}},"output":{"type":"structure","members":{"CreateAccountStatus":{"shape":"Sw"}}}},"CreateGovCloudAccount":{"input":{"type":"structure","required":["Email","AccountName"],"members":{"Email":{"shape":"Sn"},"AccountName":{"shape":"So"},"RoleName":{},"IamUserAccessToBilling":{},"Tags":{"shape":"Sr"}}},"output":{"type":"structure","members":{"CreateAccountStatus":{"shape":"Sw"}}}},"CreateOrganization":{"input":{"type":"structure","members":{"FeatureSet":{}}},"output":{"type":"structure","members":{"Organization":{"shape":"S16"}}}},"CreateOrganizationalUnit":{"input":{"type":"structure","required":["ParentId","Name"],"members":{"ParentId":{},"Name":{},"Tags":{"shape":"Sr"}}},"output":{"type":"structure","members":{"OrganizationalUnit":{"shape":"S1i"}}}},"CreatePolicy":{"input":{"type":"structure","required":["Content","Description","Name","Type"],"members":{"Content":{},"Description":{},"Name":{},"Type":{},"Tags":{"shape":"Sr"}}},"output":{"type":"structure","members":{"Policy":{"shape":"S1q"}}}},"DeclineHandshake":{"input":{"type":"structure","required":["HandshakeId"],"members":{"HandshakeId":{}}},"output":{"type":"structure","members":{"Handshake":{"shape":"S4"}}}},"DeleteOrganization":{},"DeleteOrganizationalUnit":{"input":{"type":"structure","required":["OrganizationalUnitId"],"members":{"OrganizationalUnitId":{}}}},"DeletePolicy":{"input":{"type":"structure","required":["PolicyId"],"members":{"PolicyId":{}}}},"DeregisterDelegatedAdministrator":{"input":{"type":"structure","required":["AccountId","ServicePrincipal"],"members":{"AccountId":{},"ServicePrincipal":{}}}},"DescribeAccount":{"input":{"type":"structure","required":["AccountId"],"members":{"AccountId":{}}},"output":{"type":"structure","members":{"Account":{"shape":"S22"}}}},"DescribeCreateAccountStatus":{"input":{"type":"structure","required":["CreateAccountRequestId"],"members":{"CreateAccountRequestId":{}}},"output":{"type":"structure","members":{"CreateAccountStatus":{"shape":"Sw"}}}},"DescribeEffectivePolicy":{"input":{"type":"structure","required":["PolicyType"],"members":{"PolicyType":{},"TargetId":{}}},"output":{"type":"structure","members":{"EffectivePolicy":{"type":"structure","members":{"PolicyContent":{},"LastUpdatedTimestamp":{"type":"timestamp"},"TargetId":{},"PolicyType":{}}}}}},"DescribeHandshake":{"input":{"type":"structure","required":["HandshakeId"],"members":{"HandshakeId":{}}},"output":{"type":"structure","members":{"Handshake":{"shape":"S4"}}}},"DescribeOrganization":{"output":{"type":"structure","members":{"Organization":{"shape":"S16"}}}},"DescribeOrganizationalUnit":{"input":{"type":"structure","required":["OrganizationalUnitId"],"members":{"OrganizationalUnitId":{}}},"output":{"type":"structure","members":{"OrganizationalUnit":{"shape":"S1i"}}}},"DescribePolicy":{"input":{"type":"structure","required":["PolicyId"],"members":{"PolicyId":{}}},"output":{"type":"structure","members":{"Policy":{"shape":"S1q"}}}},"DetachPolicy":{"input":{"type":"structure","required":["PolicyId","TargetId"],"members":{"PolicyId":{},"TargetId":{}}}},"DisableAWSServiceAccess":{"input":{"type":"structure","required":["ServicePrincipal"],"members":{"ServicePrincipal":{}}}},"DisablePolicyType":{"input":{"type":"structure","required":["RootId","PolicyType"],"members":{"RootId":{},"PolicyType":{}}},"output":{"type":"structure","members":{"Root":{"shape":"S2n"}}}},"EnableAWSServiceAccess":{"input":{"type":"structure","required":["ServicePrincipal"],"members":{"ServicePrincipal":{}}}},"EnableAllFeatures":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"Handshake":{"shape":"S4"}}}},"EnablePolicyType":{"input":{"type":"structure","required":["RootId","PolicyType"],"members":{"RootId":{},"PolicyType":{}}},"output":{"type":"structure","members":{"Root":{"shape":"S2n"}}}},"InviteAccountToOrganization":{"input":{"type":"structure","required":["Target"],"members":{"Target":{"shape":"S7"},"Notes":{"type":"string","sensitive":true},"Tags":{"shape":"Sr"}}},"output":{"type":"structure","members":{"Handshake":{"shape":"S4"}}}},"LeaveOrganization":{},"ListAWSServiceAccessForOrganization":{"input":{"type":"structure","members":{"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"EnabledServicePrincipals":{"type":"list","member":{"type":"structure","members":{"ServicePrincipal":{},"DateEnabled":{"type":"timestamp"}}}},"NextToken":{}}}},"ListAccounts":{"input":{"type":"structure","members":{"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Accounts":{"shape":"S36"},"NextToken":{}}}},"ListAccountsForParent":{"input":{"type":"structure","required":["ParentId"],"members":{"ParentId":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Accounts":{"shape":"S36"},"NextToken":{}}}},"ListChildren":{"input":{"type":"structure","required":["ParentId","ChildType"],"members":{"ParentId":{},"ChildType":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Children":{"type":"list","member":{"type":"structure","members":{"Id":{},"Type":{}}}},"NextToken":{}}}},"ListCreateAccountStatus":{"input":{"type":"structure","members":{"States":{"type":"list","member":{}},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"CreateAccountStatuses":{"type":"list","member":{"shape":"Sw"}},"NextToken":{}}}},"ListDelegatedAdministrators":{"input":{"type":"structure","members":{"ServicePrincipal":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"DelegatedAdministrators":{"type":"list","member":{"type":"structure","members":{"Id":{},"Arn":{},"Email":{"shape":"Sn"},"Name":{"shape":"So"},"Status":{},"JoinedMethod":{},"JoinedTimestamp":{"type":"timestamp"},"DelegationEnabledDate":{"type":"timestamp"}}}},"NextToken":{}}}},"ListDelegatedServicesForAccount":{"input":{"type":"structure","required":["AccountId"],"members":{"AccountId":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"DelegatedServices":{"type":"list","member":{"type":"structure","members":{"ServicePrincipal":{},"DelegationEnabledDate":{"type":"timestamp"}}}},"NextToken":{}}}},"ListHandshakesForAccount":{"input":{"type":"structure","members":{"Filter":{"shape":"S3s"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Handshakes":{"shape":"S3u"},"NextToken":{}}}},"ListHandshakesForOrganization":{"input":{"type":"structure","members":{"Filter":{"shape":"S3s"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Handshakes":{"shape":"S3u"},"NextToken":{}}}},"ListOrganizationalUnitsForParent":{"input":{"type":"structure","required":["ParentId"],"members":{"ParentId":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"OrganizationalUnits":{"type":"list","member":{"shape":"S1i"}},"NextToken":{}}}},"ListParents":{"input":{"type":"structure","required":["ChildId"],"members":{"ChildId":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Parents":{"type":"list","member":{"type":"structure","members":{"Id":{},"Type":{}}}},"NextToken":{}}}},"ListPolicies":{"input":{"type":"structure","required":["Filter"],"members":{"Filter":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Policies":{"shape":"S47"},"NextToken":{}}}},"ListPoliciesForTarget":{"input":{"type":"structure","required":["TargetId","Filter"],"members":{"TargetId":{},"Filter":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Policies":{"shape":"S47"},"NextToken":{}}}},"ListRoots":{"input":{"type":"structure","members":{"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Roots":{"type":"list","member":{"shape":"S2n"}},"NextToken":{}}}},"ListTagsForResource":{"input":{"type":"structure","required":["ResourceId"],"members":{"ResourceId":{},"NextToken":{}}},"output":{"type":"structure","members":{"Tags":{"shape":"Sr"},"NextToken":{}}}},"ListTargetsForPolicy":{"input":{"type":"structure","required":["PolicyId"],"members":{"PolicyId":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Targets":{"type":"list","member":{"type":"structure","members":{"TargetId":{},"Arn":{},"Name":{},"Type":{}}}},"NextToken":{}}}},"MoveAccount":{"input":{"type":"structure","required":["AccountId","SourceParentId","DestinationParentId"],"members":{"AccountId":{},"SourceParentId":{},"DestinationParentId":{}}}},"RegisterDelegatedAdministrator":{"input":{"type":"structure","required":["AccountId","ServicePrincipal"],"members":{"AccountId":{},"ServicePrincipal":{}}}},"RemoveAccountFromOrganization":{"input":{"type":"structure","required":["AccountId"],"members":{"AccountId":{}}}},"TagResource":{"input":{"type":"structure","required":["ResourceId","Tags"],"members":{"ResourceId":{},"Tags":{"shape":"Sr"}}}},"UntagResource":{"input":{"type":"structure","required":["ResourceId","TagKeys"],"members":{"ResourceId":{},"TagKeys":{"type":"list","member":{}}}}},"UpdateOrganizationalUnit":{"input":{"type":"structure","required":["OrganizationalUnitId"],"members":{"OrganizationalUnitId":{},"Name":{}}},"output":{"type":"structure","members":{"OrganizationalUnit":{"shape":"S1i"}}}},"UpdatePolicy":{"input":{"type":"structure","required":["PolicyId"],"members":{"PolicyId":{},"Name":{},"Description":{},"Content":{}}},"output":{"type":"structure","members":{"Policy":{"shape":"S1q"}}}}},"shapes":{"S4":{"type":"structure","members":{"Id":{},"Arn":{},"Parties":{"type":"list","member":{"shape":"S7"}},"State":{},"RequestedTimestamp":{"type":"timestamp"},"ExpirationTimestamp":{"type":"timestamp"},"Action":{},"Resources":{"shape":"Sd"}}},"S7":{"type":"structure","required":["Id","Type"],"members":{"Id":{"type":"string","sensitive":true},"Type":{}}},"Sd":{"type":"list","member":{"type":"structure","members":{"Value":{"type":"string","sensitive":true},"Type":{},"Resources":{"shape":"Sd"}}}},"Sn":{"type":"string","sensitive":true},"So":{"type":"string","sensitive":true},"Sr":{"type":"list","member":{"type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{}}}},"Sw":{"type":"structure","members":{"Id":{},"AccountName":{"shape":"So"},"State":{},"RequestedTimestamp":{"type":"timestamp"},"CompletedTimestamp":{"type":"timestamp"},"AccountId":{},"GovCloudAccountId":{},"FailureReason":{}}},"S16":{"type":"structure","members":{"Id":{},"Arn":{},"FeatureSet":{},"MasterAccountArn":{},"MasterAccountId":{},"MasterAccountEmail":{"shape":"Sn"},"AvailablePolicyTypes":{"shape":"S1a"}}},"S1a":{"type":"list","member":{"type":"structure","members":{"Type":{},"Status":{}}}},"S1i":{"type":"structure","members":{"Id":{},"Arn":{},"Name":{}}},"S1q":{"type":"structure","members":{"PolicySummary":{"shape":"S1r"},"Content":{}}},"S1r":{"type":"structure","members":{"Id":{},"Arn":{},"Name":{},"Description":{},"Type":{},"AwsManaged":{"type":"boolean"}}},"S22":{"type":"structure","members":{"Id":{},"Arn":{},"Email":{"shape":"Sn"},"Name":{"shape":"So"},"Status":{},"JoinedMethod":{},"JoinedTimestamp":{"type":"timestamp"}}},"S2n":{"type":"structure","members":{"Id":{},"Arn":{},"Name":{},"PolicyTypes":{"shape":"S1a"}}},"S36":{"type":"list","member":{"shape":"S22"}},"S3s":{"type":"structure","members":{"ActionType":{},"ParentHandshakeId":{}}},"S3u":{"type":"list","member":{"shape":"S4"}},"S47":{"type":"list","member":{"shape":"S1r"}}}}

/***/ }),
/* 315 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"ListAWSServiceAccessForOrganization":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken"},"ListAccounts":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken"},"ListAccountsForParent":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken"},"ListChildren":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken"},"ListCreateAccountStatus":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken"},"ListDelegatedAdministrators":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"DelegatedAdministrators"},"ListDelegatedServicesForAccount":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"DelegatedServices"},"ListHandshakesForAccount":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken"},"ListHandshakesForOrganization":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken"},"ListOrganizationalUnitsForParent":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken"},"ListParents":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken"},"ListPolicies":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken"},"ListPoliciesForTarget":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken"},"ListRoots":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken"},"ListTagsForResource":{"input_token":"NextToken","output_token":"NextToken","result_key":"Tags"},"ListTargetsForPolicy":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken"}}}

/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['pinpoint'] = {};
	AWS.Pinpoint = Service.defineService('pinpoint', ['2016-12-01']);
	Object.defineProperty(apiLoader.services['pinpoint'], '2016-12-01', {
	  get: function get() {
	    var model = __webpack_require__(317);
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.Pinpoint;


/***/ }),
/* 317 */
/***/ (function(module, exports) {

	module.exports = {"metadata":{"apiVersion":"2016-12-01","endpointPrefix":"pinpoint","signingName":"mobiletargeting","serviceFullName":"Amazon Pinpoint","serviceId":"Pinpoint","protocol":"rest-json","jsonVersion":"1.1","uid":"pinpoint-2016-12-01","signatureVersion":"v4"},"operations":{"CreateApp":{"http":{"requestUri":"/v1/apps","responseCode":201},"input":{"type":"structure","members":{"CreateApplicationRequest":{"type":"structure","members":{"Name":{},"tags":{"shape":"S4","locationName":"tags"}},"required":["Name"]}},"required":["CreateApplicationRequest"],"payload":"CreateApplicationRequest"},"output":{"type":"structure","members":{"ApplicationResponse":{"shape":"S6"}},"required":["ApplicationResponse"],"payload":"ApplicationResponse"}},"CreateCampaign":{"http":{"requestUri":"/v1/apps/{application-id}/campaigns","responseCode":201},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"WriteCampaignRequest":{"shape":"S8"}},"required":["ApplicationId","WriteCampaignRequest"],"payload":"WriteCampaignRequest"},"output":{"type":"structure","members":{"CampaignResponse":{"shape":"S18"}},"required":["CampaignResponse"],"payload":"CampaignResponse"}},"CreateEmailTemplate":{"http":{"requestUri":"/v1/templates/{template-name}/email","responseCode":201},"input":{"type":"structure","members":{"EmailTemplateRequest":{"shape":"S1e"},"TemplateName":{"location":"uri","locationName":"template-name"}},"required":["TemplateName","EmailTemplateRequest"],"payload":"EmailTemplateRequest"},"output":{"type":"structure","members":{"CreateTemplateMessageBody":{"shape":"S1g"}},"required":["CreateTemplateMessageBody"],"payload":"CreateTemplateMessageBody"}},"CreateExportJob":{"http":{"requestUri":"/v1/apps/{application-id}/jobs/export","responseCode":202},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"ExportJobRequest":{"type":"structure","members":{"RoleArn":{},"S3UrlPrefix":{},"SegmentId":{},"SegmentVersion":{"type":"integer"}},"required":["S3UrlPrefix","RoleArn"]}},"required":["ApplicationId","ExportJobRequest"],"payload":"ExportJobRequest"},"output":{"type":"structure","members":{"ExportJobResponse":{"shape":"S1k"}},"required":["ExportJobResponse"],"payload":"ExportJobResponse"}},"CreateImportJob":{"http":{"requestUri":"/v1/apps/{application-id}/jobs/import","responseCode":201},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"ImportJobRequest":{"type":"structure","members":{"DefineSegment":{"type":"boolean"},"ExternalId":{},"Format":{},"RegisterEndpoints":{"type":"boolean"},"RoleArn":{},"S3Url":{},"SegmentId":{},"SegmentName":{}},"required":["Format","S3Url","RoleArn"]}},"required":["ApplicationId","ImportJobRequest"],"payload":"ImportJobRequest"},"output":{"type":"structure","members":{"ImportJobResponse":{"shape":"S1r"}},"required":["ImportJobResponse"],"payload":"ImportJobResponse"}},"CreateJourney":{"http":{"requestUri":"/v1/apps/{application-id}/journeys","responseCode":201},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"WriteJourneyRequest":{"shape":"S1u"}},"required":["ApplicationId","WriteJourneyRequest"],"payload":"WriteJourneyRequest"},"output":{"type":"structure","members":{"JourneyResponse":{"shape":"S32"}},"required":["JourneyResponse"],"payload":"JourneyResponse"}},"CreatePushTemplate":{"http":{"requestUri":"/v1/templates/{template-name}/push","responseCode":201},"input":{"type":"structure","members":{"PushNotificationTemplateRequest":{"shape":"S34"},"TemplateName":{"location":"uri","locationName":"template-name"}},"required":["TemplateName","PushNotificationTemplateRequest"],"payload":"PushNotificationTemplateRequest"},"output":{"type":"structure","members":{"CreateTemplateMessageBody":{"shape":"S1g"}},"required":["CreateTemplateMessageBody"],"payload":"CreateTemplateMessageBody"}},"CreateRecommenderConfiguration":{"http":{"requestUri":"/v1/recommenders","responseCode":201},"input":{"type":"structure","members":{"CreateRecommenderConfiguration":{"type":"structure","members":{"Attributes":{"shape":"S4"},"Description":{},"Name":{},"RecommendationProviderIdType":{},"RecommendationProviderRoleArn":{},"RecommendationProviderUri":{},"RecommendationTransformerUri":{},"RecommendationsDisplayName":{},"RecommendationsPerMessage":{"type":"integer"}},"required":["RecommendationProviderUri","RecommendationProviderRoleArn"]}},"required":["CreateRecommenderConfiguration"],"payload":"CreateRecommenderConfiguration"},"output":{"type":"structure","members":{"RecommenderConfigurationResponse":{"shape":"S3c"}},"required":["RecommenderConfigurationResponse"],"payload":"RecommenderConfigurationResponse"}},"CreateSegment":{"http":{"requestUri":"/v1/apps/{application-id}/segments","responseCode":201},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"WriteSegmentRequest":{"shape":"S3e"}},"required":["ApplicationId","WriteSegmentRequest"],"payload":"WriteSegmentRequest"},"output":{"type":"structure","members":{"SegmentResponse":{"shape":"S3p"}},"required":["SegmentResponse"],"payload":"SegmentResponse"}},"CreateSmsTemplate":{"http":{"requestUri":"/v1/templates/{template-name}/sms","responseCode":201},"input":{"type":"structure","members":{"SMSTemplateRequest":{"shape":"S3u"},"TemplateName":{"location":"uri","locationName":"template-name"}},"required":["TemplateName","SMSTemplateRequest"],"payload":"SMSTemplateRequest"},"output":{"type":"structure","members":{"CreateTemplateMessageBody":{"shape":"S1g"}},"required":["CreateTemplateMessageBody"],"payload":"CreateTemplateMessageBody"}},"CreateVoiceTemplate":{"http":{"requestUri":"/v1/templates/{template-name}/voice","responseCode":201},"input":{"type":"structure","members":{"TemplateName":{"location":"uri","locationName":"template-name"},"VoiceTemplateRequest":{"shape":"S3x"}},"required":["TemplateName","VoiceTemplateRequest"],"payload":"VoiceTemplateRequest"},"output":{"type":"structure","members":{"CreateTemplateMessageBody":{"shape":"S1g"}},"required":["CreateTemplateMessageBody"],"payload":"CreateTemplateMessageBody"}},"DeleteAdmChannel":{"http":{"method":"DELETE","requestUri":"/v1/apps/{application-id}/channels/adm","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"ADMChannelResponse":{"shape":"S41"}},"required":["ADMChannelResponse"],"payload":"ADMChannelResponse"}},"DeleteApnsChannel":{"http":{"method":"DELETE","requestUri":"/v1/apps/{application-id}/channels/apns","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"APNSChannelResponse":{"shape":"S44"}},"required":["APNSChannelResponse"],"payload":"APNSChannelResponse"}},"DeleteApnsSandboxChannel":{"http":{"method":"DELETE","requestUri":"/v1/apps/{application-id}/channels/apns_sandbox","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"APNSSandboxChannelResponse":{"shape":"S47"}},"required":["APNSSandboxChannelResponse"],"payload":"APNSSandboxChannelResponse"}},"DeleteApnsVoipChannel":{"http":{"method":"DELETE","requestUri":"/v1/apps/{application-id}/channels/apns_voip","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"APNSVoipChannelResponse":{"shape":"S4a"}},"required":["APNSVoipChannelResponse"],"payload":"APNSVoipChannelResponse"}},"DeleteApnsVoipSandboxChannel":{"http":{"method":"DELETE","requestUri":"/v1/apps/{application-id}/channels/apns_voip_sandbox","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"APNSVoipSandboxChannelResponse":{"shape":"S4d"}},"required":["APNSVoipSandboxChannelResponse"],"payload":"APNSVoipSandboxChannelResponse"}},"DeleteApp":{"http":{"method":"DELETE","requestUri":"/v1/apps/{application-id}","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"ApplicationResponse":{"shape":"S6"}},"required":["ApplicationResponse"],"payload":"ApplicationResponse"}},"DeleteBaiduChannel":{"http":{"method":"DELETE","requestUri":"/v1/apps/{application-id}/channels/baidu","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"BaiduChannelResponse":{"shape":"S4i"}},"required":["BaiduChannelResponse"],"payload":"BaiduChannelResponse"}},"DeleteCampaign":{"http":{"method":"DELETE","requestUri":"/v1/apps/{application-id}/campaigns/{campaign-id}","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"CampaignId":{"location":"uri","locationName":"campaign-id"}},"required":["CampaignId","ApplicationId"]},"output":{"type":"structure","members":{"CampaignResponse":{"shape":"S18"}},"required":["CampaignResponse"],"payload":"CampaignResponse"}},"DeleteEmailChannel":{"http":{"method":"DELETE","requestUri":"/v1/apps/{application-id}/channels/email","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"EmailChannelResponse":{"shape":"S4n"}},"required":["EmailChannelResponse"],"payload":"EmailChannelResponse"}},"DeleteEmailTemplate":{"http":{"method":"DELETE","requestUri":"/v1/templates/{template-name}/email","responseCode":202},"input":{"type":"structure","members":{"TemplateName":{"location":"uri","locationName":"template-name"},"Version":{"location":"querystring","locationName":"version"}},"required":["TemplateName"]},"output":{"type":"structure","members":{"MessageBody":{"shape":"S4q"}},"required":["MessageBody"],"payload":"MessageBody"}},"DeleteEndpoint":{"http":{"method":"DELETE","requestUri":"/v1/apps/{application-id}/endpoints/{endpoint-id}","responseCode":202},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"EndpointId":{"location":"uri","locationName":"endpoint-id"}},"required":["ApplicationId","EndpointId"]},"output":{"type":"structure","members":{"EndpointResponse":{"shape":"S4t"}},"required":["EndpointResponse"],"payload":"EndpointResponse"}},"DeleteEventStream":{"http":{"method":"DELETE","requestUri":"/v1/apps/{application-id}/eventstream","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"EventStream":{"shape":"S52"}},"required":["EventStream"],"payload":"EventStream"}},"DeleteGcmChannel":{"http":{"method":"DELETE","requestUri":"/v1/apps/{application-id}/channels/gcm","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"GCMChannelResponse":{"shape":"S55"}},"required":["GCMChannelResponse"],"payload":"GCMChannelResponse"}},"DeleteJourney":{"http":{"method":"DELETE","requestUri":"/v1/apps/{application-id}/journeys/{journey-id}","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"JourneyId":{"location":"uri","locationName":"journey-id"}},"required":["JourneyId","ApplicationId"]},"output":{"type":"structure","members":{"JourneyResponse":{"shape":"S32"}},"required":["JourneyResponse"],"payload":"JourneyResponse"}},"DeletePushTemplate":{"http":{"method":"DELETE","requestUri":"/v1/templates/{template-name}/push","responseCode":202},"input":{"type":"structure","members":{"TemplateName":{"location":"uri","locationName":"template-name"},"Version":{"location":"querystring","locationName":"version"}},"required":["TemplateName"]},"output":{"type":"structure","members":{"MessageBody":{"shape":"S4q"}},"required":["MessageBody"],"payload":"MessageBody"}},"DeleteRecommenderConfiguration":{"http":{"method":"DELETE","requestUri":"/v1/recommenders/{recommender-id}","responseCode":200},"input":{"type":"structure","members":{"RecommenderId":{"location":"uri","locationName":"recommender-id"}},"required":["RecommenderId"]},"output":{"type":"structure","members":{"RecommenderConfigurationResponse":{"shape":"S3c"}},"required":["RecommenderConfigurationResponse"],"payload":"RecommenderConfigurationResponse"}},"DeleteSegment":{"http":{"method":"DELETE","requestUri":"/v1/apps/{application-id}/segments/{segment-id}","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"SegmentId":{"location":"uri","locationName":"segment-id"}},"required":["SegmentId","ApplicationId"]},"output":{"type":"structure","members":{"SegmentResponse":{"shape":"S3p"}},"required":["SegmentResponse"],"payload":"SegmentResponse"}},"DeleteSmsChannel":{"http":{"method":"DELETE","requestUri":"/v1/apps/{application-id}/channels/sms","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"SMSChannelResponse":{"shape":"S5g"}},"required":["SMSChannelResponse"],"payload":"SMSChannelResponse"}},"DeleteSmsTemplate":{"http":{"method":"DELETE","requestUri":"/v1/templates/{template-name}/sms","responseCode":202},"input":{"type":"structure","members":{"TemplateName":{"location":"uri","locationName":"template-name"},"Version":{"location":"querystring","locationName":"version"}},"required":["TemplateName"]},"output":{"type":"structure","members":{"MessageBody":{"shape":"S4q"}},"required":["MessageBody"],"payload":"MessageBody"}},"DeleteUserEndpoints":{"http":{"method":"DELETE","requestUri":"/v1/apps/{application-id}/users/{user-id}","responseCode":202},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"UserId":{"location":"uri","locationName":"user-id"}},"required":["ApplicationId","UserId"]},"output":{"type":"structure","members":{"EndpointsResponse":{"shape":"S5l"}},"required":["EndpointsResponse"],"payload":"EndpointsResponse"}},"DeleteVoiceChannel":{"http":{"method":"DELETE","requestUri":"/v1/apps/{application-id}/channels/voice","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"VoiceChannelResponse":{"shape":"S5p"}},"required":["VoiceChannelResponse"],"payload":"VoiceChannelResponse"}},"DeleteVoiceTemplate":{"http":{"method":"DELETE","requestUri":"/v1/templates/{template-name}/voice","responseCode":202},"input":{"type":"structure","members":{"TemplateName":{"location":"uri","locationName":"template-name"},"Version":{"location":"querystring","locationName":"version"}},"required":["TemplateName"]},"output":{"type":"structure","members":{"MessageBody":{"shape":"S4q"}},"required":["MessageBody"],"payload":"MessageBody"}},"GetAdmChannel":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/channels/adm","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"ADMChannelResponse":{"shape":"S41"}},"required":["ADMChannelResponse"],"payload":"ADMChannelResponse"}},"GetApnsChannel":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/channels/apns","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"APNSChannelResponse":{"shape":"S44"}},"required":["APNSChannelResponse"],"payload":"APNSChannelResponse"}},"GetApnsSandboxChannel":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/channels/apns_sandbox","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"APNSSandboxChannelResponse":{"shape":"S47"}},"required":["APNSSandboxChannelResponse"],"payload":"APNSSandboxChannelResponse"}},"GetApnsVoipChannel":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/channels/apns_voip","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"APNSVoipChannelResponse":{"shape":"S4a"}},"required":["APNSVoipChannelResponse"],"payload":"APNSVoipChannelResponse"}},"GetApnsVoipSandboxChannel":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/channels/apns_voip_sandbox","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"APNSVoipSandboxChannelResponse":{"shape":"S4d"}},"required":["APNSVoipSandboxChannelResponse"],"payload":"APNSVoipSandboxChannelResponse"}},"GetApp":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"ApplicationResponse":{"shape":"S6"}},"required":["ApplicationResponse"],"payload":"ApplicationResponse"}},"GetApplicationDateRangeKpi":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/kpis/daterange/{kpi-name}","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"EndTime":{"shape":"S2w","location":"querystring","locationName":"end-time"},"KpiName":{"location":"uri","locationName":"kpi-name"},"NextToken":{"location":"querystring","locationName":"next-token"},"PageSize":{"location":"querystring","locationName":"page-size"},"StartTime":{"shape":"S2w","location":"querystring","locationName":"start-time"}},"required":["ApplicationId","KpiName"]},"output":{"type":"structure","members":{"ApplicationDateRangeKpiResponse":{"type":"structure","members":{"ApplicationId":{},"EndTime":{"shape":"S2w"},"KpiName":{},"KpiResult":{"shape":"S67"},"NextToken":{},"StartTime":{"shape":"S2w"}},"required":["KpiResult","KpiName","EndTime","StartTime","ApplicationId"]}},"required":["ApplicationDateRangeKpiResponse"],"payload":"ApplicationDateRangeKpiResponse"}},"GetApplicationSettings":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/settings","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"ApplicationSettingsResource":{"shape":"S6e"}},"required":["ApplicationSettingsResource"],"payload":"ApplicationSettingsResource"}},"GetApps":{"http":{"method":"GET","requestUri":"/v1/apps","responseCode":200},"input":{"type":"structure","members":{"PageSize":{"location":"querystring","locationName":"page-size"},"Token":{"location":"querystring","locationName":"token"}}},"output":{"type":"structure","members":{"ApplicationsResponse":{"type":"structure","members":{"Item":{"type":"list","member":{"shape":"S6"}},"NextToken":{}}}},"required":["ApplicationsResponse"],"payload":"ApplicationsResponse"}},"GetBaiduChannel":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/channels/baidu","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"BaiduChannelResponse":{"shape":"S4i"}},"required":["BaiduChannelResponse"],"payload":"BaiduChannelResponse"}},"GetCampaign":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/campaigns/{campaign-id}","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"CampaignId":{"location":"uri","locationName":"campaign-id"}},"required":["CampaignId","ApplicationId"]},"output":{"type":"structure","members":{"CampaignResponse":{"shape":"S18"}},"required":["CampaignResponse"],"payload":"CampaignResponse"}},"GetCampaignActivities":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/campaigns/{campaign-id}/activities","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"CampaignId":{"location":"uri","locationName":"campaign-id"},"PageSize":{"location":"querystring","locationName":"page-size"},"Token":{"location":"querystring","locationName":"token"}},"required":["ApplicationId","CampaignId"]},"output":{"type":"structure","members":{"ActivitiesResponse":{"type":"structure","members":{"Item":{"type":"list","member":{"type":"structure","members":{"ApplicationId":{},"CampaignId":{},"End":{},"Id":{},"Result":{},"ScheduledStart":{},"Start":{},"State":{},"SuccessfulEndpointCount":{"type":"integer"},"TimezonesCompletedCount":{"type":"integer"},"TimezonesTotalCount":{"type":"integer"},"TotalEndpointCount":{"type":"integer"},"TreatmentId":{}},"required":["CampaignId","Id","ApplicationId"]}},"NextToken":{}},"required":["Item"]}},"required":["ActivitiesResponse"],"payload":"ActivitiesResponse"}},"GetCampaignDateRangeKpi":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/campaigns/{campaign-id}/kpis/daterange/{kpi-name}","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"CampaignId":{"location":"uri","locationName":"campaign-id"},"EndTime":{"shape":"S2w","location":"querystring","locationName":"end-time"},"KpiName":{"location":"uri","locationName":"kpi-name"},"NextToken":{"location":"querystring","locationName":"next-token"},"PageSize":{"location":"querystring","locationName":"page-size"},"StartTime":{"shape":"S2w","location":"querystring","locationName":"start-time"}},"required":["ApplicationId","KpiName","CampaignId"]},"output":{"type":"structure","members":{"CampaignDateRangeKpiResponse":{"type":"structure","members":{"ApplicationId":{},"CampaignId":{},"EndTime":{"shape":"S2w"},"KpiName":{},"KpiResult":{"shape":"S67"},"NextToken":{},"StartTime":{"shape":"S2w"}},"required":["KpiResult","KpiName","EndTime","CampaignId","StartTime","ApplicationId"]}},"required":["CampaignDateRangeKpiResponse"],"payload":"CampaignDateRangeKpiResponse"}},"GetCampaignVersion":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/campaigns/{campaign-id}/versions/{version}","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"CampaignId":{"location":"uri","locationName":"campaign-id"},"Version":{"location":"uri","locationName":"version"}},"required":["Version","ApplicationId","CampaignId"]},"output":{"type":"structure","members":{"CampaignResponse":{"shape":"S18"}},"required":["CampaignResponse"],"payload":"CampaignResponse"}},"GetCampaignVersions":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/campaigns/{campaign-id}/versions","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"CampaignId":{"location":"uri","locationName":"campaign-id"},"PageSize":{"location":"querystring","locationName":"page-size"},"Token":{"location":"querystring","locationName":"token"}},"required":["ApplicationId","CampaignId"]},"output":{"type":"structure","members":{"CampaignsResponse":{"shape":"S6z"}},"required":["CampaignsResponse"],"payload":"CampaignsResponse"}},"GetCampaigns":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/campaigns","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"PageSize":{"location":"querystring","locationName":"page-size"},"Token":{"location":"querystring","locationName":"token"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"CampaignsResponse":{"shape":"S6z"}},"required":["CampaignsResponse"],"payload":"CampaignsResponse"}},"GetChannels":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/channels","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"ChannelsResponse":{"type":"structure","members":{"Channels":{"type":"map","key":{},"value":{"type":"structure","members":{"ApplicationId":{},"CreationDate":{},"Enabled":{"type":"boolean"},"HasCredential":{"type":"boolean"},"Id":{},"IsArchived":{"type":"boolean"},"LastModifiedBy":{},"LastModifiedDate":{},"Version":{"type":"integer"}}}}},"required":["Channels"]}},"required":["ChannelsResponse"],"payload":"ChannelsResponse"}},"GetEmailChannel":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/channels/email","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"EmailChannelResponse":{"shape":"S4n"}},"required":["EmailChannelResponse"],"payload":"EmailChannelResponse"}},"GetEmailTemplate":{"http":{"method":"GET","requestUri":"/v1/templates/{template-name}/email","responseCode":200},"input":{"type":"structure","members":{"TemplateName":{"location":"uri","locationName":"template-name"},"Version":{"location":"querystring","locationName":"version"}},"required":["TemplateName"]},"output":{"type":"structure","members":{"EmailTemplateResponse":{"type":"structure","members":{"Arn":{},"CreationDate":{},"DefaultSubstitutions":{},"HtmlPart":{},"LastModifiedDate":{},"RecommenderId":{},"Subject":{},"tags":{"shape":"S4","locationName":"tags"},"TemplateDescription":{},"TemplateName":{},"TemplateType":{},"TextPart":{},"Version":{}},"required":["LastModifiedDate","CreationDate","TemplateName","TemplateType"]}},"required":["EmailTemplateResponse"],"payload":"EmailTemplateResponse"}},"GetEndpoint":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/endpoints/{endpoint-id}","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"EndpointId":{"location":"uri","locationName":"endpoint-id"}},"required":["ApplicationId","EndpointId"]},"output":{"type":"structure","members":{"EndpointResponse":{"shape":"S4t"}},"required":["EndpointResponse"],"payload":"EndpointResponse"}},"GetEventStream":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/eventstream","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"EventStream":{"shape":"S52"}},"required":["EventStream"],"payload":"EventStream"}},"GetExportJob":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/jobs/export/{job-id}","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"JobId":{"location":"uri","locationName":"job-id"}},"required":["ApplicationId","JobId"]},"output":{"type":"structure","members":{"ExportJobResponse":{"shape":"S1k"}},"required":["ExportJobResponse"],"payload":"ExportJobResponse"}},"GetExportJobs":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/jobs/export","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"PageSize":{"location":"querystring","locationName":"page-size"},"Token":{"location":"querystring","locationName":"token"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"ExportJobsResponse":{"shape":"S7m"}},"required":["ExportJobsResponse"],"payload":"ExportJobsResponse"}},"GetGcmChannel":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/channels/gcm","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"GCMChannelResponse":{"shape":"S55"}},"required":["GCMChannelResponse"],"payload":"GCMChannelResponse"}},"GetImportJob":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/jobs/import/{job-id}","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"JobId":{"location":"uri","locationName":"job-id"}},"required":["ApplicationId","JobId"]},"output":{"type":"structure","members":{"ImportJobResponse":{"shape":"S1r"}},"required":["ImportJobResponse"],"payload":"ImportJobResponse"}},"GetImportJobs":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/jobs/import","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"PageSize":{"location":"querystring","locationName":"page-size"},"Token":{"location":"querystring","locationName":"token"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"ImportJobsResponse":{"shape":"S7u"}},"required":["ImportJobsResponse"],"payload":"ImportJobsResponse"}},"GetJourney":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/journeys/{journey-id}","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"JourneyId":{"location":"uri","locationName":"journey-id"}},"required":["JourneyId","ApplicationId"]},"output":{"type":"structure","members":{"JourneyResponse":{"shape":"S32"}},"required":["JourneyResponse"],"payload":"JourneyResponse"}},"GetJourneyDateRangeKpi":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/journeys/{journey-id}/kpis/daterange/{kpi-name}","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"EndTime":{"shape":"S2w","location":"querystring","locationName":"end-time"},"JourneyId":{"location":"uri","locationName":"journey-id"},"KpiName":{"location":"uri","locationName":"kpi-name"},"NextToken":{"location":"querystring","locationName":"next-token"},"PageSize":{"location":"querystring","locationName":"page-size"},"StartTime":{"shape":"S2w","location":"querystring","locationName":"start-time"}},"required":["JourneyId","ApplicationId","KpiName"]},"output":{"type":"structure","members":{"JourneyDateRangeKpiResponse":{"type":"structure","members":{"ApplicationId":{},"EndTime":{"shape":"S2w"},"JourneyId":{},"KpiName":{},"KpiResult":{"shape":"S67"},"NextToken":{},"StartTime":{"shape":"S2w"}},"required":["KpiResult","KpiName","JourneyId","EndTime","StartTime","ApplicationId"]}},"required":["JourneyDateRangeKpiResponse"],"payload":"JourneyDateRangeKpiResponse"}},"GetJourneyExecutionActivityMetrics":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/journeys/{journey-id}/activities/{journey-activity-id}/execution-metrics","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"JourneyActivityId":{"location":"uri","locationName":"journey-activity-id"},"JourneyId":{"location":"uri","locationName":"journey-id"},"NextToken":{"location":"querystring","locationName":"next-token"},"PageSize":{"location":"querystring","locationName":"page-size"}},"required":["JourneyActivityId","ApplicationId","JourneyId"]},"output":{"type":"structure","members":{"JourneyExecutionActivityMetricsResponse":{"type":"structure","members":{"ActivityType":{},"ApplicationId":{},"JourneyActivityId":{},"JourneyId":{},"LastEvaluatedTime":{},"Metrics":{"shape":"S4"}},"required":["Metrics","JourneyId","LastEvaluatedTime","JourneyActivityId","ActivityType","ApplicationId"]}},"required":["JourneyExecutionActivityMetricsResponse"],"payload":"JourneyExecutionActivityMetricsResponse"}},"GetJourneyExecutionMetrics":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/journeys/{journey-id}/execution-metrics","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"JourneyId":{"location":"uri","locationName":"journey-id"},"NextToken":{"location":"querystring","locationName":"next-token"},"PageSize":{"location":"querystring","locationName":"page-size"}},"required":["ApplicationId","JourneyId"]},"output":{"type":"structure","members":{"JourneyExecutionMetricsResponse":{"type":"structure","members":{"ApplicationId":{},"JourneyId":{},"LastEvaluatedTime":{},"Metrics":{"shape":"S4"}},"required":["Metrics","JourneyId","LastEvaluatedTime","ApplicationId"]}},"required":["JourneyExecutionMetricsResponse"],"payload":"JourneyExecutionMetricsResponse"}},"GetPushTemplate":{"http":{"method":"GET","requestUri":"/v1/templates/{template-name}/push","responseCode":200},"input":{"type":"structure","members":{"TemplateName":{"location":"uri","locationName":"template-name"},"Version":{"location":"querystring","locationName":"version"}},"required":["TemplateName"]},"output":{"type":"structure","members":{"PushNotificationTemplateResponse":{"type":"structure","members":{"ADM":{"shape":"S35"},"APNS":{"shape":"S36"},"Arn":{},"Baidu":{"shape":"S35"},"CreationDate":{},"Default":{"shape":"S37"},"DefaultSubstitutions":{},"GCM":{"shape":"S35"},"LastModifiedDate":{},"RecommenderId":{},"tags":{"shape":"S4","locationName":"tags"},"TemplateDescription":{},"TemplateName":{},"TemplateType":{},"Version":{}},"required":["LastModifiedDate","CreationDate","TemplateType","TemplateName"]}},"required":["PushNotificationTemplateResponse"],"payload":"PushNotificationTemplateResponse"}},"GetRecommenderConfiguration":{"http":{"method":"GET","requestUri":"/v1/recommenders/{recommender-id}","responseCode":200},"input":{"type":"structure","members":{"RecommenderId":{"location":"uri","locationName":"recommender-id"}},"required":["RecommenderId"]},"output":{"type":"structure","members":{"RecommenderConfigurationResponse":{"shape":"S3c"}},"required":["RecommenderConfigurationResponse"],"payload":"RecommenderConfigurationResponse"}},"GetRecommenderConfigurations":{"http":{"method":"GET","requestUri":"/v1/recommenders","responseCode":200},"input":{"type":"structure","members":{"PageSize":{"location":"querystring","locationName":"page-size"},"Token":{"location":"querystring","locationName":"token"}}},"output":{"type":"structure","members":{"ListRecommenderConfigurationsResponse":{"type":"structure","members":{"Item":{"type":"list","member":{"shape":"S3c"}},"NextToken":{}},"required":["Item"]}},"required":["ListRecommenderConfigurationsResponse"],"payload":"ListRecommenderConfigurationsResponse"}},"GetSegment":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/segments/{segment-id}","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"SegmentId":{"location":"uri","locationName":"segment-id"}},"required":["SegmentId","ApplicationId"]},"output":{"type":"structure","members":{"SegmentResponse":{"shape":"S3p"}},"required":["SegmentResponse"],"payload":"SegmentResponse"}},"GetSegmentExportJobs":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/segments/{segment-id}/jobs/export","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"PageSize":{"location":"querystring","locationName":"page-size"},"SegmentId":{"location":"uri","locationName":"segment-id"},"Token":{"location":"querystring","locationName":"token"}},"required":["SegmentId","ApplicationId"]},"output":{"type":"structure","members":{"ExportJobsResponse":{"shape":"S7m"}},"required":["ExportJobsResponse"],"payload":"ExportJobsResponse"}},"GetSegmentImportJobs":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/segments/{segment-id}/jobs/import","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"PageSize":{"location":"querystring","locationName":"page-size"},"SegmentId":{"location":"uri","locationName":"segment-id"},"Token":{"location":"querystring","locationName":"token"}},"required":["SegmentId","ApplicationId"]},"output":{"type":"structure","members":{"ImportJobsResponse":{"shape":"S7u"}},"required":["ImportJobsResponse"],"payload":"ImportJobsResponse"}},"GetSegmentVersion":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/segments/{segment-id}/versions/{version}","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"SegmentId":{"location":"uri","locationName":"segment-id"},"Version":{"location":"uri","locationName":"version"}},"required":["SegmentId","Version","ApplicationId"]},"output":{"type":"structure","members":{"SegmentResponse":{"shape":"S3p"}},"required":["SegmentResponse"],"payload":"SegmentResponse"}},"GetSegmentVersions":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/segments/{segment-id}/versions","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"PageSize":{"location":"querystring","locationName":"page-size"},"SegmentId":{"location":"uri","locationName":"segment-id"},"Token":{"location":"querystring","locationName":"token"}},"required":["SegmentId","ApplicationId"]},"output":{"type":"structure","members":{"SegmentsResponse":{"shape":"S8q"}},"required":["SegmentsResponse"],"payload":"SegmentsResponse"}},"GetSegments":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/segments","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"PageSize":{"location":"querystring","locationName":"page-size"},"Token":{"location":"querystring","locationName":"token"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"SegmentsResponse":{"shape":"S8q"}},"required":["SegmentsResponse"],"payload":"SegmentsResponse"}},"GetSmsChannel":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/channels/sms","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"SMSChannelResponse":{"shape":"S5g"}},"required":["SMSChannelResponse"],"payload":"SMSChannelResponse"}},"GetSmsTemplate":{"http":{"method":"GET","requestUri":"/v1/templates/{template-name}/sms","responseCode":200},"input":{"type":"structure","members":{"TemplateName":{"location":"uri","locationName":"template-name"},"Version":{"location":"querystring","locationName":"version"}},"required":["TemplateName"]},"output":{"type":"structure","members":{"SMSTemplateResponse":{"type":"structure","members":{"Arn":{},"Body":{},"CreationDate":{},"DefaultSubstitutions":{},"LastModifiedDate":{},"RecommenderId":{},"tags":{"shape":"S4","locationName":"tags"},"TemplateDescription":{},"TemplateName":{},"TemplateType":{},"Version":{}},"required":["LastModifiedDate","CreationDate","TemplateName","TemplateType"]}},"required":["SMSTemplateResponse"],"payload":"SMSTemplateResponse"}},"GetUserEndpoints":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/users/{user-id}","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"UserId":{"location":"uri","locationName":"user-id"}},"required":["ApplicationId","UserId"]},"output":{"type":"structure","members":{"EndpointsResponse":{"shape":"S5l"}},"required":["EndpointsResponse"],"payload":"EndpointsResponse"}},"GetVoiceChannel":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/channels/voice","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"VoiceChannelResponse":{"shape":"S5p"}},"required":["VoiceChannelResponse"],"payload":"VoiceChannelResponse"}},"GetVoiceTemplate":{"http":{"method":"GET","requestUri":"/v1/templates/{template-name}/voice","responseCode":200},"input":{"type":"structure","members":{"TemplateName":{"location":"uri","locationName":"template-name"},"Version":{"location":"querystring","locationName":"version"}},"required":["TemplateName"]},"output":{"type":"structure","members":{"VoiceTemplateResponse":{"type":"structure","members":{"Arn":{},"Body":{},"CreationDate":{},"DefaultSubstitutions":{},"LanguageCode":{},"LastModifiedDate":{},"tags":{"shape":"S4","locationName":"tags"},"TemplateDescription":{},"TemplateName":{},"TemplateType":{},"Version":{},"VoiceId":{}},"required":["LastModifiedDate","CreationDate","TemplateName","TemplateType"]}},"required":["VoiceTemplateResponse"],"payload":"VoiceTemplateResponse"}},"ListJourneys":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/journeys","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"PageSize":{"location":"querystring","locationName":"page-size"},"Token":{"location":"querystring","locationName":"token"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"JourneysResponse":{"type":"structure","members":{"Item":{"type":"list","member":{"shape":"S32"}},"NextToken":{}},"required":["Item"]}},"required":["JourneysResponse"],"payload":"JourneysResponse"}},"ListTagsForResource":{"http":{"method":"GET","requestUri":"/v1/tags/{resource-arn}","responseCode":200},"input":{"type":"structure","members":{"ResourceArn":{"location":"uri","locationName":"resource-arn"}},"required":["ResourceArn"]},"output":{"type":"structure","members":{"TagsModel":{"shape":"S9c"}},"required":["TagsModel"],"payload":"TagsModel"}},"ListTemplateVersions":{"http":{"method":"GET","requestUri":"/v1/templates/{template-name}/{template-type}/versions","responseCode":200},"input":{"type":"structure","members":{"NextToken":{"location":"querystring","locationName":"next-token"},"PageSize":{"location":"querystring","locationName":"page-size"},"TemplateName":{"location":"uri","locationName":"template-name"},"TemplateType":{"location":"uri","locationName":"template-type"}},"required":["TemplateName","TemplateType"]},"output":{"type":"structure","members":{"TemplateVersionsResponse":{"type":"structure","members":{"Item":{"type":"list","member":{"type":"structure","members":{"CreationDate":{},"DefaultSubstitutions":{},"LastModifiedDate":{},"TemplateDescription":{},"TemplateName":{},"TemplateType":{},"Version":{}},"required":["LastModifiedDate","CreationDate","TemplateName","TemplateType"]}},"Message":{},"NextToken":{},"RequestID":{}},"required":["Item"]}},"required":["TemplateVersionsResponse"],"payload":"TemplateVersionsResponse"}},"ListTemplates":{"http":{"method":"GET","requestUri":"/v1/templates","responseCode":200},"input":{"type":"structure","members":{"NextToken":{"location":"querystring","locationName":"next-token"},"PageSize":{"location":"querystring","locationName":"page-size"},"Prefix":{"location":"querystring","locationName":"prefix"},"TemplateType":{"location":"querystring","locationName":"template-type"}}},"output":{"type":"structure","members":{"TemplatesResponse":{"type":"structure","members":{"Item":{"type":"list","member":{"type":"structure","members":{"Arn":{},"CreationDate":{},"DefaultSubstitutions":{},"LastModifiedDate":{},"tags":{"shape":"S4","locationName":"tags"},"TemplateDescription":{},"TemplateName":{},"TemplateType":{},"Version":{}},"required":["LastModifiedDate","CreationDate","TemplateName","TemplateType"]}},"NextToken":{}},"required":["Item"]}},"required":["TemplatesResponse"],"payload":"TemplatesResponse"}},"PhoneNumberValidate":{"http":{"requestUri":"/v1/phone/number/validate","responseCode":200},"input":{"type":"structure","members":{"NumberValidateRequest":{"type":"structure","members":{"IsoCountryCode":{},"PhoneNumber":{}}}},"required":["NumberValidateRequest"],"payload":"NumberValidateRequest"},"output":{"type":"structure","members":{"NumberValidateResponse":{"type":"structure","members":{"Carrier":{},"City":{},"CleansedPhoneNumberE164":{},"CleansedPhoneNumberNational":{},"Country":{},"CountryCodeIso2":{},"CountryCodeNumeric":{},"County":{},"OriginalCountryCodeIso2":{},"OriginalPhoneNumber":{},"PhoneType":{},"PhoneTypeCode":{"type":"integer"},"Timezone":{},"ZipCode":{}}}},"required":["NumberValidateResponse"],"payload":"NumberValidateResponse"}},"PutEventStream":{"http":{"requestUri":"/v1/apps/{application-id}/eventstream","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"WriteEventStream":{"type":"structure","members":{"DestinationStreamArn":{},"RoleArn":{}},"required":["RoleArn","DestinationStreamArn"]}},"required":["ApplicationId","WriteEventStream"],"payload":"WriteEventStream"},"output":{"type":"structure","members":{"EventStream":{"shape":"S52"}},"required":["EventStream"],"payload":"EventStream"}},"PutEvents":{"http":{"requestUri":"/v1/apps/{application-id}/events","responseCode":202},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"EventsRequest":{"type":"structure","members":{"BatchItem":{"type":"map","key":{},"value":{"type":"structure","members":{"Endpoint":{"type":"structure","members":{"Address":{},"Attributes":{"shape":"S4u"},"ChannelType":{},"Demographic":{"shape":"S4w"},"EffectiveDate":{},"EndpointStatus":{},"Location":{"shape":"S4x"},"Metrics":{"shape":"S4y"},"OptOut":{},"RequestId":{},"User":{"shape":"S4z"}}},"Events":{"type":"map","key":{},"value":{"type":"structure","members":{"AppPackageName":{},"AppTitle":{},"AppVersionCode":{},"Attributes":{"shape":"S4"},"ClientSdkVersion":{},"EventType":{},"Metrics":{"shape":"S4y"},"SdkName":{},"Session":{"type":"structure","members":{"Duration":{"type":"integer"},"Id":{},"StartTimestamp":{},"StopTimestamp":{}},"required":["StartTimestamp","Id"]},"Timestamp":{}},"required":["EventType","Timestamp"]}}},"required":["Endpoint","Events"]}}},"required":["BatchItem"]}},"required":["ApplicationId","EventsRequest"],"payload":"EventsRequest"},"output":{"type":"structure","members":{"EventsResponse":{"type":"structure","members":{"Results":{"type":"map","key":{},"value":{"type":"structure","members":{"EndpointItemResponse":{"type":"structure","members":{"Message":{},"StatusCode":{"type":"integer"}}},"EventsItemResponse":{"type":"map","key":{},"value":{"type":"structure","members":{"Message":{},"StatusCode":{"type":"integer"}}}}}}}}}},"required":["EventsResponse"],"payload":"EventsResponse"}},"RemoveAttributes":{"http":{"method":"PUT","requestUri":"/v1/apps/{application-id}/attributes/{attribute-type}","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"AttributeType":{"location":"uri","locationName":"attribute-type"},"UpdateAttributesRequest":{"type":"structure","members":{"Blacklist":{"shape":"St"}}}},"required":["AttributeType","ApplicationId","UpdateAttributesRequest"],"payload":"UpdateAttributesRequest"},"output":{"type":"structure","members":{"AttributesResource":{"type":"structure","members":{"ApplicationId":{},"AttributeType":{},"Attributes":{"shape":"St"}},"required":["AttributeType","ApplicationId"]}},"required":["AttributesResource"],"payload":"AttributesResource"}},"SendMessages":{"http":{"requestUri":"/v1/apps/{application-id}/messages","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"MessageRequest":{"type":"structure","members":{"Addresses":{"type":"map","key":{},"value":{"type":"structure","members":{"BodyOverride":{},"ChannelType":{},"Context":{"shape":"S4"},"RawContent":{},"Substitutions":{"shape":"S4u"},"TitleOverride":{}}}},"Context":{"shape":"S4"},"Endpoints":{"shape":"Sah"},"MessageConfiguration":{"shape":"Saj"},"TemplateConfiguration":{"shape":"S12"},"TraceId":{}},"required":["MessageConfiguration"]}},"required":["ApplicationId","MessageRequest"],"payload":"MessageRequest"},"output":{"type":"structure","members":{"MessageResponse":{"type":"structure","members":{"ApplicationId":{},"EndpointResult":{"shape":"Saz"},"RequestId":{},"Result":{"type":"map","key":{},"value":{"type":"structure","members":{"DeliveryStatus":{},"MessageId":{},"StatusCode":{"type":"integer"},"StatusMessage":{},"UpdatedToken":{}},"required":["DeliveryStatus","StatusCode"]}}},"required":["ApplicationId"]}},"required":["MessageResponse"],"payload":"MessageResponse"}},"SendUsersMessages":{"http":{"requestUri":"/v1/apps/{application-id}/users-messages","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"SendUsersMessageRequest":{"type":"structure","members":{"Context":{"shape":"S4"},"MessageConfiguration":{"shape":"Saj"},"TemplateConfiguration":{"shape":"S12"},"TraceId":{},"Users":{"shape":"Sah"}},"required":["MessageConfiguration","Users"]}},"required":["ApplicationId","SendUsersMessageRequest"],"payload":"SendUsersMessageRequest"},"output":{"type":"structure","members":{"SendUsersMessageResponse":{"type":"structure","members":{"ApplicationId":{},"RequestId":{},"Result":{"type":"map","key":{},"value":{"shape":"Saz"}}},"required":["ApplicationId"]}},"required":["SendUsersMessageResponse"],"payload":"SendUsersMessageResponse"}},"TagResource":{"http":{"requestUri":"/v1/tags/{resource-arn}","responseCode":204},"input":{"type":"structure","members":{"ResourceArn":{"location":"uri","locationName":"resource-arn"},"TagsModel":{"shape":"S9c"}},"required":["ResourceArn","TagsModel"],"payload":"TagsModel"}},"UntagResource":{"http":{"method":"DELETE","requestUri":"/v1/tags/{resource-arn}","responseCode":204},"input":{"type":"structure","members":{"ResourceArn":{"location":"uri","locationName":"resource-arn"},"TagKeys":{"shape":"St","location":"querystring","locationName":"tagKeys"}},"required":["TagKeys","ResourceArn"]}},"UpdateAdmChannel":{"http":{"method":"PUT","requestUri":"/v1/apps/{application-id}/channels/adm","responseCode":200},"input":{"type":"structure","members":{"ADMChannelRequest":{"type":"structure","members":{"ClientId":{},"ClientSecret":{},"Enabled":{"type":"boolean"}},"required":["ClientSecret","ClientId"]},"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId","ADMChannelRequest"],"payload":"ADMChannelRequest"},"output":{"type":"structure","members":{"ADMChannelResponse":{"shape":"S41"}},"required":["ADMChannelResponse"],"payload":"ADMChannelResponse"}},"UpdateApnsChannel":{"http":{"method":"PUT","requestUri":"/v1/apps/{application-id}/channels/apns","responseCode":200},"input":{"type":"structure","members":{"APNSChannelRequest":{"type":"structure","members":{"BundleId":{},"Certificate":{},"DefaultAuthenticationMethod":{},"Enabled":{"type":"boolean"},"PrivateKey":{},"TeamId":{},"TokenKey":{},"TokenKeyId":{}}},"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId","APNSChannelRequest"],"payload":"APNSChannelRequest"},"output":{"type":"structure","members":{"APNSChannelResponse":{"shape":"S44"}},"required":["APNSChannelResponse"],"payload":"APNSChannelResponse"}},"UpdateApnsSandboxChannel":{"http":{"method":"PUT","requestUri":"/v1/apps/{application-id}/channels/apns_sandbox","responseCode":200},"input":{"type":"structure","members":{"APNSSandboxChannelRequest":{"type":"structure","members":{"BundleId":{},"Certificate":{},"DefaultAuthenticationMethod":{},"Enabled":{"type":"boolean"},"PrivateKey":{},"TeamId":{},"TokenKey":{},"TokenKeyId":{}}},"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId","APNSSandboxChannelRequest"],"payload":"APNSSandboxChannelRequest"},"output":{"type":"structure","members":{"APNSSandboxChannelResponse":{"shape":"S47"}},"required":["APNSSandboxChannelResponse"],"payload":"APNSSandboxChannelResponse"}},"UpdateApnsVoipChannel":{"http":{"method":"PUT","requestUri":"/v1/apps/{application-id}/channels/apns_voip","responseCode":200},"input":{"type":"structure","members":{"APNSVoipChannelRequest":{"type":"structure","members":{"BundleId":{},"Certificate":{},"DefaultAuthenticationMethod":{},"Enabled":{"type":"boolean"},"PrivateKey":{},"TeamId":{},"TokenKey":{},"TokenKeyId":{}}},"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId","APNSVoipChannelRequest"],"payload":"APNSVoipChannelRequest"},"output":{"type":"structure","members":{"APNSVoipChannelResponse":{"shape":"S4a"}},"required":["APNSVoipChannelResponse"],"payload":"APNSVoipChannelResponse"}},"UpdateApnsVoipSandboxChannel":{"http":{"method":"PUT","requestUri":"/v1/apps/{application-id}/channels/apns_voip_sandbox","responseCode":200},"input":{"type":"structure","members":{"APNSVoipSandboxChannelRequest":{"type":"structure","members":{"BundleId":{},"Certificate":{},"DefaultAuthenticationMethod":{},"Enabled":{"type":"boolean"},"PrivateKey":{},"TeamId":{},"TokenKey":{},"TokenKeyId":{}}},"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId","APNSVoipSandboxChannelRequest"],"payload":"APNSVoipSandboxChannelRequest"},"output":{"type":"structure","members":{"APNSVoipSandboxChannelResponse":{"shape":"S4d"}},"required":["APNSVoipSandboxChannelResponse"],"payload":"APNSVoipSandboxChannelResponse"}},"UpdateApplicationSettings":{"http":{"method":"PUT","requestUri":"/v1/apps/{application-id}/settings","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"WriteApplicationSettingsRequest":{"type":"structure","members":{"CampaignHook":{"shape":"S14"},"CloudWatchMetricsEnabled":{"type":"boolean"},"EventTaggingEnabled":{"type":"boolean"},"Limits":{"shape":"S16"},"QuietTime":{"shape":"S11"}}}},"required":["ApplicationId","WriteApplicationSettingsRequest"],"payload":"WriteApplicationSettingsRequest"},"output":{"type":"structure","members":{"ApplicationSettingsResource":{"shape":"S6e"}},"required":["ApplicationSettingsResource"],"payload":"ApplicationSettingsResource"}},"UpdateBaiduChannel":{"http":{"method":"PUT","requestUri":"/v1/apps/{application-id}/channels/baidu","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"BaiduChannelRequest":{"type":"structure","members":{"ApiKey":{},"Enabled":{"type":"boolean"},"SecretKey":{}},"required":["SecretKey","ApiKey"]}},"required":["ApplicationId","BaiduChannelRequest"],"payload":"BaiduChannelRequest"},"output":{"type":"structure","members":{"BaiduChannelResponse":{"shape":"S4i"}},"required":["BaiduChannelResponse"],"payload":"BaiduChannelResponse"}},"UpdateCampaign":{"http":{"method":"PUT","requestUri":"/v1/apps/{application-id}/campaigns/{campaign-id}","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"CampaignId":{"location":"uri","locationName":"campaign-id"},"WriteCampaignRequest":{"shape":"S8"}},"required":["CampaignId","ApplicationId","WriteCampaignRequest"],"payload":"WriteCampaignRequest"},"output":{"type":"structure","members":{"CampaignResponse":{"shape":"S18"}},"required":["CampaignResponse"],"payload":"CampaignResponse"}},"UpdateEmailChannel":{"http":{"method":"PUT","requestUri":"/v1/apps/{application-id}/channels/email","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"EmailChannelRequest":{"type":"structure","members":{"ConfigurationSet":{},"Enabled":{"type":"boolean"},"FromAddress":{},"Identity":{},"RoleArn":{}},"required":["FromAddress","Identity"]}},"required":["ApplicationId","EmailChannelRequest"],"payload":"EmailChannelRequest"},"output":{"type":"structure","members":{"EmailChannelResponse":{"shape":"S4n"}},"required":["EmailChannelResponse"],"payload":"EmailChannelResponse"}},"UpdateEmailTemplate":{"http":{"method":"PUT","requestUri":"/v1/templates/{template-name}/email","responseCode":202},"input":{"type":"structure","members":{"CreateNewVersion":{"location":"querystring","locationName":"create-new-version","type":"boolean"},"EmailTemplateRequest":{"shape":"S1e"},"TemplateName":{"location":"uri","locationName":"template-name"},"Version":{"location":"querystring","locationName":"version"}},"required":["TemplateName","EmailTemplateRequest"],"payload":"EmailTemplateRequest"},"output":{"type":"structure","members":{"MessageBody":{"shape":"S4q"}},"required":["MessageBody"],"payload":"MessageBody"}},"UpdateEndpoint":{"http":{"method":"PUT","requestUri":"/v1/apps/{application-id}/endpoints/{endpoint-id}","responseCode":202},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"EndpointId":{"location":"uri","locationName":"endpoint-id"},"EndpointRequest":{"type":"structure","members":{"Address":{},"Attributes":{"shape":"S4u"},"ChannelType":{},"Demographic":{"shape":"S4w"},"EffectiveDate":{},"EndpointStatus":{},"Location":{"shape":"S4x"},"Metrics":{"shape":"S4y"},"OptOut":{},"RequestId":{},"User":{"shape":"S4z"}}}},"required":["ApplicationId","EndpointId","EndpointRequest"],"payload":"EndpointRequest"},"output":{"type":"structure","members":{"MessageBody":{"shape":"S4q"}},"required":["MessageBody"],"payload":"MessageBody"}},"UpdateEndpointsBatch":{"http":{"method":"PUT","requestUri":"/v1/apps/{application-id}/endpoints","responseCode":202},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"EndpointBatchRequest":{"type":"structure","members":{"Item":{"type":"list","member":{"type":"structure","members":{"Address":{},"Attributes":{"shape":"S4u"},"ChannelType":{},"Demographic":{"shape":"S4w"},"EffectiveDate":{},"EndpointStatus":{},"Id":{},"Location":{"shape":"S4x"},"Metrics":{"shape":"S4y"},"OptOut":{},"RequestId":{},"User":{"shape":"S4z"}}}}},"required":["Item"]}},"required":["ApplicationId","EndpointBatchRequest"],"payload":"EndpointBatchRequest"},"output":{"type":"structure","members":{"MessageBody":{"shape":"S4q"}},"required":["MessageBody"],"payload":"MessageBody"}},"UpdateGcmChannel":{"http":{"method":"PUT","requestUri":"/v1/apps/{application-id}/channels/gcm","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"GCMChannelRequest":{"type":"structure","members":{"ApiKey":{},"Enabled":{"type":"boolean"}},"required":["ApiKey"]}},"required":["ApplicationId","GCMChannelRequest"],"payload":"GCMChannelRequest"},"output":{"type":"structure","members":{"GCMChannelResponse":{"shape":"S55"}},"required":["GCMChannelResponse"],"payload":"GCMChannelResponse"}},"UpdateJourney":{"http":{"method":"PUT","requestUri":"/v1/apps/{application-id}/journeys/{journey-id}","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"JourneyId":{"location":"uri","locationName":"journey-id"},"WriteJourneyRequest":{"shape":"S1u"}},"required":["JourneyId","ApplicationId","WriteJourneyRequest"],"payload":"WriteJourneyRequest"},"output":{"type":"structure","members":{"JourneyResponse":{"shape":"S32"}},"required":["JourneyResponse"],"payload":"JourneyResponse"}},"UpdateJourneyState":{"http":{"method":"PUT","requestUri":"/v1/apps/{application-id}/journeys/{journey-id}/state","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"JourneyId":{"location":"uri","locationName":"journey-id"},"JourneyStateRequest":{"type":"structure","members":{"State":{}}}},"required":["JourneyId","ApplicationId","JourneyStateRequest"],"payload":"JourneyStateRequest"},"output":{"type":"structure","members":{"JourneyResponse":{"shape":"S32"}},"required":["JourneyResponse"],"payload":"JourneyResponse"}},"UpdatePushTemplate":{"http":{"method":"PUT","requestUri":"/v1/templates/{template-name}/push","responseCode":202},"input":{"type":"structure","members":{"CreateNewVersion":{"location":"querystring","locationName":"create-new-version","type":"boolean"},"PushNotificationTemplateRequest":{"shape":"S34"},"TemplateName":{"location":"uri","locationName":"template-name"},"Version":{"location":"querystring","locationName":"version"}},"required":["TemplateName","PushNotificationTemplateRequest"],"payload":"PushNotificationTemplateRequest"},"output":{"type":"structure","members":{"MessageBody":{"shape":"S4q"}},"required":["MessageBody"],"payload":"MessageBody"}},"UpdateRecommenderConfiguration":{"http":{"method":"PUT","requestUri":"/v1/recommenders/{recommender-id}","responseCode":200},"input":{"type":"structure","members":{"RecommenderId":{"location":"uri","locationName":"recommender-id"},"UpdateRecommenderConfiguration":{"type":"structure","members":{"Attributes":{"shape":"S4"},"Description":{},"Name":{},"RecommendationProviderIdType":{},"RecommendationProviderRoleArn":{},"RecommendationProviderUri":{},"RecommendationTransformerUri":{},"RecommendationsDisplayName":{},"RecommendationsPerMessage":{"type":"integer"}},"required":["RecommendationProviderUri","RecommendationProviderRoleArn"]}},"required":["RecommenderId","UpdateRecommenderConfiguration"],"payload":"UpdateRecommenderConfiguration"},"output":{"type":"structure","members":{"RecommenderConfigurationResponse":{"shape":"S3c"}},"required":["RecommenderConfigurationResponse"],"payload":"RecommenderConfigurationResponse"}},"UpdateSegment":{"http":{"method":"PUT","requestUri":"/v1/apps/{application-id}/segments/{segment-id}","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"SegmentId":{"location":"uri","locationName":"segment-id"},"WriteSegmentRequest":{"shape":"S3e"}},"required":["SegmentId","ApplicationId","WriteSegmentRequest"],"payload":"WriteSegmentRequest"},"output":{"type":"structure","members":{"SegmentResponse":{"shape":"S3p"}},"required":["SegmentResponse"],"payload":"SegmentResponse"}},"UpdateSmsChannel":{"http":{"method":"PUT","requestUri":"/v1/apps/{application-id}/channels/sms","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"SMSChannelRequest":{"type":"structure","members":{"Enabled":{"type":"boolean"},"SenderId":{},"ShortCode":{}}}},"required":["ApplicationId","SMSChannelRequest"],"payload":"SMSChannelRequest"},"output":{"type":"structure","members":{"SMSChannelResponse":{"shape":"S5g"}},"required":["SMSChannelResponse"],"payload":"SMSChannelResponse"}},"UpdateSmsTemplate":{"http":{"method":"PUT","requestUri":"/v1/templates/{template-name}/sms","responseCode":202},"input":{"type":"structure","members":{"CreateNewVersion":{"location":"querystring","locationName":"create-new-version","type":"boolean"},"SMSTemplateRequest":{"shape":"S3u"},"TemplateName":{"location":"uri","locationName":"template-name"},"Version":{"location":"querystring","locationName":"version"}},"required":["TemplateName","SMSTemplateRequest"],"payload":"SMSTemplateRequest"},"output":{"type":"structure","members":{"MessageBody":{"shape":"S4q"}},"required":["MessageBody"],"payload":"MessageBody"}},"UpdateTemplateActiveVersion":{"http":{"method":"PUT","requestUri":"/v1/templates/{template-name}/{template-type}/active-version","responseCode":200},"input":{"type":"structure","members":{"TemplateActiveVersionRequest":{"type":"structure","members":{"Version":{}}},"TemplateName":{"location":"uri","locationName":"template-name"},"TemplateType":{"location":"uri","locationName":"template-type"}},"required":["TemplateName","TemplateType","TemplateActiveVersionRequest"],"payload":"TemplateActiveVersionRequest"},"output":{"type":"structure","members":{"MessageBody":{"shape":"S4q"}},"required":["MessageBody"],"payload":"MessageBody"}},"UpdateVoiceChannel":{"http":{"method":"PUT","requestUri":"/v1/apps/{application-id}/channels/voice","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"VoiceChannelRequest":{"type":"structure","members":{"Enabled":{"type":"boolean"}}}},"required":["ApplicationId","VoiceChannelRequest"],"payload":"VoiceChannelRequest"},"output":{"type":"structure","members":{"VoiceChannelResponse":{"shape":"S5p"}},"required":["VoiceChannelResponse"],"payload":"VoiceChannelResponse"}},"UpdateVoiceTemplate":{"http":{"method":"PUT","requestUri":"/v1/templates/{template-name}/voice","responseCode":202},"input":{"type":"structure","members":{"CreateNewVersion":{"location":"querystring","locationName":"create-new-version","type":"boolean"},"TemplateName":{"location":"uri","locationName":"template-name"},"Version":{"location":"querystring","locationName":"version"},"VoiceTemplateRequest":{"shape":"S3x"}},"required":["TemplateName","VoiceTemplateRequest"],"payload":"VoiceTemplateRequest"},"output":{"type":"structure","members":{"MessageBody":{"shape":"S4q"}},"required":["MessageBody"],"payload":"MessageBody"}}},"shapes":{"S4":{"type":"map","key":{},"value":{}},"S6":{"type":"structure","members":{"Arn":{},"Id":{},"Name":{},"tags":{"shape":"S4","locationName":"tags"}},"required":["Id","Arn","Name"]},"S8":{"type":"structure","members":{"AdditionalTreatments":{"type":"list","member":{"type":"structure","members":{"CustomDeliveryConfiguration":{"shape":"Sb"},"MessageConfiguration":{"shape":"Se"},"Schedule":{"shape":"Sn"},"SizePercent":{"type":"integer"},"TemplateConfiguration":{"shape":"S12"},"TreatmentDescription":{},"TreatmentName":{}},"required":["SizePercent"]}},"CustomDeliveryConfiguration":{"shape":"Sb"},"Description":{},"HoldoutPercent":{"type":"integer"},"Hook":{"shape":"S14"},"IsPaused":{"type":"boolean"},"Limits":{"shape":"S16"},"MessageConfiguration":{"shape":"Se"},"Name":{},"Schedule":{"shape":"Sn"},"SegmentId":{},"SegmentVersion":{"type":"integer"},"tags":{"shape":"S4","locationName":"tags"},"TemplateConfiguration":{"shape":"S12"},"TreatmentDescription":{},"TreatmentName":{}}},"Sb":{"type":"structure","members":{"DeliveryUri":{},"EndpointTypes":{"shape":"Sc"}},"required":["DeliveryUri"]},"Sc":{"type":"list","member":{}},"Se":{"type":"structure","members":{"ADMMessage":{"shape":"Sf"},"APNSMessage":{"shape":"Sf"},"BaiduMessage":{"shape":"Sf"},"CustomMessage":{"type":"structure","members":{"Data":{}}},"DefaultMessage":{"shape":"Sf"},"EmailMessage":{"type":"structure","members":{"Body":{},"FromAddress":{},"HtmlBody":{},"Title":{}}},"GCMMessage":{"shape":"Sf"},"SMSMessage":{"type":"structure","members":{"Body":{},"MessageType":{},"OriginationNumber":{},"SenderId":{},"EntityId":{},"TemplateId":{}}}}},"Sf":{"type":"structure","members":{"Action":{},"Body":{},"ImageIconUrl":{},"ImageSmallIconUrl":{},"ImageUrl":{},"JsonBody":{},"MediaUrl":{},"RawContent":{},"SilentPush":{"type":"boolean"},"TimeToLive":{"type":"integer"},"Title":{},"Url":{}}},"Sn":{"type":"structure","members":{"EndTime":{},"EventFilter":{"type":"structure","members":{"Dimensions":{"shape":"Sp"},"FilterType":{}},"required":["FilterType","Dimensions"]},"Frequency":{},"IsLocalTime":{"type":"boolean"},"QuietTime":{"shape":"S11"},"StartTime":{},"Timezone":{}},"required":["StartTime"]},"Sp":{"type":"structure","members":{"Attributes":{"shape":"Sq"},"EventType":{"shape":"Su"},"Metrics":{"shape":"Sw"}}},"Sq":{"type":"map","key":{},"value":{"type":"structure","members":{"AttributeType":{},"Values":{"shape":"St"}},"required":["Values"]}},"St":{"type":"list","member":{}},"Su":{"type":"structure","members":{"DimensionType":{},"Values":{"shape":"St"}},"required":["Values"]},"Sw":{"type":"map","key":{},"value":{"type":"structure","members":{"ComparisonOperator":{},"Value":{"type":"double"}},"required":["ComparisonOperator","Value"]}},"S11":{"type":"structure","members":{"End":{},"Start":{}}},"S12":{"type":"structure","members":{"EmailTemplate":{"shape":"S13"},"PushTemplate":{"shape":"S13"},"SMSTemplate":{"shape":"S13"},"VoiceTemplate":{"shape":"S13"}}},"S13":{"type":"structure","members":{"Name":{},"Version":{}}},"S14":{"type":"structure","members":{"LambdaFunctionName":{},"Mode":{},"WebUrl":{}}},"S16":{"type":"structure","members":{"Daily":{"type":"integer"},"MaximumDuration":{"type":"integer"},"MessagesPerSecond":{"type":"integer"},"Total":{"type":"integer"}}},"S18":{"type":"structure","members":{"AdditionalTreatments":{"type":"list","member":{"type":"structure","members":{"CustomDeliveryConfiguration":{"shape":"Sb"},"Id":{},"MessageConfiguration":{"shape":"Se"},"Schedule":{"shape":"Sn"},"SizePercent":{"type":"integer"},"State":{"shape":"S1b"},"TemplateConfiguration":{"shape":"S12"},"TreatmentDescription":{},"TreatmentName":{}},"required":["Id","SizePercent"]}},"ApplicationId":{},"Arn":{},"CreationDate":{},"CustomDeliveryConfiguration":{"shape":"Sb"},"DefaultState":{"shape":"S1b"},"Description":{},"HoldoutPercent":{"type":"integer"},"Hook":{"shape":"S14"},"Id":{},"IsPaused":{"type":"boolean"},"LastModifiedDate":{},"Limits":{"shape":"S16"},"MessageConfiguration":{"shape":"Se"},"Name":{},"Schedule":{"shape":"Sn"},"SegmentId":{},"SegmentVersion":{"type":"integer"},"State":{"shape":"S1b"},"tags":{"shape":"S4","locationName":"tags"},"TemplateConfiguration":{"shape":"S12"},"TreatmentDescription":{},"TreatmentName":{},"Version":{"type":"integer"}},"required":["LastModifiedDate","CreationDate","SegmentId","SegmentVersion","Id","Arn","ApplicationId"]},"S1b":{"type":"structure","members":{"CampaignStatus":{}}},"S1e":{"type":"structure","members":{"DefaultSubstitutions":{},"HtmlPart":{},"RecommenderId":{},"Subject":{},"tags":{"shape":"S4","locationName":"tags"},"TemplateDescription":{},"TextPart":{}}},"S1g":{"type":"structure","members":{"Arn":{},"Message":{},"RequestID":{}}},"S1k":{"type":"structure","members":{"ApplicationId":{},"CompletedPieces":{"type":"integer"},"CompletionDate":{},"CreationDate":{},"Definition":{"type":"structure","members":{"RoleArn":{},"S3UrlPrefix":{},"SegmentId":{},"SegmentVersion":{"type":"integer"}},"required":["S3UrlPrefix","RoleArn"]},"FailedPieces":{"type":"integer"},"Failures":{"shape":"St"},"Id":{},"JobStatus":{},"TotalFailures":{"type":"integer"},"TotalPieces":{"type":"integer"},"TotalProcessed":{"type":"integer"},"Type":{}},"required":["JobStatus","CreationDate","Type","Definition","Id","ApplicationId"]},"S1r":{"type":"structure","members":{"ApplicationId":{},"CompletedPieces":{"type":"integer"},"CompletionDate":{},"CreationDate":{},"Definition":{"type":"structure","members":{"DefineSegment":{"type":"boolean"},"ExternalId":{},"Format":{},"RegisterEndpoints":{"type":"boolean"},"RoleArn":{},"S3Url":{},"SegmentId":{},"SegmentName":{}},"required":["Format","S3Url","RoleArn"]},"FailedPieces":{"type":"integer"},"Failures":{"shape":"St"},"Id":{},"JobStatus":{},"TotalFailures":{"type":"integer"},"TotalPieces":{"type":"integer"},"TotalProcessed":{"type":"integer"},"Type":{}},"required":["JobStatus","CreationDate","Type","Definition","Id","ApplicationId"]},"S1u":{"type":"structure","members":{"Activities":{"shape":"S1v"},"CreationDate":{},"LastModifiedDate":{},"Limits":{"shape":"S2u"},"LocalTime":{"type":"boolean"},"Name":{},"QuietTime":{"shape":"S11"},"RefreshFrequency":{},"Schedule":{"shape":"S2v"},"StartActivity":{},"StartCondition":{"shape":"S2x"},"State":{},"WaitForQuietTime":{"type":"boolean"},"RefreshOnSegmentUpdate":{"type":"boolean"}},"required":["Name"]},"S1v":{"type":"map","key":{},"value":{"type":"structure","members":{"CUSTOM":{"type":"structure","members":{"DeliveryUri":{},"EndpointTypes":{"shape":"Sc"},"MessageConfig":{"type":"structure","members":{"Data":{}}},"NextActivity":{},"TemplateName":{},"TemplateVersion":{}}},"ConditionalSplit":{"type":"structure","members":{"Condition":{"type":"structure","members":{"Conditions":{"type":"list","member":{"shape":"S22"}},"Operator":{}}},"EvaluationWaitTime":{"shape":"S2f"},"FalseActivity":{},"TrueActivity":{}}},"Description":{},"EMAIL":{"type":"structure","members":{"MessageConfig":{"type":"structure","members":{"FromAddress":{}}},"NextActivity":{},"TemplateName":{},"TemplateVersion":{}}},"Holdout":{"type":"structure","members":{"NextActivity":{},"Percentage":{"type":"integer"}},"required":["Percentage"]},"MultiCondition":{"type":"structure","members":{"Branches":{"type":"list","member":{"type":"structure","members":{"Condition":{"shape":"S22"},"NextActivity":{}}}},"DefaultActivity":{},"EvaluationWaitTime":{"shape":"S2f"}}},"PUSH":{"type":"structure","members":{"MessageConfig":{"type":"structure","members":{"TimeToLive":{}}},"NextActivity":{},"TemplateName":{},"TemplateVersion":{}}},"RandomSplit":{"type":"structure","members":{"Branches":{"type":"list","member":{"type":"structure","members":{"NextActivity":{},"Percentage":{"type":"integer"}}}}}},"SMS":{"type":"structure","members":{"MessageConfig":{"type":"structure","members":{"MessageType":{},"OriginationNumber":{},"SenderId":{},"EntityId":{},"TemplateId":{}}},"NextActivity":{},"TemplateName":{},"TemplateVersion":{}}},"Wait":{"type":"structure","members":{"NextActivity":{},"WaitTime":{"shape":"S2f"}}}}}},"S22":{"type":"structure","members":{"EventCondition":{"type":"structure","members":{"Dimensions":{"shape":"Sp"},"MessageActivity":{}}},"SegmentCondition":{"shape":"S24"},"SegmentDimensions":{"shape":"S25","locationName":"segmentDimensions"}}},"S24":{"type":"structure","members":{"SegmentId":{}},"required":["SegmentId"]},"S25":{"type":"structure","members":{"Attributes":{"shape":"Sq"},"Behavior":{"type":"structure","members":{"Recency":{"type":"structure","members":{"Duration":{},"RecencyType":{}},"required":["Duration","RecencyType"]}}},"Demographic":{"type":"structure","members":{"AppVersion":{"shape":"Su"},"Channel":{"shape":"Su"},"DeviceType":{"shape":"Su"},"Make":{"shape":"Su"},"Model":{"shape":"Su"},"Platform":{"shape":"Su"}}},"Location":{"type":"structure","members":{"Country":{"shape":"Su"},"GPSPoint":{"type":"structure","members":{"Coordinates":{"type":"structure","members":{"Latitude":{"type":"double"},"Longitude":{"type":"double"}},"required":["Latitude","Longitude"]},"RangeInKilometers":{"type":"double"}},"required":["Coordinates"]}}},"Metrics":{"shape":"Sw"},"UserAttributes":{"shape":"Sq"}}},"S2f":{"type":"structure","members":{"WaitFor":{},"WaitUntil":{}}},"S2u":{"type":"structure","members":{"DailyCap":{"type":"integer"},"EndpointReentryCap":{"type":"integer"},"MessagesPerSecond":{"type":"integer"},"EndpointReentryInterval":{}}},"S2v":{"type":"structure","members":{"EndTime":{"shape":"S2w"},"StartTime":{"shape":"S2w"},"Timezone":{}}},"S2w":{"type":"timestamp","timestampFormat":"iso8601"},"S2x":{"type":"structure","members":{"Description":{},"EventStartCondition":{"type":"structure","members":{"EventFilter":{"type":"structure","members":{"Dimensions":{"shape":"Sp"},"FilterType":{}},"required":["FilterType","Dimensions"]},"SegmentId":{}}},"SegmentStartCondition":{"shape":"S24"}}},"S32":{"type":"structure","members":{"Activities":{"shape":"S1v"},"ApplicationId":{},"CreationDate":{},"Id":{},"LastModifiedDate":{},"Limits":{"shape":"S2u"},"LocalTime":{"type":"boolean"},"Name":{},"QuietTime":{"shape":"S11"},"RefreshFrequency":{},"Schedule":{"shape":"S2v"},"StartActivity":{},"StartCondition":{"shape":"S2x"},"State":{},"tags":{"shape":"S4","locationName":"tags"},"WaitForQuietTime":{"type":"boolean"},"RefreshOnSegmentUpdate":{"type":"boolean"}},"required":["Name","Id","ApplicationId"]},"S34":{"type":"structure","members":{"ADM":{"shape":"S35"},"APNS":{"shape":"S36"},"Baidu":{"shape":"S35"},"Default":{"shape":"S37"},"DefaultSubstitutions":{},"GCM":{"shape":"S35"},"RecommenderId":{},"tags":{"shape":"S4","locationName":"tags"},"TemplateDescription":{}}},"S35":{"type":"structure","members":{"Action":{},"Body":{},"ImageIconUrl":{},"ImageUrl":{},"RawContent":{},"SmallImageIconUrl":{},"Sound":{},"Title":{},"Url":{}}},"S36":{"type":"structure","members":{"Action":{},"Body":{},"MediaUrl":{},"RawContent":{},"Sound":{},"Title":{},"Url":{}}},"S37":{"type":"structure","members":{"Action":{},"Body":{},"Sound":{},"Title":{},"Url":{}}},"S3c":{"type":"structure","members":{"Attributes":{"shape":"S4"},"CreationDate":{},"Description":{},"Id":{},"LastModifiedDate":{},"Name":{},"RecommendationProviderIdType":{},"RecommendationProviderRoleArn":{},"RecommendationProviderUri":{},"RecommendationTransformerUri":{},"RecommendationsDisplayName":{},"RecommendationsPerMessage":{"type":"integer"}},"required":["RecommendationProviderUri","LastModifiedDate","CreationDate","RecommendationProviderRoleArn","Id"]},"S3e":{"type":"structure","members":{"Dimensions":{"shape":"S25"},"Name":{},"SegmentGroups":{"shape":"S3f"},"tags":{"shape":"S4","locationName":"tags"}}},"S3f":{"type":"structure","members":{"Groups":{"type":"list","member":{"type":"structure","members":{"Dimensions":{"type":"list","member":{"shape":"S25"}},"SourceSegments":{"type":"list","member":{"type":"structure","members":{"Id":{},"Version":{"type":"integer"}},"required":["Id"]}},"SourceType":{},"Type":{}}}},"Include":{}}},"S3p":{"type":"structure","members":{"ApplicationId":{},"Arn":{},"CreationDate":{},"Dimensions":{"shape":"S25"},"Id":{},"ImportDefinition":{"type":"structure","members":{"ChannelCounts":{"type":"map","key":{},"value":{"type":"integer"}},"ExternalId":{},"Format":{},"RoleArn":{},"S3Url":{},"Size":{"type":"integer"}},"required":["Format","S3Url","Size","ExternalId","RoleArn"]},"LastModifiedDate":{},"Name":{},"SegmentGroups":{"shape":"S3f"},"SegmentType":{},"tags":{"shape":"S4","locationName":"tags"},"Version":{"type":"integer"}},"required":["SegmentType","CreationDate","Id","Arn","ApplicationId"]},"S3u":{"type":"structure","members":{"Body":{},"DefaultSubstitutions":{},"RecommenderId":{},"tags":{"shape":"S4","locationName":"tags"},"TemplateDescription":{}}},"S3x":{"type":"structure","members":{"Body":{},"DefaultSubstitutions":{},"LanguageCode":{},"tags":{"shape":"S4","locationName":"tags"},"TemplateDescription":{},"VoiceId":{}}},"S41":{"type":"structure","members":{"ApplicationId":{},"CreationDate":{},"Enabled":{"type":"boolean"},"HasCredential":{"type":"boolean"},"Id":{},"IsArchived":{"type":"boolean"},"LastModifiedBy":{},"LastModifiedDate":{},"Platform":{},"Version":{"type":"integer"}},"required":["Platform"]},"S44":{"type":"structure","members":{"ApplicationId":{},"CreationDate":{},"DefaultAuthenticationMethod":{},"Enabled":{"type":"boolean"},"HasCredential":{"type":"boolean"},"HasTokenKey":{"type":"boolean"},"Id":{},"IsArchived":{"type":"boolean"},"LastModifiedBy":{},"LastModifiedDate":{},"Platform":{},"Version":{"type":"integer"}},"required":["Platform"]},"S47":{"type":"structure","members":{"ApplicationId":{},"CreationDate":{},"DefaultAuthenticationMethod":{},"Enabled":{"type":"boolean"},"HasCredential":{"type":"boolean"},"HasTokenKey":{"type":"boolean"},"Id":{},"IsArchived":{"type":"boolean"},"LastModifiedBy":{},"LastModifiedDate":{},"Platform":{},"Version":{"type":"integer"}},"required":["Platform"]},"S4a":{"type":"structure","members":{"ApplicationId":{},"CreationDate":{},"DefaultAuthenticationMethod":{},"Enabled":{"type":"boolean"},"HasCredential":{"type":"boolean"},"HasTokenKey":{"type":"boolean"},"Id":{},"IsArchived":{"type":"boolean"},"LastModifiedBy":{},"LastModifiedDate":{},"Platform":{},"Version":{"type":"integer"}},"required":["Platform"]},"S4d":{"type":"structure","members":{"ApplicationId":{},"CreationDate":{},"DefaultAuthenticationMethod":{},"Enabled":{"type":"boolean"},"HasCredential":{"type":"boolean"},"HasTokenKey":{"type":"boolean"},"Id":{},"IsArchived":{"type":"boolean"},"LastModifiedBy":{},"LastModifiedDate":{},"Platform":{},"Version":{"type":"integer"}},"required":["Platform"]},"S4i":{"type":"structure","members":{"ApplicationId":{},"CreationDate":{},"Credential":{},"Enabled":{"type":"boolean"},"HasCredential":{"type":"boolean"},"Id":{},"IsArchived":{"type":"boolean"},"LastModifiedBy":{},"LastModifiedDate":{},"Platform":{},"Version":{"type":"integer"}},"required":["Credential","Platform"]},"S4n":{"type":"structure","members":{"ApplicationId":{},"ConfigurationSet":{},"CreationDate":{},"Enabled":{"type":"boolean"},"FromAddress":{},"HasCredential":{"type":"boolean"},"Id":{},"Identity":{},"IsArchived":{"type":"boolean"},"LastModifiedBy":{},"LastModifiedDate":{},"MessagesPerSecond":{"type":"integer"},"Platform":{},"RoleArn":{},"Version":{"type":"integer"}},"required":["Platform"]},"S4q":{"type":"structure","members":{"Message":{},"RequestID":{}}},"S4t":{"type":"structure","members":{"Address":{},"ApplicationId":{},"Attributes":{"shape":"S4u"},"ChannelType":{},"CohortId":{},"CreationDate":{},"Demographic":{"shape":"S4w"},"EffectiveDate":{},"EndpointStatus":{},"Id":{},"Location":{"shape":"S4x"},"Metrics":{"shape":"S4y"},"OptOut":{},"RequestId":{},"User":{"shape":"S4z"}}},"S4u":{"type":"map","key":{},"value":{"shape":"St"}},"S4w":{"type":"structure","members":{"AppVersion":{},"Locale":{},"Make":{},"Model":{},"ModelVersion":{},"Platform":{},"PlatformVersion":{},"Timezone":{}}},"S4x":{"type":"structure","members":{"City":{},"Country":{},"Latitude":{"type":"double"},"Longitude":{"type":"double"},"PostalCode":{},"Region":{}}},"S4y":{"type":"map","key":{},"value":{"type":"double"}},"S4z":{"type":"structure","members":{"UserAttributes":{"shape":"S4u"},"UserId":{}}},"S52":{"type":"structure","members":{"ApplicationId":{},"DestinationStreamArn":{},"ExternalId":{},"LastModifiedDate":{},"LastUpdatedBy":{},"RoleArn":{}},"required":["ApplicationId","RoleArn","DestinationStreamArn"]},"S55":{"type":"structure","members":{"ApplicationId":{},"CreationDate":{},"Credential":{},"Enabled":{"type":"boolean"},"HasCredential":{"type":"boolean"},"Id":{},"IsArchived":{"type":"boolean"},"LastModifiedBy":{},"LastModifiedDate":{},"Platform":{},"Version":{"type":"integer"}},"required":["Credential","Platform"]},"S5g":{"type":"structure","members":{"ApplicationId":{},"CreationDate":{},"Enabled":{"type":"boolean"},"HasCredential":{"type":"boolean"},"Id":{},"IsArchived":{"type":"boolean"},"LastModifiedBy":{},"LastModifiedDate":{},"Platform":{},"PromotionalMessagesPerSecond":{"type":"integer"},"SenderId":{},"ShortCode":{},"TransactionalMessagesPerSecond":{"type":"integer"},"Version":{"type":"integer"}},"required":["Platform"]},"S5l":{"type":"structure","members":{"Item":{"type":"list","member":{"shape":"S4t"}}},"required":["Item"]},"S5p":{"type":"structure","members":{"ApplicationId":{},"CreationDate":{},"Enabled":{"type":"boolean"},"HasCredential":{"type":"boolean"},"Id":{},"IsArchived":{"type":"boolean"},"LastModifiedBy":{},"LastModifiedDate":{},"Platform":{},"Version":{"type":"integer"}},"required":["Platform"]},"S67":{"type":"structure","members":{"Rows":{"type":"list","member":{"type":"structure","members":{"GroupedBys":{"shape":"S6a"},"Values":{"shape":"S6a"}},"required":["GroupedBys","Values"]}}},"required":["Rows"]},"S6a":{"type":"list","member":{"type":"structure","members":{"Key":{},"Type":{},"Value":{}},"required":["Type","Value","Key"]}},"S6e":{"type":"structure","members":{"ApplicationId":{},"CampaignHook":{"shape":"S14"},"LastModifiedDate":{},"Limits":{"shape":"S16"},"QuietTime":{"shape":"S11"}},"required":["ApplicationId"]},"S6z":{"type":"structure","members":{"Item":{"type":"list","member":{"shape":"S18"}},"NextToken":{}},"required":["Item"]},"S7m":{"type":"structure","members":{"Item":{"type":"list","member":{"shape":"S1k"}},"NextToken":{}},"required":["Item"]},"S7u":{"type":"structure","members":{"Item":{"type":"list","member":{"shape":"S1r"}},"NextToken":{}},"required":["Item"]},"S8q":{"type":"structure","members":{"Item":{"type":"list","member":{"shape":"S3p"}},"NextToken":{}},"required":["Item"]},"S9c":{"type":"structure","members":{"tags":{"shape":"S4","locationName":"tags"}},"required":["tags"]},"Sah":{"type":"map","key":{},"value":{"type":"structure","members":{"BodyOverride":{},"Context":{"shape":"S4"},"RawContent":{},"Substitutions":{"shape":"S4u"},"TitleOverride":{}}}},"Saj":{"type":"structure","members":{"ADMMessage":{"type":"structure","members":{"Action":{},"Body":{},"ConsolidationKey":{},"Data":{"shape":"S4"},"ExpiresAfter":{},"IconReference":{},"ImageIconUrl":{},"ImageUrl":{},"MD5":{},"RawContent":{},"SilentPush":{"type":"boolean"},"SmallImageIconUrl":{},"Sound":{},"Substitutions":{"shape":"S4u"},"Title":{},"Url":{}}},"APNSMessage":{"type":"structure","members":{"APNSPushType":{},"Action":{},"Badge":{"type":"integer"},"Body":{},"Category":{},"CollapseId":{},"Data":{"shape":"S4"},"MediaUrl":{},"PreferredAuthenticationMethod":{},"Priority":{},"RawContent":{},"SilentPush":{"type":"boolean"},"Sound":{},"Substitutions":{"shape":"S4u"},"ThreadId":{},"TimeToLive":{"type":"integer"},"Title":{},"Url":{}}},"BaiduMessage":{"type":"structure","members":{"Action":{},"Body":{},"Data":{"shape":"S4"},"IconReference":{},"ImageIconUrl":{},"ImageUrl":{},"RawContent":{},"SilentPush":{"type":"boolean"},"SmallImageIconUrl":{},"Sound":{},"Substitutions":{"shape":"S4u"},"TimeToLive":{"type":"integer"},"Title":{},"Url":{}}},"DefaultMessage":{"type":"structure","members":{"Body":{},"Substitutions":{"shape":"S4u"}}},"DefaultPushNotificationMessage":{"type":"structure","members":{"Action":{},"Body":{},"Data":{"shape":"S4"},"SilentPush":{"type":"boolean"},"Substitutions":{"shape":"S4u"},"Title":{},"Url":{}}},"EmailMessage":{"type":"structure","members":{"Body":{},"FeedbackForwardingAddress":{},"FromAddress":{},"RawEmail":{"type":"structure","members":{"Data":{"type":"blob"}}},"ReplyToAddresses":{"shape":"St"},"SimpleEmail":{"type":"structure","members":{"HtmlPart":{"shape":"Sat"},"Subject":{"shape":"Sat"},"TextPart":{"shape":"Sat"}}},"Substitutions":{"shape":"S4u"}}},"GCMMessage":{"type":"structure","members":{"Action":{},"Body":{},"CollapseKey":{},"Data":{"shape":"S4"},"IconReference":{},"ImageIconUrl":{},"ImageUrl":{},"Priority":{},"RawContent":{},"RestrictedPackageName":{},"SilentPush":{"type":"boolean"},"SmallImageIconUrl":{},"Sound":{},"Substitutions":{"shape":"S4u"},"TimeToLive":{"type":"integer"},"Title":{},"Url":{}}},"SMSMessage":{"type":"structure","members":{"Body":{},"Keyword":{},"MediaUrl":{},"MessageType":{},"OriginationNumber":{},"SenderId":{},"Substitutions":{"shape":"S4u"},"EntityId":{},"TemplateId":{}}},"VoiceMessage":{"type":"structure","members":{"Body":{},"LanguageCode":{},"OriginationNumber":{},"Substitutions":{"shape":"S4u"},"VoiceId":{}}}}},"Sat":{"type":"structure","members":{"Charset":{},"Data":{}}},"Saz":{"type":"map","key":{},"value":{"type":"structure","members":{"Address":{},"DeliveryStatus":{},"MessageId":{},"StatusCode":{"type":"integer"},"StatusMessage":{},"UpdatedToken":{}},"required":["DeliveryStatus","StatusCode"]}}}}

/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['polly'] = {};
	AWS.Polly = Service.defineService('polly', ['2016-06-10']);
	__webpack_require__(319);
	Object.defineProperty(apiLoader.services['polly'], '2016-06-10', {
	  get: function get() {
	    var model = __webpack_require__(321);
	    model.paginators = __webpack_require__(322).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.Polly;


/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(320);


/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(4);
	var rest = AWS.Protocol.Rest;

	/**
	 * A presigner object can be used to generate presigned urls for the Polly service.
	 */
	AWS.Polly.Presigner = AWS.util.inherit({
	    /**
	     * Creates a presigner object with a set of configuration options.
	     *
	     * @option options params [map] An optional map of parameters to bind to every
	     *   request sent by this service object.
	     * @option options service [AWS.Polly] An optional pre-configured instance
	     *  of the AWS.Polly service object to use for requests. The object may
	     *  bound parameters used by the presigner.
	     * @see AWS.Polly.constructor
	     */
	    constructor: function Signer(options) {
	        options = options || {};
	        this.options = options;
	        this.service = options.service;
	        this.bindServiceObject(options);
	        this._operations = {};
	    },

	    /**
	     * @api private
	     */
	    bindServiceObject: function bindServiceObject(options) {
	        options = options || {};
	        if (!this.service) {
	            this.service = new AWS.Polly(options);
	        } else {
	            var config = AWS.util.copy(this.service.config);
	            this.service = new this.service.constructor.__super__(config);
	            this.service.config.params = AWS.util.merge(this.service.config.params || {}, options.params);
	        }
	    },

	    /**
	     * @api private
	     */
	    modifyInputMembers: function modifyInputMembers(input) {
	        // make copies of the input so we don't overwrite the api
	        // need to be careful to copy anything we access/modify
	        var modifiedInput = AWS.util.copy(input);
	        modifiedInput.members = AWS.util.copy(input.members);
	        AWS.util.each(input.members, function(name, member) {
	            modifiedInput.members[name] = AWS.util.copy(member);
	            // update location and locationName
	            if (!member.location || member.location === 'body') {
	                modifiedInput.members[name].location = 'querystring';
	                modifiedInput.members[name].locationName = name;
	            }
	        });
	        return modifiedInput;
	    },

	    /**
	     * @api private
	     */
	    convertPostToGet: function convertPostToGet(req) {
	        // convert method
	        req.httpRequest.method = 'GET';

	        var operation = req.service.api.operations[req.operation];
	        // get cached operation input first
	        var input = this._operations[req.operation];
	        if (!input) {
	            // modify the original input
	            this._operations[req.operation] = input = this.modifyInputMembers(operation.input);
	        }

	        var uri = rest.generateURI(req.httpRequest.endpoint.path, operation.httpPath, input, req.params);

	        req.httpRequest.path = uri;
	        req.httpRequest.body = '';

	        // don't need these headers on a GET request
	        delete req.httpRequest.headers['Content-Length'];
	        delete req.httpRequest.headers['Content-Type'];
	    },

	    /**
	     * @overload getSynthesizeSpeechUrl(params = {}, [expires = 3600], [callback])
	     *   Generate a presigned url for {AWS.Polly.synthesizeSpeech}.
	     *   @note You must ensure that you have static or previously resolved
	     *     credentials if you call this method synchronously (with no callback),
	     *     otherwise it may not properly sign the request. If you cannot guarantee
	     *     this (you are using an asynchronous credential provider, i.e., EC2
	     *     IAM roles), you should always call this method with an asynchronous
	     *     callback.
	     *   @param params [map] parameters to pass to the operation. See the {AWS.Polly.synthesizeSpeech}
	     *     operation for the expected operation parameters.
	     *   @param expires [Integer] (3600) the number of seconds to expire the pre-signed URL operation in.
	     *     Defaults to 1 hour.
	     *   @return [string] if called synchronously (with no callback), returns the signed URL.
	     *   @return [null] nothing is returned if a callback is provided.
	     *   @callback callback function (err, url)
	     *     If a callback is supplied, it is called when a signed URL has been generated.
	     *     @param err [Error] the error object returned from the presigner.
	     *     @param url [String] the signed URL.
	     *   @see AWS.Polly.synthesizeSpeech
	     */
	    getSynthesizeSpeechUrl: function getSynthesizeSpeechUrl(params, expires, callback) {
	        var self = this;
	        var request = this.service.makeRequest('synthesizeSpeech', params);
	        // remove existing build listeners
	        request.removeAllListeners('build');
	        request.on('build', function(req) {
	            self.convertPostToGet(req);
	        });
	        return request.presign(expires, callback);
	    }
	});


/***/ }),
/* 321 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-06-10","endpointPrefix":"polly","protocol":"rest-json","serviceFullName":"Amazon Polly","serviceId":"Polly","signatureVersion":"v4","uid":"polly-2016-06-10"},"operations":{"DeleteLexicon":{"http":{"method":"DELETE","requestUri":"/v1/lexicons/{LexiconName}","responseCode":200},"input":{"type":"structure","required":["Name"],"members":{"Name":{"location":"uri","locationName":"LexiconName"}}},"output":{"type":"structure","members":{}}},"DescribeVoices":{"http":{"method":"GET","requestUri":"/v1/voices","responseCode":200},"input":{"type":"structure","members":{"Engine":{"location":"querystring","locationName":"Engine"},"LanguageCode":{"location":"querystring","locationName":"LanguageCode"},"IncludeAdditionalLanguageCodes":{"location":"querystring","locationName":"IncludeAdditionalLanguageCodes","type":"boolean"},"NextToken":{"location":"querystring","locationName":"NextToken"}}},"output":{"type":"structure","members":{"Voices":{"type":"list","member":{"type":"structure","members":{"Gender":{},"Id":{},"LanguageCode":{},"LanguageName":{},"Name":{},"AdditionalLanguageCodes":{"type":"list","member":{}},"SupportedEngines":{"type":"list","member":{}}}}},"NextToken":{}}}},"GetLexicon":{"http":{"method":"GET","requestUri":"/v1/lexicons/{LexiconName}","responseCode":200},"input":{"type":"structure","required":["Name"],"members":{"Name":{"location":"uri","locationName":"LexiconName"}}},"output":{"type":"structure","members":{"Lexicon":{"type":"structure","members":{"Content":{"shape":"Sl"},"Name":{}}},"LexiconAttributes":{"shape":"Sm"}}}},"GetSpeechSynthesisTask":{"http":{"method":"GET","requestUri":"/v1/synthesisTasks/{TaskId}","responseCode":200},"input":{"type":"structure","required":["TaskId"],"members":{"TaskId":{"location":"uri","locationName":"TaskId"}}},"output":{"type":"structure","members":{"SynthesisTask":{"shape":"Sv"}}}},"ListLexicons":{"http":{"method":"GET","requestUri":"/v1/lexicons","responseCode":200},"input":{"type":"structure","members":{"NextToken":{"location":"querystring","locationName":"NextToken"}}},"output":{"type":"structure","members":{"Lexicons":{"type":"list","member":{"type":"structure","members":{"Name":{},"Attributes":{"shape":"Sm"}}}},"NextToken":{}}}},"ListSpeechSynthesisTasks":{"http":{"method":"GET","requestUri":"/v1/synthesisTasks","responseCode":200},"input":{"type":"structure","members":{"MaxResults":{"location":"querystring","locationName":"MaxResults","type":"integer"},"NextToken":{"location":"querystring","locationName":"NextToken"},"Status":{"location":"querystring","locationName":"Status"}}},"output":{"type":"structure","members":{"NextToken":{},"SynthesisTasks":{"type":"list","member":{"shape":"Sv"}}}}},"PutLexicon":{"http":{"method":"PUT","requestUri":"/v1/lexicons/{LexiconName}","responseCode":200},"input":{"type":"structure","required":["Name","Content"],"members":{"Name":{"location":"uri","locationName":"LexiconName"},"Content":{"shape":"Sl"}}},"output":{"type":"structure","members":{}}},"StartSpeechSynthesisTask":{"http":{"requestUri":"/v1/synthesisTasks","responseCode":200},"input":{"type":"structure","required":["OutputFormat","OutputS3BucketName","Text","VoiceId"],"members":{"Engine":{},"LanguageCode":{},"LexiconNames":{"shape":"S12"},"OutputFormat":{},"OutputS3BucketName":{},"OutputS3KeyPrefix":{},"SampleRate":{},"SnsTopicArn":{},"SpeechMarkTypes":{"shape":"S15"},"Text":{},"TextType":{},"VoiceId":{}}},"output":{"type":"structure","members":{"SynthesisTask":{"shape":"Sv"}}}},"SynthesizeSpeech":{"http":{"requestUri":"/v1/speech","responseCode":200},"input":{"type":"structure","required":["OutputFormat","Text","VoiceId"],"members":{"Engine":{},"LanguageCode":{},"LexiconNames":{"shape":"S12"},"OutputFormat":{},"SampleRate":{},"SpeechMarkTypes":{"shape":"S15"},"Text":{},"TextType":{},"VoiceId":{}}},"output":{"type":"structure","members":{"AudioStream":{"type":"blob","streaming":true},"ContentType":{"location":"header","locationName":"Content-Type"},"RequestCharacters":{"location":"header","locationName":"x-amzn-RequestCharacters","type":"integer"}},"payload":"AudioStream"}}},"shapes":{"Sl":{"type":"string","sensitive":true},"Sm":{"type":"structure","members":{"Alphabet":{},"LanguageCode":{},"LastModified":{"type":"timestamp"},"LexiconArn":{},"LexemesCount":{"type":"integer"},"Size":{"type":"integer"}}},"Sv":{"type":"structure","members":{"Engine":{},"TaskId":{},"TaskStatus":{},"TaskStatusReason":{},"OutputUri":{},"CreationTime":{"type":"timestamp"},"RequestCharacters":{"type":"integer"},"SnsTopicArn":{},"LexiconNames":{"shape":"S12"},"OutputFormat":{},"SampleRate":{},"SpeechMarkTypes":{"shape":"S15"},"TextType":{},"VoiceId":{},"LanguageCode":{}}},"S12":{"type":"list","member":{}},"S15":{"type":"list","member":{}}}}

/***/ }),
/* 322 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"ListSpeechSynthesisTasks":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"}}}

/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['rds'] = {};
	AWS.RDS = Service.defineService('rds', ['2013-01-10', '2013-02-12', '2013-09-09', '2014-09-01', '2014-09-01*', '2014-10-31']);
	__webpack_require__(324);
	Object.defineProperty(apiLoader.services['rds'], '2013-01-10', {
	  get: function get() {
	    var model = __webpack_require__(327);
	    model.paginators = __webpack_require__(328).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	Object.defineProperty(apiLoader.services['rds'], '2013-02-12', {
	  get: function get() {
	    var model = __webpack_require__(329);
	    model.paginators = __webpack_require__(330).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	Object.defineProperty(apiLoader.services['rds'], '2013-09-09', {
	  get: function get() {
	    var model = __webpack_require__(331);
	    model.paginators = __webpack_require__(332).pagination;
	    model.waiters = __webpack_require__(333).waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	Object.defineProperty(apiLoader.services['rds'], '2014-09-01', {
	  get: function get() {
	    var model = __webpack_require__(334);
	    model.paginators = __webpack_require__(335).pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	Object.defineProperty(apiLoader.services['rds'], '2014-10-31', {
	  get: function get() {
	    var model = __webpack_require__(336);
	    model.paginators = __webpack_require__(337).pagination;
	    model.waiters = __webpack_require__(338).waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.RDS;


/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(4);
	var rdsutil = __webpack_require__(325);
	__webpack_require__(326);
	 /**
	  * @api private
	  */
	 var crossRegionOperations = ['copyDBSnapshot', 'createDBInstanceReadReplica', 'createDBCluster', 'copyDBClusterSnapshot', 'startDBInstanceAutomatedBackupsReplication'];

	 AWS.util.update(AWS.RDS.prototype, {
	   /**
	    * @api private
	    */
	   setupRequestListeners: function setupRequestListeners(request) {
	    rdsutil.setupRequestListeners(this, request, crossRegionOperations);
	   },
	 });


/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(4);

	var rdsutil = {
	  /**
	    * @api private
	    */
	   setupRequestListeners: function setupRequestListeners(service, request, crossRegionOperations) {
	    if (crossRegionOperations.indexOf(request.operation) !== -1 &&
	        request.params.SourceRegion) {
	      request.params = AWS.util.copy(request.params);
	      if (request.params.PreSignedUrl ||
	          request.params.SourceRegion === service.config.region) {
	        delete request.params.SourceRegion;
	      } else {
	        var doesParamValidation = !!service.config.paramValidation;
	        // remove the validate parameters listener so we can re-add it after we build the URL
	        if (doesParamValidation) {
	          request.removeListener('validate', AWS.EventListeners.Core.VALIDATE_PARAMETERS);
	        }
	        request.onAsync('validate', rdsutil.buildCrossRegionPresignedUrl);
	        if (doesParamValidation) {
	          request.addListener('validate', AWS.EventListeners.Core.VALIDATE_PARAMETERS);
	        }
	      }
	    }
	  },

	  /**
	   * @api private
	   */
	  buildCrossRegionPresignedUrl: function buildCrossRegionPresignedUrl(req, done) {
	    var config = AWS.util.copy(req.service.config);
	    config.region = req.params.SourceRegion;
	    delete req.params.SourceRegion;
	    delete config.endpoint;
	    // relevant params for the operation will already be in req.params
	    delete config.params;
	    config.signatureVersion = 'v4';
	    var destinationRegion = req.service.config.region;

	    var svc = new req.service.constructor(config);
	    var newReq = svc[req.operation](AWS.util.copy(req.params));
	    newReq.on('build', function addDestinationRegionParam(request) {
	      var httpRequest = request.httpRequest;
	      httpRequest.params.DestinationRegion = destinationRegion;
	      httpRequest.body = AWS.util.queryParamsToString(httpRequest.params);
	    });
	    newReq.presign(function(err, url) {
	      if (err) done(err);
	      else {
	        req.params.PreSignedUrl = url;
	        done();
	      }
	    });
	  }
	};

	/**
	 * @api private
	 */
	module.exports = rdsutil;


/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(4);

	/**
	 * @api private
	 */
	var service = null;

	/**
	 * @api private
	 */
	var api = {
	    signatureVersion: 'v4',
	    signingName: 'rds-db',
	    operations: {}
	};

	/**
	 * @api private
	 */
	var requiredAuthTokenOptions = {
	    region: 'string',
	    hostname: 'string',
	    port: 'number',
	    username: 'string'
	};

	/**
	 * A signer object can be used to generate an auth token to a database.
	 */
	AWS.RDS.Signer = AWS.util.inherit({
	    /**
	     * Creates a signer object can be used to generate an auth token.
	     *
	     * @option options credentials [AWS.Credentials] the AWS credentials
	     *   to sign requests with. Uses the default credential provider chain
	     *   if not specified.
	     * @option options hostname [String] the hostname of the database to connect to.
	     * @option options port [Number] the port number the database is listening on.
	     * @option options region [String] the region the database is located in.
	     * @option options username [String] the username to login as.
	     * @example Passing in options to constructor
	     *   var signer = new AWS.RDS.Signer({
	     *     credentials: new AWS.SharedIniFileCredentials({profile: 'default'}),
	     *     region: 'us-east-1',
	     *     hostname: 'db.us-east-1.rds.amazonaws.com',
	     *     port: 8000,
	     *     username: 'name'
	     *   });
	     */
	    constructor: function Signer(options) {
	        this.options = options || {};
	    },

	    /**
	     * @api private
	     * Strips the protocol from a url.
	     */
	    convertUrlToAuthToken: function convertUrlToAuthToken(url) {
	        // we are always using https as the protocol
	        var protocol = 'https://';
	        if (url.indexOf(protocol) === 0) {
	            return url.substring(protocol.length);
	        }
	    },

	    /**
	     * @overload getAuthToken(options = {}, [callback])
	     *   Generate an auth token to a database.
	     *   @note You must ensure that you have static or previously resolved
	     *     credentials if you call this method synchronously (with no callback),
	     *     otherwise it may not properly sign the request. If you cannot guarantee
	     *     this (you are using an asynchronous credential provider, i.e., EC2
	     *     IAM roles), you should always call this method with an asynchronous
	     *     callback.
	     *
	     *   @param options [map] The fields to use when generating an auth token.
	     *     Any options specified here will be merged on top of any options passed
	     *     to AWS.RDS.Signer:
	     *
	     *     * **credentials** (AWS.Credentials) &mdash; the AWS credentials
	     *         to sign requests with. Uses the default credential provider chain
	     *         if not specified.
	     *     * **hostname** (String) &mdash; the hostname of the database to connect to.
	     *     * **port** (Number) &mdash; the port number the database is listening on.
	     *     * **region** (String) &mdash; the region the database is located in.
	     *     * **username** (String) &mdash; the username to login as.
	     *   @return [String] if called synchronously (with no callback), returns the
	     *     auth token.
	     *   @return [null] nothing is returned if a callback is provided.
	     *   @callback callback function (err, token)
	     *     If a callback is supplied, it is called when an auth token has been generated.
	     *     @param err [Error] the error object returned from the signer.
	     *     @param token [String] the auth token.
	     *
	     *   @example Generating an auth token synchronously
	     *     var signer = new AWS.RDS.Signer({
	     *       // configure options
	     *       region: 'us-east-1',
	     *       username: 'default',
	     *       hostname: 'db.us-east-1.amazonaws.com',
	     *       port: 8000
	     *     });
	     *     var token = signer.getAuthToken({
	     *       // these options are merged with those defined when creating the signer, overriding in the case of a duplicate option
	     *       // credentials are not specified here or when creating the signer, so default credential provider will be used
	     *       username: 'test' // overriding username
	     *     });
	     *   @example Generating an auth token asynchronously
	     *     var signer = new AWS.RDS.Signer({
	     *       // configure options
	     *       region: 'us-east-1',
	     *       username: 'default',
	     *       hostname: 'db.us-east-1.amazonaws.com',
	     *       port: 8000
	     *     });
	     *     signer.getAuthToken({
	     *       // these options are merged with those defined when creating the signer, overriding in the case of a duplicate option
	     *       // credentials are not specified here or when creating the signer, so default credential provider will be used
	     *       username: 'test' // overriding username
	     *     }, function(err, token) {
	     *       if (err) {
	     *         // handle error
	     *       } else {
	     *         // use token
	     *       }
	     *     });
	     *
	     */
	    getAuthToken: function getAuthToken(options, callback) {
	        if (typeof options === 'function' && callback === undefined) {
	            callback = options;
	            options = {};
	        }
	        var self = this;
	        var hasCallback = typeof callback === 'function';
	        // merge options with existing options
	        options = AWS.util.merge(this.options, options);
	        // validate options
	        var optionsValidation = this.validateAuthTokenOptions(options);
	        if (optionsValidation !== true) {
	            if (hasCallback) {
	                return callback(optionsValidation, null);
	            }
	            throw optionsValidation;
	        }

	        // 15 minutes
	        var expires = 900;
	        // create service to generate a request from
	        var serviceOptions = {
	            region: options.region,
	            endpoint: new AWS.Endpoint(options.hostname + ':' + options.port),
	            paramValidation: false,
	            signatureVersion: 'v4'
	        };
	        if (options.credentials) {
	            serviceOptions.credentials = options.credentials;
	        }
	        service = new AWS.Service(serviceOptions);
	        // ensure the SDK is using sigv4 signing (config is not enough)
	        service.api = api;

	        var request = service.makeRequest();
	        // add listeners to request to properly build auth token
	        this.modifyRequestForAuthToken(request, options);

	        if (hasCallback) {
	            request.presign(expires, function(err, url) {
	                if (url) {
	                    url = self.convertUrlToAuthToken(url);
	                }
	                callback(err, url);
	            });
	        } else {
	            var url = request.presign(expires);
	            return this.convertUrlToAuthToken(url);
	        }
	    },

	    /**
	     * @api private
	     * Modifies a request to allow the presigner to generate an auth token.
	     */
	    modifyRequestForAuthToken: function modifyRequestForAuthToken(request, options) {
	        request.on('build', request.buildAsGet);
	        var httpRequest = request.httpRequest;
	        httpRequest.body = AWS.util.queryParamsToString({
	            Action: 'connect',
	            DBUser: options.username
	        });
	    },

	    /**
	     * @api private
	     * Validates that the options passed in contain all the keys with values of the correct type that
	     *   are needed to generate an auth token.
	     */
	    validateAuthTokenOptions: function validateAuthTokenOptions(options) {
	        // iterate over all keys in options
	        var message = '';
	        options = options || {};
	        for (var key in requiredAuthTokenOptions) {
	            if (!Object.prototype.hasOwnProperty.call(requiredAuthTokenOptions, key)) {
	                continue;
	            }
	            if (typeof options[key] !== requiredAuthTokenOptions[key]) {
	                message += 'option \'' + key + '\' should have been type \'' + requiredAuthTokenOptions[key] + '\', was \'' + typeof options[key] + '\'.\n';
	            }
	        }
	        if (message.length) {
	            return AWS.util.error(new Error(), {
	                code: 'InvalidParameter',
	                message: message
	            });
	        }
	        return true;
	    }
	});


/***/ }),
/* 327 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2013-01-10","endpointPrefix":"rds","protocol":"query","serviceAbbreviation":"Amazon RDS","serviceFullName":"Amazon Relational Database Service","serviceId":"RDS","signatureVersion":"v4","uid":"rds-2013-01-10","xmlNamespace":"http://rds.amazonaws.com/doc/2013-01-10/"},"operations":{"AddSourceIdentifierToSubscription":{"input":{"type":"structure","required":["SubscriptionName","SourceIdentifier"],"members":{"SubscriptionName":{},"SourceIdentifier":{}}},"output":{"resultWrapper":"AddSourceIdentifierToSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"AddTagsToResource":{"input":{"type":"structure","required":["ResourceName","Tags"],"members":{"ResourceName":{},"Tags":{"shape":"S9"}}}},"AuthorizeDBSecurityGroupIngress":{"input":{"type":"structure","required":["DBSecurityGroupName"],"members":{"DBSecurityGroupName":{},"CIDRIP":{},"EC2SecurityGroupName":{},"EC2SecurityGroupId":{},"EC2SecurityGroupOwnerId":{}}},"output":{"resultWrapper":"AuthorizeDBSecurityGroupIngressResult","type":"structure","members":{"DBSecurityGroup":{"shape":"Sd"}}}},"CopyDBSnapshot":{"input":{"type":"structure","required":["SourceDBSnapshotIdentifier","TargetDBSnapshotIdentifier"],"members":{"SourceDBSnapshotIdentifier":{},"TargetDBSnapshotIdentifier":{}}},"output":{"resultWrapper":"CopyDBSnapshotResult","type":"structure","members":{"DBSnapshot":{"shape":"Sk"}}}},"CreateDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier","AllocatedStorage","DBInstanceClass","Engine","MasterUsername","MasterUserPassword"],"members":{"DBName":{},"DBInstanceIdentifier":{},"AllocatedStorage":{"type":"integer"},"DBInstanceClass":{},"Engine":{},"MasterUsername":{},"MasterUserPassword":{},"DBSecurityGroups":{"shape":"Sp"},"VpcSecurityGroupIds":{"shape":"Sq"},"AvailabilityZone":{},"DBSubnetGroupName":{},"PreferredMaintenanceWindow":{},"DBParameterGroupName":{},"BackupRetentionPeriod":{"type":"integer"},"PreferredBackupWindow":{},"Port":{"type":"integer"},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AutoMinorVersionUpgrade":{"type":"boolean"},"LicenseModel":{},"Iops":{"type":"integer"},"OptionGroupName":{},"CharacterSetName":{},"PubliclyAccessible":{"type":"boolean"}}},"output":{"resultWrapper":"CreateDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"CreateDBInstanceReadReplica":{"input":{"type":"structure","required":["DBInstanceIdentifier","SourceDBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"SourceDBInstanceIdentifier":{},"DBInstanceClass":{},"AvailabilityZone":{},"Port":{"type":"integer"},"AutoMinorVersionUpgrade":{"type":"boolean"},"Iops":{"type":"integer"},"OptionGroupName":{},"PubliclyAccessible":{"type":"boolean"}}},"output":{"resultWrapper":"CreateDBInstanceReadReplicaResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"CreateDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName","DBParameterGroupFamily","Description"],"members":{"DBParameterGroupName":{},"DBParameterGroupFamily":{},"Description":{}}},"output":{"resultWrapper":"CreateDBParameterGroupResult","type":"structure","members":{"DBParameterGroup":{"shape":"S1c"}}}},"CreateDBSecurityGroup":{"input":{"type":"structure","required":["DBSecurityGroupName","DBSecurityGroupDescription"],"members":{"DBSecurityGroupName":{},"DBSecurityGroupDescription":{}}},"output":{"resultWrapper":"CreateDBSecurityGroupResult","type":"structure","members":{"DBSecurityGroup":{"shape":"Sd"}}}},"CreateDBSnapshot":{"input":{"type":"structure","required":["DBSnapshotIdentifier","DBInstanceIdentifier"],"members":{"DBSnapshotIdentifier":{},"DBInstanceIdentifier":{}}},"output":{"resultWrapper":"CreateDBSnapshotResult","type":"structure","members":{"DBSnapshot":{"shape":"Sk"}}}},"CreateDBSubnetGroup":{"input":{"type":"structure","required":["DBSubnetGroupName","DBSubnetGroupDescription","SubnetIds"],"members":{"DBSubnetGroupName":{},"DBSubnetGroupDescription":{},"SubnetIds":{"shape":"S1i"}}},"output":{"resultWrapper":"CreateDBSubnetGroupResult","type":"structure","members":{"DBSubnetGroup":{"shape":"S11"}}}},"CreateEventSubscription":{"input":{"type":"structure","required":["SubscriptionName","SnsTopicArn"],"members":{"SubscriptionName":{},"SnsTopicArn":{},"SourceType":{},"EventCategories":{"shape":"S6"},"SourceIds":{"shape":"S5"},"Enabled":{"type":"boolean"}}},"output":{"resultWrapper":"CreateEventSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"CreateOptionGroup":{"input":{"type":"structure","required":["OptionGroupName","EngineName","MajorEngineVersion","OptionGroupDescription"],"members":{"OptionGroupName":{},"EngineName":{},"MajorEngineVersion":{},"OptionGroupDescription":{}}},"output":{"resultWrapper":"CreateOptionGroupResult","type":"structure","members":{"OptionGroup":{"shape":"S1o"}}}},"DeleteDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"SkipFinalSnapshot":{"type":"boolean"},"FinalDBSnapshotIdentifier":{}}},"output":{"resultWrapper":"DeleteDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"DeleteDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName"],"members":{"DBParameterGroupName":{}}}},"DeleteDBSecurityGroup":{"input":{"type":"structure","required":["DBSecurityGroupName"],"members":{"DBSecurityGroupName":{}}}},"DeleteDBSnapshot":{"input":{"type":"structure","required":["DBSnapshotIdentifier"],"members":{"DBSnapshotIdentifier":{}}},"output":{"resultWrapper":"DeleteDBSnapshotResult","type":"structure","members":{"DBSnapshot":{"shape":"Sk"}}}},"DeleteDBSubnetGroup":{"input":{"type":"structure","required":["DBSubnetGroupName"],"members":{"DBSubnetGroupName":{}}}},"DeleteEventSubscription":{"input":{"type":"structure","required":["SubscriptionName"],"members":{"SubscriptionName":{}}},"output":{"resultWrapper":"DeleteEventSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"DeleteOptionGroup":{"input":{"type":"structure","required":["OptionGroupName"],"members":{"OptionGroupName":{}}}},"DescribeDBEngineVersions":{"input":{"type":"structure","members":{"Engine":{},"EngineVersion":{},"DBParameterGroupFamily":{},"MaxRecords":{"type":"integer"},"Marker":{},"DefaultOnly":{"type":"boolean"},"ListSupportedCharacterSets":{"type":"boolean"}}},"output":{"resultWrapper":"DescribeDBEngineVersionsResult","type":"structure","members":{"Marker":{},"DBEngineVersions":{"type":"list","member":{"locationName":"DBEngineVersion","type":"structure","members":{"Engine":{},"EngineVersion":{},"DBParameterGroupFamily":{},"DBEngineDescription":{},"DBEngineVersionDescription":{},"DefaultCharacterSet":{"shape":"S25"},"SupportedCharacterSets":{"type":"list","member":{"shape":"S25","locationName":"CharacterSet"}}}}}}}},"DescribeDBInstances":{"input":{"type":"structure","members":{"DBInstanceIdentifier":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBInstancesResult","type":"structure","members":{"Marker":{},"DBInstances":{"type":"list","member":{"shape":"St","locationName":"DBInstance"}}}}},"DescribeDBParameterGroups":{"input":{"type":"structure","members":{"DBParameterGroupName":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBParameterGroupsResult","type":"structure","members":{"Marker":{},"DBParameterGroups":{"type":"list","member":{"shape":"S1c","locationName":"DBParameterGroup"}}}}},"DescribeDBParameters":{"input":{"type":"structure","required":["DBParameterGroupName"],"members":{"DBParameterGroupName":{},"Source":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBParametersResult","type":"structure","members":{"Parameters":{"shape":"S2f"},"Marker":{}}}},"DescribeDBSecurityGroups":{"input":{"type":"structure","members":{"DBSecurityGroupName":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBSecurityGroupsResult","type":"structure","members":{"Marker":{},"DBSecurityGroups":{"type":"list","member":{"shape":"Sd","locationName":"DBSecurityGroup"}}}}},"DescribeDBSnapshots":{"input":{"type":"structure","members":{"DBInstanceIdentifier":{},"DBSnapshotIdentifier":{},"SnapshotType":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBSnapshotsResult","type":"structure","members":{"Marker":{},"DBSnapshots":{"type":"list","member":{"shape":"Sk","locationName":"DBSnapshot"}}}}},"DescribeDBSubnetGroups":{"input":{"type":"structure","members":{"DBSubnetGroupName":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBSubnetGroupsResult","type":"structure","members":{"Marker":{},"DBSubnetGroups":{"type":"list","member":{"shape":"S11","locationName":"DBSubnetGroup"}}}}},"DescribeEngineDefaultParameters":{"input":{"type":"structure","required":["DBParameterGroupFamily"],"members":{"DBParameterGroupFamily":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEngineDefaultParametersResult","type":"structure","members":{"EngineDefaults":{"type":"structure","members":{"DBParameterGroupFamily":{},"Marker":{},"Parameters":{"shape":"S2f"}},"wrapper":true}}}},"DescribeEventCategories":{"input":{"type":"structure","members":{"SourceType":{}}},"output":{"resultWrapper":"DescribeEventCategoriesResult","type":"structure","members":{"EventCategoriesMapList":{"type":"list","member":{"locationName":"EventCategoriesMap","type":"structure","members":{"SourceType":{},"EventCategories":{"shape":"S6"}},"wrapper":true}}}}},"DescribeEventSubscriptions":{"input":{"type":"structure","members":{"SubscriptionName":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEventSubscriptionsResult","type":"structure","members":{"Marker":{},"EventSubscriptionsList":{"type":"list","member":{"shape":"S4","locationName":"EventSubscription"}}}}},"DescribeEvents":{"input":{"type":"structure","members":{"SourceIdentifier":{},"SourceType":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Duration":{"type":"integer"},"EventCategories":{"shape":"S6"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEventsResult","type":"structure","members":{"Marker":{},"Events":{"type":"list","member":{"locationName":"Event","type":"structure","members":{"SourceIdentifier":{},"SourceType":{},"Message":{},"EventCategories":{"shape":"S6"},"Date":{"type":"timestamp"}}}}}}},"DescribeOptionGroupOptions":{"input":{"type":"structure","required":["EngineName"],"members":{"EngineName":{},"MajorEngineVersion":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeOptionGroupOptionsResult","type":"structure","members":{"OptionGroupOptions":{"type":"list","member":{"locationName":"OptionGroupOption","type":"structure","members":{"Name":{},"Description":{},"EngineName":{},"MajorEngineVersion":{},"MinimumRequiredMinorEngineVersion":{},"PortRequired":{"type":"boolean"},"DefaultPort":{"type":"integer"},"OptionsDependedOn":{"type":"list","member":{"locationName":"OptionName"}}}}},"Marker":{}}}},"DescribeOptionGroups":{"input":{"type":"structure","members":{"OptionGroupName":{},"Marker":{},"MaxRecords":{"type":"integer"},"EngineName":{},"MajorEngineVersion":{}}},"output":{"resultWrapper":"DescribeOptionGroupsResult","type":"structure","members":{"OptionGroupsList":{"type":"list","member":{"shape":"S1o","locationName":"OptionGroup"}},"Marker":{}}}},"DescribeOrderableDBInstanceOptions":{"input":{"type":"structure","required":["Engine"],"members":{"Engine":{},"EngineVersion":{},"DBInstanceClass":{},"LicenseModel":{},"Vpc":{"type":"boolean"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeOrderableDBInstanceOptionsResult","type":"structure","members":{"OrderableDBInstanceOptions":{"type":"list","member":{"locationName":"OrderableDBInstanceOption","type":"structure","members":{"Engine":{},"EngineVersion":{},"DBInstanceClass":{},"LicenseModel":{},"AvailabilityZones":{"type":"list","member":{"shape":"S14","locationName":"AvailabilityZone"}},"MultiAZCapable":{"type":"boolean"},"ReadReplicaCapable":{"type":"boolean"},"Vpc":{"type":"boolean"}},"wrapper":true}},"Marker":{}}}},"DescribeReservedDBInstances":{"input":{"type":"structure","members":{"ReservedDBInstanceId":{},"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"Duration":{},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeReservedDBInstancesResult","type":"structure","members":{"Marker":{},"ReservedDBInstances":{"type":"list","member":{"shape":"S3m","locationName":"ReservedDBInstance"}}}}},"DescribeReservedDBInstancesOfferings":{"input":{"type":"structure","members":{"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"Duration":{},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeReservedDBInstancesOfferingsResult","type":"structure","members":{"Marker":{},"ReservedDBInstancesOfferings":{"type":"list","member":{"locationName":"ReservedDBInstancesOffering","type":"structure","members":{"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"Duration":{"type":"integer"},"FixedPrice":{"type":"double"},"UsagePrice":{"type":"double"},"CurrencyCode":{},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"RecurringCharges":{"shape":"S3o"}},"wrapper":true}}}}},"ListTagsForResource":{"input":{"type":"structure","required":["ResourceName"],"members":{"ResourceName":{}}},"output":{"resultWrapper":"ListTagsForResourceResult","type":"structure","members":{"TagList":{"shape":"S9"}}}},"ModifyDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"AllocatedStorage":{"type":"integer"},"DBInstanceClass":{},"DBSecurityGroups":{"shape":"Sp"},"VpcSecurityGroupIds":{"shape":"Sq"},"ApplyImmediately":{"type":"boolean"},"MasterUserPassword":{},"DBParameterGroupName":{},"BackupRetentionPeriod":{"type":"integer"},"PreferredBackupWindow":{},"PreferredMaintenanceWindow":{},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AllowMajorVersionUpgrade":{"type":"boolean"},"AutoMinorVersionUpgrade":{"type":"boolean"},"Iops":{"type":"integer"},"OptionGroupName":{},"NewDBInstanceIdentifier":{}}},"output":{"resultWrapper":"ModifyDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"ModifyDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName","Parameters"],"members":{"DBParameterGroupName":{},"Parameters":{"shape":"S2f"}}},"output":{"shape":"S3z","resultWrapper":"ModifyDBParameterGroupResult"}},"ModifyDBSubnetGroup":{"input":{"type":"structure","required":["DBSubnetGroupName","SubnetIds"],"members":{"DBSubnetGroupName":{},"DBSubnetGroupDescription":{},"SubnetIds":{"shape":"S1i"}}},"output":{"resultWrapper":"ModifyDBSubnetGroupResult","type":"structure","members":{"DBSubnetGroup":{"shape":"S11"}}}},"ModifyEventSubscription":{"input":{"type":"structure","required":["SubscriptionName"],"members":{"SubscriptionName":{},"SnsTopicArn":{},"SourceType":{},"EventCategories":{"shape":"S6"},"Enabled":{"type":"boolean"}}},"output":{"resultWrapper":"ModifyEventSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"ModifyOptionGroup":{"input":{"type":"structure","required":["OptionGroupName"],"members":{"OptionGroupName":{},"OptionsToInclude":{"type":"list","member":{"locationName":"OptionConfiguration","type":"structure","required":["OptionName"],"members":{"OptionName":{},"Port":{"type":"integer"},"DBSecurityGroupMemberships":{"shape":"Sp"},"VpcSecurityGroupMemberships":{"shape":"Sq"}}}},"OptionsToRemove":{"type":"list","member":{}},"ApplyImmediately":{"type":"boolean"}}},"output":{"resultWrapper":"ModifyOptionGroupResult","type":"structure","members":{"OptionGroup":{"shape":"S1o"}}}},"PromoteReadReplica":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"BackupRetentionPeriod":{"type":"integer"},"PreferredBackupWindow":{}}},"output":{"resultWrapper":"PromoteReadReplicaResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"PurchaseReservedDBInstancesOffering":{"input":{"type":"structure","required":["ReservedDBInstancesOfferingId"],"members":{"ReservedDBInstancesOfferingId":{},"ReservedDBInstanceId":{},"DBInstanceCount":{"type":"integer"}}},"output":{"resultWrapper":"PurchaseReservedDBInstancesOfferingResult","type":"structure","members":{"ReservedDBInstance":{"shape":"S3m"}}}},"RebootDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"ForceFailover":{"type":"boolean"}}},"output":{"resultWrapper":"RebootDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"RemoveSourceIdentifierFromSubscription":{"input":{"type":"structure","required":["SubscriptionName","SourceIdentifier"],"members":{"SubscriptionName":{},"SourceIdentifier":{}}},"output":{"resultWrapper":"RemoveSourceIdentifierFromSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"RemoveTagsFromResource":{"input":{"type":"structure","required":["ResourceName","TagKeys"],"members":{"ResourceName":{},"TagKeys":{"type":"list","member":{}}}}},"ResetDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName"],"members":{"DBParameterGroupName":{},"ResetAllParameters":{"type":"boolean"},"Parameters":{"shape":"S2f"}}},"output":{"shape":"S3z","resultWrapper":"ResetDBParameterGroupResult"}},"RestoreDBInstanceFromDBSnapshot":{"input":{"type":"structure","required":["DBInstanceIdentifier","DBSnapshotIdentifier"],"members":{"DBInstanceIdentifier":{},"DBSnapshotIdentifier":{},"DBInstanceClass":{},"Port":{"type":"integer"},"AvailabilityZone":{},"DBSubnetGroupName":{},"MultiAZ":{"type":"boolean"},"PubliclyAccessible":{"type":"boolean"},"AutoMinorVersionUpgrade":{"type":"boolean"},"LicenseModel":{},"DBName":{},"Engine":{},"Iops":{"type":"integer"},"OptionGroupName":{}}},"output":{"resultWrapper":"RestoreDBInstanceFromDBSnapshotResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"RestoreDBInstanceToPointInTime":{"input":{"type":"structure","required":["SourceDBInstanceIdentifier","TargetDBInstanceIdentifier"],"members":{"SourceDBInstanceIdentifier":{},"TargetDBInstanceIdentifier":{},"RestoreTime":{"type":"timestamp"},"UseLatestRestorableTime":{"type":"boolean"},"DBInstanceClass":{},"Port":{"type":"integer"},"AvailabilityZone":{},"DBSubnetGroupName":{},"MultiAZ":{"type":"boolean"},"PubliclyAccessible":{"type":"boolean"},"AutoMinorVersionUpgrade":{"type":"boolean"},"LicenseModel":{},"DBName":{},"Engine":{},"Iops":{"type":"integer"},"OptionGroupName":{}}},"output":{"resultWrapper":"RestoreDBInstanceToPointInTimeResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"RevokeDBSecurityGroupIngress":{"input":{"type":"structure","required":["DBSecurityGroupName"],"members":{"DBSecurityGroupName":{},"CIDRIP":{},"EC2SecurityGroupName":{},"EC2SecurityGroupId":{},"EC2SecurityGroupOwnerId":{}}},"output":{"resultWrapper":"RevokeDBSecurityGroupIngressResult","type":"structure","members":{"DBSecurityGroup":{"shape":"Sd"}}}}},"shapes":{"S4":{"type":"structure","members":{"Id":{},"CustomerAwsId":{},"CustSubscriptionId":{},"SnsTopicArn":{},"Status":{},"SubscriptionCreationTime":{},"SourceType":{},"SourceIdsList":{"shape":"S5"},"EventCategoriesList":{"shape":"S6"},"Enabled":{"type":"boolean"}},"wrapper":true},"S5":{"type":"list","member":{"locationName":"SourceId"}},"S6":{"type":"list","member":{"locationName":"EventCategory"}},"S9":{"type":"list","member":{"locationName":"Tag","type":"structure","members":{"Key":{},"Value":{}}}},"Sd":{"type":"structure","members":{"OwnerId":{},"DBSecurityGroupName":{},"DBSecurityGroupDescription":{},"VpcId":{},"EC2SecurityGroups":{"type":"list","member":{"locationName":"EC2SecurityGroup","type":"structure","members":{"Status":{},"EC2SecurityGroupName":{},"EC2SecurityGroupId":{},"EC2SecurityGroupOwnerId":{}}}},"IPRanges":{"type":"list","member":{"locationName":"IPRange","type":"structure","members":{"Status":{},"CIDRIP":{}}}}},"wrapper":true},"Sk":{"type":"structure","members":{"DBSnapshotIdentifier":{},"DBInstanceIdentifier":{},"SnapshotCreateTime":{"type":"timestamp"},"Engine":{},"AllocatedStorage":{"type":"integer"},"Status":{},"Port":{"type":"integer"},"AvailabilityZone":{},"VpcId":{},"InstanceCreateTime":{"type":"timestamp"},"MasterUsername":{},"EngineVersion":{},"LicenseModel":{},"SnapshotType":{},"Iops":{"type":"integer"}},"wrapper":true},"Sp":{"type":"list","member":{"locationName":"DBSecurityGroupName"}},"Sq":{"type":"list","member":{"locationName":"VpcSecurityGroupId"}},"St":{"type":"structure","members":{"DBInstanceIdentifier":{},"DBInstanceClass":{},"Engine":{},"DBInstanceStatus":{},"MasterUsername":{},"DBName":{},"Endpoint":{"type":"structure","members":{"Address":{},"Port":{"type":"integer"}}},"AllocatedStorage":{"type":"integer"},"InstanceCreateTime":{"type":"timestamp"},"PreferredBackupWindow":{},"BackupRetentionPeriod":{"type":"integer"},"DBSecurityGroups":{"shape":"Sv"},"VpcSecurityGroups":{"shape":"Sx"},"DBParameterGroups":{"type":"list","member":{"locationName":"DBParameterGroup","type":"structure","members":{"DBParameterGroupName":{},"ParameterApplyStatus":{}}}},"AvailabilityZone":{},"DBSubnetGroup":{"shape":"S11"},"PreferredMaintenanceWindow":{},"PendingModifiedValues":{"type":"structure","members":{"DBInstanceClass":{},"AllocatedStorage":{"type":"integer"},"MasterUserPassword":{},"Port":{"type":"integer"},"BackupRetentionPeriod":{"type":"integer"},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"Iops":{"type":"integer"},"DBInstanceIdentifier":{}}},"LatestRestorableTime":{"type":"timestamp"},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AutoMinorVersionUpgrade":{"type":"boolean"},"ReadReplicaSourceDBInstanceIdentifier":{},"ReadReplicaDBInstanceIdentifiers":{"type":"list","member":{"locationName":"ReadReplicaDBInstanceIdentifier"}},"LicenseModel":{},"Iops":{"type":"integer"},"OptionGroupMembership":{"type":"structure","members":{"OptionGroupName":{},"Status":{}}},"CharacterSetName":{},"SecondaryAvailabilityZone":{},"PubliclyAccessible":{"type":"boolean"}},"wrapper":true},"Sv":{"type":"list","member":{"locationName":"DBSecurityGroup","type":"structure","members":{"DBSecurityGroupName":{},"Status":{}}}},"Sx":{"type":"list","member":{"locationName":"VpcSecurityGroupMembership","type":"structure","members":{"VpcSecurityGroupId":{},"Status":{}}}},"S11":{"type":"structure","members":{"DBSubnetGroupName":{},"DBSubnetGroupDescription":{},"VpcId":{},"SubnetGroupStatus":{},"Subnets":{"type":"list","member":{"locationName":"Subnet","type":"structure","members":{"SubnetIdentifier":{},"SubnetAvailabilityZone":{"shape":"S14"},"SubnetStatus":{}}}}},"wrapper":true},"S14":{"type":"structure","members":{"Name":{},"ProvisionedIopsCapable":{"type":"boolean"}},"wrapper":true},"S1c":{"type":"structure","members":{"DBParameterGroupName":{},"DBParameterGroupFamily":{},"Description":{}},"wrapper":true},"S1i":{"type":"list","member":{"locationName":"SubnetIdentifier"}},"S1o":{"type":"structure","members":{"OptionGroupName":{},"OptionGroupDescription":{},"EngineName":{},"MajorEngineVersion":{},"Options":{"type":"list","member":{"locationName":"Option","type":"structure","members":{"OptionName":{},"OptionDescription":{},"Port":{"type":"integer"},"DBSecurityGroupMemberships":{"shape":"Sv"},"VpcSecurityGroupMemberships":{"shape":"Sx"}}}},"AllowsVpcAndNonVpcInstanceMemberships":{"type":"boolean"},"VpcId":{}},"wrapper":true},"S25":{"type":"structure","members":{"CharacterSetName":{},"CharacterSetDescription":{}}},"S2f":{"type":"list","member":{"locationName":"Parameter","type":"structure","members":{"ParameterName":{},"ParameterValue":{},"Description":{},"Source":{},"ApplyType":{},"DataType":{},"AllowedValues":{},"IsModifiable":{"type":"boolean"},"MinimumEngineVersion":{},"ApplyMethod":{}}}},"S3m":{"type":"structure","members":{"ReservedDBInstanceId":{},"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"StartTime":{"type":"timestamp"},"Duration":{"type":"integer"},"FixedPrice":{"type":"double"},"UsagePrice":{"type":"double"},"CurrencyCode":{},"DBInstanceCount":{"type":"integer"},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"State":{},"RecurringCharges":{"shape":"S3o"}},"wrapper":true},"S3o":{"type":"list","member":{"locationName":"RecurringCharge","type":"structure","members":{"RecurringChargeAmount":{"type":"double"},"RecurringChargeFrequency":{}},"wrapper":true}},"S3z":{"type":"structure","members":{"DBParameterGroupName":{}}}}}

/***/ }),
/* 328 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeDBEngineVersions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBEngineVersions"},"DescribeDBInstances":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBInstances"},"DescribeDBParameterGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBParameterGroups"},"DescribeDBParameters":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"Parameters"},"DescribeDBSecurityGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBSecurityGroups"},"DescribeDBSnapshots":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBSnapshots"},"DescribeDBSubnetGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBSubnetGroups"},"DescribeEngineDefaultParameters":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"EngineDefaults.Marker","result_key":"EngineDefaults.Parameters"},"DescribeEventSubscriptions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"EventSubscriptionsList"},"DescribeEvents":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"Events"},"DescribeOptionGroupOptions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"OptionGroupOptions"},"DescribeOptionGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"OptionGroupsList"},"DescribeOrderableDBInstanceOptions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"OrderableDBInstanceOptions"},"DescribeReservedDBInstances":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"ReservedDBInstances"},"DescribeReservedDBInstancesOfferings":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"ReservedDBInstancesOfferings"},"ListTagsForResource":{"result_key":"TagList"}}}

/***/ }),
/* 329 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2013-02-12","endpointPrefix":"rds","protocol":"query","serviceAbbreviation":"Amazon RDS","serviceFullName":"Amazon Relational Database Service","serviceId":"RDS","signatureVersion":"v4","uid":"rds-2013-02-12","xmlNamespace":"http://rds.amazonaws.com/doc/2013-02-12/"},"operations":{"AddSourceIdentifierToSubscription":{"input":{"type":"structure","required":["SubscriptionName","SourceIdentifier"],"members":{"SubscriptionName":{},"SourceIdentifier":{}}},"output":{"resultWrapper":"AddSourceIdentifierToSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"AddTagsToResource":{"input":{"type":"structure","required":["ResourceName","Tags"],"members":{"ResourceName":{},"Tags":{"shape":"S9"}}}},"AuthorizeDBSecurityGroupIngress":{"input":{"type":"structure","required":["DBSecurityGroupName"],"members":{"DBSecurityGroupName":{},"CIDRIP":{},"EC2SecurityGroupName":{},"EC2SecurityGroupId":{},"EC2SecurityGroupOwnerId":{}}},"output":{"resultWrapper":"AuthorizeDBSecurityGroupIngressResult","type":"structure","members":{"DBSecurityGroup":{"shape":"Sd"}}}},"CopyDBSnapshot":{"input":{"type":"structure","required":["SourceDBSnapshotIdentifier","TargetDBSnapshotIdentifier"],"members":{"SourceDBSnapshotIdentifier":{},"TargetDBSnapshotIdentifier":{}}},"output":{"resultWrapper":"CopyDBSnapshotResult","type":"structure","members":{"DBSnapshot":{"shape":"Sk"}}}},"CreateDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier","AllocatedStorage","DBInstanceClass","Engine","MasterUsername","MasterUserPassword"],"members":{"DBName":{},"DBInstanceIdentifier":{},"AllocatedStorage":{"type":"integer"},"DBInstanceClass":{},"Engine":{},"MasterUsername":{},"MasterUserPassword":{},"DBSecurityGroups":{"shape":"Sp"},"VpcSecurityGroupIds":{"shape":"Sq"},"AvailabilityZone":{},"DBSubnetGroupName":{},"PreferredMaintenanceWindow":{},"DBParameterGroupName":{},"BackupRetentionPeriod":{"type":"integer"},"PreferredBackupWindow":{},"Port":{"type":"integer"},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AutoMinorVersionUpgrade":{"type":"boolean"},"LicenseModel":{},"Iops":{"type":"integer"},"OptionGroupName":{},"CharacterSetName":{},"PubliclyAccessible":{"type":"boolean"}}},"output":{"resultWrapper":"CreateDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"CreateDBInstanceReadReplica":{"input":{"type":"structure","required":["DBInstanceIdentifier","SourceDBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"SourceDBInstanceIdentifier":{},"DBInstanceClass":{},"AvailabilityZone":{},"Port":{"type":"integer"},"AutoMinorVersionUpgrade":{"type":"boolean"},"Iops":{"type":"integer"},"OptionGroupName":{},"PubliclyAccessible":{"type":"boolean"}}},"output":{"resultWrapper":"CreateDBInstanceReadReplicaResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"CreateDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName","DBParameterGroupFamily","Description"],"members":{"DBParameterGroupName":{},"DBParameterGroupFamily":{},"Description":{}}},"output":{"resultWrapper":"CreateDBParameterGroupResult","type":"structure","members":{"DBParameterGroup":{"shape":"S1d"}}}},"CreateDBSecurityGroup":{"input":{"type":"structure","required":["DBSecurityGroupName","DBSecurityGroupDescription"],"members":{"DBSecurityGroupName":{},"DBSecurityGroupDescription":{}}},"output":{"resultWrapper":"CreateDBSecurityGroupResult","type":"structure","members":{"DBSecurityGroup":{"shape":"Sd"}}}},"CreateDBSnapshot":{"input":{"type":"structure","required":["DBSnapshotIdentifier","DBInstanceIdentifier"],"members":{"DBSnapshotIdentifier":{},"DBInstanceIdentifier":{}}},"output":{"resultWrapper":"CreateDBSnapshotResult","type":"structure","members":{"DBSnapshot":{"shape":"Sk"}}}},"CreateDBSubnetGroup":{"input":{"type":"structure","required":["DBSubnetGroupName","DBSubnetGroupDescription","SubnetIds"],"members":{"DBSubnetGroupName":{},"DBSubnetGroupDescription":{},"SubnetIds":{"shape":"S1j"}}},"output":{"resultWrapper":"CreateDBSubnetGroupResult","type":"structure","members":{"DBSubnetGroup":{"shape":"S11"}}}},"CreateEventSubscription":{"input":{"type":"structure","required":["SubscriptionName","SnsTopicArn"],"members":{"SubscriptionName":{},"SnsTopicArn":{},"SourceType":{},"EventCategories":{"shape":"S6"},"SourceIds":{"shape":"S5"},"Enabled":{"type":"boolean"}}},"output":{"resultWrapper":"CreateEventSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"CreateOptionGroup":{"input":{"type":"structure","required":["OptionGroupName","EngineName","MajorEngineVersion","OptionGroupDescription"],"members":{"OptionGroupName":{},"EngineName":{},"MajorEngineVersion":{},"OptionGroupDescription":{}}},"output":{"resultWrapper":"CreateOptionGroupResult","type":"structure","members":{"OptionGroup":{"shape":"S1p"}}}},"DeleteDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"SkipFinalSnapshot":{"type":"boolean"},"FinalDBSnapshotIdentifier":{}}},"output":{"resultWrapper":"DeleteDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"DeleteDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName"],"members":{"DBParameterGroupName":{}}}},"DeleteDBSecurityGroup":{"input":{"type":"structure","required":["DBSecurityGroupName"],"members":{"DBSecurityGroupName":{}}}},"DeleteDBSnapshot":{"input":{"type":"structure","required":["DBSnapshotIdentifier"],"members":{"DBSnapshotIdentifier":{}}},"output":{"resultWrapper":"DeleteDBSnapshotResult","type":"structure","members":{"DBSnapshot":{"shape":"Sk"}}}},"DeleteDBSubnetGroup":{"input":{"type":"structure","required":["DBSubnetGroupName"],"members":{"DBSubnetGroupName":{}}}},"DeleteEventSubscription":{"input":{"type":"structure","required":["SubscriptionName"],"members":{"SubscriptionName":{}}},"output":{"resultWrapper":"DeleteEventSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"DeleteOptionGroup":{"input":{"type":"structure","required":["OptionGroupName"],"members":{"OptionGroupName":{}}}},"DescribeDBEngineVersions":{"input":{"type":"structure","members":{"Engine":{},"EngineVersion":{},"DBParameterGroupFamily":{},"MaxRecords":{"type":"integer"},"Marker":{},"DefaultOnly":{"type":"boolean"},"ListSupportedCharacterSets":{"type":"boolean"}}},"output":{"resultWrapper":"DescribeDBEngineVersionsResult","type":"structure","members":{"Marker":{},"DBEngineVersions":{"type":"list","member":{"locationName":"DBEngineVersion","type":"structure","members":{"Engine":{},"EngineVersion":{},"DBParameterGroupFamily":{},"DBEngineDescription":{},"DBEngineVersionDescription":{},"DefaultCharacterSet":{"shape":"S28"},"SupportedCharacterSets":{"type":"list","member":{"shape":"S28","locationName":"CharacterSet"}}}}}}}},"DescribeDBInstances":{"input":{"type":"structure","members":{"DBInstanceIdentifier":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBInstancesResult","type":"structure","members":{"Marker":{},"DBInstances":{"type":"list","member":{"shape":"St","locationName":"DBInstance"}}}}},"DescribeDBLogFiles":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"FilenameContains":{},"FileLastWritten":{"type":"long"},"FileSize":{"type":"long"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBLogFilesResult","type":"structure","members":{"DescribeDBLogFiles":{"type":"list","member":{"locationName":"DescribeDBLogFilesDetails","type":"structure","members":{"LogFileName":{},"LastWritten":{"type":"long"},"Size":{"type":"long"}}}},"Marker":{}}}},"DescribeDBParameterGroups":{"input":{"type":"structure","members":{"DBParameterGroupName":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBParameterGroupsResult","type":"structure","members":{"Marker":{},"DBParameterGroups":{"type":"list","member":{"shape":"S1d","locationName":"DBParameterGroup"}}}}},"DescribeDBParameters":{"input":{"type":"structure","required":["DBParameterGroupName"],"members":{"DBParameterGroupName":{},"Source":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBParametersResult","type":"structure","members":{"Parameters":{"shape":"S2n"},"Marker":{}}}},"DescribeDBSecurityGroups":{"input":{"type":"structure","members":{"DBSecurityGroupName":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBSecurityGroupsResult","type":"structure","members":{"Marker":{},"DBSecurityGroups":{"type":"list","member":{"shape":"Sd","locationName":"DBSecurityGroup"}}}}},"DescribeDBSnapshots":{"input":{"type":"structure","members":{"DBInstanceIdentifier":{},"DBSnapshotIdentifier":{},"SnapshotType":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBSnapshotsResult","type":"structure","members":{"Marker":{},"DBSnapshots":{"type":"list","member":{"shape":"Sk","locationName":"DBSnapshot"}}}}},"DescribeDBSubnetGroups":{"input":{"type":"structure","members":{"DBSubnetGroupName":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBSubnetGroupsResult","type":"structure","members":{"Marker":{},"DBSubnetGroups":{"type":"list","member":{"shape":"S11","locationName":"DBSubnetGroup"}}}}},"DescribeEngineDefaultParameters":{"input":{"type":"structure","required":["DBParameterGroupFamily"],"members":{"DBParameterGroupFamily":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEngineDefaultParametersResult","type":"structure","members":{"EngineDefaults":{"type":"structure","members":{"DBParameterGroupFamily":{},"Marker":{},"Parameters":{"shape":"S2n"}},"wrapper":true}}}},"DescribeEventCategories":{"input":{"type":"structure","members":{"SourceType":{}}},"output":{"resultWrapper":"DescribeEventCategoriesResult","type":"structure","members":{"EventCategoriesMapList":{"type":"list","member":{"locationName":"EventCategoriesMap","type":"structure","members":{"SourceType":{},"EventCategories":{"shape":"S6"}},"wrapper":true}}}}},"DescribeEventSubscriptions":{"input":{"type":"structure","members":{"SubscriptionName":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEventSubscriptionsResult","type":"structure","members":{"Marker":{},"EventSubscriptionsList":{"type":"list","member":{"shape":"S4","locationName":"EventSubscription"}}}}},"DescribeEvents":{"input":{"type":"structure","members":{"SourceIdentifier":{},"SourceType":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Duration":{"type":"integer"},"EventCategories":{"shape":"S6"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEventsResult","type":"structure","members":{"Marker":{},"Events":{"type":"list","member":{"locationName":"Event","type":"structure","members":{"SourceIdentifier":{},"SourceType":{},"Message":{},"EventCategories":{"shape":"S6"},"Date":{"type":"timestamp"}}}}}}},"DescribeOptionGroupOptions":{"input":{"type":"structure","required":["EngineName"],"members":{"EngineName":{},"MajorEngineVersion":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeOptionGroupOptionsResult","type":"structure","members":{"OptionGroupOptions":{"type":"list","member":{"locationName":"OptionGroupOption","type":"structure","members":{"Name":{},"Description":{},"EngineName":{},"MajorEngineVersion":{},"MinimumRequiredMinorEngineVersion":{},"PortRequired":{"type":"boolean"},"DefaultPort":{"type":"integer"},"OptionsDependedOn":{"type":"list","member":{"locationName":"OptionName"}},"Persistent":{"type":"boolean"},"OptionGroupOptionSettings":{"type":"list","member":{"locationName":"OptionGroupOptionSetting","type":"structure","members":{"SettingName":{},"SettingDescription":{},"DefaultValue":{},"ApplyType":{},"AllowedValues":{},"IsModifiable":{"type":"boolean"}}}}}}},"Marker":{}}}},"DescribeOptionGroups":{"input":{"type":"structure","members":{"OptionGroupName":{},"Marker":{},"MaxRecords":{"type":"integer"},"EngineName":{},"MajorEngineVersion":{}}},"output":{"resultWrapper":"DescribeOptionGroupsResult","type":"structure","members":{"OptionGroupsList":{"type":"list","member":{"shape":"S1p","locationName":"OptionGroup"}},"Marker":{}}}},"DescribeOrderableDBInstanceOptions":{"input":{"type":"structure","required":["Engine"],"members":{"Engine":{},"EngineVersion":{},"DBInstanceClass":{},"LicenseModel":{},"Vpc":{"type":"boolean"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeOrderableDBInstanceOptionsResult","type":"structure","members":{"OrderableDBInstanceOptions":{"type":"list","member":{"locationName":"OrderableDBInstanceOption","type":"structure","members":{"Engine":{},"EngineVersion":{},"DBInstanceClass":{},"LicenseModel":{},"AvailabilityZones":{"type":"list","member":{"shape":"S14","locationName":"AvailabilityZone"}},"MultiAZCapable":{"type":"boolean"},"ReadReplicaCapable":{"type":"boolean"},"Vpc":{"type":"boolean"}},"wrapper":true}},"Marker":{}}}},"DescribeReservedDBInstances":{"input":{"type":"structure","members":{"ReservedDBInstanceId":{},"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"Duration":{},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeReservedDBInstancesResult","type":"structure","members":{"Marker":{},"ReservedDBInstances":{"type":"list","member":{"shape":"S3w","locationName":"ReservedDBInstance"}}}}},"DescribeReservedDBInstancesOfferings":{"input":{"type":"structure","members":{"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"Duration":{},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeReservedDBInstancesOfferingsResult","type":"structure","members":{"Marker":{},"ReservedDBInstancesOfferings":{"type":"list","member":{"locationName":"ReservedDBInstancesOffering","type":"structure","members":{"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"Duration":{"type":"integer"},"FixedPrice":{"type":"double"},"UsagePrice":{"type":"double"},"CurrencyCode":{},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"RecurringCharges":{"shape":"S3y"}},"wrapper":true}}}}},"DownloadDBLogFilePortion":{"input":{"type":"structure","required":["DBInstanceIdentifier","LogFileName"],"members":{"DBInstanceIdentifier":{},"LogFileName":{},"Marker":{},"NumberOfLines":{"type":"integer"}}},"output":{"resultWrapper":"DownloadDBLogFilePortionResult","type":"structure","members":{"LogFileData":{},"Marker":{},"AdditionalDataPending":{"type":"boolean"}}}},"ListTagsForResource":{"input":{"type":"structure","required":["ResourceName"],"members":{"ResourceName":{}}},"output":{"resultWrapper":"ListTagsForResourceResult","type":"structure","members":{"TagList":{"shape":"S9"}}}},"ModifyDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"AllocatedStorage":{"type":"integer"},"DBInstanceClass":{},"DBSecurityGroups":{"shape":"Sp"},"VpcSecurityGroupIds":{"shape":"Sq"},"ApplyImmediately":{"type":"boolean"},"MasterUserPassword":{},"DBParameterGroupName":{},"BackupRetentionPeriod":{"type":"integer"},"PreferredBackupWindow":{},"PreferredMaintenanceWindow":{},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AllowMajorVersionUpgrade":{"type":"boolean"},"AutoMinorVersionUpgrade":{"type":"boolean"},"Iops":{"type":"integer"},"OptionGroupName":{},"NewDBInstanceIdentifier":{}}},"output":{"resultWrapper":"ModifyDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"ModifyDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName","Parameters"],"members":{"DBParameterGroupName":{},"Parameters":{"shape":"S2n"}}},"output":{"shape":"S4b","resultWrapper":"ModifyDBParameterGroupResult"}},"ModifyDBSubnetGroup":{"input":{"type":"structure","required":["DBSubnetGroupName","SubnetIds"],"members":{"DBSubnetGroupName":{},"DBSubnetGroupDescription":{},"SubnetIds":{"shape":"S1j"}}},"output":{"resultWrapper":"ModifyDBSubnetGroupResult","type":"structure","members":{"DBSubnetGroup":{"shape":"S11"}}}},"ModifyEventSubscription":{"input":{"type":"structure","required":["SubscriptionName"],"members":{"SubscriptionName":{},"SnsTopicArn":{},"SourceType":{},"EventCategories":{"shape":"S6"},"Enabled":{"type":"boolean"}}},"output":{"resultWrapper":"ModifyEventSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"ModifyOptionGroup":{"input":{"type":"structure","required":["OptionGroupName"],"members":{"OptionGroupName":{},"OptionsToInclude":{"type":"list","member":{"locationName":"OptionConfiguration","type":"structure","required":["OptionName"],"members":{"OptionName":{},"Port":{"type":"integer"},"DBSecurityGroupMemberships":{"shape":"Sp"},"VpcSecurityGroupMemberships":{"shape":"Sq"},"OptionSettings":{"type":"list","member":{"shape":"S1t","locationName":"OptionSetting"}}}}},"OptionsToRemove":{"type":"list","member":{}},"ApplyImmediately":{"type":"boolean"}}},"output":{"resultWrapper":"ModifyOptionGroupResult","type":"structure","members":{"OptionGroup":{"shape":"S1p"}}}},"PromoteReadReplica":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"BackupRetentionPeriod":{"type":"integer"},"PreferredBackupWindow":{}}},"output":{"resultWrapper":"PromoteReadReplicaResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"PurchaseReservedDBInstancesOffering":{"input":{"type":"structure","required":["ReservedDBInstancesOfferingId"],"members":{"ReservedDBInstancesOfferingId":{},"ReservedDBInstanceId":{},"DBInstanceCount":{"type":"integer"}}},"output":{"resultWrapper":"PurchaseReservedDBInstancesOfferingResult","type":"structure","members":{"ReservedDBInstance":{"shape":"S3w"}}}},"RebootDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"ForceFailover":{"type":"boolean"}}},"output":{"resultWrapper":"RebootDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"RemoveSourceIdentifierFromSubscription":{"input":{"type":"structure","required":["SubscriptionName","SourceIdentifier"],"members":{"SubscriptionName":{},"SourceIdentifier":{}}},"output":{"resultWrapper":"RemoveSourceIdentifierFromSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"RemoveTagsFromResource":{"input":{"type":"structure","required":["ResourceName","TagKeys"],"members":{"ResourceName":{},"TagKeys":{"type":"list","member":{}}}}},"ResetDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName"],"members":{"DBParameterGroupName":{},"ResetAllParameters":{"type":"boolean"},"Parameters":{"shape":"S2n"}}},"output":{"shape":"S4b","resultWrapper":"ResetDBParameterGroupResult"}},"RestoreDBInstanceFromDBSnapshot":{"input":{"type":"structure","required":["DBInstanceIdentifier","DBSnapshotIdentifier"],"members":{"DBInstanceIdentifier":{},"DBSnapshotIdentifier":{},"DBInstanceClass":{},"Port":{"type":"integer"},"AvailabilityZone":{},"DBSubnetGroupName":{},"MultiAZ":{"type":"boolean"},"PubliclyAccessible":{"type":"boolean"},"AutoMinorVersionUpgrade":{"type":"boolean"},"LicenseModel":{},"DBName":{},"Engine":{},"Iops":{"type":"integer"},"OptionGroupName":{}}},"output":{"resultWrapper":"RestoreDBInstanceFromDBSnapshotResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"RestoreDBInstanceToPointInTime":{"input":{"type":"structure","required":["SourceDBInstanceIdentifier","TargetDBInstanceIdentifier"],"members":{"SourceDBInstanceIdentifier":{},"TargetDBInstanceIdentifier":{},"RestoreTime":{"type":"timestamp"},"UseLatestRestorableTime":{"type":"boolean"},"DBInstanceClass":{},"Port":{"type":"integer"},"AvailabilityZone":{},"DBSubnetGroupName":{},"MultiAZ":{"type":"boolean"},"PubliclyAccessible":{"type":"boolean"},"AutoMinorVersionUpgrade":{"type":"boolean"},"LicenseModel":{},"DBName":{},"Engine":{},"Iops":{"type":"integer"},"OptionGroupName":{}}},"output":{"resultWrapper":"RestoreDBInstanceToPointInTimeResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"RevokeDBSecurityGroupIngress":{"input":{"type":"structure","required":["DBSecurityGroupName"],"members":{"DBSecurityGroupName":{},"CIDRIP":{},"EC2SecurityGroupName":{},"EC2SecurityGroupId":{},"EC2SecurityGroupOwnerId":{}}},"output":{"resultWrapper":"RevokeDBSecurityGroupIngressResult","type":"structure","members":{"DBSecurityGroup":{"shape":"Sd"}}}}},"shapes":{"S4":{"type":"structure","members":{"CustomerAwsId":{},"CustSubscriptionId":{},"SnsTopicArn":{},"Status":{},"SubscriptionCreationTime":{},"SourceType":{},"SourceIdsList":{"shape":"S5"},"EventCategoriesList":{"shape":"S6"},"Enabled":{"type":"boolean"}},"wrapper":true},"S5":{"type":"list","member":{"locationName":"SourceId"}},"S6":{"type":"list","member":{"locationName":"EventCategory"}},"S9":{"type":"list","member":{"locationName":"Tag","type":"structure","members":{"Key":{},"Value":{}}}},"Sd":{"type":"structure","members":{"OwnerId":{},"DBSecurityGroupName":{},"DBSecurityGroupDescription":{},"VpcId":{},"EC2SecurityGroups":{"type":"list","member":{"locationName":"EC2SecurityGroup","type":"structure","members":{"Status":{},"EC2SecurityGroupName":{},"EC2SecurityGroupId":{},"EC2SecurityGroupOwnerId":{}}}},"IPRanges":{"type":"list","member":{"locationName":"IPRange","type":"structure","members":{"Status":{},"CIDRIP":{}}}}},"wrapper":true},"Sk":{"type":"structure","members":{"DBSnapshotIdentifier":{},"DBInstanceIdentifier":{},"SnapshotCreateTime":{"type":"timestamp"},"Engine":{},"AllocatedStorage":{"type":"integer"},"Status":{},"Port":{"type":"integer"},"AvailabilityZone":{},"VpcId":{},"InstanceCreateTime":{"type":"timestamp"},"MasterUsername":{},"EngineVersion":{},"LicenseModel":{},"SnapshotType":{},"Iops":{"type":"integer"},"OptionGroupName":{}},"wrapper":true},"Sp":{"type":"list","member":{"locationName":"DBSecurityGroupName"}},"Sq":{"type":"list","member":{"locationName":"VpcSecurityGroupId"}},"St":{"type":"structure","members":{"DBInstanceIdentifier":{},"DBInstanceClass":{},"Engine":{},"DBInstanceStatus":{},"MasterUsername":{},"DBName":{},"Endpoint":{"type":"structure","members":{"Address":{},"Port":{"type":"integer"}}},"AllocatedStorage":{"type":"integer"},"InstanceCreateTime":{"type":"timestamp"},"PreferredBackupWindow":{},"BackupRetentionPeriod":{"type":"integer"},"DBSecurityGroups":{"shape":"Sv"},"VpcSecurityGroups":{"shape":"Sx"},"DBParameterGroups":{"type":"list","member":{"locationName":"DBParameterGroup","type":"structure","members":{"DBParameterGroupName":{},"ParameterApplyStatus":{}}}},"AvailabilityZone":{},"DBSubnetGroup":{"shape":"S11"},"PreferredMaintenanceWindow":{},"PendingModifiedValues":{"type":"structure","members":{"DBInstanceClass":{},"AllocatedStorage":{"type":"integer"},"MasterUserPassword":{},"Port":{"type":"integer"},"BackupRetentionPeriod":{"type":"integer"},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"Iops":{"type":"integer"},"DBInstanceIdentifier":{}}},"LatestRestorableTime":{"type":"timestamp"},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AutoMinorVersionUpgrade":{"type":"boolean"},"ReadReplicaSourceDBInstanceIdentifier":{},"ReadReplicaDBInstanceIdentifiers":{"type":"list","member":{"locationName":"ReadReplicaDBInstanceIdentifier"}},"LicenseModel":{},"Iops":{"type":"integer"},"OptionGroupMemberships":{"type":"list","member":{"locationName":"OptionGroupMembership","type":"structure","members":{"OptionGroupName":{},"Status":{}}}},"CharacterSetName":{},"SecondaryAvailabilityZone":{},"PubliclyAccessible":{"type":"boolean"}},"wrapper":true},"Sv":{"type":"list","member":{"locationName":"DBSecurityGroup","type":"structure","members":{"DBSecurityGroupName":{},"Status":{}}}},"Sx":{"type":"list","member":{"locationName":"VpcSecurityGroupMembership","type":"structure","members":{"VpcSecurityGroupId":{},"Status":{}}}},"S11":{"type":"structure","members":{"DBSubnetGroupName":{},"DBSubnetGroupDescription":{},"VpcId":{},"SubnetGroupStatus":{},"Subnets":{"type":"list","member":{"locationName":"Subnet","type":"structure","members":{"SubnetIdentifier":{},"SubnetAvailabilityZone":{"shape":"S14"},"SubnetStatus":{}}}}},"wrapper":true},"S14":{"type":"structure","members":{"Name":{},"ProvisionedIopsCapable":{"type":"boolean"}},"wrapper":true},"S1d":{"type":"structure","members":{"DBParameterGroupName":{},"DBParameterGroupFamily":{},"Description":{}},"wrapper":true},"S1j":{"type":"list","member":{"locationName":"SubnetIdentifier"}},"S1p":{"type":"structure","members":{"OptionGroupName":{},"OptionGroupDescription":{},"EngineName":{},"MajorEngineVersion":{},"Options":{"type":"list","member":{"locationName":"Option","type":"structure","members":{"OptionName":{},"OptionDescription":{},"Persistent":{"type":"boolean"},"Port":{"type":"integer"},"OptionSettings":{"type":"list","member":{"shape":"S1t","locationName":"OptionSetting"}},"DBSecurityGroupMemberships":{"shape":"Sv"},"VpcSecurityGroupMemberships":{"shape":"Sx"}}}},"AllowsVpcAndNonVpcInstanceMemberships":{"type":"boolean"},"VpcId":{}},"wrapper":true},"S1t":{"type":"structure","members":{"Name":{},"Value":{},"DefaultValue":{},"Description":{},"ApplyType":{},"DataType":{},"AllowedValues":{},"IsModifiable":{"type":"boolean"},"IsCollection":{"type":"boolean"}}},"S28":{"type":"structure","members":{"CharacterSetName":{},"CharacterSetDescription":{}}},"S2n":{"type":"list","member":{"locationName":"Parameter","type":"structure","members":{"ParameterName":{},"ParameterValue":{},"Description":{},"Source":{},"ApplyType":{},"DataType":{},"AllowedValues":{},"IsModifiable":{"type":"boolean"},"MinimumEngineVersion":{},"ApplyMethod":{}}}},"S3w":{"type":"structure","members":{"ReservedDBInstanceId":{},"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"StartTime":{"type":"timestamp"},"Duration":{"type":"integer"},"FixedPrice":{"type":"double"},"UsagePrice":{"type":"double"},"CurrencyCode":{},"DBInstanceCount":{"type":"integer"},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"State":{},"RecurringCharges":{"shape":"S3y"}},"wrapper":true},"S3y":{"type":"list","member":{"locationName":"RecurringCharge","type":"structure","members":{"RecurringChargeAmount":{"type":"double"},"RecurringChargeFrequency":{}},"wrapper":true}},"S4b":{"type":"structure","members":{"DBParameterGroupName":{}}}}}

/***/ }),
/* 330 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeDBEngineVersions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBEngineVersions"},"DescribeDBInstances":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBInstances"},"DescribeDBLogFiles":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DescribeDBLogFiles"},"DescribeDBParameterGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBParameterGroups"},"DescribeDBParameters":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"Parameters"},"DescribeDBSecurityGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBSecurityGroups"},"DescribeDBSnapshots":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBSnapshots"},"DescribeDBSubnetGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBSubnetGroups"},"DescribeEngineDefaultParameters":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"EngineDefaults.Marker","result_key":"EngineDefaults.Parameters"},"DescribeEventSubscriptions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"EventSubscriptionsList"},"DescribeEvents":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"Events"},"DescribeOptionGroupOptions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"OptionGroupOptions"},"DescribeOptionGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"OptionGroupsList"},"DescribeOrderableDBInstanceOptions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"OrderableDBInstanceOptions"},"DescribeReservedDBInstances":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"ReservedDBInstances"},"DescribeReservedDBInstancesOfferings":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"ReservedDBInstancesOfferings"},"DownloadDBLogFilePortion":{"input_token":"Marker","limit_key":"NumberOfLines","more_results":"AdditionalDataPending","output_token":"Marker","result_key":"LogFileData"},"ListTagsForResource":{"result_key":"TagList"}}}

/***/ }),
/* 331 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2013-09-09","endpointPrefix":"rds","protocol":"query","serviceAbbreviation":"Amazon RDS","serviceFullName":"Amazon Relational Database Service","serviceId":"RDS","signatureVersion":"v4","uid":"rds-2013-09-09","xmlNamespace":"http://rds.amazonaws.com/doc/2013-09-09/"},"operations":{"AddSourceIdentifierToSubscription":{"input":{"type":"structure","required":["SubscriptionName","SourceIdentifier"],"members":{"SubscriptionName":{},"SourceIdentifier":{}}},"output":{"resultWrapper":"AddSourceIdentifierToSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"AddTagsToResource":{"input":{"type":"structure","required":["ResourceName","Tags"],"members":{"ResourceName":{},"Tags":{"shape":"S9"}}}},"AuthorizeDBSecurityGroupIngress":{"input":{"type":"structure","required":["DBSecurityGroupName"],"members":{"DBSecurityGroupName":{},"CIDRIP":{},"EC2SecurityGroupName":{},"EC2SecurityGroupId":{},"EC2SecurityGroupOwnerId":{}}},"output":{"resultWrapper":"AuthorizeDBSecurityGroupIngressResult","type":"structure","members":{"DBSecurityGroup":{"shape":"Sd"}}}},"CopyDBSnapshot":{"input":{"type":"structure","required":["SourceDBSnapshotIdentifier","TargetDBSnapshotIdentifier"],"members":{"SourceDBSnapshotIdentifier":{},"TargetDBSnapshotIdentifier":{},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"CopyDBSnapshotResult","type":"structure","members":{"DBSnapshot":{"shape":"Sk"}}}},"CreateDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier","AllocatedStorage","DBInstanceClass","Engine","MasterUsername","MasterUserPassword"],"members":{"DBName":{},"DBInstanceIdentifier":{},"AllocatedStorage":{"type":"integer"},"DBInstanceClass":{},"Engine":{},"MasterUsername":{},"MasterUserPassword":{},"DBSecurityGroups":{"shape":"Sp"},"VpcSecurityGroupIds":{"shape":"Sq"},"AvailabilityZone":{},"DBSubnetGroupName":{},"PreferredMaintenanceWindow":{},"DBParameterGroupName":{},"BackupRetentionPeriod":{"type":"integer"},"PreferredBackupWindow":{},"Port":{"type":"integer"},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AutoMinorVersionUpgrade":{"type":"boolean"},"LicenseModel":{},"Iops":{"type":"integer"},"OptionGroupName":{},"CharacterSetName":{},"PubliclyAccessible":{"type":"boolean"},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"CreateDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"CreateDBInstanceReadReplica":{"input":{"type":"structure","required":["DBInstanceIdentifier","SourceDBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"SourceDBInstanceIdentifier":{},"DBInstanceClass":{},"AvailabilityZone":{},"Port":{"type":"integer"},"AutoMinorVersionUpgrade":{"type":"boolean"},"Iops":{"type":"integer"},"OptionGroupName":{},"PubliclyAccessible":{"type":"boolean"},"Tags":{"shape":"S9"},"DBSubnetGroupName":{}}},"output":{"resultWrapper":"CreateDBInstanceReadReplicaResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"CreateDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName","DBParameterGroupFamily","Description"],"members":{"DBParameterGroupName":{},"DBParameterGroupFamily":{},"Description":{},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"CreateDBParameterGroupResult","type":"structure","members":{"DBParameterGroup":{"shape":"S1f"}}}},"CreateDBSecurityGroup":{"input":{"type":"structure","required":["DBSecurityGroupName","DBSecurityGroupDescription"],"members":{"DBSecurityGroupName":{},"DBSecurityGroupDescription":{},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"CreateDBSecurityGroupResult","type":"structure","members":{"DBSecurityGroup":{"shape":"Sd"}}}},"CreateDBSnapshot":{"input":{"type":"structure","required":["DBSnapshotIdentifier","DBInstanceIdentifier"],"members":{"DBSnapshotIdentifier":{},"DBInstanceIdentifier":{},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"CreateDBSnapshotResult","type":"structure","members":{"DBSnapshot":{"shape":"Sk"}}}},"CreateDBSubnetGroup":{"input":{"type":"structure","required":["DBSubnetGroupName","DBSubnetGroupDescription","SubnetIds"],"members":{"DBSubnetGroupName":{},"DBSubnetGroupDescription":{},"SubnetIds":{"shape":"S1l"},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"CreateDBSubnetGroupResult","type":"structure","members":{"DBSubnetGroup":{"shape":"S11"}}}},"CreateEventSubscription":{"input":{"type":"structure","required":["SubscriptionName","SnsTopicArn"],"members":{"SubscriptionName":{},"SnsTopicArn":{},"SourceType":{},"EventCategories":{"shape":"S6"},"SourceIds":{"shape":"S5"},"Enabled":{"type":"boolean"},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"CreateEventSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"CreateOptionGroup":{"input":{"type":"structure","required":["OptionGroupName","EngineName","MajorEngineVersion","OptionGroupDescription"],"members":{"OptionGroupName":{},"EngineName":{},"MajorEngineVersion":{},"OptionGroupDescription":{},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"CreateOptionGroupResult","type":"structure","members":{"OptionGroup":{"shape":"S1r"}}}},"DeleteDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"SkipFinalSnapshot":{"type":"boolean"},"FinalDBSnapshotIdentifier":{}}},"output":{"resultWrapper":"DeleteDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"DeleteDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName"],"members":{"DBParameterGroupName":{}}}},"DeleteDBSecurityGroup":{"input":{"type":"structure","required":["DBSecurityGroupName"],"members":{"DBSecurityGroupName":{}}}},"DeleteDBSnapshot":{"input":{"type":"structure","required":["DBSnapshotIdentifier"],"members":{"DBSnapshotIdentifier":{}}},"output":{"resultWrapper":"DeleteDBSnapshotResult","type":"structure","members":{"DBSnapshot":{"shape":"Sk"}}}},"DeleteDBSubnetGroup":{"input":{"type":"structure","required":["DBSubnetGroupName"],"members":{"DBSubnetGroupName":{}}}},"DeleteEventSubscription":{"input":{"type":"structure","required":["SubscriptionName"],"members":{"SubscriptionName":{}}},"output":{"resultWrapper":"DeleteEventSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"DeleteOptionGroup":{"input":{"type":"structure","required":["OptionGroupName"],"members":{"OptionGroupName":{}}}},"DescribeDBEngineVersions":{"input":{"type":"structure","members":{"Engine":{},"EngineVersion":{},"DBParameterGroupFamily":{},"Filters":{"shape":"S27"},"MaxRecords":{"type":"integer"},"Marker":{},"DefaultOnly":{"type":"boolean"},"ListSupportedCharacterSets":{"type":"boolean"}}},"output":{"resultWrapper":"DescribeDBEngineVersionsResult","type":"structure","members":{"Marker":{},"DBEngineVersions":{"type":"list","member":{"locationName":"DBEngineVersion","type":"structure","members":{"Engine":{},"EngineVersion":{},"DBParameterGroupFamily":{},"DBEngineDescription":{},"DBEngineVersionDescription":{},"DefaultCharacterSet":{"shape":"S2d"},"SupportedCharacterSets":{"type":"list","member":{"shape":"S2d","locationName":"CharacterSet"}}}}}}}},"DescribeDBInstances":{"input":{"type":"structure","members":{"DBInstanceIdentifier":{},"Filters":{"shape":"S27"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBInstancesResult","type":"structure","members":{"Marker":{},"DBInstances":{"type":"list","member":{"shape":"St","locationName":"DBInstance"}}}}},"DescribeDBLogFiles":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"FilenameContains":{},"FileLastWritten":{"type":"long"},"FileSize":{"type":"long"},"Filters":{"shape":"S27"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBLogFilesResult","type":"structure","members":{"DescribeDBLogFiles":{"type":"list","member":{"locationName":"DescribeDBLogFilesDetails","type":"structure","members":{"LogFileName":{},"LastWritten":{"type":"long"},"Size":{"type":"long"}}}},"Marker":{}}}},"DescribeDBParameterGroups":{"input":{"type":"structure","members":{"DBParameterGroupName":{},"Filters":{"shape":"S27"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBParameterGroupsResult","type":"structure","members":{"Marker":{},"DBParameterGroups":{"type":"list","member":{"shape":"S1f","locationName":"DBParameterGroup"}}}}},"DescribeDBParameters":{"input":{"type":"structure","required":["DBParameterGroupName"],"members":{"DBParameterGroupName":{},"Source":{},"Filters":{"shape":"S27"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBParametersResult","type":"structure","members":{"Parameters":{"shape":"S2s"},"Marker":{}}}},"DescribeDBSecurityGroups":{"input":{"type":"structure","members":{"DBSecurityGroupName":{},"Filters":{"shape":"S27"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBSecurityGroupsResult","type":"structure","members":{"Marker":{},"DBSecurityGroups":{"type":"list","member":{"shape":"Sd","locationName":"DBSecurityGroup"}}}}},"DescribeDBSnapshots":{"input":{"type":"structure","members":{"DBInstanceIdentifier":{},"DBSnapshotIdentifier":{},"SnapshotType":{},"Filters":{"shape":"S27"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBSnapshotsResult","type":"structure","members":{"Marker":{},"DBSnapshots":{"type":"list","member":{"shape":"Sk","locationName":"DBSnapshot"}}}}},"DescribeDBSubnetGroups":{"input":{"type":"structure","members":{"DBSubnetGroupName":{},"Filters":{"shape":"S27"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBSubnetGroupsResult","type":"structure","members":{"Marker":{},"DBSubnetGroups":{"type":"list","member":{"shape":"S11","locationName":"DBSubnetGroup"}}}}},"DescribeEngineDefaultParameters":{"input":{"type":"structure","required":["DBParameterGroupFamily"],"members":{"DBParameterGroupFamily":{},"Filters":{"shape":"S27"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEngineDefaultParametersResult","type":"structure","members":{"EngineDefaults":{"type":"structure","members":{"DBParameterGroupFamily":{},"Marker":{},"Parameters":{"shape":"S2s"}},"wrapper":true}}}},"DescribeEventCategories":{"input":{"type":"structure","members":{"SourceType":{},"Filters":{"shape":"S27"}}},"output":{"resultWrapper":"DescribeEventCategoriesResult","type":"structure","members":{"EventCategoriesMapList":{"type":"list","member":{"locationName":"EventCategoriesMap","type":"structure","members":{"SourceType":{},"EventCategories":{"shape":"S6"}},"wrapper":true}}}}},"DescribeEventSubscriptions":{"input":{"type":"structure","members":{"SubscriptionName":{},"Filters":{"shape":"S27"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEventSubscriptionsResult","type":"structure","members":{"Marker":{},"EventSubscriptionsList":{"type":"list","member":{"shape":"S4","locationName":"EventSubscription"}}}}},"DescribeEvents":{"input":{"type":"structure","members":{"SourceIdentifier":{},"SourceType":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Duration":{"type":"integer"},"EventCategories":{"shape":"S6"},"Filters":{"shape":"S27"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEventsResult","type":"structure","members":{"Marker":{},"Events":{"type":"list","member":{"locationName":"Event","type":"structure","members":{"SourceIdentifier":{},"SourceType":{},"Message":{},"EventCategories":{"shape":"S6"},"Date":{"type":"timestamp"}}}}}}},"DescribeOptionGroupOptions":{"input":{"type":"structure","required":["EngineName"],"members":{"EngineName":{},"MajorEngineVersion":{},"Filters":{"shape":"S27"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeOptionGroupOptionsResult","type":"structure","members":{"OptionGroupOptions":{"type":"list","member":{"locationName":"OptionGroupOption","type":"structure","members":{"Name":{},"Description":{},"EngineName":{},"MajorEngineVersion":{},"MinimumRequiredMinorEngineVersion":{},"PortRequired":{"type":"boolean"},"DefaultPort":{"type":"integer"},"OptionsDependedOn":{"type":"list","member":{"locationName":"OptionName"}},"Persistent":{"type":"boolean"},"Permanent":{"type":"boolean"},"OptionGroupOptionSettings":{"type":"list","member":{"locationName":"OptionGroupOptionSetting","type":"structure","members":{"SettingName":{},"SettingDescription":{},"DefaultValue":{},"ApplyType":{},"AllowedValues":{},"IsModifiable":{"type":"boolean"}}}}}}},"Marker":{}}}},"DescribeOptionGroups":{"input":{"type":"structure","members":{"OptionGroupName":{},"Filters":{"shape":"S27"},"Marker":{},"MaxRecords":{"type":"integer"},"EngineName":{},"MajorEngineVersion":{}}},"output":{"resultWrapper":"DescribeOptionGroupsResult","type":"structure","members":{"OptionGroupsList":{"type":"list","member":{"shape":"S1r","locationName":"OptionGroup"}},"Marker":{}}}},"DescribeOrderableDBInstanceOptions":{"input":{"type":"structure","required":["Engine"],"members":{"Engine":{},"EngineVersion":{},"DBInstanceClass":{},"LicenseModel":{},"Vpc":{"type":"boolean"},"Filters":{"shape":"S27"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeOrderableDBInstanceOptionsResult","type":"structure","members":{"OrderableDBInstanceOptions":{"type":"list","member":{"locationName":"OrderableDBInstanceOption","type":"structure","members":{"Engine":{},"EngineVersion":{},"DBInstanceClass":{},"LicenseModel":{},"AvailabilityZones":{"type":"list","member":{"shape":"S14","locationName":"AvailabilityZone"}},"MultiAZCapable":{"type":"boolean"},"ReadReplicaCapable":{"type":"boolean"},"Vpc":{"type":"boolean"}},"wrapper":true}},"Marker":{}}}},"DescribeReservedDBInstances":{"input":{"type":"structure","members":{"ReservedDBInstanceId":{},"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"Duration":{},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"Filters":{"shape":"S27"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeReservedDBInstancesResult","type":"structure","members":{"Marker":{},"ReservedDBInstances":{"type":"list","member":{"shape":"S41","locationName":"ReservedDBInstance"}}}}},"DescribeReservedDBInstancesOfferings":{"input":{"type":"structure","members":{"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"Duration":{},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"Filters":{"shape":"S27"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeReservedDBInstancesOfferingsResult","type":"structure","members":{"Marker":{},"ReservedDBInstancesOfferings":{"type":"list","member":{"locationName":"ReservedDBInstancesOffering","type":"structure","members":{"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"Duration":{"type":"integer"},"FixedPrice":{"type":"double"},"UsagePrice":{"type":"double"},"CurrencyCode":{},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"RecurringCharges":{"shape":"S43"}},"wrapper":true}}}}},"DownloadDBLogFilePortion":{"input":{"type":"structure","required":["DBInstanceIdentifier","LogFileName"],"members":{"DBInstanceIdentifier":{},"LogFileName":{},"Marker":{},"NumberOfLines":{"type":"integer"}}},"output":{"resultWrapper":"DownloadDBLogFilePortionResult","type":"structure","members":{"LogFileData":{},"Marker":{},"AdditionalDataPending":{"type":"boolean"}}}},"ListTagsForResource":{"input":{"type":"structure","required":["ResourceName"],"members":{"ResourceName":{},"Filters":{"shape":"S27"}}},"output":{"resultWrapper":"ListTagsForResourceResult","type":"structure","members":{"TagList":{"shape":"S9"}}}},"ModifyDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"AllocatedStorage":{"type":"integer"},"DBInstanceClass":{},"DBSecurityGroups":{"shape":"Sp"},"VpcSecurityGroupIds":{"shape":"Sq"},"ApplyImmediately":{"type":"boolean"},"MasterUserPassword":{},"DBParameterGroupName":{},"BackupRetentionPeriod":{"type":"integer"},"PreferredBackupWindow":{},"PreferredMaintenanceWindow":{},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AllowMajorVersionUpgrade":{"type":"boolean"},"AutoMinorVersionUpgrade":{"type":"boolean"},"Iops":{"type":"integer"},"OptionGroupName":{},"NewDBInstanceIdentifier":{}}},"output":{"resultWrapper":"ModifyDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"ModifyDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName","Parameters"],"members":{"DBParameterGroupName":{},"Parameters":{"shape":"S2s"}}},"output":{"shape":"S4g","resultWrapper":"ModifyDBParameterGroupResult"}},"ModifyDBSubnetGroup":{"input":{"type":"structure","required":["DBSubnetGroupName","SubnetIds"],"members":{"DBSubnetGroupName":{},"DBSubnetGroupDescription":{},"SubnetIds":{"shape":"S1l"}}},"output":{"resultWrapper":"ModifyDBSubnetGroupResult","type":"structure","members":{"DBSubnetGroup":{"shape":"S11"}}}},"ModifyEventSubscription":{"input":{"type":"structure","required":["SubscriptionName"],"members":{"SubscriptionName":{},"SnsTopicArn":{},"SourceType":{},"EventCategories":{"shape":"S6"},"Enabled":{"type":"boolean"}}},"output":{"resultWrapper":"ModifyEventSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"ModifyOptionGroup":{"input":{"type":"structure","required":["OptionGroupName"],"members":{"OptionGroupName":{},"OptionsToInclude":{"type":"list","member":{"locationName":"OptionConfiguration","type":"structure","required":["OptionName"],"members":{"OptionName":{},"Port":{"type":"integer"},"DBSecurityGroupMemberships":{"shape":"Sp"},"VpcSecurityGroupMemberships":{"shape":"Sq"},"OptionSettings":{"type":"list","member":{"shape":"S1v","locationName":"OptionSetting"}}}}},"OptionsToRemove":{"type":"list","member":{}},"ApplyImmediately":{"type":"boolean"}}},"output":{"resultWrapper":"ModifyOptionGroupResult","type":"structure","members":{"OptionGroup":{"shape":"S1r"}}}},"PromoteReadReplica":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"BackupRetentionPeriod":{"type":"integer"},"PreferredBackupWindow":{}}},"output":{"resultWrapper":"PromoteReadReplicaResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"PurchaseReservedDBInstancesOffering":{"input":{"type":"structure","required":["ReservedDBInstancesOfferingId"],"members":{"ReservedDBInstancesOfferingId":{},"ReservedDBInstanceId":{},"DBInstanceCount":{"type":"integer"},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"PurchaseReservedDBInstancesOfferingResult","type":"structure","members":{"ReservedDBInstance":{"shape":"S41"}}}},"RebootDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"ForceFailover":{"type":"boolean"}}},"output":{"resultWrapper":"RebootDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"RemoveSourceIdentifierFromSubscription":{"input":{"type":"structure","required":["SubscriptionName","SourceIdentifier"],"members":{"SubscriptionName":{},"SourceIdentifier":{}}},"output":{"resultWrapper":"RemoveSourceIdentifierFromSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"RemoveTagsFromResource":{"input":{"type":"structure","required":["ResourceName","TagKeys"],"members":{"ResourceName":{},"TagKeys":{"type":"list","member":{}}}}},"ResetDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName"],"members":{"DBParameterGroupName":{},"ResetAllParameters":{"type":"boolean"},"Parameters":{"shape":"S2s"}}},"output":{"shape":"S4g","resultWrapper":"ResetDBParameterGroupResult"}},"RestoreDBInstanceFromDBSnapshot":{"input":{"type":"structure","required":["DBInstanceIdentifier","DBSnapshotIdentifier"],"members":{"DBInstanceIdentifier":{},"DBSnapshotIdentifier":{},"DBInstanceClass":{},"Port":{"type":"integer"},"AvailabilityZone":{},"DBSubnetGroupName":{},"MultiAZ":{"type":"boolean"},"PubliclyAccessible":{"type":"boolean"},"AutoMinorVersionUpgrade":{"type":"boolean"},"LicenseModel":{},"DBName":{},"Engine":{},"Iops":{"type":"integer"},"OptionGroupName":{},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"RestoreDBInstanceFromDBSnapshotResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"RestoreDBInstanceToPointInTime":{"input":{"type":"structure","required":["SourceDBInstanceIdentifier","TargetDBInstanceIdentifier"],"members":{"SourceDBInstanceIdentifier":{},"TargetDBInstanceIdentifier":{},"RestoreTime":{"type":"timestamp"},"UseLatestRestorableTime":{"type":"boolean"},"DBInstanceClass":{},"Port":{"type":"integer"},"AvailabilityZone":{},"DBSubnetGroupName":{},"MultiAZ":{"type":"boolean"},"PubliclyAccessible":{"type":"boolean"},"AutoMinorVersionUpgrade":{"type":"boolean"},"LicenseModel":{},"DBName":{},"Engine":{},"Iops":{"type":"integer"},"OptionGroupName":{},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"RestoreDBInstanceToPointInTimeResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"RevokeDBSecurityGroupIngress":{"input":{"type":"structure","required":["DBSecurityGroupName"],"members":{"DBSecurityGroupName":{},"CIDRIP":{},"EC2SecurityGroupName":{},"EC2SecurityGroupId":{},"EC2SecurityGroupOwnerId":{}}},"output":{"resultWrapper":"RevokeDBSecurityGroupIngressResult","type":"structure","members":{"DBSecurityGroup":{"shape":"Sd"}}}}},"shapes":{"S4":{"type":"structure","members":{"CustomerAwsId":{},"CustSubscriptionId":{},"SnsTopicArn":{},"Status":{},"SubscriptionCreationTime":{},"SourceType":{},"SourceIdsList":{"shape":"S5"},"EventCategoriesList":{"shape":"S6"},"Enabled":{"type":"boolean"}},"wrapper":true},"S5":{"type":"list","member":{"locationName":"SourceId"}},"S6":{"type":"list","member":{"locationName":"EventCategory"}},"S9":{"type":"list","member":{"locationName":"Tag","type":"structure","members":{"Key":{},"Value":{}}}},"Sd":{"type":"structure","members":{"OwnerId":{},"DBSecurityGroupName":{},"DBSecurityGroupDescription":{},"VpcId":{},"EC2SecurityGroups":{"type":"list","member":{"locationName":"EC2SecurityGroup","type":"structure","members":{"Status":{},"EC2SecurityGroupName":{},"EC2SecurityGroupId":{},"EC2SecurityGroupOwnerId":{}}}},"IPRanges":{"type":"list","member":{"locationName":"IPRange","type":"structure","members":{"Status":{},"CIDRIP":{}}}}},"wrapper":true},"Sk":{"type":"structure","members":{"DBSnapshotIdentifier":{},"DBInstanceIdentifier":{},"SnapshotCreateTime":{"type":"timestamp"},"Engine":{},"AllocatedStorage":{"type":"integer"},"Status":{},"Port":{"type":"integer"},"AvailabilityZone":{},"VpcId":{},"InstanceCreateTime":{"type":"timestamp"},"MasterUsername":{},"EngineVersion":{},"LicenseModel":{},"SnapshotType":{},"Iops":{"type":"integer"},"OptionGroupName":{},"PercentProgress":{"type":"integer"},"SourceRegion":{}},"wrapper":true},"Sp":{"type":"list","member":{"locationName":"DBSecurityGroupName"}},"Sq":{"type":"list","member":{"locationName":"VpcSecurityGroupId"}},"St":{"type":"structure","members":{"DBInstanceIdentifier":{},"DBInstanceClass":{},"Engine":{},"DBInstanceStatus":{},"MasterUsername":{},"DBName":{},"Endpoint":{"type":"structure","members":{"Address":{},"Port":{"type":"integer"}}},"AllocatedStorage":{"type":"integer"},"InstanceCreateTime":{"type":"timestamp"},"PreferredBackupWindow":{},"BackupRetentionPeriod":{"type":"integer"},"DBSecurityGroups":{"shape":"Sv"},"VpcSecurityGroups":{"shape":"Sx"},"DBParameterGroups":{"type":"list","member":{"locationName":"DBParameterGroup","type":"structure","members":{"DBParameterGroupName":{},"ParameterApplyStatus":{}}}},"AvailabilityZone":{},"DBSubnetGroup":{"shape":"S11"},"PreferredMaintenanceWindow":{},"PendingModifiedValues":{"type":"structure","members":{"DBInstanceClass":{},"AllocatedStorage":{"type":"integer"},"MasterUserPassword":{},"Port":{"type":"integer"},"BackupRetentionPeriod":{"type":"integer"},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"Iops":{"type":"integer"},"DBInstanceIdentifier":{}}},"LatestRestorableTime":{"type":"timestamp"},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AutoMinorVersionUpgrade":{"type":"boolean"},"ReadReplicaSourceDBInstanceIdentifier":{},"ReadReplicaDBInstanceIdentifiers":{"type":"list","member":{"locationName":"ReadReplicaDBInstanceIdentifier"}},"LicenseModel":{},"Iops":{"type":"integer"},"OptionGroupMemberships":{"type":"list","member":{"locationName":"OptionGroupMembership","type":"structure","members":{"OptionGroupName":{},"Status":{}}}},"CharacterSetName":{},"SecondaryAvailabilityZone":{},"PubliclyAccessible":{"type":"boolean"},"StatusInfos":{"type":"list","member":{"locationName":"DBInstanceStatusInfo","type":"structure","members":{"StatusType":{},"Normal":{"type":"boolean"},"Status":{},"Message":{}}}}},"wrapper":true},"Sv":{"type":"list","member":{"locationName":"DBSecurityGroup","type":"structure","members":{"DBSecurityGroupName":{},"Status":{}}}},"Sx":{"type":"list","member":{"locationName":"VpcSecurityGroupMembership","type":"structure","members":{"VpcSecurityGroupId":{},"Status":{}}}},"S11":{"type":"structure","members":{"DBSubnetGroupName":{},"DBSubnetGroupDescription":{},"VpcId":{},"SubnetGroupStatus":{},"Subnets":{"type":"list","member":{"locationName":"Subnet","type":"structure","members":{"SubnetIdentifier":{},"SubnetAvailabilityZone":{"shape":"S14"},"SubnetStatus":{}}}}},"wrapper":true},"S14":{"type":"structure","members":{"Name":{},"ProvisionedIopsCapable":{"type":"boolean"}},"wrapper":true},"S1f":{"type":"structure","members":{"DBParameterGroupName":{},"DBParameterGroupFamily":{},"Description":{}},"wrapper":true},"S1l":{"type":"list","member":{"locationName":"SubnetIdentifier"}},"S1r":{"type":"structure","members":{"OptionGroupName":{},"OptionGroupDescription":{},"EngineName":{},"MajorEngineVersion":{},"Options":{"type":"list","member":{"locationName":"Option","type":"structure","members":{"OptionName":{},"OptionDescription":{},"Persistent":{"type":"boolean"},"Permanent":{"type":"boolean"},"Port":{"type":"integer"},"OptionSettings":{"type":"list","member":{"shape":"S1v","locationName":"OptionSetting"}},"DBSecurityGroupMemberships":{"shape":"Sv"},"VpcSecurityGroupMemberships":{"shape":"Sx"}}}},"AllowsVpcAndNonVpcInstanceMemberships":{"type":"boolean"},"VpcId":{}},"wrapper":true},"S1v":{"type":"structure","members":{"Name":{},"Value":{},"DefaultValue":{},"Description":{},"ApplyType":{},"DataType":{},"AllowedValues":{},"IsModifiable":{"type":"boolean"},"IsCollection":{"type":"boolean"}}},"S27":{"type":"list","member":{"locationName":"Filter","type":"structure","required":["Name","Values"],"members":{"Name":{},"Values":{"type":"list","member":{"locationName":"Value"}}}}},"S2d":{"type":"structure","members":{"CharacterSetName":{},"CharacterSetDescription":{}}},"S2s":{"type":"list","member":{"locationName":"Parameter","type":"structure","members":{"ParameterName":{},"ParameterValue":{},"Description":{},"Source":{},"ApplyType":{},"DataType":{},"AllowedValues":{},"IsModifiable":{"type":"boolean"},"MinimumEngineVersion":{},"ApplyMethod":{}}}},"S41":{"type":"structure","members":{"ReservedDBInstanceId":{},"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"StartTime":{"type":"timestamp"},"Duration":{"type":"integer"},"FixedPrice":{"type":"double"},"UsagePrice":{"type":"double"},"CurrencyCode":{},"DBInstanceCount":{"type":"integer"},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"State":{},"RecurringCharges":{"shape":"S43"}},"wrapper":true},"S43":{"type":"list","member":{"locationName":"RecurringCharge","type":"structure","members":{"RecurringChargeAmount":{"type":"double"},"RecurringChargeFrequency":{}},"wrapper":true}},"S4g":{"type":"structure","members":{"DBParameterGroupName":{}}}}}

/***/ }),
/* 332 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeDBEngineVersions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBEngineVersions"},"DescribeDBInstances":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBInstances"},"DescribeDBLogFiles":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DescribeDBLogFiles"},"DescribeDBParameterGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBParameterGroups"},"DescribeDBParameters":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"Parameters"},"DescribeDBSecurityGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBSecurityGroups"},"DescribeDBSnapshots":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBSnapshots"},"DescribeDBSubnetGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBSubnetGroups"},"DescribeEngineDefaultParameters":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"EngineDefaults.Marker","result_key":"EngineDefaults.Parameters"},"DescribeEventSubscriptions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"EventSubscriptionsList"},"DescribeEvents":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"Events"},"DescribeOptionGroupOptions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"OptionGroupOptions"},"DescribeOptionGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"OptionGroupsList"},"DescribeOrderableDBInstanceOptions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"OrderableDBInstanceOptions"},"DescribeReservedDBInstances":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"ReservedDBInstances"},"DescribeReservedDBInstancesOfferings":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"ReservedDBInstancesOfferings"},"DownloadDBLogFilePortion":{"input_token":"Marker","limit_key":"NumberOfLines","more_results":"AdditionalDataPending","output_token":"Marker","result_key":"LogFileData"},"ListTagsForResource":{"result_key":"TagList"}}}

/***/ }),
/* 333 */
/***/ (function(module, exports) {

	module.exports = {"version":2,"waiters":{"DBInstanceAvailable":{"delay":30,"operation":"DescribeDBInstances","maxAttempts":60,"acceptors":[{"expected":"available","matcher":"pathAll","state":"success","argument":"DBInstances[].DBInstanceStatus"},{"expected":"deleted","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"},{"expected":"deleting","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"},{"expected":"failed","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"},{"expected":"incompatible-restore","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"},{"expected":"incompatible-parameters","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"},{"expected":"incompatible-parameters","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"},{"expected":"incompatible-restore","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"}]},"DBInstanceDeleted":{"delay":30,"operation":"DescribeDBInstances","maxAttempts":60,"acceptors":[{"expected":"deleted","matcher":"pathAll","state":"success","argument":"DBInstances[].DBInstanceStatus"},{"expected":"creating","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"},{"expected":"modifying","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"},{"expected":"rebooting","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"},{"expected":"resetting-master-credentials","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"}]}}}

/***/ }),
/* 334 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2014-09-01","endpointPrefix":"rds","protocol":"query","serviceAbbreviation":"Amazon RDS","serviceFullName":"Amazon Relational Database Service","serviceId":"RDS","signatureVersion":"v4","uid":"rds-2014-09-01","xmlNamespace":"http://rds.amazonaws.com/doc/2014-09-01/"},"operations":{"AddSourceIdentifierToSubscription":{"input":{"type":"structure","required":["SubscriptionName","SourceIdentifier"],"members":{"SubscriptionName":{},"SourceIdentifier":{}}},"output":{"resultWrapper":"AddSourceIdentifierToSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"AddTagsToResource":{"input":{"type":"structure","required":["ResourceName","Tags"],"members":{"ResourceName":{},"Tags":{"shape":"S9"}}}},"AuthorizeDBSecurityGroupIngress":{"input":{"type":"structure","required":["DBSecurityGroupName"],"members":{"DBSecurityGroupName":{},"CIDRIP":{},"EC2SecurityGroupName":{},"EC2SecurityGroupId":{},"EC2SecurityGroupOwnerId":{}}},"output":{"resultWrapper":"AuthorizeDBSecurityGroupIngressResult","type":"structure","members":{"DBSecurityGroup":{"shape":"Sd"}}}},"CopyDBParameterGroup":{"input":{"type":"structure","required":["SourceDBParameterGroupIdentifier","TargetDBParameterGroupIdentifier","TargetDBParameterGroupDescription"],"members":{"SourceDBParameterGroupIdentifier":{},"TargetDBParameterGroupIdentifier":{},"TargetDBParameterGroupDescription":{},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"CopyDBParameterGroupResult","type":"structure","members":{"DBParameterGroup":{"shape":"Sk"}}}},"CopyDBSnapshot":{"input":{"type":"structure","required":["SourceDBSnapshotIdentifier","TargetDBSnapshotIdentifier"],"members":{"SourceDBSnapshotIdentifier":{},"TargetDBSnapshotIdentifier":{},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"CopyDBSnapshotResult","type":"structure","members":{"DBSnapshot":{"shape":"Sn"}}}},"CopyOptionGroup":{"input":{"type":"structure","required":["SourceOptionGroupIdentifier","TargetOptionGroupIdentifier","TargetOptionGroupDescription"],"members":{"SourceOptionGroupIdentifier":{},"TargetOptionGroupIdentifier":{},"TargetOptionGroupDescription":{},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"CopyOptionGroupResult","type":"structure","members":{"OptionGroup":{"shape":"St"}}}},"CreateDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier","AllocatedStorage","DBInstanceClass","Engine","MasterUsername","MasterUserPassword"],"members":{"DBName":{},"DBInstanceIdentifier":{},"AllocatedStorage":{"type":"integer"},"DBInstanceClass":{},"Engine":{},"MasterUsername":{},"MasterUserPassword":{},"DBSecurityGroups":{"shape":"S13"},"VpcSecurityGroupIds":{"shape":"S14"},"AvailabilityZone":{},"DBSubnetGroupName":{},"PreferredMaintenanceWindow":{},"DBParameterGroupName":{},"BackupRetentionPeriod":{"type":"integer"},"PreferredBackupWindow":{},"Port":{"type":"integer"},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AutoMinorVersionUpgrade":{"type":"boolean"},"LicenseModel":{},"Iops":{"type":"integer"},"OptionGroupName":{},"CharacterSetName":{},"PubliclyAccessible":{"type":"boolean"},"Tags":{"shape":"S9"},"StorageType":{},"TdeCredentialArn":{},"TdeCredentialPassword":{}}},"output":{"resultWrapper":"CreateDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"S17"}}}},"CreateDBInstanceReadReplica":{"input":{"type":"structure","required":["DBInstanceIdentifier","SourceDBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"SourceDBInstanceIdentifier":{},"DBInstanceClass":{},"AvailabilityZone":{},"Port":{"type":"integer"},"AutoMinorVersionUpgrade":{"type":"boolean"},"Iops":{"type":"integer"},"OptionGroupName":{},"PubliclyAccessible":{"type":"boolean"},"Tags":{"shape":"S9"},"DBSubnetGroupName":{},"StorageType":{}}},"output":{"resultWrapper":"CreateDBInstanceReadReplicaResult","type":"structure","members":{"DBInstance":{"shape":"S17"}}}},"CreateDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName","DBParameterGroupFamily","Description"],"members":{"DBParameterGroupName":{},"DBParameterGroupFamily":{},"Description":{},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"CreateDBParameterGroupResult","type":"structure","members":{"DBParameterGroup":{"shape":"Sk"}}}},"CreateDBSecurityGroup":{"input":{"type":"structure","required":["DBSecurityGroupName","DBSecurityGroupDescription"],"members":{"DBSecurityGroupName":{},"DBSecurityGroupDescription":{},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"CreateDBSecurityGroupResult","type":"structure","members":{"DBSecurityGroup":{"shape":"Sd"}}}},"CreateDBSnapshot":{"input":{"type":"structure","required":["DBSnapshotIdentifier","DBInstanceIdentifier"],"members":{"DBSnapshotIdentifier":{},"DBInstanceIdentifier":{},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"CreateDBSnapshotResult","type":"structure","members":{"DBSnapshot":{"shape":"Sn"}}}},"CreateDBSubnetGroup":{"input":{"type":"structure","required":["DBSubnetGroupName","DBSubnetGroupDescription","SubnetIds"],"members":{"DBSubnetGroupName":{},"DBSubnetGroupDescription":{},"SubnetIds":{"shape":"S1u"},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"CreateDBSubnetGroupResult","type":"structure","members":{"DBSubnetGroup":{"shape":"S1b"}}}},"CreateEventSubscription":{"input":{"type":"structure","required":["SubscriptionName","SnsTopicArn"],"members":{"SubscriptionName":{},"SnsTopicArn":{},"SourceType":{},"EventCategories":{"shape":"S6"},"SourceIds":{"shape":"S5"},"Enabled":{"type":"boolean"},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"CreateEventSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"CreateOptionGroup":{"input":{"type":"structure","required":["OptionGroupName","EngineName","MajorEngineVersion","OptionGroupDescription"],"members":{"OptionGroupName":{},"EngineName":{},"MajorEngineVersion":{},"OptionGroupDescription":{},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"CreateOptionGroupResult","type":"structure","members":{"OptionGroup":{"shape":"St"}}}},"DeleteDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"SkipFinalSnapshot":{"type":"boolean"},"FinalDBSnapshotIdentifier":{}}},"output":{"resultWrapper":"DeleteDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"S17"}}}},"DeleteDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName"],"members":{"DBParameterGroupName":{}}}},"DeleteDBSecurityGroup":{"input":{"type":"structure","required":["DBSecurityGroupName"],"members":{"DBSecurityGroupName":{}}}},"DeleteDBSnapshot":{"input":{"type":"structure","required":["DBSnapshotIdentifier"],"members":{"DBSnapshotIdentifier":{}}},"output":{"resultWrapper":"DeleteDBSnapshotResult","type":"structure","members":{"DBSnapshot":{"shape":"Sn"}}}},"DeleteDBSubnetGroup":{"input":{"type":"structure","required":["DBSubnetGroupName"],"members":{"DBSubnetGroupName":{}}}},"DeleteEventSubscription":{"input":{"type":"structure","required":["SubscriptionName"],"members":{"SubscriptionName":{}}},"output":{"resultWrapper":"DeleteEventSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"DeleteOptionGroup":{"input":{"type":"structure","required":["OptionGroupName"],"members":{"OptionGroupName":{}}}},"DescribeDBEngineVersions":{"input":{"type":"structure","members":{"Engine":{},"EngineVersion":{},"DBParameterGroupFamily":{},"Filters":{"shape":"S2b"},"MaxRecords":{"type":"integer"},"Marker":{},"DefaultOnly":{"type":"boolean"},"ListSupportedCharacterSets":{"type":"boolean"}}},"output":{"resultWrapper":"DescribeDBEngineVersionsResult","type":"structure","members":{"Marker":{},"DBEngineVersions":{"type":"list","member":{"locationName":"DBEngineVersion","type":"structure","members":{"Engine":{},"EngineVersion":{},"DBParameterGroupFamily":{},"DBEngineDescription":{},"DBEngineVersionDescription":{},"DefaultCharacterSet":{"shape":"S2h"},"SupportedCharacterSets":{"type":"list","member":{"shape":"S2h","locationName":"CharacterSet"}}}}}}}},"DescribeDBInstances":{"input":{"type":"structure","members":{"DBInstanceIdentifier":{},"Filters":{"shape":"S2b"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBInstancesResult","type":"structure","members":{"Marker":{},"DBInstances":{"type":"list","member":{"shape":"S17","locationName":"DBInstance"}}}}},"DescribeDBLogFiles":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"FilenameContains":{},"FileLastWritten":{"type":"long"},"FileSize":{"type":"long"},"Filters":{"shape":"S2b"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBLogFilesResult","type":"structure","members":{"DescribeDBLogFiles":{"type":"list","member":{"locationName":"DescribeDBLogFilesDetails","type":"structure","members":{"LogFileName":{},"LastWritten":{"type":"long"},"Size":{"type":"long"}}}},"Marker":{}}}},"DescribeDBParameterGroups":{"input":{"type":"structure","members":{"DBParameterGroupName":{},"Filters":{"shape":"S2b"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBParameterGroupsResult","type":"structure","members":{"Marker":{},"DBParameterGroups":{"type":"list","member":{"shape":"Sk","locationName":"DBParameterGroup"}}}}},"DescribeDBParameters":{"input":{"type":"structure","required":["DBParameterGroupName"],"members":{"DBParameterGroupName":{},"Source":{},"Filters":{"shape":"S2b"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBParametersResult","type":"structure","members":{"Parameters":{"shape":"S2w"},"Marker":{}}}},"DescribeDBSecurityGroups":{"input":{"type":"structure","members":{"DBSecurityGroupName":{},"Filters":{"shape":"S2b"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBSecurityGroupsResult","type":"structure","members":{"Marker":{},"DBSecurityGroups":{"type":"list","member":{"shape":"Sd","locationName":"DBSecurityGroup"}}}}},"DescribeDBSnapshots":{"input":{"type":"structure","members":{"DBInstanceIdentifier":{},"DBSnapshotIdentifier":{},"SnapshotType":{},"Filters":{"shape":"S2b"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBSnapshotsResult","type":"structure","members":{"Marker":{},"DBSnapshots":{"type":"list","member":{"shape":"Sn","locationName":"DBSnapshot"}}}}},"DescribeDBSubnetGroups":{"input":{"type":"structure","members":{"DBSubnetGroupName":{},"Filters":{"shape":"S2b"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBSubnetGroupsResult","type":"structure","members":{"Marker":{},"DBSubnetGroups":{"type":"list","member":{"shape":"S1b","locationName":"DBSubnetGroup"}}}}},"DescribeEngineDefaultParameters":{"input":{"type":"structure","required":["DBParameterGroupFamily"],"members":{"DBParameterGroupFamily":{},"Filters":{"shape":"S2b"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEngineDefaultParametersResult","type":"structure","members":{"EngineDefaults":{"type":"structure","members":{"DBParameterGroupFamily":{},"Marker":{},"Parameters":{"shape":"S2w"}},"wrapper":true}}}},"DescribeEventCategories":{"input":{"type":"structure","members":{"SourceType":{},"Filters":{"shape":"S2b"}}},"output":{"resultWrapper":"DescribeEventCategoriesResult","type":"structure","members":{"EventCategoriesMapList":{"type":"list","member":{"locationName":"EventCategoriesMap","type":"structure","members":{"SourceType":{},"EventCategories":{"shape":"S6"}},"wrapper":true}}}}},"DescribeEventSubscriptions":{"input":{"type":"structure","members":{"SubscriptionName":{},"Filters":{"shape":"S2b"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEventSubscriptionsResult","type":"structure","members":{"Marker":{},"EventSubscriptionsList":{"type":"list","member":{"shape":"S4","locationName":"EventSubscription"}}}}},"DescribeEvents":{"input":{"type":"structure","members":{"SourceIdentifier":{},"SourceType":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Duration":{"type":"integer"},"EventCategories":{"shape":"S6"},"Filters":{"shape":"S2b"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEventsResult","type":"structure","members":{"Marker":{},"Events":{"type":"list","member":{"locationName":"Event","type":"structure","members":{"SourceIdentifier":{},"SourceType":{},"Message":{},"EventCategories":{"shape":"S6"},"Date":{"type":"timestamp"}}}}}}},"DescribeOptionGroupOptions":{"input":{"type":"structure","required":["EngineName"],"members":{"EngineName":{},"MajorEngineVersion":{},"Filters":{"shape":"S2b"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeOptionGroupOptionsResult","type":"structure","members":{"OptionGroupOptions":{"type":"list","member":{"locationName":"OptionGroupOption","type":"structure","members":{"Name":{},"Description":{},"EngineName":{},"MajorEngineVersion":{},"MinimumRequiredMinorEngineVersion":{},"PortRequired":{"type":"boolean"},"DefaultPort":{"type":"integer"},"OptionsDependedOn":{"type":"list","member":{"locationName":"OptionName"}},"Persistent":{"type":"boolean"},"Permanent":{"type":"boolean"},"OptionGroupOptionSettings":{"type":"list","member":{"locationName":"OptionGroupOptionSetting","type":"structure","members":{"SettingName":{},"SettingDescription":{},"DefaultValue":{},"ApplyType":{},"AllowedValues":{},"IsModifiable":{"type":"boolean"}}}}}}},"Marker":{}}}},"DescribeOptionGroups":{"input":{"type":"structure","members":{"OptionGroupName":{},"Filters":{"shape":"S2b"},"Marker":{},"MaxRecords":{"type":"integer"},"EngineName":{},"MajorEngineVersion":{}}},"output":{"resultWrapper":"DescribeOptionGroupsResult","type":"structure","members":{"OptionGroupsList":{"type":"list","member":{"shape":"St","locationName":"OptionGroup"}},"Marker":{}}}},"DescribeOrderableDBInstanceOptions":{"input":{"type":"structure","required":["Engine"],"members":{"Engine":{},"EngineVersion":{},"DBInstanceClass":{},"LicenseModel":{},"Vpc":{"type":"boolean"},"Filters":{"shape":"S2b"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeOrderableDBInstanceOptionsResult","type":"structure","members":{"OrderableDBInstanceOptions":{"type":"list","member":{"locationName":"OrderableDBInstanceOption","type":"structure","members":{"Engine":{},"EngineVersion":{},"DBInstanceClass":{},"LicenseModel":{},"AvailabilityZones":{"type":"list","member":{"shape":"S1e","locationName":"AvailabilityZone"}},"MultiAZCapable":{"type":"boolean"},"ReadReplicaCapable":{"type":"boolean"},"Vpc":{"type":"boolean"},"StorageType":{},"SupportsIops":{"type":"boolean"}},"wrapper":true}},"Marker":{}}}},"DescribeReservedDBInstances":{"input":{"type":"structure","members":{"ReservedDBInstanceId":{},"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"Duration":{},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"Filters":{"shape":"S2b"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeReservedDBInstancesResult","type":"structure","members":{"Marker":{},"ReservedDBInstances":{"type":"list","member":{"shape":"S45","locationName":"ReservedDBInstance"}}}}},"DescribeReservedDBInstancesOfferings":{"input":{"type":"structure","members":{"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"Duration":{},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"Filters":{"shape":"S2b"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeReservedDBInstancesOfferingsResult","type":"structure","members":{"Marker":{},"ReservedDBInstancesOfferings":{"type":"list","member":{"locationName":"ReservedDBInstancesOffering","type":"structure","members":{"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"Duration":{"type":"integer"},"FixedPrice":{"type":"double"},"UsagePrice":{"type":"double"},"CurrencyCode":{},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"RecurringCharges":{"shape":"S47"}},"wrapper":true}}}}},"DownloadDBLogFilePortion":{"input":{"type":"structure","required":["DBInstanceIdentifier","LogFileName"],"members":{"DBInstanceIdentifier":{},"LogFileName":{},"Marker":{},"NumberOfLines":{"type":"integer"}}},"output":{"resultWrapper":"DownloadDBLogFilePortionResult","type":"structure","members":{"LogFileData":{},"Marker":{},"AdditionalDataPending":{"type":"boolean"}}}},"ListTagsForResource":{"input":{"type":"structure","required":["ResourceName"],"members":{"ResourceName":{},"Filters":{"shape":"S2b"}}},"output":{"resultWrapper":"ListTagsForResourceResult","type":"structure","members":{"TagList":{"shape":"S9"}}}},"ModifyDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"AllocatedStorage":{"type":"integer"},"DBInstanceClass":{},"DBSecurityGroups":{"shape":"S13"},"VpcSecurityGroupIds":{"shape":"S14"},"ApplyImmediately":{"type":"boolean"},"MasterUserPassword":{},"DBParameterGroupName":{},"BackupRetentionPeriod":{"type":"integer"},"PreferredBackupWindow":{},"PreferredMaintenanceWindow":{},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AllowMajorVersionUpgrade":{"type":"boolean"},"AutoMinorVersionUpgrade":{"type":"boolean"},"Iops":{"type":"integer"},"OptionGroupName":{},"NewDBInstanceIdentifier":{},"StorageType":{},"TdeCredentialArn":{},"TdeCredentialPassword":{}}},"output":{"resultWrapper":"ModifyDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"S17"}}}},"ModifyDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName","Parameters"],"members":{"DBParameterGroupName":{},"Parameters":{"shape":"S2w"}}},"output":{"shape":"S4k","resultWrapper":"ModifyDBParameterGroupResult"}},"ModifyDBSubnetGroup":{"input":{"type":"structure","required":["DBSubnetGroupName","SubnetIds"],"members":{"DBSubnetGroupName":{},"DBSubnetGroupDescription":{},"SubnetIds":{"shape":"S1u"}}},"output":{"resultWrapper":"ModifyDBSubnetGroupResult","type":"structure","members":{"DBSubnetGroup":{"shape":"S1b"}}}},"ModifyEventSubscription":{"input":{"type":"structure","required":["SubscriptionName"],"members":{"SubscriptionName":{},"SnsTopicArn":{},"SourceType":{},"EventCategories":{"shape":"S6"},"Enabled":{"type":"boolean"}}},"output":{"resultWrapper":"ModifyEventSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"ModifyOptionGroup":{"input":{"type":"structure","required":["OptionGroupName"],"members":{"OptionGroupName":{},"OptionsToInclude":{"type":"list","member":{"locationName":"OptionConfiguration","type":"structure","required":["OptionName"],"members":{"OptionName":{},"Port":{"type":"integer"},"DBSecurityGroupMemberships":{"shape":"S13"},"VpcSecurityGroupMemberships":{"shape":"S14"},"OptionSettings":{"type":"list","member":{"shape":"Sx","locationName":"OptionSetting"}}}}},"OptionsToRemove":{"type":"list","member":{}},"ApplyImmediately":{"type":"boolean"}}},"output":{"resultWrapper":"ModifyOptionGroupResult","type":"structure","members":{"OptionGroup":{"shape":"St"}}}},"PromoteReadReplica":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"BackupRetentionPeriod":{"type":"integer"},"PreferredBackupWindow":{}}},"output":{"resultWrapper":"PromoteReadReplicaResult","type":"structure","members":{"DBInstance":{"shape":"S17"}}}},"PurchaseReservedDBInstancesOffering":{"input":{"type":"structure","required":["ReservedDBInstancesOfferingId"],"members":{"ReservedDBInstancesOfferingId":{},"ReservedDBInstanceId":{},"DBInstanceCount":{"type":"integer"},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"PurchaseReservedDBInstancesOfferingResult","type":"structure","members":{"ReservedDBInstance":{"shape":"S45"}}}},"RebootDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"ForceFailover":{"type":"boolean"}}},"output":{"resultWrapper":"RebootDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"S17"}}}},"RemoveSourceIdentifierFromSubscription":{"input":{"type":"structure","required":["SubscriptionName","SourceIdentifier"],"members":{"SubscriptionName":{},"SourceIdentifier":{}}},"output":{"resultWrapper":"RemoveSourceIdentifierFromSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"RemoveTagsFromResource":{"input":{"type":"structure","required":["ResourceName","TagKeys"],"members":{"ResourceName":{},"TagKeys":{"type":"list","member":{}}}}},"ResetDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName"],"members":{"DBParameterGroupName":{},"ResetAllParameters":{"type":"boolean"},"Parameters":{"shape":"S2w"}}},"output":{"shape":"S4k","resultWrapper":"ResetDBParameterGroupResult"}},"RestoreDBInstanceFromDBSnapshot":{"input":{"type":"structure","required":["DBInstanceIdentifier","DBSnapshotIdentifier"],"members":{"DBInstanceIdentifier":{},"DBSnapshotIdentifier":{},"DBInstanceClass":{},"Port":{"type":"integer"},"AvailabilityZone":{},"DBSubnetGroupName":{},"MultiAZ":{"type":"boolean"},"PubliclyAccessible":{"type":"boolean"},"AutoMinorVersionUpgrade":{"type":"boolean"},"LicenseModel":{},"DBName":{},"Engine":{},"Iops":{"type":"integer"},"OptionGroupName":{},"Tags":{"shape":"S9"},"StorageType":{},"TdeCredentialArn":{},"TdeCredentialPassword":{}}},"output":{"resultWrapper":"RestoreDBInstanceFromDBSnapshotResult","type":"structure","members":{"DBInstance":{"shape":"S17"}}}},"RestoreDBInstanceToPointInTime":{"input":{"type":"structure","required":["SourceDBInstanceIdentifier","TargetDBInstanceIdentifier"],"members":{"SourceDBInstanceIdentifier":{},"TargetDBInstanceIdentifier":{},"RestoreTime":{"type":"timestamp"},"UseLatestRestorableTime":{"type":"boolean"},"DBInstanceClass":{},"Port":{"type":"integer"},"AvailabilityZone":{},"DBSubnetGroupName":{},"MultiAZ":{"type":"boolean"},"PubliclyAccessible":{"type":"boolean"},"AutoMinorVersionUpgrade":{"type":"boolean"},"LicenseModel":{},"DBName":{},"Engine":{},"Iops":{"type":"integer"},"OptionGroupName":{},"Tags":{"shape":"S9"},"StorageType":{},"TdeCredentialArn":{},"TdeCredentialPassword":{}}},"output":{"resultWrapper":"RestoreDBInstanceToPointInTimeResult","type":"structure","members":{"DBInstance":{"shape":"S17"}}}},"RevokeDBSecurityGroupIngress":{"input":{"type":"structure","required":["DBSecurityGroupName"],"members":{"DBSecurityGroupName":{},"CIDRIP":{},"EC2SecurityGroupName":{},"EC2SecurityGroupId":{},"EC2SecurityGroupOwnerId":{}}},"output":{"resultWrapper":"RevokeDBSecurityGroupIngressResult","type":"structure","members":{"DBSecurityGroup":{"shape":"Sd"}}}}},"shapes":{"S4":{"type":"structure","members":{"CustomerAwsId":{},"CustSubscriptionId":{},"SnsTopicArn":{},"Status":{},"SubscriptionCreationTime":{},"SourceType":{},"SourceIdsList":{"shape":"S5"},"EventCategoriesList":{"shape":"S6"},"Enabled":{"type":"boolean"}},"wrapper":true},"S5":{"type":"list","member":{"locationName":"SourceId"}},"S6":{"type":"list","member":{"locationName":"EventCategory"}},"S9":{"type":"list","member":{"locationName":"Tag","type":"structure","members":{"Key":{},"Value":{}}}},"Sd":{"type":"structure","members":{"OwnerId":{},"DBSecurityGroupName":{},"DBSecurityGroupDescription":{},"VpcId":{},"EC2SecurityGroups":{"type":"list","member":{"locationName":"EC2SecurityGroup","type":"structure","members":{"Status":{},"EC2SecurityGroupName":{},"EC2SecurityGroupId":{},"EC2SecurityGroupOwnerId":{}}}},"IPRanges":{"type":"list","member":{"locationName":"IPRange","type":"structure","members":{"Status":{},"CIDRIP":{}}}}},"wrapper":true},"Sk":{"type":"structure","members":{"DBParameterGroupName":{},"DBParameterGroupFamily":{},"Description":{}},"wrapper":true},"Sn":{"type":"structure","members":{"DBSnapshotIdentifier":{},"DBInstanceIdentifier":{},"SnapshotCreateTime":{"type":"timestamp"},"Engine":{},"AllocatedStorage":{"type":"integer"},"Status":{},"Port":{"type":"integer"},"AvailabilityZone":{},"VpcId":{},"InstanceCreateTime":{"type":"timestamp"},"MasterUsername":{},"EngineVersion":{},"LicenseModel":{},"SnapshotType":{},"Iops":{"type":"integer"},"OptionGroupName":{},"PercentProgress":{"type":"integer"},"SourceRegion":{},"StorageType":{},"TdeCredentialArn":{}},"wrapper":true},"St":{"type":"structure","members":{"OptionGroupName":{},"OptionGroupDescription":{},"EngineName":{},"MajorEngineVersion":{},"Options":{"type":"list","member":{"locationName":"Option","type":"structure","members":{"OptionName":{},"OptionDescription":{},"Persistent":{"type":"boolean"},"Permanent":{"type":"boolean"},"Port":{"type":"integer"},"OptionSettings":{"type":"list","member":{"shape":"Sx","locationName":"OptionSetting"}},"DBSecurityGroupMemberships":{"shape":"Sy"},"VpcSecurityGroupMemberships":{"shape":"S10"}}}},"AllowsVpcAndNonVpcInstanceMemberships":{"type":"boolean"},"VpcId":{}},"wrapper":true},"Sx":{"type":"structure","members":{"Name":{},"Value":{},"DefaultValue":{},"Description":{},"ApplyType":{},"DataType":{},"AllowedValues":{},"IsModifiable":{"type":"boolean"},"IsCollection":{"type":"boolean"}}},"Sy":{"type":"list","member":{"locationName":"DBSecurityGroup","type":"structure","members":{"DBSecurityGroupName":{},"Status":{}}}},"S10":{"type":"list","member":{"locationName":"VpcSecurityGroupMembership","type":"structure","members":{"VpcSecurityGroupId":{},"Status":{}}}},"S13":{"type":"list","member":{"locationName":"DBSecurityGroupName"}},"S14":{"type":"list","member":{"locationName":"VpcSecurityGroupId"}},"S17":{"type":"structure","members":{"DBInstanceIdentifier":{},"DBInstanceClass":{},"Engine":{},"DBInstanceStatus":{},"MasterUsername":{},"DBName":{},"Endpoint":{"type":"structure","members":{"Address":{},"Port":{"type":"integer"}}},"AllocatedStorage":{"type":"integer"},"InstanceCreateTime":{"type":"timestamp"},"PreferredBackupWindow":{},"BackupRetentionPeriod":{"type":"integer"},"DBSecurityGroups":{"shape":"Sy"},"VpcSecurityGroups":{"shape":"S10"},"DBParameterGroups":{"type":"list","member":{"locationName":"DBParameterGroup","type":"structure","members":{"DBParameterGroupName":{},"ParameterApplyStatus":{}}}},"AvailabilityZone":{},"DBSubnetGroup":{"shape":"S1b"},"PreferredMaintenanceWindow":{},"PendingModifiedValues":{"type":"structure","members":{"DBInstanceClass":{},"AllocatedStorage":{"type":"integer"},"MasterUserPassword":{},"Port":{"type":"integer"},"BackupRetentionPeriod":{"type":"integer"},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"Iops":{"type":"integer"},"DBInstanceIdentifier":{},"StorageType":{}}},"LatestRestorableTime":{"type":"timestamp"},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AutoMinorVersionUpgrade":{"type":"boolean"},"ReadReplicaSourceDBInstanceIdentifier":{},"ReadReplicaDBInstanceIdentifiers":{"type":"list","member":{"locationName":"ReadReplicaDBInstanceIdentifier"}},"LicenseModel":{},"Iops":{"type":"integer"},"OptionGroupMemberships":{"type":"list","member":{"locationName":"OptionGroupMembership","type":"structure","members":{"OptionGroupName":{},"Status":{}}}},"CharacterSetName":{},"SecondaryAvailabilityZone":{},"PubliclyAccessible":{"type":"boolean"},"StatusInfos":{"type":"list","member":{"locationName":"DBInstanceStatusInfo","type":"structure","members":{"StatusType":{},"Normal":{"type":"boolean"},"Status":{},"Message":{}}}},"StorageType":{},"TdeCredentialArn":{}},"wrapper":true},"S1b":{"type":"structure","members":{"DBSubnetGroupName":{},"DBSubnetGroupDescription":{},"VpcId":{},"SubnetGroupStatus":{},"Subnets":{"type":"list","member":{"locationName":"Subnet","type":"structure","members":{"SubnetIdentifier":{},"SubnetAvailabilityZone":{"shape":"S1e"},"SubnetStatus":{}}}}},"wrapper":true},"S1e":{"type":"structure","members":{"Name":{}},"wrapper":true},"S1u":{"type":"list","member":{"locationName":"SubnetIdentifier"}},"S2b":{"type":"list","member":{"locationName":"Filter","type":"structure","required":["Name","Values"],"members":{"Name":{},"Values":{"type":"list","member":{"locationName":"Value"}}}}},"S2h":{"type":"structure","members":{"CharacterSetName":{},"CharacterSetDescription":{}}},"S2w":{"type":"list","member":{"locationName":"Parameter","type":"structure","members":{"ParameterName":{},"ParameterValue":{},"Description":{},"Source":{},"ApplyType":{},"DataType":{},"AllowedValues":{},"IsModifiable":{"type":"boolean"},"MinimumEngineVersion":{},"ApplyMethod":{}}}},"S45":{"type":"structure","members":{"ReservedDBInstanceId":{},"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"StartTime":{"type":"timestamp"},"Duration":{"type":"integer"},"FixedPrice":{"type":"double"},"UsagePrice":{"type":"double"},"CurrencyCode":{},"DBInstanceCount":{"type":"integer"},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"State":{},"RecurringCharges":{"shape":"S47"}},"wrapper":true},"S47":{"type":"list","member":{"locationName":"RecurringCharge","type":"structure","members":{"RecurringChargeAmount":{"type":"double"},"RecurringChargeFrequency":{}},"wrapper":true}},"S4k":{"type":"structure","members":{"DBParameterGroupName":{}}}}}

/***/ }),
/* 335 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{}}

/***/ }),
/* 336 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2014-10-31","endpointPrefix":"rds","protocol":"query","serviceAbbreviation":"Amazon RDS","serviceFullName":"Amazon Relational Database Service","serviceId":"RDS","signatureVersion":"v4","uid":"rds-2014-10-31","xmlNamespace":"http://rds.amazonaws.com/doc/2014-10-31/"},"operations":{"AddRoleToDBCluster":{"input":{"type":"structure","required":["DBClusterIdentifier","RoleArn"],"members":{"DBClusterIdentifier":{},"RoleArn":{},"FeatureName":{}}}},"AddRoleToDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier","RoleArn","FeatureName"],"members":{"DBInstanceIdentifier":{},"RoleArn":{},"FeatureName":{}}}},"AddSourceIdentifierToSubscription":{"input":{"type":"structure","required":["SubscriptionName","SourceIdentifier"],"members":{"SubscriptionName":{},"SourceIdentifier":{}}},"output":{"resultWrapper":"AddSourceIdentifierToSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S6"}}}},"AddTagsToResource":{"input":{"type":"structure","required":["ResourceName","Tags"],"members":{"ResourceName":{},"Tags":{"shape":"Sb"}}}},"ApplyPendingMaintenanceAction":{"input":{"type":"structure","required":["ResourceIdentifier","ApplyAction","OptInType"],"members":{"ResourceIdentifier":{},"ApplyAction":{},"OptInType":{}}},"output":{"resultWrapper":"ApplyPendingMaintenanceActionResult","type":"structure","members":{"ResourcePendingMaintenanceActions":{"shape":"Sf"}}}},"AuthorizeDBSecurityGroupIngress":{"input":{"type":"structure","required":["DBSecurityGroupName"],"members":{"DBSecurityGroupName":{},"CIDRIP":{},"EC2SecurityGroupName":{},"EC2SecurityGroupId":{},"EC2SecurityGroupOwnerId":{}}},"output":{"resultWrapper":"AuthorizeDBSecurityGroupIngressResult","type":"structure","members":{"DBSecurityGroup":{"shape":"Sl"}}}},"BacktrackDBCluster":{"input":{"type":"structure","required":["DBClusterIdentifier","BacktrackTo"],"members":{"DBClusterIdentifier":{},"BacktrackTo":{"type":"timestamp"},"Force":{"type":"boolean"},"UseEarliestTimeOnPointInTimeUnavailable":{"type":"boolean"}}},"output":{"shape":"Ss","resultWrapper":"BacktrackDBClusterResult"}},"CancelExportTask":{"input":{"type":"structure","required":["ExportTaskIdentifier"],"members":{"ExportTaskIdentifier":{}}},"output":{"shape":"Su","resultWrapper":"CancelExportTaskResult"}},"CopyDBClusterParameterGroup":{"input":{"type":"structure","required":["SourceDBClusterParameterGroupIdentifier","TargetDBClusterParameterGroupIdentifier","TargetDBClusterParameterGroupDescription"],"members":{"SourceDBClusterParameterGroupIdentifier":{},"TargetDBClusterParameterGroupIdentifier":{},"TargetDBClusterParameterGroupDescription":{},"Tags":{"shape":"Sb"}}},"output":{"resultWrapper":"CopyDBClusterParameterGroupResult","type":"structure","members":{"DBClusterParameterGroup":{"shape":"Sz"}}}},"CopyDBClusterSnapshot":{"input":{"type":"structure","required":["SourceDBClusterSnapshotIdentifier","TargetDBClusterSnapshotIdentifier"],"members":{"SourceDBClusterSnapshotIdentifier":{},"TargetDBClusterSnapshotIdentifier":{},"KmsKeyId":{},"PreSignedUrl":{},"CopyTags":{"type":"boolean"},"Tags":{"shape":"Sb"},"SourceRegion":{}}},"output":{"resultWrapper":"CopyDBClusterSnapshotResult","type":"structure","members":{"DBClusterSnapshot":{"shape":"S12"}}}},"CopyDBParameterGroup":{"input":{"type":"structure","required":["SourceDBParameterGroupIdentifier","TargetDBParameterGroupIdentifier","TargetDBParameterGroupDescription"],"members":{"SourceDBParameterGroupIdentifier":{},"TargetDBParameterGroupIdentifier":{},"TargetDBParameterGroupDescription":{},"Tags":{"shape":"Sb"}}},"output":{"resultWrapper":"CopyDBParameterGroupResult","type":"structure","members":{"DBParameterGroup":{"shape":"S16"}}}},"CopyDBSnapshot":{"input":{"type":"structure","required":["SourceDBSnapshotIdentifier","TargetDBSnapshotIdentifier"],"members":{"SourceDBSnapshotIdentifier":{},"TargetDBSnapshotIdentifier":{},"KmsKeyId":{},"Tags":{"shape":"Sb"},"CopyTags":{"type":"boolean"},"PreSignedUrl":{},"OptionGroupName":{},"TargetCustomAvailabilityZone":{},"SourceRegion":{}}},"output":{"resultWrapper":"CopyDBSnapshotResult","type":"structure","members":{"DBSnapshot":{"shape":"S19"}}}},"CopyOptionGroup":{"input":{"type":"structure","required":["SourceOptionGroupIdentifier","TargetOptionGroupIdentifier","TargetOptionGroupDescription"],"members":{"SourceOptionGroupIdentifier":{},"TargetOptionGroupIdentifier":{},"TargetOptionGroupDescription":{},"Tags":{"shape":"Sb"}}},"output":{"resultWrapper":"CopyOptionGroupResult","type":"structure","members":{"OptionGroup":{"shape":"S1f"}}}},"CreateCustomAvailabilityZone":{"input":{"type":"structure","required":["CustomAvailabilityZoneName"],"members":{"CustomAvailabilityZoneName":{},"ExistingVpnId":{},"NewVpnTunnelName":{},"VpnTunnelOriginatorIP":{}}},"output":{"resultWrapper":"CreateCustomAvailabilityZoneResult","type":"structure","members":{"CustomAvailabilityZone":{"shape":"S1q"}}}},"CreateDBCluster":{"input":{"type":"structure","required":["DBClusterIdentifier","Engine"],"members":{"AvailabilityZones":{"shape":"S13"},"BackupRetentionPeriod":{"type":"integer"},"CharacterSetName":{},"DatabaseName":{},"DBClusterIdentifier":{},"DBClusterParameterGroupName":{},"VpcSecurityGroupIds":{"shape":"S1u"},"DBSubnetGroupName":{},"Engine":{},"EngineVersion":{},"Port":{"type":"integer"},"MasterUsername":{},"MasterUserPassword":{},"OptionGroupName":{},"PreferredBackupWindow":{},"PreferredMaintenanceWindow":{},"ReplicationSourceIdentifier":{},"Tags":{"shape":"Sb"},"StorageEncrypted":{"type":"boolean"},"KmsKeyId":{},"PreSignedUrl":{},"EnableIAMDatabaseAuthentication":{"type":"boolean"},"BacktrackWindow":{"type":"long"},"EnableCloudwatchLogsExports":{"shape":"S1w"},"EngineMode":{},"ScalingConfiguration":{"shape":"S1x"},"DeletionProtection":{"type":"boolean"},"GlobalClusterIdentifier":{},"EnableHttpEndpoint":{"type":"boolean"},"CopyTagsToSnapshot":{"type":"boolean"},"Domain":{},"DomainIAMRoleName":{},"EnableGlobalWriteForwarding":{"type":"boolean"},"SourceRegion":{}}},"output":{"resultWrapper":"CreateDBClusterResult","type":"structure","members":{"DBCluster":{"shape":"S1z"}}}},"CreateDBClusterEndpoint":{"input":{"type":"structure","required":["DBClusterIdentifier","DBClusterEndpointIdentifier","EndpointType"],"members":{"DBClusterIdentifier":{},"DBClusterEndpointIdentifier":{},"EndpointType":{},"StaticMembers":{"shape":"Sv"},"ExcludedMembers":{"shape":"Sv"},"Tags":{"shape":"Sb"}}},"output":{"shape":"S2g","resultWrapper":"CreateDBClusterEndpointResult"}},"CreateDBClusterParameterGroup":{"input":{"type":"structure","required":["DBClusterParameterGroupName","DBParameterGroupFamily","Description"],"members":{"DBClusterParameterGroupName":{},"DBParameterGroupFamily":{},"Description":{},"Tags":{"shape":"Sb"}}},"output":{"resultWrapper":"CreateDBClusterParameterGroupResult","type":"structure","members":{"DBClusterParameterGroup":{"shape":"Sz"}}}},"CreateDBClusterSnapshot":{"input":{"type":"structure","required":["DBClusterSnapshotIdentifier","DBClusterIdentifier"],"members":{"DBClusterSnapshotIdentifier":{},"DBClusterIdentifier":{},"Tags":{"shape":"Sb"}}},"output":{"resultWrapper":"CreateDBClusterSnapshotResult","type":"structure","members":{"DBClusterSnapshot":{"shape":"S12"}}}},"CreateDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier","DBInstanceClass","Engine"],"members":{"DBName":{},"DBInstanceIdentifier":{},"AllocatedStorage":{"type":"integer"},"DBInstanceClass":{},"Engine":{},"MasterUsername":{},"MasterUserPassword":{},"DBSecurityGroups":{"shape":"S2m"},"VpcSecurityGroupIds":{"shape":"S1u"},"AvailabilityZone":{},"DBSubnetGroupName":{},"PreferredMaintenanceWindow":{},"DBParameterGroupName":{},"BackupRetentionPeriod":{"type":"integer"},"PreferredBackupWindow":{},"Port":{"type":"integer"},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AutoMinorVersionUpgrade":{"type":"boolean"},"LicenseModel":{},"Iops":{"type":"integer"},"OptionGroupName":{},"CharacterSetName":{},"NcharCharacterSetName":{},"PubliclyAccessible":{"type":"boolean"},"Tags":{"shape":"Sb"},"DBClusterIdentifier":{},"StorageType":{},"TdeCredentialArn":{},"TdeCredentialPassword":{},"StorageEncrypted":{"type":"boolean"},"KmsKeyId":{},"Domain":{},"CopyTagsToSnapshot":{"type":"boolean"},"MonitoringInterval":{"type":"integer"},"MonitoringRoleArn":{},"DomainIAMRoleName":{},"PromotionTier":{"type":"integer"},"Timezone":{},"EnableIAMDatabaseAuthentication":{"type":"boolean"},"EnablePerformanceInsights":{"type":"boolean"},"PerformanceInsightsKMSKeyId":{},"PerformanceInsightsRetentionPeriod":{"type":"integer"},"EnableCloudwatchLogsExports":{"shape":"S1w"},"ProcessorFeatures":{"shape":"S1b"},"DeletionProtection":{"type":"boolean"},"MaxAllocatedStorage":{"type":"integer"},"EnableCustomerOwnedIp":{"type":"boolean"}}},"output":{"resultWrapper":"CreateDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"S2o"}}}},"CreateDBInstanceReadReplica":{"input":{"type":"structure","required":["DBInstanceIdentifier","SourceDBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"SourceDBInstanceIdentifier":{},"DBInstanceClass":{},"AvailabilityZone":{},"Port":{"type":"integer"},"MultiAZ":{"type":"boolean"},"AutoMinorVersionUpgrade":{"type":"boolean"},"Iops":{"type":"integer"},"OptionGroupName":{},"DBParameterGroupName":{},"PubliclyAccessible":{"type":"boolean"},"Tags":{"shape":"Sb"},"DBSubnetGroupName":{},"VpcSecurityGroupIds":{"shape":"S1u"},"StorageType":{},"CopyTagsToSnapshot":{"type":"boolean"},"MonitoringInterval":{"type":"integer"},"MonitoringRoleArn":{},"KmsKeyId":{},"PreSignedUrl":{},"EnableIAMDatabaseAuthentication":{"type":"boolean"},"EnablePerformanceInsights":{"type":"boolean"},"PerformanceInsightsKMSKeyId":{},"PerformanceInsightsRetentionPeriod":{"type":"integer"},"EnableCloudwatchLogsExports":{"shape":"S1w"},"ProcessorFeatures":{"shape":"S1b"},"UseDefaultProcessorFeatures":{"type":"boolean"},"DeletionProtection":{"type":"boolean"},"Domain":{},"DomainIAMRoleName":{},"ReplicaMode":{},"MaxAllocatedStorage":{"type":"integer"},"SourceRegion":{}}},"output":{"resultWrapper":"CreateDBInstanceReadReplicaResult","type":"structure","members":{"DBInstance":{"shape":"S2o"}}}},"CreateDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName","DBParameterGroupFamily","Description"],"members":{"DBParameterGroupName":{},"DBParameterGroupFamily":{},"Description":{},"Tags":{"shape":"Sb"}}},"output":{"resultWrapper":"CreateDBParameterGroupResult","type":"structure","members":{"DBParameterGroup":{"shape":"S16"}}}},"CreateDBProxy":{"input":{"type":"structure","required":["DBProxyName","EngineFamily","Auth","RoleArn","VpcSubnetIds"],"members":{"DBProxyName":{},"EngineFamily":{},"Auth":{"shape":"S3f"},"RoleArn":{},"VpcSubnetIds":{"shape":"Sv"},"VpcSecurityGroupIds":{"shape":"Sv"},"RequireTLS":{"type":"boolean"},"IdleClientTimeout":{"type":"integer"},"DebugLogging":{"type":"boolean"},"Tags":{"shape":"Sb"}}},"output":{"resultWrapper":"CreateDBProxyResult","type":"structure","members":{"DBProxy":{"shape":"S3k"}}}},"CreateDBProxyEndpoint":{"input":{"type":"structure","required":["DBProxyName","DBProxyEndpointName","VpcSubnetIds"],"members":{"DBProxyName":{},"DBProxyEndpointName":{},"VpcSubnetIds":{"shape":"Sv"},"VpcSecurityGroupIds":{"shape":"Sv"},"TargetRole":{},"Tags":{"shape":"Sb"}}},"output":{"resultWrapper":"CreateDBProxyEndpointResult","type":"structure","members":{"DBProxyEndpoint":{"shape":"S3t"}}}},"CreateDBSecurityGroup":{"input":{"type":"structure","required":["DBSecurityGroupName","DBSecurityGroupDescription"],"members":{"DBSecurityGroupName":{},"DBSecurityGroupDescription":{},"Tags":{"shape":"Sb"}}},"output":{"resultWrapper":"CreateDBSecurityGroupResult","type":"structure","members":{"DBSecurityGroup":{"shape":"Sl"}}}},"CreateDBSnapshot":{"input":{"type":"structure","required":["DBSnapshotIdentifier","DBInstanceIdentifier"],"members":{"DBSnapshotIdentifier":{},"DBInstanceIdentifier":{},"Tags":{"shape":"Sb"}}},"output":{"resultWrapper":"CreateDBSnapshotResult","type":"structure","members":{"DBSnapshot":{"shape":"S19"}}}},"CreateDBSubnetGroup":{"input":{"type":"structure","required":["DBSubnetGroupName","DBSubnetGroupDescription","SubnetIds"],"members":{"DBSubnetGroupName":{},"DBSubnetGroupDescription":{},"SubnetIds":{"shape":"S40"},"Tags":{"shape":"Sb"}}},"output":{"resultWrapper":"CreateDBSubnetGroupResult","type":"structure","members":{"DBSubnetGroup":{"shape":"S2s"}}}},"CreateEventSubscription":{"input":{"type":"structure","required":["SubscriptionName","SnsTopicArn"],"members":{"SubscriptionName":{},"SnsTopicArn":{},"SourceType":{},"EventCategories":{"shape":"S8"},"SourceIds":{"shape":"S7"},"Enabled":{"type":"boolean"},"Tags":{"shape":"Sb"}}},"output":{"resultWrapper":"CreateEventSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S6"}}}},"CreateGlobalCluster":{"input":{"type":"structure","members":{"GlobalClusterIdentifier":{},"SourceDBClusterIdentifier":{},"Engine":{},"EngineVersion":{},"DeletionProtection":{"type":"boolean"},"DatabaseName":{},"StorageEncrypted":{"type":"boolean"}}},"output":{"resultWrapper":"CreateGlobalClusterResult","type":"structure","members":{"GlobalCluster":{"shape":"S46"}}}},"CreateOptionGroup":{"input":{"type":"structure","required":["OptionGroupName","EngineName","MajorEngineVersion","OptionGroupDescription"],"members":{"OptionGroupName":{},"EngineName":{},"MajorEngineVersion":{},"OptionGroupDescription":{},"Tags":{"shape":"Sb"}}},"output":{"resultWrapper":"CreateOptionGroupResult","type":"structure","members":{"OptionGroup":{"shape":"S1f"}}}},"DeleteCustomAvailabilityZone":{"input":{"type":"structure","required":["CustomAvailabilityZoneId"],"members":{"CustomAvailabilityZoneId":{}}},"output":{"resultWrapper":"DeleteCustomAvailabilityZoneResult","type":"structure","members":{"CustomAvailabilityZone":{"shape":"S1q"}}}},"DeleteDBCluster":{"input":{"type":"structure","required":["DBClusterIdentifier"],"members":{"DBClusterIdentifier":{},"SkipFinalSnapshot":{"type":"boolean"},"FinalDBSnapshotIdentifier":{}}},"output":{"resultWrapper":"DeleteDBClusterResult","type":"structure","members":{"DBCluster":{"shape":"S1z"}}}},"DeleteDBClusterEndpoint":{"input":{"type":"structure","required":["DBClusterEndpointIdentifier"],"members":{"DBClusterEndpointIdentifier":{}}},"output":{"shape":"S2g","resultWrapper":"DeleteDBClusterEndpointResult"}},"DeleteDBClusterParameterGroup":{"input":{"type":"structure","required":["DBClusterParameterGroupName"],"members":{"DBClusterParameterGroupName":{}}}},"DeleteDBClusterSnapshot":{"input":{"type":"structure","required":["DBClusterSnapshotIdentifier"],"members":{"DBClusterSnapshotIdentifier":{}}},"output":{"resultWrapper":"DeleteDBClusterSnapshotResult","type":"structure","members":{"DBClusterSnapshot":{"shape":"S12"}}}},"DeleteDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"SkipFinalSnapshot":{"type":"boolean"},"FinalDBSnapshotIdentifier":{},"DeleteAutomatedBackups":{"type":"boolean"}}},"output":{"resultWrapper":"DeleteDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"S2o"}}}},"DeleteDBInstanceAutomatedBackup":{"input":{"type":"structure","members":{"DbiResourceId":{},"DBInstanceAutomatedBackupsArn":{}}},"output":{"resultWrapper":"DeleteDBInstanceAutomatedBackupResult","type":"structure","members":{"DBInstanceAutomatedBackup":{"shape":"S4q"}}}},"DeleteDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName"],"members":{"DBParameterGroupName":{}}}},"DeleteDBProxy":{"input":{"type":"structure","required":["DBProxyName"],"members":{"DBProxyName":{}}},"output":{"resultWrapper":"DeleteDBProxyResult","type":"structure","members":{"DBProxy":{"shape":"S3k"}}}},"DeleteDBProxyEndpoint":{"input":{"type":"structure","required":["DBProxyEndpointName"],"members":{"DBProxyEndpointName":{}}},"output":{"resultWrapper":"DeleteDBProxyEndpointResult","type":"structure","members":{"DBProxyEndpoint":{"shape":"S3t"}}}},"DeleteDBSecurityGroup":{"input":{"type":"structure","required":["DBSecurityGroupName"],"members":{"DBSecurityGroupName":{}}}},"DeleteDBSnapshot":{"input":{"type":"structure","required":["DBSnapshotIdentifier"],"members":{"DBSnapshotIdentifier":{}}},"output":{"resultWrapper":"DeleteDBSnapshotResult","type":"structure","members":{"DBSnapshot":{"shape":"S19"}}}},"DeleteDBSubnetGroup":{"input":{"type":"structure","required":["DBSubnetGroupName"],"members":{"DBSubnetGroupName":{}}}},"DeleteEventSubscription":{"input":{"type":"structure","required":["SubscriptionName"],"members":{"SubscriptionName":{}}},"output":{"resultWrapper":"DeleteEventSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S6"}}}},"DeleteGlobalCluster":{"input":{"type":"structure","required":["GlobalClusterIdentifier"],"members":{"GlobalClusterIdentifier":{}}},"output":{"resultWrapper":"DeleteGlobalClusterResult","type":"structure","members":{"GlobalCluster":{"shape":"S46"}}}},"DeleteInstallationMedia":{"input":{"type":"structure","required":["InstallationMediaId"],"members":{"InstallationMediaId":{}}},"output":{"shape":"S56","resultWrapper":"DeleteInstallationMediaResult"}},"DeleteOptionGroup":{"input":{"type":"structure","required":["OptionGroupName"],"members":{"OptionGroupName":{}}}},"DeregisterDBProxyTargets":{"input":{"type":"structure","required":["DBProxyName"],"members":{"DBProxyName":{},"TargetGroupName":{},"DBInstanceIdentifiers":{"shape":"Sv"},"DBClusterIdentifiers":{"shape":"Sv"}}},"output":{"resultWrapper":"DeregisterDBProxyTargetsResult","type":"structure","members":{}}},"DescribeAccountAttributes":{"input":{"type":"structure","members":{}},"output":{"resultWrapper":"DescribeAccountAttributesResult","type":"structure","members":{"AccountQuotas":{"type":"list","member":{"locationName":"AccountQuota","type":"structure","members":{"AccountQuotaName":{},"Used":{"type":"long"},"Max":{"type":"long"}},"wrapper":true}}}}},"DescribeCertificates":{"input":{"type":"structure","members":{"CertificateIdentifier":{},"Filters":{"shape":"S5h"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeCertificatesResult","type":"structure","members":{"Certificates":{"type":"list","member":{"shape":"S5m","locationName":"Certificate"}},"Marker":{}}}},"DescribeCustomAvailabilityZones":{"input":{"type":"structure","members":{"CustomAvailabilityZoneId":{},"Filters":{"shape":"S5h"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeCustomAvailabilityZonesResult","type":"structure","members":{"Marker":{},"CustomAvailabilityZones":{"type":"list","member":{"shape":"S1q","locationName":"CustomAvailabilityZone"}}}}},"DescribeDBClusterBacktracks":{"input":{"type":"structure","required":["DBClusterIdentifier"],"members":{"DBClusterIdentifier":{},"BacktrackIdentifier":{},"Filters":{"shape":"S5h"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBClusterBacktracksResult","type":"structure","members":{"Marker":{},"DBClusterBacktracks":{"type":"list","member":{"shape":"Ss","locationName":"DBClusterBacktrack"}}}}},"DescribeDBClusterEndpoints":{"input":{"type":"structure","members":{"DBClusterIdentifier":{},"DBClusterEndpointIdentifier":{},"Filters":{"shape":"S5h"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBClusterEndpointsResult","type":"structure","members":{"Marker":{},"DBClusterEndpoints":{"type":"list","member":{"shape":"S2g","locationName":"DBClusterEndpointList"}}}}},"DescribeDBClusterParameterGroups":{"input":{"type":"structure","members":{"DBClusterParameterGroupName":{},"Filters":{"shape":"S5h"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBClusterParameterGroupsResult","type":"structure","members":{"Marker":{},"DBClusterParameterGroups":{"type":"list","member":{"shape":"Sz","locationName":"DBClusterParameterGroup"}}}}},"DescribeDBClusterParameters":{"input":{"type":"structure","required":["DBClusterParameterGroupName"],"members":{"DBClusterParameterGroupName":{},"Source":{},"Filters":{"shape":"S5h"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBClusterParametersResult","type":"structure","members":{"Parameters":{"shape":"S61"},"Marker":{}}}},"DescribeDBClusterSnapshotAttributes":{"input":{"type":"structure","required":["DBClusterSnapshotIdentifier"],"members":{"DBClusterSnapshotIdentifier":{}}},"output":{"resultWrapper":"DescribeDBClusterSnapshotAttributesResult","type":"structure","members":{"DBClusterSnapshotAttributesResult":{"shape":"S67"}}}},"DescribeDBClusterSnapshots":{"input":{"type":"structure","members":{"DBClusterIdentifier":{},"DBClusterSnapshotIdentifier":{},"SnapshotType":{},"Filters":{"shape":"S5h"},"MaxRecords":{"type":"integer"},"Marker":{},"IncludeShared":{"type":"boolean"},"IncludePublic":{"type":"boolean"}}},"output":{"resultWrapper":"DescribeDBClusterSnapshotsResult","type":"structure","members":{"Marker":{},"DBClusterSnapshots":{"type":"list","member":{"shape":"S12","locationName":"DBClusterSnapshot"}}}}},"DescribeDBClusters":{"input":{"type":"structure","members":{"DBClusterIdentifier":{},"Filters":{"shape":"S5h"},"MaxRecords":{"type":"integer"},"Marker":{},"IncludeShared":{"type":"boolean"}}},"output":{"resultWrapper":"DescribeDBClustersResult","type":"structure","members":{"Marker":{},"DBClusters":{"type":"list","member":{"shape":"S1z","locationName":"DBCluster"}}}}},"DescribeDBEngineVersions":{"input":{"type":"structure","members":{"Engine":{},"EngineVersion":{},"DBParameterGroupFamily":{},"Filters":{"shape":"S5h"},"MaxRecords":{"type":"integer"},"Marker":{},"DefaultOnly":{"type":"boolean"},"ListSupportedCharacterSets":{"type":"boolean"},"ListSupportedTimezones":{"type":"boolean"},"IncludeAll":{"type":"boolean"}}},"output":{"resultWrapper":"DescribeDBEngineVersionsResult","type":"structure","members":{"Marker":{},"DBEngineVersions":{"type":"list","member":{"locationName":"DBEngineVersion","type":"structure","members":{"Engine":{},"EngineVersion":{},"DBParameterGroupFamily":{},"DBEngineDescription":{},"DBEngineVersionDescription":{},"DefaultCharacterSet":{"shape":"S6l"},"SupportedCharacterSets":{"shape":"S6m"},"SupportedNcharCharacterSets":{"shape":"S6m"},"ValidUpgradeTarget":{"type":"list","member":{"locationName":"UpgradeTarget","type":"structure","members":{"Engine":{},"EngineVersion":{},"Description":{},"AutoUpgrade":{"type":"boolean"},"IsMajorVersionUpgrade":{"type":"boolean"},"SupportedEngineModes":{"shape":"S64"},"SupportsParallelQuery":{"type":"boolean"},"SupportsGlobalDatabases":{"type":"boolean"}}}},"SupportedTimezones":{"type":"list","member":{"locationName":"Timezone","type":"structure","members":{"TimezoneName":{}}}},"ExportableLogTypes":{"shape":"S1w"},"SupportsLogExportsToCloudwatchLogs":{"type":"boolean"},"SupportsReadReplica":{"type":"boolean"},"SupportedEngineModes":{"shape":"S64"},"SupportedFeatureNames":{"type":"list","member":{}},"Status":{},"SupportsParallelQuery":{"type":"boolean"},"SupportsGlobalDatabases":{"type":"boolean"}}}}}}},"DescribeDBInstanceAutomatedBackups":{"input":{"type":"structure","members":{"DbiResourceId":{},"DBInstanceIdentifier":{},"Filters":{"shape":"S5h"},"MaxRecords":{"type":"integer"},"Marker":{},"DBInstanceAutomatedBackupsArn":{}}},"output":{"resultWrapper":"DescribeDBInstanceAutomatedBackupsResult","type":"structure","members":{"Marker":{},"DBInstanceAutomatedBackups":{"type":"list","member":{"shape":"S4q","locationName":"DBInstanceAutomatedBackup"}}}}},"DescribeDBInstances":{"input":{"type":"structure","members":{"DBInstanceIdentifier":{},"Filters":{"shape":"S5h"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBInstancesResult","type":"structure","members":{"Marker":{},"DBInstances":{"type":"list","member":{"shape":"S2o","locationName":"DBInstance"}}}}},"DescribeDBLogFiles":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"FilenameContains":{},"FileLastWritten":{"type":"long"},"FileSize":{"type":"long"},"Filters":{"shape":"S5h"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBLogFilesResult","type":"structure","members":{"DescribeDBLogFiles":{"type":"list","member":{"locationName":"DescribeDBLogFilesDetails","type":"structure","members":{"LogFileName":{},"LastWritten":{"type":"long"},"Size":{"type":"long"}}}},"Marker":{}}}},"DescribeDBParameterGroups":{"input":{"type":"structure","members":{"DBParameterGroupName":{},"Filters":{"shape":"S5h"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBParameterGroupsResult","type":"structure","members":{"Marker":{},"DBParameterGroups":{"type":"list","member":{"shape":"S16","locationName":"DBParameterGroup"}}}}},"DescribeDBParameters":{"input":{"type":"structure","required":["DBParameterGroupName"],"members":{"DBParameterGroupName":{},"Source":{},"Filters":{"shape":"S5h"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBParametersResult","type":"structure","members":{"Parameters":{"shape":"S61"},"Marker":{}}}},"DescribeDBProxies":{"input":{"type":"structure","members":{"DBProxyName":{},"Filters":{"shape":"S5h"},"Marker":{},"MaxRecords":{"type":"integer"}}},"output":{"resultWrapper":"DescribeDBProxiesResult","type":"structure","members":{"DBProxies":{"type":"list","member":{"shape":"S3k"}},"Marker":{}}}},"DescribeDBProxyEndpoints":{"input":{"type":"structure","members":{"DBProxyName":{},"DBProxyEndpointName":{},"Filters":{"shape":"S5h"},"Marker":{},"MaxRecords":{"type":"integer"}}},"output":{"resultWrapper":"DescribeDBProxyEndpointsResult","type":"structure","members":{"DBProxyEndpoints":{"type":"list","member":{"shape":"S3t"}},"Marker":{}}}},"DescribeDBProxyTargetGroups":{"input":{"type":"structure","required":["DBProxyName"],"members":{"DBProxyName":{},"TargetGroupName":{},"Filters":{"shape":"S5h"},"Marker":{},"MaxRecords":{"type":"integer"}}},"output":{"resultWrapper":"DescribeDBProxyTargetGroupsResult","type":"structure","members":{"TargetGroups":{"type":"list","member":{"shape":"S7h"}},"Marker":{}}}},"DescribeDBProxyTargets":{"input":{"type":"structure","required":["DBProxyName"],"members":{"DBProxyName":{},"TargetGroupName":{},"Filters":{"shape":"S5h"},"Marker":{},"MaxRecords":{"type":"integer"}}},"output":{"resultWrapper":"DescribeDBProxyTargetsResult","type":"structure","members":{"Targets":{"shape":"S7l"},"Marker":{}}}},"DescribeDBSecurityGroups":{"input":{"type":"structure","members":{"DBSecurityGroupName":{},"Filters":{"shape":"S5h"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBSecurityGroupsResult","type":"structure","members":{"Marker":{},"DBSecurityGroups":{"type":"list","member":{"shape":"Sl","locationName":"DBSecurityGroup"}}}}},"DescribeDBSnapshotAttributes":{"input":{"type":"structure","required":["DBSnapshotIdentifier"],"members":{"DBSnapshotIdentifier":{}}},"output":{"resultWrapper":"DescribeDBSnapshotAttributesResult","type":"structure","members":{"DBSnapshotAttributesResult":{"shape":"S7x"}}}},"DescribeDBSnapshots":{"input":{"type":"structure","members":{"DBInstanceIdentifier":{},"DBSnapshotIdentifier":{},"SnapshotType":{},"Filters":{"shape":"S5h"},"MaxRecords":{"type":"integer"},"Marker":{},"IncludeShared":{"type":"boolean"},"IncludePublic":{"type":"boolean"},"DbiResourceId":{}}},"output":{"resultWrapper":"DescribeDBSnapshotsResult","type":"structure","members":{"Marker":{},"DBSnapshots":{"type":"list","member":{"shape":"S19","locationName":"DBSnapshot"}}}}},"DescribeDBSubnetGroups":{"input":{"type":"structure","members":{"DBSubnetGroupName":{},"Filters":{"shape":"S5h"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBSubnetGroupsResult","type":"structure","members":{"Marker":{},"DBSubnetGroups":{"type":"list","member":{"shape":"S2s","locationName":"DBSubnetGroup"}}}}},"DescribeEngineDefaultClusterParameters":{"input":{"type":"structure","required":["DBParameterGroupFamily"],"members":{"DBParameterGroupFamily":{},"Filters":{"shape":"S5h"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEngineDefaultClusterParametersResult","type":"structure","members":{"EngineDefaults":{"shape":"S88"}}}},"DescribeEngineDefaultParameters":{"input":{"type":"structure","required":["DBParameterGroupFamily"],"members":{"DBParameterGroupFamily":{},"Filters":{"shape":"S5h"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEngineDefaultParametersResult","type":"structure","members":{"EngineDefaults":{"shape":"S88"}}}},"DescribeEventCategories":{"input":{"type":"structure","members":{"SourceType":{},"Filters":{"shape":"S5h"}}},"output":{"resultWrapper":"DescribeEventCategoriesResult","type":"structure","members":{"EventCategoriesMapList":{"type":"list","member":{"locationName":"EventCategoriesMap","type":"structure","members":{"SourceType":{},"EventCategories":{"shape":"S8"}},"wrapper":true}}}}},"DescribeEventSubscriptions":{"input":{"type":"structure","members":{"SubscriptionName":{},"Filters":{"shape":"S5h"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEventSubscriptionsResult","type":"structure","members":{"Marker":{},"EventSubscriptionsList":{"type":"list","member":{"shape":"S6","locationName":"EventSubscription"}}}}},"DescribeEvents":{"input":{"type":"structure","members":{"SourceIdentifier":{},"SourceType":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Duration":{"type":"integer"},"EventCategories":{"shape":"S8"},"Filters":{"shape":"S5h"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEventsResult","type":"structure","members":{"Marker":{},"Events":{"type":"list","member":{"locationName":"Event","type":"structure","members":{"SourceIdentifier":{},"SourceType":{},"Message":{},"EventCategories":{"shape":"S8"},"Date":{"type":"timestamp"},"SourceArn":{}}}}}}},"DescribeExportTasks":{"input":{"type":"structure","members":{"ExportTaskIdentifier":{},"SourceArn":{},"Filters":{"shape":"S5h"},"Marker":{},"MaxRecords":{"type":"integer"}}},"output":{"resultWrapper":"DescribeExportTasksResult","type":"structure","members":{"Marker":{},"ExportTasks":{"type":"list","member":{"shape":"Su","locationName":"ExportTask"}}}}},"DescribeGlobalClusters":{"input":{"type":"structure","members":{"GlobalClusterIdentifier":{},"Filters":{"shape":"S5h"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeGlobalClustersResult","type":"structure","members":{"Marker":{},"GlobalClusters":{"type":"list","member":{"shape":"S46","locationName":"GlobalClusterMember"}}}}},"DescribeInstallationMedia":{"input":{"type":"structure","members":{"InstallationMediaId":{},"Filters":{"shape":"S5h"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeInstallationMediaResult","type":"structure","members":{"Marker":{},"InstallationMedia":{"type":"list","member":{"shape":"S56","locationName":"InstallationMedia"}}}}},"DescribeOptionGroupOptions":{"input":{"type":"structure","required":["EngineName"],"members":{"EngineName":{},"MajorEngineVersion":{},"Filters":{"shape":"S5h"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeOptionGroupOptionsResult","type":"structure","members":{"OptionGroupOptions":{"type":"list","member":{"locationName":"OptionGroupOption","type":"structure","members":{"Name":{},"Description":{},"EngineName":{},"MajorEngineVersion":{},"MinimumRequiredMinorEngineVersion":{},"PortRequired":{"type":"boolean"},"DefaultPort":{"type":"integer"},"OptionsDependedOn":{"type":"list","member":{"locationName":"OptionName"}},"OptionsConflictsWith":{"type":"list","member":{"locationName":"OptionConflictName"}},"Persistent":{"type":"boolean"},"Permanent":{"type":"boolean"},"RequiresAutoMinorEngineVersionUpgrade":{"type":"boolean"},"VpcOnly":{"type":"boolean"},"SupportsOptionVersionDowngrade":{"type":"boolean"},"OptionGroupOptionSettings":{"type":"list","member":{"locationName":"OptionGroupOptionSetting","type":"structure","members":{"SettingName":{},"SettingDescription":{},"DefaultValue":{},"ApplyType":{},"AllowedValues":{},"IsModifiable":{"type":"boolean"},"IsRequired":{"type":"boolean"},"MinimumEngineVersionPerAllowedValue":{"type":"list","member":{"locationName":"MinimumEngineVersionPerAllowedValue","type":"structure","members":{"AllowedValue":{},"MinimumEngineVersion":{}}}}}}},"OptionGroupOptionVersions":{"type":"list","member":{"locationName":"OptionVersion","type":"structure","members":{"Version":{},"IsDefault":{"type":"boolean"}}}}}}},"Marker":{}}}},"DescribeOptionGroups":{"input":{"type":"structure","members":{"OptionGroupName":{},"Filters":{"shape":"S5h"},"Marker":{},"MaxRecords":{"type":"integer"},"EngineName":{},"MajorEngineVersion":{}}},"output":{"resultWrapper":"DescribeOptionGroupsResult","type":"structure","members":{"OptionGroupsList":{"type":"list","member":{"shape":"S1f","locationName":"OptionGroup"}},"Marker":{}}}},"DescribeOrderableDBInstanceOptions":{"input":{"type":"structure","required":["Engine"],"members":{"Engine":{},"EngineVersion":{},"DBInstanceClass":{},"LicenseModel":{},"AvailabilityZoneGroup":{},"Vpc":{"type":"boolean"},"Filters":{"shape":"S5h"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeOrderableDBInstanceOptionsResult","type":"structure","members":{"OrderableDBInstanceOptions":{"type":"list","member":{"locationName":"OrderableDBInstanceOption","type":"structure","members":{"Engine":{},"EngineVersion":{},"DBInstanceClass":{},"LicenseModel":{},"AvailabilityZoneGroup":{},"AvailabilityZones":{"type":"list","member":{"shape":"S2v","locationName":"AvailabilityZone"}},"MultiAZCapable":{"type":"boolean"},"ReadReplicaCapable":{"type":"boolean"},"Vpc":{"type":"boolean"},"SupportsStorageEncryption":{"type":"boolean"},"StorageType":{},"SupportsIops":{"type":"boolean"},"SupportsEnhancedMonitoring":{"type":"boolean"},"SupportsIAMDatabaseAuthentication":{"type":"boolean"},"SupportsPerformanceInsights":{"type":"boolean"},"MinStorageSize":{"type":"integer"},"MaxStorageSize":{"type":"integer"},"MinIopsPerDbInstance":{"type":"integer"},"MaxIopsPerDbInstance":{"type":"integer"},"MinIopsPerGib":{"type":"double"},"MaxIopsPerGib":{"type":"double"},"AvailableProcessorFeatures":{"shape":"S9h"},"SupportedEngineModes":{"shape":"S64"},"SupportsStorageAutoscaling":{"type":"boolean"},"SupportsKerberosAuthentication":{"type":"boolean"},"OutpostCapable":{"type":"boolean"},"SupportedActivityStreamModes":{"type":"list","member":{}},"SupportsGlobalDatabases":{"type":"boolean"}},"wrapper":true}},"Marker":{}}}},"DescribePendingMaintenanceActions":{"input":{"type":"structure","members":{"ResourceIdentifier":{},"Filters":{"shape":"S5h"},"Marker":{},"MaxRecords":{"type":"integer"}}},"output":{"resultWrapper":"DescribePendingMaintenanceActionsResult","type":"structure","members":{"PendingMaintenanceActions":{"type":"list","member":{"shape":"Sf","locationName":"ResourcePendingMaintenanceActions"}},"Marker":{}}}},"DescribeReservedDBInstances":{"input":{"type":"structure","members":{"ReservedDBInstanceId":{},"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"Duration":{},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"LeaseId":{},"Filters":{"shape":"S5h"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeReservedDBInstancesResult","type":"structure","members":{"Marker":{},"ReservedDBInstances":{"type":"list","member":{"shape":"S9q","locationName":"ReservedDBInstance"}}}}},"DescribeReservedDBInstancesOfferings":{"input":{"type":"structure","members":{"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"Duration":{},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"Filters":{"shape":"S5h"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeReservedDBInstancesOfferingsResult","type":"structure","members":{"Marker":{},"ReservedDBInstancesOfferings":{"type":"list","member":{"locationName":"ReservedDBInstancesOffering","type":"structure","members":{"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"Duration":{"type":"integer"},"FixedPrice":{"type":"double"},"UsagePrice":{"type":"double"},"CurrencyCode":{},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"RecurringCharges":{"shape":"S9s"}},"wrapper":true}}}}},"DescribeSourceRegions":{"input":{"type":"structure","members":{"RegionName":{},"MaxRecords":{"type":"integer"},"Marker":{},"Filters":{"shape":"S5h"}}},"output":{"resultWrapper":"DescribeSourceRegionsResult","type":"structure","members":{"Marker":{},"SourceRegions":{"type":"list","member":{"locationName":"SourceRegion","type":"structure","members":{"RegionName":{},"Endpoint":{},"Status":{},"SupportsDBInstanceAutomatedBackupsReplication":{"type":"boolean"}}}}}}},"DescribeValidDBInstanceModifications":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{}}},"output":{"resultWrapper":"DescribeValidDBInstanceModificationsResult","type":"structure","members":{"ValidDBInstanceModificationsMessage":{"type":"structure","members":{"Storage":{"type":"list","member":{"locationName":"ValidStorageOptions","type":"structure","members":{"StorageType":{},"StorageSize":{"shape":"Sa7"},"ProvisionedIops":{"shape":"Sa7"},"IopsToStorageRatio":{"type":"list","member":{"locationName":"DoubleRange","type":"structure","members":{"From":{"type":"double"},"To":{"type":"double"}}}},"SupportsStorageAutoscaling":{"type":"boolean"}}}},"ValidProcessorFeatures":{"shape":"S9h"}},"wrapper":true}}}},"DownloadDBLogFilePortion":{"input":{"type":"structure","required":["DBInstanceIdentifier","LogFileName"],"members":{"DBInstanceIdentifier":{},"LogFileName":{},"Marker":{},"NumberOfLines":{"type":"integer"}}},"output":{"resultWrapper":"DownloadDBLogFilePortionResult","type":"structure","members":{"LogFileData":{},"Marker":{},"AdditionalDataPending":{"type":"boolean"}}}},"FailoverDBCluster":{"input":{"type":"structure","required":["DBClusterIdentifier"],"members":{"DBClusterIdentifier":{},"TargetDBInstanceIdentifier":{}}},"output":{"resultWrapper":"FailoverDBClusterResult","type":"structure","members":{"DBCluster":{"shape":"S1z"}}}},"FailoverGlobalCluster":{"input":{"type":"structure","required":["GlobalClusterIdentifier","TargetDbClusterIdentifier"],"members":{"GlobalClusterIdentifier":{},"TargetDbClusterIdentifier":{}}},"output":{"resultWrapper":"FailoverGlobalClusterResult","type":"structure","members":{"GlobalCluster":{"shape":"S46"}}}},"ImportInstallationMedia":{"input":{"type":"structure","required":["CustomAvailabilityZoneId","Engine","EngineVersion","EngineInstallationMediaPath","OSInstallationMediaPath"],"members":{"CustomAvailabilityZoneId":{},"Engine":{},"EngineVersion":{},"EngineInstallationMediaPath":{},"OSInstallationMediaPath":{}}},"output":{"shape":"S56","resultWrapper":"ImportInstallationMediaResult"}},"ListTagsForResource":{"input":{"type":"structure","required":["ResourceName"],"members":{"ResourceName":{},"Filters":{"shape":"S5h"}}},"output":{"resultWrapper":"ListTagsForResourceResult","type":"structure","members":{"TagList":{"shape":"Sb"}}}},"ModifyCertificates":{"input":{"type":"structure","members":{"CertificateIdentifier":{},"RemoveCustomerOverride":{"type":"boolean"}}},"output":{"resultWrapper":"ModifyCertificatesResult","type":"structure","members":{"Certificate":{"shape":"S5m"}}}},"ModifyCurrentDBClusterCapacity":{"input":{"type":"structure","required":["DBClusterIdentifier"],"members":{"DBClusterIdentifier":{},"Capacity":{"type":"integer"},"SecondsBeforeTimeout":{"type":"integer"},"TimeoutAction":{}}},"output":{"resultWrapper":"ModifyCurrentDBClusterCapacityResult","type":"structure","members":{"DBClusterIdentifier":{},"PendingCapacity":{"type":"integer"},"CurrentCapacity":{"type":"integer"},"SecondsBeforeTimeout":{"type":"integer"},"TimeoutAction":{}}}},"ModifyDBCluster":{"input":{"type":"structure","required":["DBClusterIdentifier"],"members":{"DBClusterIdentifier":{},"NewDBClusterIdentifier":{},"ApplyImmediately":{"type":"boolean"},"BackupRetentionPeriod":{"type":"integer"},"DBClusterParameterGroupName":{},"VpcSecurityGroupIds":{"shape":"S1u"},"Port":{"type":"integer"},"MasterUserPassword":{},"OptionGroupName":{},"PreferredBackupWindow":{},"PreferredMaintenanceWindow":{},"EnableIAMDatabaseAuthentication":{"type":"boolean"},"BacktrackWindow":{"type":"long"},"CloudwatchLogsExportConfiguration":{"shape":"Sar"},"EngineVersion":{},"AllowMajorVersionUpgrade":{"type":"boolean"},"DBInstanceParameterGroupName":{},"Domain":{},"DomainIAMRoleName":{},"ScalingConfiguration":{"shape":"S1x"},"DeletionProtection":{"type":"boolean"},"EnableHttpEndpoint":{"type":"boolean"},"CopyTagsToSnapshot":{"type":"boolean"},"EnableGlobalWriteForwarding":{"type":"boolean"}}},"output":{"resultWrapper":"ModifyDBClusterResult","type":"structure","members":{"DBCluster":{"shape":"S1z"}}}},"ModifyDBClusterEndpoint":{"input":{"type":"structure","required":["DBClusterEndpointIdentifier"],"members":{"DBClusterEndpointIdentifier":{},"EndpointType":{},"StaticMembers":{"shape":"Sv"},"ExcludedMembers":{"shape":"Sv"}}},"output":{"shape":"S2g","resultWrapper":"ModifyDBClusterEndpointResult"}},"ModifyDBClusterParameterGroup":{"input":{"type":"structure","required":["DBClusterParameterGroupName","Parameters"],"members":{"DBClusterParameterGroupName":{},"Parameters":{"shape":"S61"}}},"output":{"shape":"Sav","resultWrapper":"ModifyDBClusterParameterGroupResult"}},"ModifyDBClusterSnapshotAttribute":{"input":{"type":"structure","required":["DBClusterSnapshotIdentifier","AttributeName"],"members":{"DBClusterSnapshotIdentifier":{},"AttributeName":{},"ValuesToAdd":{"shape":"S6a"},"ValuesToRemove":{"shape":"S6a"}}},"output":{"resultWrapper":"ModifyDBClusterSnapshotAttributeResult","type":"structure","members":{"DBClusterSnapshotAttributesResult":{"shape":"S67"}}}},"ModifyDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"AllocatedStorage":{"type":"integer"},"DBInstanceClass":{},"DBSubnetGroupName":{},"DBSecurityGroups":{"shape":"S2m"},"VpcSecurityGroupIds":{"shape":"S1u"},"ApplyImmediately":{"type":"boolean"},"MasterUserPassword":{},"DBParameterGroupName":{},"BackupRetentionPeriod":{"type":"integer"},"PreferredBackupWindow":{},"PreferredMaintenanceWindow":{},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AllowMajorVersionUpgrade":{"type":"boolean"},"AutoMinorVersionUpgrade":{"type":"boolean"},"LicenseModel":{},"Iops":{"type":"integer"},"OptionGroupName":{},"NewDBInstanceIdentifier":{},"StorageType":{},"TdeCredentialArn":{},"TdeCredentialPassword":{},"CACertificateIdentifier":{},"Domain":{},"CopyTagsToSnapshot":{"type":"boolean"},"MonitoringInterval":{"type":"integer"},"DBPortNumber":{"type":"integer"},"PubliclyAccessible":{"type":"boolean"},"MonitoringRoleArn":{},"DomainIAMRoleName":{},"PromotionTier":{"type":"integer"},"EnableIAMDatabaseAuthentication":{"type":"boolean"},"EnablePerformanceInsights":{"type":"boolean"},"PerformanceInsightsKMSKeyId":{},"PerformanceInsightsRetentionPeriod":{"type":"integer"},"CloudwatchLogsExportConfiguration":{"shape":"Sar"},"ProcessorFeatures":{"shape":"S1b"},"UseDefaultProcessorFeatures":{"type":"boolean"},"DeletionProtection":{"type":"boolean"},"MaxAllocatedStorage":{"type":"integer"},"CertificateRotationRestart":{"type":"boolean"},"ReplicaMode":{},"EnableCustomerOwnedIp":{"type":"boolean"},"AwsBackupRecoveryPointArn":{}}},"output":{"resultWrapper":"ModifyDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"S2o"}}}},"ModifyDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName","Parameters"],"members":{"DBParameterGroupName":{},"Parameters":{"shape":"S61"}}},"output":{"shape":"Sb2","resultWrapper":"ModifyDBParameterGroupResult"}},"ModifyDBProxy":{"input":{"type":"structure","required":["DBProxyName"],"members":{"DBProxyName":{},"NewDBProxyName":{},"Auth":{"shape":"S3f"},"RequireTLS":{"type":"boolean"},"IdleClientTimeout":{"type":"integer"},"DebugLogging":{"type":"boolean"},"RoleArn":{},"SecurityGroups":{"shape":"Sv"}}},"output":{"resultWrapper":"ModifyDBProxyResult","type":"structure","members":{"DBProxy":{"shape":"S3k"}}}},"ModifyDBProxyEndpoint":{"input":{"type":"structure","required":["DBProxyEndpointName"],"members":{"DBProxyEndpointName":{},"NewDBProxyEndpointName":{},"VpcSecurityGroupIds":{"shape":"Sv"}}},"output":{"resultWrapper":"ModifyDBProxyEndpointResult","type":"structure","members":{"DBProxyEndpoint":{"shape":"S3t"}}}},"ModifyDBProxyTargetGroup":{"input":{"type":"structure","required":["TargetGroupName","DBProxyName"],"members":{"TargetGroupName":{},"DBProxyName":{},"ConnectionPoolConfig":{"type":"structure","members":{"MaxConnectionsPercent":{"type":"integer"},"MaxIdleConnectionsPercent":{"type":"integer"},"ConnectionBorrowTimeout":{"type":"integer"},"SessionPinningFilters":{"shape":"Sv"},"InitQuery":{}}},"NewName":{}}},"output":{"resultWrapper":"ModifyDBProxyTargetGroupResult","type":"structure","members":{"DBProxyTargetGroup":{"shape":"S7h"}}}},"ModifyDBSnapshot":{"input":{"type":"structure","required":["DBSnapshotIdentifier"],"members":{"DBSnapshotIdentifier":{},"EngineVersion":{},"OptionGroupName":{}}},"output":{"resultWrapper":"ModifyDBSnapshotResult","type":"structure","members":{"DBSnapshot":{"shape":"S19"}}}},"ModifyDBSnapshotAttribute":{"input":{"type":"structure","required":["DBSnapshotIdentifier","AttributeName"],"members":{"DBSnapshotIdentifier":{},"AttributeName":{},"ValuesToAdd":{"shape":"S6a"},"ValuesToRemove":{"shape":"S6a"}}},"output":{"resultWrapper":"ModifyDBSnapshotAttributeResult","type":"structure","members":{"DBSnapshotAttributesResult":{"shape":"S7x"}}}},"ModifyDBSubnetGroup":{"input":{"type":"structure","required":["DBSubnetGroupName","SubnetIds"],"members":{"DBSubnetGroupName":{},"DBSubnetGroupDescription":{},"SubnetIds":{"shape":"S40"}}},"output":{"resultWrapper":"ModifyDBSubnetGroupResult","type":"structure","members":{"DBSubnetGroup":{"shape":"S2s"}}}},"ModifyEventSubscription":{"input":{"type":"structure","required":["SubscriptionName"],"members":{"SubscriptionName":{},"SnsTopicArn":{},"SourceType":{},"EventCategories":{"shape":"S8"},"Enabled":{"type":"boolean"}}},"output":{"resultWrapper":"ModifyEventSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S6"}}}},"ModifyGlobalCluster":{"input":{"type":"structure","members":{"GlobalClusterIdentifier":{},"NewGlobalClusterIdentifier":{},"DeletionProtection":{"type":"boolean"},"EngineVersion":{},"AllowMajorVersionUpgrade":{"type":"boolean"}}},"output":{"resultWrapper":"ModifyGlobalClusterResult","type":"structure","members":{"GlobalCluster":{"shape":"S46"}}}},"ModifyOptionGroup":{"input":{"type":"structure","required":["OptionGroupName"],"members":{"OptionGroupName":{},"OptionsToInclude":{"type":"list","member":{"locationName":"OptionConfiguration","type":"structure","required":["OptionName"],"members":{"OptionName":{},"Port":{"type":"integer"},"OptionVersion":{},"DBSecurityGroupMemberships":{"shape":"S2m"},"VpcSecurityGroupMemberships":{"shape":"S1u"},"OptionSettings":{"type":"list","member":{"shape":"S1j","locationName":"OptionSetting"}}}}},"OptionsToRemove":{"type":"list","member":{}},"ApplyImmediately":{"type":"boolean"}}},"output":{"resultWrapper":"ModifyOptionGroupResult","type":"structure","members":{"OptionGroup":{"shape":"S1f"}}}},"PromoteReadReplica":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"BackupRetentionPeriod":{"type":"integer"},"PreferredBackupWindow":{}}},"output":{"resultWrapper":"PromoteReadReplicaResult","type":"structure","members":{"DBInstance":{"shape":"S2o"}}}},"PromoteReadReplicaDBCluster":{"input":{"type":"structure","required":["DBClusterIdentifier"],"members":{"DBClusterIdentifier":{}}},"output":{"resultWrapper":"PromoteReadReplicaDBClusterResult","type":"structure","members":{"DBCluster":{"shape":"S1z"}}}},"PurchaseReservedDBInstancesOffering":{"input":{"type":"structure","required":["ReservedDBInstancesOfferingId"],"members":{"ReservedDBInstancesOfferingId":{},"ReservedDBInstanceId":{},"DBInstanceCount":{"type":"integer"},"Tags":{"shape":"Sb"}}},"output":{"resultWrapper":"PurchaseReservedDBInstancesOfferingResult","type":"structure","members":{"ReservedDBInstance":{"shape":"S9q"}}}},"RebootDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"ForceFailover":{"type":"boolean"}}},"output":{"resultWrapper":"RebootDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"S2o"}}}},"RegisterDBProxyTargets":{"input":{"type":"structure","required":["DBProxyName"],"members":{"DBProxyName":{},"TargetGroupName":{},"DBInstanceIdentifiers":{"shape":"Sv"},"DBClusterIdentifiers":{"shape":"Sv"}}},"output":{"resultWrapper":"RegisterDBProxyTargetsResult","type":"structure","members":{"DBProxyTargets":{"shape":"S7l"}}}},"RemoveFromGlobalCluster":{"input":{"type":"structure","members":{"GlobalClusterIdentifier":{},"DbClusterIdentifier":{}}},"output":{"resultWrapper":"RemoveFromGlobalClusterResult","type":"structure","members":{"GlobalCluster":{"shape":"S46"}}}},"RemoveRoleFromDBCluster":{"input":{"type":"structure","required":["DBClusterIdentifier","RoleArn"],"members":{"DBClusterIdentifier":{},"RoleArn":{},"FeatureName":{}}}},"RemoveRoleFromDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier","RoleArn","FeatureName"],"members":{"DBInstanceIdentifier":{},"RoleArn":{},"FeatureName":{}}}},"RemoveSourceIdentifierFromSubscription":{"input":{"type":"structure","required":["SubscriptionName","SourceIdentifier"],"members":{"SubscriptionName":{},"SourceIdentifier":{}}},"output":{"resultWrapper":"RemoveSourceIdentifierFromSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S6"}}}},"RemoveTagsFromResource":{"input":{"type":"structure","required":["ResourceName","TagKeys"],"members":{"ResourceName":{},"TagKeys":{"type":"list","member":{}}}}},"ResetDBClusterParameterGroup":{"input":{"type":"structure","required":["DBClusterParameterGroupName"],"members":{"DBClusterParameterGroupName":{},"ResetAllParameters":{"type":"boolean"},"Parameters":{"shape":"S61"}}},"output":{"shape":"Sav","resultWrapper":"ResetDBClusterParameterGroupResult"}},"ResetDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName"],"members":{"DBParameterGroupName":{},"ResetAllParameters":{"type":"boolean"},"Parameters":{"shape":"S61"}}},"output":{"shape":"Sb2","resultWrapper":"ResetDBParameterGroupResult"}},"RestoreDBClusterFromS3":{"input":{"type":"structure","required":["DBClusterIdentifier","Engine","MasterUsername","MasterUserPassword","SourceEngine","SourceEngineVersion","S3BucketName","S3IngestionRoleArn"],"members":{"AvailabilityZones":{"shape":"S13"},"BackupRetentionPeriod":{"type":"integer"},"CharacterSetName":{},"DatabaseName":{},"DBClusterIdentifier":{},"DBClusterParameterGroupName":{},"VpcSecurityGroupIds":{"shape":"S1u"},"DBSubnetGroupName":{},"Engine":{},"EngineVersion":{},"Port":{"type":"integer"},"MasterUsername":{},"MasterUserPassword":{},"OptionGroupName":{},"PreferredBackupWindow":{},"PreferredMaintenanceWindow":{},"Tags":{"shape":"Sb"},"StorageEncrypted":{"type":"boolean"},"KmsKeyId":{},"EnableIAMDatabaseAuthentication":{"type":"boolean"},"SourceEngine":{},"SourceEngineVersion":{},"S3BucketName":{},"S3Prefix":{},"S3IngestionRoleArn":{},"BacktrackWindow":{"type":"long"},"EnableCloudwatchLogsExports":{"shape":"S1w"},"DeletionProtection":{"type":"boolean"},"CopyTagsToSnapshot":{"type":"boolean"},"Domain":{},"DomainIAMRoleName":{}}},"output":{"resultWrapper":"RestoreDBClusterFromS3Result","type":"structure","members":{"DBCluster":{"shape":"S1z"}}}},"RestoreDBClusterFromSnapshot":{"input":{"type":"structure","required":["DBClusterIdentifier","SnapshotIdentifier","Engine"],"members":{"AvailabilityZones":{"shape":"S13"},"DBClusterIdentifier":{},"SnapshotIdentifier":{},"Engine":{},"EngineVersion":{},"Port":{"type":"integer"},"DBSubnetGroupName":{},"DatabaseName":{},"OptionGroupName":{},"VpcSecurityGroupIds":{"shape":"S1u"},"Tags":{"shape":"Sb"},"KmsKeyId":{},"EnableIAMDatabaseAuthentication":{"type":"boolean"},"BacktrackWindow":{"type":"long"},"EnableCloudwatchLogsExports":{"shape":"S1w"},"EngineMode":{},"ScalingConfiguration":{"shape":"S1x"},"DBClusterParameterGroupName":{},"DeletionProtection":{"type":"boolean"},"CopyTagsToSnapshot":{"type":"boolean"},"Domain":{},"DomainIAMRoleName":{}}},"output":{"resultWrapper":"RestoreDBClusterFromSnapshotResult","type":"structure","members":{"DBCluster":{"shape":"S1z"}}}},"RestoreDBClusterToPointInTime":{"input":{"type":"structure","required":["DBClusterIdentifier","SourceDBClusterIdentifier"],"members":{"DBClusterIdentifier":{},"RestoreType":{},"SourceDBClusterIdentifier":{},"RestoreToTime":{"type":"timestamp"},"UseLatestRestorableTime":{"type":"boolean"},"Port":{"type":"integer"},"DBSubnetGroupName":{},"OptionGroupName":{},"VpcSecurityGroupIds":{"shape":"S1u"},"Tags":{"shape":"Sb"},"KmsKeyId":{},"EnableIAMDatabaseAuthentication":{"type":"boolean"},"BacktrackWindow":{"type":"long"},"EnableCloudwatchLogsExports":{"shape":"S1w"},"DBClusterParameterGroupName":{},"DeletionProtection":{"type":"boolean"},"CopyTagsToSnapshot":{"type":"boolean"},"Domain":{},"DomainIAMRoleName":{},"ScalingConfiguration":{"shape":"S1x"},"EngineMode":{}}},"output":{"resultWrapper":"RestoreDBClusterToPointInTimeResult","type":"structure","members":{"DBCluster":{"shape":"S1z"}}}},"RestoreDBInstanceFromDBSnapshot":{"input":{"type":"structure","required":["DBInstanceIdentifier","DBSnapshotIdentifier"],"members":{"DBInstanceIdentifier":{},"DBSnapshotIdentifier":{},"DBInstanceClass":{},"Port":{"type":"integer"},"AvailabilityZone":{},"DBSubnetGroupName":{},"MultiAZ":{"type":"boolean"},"PubliclyAccessible":{"type":"boolean"},"AutoMinorVersionUpgrade":{"type":"boolean"},"LicenseModel":{},"DBName":{},"Engine":{},"Iops":{"type":"integer"},"OptionGroupName":{},"Tags":{"shape":"Sb"},"StorageType":{},"TdeCredentialArn":{},"TdeCredentialPassword":{},"VpcSecurityGroupIds":{"shape":"S1u"},"Domain":{},"CopyTagsToSnapshot":{"type":"boolean"},"DomainIAMRoleName":{},"EnableIAMDatabaseAuthentication":{"type":"boolean"},"EnableCloudwatchLogsExports":{"shape":"S1w"},"ProcessorFeatures":{"shape":"S1b"},"UseDefaultProcessorFeatures":{"type":"boolean"},"DBParameterGroupName":{},"DeletionProtection":{"type":"boolean"},"EnableCustomerOwnedIp":{"type":"boolean"}}},"output":{"resultWrapper":"RestoreDBInstanceFromDBSnapshotResult","type":"structure","members":{"DBInstance":{"shape":"S2o"}}}},"RestoreDBInstanceFromS3":{"input":{"type":"structure","required":["DBInstanceIdentifier","DBInstanceClass","Engine","SourceEngine","SourceEngineVersion","S3BucketName","S3IngestionRoleArn"],"members":{"DBName":{},"DBInstanceIdentifier":{},"AllocatedStorage":{"type":"integer"},"DBInstanceClass":{},"Engine":{},"MasterUsername":{},"MasterUserPassword":{},"DBSecurityGroups":{"shape":"S2m"},"VpcSecurityGroupIds":{"shape":"S1u"},"AvailabilityZone":{},"DBSubnetGroupName":{},"PreferredMaintenanceWindow":{},"DBParameterGroupName":{},"BackupRetentionPeriod":{"type":"integer"},"PreferredBackupWindow":{},"Port":{"type":"integer"},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AutoMinorVersionUpgrade":{"type":"boolean"},"LicenseModel":{},"Iops":{"type":"integer"},"OptionGroupName":{},"PubliclyAccessible":{"type":"boolean"},"Tags":{"shape":"Sb"},"StorageType":{},"StorageEncrypted":{"type":"boolean"},"KmsKeyId":{},"CopyTagsToSnapshot":{"type":"boolean"},"MonitoringInterval":{"type":"integer"},"MonitoringRoleArn":{},"EnableIAMDatabaseAuthentication":{"type":"boolean"},"SourceEngine":{},"SourceEngineVersion":{},"S3BucketName":{},"S3Prefix":{},"S3IngestionRoleArn":{},"EnablePerformanceInsights":{"type":"boolean"},"PerformanceInsightsKMSKeyId":{},"PerformanceInsightsRetentionPeriod":{"type":"integer"},"EnableCloudwatchLogsExports":{"shape":"S1w"},"ProcessorFeatures":{"shape":"S1b"},"UseDefaultProcessorFeatures":{"type":"boolean"},"DeletionProtection":{"type":"boolean"},"MaxAllocatedStorage":{"type":"integer"}}},"output":{"resultWrapper":"RestoreDBInstanceFromS3Result","type":"structure","members":{"DBInstance":{"shape":"S2o"}}}},"RestoreDBInstanceToPointInTime":{"input":{"type":"structure","required":["TargetDBInstanceIdentifier"],"members":{"SourceDBInstanceIdentifier":{},"TargetDBInstanceIdentifier":{},"RestoreTime":{"type":"timestamp"},"UseLatestRestorableTime":{"type":"boolean"},"DBInstanceClass":{},"Port":{"type":"integer"},"AvailabilityZone":{},"DBSubnetGroupName":{},"MultiAZ":{"type":"boolean"},"PubliclyAccessible":{"type":"boolean"},"AutoMinorVersionUpgrade":{"type":"boolean"},"LicenseModel":{},"DBName":{},"Engine":{},"Iops":{"type":"integer"},"OptionGroupName":{},"CopyTagsToSnapshot":{"type":"boolean"},"Tags":{"shape":"Sb"},"StorageType":{},"TdeCredentialArn":{},"TdeCredentialPassword":{},"VpcSecurityGroupIds":{"shape":"S1u"},"Domain":{},"DomainIAMRoleName":{},"EnableIAMDatabaseAuthentication":{"type":"boolean"},"EnableCloudwatchLogsExports":{"shape":"S1w"},"ProcessorFeatures":{"shape":"S1b"},"UseDefaultProcessorFeatures":{"type":"boolean"},"DBParameterGroupName":{},"DeletionProtection":{"type":"boolean"},"SourceDbiResourceId":{},"MaxAllocatedStorage":{"type":"integer"},"SourceDBInstanceAutomatedBackupsArn":{},"EnableCustomerOwnedIp":{"type":"boolean"}}},"output":{"resultWrapper":"RestoreDBInstanceToPointInTimeResult","type":"structure","members":{"DBInstance":{"shape":"S2o"}}}},"RevokeDBSecurityGroupIngress":{"input":{"type":"structure","required":["DBSecurityGroupName"],"members":{"DBSecurityGroupName":{},"CIDRIP":{},"EC2SecurityGroupName":{},"EC2SecurityGroupId":{},"EC2SecurityGroupOwnerId":{}}},"output":{"resultWrapper":"RevokeDBSecurityGroupIngressResult","type":"structure","members":{"DBSecurityGroup":{"shape":"Sl"}}}},"StartActivityStream":{"input":{"type":"structure","required":["ResourceArn","Mode","KmsKeyId"],"members":{"ResourceArn":{},"Mode":{},"KmsKeyId":{},"ApplyImmediately":{"type":"boolean"},"EngineNativeAuditFieldsIncluded":{"type":"boolean"}}},"output":{"resultWrapper":"StartActivityStreamResult","type":"structure","members":{"KmsKeyId":{},"KinesisStreamName":{},"Status":{},"Mode":{},"ApplyImmediately":{"type":"boolean"},"EngineNativeAuditFieldsIncluded":{"type":"boolean"}}}},"StartDBCluster":{"input":{"type":"structure","required":["DBClusterIdentifier"],"members":{"DBClusterIdentifier":{}}},"output":{"resultWrapper":"StartDBClusterResult","type":"structure","members":{"DBCluster":{"shape":"S1z"}}}},"StartDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{}}},"output":{"resultWrapper":"StartDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"S2o"}}}},"StartDBInstanceAutomatedBackupsReplication":{"input":{"type":"structure","required":["SourceDBInstanceArn"],"members":{"SourceDBInstanceArn":{},"BackupRetentionPeriod":{"type":"integer"},"KmsKeyId":{},"PreSignedUrl":{}}},"output":{"resultWrapper":"StartDBInstanceAutomatedBackupsReplicationResult","type":"structure","members":{"DBInstanceAutomatedBackup":{"shape":"S4q"}}}},"StartExportTask":{"input":{"type":"structure","required":["ExportTaskIdentifier","SourceArn","S3BucketName","IamRoleArn","KmsKeyId"],"members":{"ExportTaskIdentifier":{},"SourceArn":{},"S3BucketName":{},"IamRoleArn":{},"KmsKeyId":{},"S3Prefix":{},"ExportOnly":{"shape":"Sv"}}},"output":{"shape":"Su","resultWrapper":"StartExportTaskResult"}},"StopActivityStream":{"input":{"type":"structure","required":["ResourceArn"],"members":{"ResourceArn":{},"ApplyImmediately":{"type":"boolean"}}},"output":{"resultWrapper":"StopActivityStreamResult","type":"structure","members":{"KmsKeyId":{},"KinesisStreamName":{},"Status":{}}}},"StopDBCluster":{"input":{"type":"structure","required":["DBClusterIdentifier"],"members":{"DBClusterIdentifier":{}}},"output":{"resultWrapper":"StopDBClusterResult","type":"structure","members":{"DBCluster":{"shape":"S1z"}}}},"StopDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"DBSnapshotIdentifier":{}}},"output":{"resultWrapper":"StopDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"S2o"}}}},"StopDBInstanceAutomatedBackupsReplication":{"input":{"type":"structure","required":["SourceDBInstanceArn"],"members":{"SourceDBInstanceArn":{}}},"output":{"resultWrapper":"StopDBInstanceAutomatedBackupsReplicationResult","type":"structure","members":{"DBInstanceAutomatedBackup":{"shape":"S4q"}}}}},"shapes":{"S6":{"type":"structure","members":{"CustomerAwsId":{},"CustSubscriptionId":{},"SnsTopicArn":{},"Status":{},"SubscriptionCreationTime":{},"SourceType":{},"SourceIdsList":{"shape":"S7"},"EventCategoriesList":{"shape":"S8"},"Enabled":{"type":"boolean"},"EventSubscriptionArn":{}},"wrapper":true},"S7":{"type":"list","member":{"locationName":"SourceId"}},"S8":{"type":"list","member":{"locationName":"EventCategory"}},"Sb":{"type":"list","member":{"locationName":"Tag","type":"structure","members":{"Key":{},"Value":{}}}},"Sf":{"type":"structure","members":{"ResourceIdentifier":{},"PendingMaintenanceActionDetails":{"type":"list","member":{"locationName":"PendingMaintenanceAction","type":"structure","members":{"Action":{},"AutoAppliedAfterDate":{"type":"timestamp"},"ForcedApplyDate":{"type":"timestamp"},"OptInStatus":{},"CurrentApplyDate":{"type":"timestamp"},"Description":{}}}}},"wrapper":true},"Sl":{"type":"structure","members":{"OwnerId":{},"DBSecurityGroupName":{},"DBSecurityGroupDescription":{},"VpcId":{},"EC2SecurityGroups":{"type":"list","member":{"locationName":"EC2SecurityGroup","type":"structure","members":{"Status":{},"EC2SecurityGroupName":{},"EC2SecurityGroupId":{},"EC2SecurityGroupOwnerId":{}}}},"IPRanges":{"type":"list","member":{"locationName":"IPRange","type":"structure","members":{"Status":{},"CIDRIP":{}}}},"DBSecurityGroupArn":{}},"wrapper":true},"Ss":{"type":"structure","members":{"DBClusterIdentifier":{},"BacktrackIdentifier":{},"BacktrackTo":{"type":"timestamp"},"BacktrackedFrom":{"type":"timestamp"},"BacktrackRequestCreationTime":{"type":"timestamp"},"Status":{}}},"Su":{"type":"structure","members":{"ExportTaskIdentifier":{},"SourceArn":{},"ExportOnly":{"shape":"Sv"},"SnapshotTime":{"type":"timestamp"},"TaskStartTime":{"type":"timestamp"},"TaskEndTime":{"type":"timestamp"},"S3Bucket":{},"S3Prefix":{},"IamRoleArn":{},"KmsKeyId":{},"Status":{},"PercentProgress":{"type":"integer"},"TotalExtractedDataInGB":{"type":"integer"},"FailureCause":{},"WarningMessage":{}}},"Sv":{"type":"list","member":{}},"Sz":{"type":"structure","members":{"DBClusterParameterGroupName":{},"DBParameterGroupFamily":{},"Description":{},"DBClusterParameterGroupArn":{}},"wrapper":true},"S12":{"type":"structure","members":{"AvailabilityZones":{"shape":"S13"},"DBClusterSnapshotIdentifier":{},"DBClusterIdentifier":{},"SnapshotCreateTime":{"type":"timestamp"},"Engine":{},"EngineMode":{},"AllocatedStorage":{"type":"integer"},"Status":{},"Port":{"type":"integer"},"VpcId":{},"ClusterCreateTime":{"type":"timestamp"},"MasterUsername":{},"EngineVersion":{},"LicenseModel":{},"SnapshotType":{},"PercentProgress":{"type":"integer"},"StorageEncrypted":{"type":"boolean"},"KmsKeyId":{},"DBClusterSnapshotArn":{},"SourceDBClusterSnapshotArn":{},"IAMDatabaseAuthenticationEnabled":{"type":"boolean"},"TagList":{"shape":"Sb"}},"wrapper":true},"S13":{"type":"list","member":{"locationName":"AvailabilityZone"}},"S16":{"type":"structure","members":{"DBParameterGroupName":{},"DBParameterGroupFamily":{},"Description":{},"DBParameterGroupArn":{}},"wrapper":true},"S19":{"type":"structure","members":{"DBSnapshotIdentifier":{},"DBInstanceIdentifier":{},"SnapshotCreateTime":{"type":"timestamp"},"Engine":{},"AllocatedStorage":{"type":"integer"},"Status":{},"Port":{"type":"integer"},"AvailabilityZone":{},"VpcId":{},"InstanceCreateTime":{"type":"timestamp"},"MasterUsername":{},"EngineVersion":{},"LicenseModel":{},"SnapshotType":{},"Iops":{"type":"integer"},"OptionGroupName":{},"PercentProgress":{"type":"integer"},"SourceRegion":{},"SourceDBSnapshotIdentifier":{},"StorageType":{},"TdeCredentialArn":{},"Encrypted":{"type":"boolean"},"KmsKeyId":{},"DBSnapshotArn":{},"Timezone":{},"IAMDatabaseAuthenticationEnabled":{"type":"boolean"},"ProcessorFeatures":{"shape":"S1b"},"DbiResourceId":{},"TagList":{"shape":"Sb"},"OriginalSnapshotCreateTime":{"type":"timestamp"}},"wrapper":true},"S1b":{"type":"list","member":{"locationName":"ProcessorFeature","type":"structure","members":{"Name":{},"Value":{}}}},"S1f":{"type":"structure","members":{"OptionGroupName":{},"OptionGroupDescription":{},"EngineName":{},"MajorEngineVersion":{},"Options":{"type":"list","member":{"locationName":"Option","type":"structure","members":{"OptionName":{},"OptionDescription":{},"Persistent":{"type":"boolean"},"Permanent":{"type":"boolean"},"Port":{"type":"integer"},"OptionVersion":{},"OptionSettings":{"type":"list","member":{"shape":"S1j","locationName":"OptionSetting"}},"DBSecurityGroupMemberships":{"shape":"S1k"},"VpcSecurityGroupMemberships":{"shape":"S1m"}}}},"AllowsVpcAndNonVpcInstanceMemberships":{"type":"boolean"},"VpcId":{},"OptionGroupArn":{}},"wrapper":true},"S1j":{"type":"structure","members":{"Name":{},"Value":{},"DefaultValue":{},"Description":{},"ApplyType":{},"DataType":{},"AllowedValues":{},"IsModifiable":{"type":"boolean"},"IsCollection":{"type":"boolean"}}},"S1k":{"type":"list","member":{"locationName":"DBSecurityGroup","type":"structure","members":{"DBSecurityGroupName":{},"Status":{}}}},"S1m":{"type":"list","member":{"locationName":"VpcSecurityGroupMembership","type":"structure","members":{"VpcSecurityGroupId":{},"Status":{}}}},"S1q":{"type":"structure","members":{"CustomAvailabilityZoneId":{},"CustomAvailabilityZoneName":{},"CustomAvailabilityZoneStatus":{},"VpnDetails":{"type":"structure","members":{"VpnId":{},"VpnTunnelOriginatorIP":{},"VpnGatewayIp":{},"VpnPSK":{"type":"string","sensitive":true},"VpnName":{},"VpnState":{}}}},"wrapper":true},"S1u":{"type":"list","member":{"locationName":"VpcSecurityGroupId"}},"S1w":{"type":"list","member":{}},"S1x":{"type":"structure","members":{"MinCapacity":{"type":"integer"},"MaxCapacity":{"type":"integer"},"AutoPause":{"type":"boolean"},"SecondsUntilAutoPause":{"type":"integer"},"TimeoutAction":{}}},"S1z":{"type":"structure","members":{"AllocatedStorage":{"type":"integer"},"AvailabilityZones":{"shape":"S13"},"BackupRetentionPeriod":{"type":"integer"},"CharacterSetName":{},"DatabaseName":{},"DBClusterIdentifier":{},"DBClusterParameterGroup":{},"DBSubnetGroup":{},"Status":{},"PercentProgress":{},"EarliestRestorableTime":{"type":"timestamp"},"Endpoint":{},"ReaderEndpoint":{},"CustomEndpoints":{"shape":"Sv"},"MultiAZ":{"type":"boolean"},"Engine":{},"EngineVersion":{},"LatestRestorableTime":{"type":"timestamp"},"Port":{"type":"integer"},"MasterUsername":{},"DBClusterOptionGroupMemberships":{"type":"list","member":{"locationName":"DBClusterOptionGroup","type":"structure","members":{"DBClusterOptionGroupName":{},"Status":{}}}},"PreferredBackupWindow":{},"PreferredMaintenanceWindow":{},"ReplicationSourceIdentifier":{},"ReadReplicaIdentifiers":{"type":"list","member":{"locationName":"ReadReplicaIdentifier"}},"DBClusterMembers":{"type":"list","member":{"locationName":"DBClusterMember","type":"structure","members":{"DBInstanceIdentifier":{},"IsClusterWriter":{"type":"boolean"},"DBClusterParameterGroupStatus":{},"PromotionTier":{"type":"integer"}},"wrapper":true}},"VpcSecurityGroups":{"shape":"S1m"},"HostedZoneId":{},"StorageEncrypted":{"type":"boolean"},"KmsKeyId":{},"DbClusterResourceId":{},"DBClusterArn":{},"AssociatedRoles":{"type":"list","member":{"locationName":"DBClusterRole","type":"structure","members":{"RoleArn":{},"Status":{},"FeatureName":{}}}},"IAMDatabaseAuthenticationEnabled":{"type":"boolean"},"CloneGroupId":{},"ClusterCreateTime":{"type":"timestamp"},"EarliestBacktrackTime":{"type":"timestamp"},"BacktrackWindow":{"type":"long"},"BacktrackConsumedChangeRecords":{"type":"long"},"EnabledCloudwatchLogsExports":{"shape":"S1w"},"Capacity":{"type":"integer"},"EngineMode":{},"ScalingConfigurationInfo":{"type":"structure","members":{"MinCapacity":{"type":"integer"},"MaxCapacity":{"type":"integer"},"AutoPause":{"type":"boolean"},"SecondsUntilAutoPause":{"type":"integer"},"TimeoutAction":{}}},"DeletionProtection":{"type":"boolean"},"HttpEndpointEnabled":{"type":"boolean"},"ActivityStreamMode":{},"ActivityStreamStatus":{},"ActivityStreamKmsKeyId":{},"ActivityStreamKinesisStreamName":{},"CopyTagsToSnapshot":{"type":"boolean"},"CrossAccountClone":{"type":"boolean"},"DomainMemberships":{"shape":"S2a"},"TagList":{"shape":"Sb"},"GlobalWriteForwardingStatus":{},"GlobalWriteForwardingRequested":{"type":"boolean"},"PendingModifiedValues":{"type":"structure","members":{"PendingCloudwatchLogsExports":{"shape":"S2e"},"DBClusterIdentifier":{},"MasterUserPassword":{},"IAMDatabaseAuthenticationEnabled":{"type":"boolean"},"EngineVersion":{}}}},"wrapper":true},"S2a":{"type":"list","member":{"locationName":"DomainMembership","type":"structure","members":{"Domain":{},"Status":{},"FQDN":{},"IAMRoleName":{}}}},"S2e":{"type":"structure","members":{"LogTypesToEnable":{"shape":"S1w"},"LogTypesToDisable":{"shape":"S1w"}}},"S2g":{"type":"structure","members":{"DBClusterEndpointIdentifier":{},"DBClusterIdentifier":{},"DBClusterEndpointResourceIdentifier":{},"Endpoint":{},"Status":{},"EndpointType":{},"CustomEndpointType":{},"StaticMembers":{"shape":"Sv"},"ExcludedMembers":{"shape":"Sv"},"DBClusterEndpointArn":{}}},"S2m":{"type":"list","member":{"locationName":"DBSecurityGroupName"}},"S2o":{"type":"structure","members":{"DBInstanceIdentifier":{},"DBInstanceClass":{},"Engine":{},"DBInstanceStatus":{},"MasterUsername":{},"DBName":{},"Endpoint":{"shape":"S2p"},"AllocatedStorage":{"type":"integer"},"InstanceCreateTime":{"type":"timestamp"},"PreferredBackupWindow":{},"BackupRetentionPeriod":{"type":"integer"},"DBSecurityGroups":{"shape":"S1k"},"VpcSecurityGroups":{"shape":"S1m"},"DBParameterGroups":{"type":"list","member":{"locationName":"DBParameterGroup","type":"structure","members":{"DBParameterGroupName":{},"ParameterApplyStatus":{}}}},"AvailabilityZone":{},"DBSubnetGroup":{"shape":"S2s"},"PreferredMaintenanceWindow":{},"PendingModifiedValues":{"type":"structure","members":{"DBInstanceClass":{},"AllocatedStorage":{"type":"integer"},"MasterUserPassword":{},"Port":{"type":"integer"},"BackupRetentionPeriod":{"type":"integer"},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"LicenseModel":{},"Iops":{"type":"integer"},"DBInstanceIdentifier":{},"StorageType":{},"CACertificateIdentifier":{},"DBSubnetGroupName":{},"PendingCloudwatchLogsExports":{"shape":"S2e"},"ProcessorFeatures":{"shape":"S1b"},"IAMDatabaseAuthenticationEnabled":{"type":"boolean"}}},"LatestRestorableTime":{"type":"timestamp"},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AutoMinorVersionUpgrade":{"type":"boolean"},"ReadReplicaSourceDBInstanceIdentifier":{},"ReadReplicaDBInstanceIdentifiers":{"type":"list","member":{"locationName":"ReadReplicaDBInstanceIdentifier"}},"ReadReplicaDBClusterIdentifiers":{"type":"list","member":{"locationName":"ReadReplicaDBClusterIdentifier"}},"ReplicaMode":{},"LicenseModel":{},"Iops":{"type":"integer"},"OptionGroupMemberships":{"type":"list","member":{"locationName":"OptionGroupMembership","type":"structure","members":{"OptionGroupName":{},"Status":{}}}},"CharacterSetName":{},"NcharCharacterSetName":{},"SecondaryAvailabilityZone":{},"PubliclyAccessible":{"type":"boolean"},"StatusInfos":{"type":"list","member":{"locationName":"DBInstanceStatusInfo","type":"structure","members":{"StatusType":{},"Normal":{"type":"boolean"},"Status":{},"Message":{}}}},"StorageType":{},"TdeCredentialArn":{},"DbInstancePort":{"type":"integer"},"DBClusterIdentifier":{},"StorageEncrypted":{"type":"boolean"},"KmsKeyId":{},"DbiResourceId":{},"CACertificateIdentifier":{},"DomainMemberships":{"shape":"S2a"},"CopyTagsToSnapshot":{"type":"boolean"},"MonitoringInterval":{"type":"integer"},"EnhancedMonitoringResourceArn":{},"MonitoringRoleArn":{},"PromotionTier":{"type":"integer"},"DBInstanceArn":{},"Timezone":{},"IAMDatabaseAuthenticationEnabled":{"type":"boolean"},"PerformanceInsightsEnabled":{"type":"boolean"},"PerformanceInsightsKMSKeyId":{},"PerformanceInsightsRetentionPeriod":{"type":"integer"},"EnabledCloudwatchLogsExports":{"shape":"S1w"},"ProcessorFeatures":{"shape":"S1b"},"DeletionProtection":{"type":"boolean"},"AssociatedRoles":{"type":"list","member":{"locationName":"DBInstanceRole","type":"structure","members":{"RoleArn":{},"FeatureName":{},"Status":{}}}},"ListenerEndpoint":{"shape":"S2p"},"MaxAllocatedStorage":{"type":"integer"},"TagList":{"shape":"Sb"},"DBInstanceAutomatedBackupsReplications":{"shape":"S37"},"CustomerOwnedIpEnabled":{"type":"boolean"},"AwsBackupRecoveryPointArn":{},"ActivityStreamStatus":{},"ActivityStreamKmsKeyId":{},"ActivityStreamKinesisStreamName":{},"ActivityStreamMode":{},"ActivityStreamEngineNativeAuditFieldsIncluded":{"type":"boolean"}},"wrapper":true},"S2p":{"type":"structure","members":{"Address":{},"Port":{"type":"integer"},"HostedZoneId":{}}},"S2s":{"type":"structure","members":{"DBSubnetGroupName":{},"DBSubnetGroupDescription":{},"VpcId":{},"SubnetGroupStatus":{},"Subnets":{"type":"list","member":{"locationName":"Subnet","type":"structure","members":{"SubnetIdentifier":{},"SubnetAvailabilityZone":{"shape":"S2v"},"SubnetOutpost":{"type":"structure","members":{"Arn":{}}},"SubnetStatus":{}}}},"DBSubnetGroupArn":{}},"wrapper":true},"S2v":{"type":"structure","members":{"Name":{}},"wrapper":true},"S37":{"type":"list","member":{"locationName":"DBInstanceAutomatedBackupsReplication","type":"structure","members":{"DBInstanceAutomatedBackupsArn":{}}}},"S3f":{"type":"list","member":{"type":"structure","members":{"Description":{},"UserName":{},"AuthScheme":{},"SecretArn":{},"IAMAuth":{}}}},"S3k":{"type":"structure","members":{"DBProxyName":{},"DBProxyArn":{},"Status":{},"EngineFamily":{},"VpcId":{},"VpcSecurityGroupIds":{"shape":"Sv"},"VpcSubnetIds":{"shape":"Sv"},"Auth":{"type":"list","member":{"type":"structure","members":{"Description":{},"UserName":{},"AuthScheme":{},"SecretArn":{},"IAMAuth":{}}}},"RoleArn":{},"Endpoint":{},"RequireTLS":{"type":"boolean"},"IdleClientTimeout":{"type":"integer"},"DebugLogging":{"type":"boolean"},"CreatedDate":{"type":"timestamp"},"UpdatedDate":{"type":"timestamp"}}},"S3t":{"type":"structure","members":{"DBProxyEndpointName":{},"DBProxyEndpointArn":{},"DBProxyName":{},"Status":{},"VpcId":{},"VpcSecurityGroupIds":{"shape":"Sv"},"VpcSubnetIds":{"shape":"Sv"},"Endpoint":{},"CreatedDate":{"type":"timestamp"},"TargetRole":{},"IsDefault":{"type":"boolean"}}},"S40":{"type":"list","member":{"locationName":"SubnetIdentifier"}},"S46":{"type":"structure","members":{"GlobalClusterIdentifier":{},"GlobalClusterResourceId":{},"GlobalClusterArn":{},"Status":{},"Engine":{},"EngineVersion":{},"DatabaseName":{},"StorageEncrypted":{"type":"boolean"},"DeletionProtection":{"type":"boolean"},"GlobalClusterMembers":{"type":"list","member":{"locationName":"GlobalClusterMember","type":"structure","members":{"DBClusterArn":{},"Readers":{"type":"list","member":{}},"IsWriter":{"type":"boolean"},"GlobalWriteForwardingStatus":{}},"wrapper":true}},"FailoverState":{"type":"structure","members":{"Status":{},"FromDbClusterArn":{},"ToDbClusterArn":{}},"wrapper":true}},"wrapper":true},"S4q":{"type":"structure","members":{"DBInstanceArn":{},"DbiResourceId":{},"Region":{},"DBInstanceIdentifier":{},"RestoreWindow":{"type":"structure","members":{"EarliestTime":{"type":"timestamp"},"LatestTime":{"type":"timestamp"}}},"AllocatedStorage":{"type":"integer"},"Status":{},"Port":{"type":"integer"},"AvailabilityZone":{},"VpcId":{},"InstanceCreateTime":{"type":"timestamp"},"MasterUsername":{},"Engine":{},"EngineVersion":{},"LicenseModel":{},"Iops":{"type":"integer"},"OptionGroupName":{},"TdeCredentialArn":{},"Encrypted":{"type":"boolean"},"StorageType":{},"KmsKeyId":{},"Timezone":{},"IAMDatabaseAuthenticationEnabled":{"type":"boolean"},"BackupRetentionPeriod":{"type":"integer"},"DBInstanceAutomatedBackupsArn":{},"DBInstanceAutomatedBackupsReplications":{"shape":"S37"}},"wrapper":true},"S56":{"type":"structure","members":{"InstallationMediaId":{},"CustomAvailabilityZoneId":{},"Engine":{},"EngineVersion":{},"EngineInstallationMediaPath":{},"OSInstallationMediaPath":{},"Status":{},"FailureCause":{"type":"structure","members":{"Message":{}}}}},"S5h":{"type":"list","member":{"locationName":"Filter","type":"structure","required":["Name","Values"],"members":{"Name":{},"Values":{"type":"list","member":{"locationName":"Value"}}}}},"S5m":{"type":"structure","members":{"CertificateIdentifier":{},"CertificateType":{},"Thumbprint":{},"ValidFrom":{"type":"timestamp"},"ValidTill":{"type":"timestamp"},"CertificateArn":{},"CustomerOverride":{"type":"boolean"},"CustomerOverrideValidTill":{"type":"timestamp"}},"wrapper":true},"S61":{"type":"list","member":{"locationName":"Parameter","type":"structure","members":{"ParameterName":{},"ParameterValue":{},"Description":{},"Source":{},"ApplyType":{},"DataType":{},"AllowedValues":{},"IsModifiable":{"type":"boolean"},"MinimumEngineVersion":{},"ApplyMethod":{},"SupportedEngineModes":{"shape":"S64"}}}},"S64":{"type":"list","member":{}},"S67":{"type":"structure","members":{"DBClusterSnapshotIdentifier":{},"DBClusterSnapshotAttributes":{"type":"list","member":{"locationName":"DBClusterSnapshotAttribute","type":"structure","members":{"AttributeName":{},"AttributeValues":{"shape":"S6a"}}}}},"wrapper":true},"S6a":{"type":"list","member":{"locationName":"AttributeValue"}},"S6l":{"type":"structure","members":{"CharacterSetName":{},"CharacterSetDescription":{}}},"S6m":{"type":"list","member":{"shape":"S6l","locationName":"CharacterSet"}},"S7h":{"type":"structure","members":{"DBProxyName":{},"TargetGroupName":{},"TargetGroupArn":{},"IsDefault":{"type":"boolean"},"Status":{},"ConnectionPoolConfig":{"type":"structure","members":{"MaxConnectionsPercent":{"type":"integer"},"MaxIdleConnectionsPercent":{"type":"integer"},"ConnectionBorrowTimeout":{"type":"integer"},"SessionPinningFilters":{"shape":"Sv"},"InitQuery":{}}},"CreatedDate":{"type":"timestamp"},"UpdatedDate":{"type":"timestamp"}}},"S7l":{"type":"list","member":{"type":"structure","members":{"TargetArn":{},"Endpoint":{},"TrackedClusterId":{},"RdsResourceId":{},"Port":{"type":"integer"},"Type":{},"Role":{},"TargetHealth":{"type":"structure","members":{"State":{},"Reason":{},"Description":{}}}}}},"S7x":{"type":"structure","members":{"DBSnapshotIdentifier":{},"DBSnapshotAttributes":{"type":"list","member":{"locationName":"DBSnapshotAttribute","type":"structure","members":{"AttributeName":{},"AttributeValues":{"shape":"S6a"}},"wrapper":true}}},"wrapper":true},"S88":{"type":"structure","members":{"DBParameterGroupFamily":{},"Marker":{},"Parameters":{"shape":"S61"}},"wrapper":true},"S9h":{"type":"list","member":{"locationName":"AvailableProcessorFeature","type":"structure","members":{"Name":{},"DefaultValue":{},"AllowedValues":{}}}},"S9q":{"type":"structure","members":{"ReservedDBInstanceId":{},"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"StartTime":{"type":"timestamp"},"Duration":{"type":"integer"},"FixedPrice":{"type":"double"},"UsagePrice":{"type":"double"},"CurrencyCode":{},"DBInstanceCount":{"type":"integer"},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"State":{},"RecurringCharges":{"shape":"S9s"},"ReservedDBInstanceArn":{},"LeaseId":{}},"wrapper":true},"S9s":{"type":"list","member":{"locationName":"RecurringCharge","type":"structure","members":{"RecurringChargeAmount":{"type":"double"},"RecurringChargeFrequency":{}},"wrapper":true}},"Sa7":{"type":"list","member":{"locationName":"Range","type":"structure","members":{"From":{"type":"integer"},"To":{"type":"integer"},"Step":{"type":"integer"}}}},"Sar":{"type":"structure","members":{"EnableLogTypes":{"shape":"S1w"},"DisableLogTypes":{"shape":"S1w"}}},"Sav":{"type":"structure","members":{"DBClusterParameterGroupName":{}}},"Sb2":{"type":"structure","members":{"DBParameterGroupName":{}}}}}

/***/ }),
/* 337 */
/***/ (function(module, exports) {

	module.exports = {"pagination":{"DescribeCertificates":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"Certificates"},"DescribeCustomAvailabilityZones":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"CustomAvailabilityZones"},"DescribeDBClusterBacktracks":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBClusterBacktracks"},"DescribeDBClusterEndpoints":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBClusterEndpoints"},"DescribeDBClusterParameterGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBClusterParameterGroups"},"DescribeDBClusterParameters":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"Parameters"},"DescribeDBClusterSnapshots":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBClusterSnapshots"},"DescribeDBClusters":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBClusters"},"DescribeDBEngineVersions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBEngineVersions"},"DescribeDBInstanceAutomatedBackups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBInstanceAutomatedBackups"},"DescribeDBInstances":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBInstances"},"DescribeDBLogFiles":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DescribeDBLogFiles"},"DescribeDBParameterGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBParameterGroups"},"DescribeDBParameters":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"Parameters"},"DescribeDBProxies":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBProxies"},"DescribeDBProxyEndpoints":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBProxyEndpoints"},"DescribeDBProxyTargetGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"TargetGroups"},"DescribeDBProxyTargets":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"Targets"},"DescribeDBSecurityGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBSecurityGroups"},"DescribeDBSnapshots":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBSnapshots"},"DescribeDBSubnetGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBSubnetGroups"},"DescribeEngineDefaultParameters":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"EngineDefaults.Marker","result_key":"EngineDefaults.Parameters"},"DescribeEventSubscriptions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"EventSubscriptionsList"},"DescribeEvents":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"Events"},"DescribeExportTasks":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"ExportTasks"},"DescribeGlobalClusters":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"GlobalClusters"},"DescribeInstallationMedia":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"InstallationMedia"},"DescribeOptionGroupOptions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"OptionGroupOptions"},"DescribeOptionGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"OptionGroupsList"},"DescribeOrderableDBInstanceOptions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"OrderableDBInstanceOptions"},"DescribePendingMaintenanceActions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"PendingMaintenanceActions"},"DescribeReservedDBInstances":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"ReservedDBInstances"},"DescribeReservedDBInstancesOfferings":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"ReservedDBInstancesOfferings"},"DescribeSourceRegions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"SourceRegions"},"DownloadDBLogFilePortion":{"input_token":"Marker","limit_key":"NumberOfLines","more_results":"AdditionalDataPending","output_token":"Marker","result_key":"LogFileData"},"ListTagsForResource":{"result_key":"TagList"}}}

/***/ }),
/* 338 */
/***/ (function(module, exports) {

	module.exports = {"version":2,"waiters":{"DBInstanceAvailable":{"delay":30,"operation":"DescribeDBInstances","maxAttempts":60,"acceptors":[{"expected":"available","matcher":"pathAll","state":"success","argument":"DBInstances[].DBInstanceStatus"},{"expected":"deleted","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"},{"expected":"deleting","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"},{"expected":"failed","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"},{"expected":"incompatible-restore","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"},{"expected":"incompatible-parameters","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"}]},"DBInstanceDeleted":{"delay":30,"operation":"DescribeDBInstances","maxAttempts":60,"acceptors":[{"expected":true,"matcher":"path","state":"success","argument":"length(DBInstances) == `0`"},{"expected":"DBInstanceNotFound","matcher":"error","state":"success"},{"expected":"creating","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"},{"expected":"modifying","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"},{"expected":"rebooting","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"},{"expected":"resetting-master-credentials","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"}]},"DBSnapshotAvailable":{"delay":30,"operation":"DescribeDBSnapshots","maxAttempts":60,"acceptors":[{"expected":"available","matcher":"pathAll","state":"success","argument":"DBSnapshots[].Status"},{"expected":"deleted","matcher":"pathAny","state":"failure","argument":"DBSnapshots[].Status"},{"expected":"deleting","matcher":"pathAny","state":"failure","argument":"DBSnapshots[].Status"},{"expected":"failed","matcher":"pathAny","state":"failure","argument":"DBSnapshots[].Status"},{"expected":"incompatible-restore","matcher":"pathAny","state":"failure","argument":"DBSnapshots[].Status"},{"expected":"incompatible-parameters","matcher":"pathAny","state":"failure","argument":"DBSnapshots[].Status"}]},"DBSnapshotDeleted":{"delay":30,"operation":"DescribeDBSnapshots","maxAttempts":60,"acceptors":[{"expected":true,"matcher":"path","state":"success","argument":"length(DBSnapshots) == `0`"},{"expected":"DBSnapshotNotFound","matcher":"error","state":"success"},{"expected":"creating","matcher":"pathAny","state":"failure","argument":"DBSnapshots[].Status"},{"expected":"modifying","matcher":"pathAny","state":"failure","argument":"DBSnapshots[].Status"},{"expected":"rebooting","matcher":"pathAny","state":"failure","argument":"DBSnapshots[].Status"},{"expected":"resetting-master-credentials","matcher":"pathAny","state":"failure","argument":"DBSnapshots[].Status"}]},"DBClusterSnapshotAvailable":{"delay":30,"operation":"DescribeDBClusterSnapshots","maxAttempts":60,"acceptors":[{"expected":"available","matcher":"pathAll","state":"success","argument":"DBClusterSnapshots[].Status"},{"expected":"deleted","matcher":"pathAny","state":"failure","argument":"DBClusterSnapshots[].Status"},{"expected":"deleting","matcher":"pathAny","state":"failure","argument":"DBClusterSnapshots[].Status"},{"expected":"failed","matcher":"pathAny","state":"failure","argument":"DBClusterSnapshots[].Status"},{"expected":"incompatible-restore","matcher":"pathAny","state":"failure","argument":"DBClusterSnapshots[].Status"},{"expected":"incompatible-parameters","matcher":"pathAny","state":"failure","argument":"DBClusterSnapshots[].Status"}]},"DBClusterSnapshotDeleted":{"delay":30,"operation":"DescribeDBClusterSnapshots","maxAttempts":60,"acceptors":[{"expected":true,"matcher":"path","state":"success","argument":"length(DBClusterSnapshots) == `0`"},{"expected":"DBClusterSnapshotNotFoundFault","matcher":"error","state":"success"},{"expected":"creating","matcher":"pathAny","state":"failure","argument":"DBClusterSnapshots[].Status"},{"expected":"modifying","matcher":"pathAny","state":"failure","argument":"DBClusterSnapshots[].Status"},{"expected":"rebooting","matcher":"pathAny","state":"failure","argument":"DBClusterSnapshots[].Status"},{"expected":"resetting-master-credentials","matcher":"pathAny","state":"failure","argument":"DBClusterSnapshots[].Status"}]}}}

/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	var AWS = __webpack_require__(4);
	var Service = AWS.Service;
	var apiLoader = AWS.apiLoader;

	apiLoader.services['redshift'] = {};
	AWS.Redshift = Service.defineService('redshift', ['2012-12-01']);
	Object.defineProperty(apiLoader.services['redshift'], '2012-12-01', {
	  get: function get() {
	    var model = __webpack_require__(340);
	    model.paginators = __webpack_require__(341).pagination;
	    model.waiters = __webpack_require__(342).waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});

	module.exports = AWS.Redshift;


/***/ }),
/* 340 */
/***/ (function(module, exports) {

	module.exports = {"version":"2.0","metadata":{"apiVersion":"2012-12-01","endpointPrefix":"redshift","protocol":"query","serviceFullName":"Amazon Redshift","serviceId":"Redshift","signatureVersion":"v4","uid":"redshift-2012-12-01","xmlNamespace":"http://redshift.amazonaws.com/doc/2012-12-01/"},"operations":{"AcceptReservedNodeExchange":{"input":{"type":"structure","required":["ReservedNodeId","TargetReservedNodeOfferingId"],"members":{"ReservedNodeId":{},"TargetReservedNodeOfferingId":{}}},"output":{"resultWrapper":"AcceptReservedNodeExchangeResult","type":"structure","members":{"ExchangedReservedNode":{"shape":"S4"}}}},"AddPartner":{"input":{"shape":"Sb"},"output":{"shape":"Sg","resultWrapper":"AddPartnerResult"}},"AuthorizeClusterSecurityGroupIngress":{"input":{"type":"structure","required":["ClusterSecurityGroupName"],"members":{"ClusterSecurityGroupName":{},"CIDRIP":{},"EC2SecurityGroupName":{},"EC2SecurityGroupOwnerId":{}}},"output":{"resultWrapper":"AuthorizeClusterSecurityGroupIngressResult","type":"structure","members":{"ClusterSecurityGroup":{"shape":"Sj"}}}},"AuthorizeEndpointAccess":{"input":{"type":"structure","required":["Account"],"members":{"ClusterIdentifier":{},"Account":{},"VpcIds":{"shape":"Sr"}}},"output":{"shape":"Ss","resultWrapper":"AuthorizeEndpointAccessResult"}},"AuthorizeSnapshotAccess":{"input":{"type":"structure","required":["SnapshotIdentifier","AccountWithRestoreAccess"],"members":{"SnapshotIdentifier":{},"SnapshotClusterIdentifier":{},"AccountWithRestoreAccess":{}}},"output":{"resultWrapper":"AuthorizeSnapshotAccessResult","type":"structure","members":{"Snapshot":{"shape":"Sx"}}}},"BatchDeleteClusterSnapshots":{"input":{"type":"structure","required":["Identifiers"],"members":{"Identifiers":{"type":"list","member":{"shape":"S15","locationName":"DeleteClusterSnapshotMessage"}}}},"output":{"resultWrapper":"BatchDeleteClusterSnapshotsResult","type":"structure","members":{"Resources":{"shape":"S17"},"Errors":{"type":"list","member":{"shape":"S19","locationName":"SnapshotErrorMessage"}}}}},"BatchModifyClusterSnapshots":{"input":{"type":"structure","required":["SnapshotIdentifierList"],"members":{"SnapshotIdentifierList":{"shape":"S17"},"ManualSnapshotRetentionPeriod":{"type":"integer"},"Force":{"type":"boolean"}}},"output":{"resultWrapper":"BatchModifyClusterSnapshotsResult","type":"structure","members":{"Resources":{"shape":"S17"},"Errors":{"type":"list","member":{"shape":"S19","locationName":"SnapshotErrorMessage"}}}}},"CancelResize":{"input":{"type":"structure","required":["ClusterIdentifier"],"members":{"ClusterIdentifier":{}}},"output":{"shape":"S1e","resultWrapper":"CancelResizeResult"}},"CopyClusterSnapshot":{"input":{"type":"structure","required":["SourceSnapshotIdentifier","TargetSnapshotIdentifier"],"members":{"SourceSnapshotIdentifier":{},"SourceSnapshotClusterIdentifier":{},"TargetSnapshotIdentifier":{},"ManualSnapshotRetentionPeriod":{"type":"integer"}}},"output":{"resultWrapper":"CopyClusterSnapshotResult","type":"structure","members":{"Snapshot":{"shape":"Sx"}}}},"CreateAuthenticationProfile":{"input":{"type":"structure","required":["AuthenticationProfileName","AuthenticationProfileContent"],"members":{"AuthenticationProfileName":{},"AuthenticationProfileContent":{}}},"output":{"resultWrapper":"CreateAuthenticationProfileResult","type":"structure","members":{"AuthenticationProfileName":{},"AuthenticationProfileContent":{}}}},"CreateCluster":{"input":{"type":"structure","required":["ClusterIdentifier","NodeType","MasterUsername","MasterUserPassword"],"members":{"DBName":{},"ClusterIdentifier":{},"ClusterType":{},"NodeType":{},"MasterUsername":{},"MasterUserPassword":{},"ClusterSecurityGroups":{"shape":"S1q"},"VpcSecurityGroupIds":{"shape":"S1r"},"ClusterSubnetGroupName":{},"AvailabilityZone":{},"PreferredMaintenanceWindow":{},"ClusterParameterGroupName":{},"AutomatedSnapshotRetentionPeriod":{"type":"integer"},"ManualSnapshotRetentionPeriod":{"type":"integer"},"Port":{"type":"integer"},"ClusterVersion":{},"AllowVersionUpgrade":{"type":"boolean"},"NumberOfNodes":{"type":"integer"},"PubliclyAccessible":{"type":"boolean"},"Encrypted":{"type":"boolean"},"HsmClientCertificateIdentifier":{},"HsmConfigurationIdentifier":{},"ElasticIp":{},"Tags":{"shape":"Sm"},"KmsKeyId":{},"EnhancedVpcRouting":{"type":"boolean"},"AdditionalInfo":{},"IamRoles":{"shape":"S1t"},"MaintenanceTrackName":{},"SnapshotScheduleIdentifier":{},"AvailabilityZoneRelocation":{"type":"boolean"},"AquaConfigurationStatus":{}}},"output":{"resultWrapper":"CreateClusterResult","type":"structure","members":{"Cluster":{"shape":"S1w"}}}},"CreateClusterParameterGroup":{"input":{"type":"structure","required":["ParameterGroupName","ParameterGroupFamily","Description"],"members":{"ParameterGroupName":{},"ParameterGroupFamily":{},"Description":{},"Tags":{"shape":"Sm"}}},"output":{"resultWrapper":"CreateClusterParameterGroupResult","type":"structure","members":{"ClusterParameterGroup":{"shape":"S2t"}}}},"CreateClusterSecurityGroup":{"input":{"type":"structure","required":["ClusterSecurityGroupName","Description"],"members":{"ClusterSecurityGroupName":{},"Description":{},"Tags":{"shape":"Sm"}}},"output":{"resultWrapper":"CreateClusterSecurityGroupResult","type":"structure","members":{"ClusterSecurityGroup":{"shape":"Sj"}}}},"CreateClusterSnapshot":{"input":{"type":"structure","required":["SnapshotIdentifier","ClusterIdentifier"],"members":{"SnapshotIdentifier":{},"ClusterIdentifier":{},"ManualSnapshotRetentionPeriod":{"type":"integer"},"Tags":{"shape":"Sm"}}},"output":{"resultWrapper":"CreateClusterSnapshotResult","type":"structure","members":{"Snapshot":{"shape":"Sx"}}}},"CreateClusterSubnetGroup":{"input":{"type":"structure","required":["ClusterSubnetGroupName","Description","SubnetIds"],"members":{"ClusterSubnetGroupName":{},"Description":{},"SubnetIds":{"shape":"S2z"},"Tags":{"shape":"Sm"}}},"output":{"resultWrapper":"CreateClusterSubnetGroupResult","type":"structure","members":{"ClusterSubnetGroup":{"shape":"S31"}}}},"CreateEndpointAccess":{"input":{"type":"structure","required":["EndpointName","SubnetGroupName"],"members":{"ClusterIdentifier":{},"ResourceOwner":{},"EndpointName":{},"SubnetGroupName":{},"VpcSecurityGroupIds":{"shape":"S1r"}}},"output":{"shape":"S38","resultWrapper":"CreateEndpointAccessResult"}},"CreateEventSubscription":{"input":{"type":"structure","required":["SubscriptionName","SnsTopicArn"],"members":{"SubscriptionName":{},"SnsTopicArn":{},"SourceType":{},"SourceIds":{"shape":"S3a"},"EventCategories":{"shape":"S3b"},"Severity":{},"Enabled":{"type":"boolean"},"Tags":{"shape":"Sm"}}},"output":{"resultWrapper":"CreateEventSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S3d"}}}},"CreateHsmClientCertificate":{"input":{"type":"structure","required":["HsmClientCertificateIdentifier"],"members":{"HsmClientCertificateIdentifier":{},"Tags":{"shape":"Sm"}}},"output":{"resultWrapper":"CreateHsmClientCertificateResult","type":"structure","members":{"HsmClientCertificate":{"shape":"S3g"}}}},"CreateHsmConfiguration":{"input":{"type":"structure","required":["HsmConfigurationIdentifier","Description","HsmIpAddress","HsmPartitionName","HsmPartitionPassword","HsmServerPublicCertificate"],"members":{"HsmConfigurationIdentifier":{},"Description":{},"HsmIpAddress":{},"HsmPartitionName":{},"HsmPartitionPassword":{},"HsmServerPublicCertificate":{},"Tags":{"shape":"Sm"}}},"output":{"resultWrapper":"CreateHsmConfigurationResult","type":"structure","members":{"HsmConfiguration":{"shape":"S3j"}}}},"CreateScheduledAction":{"input":{"type":"structure","required":["ScheduledActionName","TargetAction","Schedule","IamRole"],"members":{"ScheduledActionName":{},"TargetAction":{"shape":"S3l"},"Schedule":{},"IamRole":{},"ScheduledActionDescription":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Enable":{"type":"boolean"}}},"output":{"shape":"S3p","resultWrapper":"CreateScheduledActionResult"}},"CreateSnapshotCopyGrant":{"input":{"type":"structure","required":["SnapshotCopyGrantName"],"members":{"SnapshotCopyGrantName":{},"KmsKeyId":{},"Tags":{"shape":"Sm"}}},"output":{"resultWrapper":"CreateSnapshotCopyGrantResult","type":"structure","members":{"SnapshotCopyGrant":{"shape":"S3u"}}}},"CreateSnapshotSchedule":{"input":{"type":"structure","members":{"ScheduleDefinitions":{"shape":"S3w"},"ScheduleIdentifier":{},"ScheduleDescription":{},"Tags":{"shape":"Sm"},"DryRun":{"type":"boolean"},"NextInvocations":{"type":"integer"}}},"output":{"shape":"S3x","resultWrapper":"CreateSnapshotScheduleResult"}},"CreateTags":{"input":{"type":"structure","required":["ResourceName","Tags"],"members":{"ResourceName":{},"Tags":{"shape":"Sm"}}}},"CreateUsageLimit":{"input":{"type":"structure","required":["ClusterIdentifier","FeatureType","LimitType","Amount"],"members":{"ClusterIdentifier":{},"FeatureType":{},"LimitType":{},"Amount":{"type":"long"},"Period":{},"BreachAction":{},"Tags":{"shape":"Sm"}}},"output":{"shape":"S47","resultWrapper":"CreateUsageLimitResult"}},"DeleteAuthenticationProfile":{"input":{"type":"structure","required":["AuthenticationProfileName"],"members":{"AuthenticationProfileName":{}}},"output":{"resultWrapper":"DeleteAuthenticationProfileResult","type":"structure","members":{"AuthenticationProfileName":{}}}},"DeleteCluster":{"input":{"type":"structure","required":["ClusterIdentifier"],"members":{"ClusterIdentifier":{},"SkipFinalClusterSnapshot":{"type":"boolean"},"FinalClusterSnapshotIdentifier":{},"FinalClusterSnapshotRetentionPeriod":{"type":"integer"}}},"output":{"resultWrapper":"DeleteClusterResult","type":"structure","members":{"Cluster":{"shape":"S1w"}}}},"DeleteClusterParameterGroup":{"input":{"type":"structure","required":["ParameterGroupName"],"members":{"ParameterGroupName":{}}}},"DeleteClusterSecurityGroup":{"input":{"type":"structure","required":["ClusterSecurityGroupName"],"members":{"ClusterSecurityGroupName":{}}}},"DeleteClusterSnapshot":{"input":{"shape":"S15"},"output":{"resultWrapper":"DeleteClusterSnapshotResult","type":"structure","members":{"Snapshot":{"shape":"Sx"}}}},"DeleteClusterSubnetGroup":{"input":{"type":"structure","required":["ClusterSubnetGroupName"],"members":{"ClusterSubnetGroupName":{}}}},"DeleteEndpointAccess":{"input":{"type":"structure","required":["EndpointName"],"members":{"EndpointName":{}}},"output":{"shape":"S38","resultWrapper":"DeleteEndpointAccessResult"}},"DeleteEventSubscription":{"input":{"type":"structure","required":["SubscriptionName"],"members":{"SubscriptionName":{}}}},"DeleteHsmClientCertificate":{"input":{"type":"structure","required":["HsmClientCertificateIdentifier"],"members":{"HsmClientCertificateIdentifier":{}}}},"DeleteHsmConfiguration":{"input":{"type":"structure","required":["HsmConfigurationIdentifier"],"members":{"HsmConfigurationIdentifier":{}}}},"DeletePartner":{"input":{"shape":"Sb"},"output":{"shape":"Sg","resultWrapper":"DeletePartnerResult"}},"DeleteScheduledAction":{"input":{"type":"structure","required":["ScheduledActionName"],"members":{"ScheduledActionName":{}}}},"DeleteSnapshotCopyGrant":{"input":{"type":"structure","required":["SnapshotCopyGrantName"],"members":{"SnapshotCopyGrantName":{}}}},"DeleteSnapshotSchedule":{"input":{"type":"structure","required":["ScheduleIdentifier"],"members":{"ScheduleIdentifier":{}}}},"DeleteTags":{"input":{"type":"structure","required":["ResourceName","TagKeys"],"members":{"ResourceName":{},"TagKeys":{"shape":"S4o"}}}},"DeleteUsageLimit":{"input":{"type":"structure","required":["UsageLimitId"],"members":{"UsageLimitId":{}}}},"DescribeAccountAttributes":{"input":{"type":"structure","members":{"AttributeNames":{"type":"list","member":{"locationName":"AttributeName"}}}},"output":{"resultWrapper":"DescribeAccountAttributesResult","type":"structure","members":{"AccountAttributes":{"type":"list","member":{"locationName":"AccountAttribute","type":"structure","members":{"AttributeName":{},"AttributeValues":{"type":"list","member":{"locationName":"AttributeValueTarget","type":"structure","members":{"AttributeValue":{}}}}}}}}}},"DescribeAuthenticationProfiles":{"input":{"type":"structure","members":{"AuthenticationProfileName":{}}},"output":{"resultWrapper":"DescribeAuthenticationProfilesResult","type":"structure","members":{"AuthenticationProfiles":{"type":"list","member":{"type":"structure","members":{"AuthenticationProfileName":{},"AuthenticationProfileContent":{}}}}}}},"DescribeClusterDbRevisions":{"input":{"type":"structure","members":{"ClusterIdentifier":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeClusterDbRevisionsResult","type":"structure","members":{"Marker":{},"ClusterDbRevisions":{"type":"list","member":{"locationName":"ClusterDbRevision","type":"structure","members":{"ClusterIdentifier":{},"CurrentDatabaseRevision":{},"DatabaseRevisionReleaseDate":{"type":"timestamp"},"RevisionTargets":{"type":"list","member":{"locationName":"RevisionTarget","type":"structure","members":{"DatabaseRevision":{},"Description":{},"DatabaseRevisionReleaseDate":{"type":"timestamp"}}}}}}}}}},"DescribeClusterParameterGroups":{"input":{"type":"structure","members":{"ParameterGroupName":{},"MaxRecords":{"type":"integer"},"Marker":{},"TagKeys":{"shape":"S4o"},"TagValues":{"shape":"S58"}}},"output":{"resultWrapper":"DescribeClusterParameterGroupsResult","type":"structure","members":{"Marker":{},"ParameterGroups":{"type":"list","member":{"shape":"S2t","locationName":"ClusterParameterGroup"}}}}},"DescribeClusterParameters":{"input":{"type":"structure","required":["ParameterGroupName"],"members":{"ParameterGroupName":{},"Source":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeClusterParametersResult","type":"structure","members":{"Parameters":{"shape":"S5d"},"Marker":{}}}},"DescribeClusterSecurityGroups":{"input":{"type":"structure","members":{"ClusterSecurityGroupName":{},"MaxRecords":{"type":"integer"},"Marker":{},"TagKeys":{"shape":"S4o"},"TagValues":{"shape":"S58"}}},"output":{"resultWrapper":"DescribeClusterSecurityGroupsResult","type":"structure","members":{"Marker":{},"ClusterSecurityGroups":{"type":"list","member":{"shape":"Sj","locationName":"ClusterSecurityGroup"}}}}},"DescribeClusterSnapshots":{"input":{"type":"structure","members":{"ClusterIdentifier":{},"SnapshotIdentifier":{},"SnapshotType":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"MaxRecords":{"type":"integer"},"Marker":{},"OwnerAccount":{},"TagKeys":{"shape":"S4o"},"TagValues":{"shape":"S58"},"ClusterExists":{"type":"boolean"},"SortingEntities":{"type":"list","member":{"locationName":"SnapshotSortingEntity","type":"structure","required":["Attribute"],"members":{"Attribute":{},"SortOrder":{}}}}}},"output":{"resultWrapper":"DescribeClusterSnapshotsResult","type":"structure","members":{"Marker":{},"Snapshots":{"type":"list","member":{"shape":"Sx","locationName":"Snapshot"}}}}},"DescribeClusterSubnetGroups":{"input":{"type":"structure","members":{"ClusterSubnetGroupName":{},"MaxRecords":{"type":"integer"},"Marker":{},"TagKeys":{"shape":"S4o"},"TagValues":{"shape":"S58"}}},"output":{"resultWrapper":"DescribeClusterSubnetGroupsResult","type":"structure","members":{"Marker":{},"ClusterSubnetGroups":{"type":"list","member":{"shape":"S31","locationName":"ClusterSubnetGroup"}}}}},"DescribeClusterTracks":{"input":{"type":"structure","members":{"MaintenanceTrackName":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeClusterTracksResult","type":"structure","members":{"MaintenanceTracks":{"type":"list","member":{"locationName":"MaintenanceTrack","type":"structure","members":{"MaintenanceTrackName":{},"DatabaseVersion":{},"UpdateTargets":{"type":"list","member":{"locationName":"UpdateTarget","type":"structure","members":{"MaintenanceTrackName":{},"DatabaseVersion":{},"SupportedOperations":{"type":"list","member":{"locationName":"SupportedOperation","type":"structure","members":{"OperationName":{}}}}}}}}}},"Marker":{}}}},"DescribeClusterVersions":{"input":{"type":"structure","members":{"ClusterVersion":{},"ClusterParameterGroupFamily":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeClusterVersionsResult","type":"structure","members":{"Marker":{},"ClusterVersions":{"type":"list","member":{"locationName":"ClusterVersion","type":"structure","members":{"ClusterVersion":{},"ClusterParameterGroupFamily":{},"Description":{}}}}}}},"DescribeClusters":{"input":{"type":"structure","members":{"ClusterIdentifier":{},"MaxRecords":{"type":"integer"},"Marker":{},"TagKeys":{"shape":"S4o"},"TagValues":{"shape":"S58"}}},"output":{"resultWrapper":"DescribeClustersResult","type":"structure","members":{"Marker":{},"Clusters":{"type":"list","member":{"shape":"S1w","locationName":"Cluster"}}}}},"DescribeDefaultClusterParameters":{"input":{"type":"structure","required":["ParameterGroupFamily"],"members":{"ParameterGroupFamily":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDefaultClusterParametersResult","type":"structure","members":{"DefaultClusterParameters":{"type":"structure","members":{"ParameterGroupFamily":{},"Marker":{},"Parameters":{"shape":"S5d"}},"wrapper":true}}}},"DescribeEndpointAccess":{"input":{"type":"structure","members":{"ClusterIdentifier":{},"ResourceOwner":{},"EndpointName":{},"VpcId":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEndpointAccessResult","type":"structure","members":{"EndpointAccessList":{"type":"list","member":{"shape":"S38"}},"Marker":{}}}},"DescribeEndpointAuthorization":{"input":{"type":"structure","members":{"ClusterIdentifier":{},"Account":{},"Grantee":{"type":"boolean"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEndpointAuthorizationResult","type":"structure","members":{"EndpointAuthorizationList":{"type":"list","member":{"shape":"Ss"}},"Marker":{}}}},"DescribeEventCategories":{"input":{"type":"structure","members":{"SourceType":{}}},"output":{"resultWrapper":"DescribeEventCategoriesResult","type":"structure","members":{"EventCategoriesMapList":{"type":"list","member":{"locationName":"EventCategoriesMap","type":"structure","members":{"SourceType":{},"Events":{"type":"list","member":{"locationName":"EventInfoMap","type":"structure","members":{"EventId":{},"EventCategories":{"shape":"S3b"},"EventDescription":{},"Severity":{}},"wrapper":true}}},"wrapper":true}}}}},"DescribeEventSubscriptions":{"input":{"type":"structure","members":{"SubscriptionName":{},"MaxRecords":{"type":"integer"},"Marker":{},"TagKeys":{"shape":"S4o"},"TagValues":{"shape":"S58"}}},"output":{"resultWrapper":"DescribeEventSubscriptionsResult","type":"structure","members":{"Marker":{},"EventSubscriptionsList":{"type":"list","member":{"shape":"S3d","locationName":"EventSubscription"}}}}},"DescribeEvents":{"input":{"type":"structure","members":{"SourceIdentifier":{},"SourceType":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Duration":{"type":"integer"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEventsResult","type":"structure","members":{"Marker":{},"Events":{"type":"list","member":{"locationName":"Event","type":"structure","members":{"SourceIdentifier":{},"SourceType":{},"Message":{},"EventCategories":{"shape":"S3b"},"Severity":{},"Date":{"type":"timestamp"},"EventId":{}}}}}}},"DescribeHsmClientCertificates":{"input":{"type":"structure","members":{"HsmClientCertificateIdentifier":{},"MaxRecords":{"type":"integer"},"Marker":{},"TagKeys":{"shape":"S4o"},"TagValues":{"shape":"S58"}}},"output":{"resultWrapper":"DescribeHsmClientCertificatesResult","type":"structure","members":{"Marker":{},"HsmClientCertificates":{"type":"list","member":{"shape":"S3g","locationName":"HsmClientCertificate"}}}}},"DescribeHsmConfigurations":{"input":{"type":"structure","members":{"HsmConfigurationIdentifier":{},"MaxRecords":{"type":"integer"},"Marker":{},"TagKeys":{"shape":"S4o"},"TagValues":{"shape":"S58"}}},"output":{"resultWrapper":"DescribeHsmConfigurationsResult","type":"structure","members":{"Marker":{},"HsmConfigurations":{"type":"list","member":{"shape":"S3j","locationName":"HsmConfiguration"}}}}},"DescribeLoggingStatus":{"input":{"type":"structure","required":["ClusterIdentifier"],"members":{"ClusterIdentifier":{}}},"output":{"shape":"S72","resultWrapper":"DescribeLoggingStatusResult"}},"DescribeNodeConfigurationOptions":{"input":{"type":"structure","required":["ActionType"],"members":{"ActionType":{},"ClusterIdentifier":{},"SnapshotIdentifier":{},"OwnerAccount":{},"Filters":{"locationName":"Filter","type":"list","member":{"locationName":"NodeConfigurationOptionsFilter","type":"structure","members":{"Name":{},"Operator":{},"Values":{"shape":"S79","locationName":"Value"}}}},"Marker":{},"MaxRecords":{"type":"integer"}}},"output":{"resultWrapper":"DescribeNodeConfigurationOptionsResult","type":"structure","members":{"NodeConfigurationOptionList":{"type":"list","member":{"locationName":"NodeConfigurationOption","type":"structure","members":{"NodeType":{},"NumberOfNodes":{"type":"integer"},"EstimatedDiskUtilizationPercent":{"type":"double"},"Mode":{}}}},"Marker":{}}}},"DescribeOrderableClusterOptions":{"input":{"type":"structure","members":{"ClusterVersion":{},"NodeType":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeOrderableClusterOptionsResult","type":"structure","members":{"OrderableClusterOptions":{"type":"list","member":{"locationName":"OrderableClusterOption","type":"structure","members":{"ClusterVersion":{},"ClusterType":{},"NodeType":{},"AvailabilityZones":{"type":"list","member":{"shape":"S34","locationName":"AvailabilityZone"}}},"wrapper":true}},"Marker":{}}}},"DescribePartners":{"input":{"type":"structure","required":["AccountId","ClusterIdentifier"],"members":{"AccountId":{},"ClusterIdentifier":{},"DatabaseName":{},"PartnerName":{}}},"output":{"resultWrapper":"DescribePartnersResult","type":"structure","members":{"PartnerIntegrationInfoList":{"type":"list","member":{"locationName":"PartnerIntegrationInfo","type":"structure","members":{"DatabaseName":{},"PartnerName":{},"Status":{},"StatusMessage":{},"CreatedAt":{"type":"timestamp"},"UpdatedAt":{"type":"timestamp"}}}}}}},"DescribeReservedNodeOfferings":{"input":{"type":"structure","members":{"ReservedNodeOfferingId":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeReservedNodeOfferingsResult","type":"structure","members":{"Marker":{},"ReservedNodeOfferings":{"shape":"S7r"}}}},"DescribeReservedNodes":{"input":{"type":"structure","members":{"ReservedNodeId":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeReservedNodesResult","type":"structure","members":{"Marker":{},"ReservedNodes":{"type":"list","member":{"shape":"S4","locationName":"ReservedNode"}}}}},"DescribeResize":{"input":{"type":"structure","required":["ClusterIdentifier"],"members":{"ClusterIdentifier":{}}},"output":{"shape":"S1e","resultWrapper":"DescribeResizeResult"}},"DescribeScheduledActions":{"input":{"type":"structure","members":{"ScheduledActionName":{},"TargetActionType":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Active":{"type":"boolean"},"Filters":{"type":"list","member":{"locationName":"ScheduledActionFilter","type":"structure","required":["Name","Values"],"members":{"Name":{},"Values":{"shape":"S79"}}}},"Marker":{},"MaxRecords":{"type":"integer"}}},"output":{"resultWrapper":"DescribeScheduledActionsResult","type":"structure","members":{"Marker":{},"ScheduledActions":{"type":"list","member":{"shape":"S3p","locationName":"ScheduledAction"}}}}},"DescribeSnapshotCopyGrants":{"input":{"type":"structure","members":{"SnapshotCopyGrantName":{},"MaxRecords":{"type":"integer"},"Marker":{},"TagKeys":{"shape":"S4o"},"TagValues":{"shape":"S58"}}},"output":{"resultWrapper":"DescribeSnapshotCopyGrantsResult","type":"structure","members":{"Marker":{},"SnapshotCopyGrants":{"type":"list","member":{"shape":"S3u","locationName":"SnapshotCopyGrant"}}}}},"DescribeSnapshotSchedules":{"input":{"type":"structure","members":{"ClusterIdentifier":{},"ScheduleIdentifier":{},"TagKeys":{"shape":"S4o"},"TagValues":{"shape":"S58"},"Marker":{},"MaxRecords":{"type":"integer"}}},"output":{"resultWrapper":"DescribeSnapshotSchedulesResult","type":"structure","members":{"SnapshotSchedules":{"type":"list","member":{"shape":"S3x","locationName":"SnapshotSchedule"}},"Marker":{}}}},"DescribeStorage":{"output":{"resultWrapper":"DescribeStorageResult","type":"structure","members":{"TotalBackupSizeInMegaBytes":{"type":"double"},"TotalProvisionedStorageInMegaBytes":{"type":"double"}}}},"DescribeTableRestoreStatus":{"input":{"type":"structure","members":{"ClusterIdentifier":{},"TableRestoreRequestId":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeTableRestoreStatusResult","type":"structure","members":{"TableRestoreStatusDetails":{"type":"list","member":{"shape":"S8e","locationName":"TableRestoreStatus"}},"Marker":{}}}},"DescribeTags":{"input":{"type":"structure","members":{"ResourceName":{},"ResourceType":{},"MaxRecords":{"type":"integer"},"Marker":{},"TagKeys":{"shape":"S4o"},"TagValues":{"shape":"S58"}}},"output":{"resultWrapper":"DescribeTagsResult","type":"structure","members":{"TaggedResources":{"type":"list","member":{"locationName":"TaggedResource","type":"structure","members":{"Tag":{"shape":"Sn"},"ResourceName":{},"ResourceType":{}}}},"Marker":{}}}},"DescribeUsageLimits":{"input":{"type":"structure","members":{"UsageLimitId